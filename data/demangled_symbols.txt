_init
_fini
__nnDetailNintendoSdkRuntimeObjectFileRefer
EdRefBound::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
Bound::GetBoundName() const
EdRefBound::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
Bound::SetBoundName(char const*)
Bound::RegisterBaseClass()
Bound::GetTransform(VuMtx&) const
Bound::Bound(EdRegContext&)
Bound::GetClass() const
Bound::GetUid() const
Bound::IsInside(VuVec const&) const
BoundEdPlaceableHelper::BoundEdPlaceableHelper(int)
BoundEdPlaceableHelper::Initialise()
Bound::~Bound()
Bound::~Bound()
Placeable::GetNuUniqueObjectBase()
IAnimatable::GetAnimationInstance() const
Bound::GetPosition(VuVec&) const
Bound::SetPosition(VuVec const&)
Placeable::Activate()
Placeable::Deactivate()
Placeable::IsActive() const
PlaceableBase::ToInfinityAndBeyond()
PlaceableBase::IsGadgetSimpleProp()
Bound::GetAppData()
Bound::SetAppData(GameAppData*)
non-virtual thunk to Bound::~Bound()
non-virtual thunk to Bound::~Bound()
NuUniqueObject::DestroysOnUnreferenced() const
EdRefBound::~EdRefBound()
EdRef::ExcludeFromEditor()
BoundEdPlaceableHelper::~BoundEdPlaceableHelper()
EdClassHelperT<PlaceableInterface, PlaceableBase, EdPlaceableHelper>::GetManagerId()
EdClassInterface::Process(void*, float)
EdClassInterface::SerialiseObject(void*, EdSerialiseParams&)
EdClassInterface::CanMultiReference() const
EdClassInterface::AllowSlowSmartPtrFixup(EdClass*) const
EdClassInterface::ThrowAwayObjectWhenSerialisedIn(void*) const
EdClassInterface::GetSerialisePlatformOverride() const
NuSmartPtr<NuMtl, true>::~NuSmartPtr()
CatchRobbersUI::LoadFunc()
CatchRobbersUI::InitFunc()
CatchRobbersUI::ExitFunc()
CatchRobbersUI::UpdateFunc(float)
CatchRobbersUI::RenderPressToPlayFunc(float)
CatchRobbersUI::RenderStartFunc(LegoLevelContainer*, float)
CatchRobbersUI::RenderFunc(float)
CatchRobbersUI::RenderCompleteFunc(float)
CatchRobbersUI::Render3D()
CatchRobbersUI::CaughtRobber()
CreatureSetSystem::CreatureSetSystem()
CreatureSet::Release()
CreatureSetSystem::~CreatureSetSystem()
CreatureSetSystem::~CreatureSetSystem()
CreatureSetSystem::CreateSet(short, int, AIConvexLocatorSet*, char const*, float, float, float)
CreatureSet::SetUp(short, int, AIConvexLocatorSet*, char const*, float, float, float)
CreatureSetSystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CreatureSet::Process()
CreatureSetSystem::NotifyDestroyGameObject(GameObject&)
CreatureSet::NotifyDestroyGameObject(GameObject&)
CreatureSetSystem::AddManagersForLevel(LegoLevelContainer&)
CreatureSetSystem::RemoveManagersForLevel(LegoLevelContainer&)
CreatureSetSystem::OnEnterLevel(LegoLevelContainer&)
CreatureSetSystem::OnExitLevel(LegoLevelContainer&)
CreatureSetSystem::OnResetLevel(LegoLevelContainer&)
CreatureSet::~CreatureSet()
CreatureSet::KillCreatures(GameObject*)
CreatureSet::SpawnCreatures(GameObject*)
CreatureSetManager::CreatureSetManager()
CreatureSetManager::~CreatureSetManager()
CreatureSetManager::~CreatureSetManager()
CreatureSetManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
CreatureSetManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ClassManager::EventNotify(Event&, NuEventData&)
ClassManager::RegisterProcessing()
ClassManager::RegisterRendering()
ClassManager::IsProcessingPaused() const
ClassManager::SetProcessingPaused(int)
ClassManager::IsRenderingPaused() const
ClassManager::SetRenderingPaused(int)
ClassManager::IsChildlessManager()
ClassManager::SupportsLevelContainerFindObject(EdClass*)
ClassManager::LevelContainerFindObject(char const*, EdClass*, short, void*)
MechSystem::GetManagerName() const
MechSystem::OnInitPostConfig()
MechSystem::ParseCommandLine(int, char**)
MechSystem::ParseGameConfigEntry(nufpar_s*)
MechSystem::ParseLevelConfigEntry(nufpar_s*)
MechSystem::Init()
MechSystem::ShutDown()
LegoManager::GetManagerName() const
LegoManager::GetClass(int)
LegoManager::GetNumClasses()
CreatureSetHelper::~CreatureSetHelper()
EdClassHelperT<EdClassInterface, void, EdClassHelper>::GetManagerId()
MechHelper::Initialise()
GetLegoCityExtraActionCount()
LCDialogueParser::LCDialogueParser()
LCDialogueParser::~LCDialogueParser()
LCDialogueParser::Parse(DynamicString)
LCDialogueParser::ParseFile()
LCDialogueParser::ParseDialogue()
LCDialogueEntry::LCDialogueEntry()
LCDialogueEntry::~LCDialogueEntry()
LCDialogueEntry::~LCDialogueEntry()
LCDialogueSystem::LCDialogueSystem()
LCDialogueSystem::~LCDialogueSystem()
LCDialogueSystem::~LCDialogueSystem()
LCDialogueSystem::GetDialogueLocationFromString(char const*, unsigned long&)
LCDialogueSystem::GetDialogueLocationFromAIChar(MechCharacter*, unsigned long&)
LCDialogueSystem::GetDialogueTypeFromAIChar(MechCharacter*, eLCDialogueType&)
LCDialogueSystem::GetStimulusFromString(char const*, eLCDialogueStimulus&)
LCDialogueSystem::GetDialogueTypeFromString(char const*, eLCDialogueType&)
LCDialogueSystem::AddDialogue(LCDialogueEntry*, eLCDialogueStimulus, eLCDialogueType)
LCDialogueSystem::LoadConfigFile(char const*)
LCDialogueSystem::RequestDialogue(MechCharacter*, eLCDialogueStimulus)
LCDialogueSystem::Init()
LCDialogueSystem::ShutDown()
LCDialogueSystem::AddManagersForLevel(LegoLevelContainer&)
LCDialogueSystem::RemoveManagersForLevel(LegoLevelContainer&)
LCDialogueSystem::OnEnterLevel(LegoLevelContainer&)
LCDialogueSystem::OnExitLevel(LegoLevelContainer&)
LCDialogueSystem::OnResetLevel(LegoLevelContainer&)
LCDialogueSystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LCDialogueSystem::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LCDialogueSystem::EventNotify(Event&, NuEventData&)
DynamicallyAvailableObject::DynamicallyAvailableObject()
DynamicallyAvailableObject::~DynamicallyAvailableObject()
DynamicallyAvailableObject::~DynamicallyAvailableObject()
DynamicallyAvailableObject::UpdatePrepareInternal(bool)
DynamicallyAvailableObject::UpdateReleaseInternal(bool)
DynamicallyAvailableObject::UpdateAvailability()
DynamicallyAvailableObject::IsAvailabilityRequired()
DynamicallyAvailableObject::SetAvailabilityRequired(bool)
DynamicallyAvailableObject::AvailabilityRequirementChanged()
DynamicallyAvailableObject::GetAvailabilityState()
DynamicallyAvailableObject::PendingRequirementChange()
DynamicallyAvailableObject::AbortPrepare()
DynamicallyAvailableObject::IsAvailable()
DynamicallyAvailableObject::IsFullyUnavailable()
DynamicallyAvailableObject::IsPreparingAvailability()
DynamicallyAvailableObject::IsReleasingAvailability()
DynamicallyAvailableObject::IsAvailabilityInTransition()
DynamicallyAvailableObject::GroupUpdater::GroupUpdater()
DynamicallyAvailableObject::GroupUpdater::~GroupUpdater()
DynamicallyAvailableObject::GroupUpdater::Reset()
DynamicallyAvailableObject::GroupUpdater::UpdateObject(DynamicallyAvailableObject*)
DynamicallyAvailableObject::GroupUpdater::CheckObject(DynamicallyAvailableObject*)
DynamicallyAvailableObject::GroupUpdater::AnyObjectsInTransition()
DynamicallyAvailableObject::GroupUpdater::AllAvailable()
DynamicallyAvailableObject::GroupUpdater::AllReleased()
DynamicallyAvailableObject::GroupUpdater::AllStatesMatch()
DynamicallyAvailableObject::GroupUpdater::GetCommonState()
DynamicScriptStub::DynamicScriptStub(ScriptManager*)
DynamicScriptStub::~DynamicScriptStub()
DynamicScriptStub::DestroyContext()
DynamicScriptStub::~DynamicScriptStub()
DynamicScriptStub::GetScriptManager()
DynamicScriptStub::UpdatePrepare(bool)
DynamicScriptStub::StartLoading()
DynamicScriptStub::LoadHasFinished()
DynamicScriptStub::UpdateRelease(bool)
DynamicScriptStub::StartUnloading()
DynamicScriptStub::UnloadHasFinished()
DynamicScriptStub::UpdateAvailable()
DynamicScriptStub::Update()
NormaliseSlashes(char*)
DynamicScriptStub::EnsureScopesExist(char const**, int)
DynamicScriptStub::GetBaseContext()
DynamicScriptStub::LoadScriptFor(DynamicScriptStub*)
DynamicScriptStub::LoadProcessBg(void*)
DynamicScriptStub::StartContextCleanup()
DynamicScriptStub::ContextCleanupHasFinished()
DynamicScriptStub::StartContextSetup()
DynamicScriptStub::ContextSetupHasFinished()
CustomRenderer::CustomRenderer(LevelViewType)
CustomRenderer::~CustomRenderer()
CustomRenderer::Clear()
CustomRenderer::~CustomRenderer()
CustomRenderer::SetName(HashedKey const&)
CustomRenderer::SetNameFrom(MechObjectInterface*)
CustomRenderer::GetName() const
CustomRenderer::GetRenderSlot()
CustomRenderer::AttachToSlot(HashedKey const&)
CustomRenderSystem::FindSlotWithName(HashedKey const&) const
CustomRenderer::AttachToSlot(CustomRenderSystem::Slot*)
CustomRenderer::AttachToDynamicSlot(HashedKey const&)
CustomRenderSystem::GetUnusedDynamicSlot(HashedKey const&) const
CustomRenderer::Detach()
CustomRenderSystem::Slot::IsActive() const
CustomRenderSystem::Slot::GetPipeIndex() const
CustomRenderSystem::AttachRendererToSlot(CustomRenderer&, CustomRenderSystem::Slot&)
CustomRenderSystem::DetachRendererFromSlot(CustomRenderer&, CustomRenderSystem::Slot&)
CustomRenderer::SetEnabled(bool)
CustomRenderer::UpdateActiveState()
CustomRenderer::IsEnabled() const
CustomRenderer::IsActive() const
CustomRenderer::ProcessEarly()
CustomRenderer::SetupCameraInternal()
CustomRenderer::SetupRenderPipeInternal()
CustomRenderer::ConfigurePipeCallbacks(NuRenderPipe&)
CustomRenderSystem::RenderMain3dFn(void*)
CustomRenderSystem::RenderAfterDeferredFn(void*)
CustomRenderSystem::RenderAfterFinalPostEffectsFn(void*)
CustomRenderSystem::RenderHUDFn(void*)
CustomRenderer::WorldToRenderTarget(VuVec const&, VuVec&) const
CustomRenderer::GetTargetViewportScale(float&, float&) const
CustomRenderer::GetTargetUV() const
CustomRenderer::AllocateRenderTarget(int, int, bool)
CustomRenderSystem::CreateRenderTarget(int, int, bool, NuSmartPtr<NuTexture, true>&)
CustomRenderer::SetPipeTexture(NuSmartPtr<NuTexture, true> const&)
CustomRenderer::AllocateImpostor(int, int)
CustomRenderer::CreateRenderingMaterial(bool, NuSmartPtr<NuMtl, true>&) const
CustomRenderer::CreatePipe(int)
CustomRenderer::DestroyPipe()
CustomRenderer::SetActiveInternal(bool)
CustomRenderer::ShouldBeActive() const
CustomRenderer::GetRenderTargetAspect()
CustomRenderer::SetAspect(float)
CustomRenderer::RefreshAspectFromTarget()
CustomRenderer::SetPipeImpostor(NuImpostor*)
CustomRenderSourceId::CustomRenderSourceId()
CustomRenderSourceId::CustomRenderSourceId(HashedKey const&, CustomRenderSourceId::Type)
CustomRenderSourceId::CustomRenderSourceId(CustomRenderSourceId const&)
CustomRenderSourceId::operator=(CustomRenderSourceId const&)
CustomRenderSourceId::operator==(CustomRenderSourceId const&) const
CustomRenderSourceId::operator!=(CustomRenderSourceId const&) const
CustomRenderSourceId::~CustomRenderSourceId()
CustomRenderSourceId::ForSlot(HashedKey const&)
CustomRenderSourceId::ForRenderer(HashedKey const&)
CustomRenderSourceId::AutoDetect(HashedKey const&, HashedKey const&, MechObjectInterface*)
CustomRenderSourceId::GetType() const
CustomRenderSourceId::GetName() const
CustomRenderSourceId::Resolve() const
CustomRenderSystem::GetRendererForSlot(HashedKey const&) const
CustomRenderSystem::FindAttachedRendererWithName(HashedKey const&) const
CustomRenderSourceId::IsForRenderer(CustomRenderer*) const
CustomRenderSourceId::IsValid() const
CustomRenderSystem::Slot::GetName() const
CustomRenderSourceId::Clear()
CustomRendererClient::CustomRendererClient()
CustomRendererClient::~CustomRendererClient()
CustomRendererClient::~CustomRendererClient()
CustomRendererClient::Register(CustomRenderSourceId const&)
CustomRendererClient::Unregister()
CustomRenderSystem::RegisterClient(CustomRendererClient*)
CustomRenderSystem::UnregisterClient(CustomRendererClient*)
CustomRendererClient::GetActiveRenderer()
CustomRendererClient::AttachedInternal(CustomRenderer*)
CustomRendererClient::DetachedInternal(CustomRenderer*)
CustomRenderSystem::Slot::Slot(char const*, bool)
CustomRenderSystem::Slot::~Slot()
CustomRenderSystem::Slot::IsValid() const
CustomRenderSystem::Slot::IsDynamic() const
CustomRenderSystem::Slot::GetAssignedRenderer() const
CustomRenderSystem::ClientRegistration::ClientRegistration(CustomRendererClient*)
CustomRenderSystem::CustomRenderSystem()
CustomRenderSystem::~CustomRenderSystem()
CustomRenderSystem::~CustomRenderSystem()
CustomRenderSystem::EventNotify(Event&, NuEventData&)
CustomRenderSystem::AllocateRenderPipes()
CustomRenderSystem::SetSuppressed(bool)
CustomRenderSystem::GetRenderPipeForSlot(HashedKey const&) const
CustomRenderSystem::AddSlot(char const*)
CustomRenderSystem::AddDynamicSlots(int, char const*)
CustomRenderSystem::IsCustomPipe(int) const
CustomRenderSystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CustomRenderSystem::DiscardActiveRenderPipeSettings()
CustomRenderSystem::SetProcessingEnabled(bool)
CustomRenderSystem::FindActiveRendererForClient(CustomRendererClient*)
CustomRenderSystem::FindRegistrationFor(CustomRendererClient*)
TestCustomRenderer::TestCustomRenderer()
TestCustomRenderer::~TestCustomRenderer()
TestCustomRenderer::RenderHUD()
TestCustomRenderClient::TestCustomRenderClient()
TestCustomRenderClient::OnAdded()
TestCustomRenderClient::OnRemoved()
TestCustomRenderClient::OnHook(unsigned char, HookArgs*)
non-virtual thunk to TestCustomRenderClient::OnHook(unsigned char, HookArgs*)
CustomRenderer::UpdateCamera(NuCamera&)
CustomRenderer::RenderMain3D()
CustomRenderer::RenderAfterDeferred()
CustomRenderer::RenderAfterFinalPostEffects()
CustomRenderer::RenderHUD()
CustomRenderer::OnPipeCreated(NuRenderPipe&)
LegoSystem::AddManagersForLevel(LegoLevelContainer&)
LegoSystem::RemoveManagersForLevel(LegoLevelContainer&)
LegoSystem::OnEnterLevel(LegoLevelContainer&)
LegoSystem::OnExitLevel(LegoLevelContainer&)
LegoSystem::OnResetLevel(LegoLevelContainer&)
TestCustomRenderClient::~TestCustomRenderClient()
TestCustomRenderClient::~TestCustomRenderClient()
NuUniqueObjectAccessor::GetNuUniqueObjectBase()
IAnimatable::SetAnimationInstance(AnimationInstance*)
IAnimatable::GetAnimationInstance()
AddOn::ResetParameters()
AddOn::ParseParamItem(cParseContextItem&)
AddOn::OnFinishedParsingParameters()
ScriptAddOn::Singleton()
ScriptAddOn::CreatedByScript() const
AddOn::OnDestroy()
ScriptAddOn::ParseGizAction(Flow*, FlowObject*, char**, int)
non-virtual thunk to TestCustomRenderClient::~TestCustomRenderClient()
non-virtual thunk to TestCustomRenderClient::~TestCustomRenderClient()
KestrelAbilities::KestrelAbilities()
MechAbilities::~MechAbilities()
KestrelAbilities::~KestrelAbilities()
KestrelAbilities::~KestrelAbilities()
KestrelAbilities::RegisterAbilities()
MechSystem::AddManagersForLevel(MechLevelContainer&)
MechSystem::RemoveManagersForLevel(MechLevelContainer&)
MechSystem::OnEnterLevel(MechLevelContainer&)
MechSystem::OnExitLevel(MechLevelContainer&)
MechSystem::OnResetLevel(MechLevelContainer&)
MechSystemBase<MechAbilities, int>::Suppress(int)
MechSystemBase<MechAbilities, int>::IsSuppressed(int) const
KestrelDropInOut::KestrelDropInOut()
KestrelDropInOut::~KestrelDropInOut()
KestrelDropInOut::~KestrelDropInOut()
KestrelDropInOut::GetOtherPlayerFor(MechCharacter*)
KestrelDropInOut::AllowDropIn(MechDropInOut::DropInData&, VuVec&)
KestrelDropInOut::OnDropOut(MechCharacter&)
KestrelDropInOut::OnDropIn(MechDropInOut::DropInData&)
Kestrel_CanWarpToPlayer(int)
Kestrel_WarpToPlayer(int)
DropOutInhibitor::DropOutInhibitor()
DropOutInhibitor::~DropOutInhibitor()
non-virtual thunk to DropOutInhibitor::~DropOutInhibitor()
DropOutInhibitor::~DropOutInhibitor()
non-virtual thunk to DropOutInhibitor::~DropOutInhibitor()
DropOutInhibitor::OnAdded()
DropOutInhibitor::OnRemoved()
DropOutInhibitor::OnHook(unsigned char, HookArgs*)
non-virtual thunk to DropOutInhibitor::OnHook(unsigned char, HookArgs*)
DropOutInhibitor::SetExpired(bool)
DropOutInhibitor::GetFrom(ScriptContext&)
DropOutInhibitor::AddTo(ScriptContext&)
SVarAddOnList::CreateOrGetAddOnList(ScriptContext&)
SAction_Achievements_MarkChapterStart::Exec(ScriptContext&)
SAction_Achievements_MarkChapterComplete::Exec(ScriptContext&)
SAction_Achievements_FairgroundRideDone::Exec(ScriptContext&)
SAction_Achievements_GraffitiDone::Exec(ScriptContext&)
SAction_Achievements_ShieldsDone::Exec(ScriptContext&)
SAction_Achievements_LegoStoreDone::Exec(ScriptContext&)
ActionInstanceData::~ActionInstanceData()
SAction_Achievements_MarkChapterStart::~SAction_Achievements_MarkChapterStart()
SAction_Achievements_MarkChapterStart::GetName() const
SAction_Achievements_MarkChapterStart::GetInputs(SCmdParams&) const
SAction_Achievements_MarkChapterStart::GetOutputs(SCmdParams&) const
SAction_Achievements_MarkChapterComplete::~SAction_Achievements_MarkChapterComplete()
SAction_Achievements_MarkChapterComplete::GetName() const
SAction_Achievements_MarkChapterComplete::GetInputs(SCmdParams&) const
SAction_Achievements_MarkChapterComplete::GetOutputs(SCmdParams&) const
SAction_Achievements_FairgroundRideDone::~SAction_Achievements_FairgroundRideDone()
SAction_Achievements_FairgroundRideDone::GetName() const
SAction_Achievements_FairgroundRideDone::GetInputs(SCmdParams&) const
SAction_Achievements_FairgroundRideDone::GetOutputs(SCmdParams&) const
SAction_Achievements_GraffitiDone::~SAction_Achievements_GraffitiDone()
SAction_Achievements_GraffitiDone::GetName() const
SAction_Achievements_GraffitiDone::GetInputs(SCmdParams&) const
SAction_Achievements_GraffitiDone::GetOutputs(SCmdParams&) const
SAction_Achievements_ShieldsDone::~SAction_Achievements_ShieldsDone()
SAction_Achievements_ShieldsDone::GetName() const
SAction_Achievements_ShieldsDone::GetInputs(SCmdParams&) const
SAction_Achievements_ShieldsDone::GetOutputs(SCmdParams&) const
SAction_Achievements_LegoStoreDone::~SAction_Achievements_LegoStoreDone()
SAction_Achievements_LegoStoreDone::GetName() const
SAction_Achievements_LegoStoreDone::GetInputs(SCmdParams&) const
SAction_Achievements_LegoStoreDone::GetOutputs(SCmdParams&) const
LegoCityAI::Init()
LegoCityAI::SetGameObjectCapabilities(MechCharacter*)
LegoCityAI::InitPlayerAI(MechCharacter&, bool)
LegoCityAI::InitCreature(MechCharacter&, bool)
LegoCityAI::OnEnterLevel(LegoLevelContainer&)
LegoCityAI::OnExitLevel(LegoLevelContainer&)
LegoCityAI::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LEGOCity_PrepareJump(ApiCharacter&, int)
LEGOCity_PrepareBigJump(ApiCharacter&, int)
LEGOCity_PrepareBigJumpToWallMove(ApiCharacter&, int)
LEGOCity_PrepareBrickGrab(ApiCharacter&, int)
LEGOCity_PreparePostHop(ApiCharacter&, int)
LEGOCity_PrepareHPole(ApiCharacter&, int)
LEGOCity_PrepareBouncePad(ApiCharacter&, int)
LEGOCity_PrepareWallRun(ApiCharacter&, int)
LEGOCity_PrepareDrainPipe(ApiCharacter&, int)
LEGOCity_PrepareLedgeMove(ApiCharacter&, int)
LEGOCity_PrepareSkid(ApiCharacter&, int)
LEGOCity_PrepareVault(ApiCharacter&, int)
LEGOCity_PrepareGroundToLedgeMove(ApiCharacter&, int)
LEGOCity_PrepareAllLedgesMove(ApiCharacter&, int)
LEGOCity_PrepareLedgeToLedgeMove(ApiCharacter&, int)
LEGOCity_PrepareLedgeJumpToGroundMove(ApiCharacter&, int)
LEGOCity_PrepareLedgeToWallHugMove(ApiCharacter&, int)
LEGOCity_PrepareWallHugToLedgeMove(ApiCharacter&, int)
LEGOCity_MidSpecialMove_Skid(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_Vault(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_StartJump(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_GroundToLedge(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_AllLedges(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_LedgeToLedge(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_LedgeToWallHug(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_WallHugToLedge(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_BigJumpToWall(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_BrickGrab(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_PostHop(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_HPole(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_BouncePad(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_WallRun(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_DrainPipe(AIManager&, ApiCharacter&)
LEGOCity_MidSpecialMove_LedgeJumpToGround(AIManager&, ApiCharacter&)
LEGOCity_PrepareWallClimb(ApiCharacter&, int)
LEGOCity_MidSpecialMove_WallClimb(AIManager&, ApiCharacter&)
VuMtx::SetRotation(VuVec const&, VuVec const&)
LegoCityAI::SetDefaultNodeSearchStartOffset(Brain&)
LegoCityAI::SetNodeSearchStartOffset(Brain&, float)
LegoAI::~LegoAI()
LegoCityAI::~LegoCityAI()
LegoAI::AddManagersForLevel(LegoLevelContainer&)
LegoAI::RemoveManagersForLevel(LegoLevelContainer&)
LegoAI::OnResetLevel(LegoLevelContainer&)
LegoAI::ModifyRigidBodyAIAvoidableBox(RigidBodyAIAvoidable&, NuVector3Base&, NuMatrixBase&)
LegoAI::BaddyIgnoresGoody(MechCharacter&, MechCharacter&)
LegoAI::PlayerFreePlayCapabilityFlags()
GenericEventCreator<GameObjectScriptEvent>::Create(ScriptContext&, ScriptScope&)
CStack<ScriptVariable*, 16>::~CStack()
CStack<ScriptVariable*, 16>::~CStack()
GenericEventCreator<VanillaScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<PlayerGameObjectScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<VehicleScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<PlayerVehicleScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<KrawlieVehicleScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<LegoCityPickups::AllGoldBricksCollectedEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<VehicleToVehicleInteractionScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<GizmoScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<FastTravelScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<LegacyFastTravelScriptEvent>::Create(ScriptContext&, ScriptScope&)
AITask* CreateObject<AITask*, cEnforcerDailyRoutine>()
AITask* CreateObject<AITask*, cCriminalDailyRoutine>()
AITask* CreateObject<AITask*, cAttackTask>()
AITask* CreateObject<AITask*, cTakeDownOnFoot>()
AITask* CreateObject<AITask*, cMeleeMaster>()
AITask* CreateObject<AITask*, TaxiTask>()
Action_Mission_ShowPrompt(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_Mission_Abandon(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_Mission_IncScore(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_Mission_CompleteObjective(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_Mission_Fail(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_Taxi_StartTimer(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_LockPlayerInVehicle(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_EnableParkingIndicator(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_PositionParkingIndicator(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_WanderOnNearestSystem(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetParked(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_FadeOut(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_FadeIn(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_PlayerTakeOver(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_CreateSet(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_RemovePlayerVehicle(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_PrintToScreen(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_ClearPrintToScreen(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_GivePlayerStuds(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_ToggleVehicleTaggable(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_ExitVehicleToPoint(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_TogglePlayerMovement(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_MakeAlien(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
InVehicle(char*, GameObject*)
LegoCityBlowup::LegoCityBlowup()
LegoCityBlowup::GetNumOutputs()
LegoCityBlowup::GetOutput(int, int)
LegoCityBlowup::GetOutputName(int)
LegoCityBlowup::ColourBlowup(int, NuSmartPtr<NuMtl, true>*)
LegoCityBlowup::RequiresSpecialColour()
LegoCityBlowup::Blowup(Bolt*, bool, bool, bool)
LegoCityBlowup::LoadEx(WORLDINFO*, int)
LegoCityBlowup::SetInstanceData(Gizmo*)
LegoCityBlowup::ResetForLoop()
LegoCityBlowup::IsColouredCorrectly()
LegoCityBlowup::ColourCorrectly()
LegoCityBlowups::OnBlowUpPunched(BlowUp&, MechCharacter*)
LegoCityBlowups::OnBoltHit(WORLDINFO*, BlowUp*, NUVEC*, int, int, Bolt*)
LegoCityBlowups::OnInit()
LegoCityBlowups::UpdateBlowup(BlowUp*)
LegoCityBlowups::CheckGameFlags(MechCharacter&, BlowUp&, int, unsigned long const&)
LegoCityBlowup::~LegoCityBlowup()
LegoCityBlowup::~LegoCityBlowup()
Gizmo::GetLedFile() const
Gizmo::SetLedFile(short)
Gizmo::GetName() const
Gizmo::SetName(char const*)
Gizmo::GetPosition(VuVec&) const
Gizmo::Activate()
Gizmo::Deactivate()
Gizmo::IsActive() const
Gizmo::GetLEDInstancedFrom()
BlowUp::GetMechObjectInterfacePtr()
Gizmo::GetTargetType()
Gizmo::GetRadius() const
Gizmo::GetBaseThisPntr()
Gizmo::IsValidAsAttractor() const
Gizmo::ActivateByComplexGizmo()
Gizmo::ActivateLevel()
Gizmo::DeactivateLevel()
Gizmo::SetXRot(unsigned short)
Gizmo::SetYRot(unsigned short)
Gizmo::SetZRot(unsigned short)
Gizmo::SetPos(NUVEC*)
Gizmo::DriveToMtx(VuMtx&, float)
Gizmo::setDontUseCompoundObject(int)
Gizmo::GetBricksUser()
BlowUp::GetBricksCreator()
Gizmo::ComplexFixUpEx(WORLDINFO*, ComplexGizmo*)
Gizmo::Reshape(NUVEC*)
Gizmo::GetNumBuilderHotspots()
Gizmo::GetBuilderStretchHotspotIndex()
Gizmo::GetBuilerHotspotPos(int, NUVEC*)
Gizmo::GetBuilderHotspotName(int)
Gizmo::GetBuilderHotspotValue(int)
Gizmo::SetBuilderHotspotValue(int, float)
Gizmo::BuilderHotspotMoveCode(int, LegoGamePad*, int, int, int, int)
Gizmo::BuilderDestroy()
Gizmo::GetGameAnimSet() const
BlowUp::GetLegoSpecial() const
Gizmo::IsToggleable()
Gizmo::GetToggleState()
Gizmo::SetToggleState(int)
Gizmo::ToggleToggleState()
Gizmo::SetShouldExcludeFromSave(bool)
Gizmo::ShouldExcludeFromSave()
BlowUp::Targeting_GetTargetPos(NUVEC&, TARGETING_TYPE, int)
Gizmo::Targeting_GetTargetMom(NUVEC&, TARGETING_TYPE, int)
BlowUp::Targeting_GetCursorPos(NUVEC&, TARGETING_TYPE, int)
BlowUp::LOS_GetPoint(NUVEC&, TARGETING_TYPE, int)
Gizmo::LOS_GetNumPoints(TARGETING_TYPE, int)
Gizmo::Glow_GetPos(NUVEC&, int)
Gizmo::Glow_StillValid(MechCharacter*, int)
Gizmo::Plug(GizmoPlug*)
Gizmo::CanNudgeWithBoltsWhenDynamic()
Gizmo::GetDefaultOutputIndex()
BlowUp::RequiresPhantom()
Gizmo::UpdatePhantomMinMax()
Gizmo::EvaluateInteraction(MechCharacter&)
Gizmo::StartInteraction(MechCharacter&)
Gizmo::isAIInteractSupported()
BlowUp::UsesNavObstacles() const
BlowUp::Glow_GetTargetPos(NUVEC&, int)
non-virtual thunk to LegoCityBlowup::~LegoCityBlowup()
non-virtual thunk to LegoCityBlowup::~LegoCityBlowup()
AIInteractable::AIInteract(APIOBJECT* const&, float)
AIInteractable::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to LegoCityBlowup::~LegoCityBlowup()
non-virtual thunk to LegoCityBlowup::~LegoCityBlowup()
LegoCityBlowups::~LegoCityBlowups()
LegoGizmoSystemBase<LegoBlowUps>::ShutDown()
LegoGizmoSystemBase<LegoBlowUps>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoGizmoSystem::GetGizmoTypeName() const
LegoGizmoSystem::GetGizmoPrefix() const
LegoGizmoSystem::HasEdGizmoFlags(int) const
LegoGizmoSystem::SetEdGizmoFlags(int)
LegoGizmoSystem::HasGizmoFlags(unsigned char) const
LegoGizmoSystem::SetGizmoFlags(unsigned char)
LegoGizmoSystem::ClearGizmoFlags(unsigned char)
LegoBlowUps::AllowPhysicsSlam(Gizmo&) const
LegoGizmoSystem::GetGizmoEditorTypeName() const
LegoGizmoSystem::GetHelper()
LegoBlowUps::CanHitGeneralAffect(BlowUp&, MechCharacter*, int)
LegoBlowUps::GetExplosionDuration(WORLDINFO&, BlowUp&)
LegoBlowUps::CanBeDestroyedByExplosions(BlowUp&)
LegoBlowUps::OnBlowUpDestroyed(BlowUp&)
LegoBlowUps::OnBlowUpRespawned(BlowUp&)
LegoBlowUps::OnThrownBlowUpHitCharacter(BlowUp&, GameObject&)
LegoBlowUps::ShouldHaveParticleEffect(BlowUp&)
LegoBlowUps::AddOnScreenEffects(BlowUp&)
LegoBlowUps::ModifyLightingGlow(BlowUp&, NuColour&)
LegoBlowUps::ModifyLightingTint(BlowUp&, NUCOLOUR3&)
LegoBlowUps::CheckIfBlowUpNeedsHint(WORLDINFO&, BlowUp&, NUVEC&)
LegoBlowUps::SetHintComplete(WORLDINFO&, BlowUp&)
LegoBlowUps::GetMaxCoinValue(BlowUp&)
LegoBlowUps::GetShinyParticleRange(BlowUp&) const
LegoBlowUps::GetLOSRange(MechCharacter*)
LegoBlowUps::CanDestroyGoldLego(BlowUp&, Bolt&)
LegoBlowUps::CanTargetShinyBlowups(MechCharacter*)
LegoBlowUps::CanTargetBlowup(MechCharacter*, BlowUp*)
LegoBlowUps::CanBeHurtByBolt(BlowUp&, BoltTypeID const&) const
LegoBlowUps::DrawHitFailFX(BlowUp&, VuVec const&, bool)
LegoBlowUps::CanDoLOSCheck(MechCharacter&)
LegoBlowUps::OnPostBlowupDraw()
LegoCityBlowups::CreateBlowUp()
non-virtual thunk to LegoGizmoSystem::GetGizmoTypeName() const
non-virtual thunk to LegoGizmoSystem::GetGizmoPrefix() const
non-virtual thunk to LegoGizmoSystem::HasEdGizmoFlags(int) const
non-virtual thunk to LegoGizmoSystem::SetEdGizmoFlags(int)
non-virtual thunk to LegoGizmoSystem::HasGizmoFlags(unsigned char) const
non-virtual thunk to LegoGizmoSystem::SetGizmoFlags(unsigned char)
non-virtual thunk to LegoGizmoSystem::ClearGizmoFlags(unsigned char)
non-virtual thunk to LegoBlowUps::AllowPhysicsSlam(Gizmo&) const
non-virtual thunk to LegoGizmoSystem::GetGizmoEditorTypeName() const
non-virtual thunk to LegoGizmoSystem::GetHelper()
LegoCityBricks_Init(CollectBrick*)
LegoCityBricks_Load(CollectBrick*, int)
LegoCityBricks_Save(CollectBrick*)
LegoCityBricks_Copy(CollectBrick*, CollectBrick const*)
LegoCityBricks_SpawnBricks(CollectBrick*, WORLDINFO*, NUVEC*)
LegoCityCharacters::LegoCityCharacters()
LegoCityCharacters::ClearOverrides(bool)
LegoCityCharacters::~LegoCityCharacters()
LegoCityCharacters::~LegoCityCharacters()
LegoCityCharacters::Init()
MechAbilityRegisterInfo::~MechAbilityRegisterInfo()
LegoCityCharacters::LoadDisguises(StreamingLevelEventData&)
LegoCityCharacters::GetCurrentDisguise(eCharClass const&, int)
CMList<ResourceHndl>::Append(ResourceHndl const&, CMList<ResourceHndl>::ListLink*)
LegoCityCharacters::OnCharacterClassCollected(unsigned short const&)
LegoCityCharacters::EventNotify(Event&, NuEventData&)
LegoCityCharacters::ApplyOverrides(LegoCityLevelContainer*)
LegoCityCharacters::CommitPermanentOverrides()
LegoCityCharacters::ResetSaveGame()
COLLECTION::~COLLECTION()
LegoCityCData::LegoCityCData(CharDefFile const&, int)
NuVector<LegoCityCharacters::LINKEDDEFAULTCHARACTERDATA>::~NuVector()
LegoCityCharacters::GetClassFromHash(HashedKey const&)
LegoCityCharacters::GetDebugClassName(unsigned int const&)
LegoCityCharacters::GetDiguisesCollection()
LegoCityCharacters::CollectAllDefaultCharacters()
LegoCityCharacters::FindDefaultChar(HashedKey const&, unsigned int, eCharClass*)
LegoCityCharacters::FindDefaultChar(short const&, unsigned int, eCharClass*)
LegoCityCharacters::IsDefaultChar(HashedKey const&, unsigned int)
LegoCityCharacters::IsDefaultChar(short const&, unsigned int)
LegoCityCharacters::GetDefaultCharClass(HashedKey const&, unsigned int)
LegoCityCharacters::GetDefaultCharClass(short const&, unsigned int)
LegoCityCharacters::UpdateCollectedCharacterCount()
LegoCityCharacters::GetCollectedCharacterCount()
LegoCityCharacters::GetTotalCharacterCount()
LegoCityCharacters::GetDefaultCharID(HashedKey const&, unsigned int)
LegoCityCharacters::GetDefaultCharIDFromCharClass(eCharClass const&, unsigned int)
LegoCityCharacters::GetCharClassUnlockIcon(eCharClass const&)
LegoCityCharacters::GetBorderColour(eCharClass const&)
LegoCityCharacters::GetLinkedUnlocksForClass(eCharClass const&, NuVector<short>&)
LegoCityCharacters::IsDefaultCharUnlocked(eCharClass const&, unsigned int)
LegoCityCharacters::IsACurrentOverride(short const&, int const&)
LegoCityCharacters::IsDefaultCharUnlocked(HashedKey const&, unsigned int)
LegoCityCharacters::IsClassUnlocked(eCharClass const&)
LegoCityCharacters::GetCharacterModels(CMList<CharDefGameData*>&, int)
CMList<CharDefGameData*>::Append(CharDefGameData* const&, CMList<CharDefGameData*>::ListLink*)
LegoCityCharacters::GetCharFixUpTable()
LegoCityCharacters::GetCharacterIconTexture(int)
LegoCityCharacters::GetPrimaryCharClass(unsigned short const&) const
LegoCityCharacters::GetSecondaryCharClass(unsigned short const&) const
LegoCityCharacters::HasClassAbilities(unsigned short const&, eCharClass const&) const
LegoCityCharacters::SetDisguise(short const&, int const&, eCharClass)
LegoCityCharacters::IsACurrentDisguise(short const&, int const&, eCharClass*)
LegoCityCharacters::GetCurrentOverride(eCharClass const&, int)
LegoCityCharacters::SetOverride(short const&, int const&, bool, eCharClass)
LegoCityCharacters::PushExtraUnlockWithOverrides(short const&)
LegoCityCharacters::ExtraCharacterFixUpAfterConfig()
LegoCityCharacters::AddStrongRefForCharacter(short, eCharClass)
LegoCityCharacters::GetGameParseTable() const
LegoCityCharacters::OnCharacterCollected(int)
Collection_CheckCharacterDisguiseFn(WORLDINFO*, int, COLLECTID*)
LegoCityCharacters::OnCharacterUnlocked(int)
LegoCityCharacters::CreateCustomCollections()
LegoCityCharacters::SetupDefaultCharTable()
LegoCityCharacters::AdjustChosenPlayerList(short*, int, LevelContainer const&)
LegoCityCharacters::IsCharacterWheelEnabled(int)
LegoCityCharacterDebug::LegoCityCharacterDebug()
LegoCityCharacterDebug::~LegoCityCharacterDebug()
LegoCityCharacterDebug::~LegoCityCharacterDebug()
LegoCityCharacterDebug::Init()
LegoCityCharacterDebug::GetVehicleString()
LegoCityCharacterDebug::IncCurrVehicle()
LegoCityCharacterDebug::DecCurrVehicle()
LCNoCollisionDynoListener::LCNoCollisionDynoListener()
LCNoCollisionDynoListener::SetNoCollisionChars(MechCharacter const*, MechCharacter const*)
LCNoCollisionDynoListener::StopCollision()
LCNoCollisionDynoListener::StartCollision()
LCNoCollisionDynoListener::AllowCollision(Entity const*, Entity const*)
LegoCityCharacters::SaveLoad::SaveLoad(char const*)
LegoCityCharacters::SaveLoad::~SaveLoad()
LegoCityCharacters::SaveLoad::~SaveLoad()
LegoCityCharacters::SaveLoad::GetTotalSizeInBytes()
LegoCityCharacters::SaveLoad::Reset()
LegoCityCharacters::SaveLoad::SaveSaveGame(EdStream&, int)
LegoCityCharacters::SaveLoad::CopyFromGame()
LegoCityCharacters::SaveLoad::LoadSaveGame(EdStream&, int, int)
LegoCityCharacters::SaveLoad::CopyToGame()
LegoCityCharacters::SaveLoad::ShouldSaveOverrides()
LegoCityCharacters::SaveLoad::InitNewGame()
DynoListener::DeleteMe()
DynoListener::AddEntity(Entity*)
DynoListener::RemoveEntity(Entity*)
DynoListener::Moved(Entity*)
DynoListener::OverlapBegin(Entity const*, Entity const*)
DynoListener::OverlapEnd(Entity const*, Entity const*)
DynoListener::AllowSweepCollision(Entity const*, Entity const*)
DynoListener::Collision(BodyPair*, Array<ContactPoint>&)
DynoListener::Collision(Character*, Entity*, ContactPoint&)
DynoListener::CanPush(Character*, Character*)
DynoListener::CanPush(Character*, RigidBody*)
DynoListener::Collision(EntityPair*)
DynoListener::ContactJoints(LinkedList<Joint>&)
DynoListener::ContactJointCreated(ContactJoint*, ContactPoint*)
DynoListener::AdjustWaterVars(Water const*, Entity const*, float&, float&)
DynoListener::JustEnteredWater(VuVec const&, VuVec const&)
DynoListener::RagDollEntityDeleted(Entity const*)
LegoCharacters::SetAllowedPlayers(WORLDINFO*, AllowedPlayerList&, bool&, bool&)
LegoCharacters::AddPlayerModelToFreeplayList(int)
LegoCharacters::AddFreeplayModelsToList(APICHARACTERMODELLIST*, int*)
LegoCharacters::OnUnloadingCharacterData(CharDefGameData*)
LegoCharacters::BuildCharacterSfxLoadQueue(CharDefGameData&)
LegoCharacters::GetCharExtraModelList(short, short*, int)
LegoCharacters::HasFastBuild(MechCharacter*)
LegoCharacters::GetDefaultCharacterIds(short*, int)
LegoCityCharacters::CreateCData(CharDefFile const&, int)
LegoCharacters::ShouldForceUseHiResIcon(CharDefFile const&) const
DynoListener::~DynoListener()
LCNoCollisionDynoListener::~LCNoCollisionDynoListener()
LegoCityCData::~LegoCityCData()
CSListHeader<MechAbilityInit>::Clear()
COLLECTION::~COLLECTION()
cLoadSaveManagerItem::~cLoadSaveManagerItem()
cLoadSaveManagerItem::~cLoadSaveManagerItem()
cLoadSaveManagerItem::GetTotalSizeInBytes()
cLoadSaveManagerItem::Reset()
cLoadSaveManagerItem::SaveSaveGame(EdStream&, int)
cLoadSaveManagerItem::LoadSaveGame(EdStream&, int, int)
NuVector<short>::Reserve(unsigned int, bool)
NuVector<LegoCityCharacters::LINKEDDEFAULTCHARACTERDATA>::Reserve(unsigned int, bool)
LegoCityShopCategories::LegoCityShopCategories()
LegoCityShopCategories::~LegoCityShopCategories()
NuHashMap<short, NuColour>::~NuHashMap()
LegoCityShopCategories::SetupCategoriesTable()
LegoCityShopCategories::GetSubCategoriesForIndex(int)
LegoCityShopCategories::IsSubCategory(int)
LegoCityShopCategories::GetParentCategory(int)
LegoCityShopCategories::ClearNewTokenTables()
LegoCityShopCategories::FillNewTokenTables()
LegoCityShopCategories::SetupNewTokenTables()
LegoCityShopCategories::ReEvaluateNewTokenUnlockedForCategory(char, eShopMode, bool)
LegoCityShopCategories::GetNumItemsInCategoryToDisplay(int, eShopMode)
LegoCityShopCategories::SetNewTokenUnlocked(int)
LegoCityShopCategories::CategoryHasNewToken(char, bool)
LegoCityShopCategories::ClearCategoryNewToken(char, bool)
LegoCityShopCategories::LoadCategoriesIcon()
LegoCityShopCategories::CollectAllVehiclesForE3Demo()
LegoCityShopCategories::GetCharacterCategoryAtIndex(int)
LegoCityShopCategories::GetVehicleCategoryAtIndex(int)
LegoCityShopCategories::GetCharacterCategoryTextureHndl(int)
LegoCityShopCategories::GetVehicleCategoryTextureHndl(int)
LegoCityShopCategories::GetNoOfCharacterCategories()
LegoCityShopCategories::GetNoOfVehicleCategories()
LegoCityShopCategories::GetNoOfCharacterSubCategories(int)
LegoCityShopCategories::GetVechicleColourAtIndex(int, NuColour&)
LegoCityShopCategories::GetVechicleColourTableIndex(int)
NuVector<char>::Reserve(unsigned int, bool)
LegoCityDigging::OnDigScoop(GizmoDig&, MechCharacter&)
LegoCityDigging::OnDigComplete(GizmoDig&, MechCharacter&)
LegoCityDigging::~LegoCityDigging()
LegoGizmoSystemBase<LegoDigging>::ShutDown()
LegoGizmoSystemBase<LegoDigging>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoGizmoSystem::AllowPhysicsSlam(Gizmo&) const
non-virtual thunk to LegoGizmoSystem::AllowPhysicsSlam(Gizmo&) const
LegoCityDoors::OnAreaChange_ShouldResetDoorHistory(int, int) const
LegoCityDoors::ShouldIgnoreDefaultStartDoor(WORLDINFO*)
LegoCityDoors::OnInitializePlayerStartPos(GizmoDoorManager const&)
LegoCityDoors::CanObjectUseDoors(MechCharacter*)
LegoCityDoors::~LegoCityDoors()
LegoGizmoSystemBase<LegoDoors>::ShutDown()
LegoGizmoSystemBase<LegoDoors>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoGizmoSystem::OnInit()
LegoDoors::GetStreamingExtraBiasForDoor(GizmoDoor const&) const
LegoDoors::ShouldOverrideCutscene(WORLDINFO*, int, GizmoDoor*)
LegoDoors::ShouldOverrideTargetLevel(GizmoDoor*)
LegoDoors::OverrideTargetLevel(WORLDINFO*, int)
LegoDoors::OverrideGoThroughTeleport(GizmoDoor*, MechCharacter*, WORLDINFO*)
LegoDoors::OverrideDoorLevelsLoad(GizmoDoor const&, int)
LegoDoors::OverrideDoorLevelsSave(GizmoDoor const&, int)
LegoDoors::CanStoreStatusTakeOverObjectSys(WORLDINFO*)
LegoDoors::ResetControlledPlayersBeforeGoingToLevel(int)
LegoDoors::DontAllowThrough(GizmoDoor*, MechCharacter*)
LegoDoors::GetVehicleFilter(GizmoDoor&)
DropPointGizmos::DropPointGizmos()
DropPointGizmos::CreateGizmoManager()
non-virtual thunk to DropPointGizmos::CreateGizmoManager()
DropPointGizmos::CreateHelper()
DropPointGizmos::CreateDropPoint()
DropPointGizmos::OnInit()
MechContext* MechContextConstructor<DropPointContextHandler>(MechCharacter&)
DropPointGizmos::OnInitPostConfig()
DropPointGizmos::IsUsingADropPoint(MechCharacter&) const
DropPointGizmos::SpawnVehicle(DropPointGizmo*, int, int)
DropPointGizmo::UpdateSpawnPos()
DropPointGizmo::DamageAllVehiclesInArea(WeakPtr<cAIVehicle>, bool)
DropPointGizmo::UpdateDanglyPos(bool)
DroppedVehicleAddOn::ForceDesirability(DroppedVehicleAddOn::Desirability)
DropPointGizmos::GetTargetHeading(DropPointGizmo*, MechCharacter*, bool)
DropPointInputTrigger::IsInputTriggered(MechCharacter&, unsigned int, DropPointGizmo&)
DropPointGizmos::MoveCode(MechCharacter*)
DropPointGizmoManager::FindNearestDropPoint2(NUVEC const*, MechCharacter*, float*, float, DropPointGizmo*, DropPointGizmos::eCANUSE*)
DropPointGizmo::SetUser(MechCharacter*)
DropPointGizmo::SetPhase(int)
DropPointGizmos::CanCheckForDropPoints(MechCharacter&)
DropPointGizmos::EventNotify(Event&, NuEventData&)
DropPointGizmos::MainMenu::Enter(MENU*)
DropPointGizmos::MainMenu::Render(MENU*)
DropPointGizmos::MainMenu::Update(MENU*)
DropPointGizmos::MainMenu::Exit(MENU*)
DropPointGizmo::DropPointGizmo()
DropPointGizmo::~DropPointGizmo()
Gizmo::~Gizmo()
non-virtual thunk to DropPointGizmo::~DropPointGizmo()
DropPointGizmo::~DropPointGizmo()
non-virtual thunk to DropPointGizmo::~DropPointGizmo()
DropPointGizmo::Release()
DropPointGizmo::GetClass() const
DropPointGizmo::Init(WORLDINFO*)
DropPointGizmo::IsFlagSet(DropPointGizmo::FLAGS)
DropPointGizmo::GetNumOutputs()
DropPointGizmo::GetOutput(int, int)
DropPointGizmo::GetOutputName(int)
DropPointGizmo::Reset()
DropPointGizmo::GameAnimSet_ApplyVisibility()
DropPointGizmo::IsInteractionAllowed()
DropPointGizmo::Activate(bool)
DropPointGizmo::SetVisibility(int)
DropPointGizmo::LoadEx(WORLDINFO*, int)
DropPointGizmo::EnsureGotButtonFlagSet()
DropPointGizmo::LoadInstanceDataEx(WORLDINFO*, int)
DropPointGizmo::SaveInstanceDataEx(WORLDINFO*)
DropPointGizmo::InstanceMovedEx()
DropPointGizmo::GetBuilderOrigin(NUVEC*)
CharDef::FindLocatorId(char const*) const
DropPointGizmo::UpdateTargetPos(bool)
DropPointGizmo::UpdateAreaPos()
DropPointGizmo::SetTargetPosHeightToSwitchBase()
DropPointGizmo::DestroyAllVehiclesInArea(WeakPtr<cAIVehicle>)
DropPointGizmo::IsCollidingWithAnyVehicleInArea(WeakPtr<cAIVehicle>)
DropPointGizmo::EnsureGotSpawnTypeFlagSet()
DropPointGizmo::AIInteract(APIOBJECT* const&, float)
non-virtual thunk to DropPointGizmo::AIInteract(APIOBJECT* const&, float)
DropPointGizmo::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to DropPointGizmo::SetupInteractFocus(Task_PathTo&, AIManager const&)
DropPointGizmo::CanInteract(APIOBJECT* const&)
non-virtual thunk to DropPointGizmo::CanInteract(APIOBJECT* const&)
DropPointGizmo::GetHotspotVFX()
DropPointGizmoManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
DropPointGizmoManager::LateUpdate(float)
DropPointGizmoManager::Draw(float, ClassManager::eRenderingPriority)
DropPointGizmoManager::AllocateProgressData(WORLDINFO*)
DropPointGizmoManager::ClearProgress(WORLDINFO*, void*)
DropPointGizmoManager::StoreProgress(WORLDINFO*, void*)
DropPointGizmoManager::Reset(WORLDINFO*, void*)
DropPointGizmoManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
DropPointGizmoManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
DropPointGizmoManager::RequestSfx()
DropPointGizmoManager::ReleaseSfx()
DropPointGizmoManager::IsHiddenLayerCullingEnabled()
DropPointGizmoManager::DoHiddenLayerCulling(int, GAMECAMERA&, int, int, int)
DropPointGizmoManager::FindNearestDropPoint(NUVEC const*, MechCharacter*, float*, float, DropPointGizmo*, DropPointGizmos::eCANUSE*)
DropPointContextHandler::OnProcess(LevelContainer*, float)
DropPointContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
DropPointContextHandler::OnLeave()
DroppedVehicleAddOn::DroppedVehicleAddOn()
DroppedVehicleAddOn::~DroppedVehicleAddOn()
non-virtual thunk to DroppedVehicleAddOn::~DroppedVehicleAddOn()
DroppedVehicleAddOn::~DroppedVehicleAddOn()
non-virtual thunk to DroppedVehicleAddOn::~DroppedVehicleAddOn()
DroppedVehicleAddOn::OnHook(unsigned char, HookArgs*)
DroppedVehicleAddOn::OnProcess(MechVehicle&, float)
DroppedVehicleAddOn::CanRemove() const
HookListener::OnHook(unsigned char, HookArgs*)
non-virtual thunk to DroppedVehicleAddOn::OnHook(unsigned char, HookArgs*)
DroppedVehicleAddOn::GetLevelContainer() const
non-virtual thunk to DroppedVehicleAddOn::GetLevelContainer() const
DroppedVehicleAddOn::OnAdded()
DroppedVehicleAddOn::GetDesirabilityTimer(DroppedVehicleAddOn::Desirability) const
DroppedVehicleAddOn::OnRemoved()
DroppedVehicleAddOn::ProcessVehicleDesirability(MechVehicle&, float)
DroppedVehicleAddOn::GetDesirabilityRangeAccessAmount(DroppedVehicleAddOn::Desirability) const
MechContext::ProcessConstructionData(MechContextPacket const&)
MechContext::IsLegacyContext() const
MechContext::OnLeave(int)
MechContext::GetFlags() const
MechContext::SetActionOverrides(MechCharacter&)
DropPointGizmoManager::~DropPointGizmoManager()
LegoGizmoManager::DestructorEx()
LegoGizmoManager::OnInit()
LegoGizmoManager::GetNumItemsToProcessAndDraw() const
LegoGizmoManager::EarlyUpdate(float)
LegoGizmoManager::PanelDraw(float)
LegoGizmoManager::BoltHitPlat(Bolt*)
LegoGizmoManager::GetBestBoltTarget(float*, NUVEC*, NUVEC*, void*, NUVEC*, NUVEC*, float, float, int, int, BoltTypeID const&, MechObjectData&)
LegoGizmoManager::BoltHit(WORLDINFO*, void*, NUVEC*, int, float, NUVEC*, NUVEC*, Bolt*, unsigned int)
LegoGizmoManager::BuilderDrawPlacedCreatures(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, int)
DropPointGizmoManager::SaveVersion()
LegoGizmoManager::PreLoad()
LegoGizmoManager::PreLoadNew(int, int)
LegoGizmoManager::PostLoad()
LegoGizmoManager::SetStoreMatrixProgress(WORLDINFO*)
LegoGizmoManager::EdPreSave(WORLDINFO*, int)
LegoGizmoManager::IsEmpty()
LegoGizmoManager::GizmoHasBeenDestroyed(Gizmo*)
LegoGizmoManager::PostLinkGenerationFixUp_AI(AIManager&)
LegoGizmoManager::GetNewReferenceName(WORLDINFO*, char const*)
LegoGizmoManager::DestroyGizmoEx(Gizmo*)
DropPointContextHandler::~DropPointContextHandler()
LegoContextHandler::AllowEnter(int, MechContext*)
LegoContextHandler::AllowLeave(int, MechContext*)
LegoContextHandler::OnEnter(LevelContainer*)
LegoContextHandler::SetTargetYRot()
LegoContextHandler::GetAnimSpeedMultiplier(float&)
LegoContextHandler::GetAnimSpeed(float&)
LegoContextHandler::TakeOverActionOverride(int&, GameObject&, GameObject&)
LegoContextHandlerBase<DropPointContextHandler>::GetInstanceId() const
DropPointGizmos::~DropPointGizmos()
LegoGizmoSystemBase<DropPointGizmos>::ShutDown()
LegoGizmoSystemBase<DropPointGizmos>::ShouldAddManagersForLevel(MechLevelContainer&)
DropPointGizmos::GameObjectCanUse(DropPointGizmo&, MechCharacter*, float)
DropPointGizmos::GetFailedAnimAction(DropPointGizmo*)
DropPointGizmos::DisplayButtonPrompt(DropPointGizmo*, MechCharacter*)
DropPointGizmo::GetVisibility() const
Gizmo::GetMechObjectInterfacePtr()
Gizmo::Actuate()
Gizmo::ResetForLoop()
DropPointGizmo::SetGamePos(NUVEC&)
Gizmo::SetGameMtx(NUMTX&)
Gizmo::GetBricksCreator()
DropPointGizmo::GetGameAnimSet() const
Gizmo::GetLegoSpecial() const
Gizmo::Targeting_GetTargetPos(NUVEC&, TARGETING_TYPE, int)
Gizmo::Targeting_GetCursorPos(NUVEC&, TARGETING_TYPE, int)
Gizmo::LOS_GetPoint(NUVEC&, TARGETING_TYPE, int)
Gizmo::ActivateRev(int, int)
Gizmo::JumpToComplete()
Gizmo::RequiresPhantom()
Gizmo::UsesNavObstacles() const
AddOn::ParseConditions(GameScriptContext&, cParseContextItem&)
AddOn::Singleton()
AddOn::CreatedByScript() const
DropPointGizmoHelper::~DropPointGizmoHelper()
LegoGizmoHelper::GetClassFlags()
LegoGizmoHelper::AddReplicators()
LegoGizmoHelper::GetClassName()
MechInputTriggerBase::~MechInputTriggerBase()
DropPointInputTrigger::~DropPointInputTrigger()
MechInputTriggerButton::GetInputMethod(MechCharacter&) const
NuMechPtr<Gizmo, 16>::ManagedBase::~ManagedBase()
NuMechPtr<Gizmo, 16>::ManagedBase::~ManagedBase()
LegoContextHandlerBase<DropPointContextHandler>::~LegoContextHandlerBase()
MechContext::OnLeave()
LegoContextHandler::OnProcess(LevelContainer*, float)
LegoContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
TurnToOpponentStep(MechCharacter*, VuVec const&, float, bool)
TurnToOpponentTimed(MechCharacter*, VuVec const&, float, bool)
LegoCityFighting::LegoCityFighting()
LegoCityFighting::Init()
MechContext* MechContextConstructor<HandcuffContext>(MechCharacter&)
MechContext* MechContextConstructor<HandcuffedContext>(MechCharacter&)
ObjOpponentStillThere2(MechCharacter*, MechCharacter*, float)
CalcAnimScale(float, MechCharacter*, int)
CalcAnimScale(NUVEC const*, MechCharacter*, int)
LegoCityFighting::AllowHandcuff(MechCharacter*)
HandcuffCode(MechCharacter*)
LegoCityFighting::CounterCode(MechCharacter*)
LegoCityFighting::WindupCode(MechCharacter*, int)
LegoCityFighting::SetTarget(int, MechCharacter*)
LegoCityFighting::AllowPunch(MechCharacter*, MechObjectData&, bool)
FaceOpponentCity(MechCharacter*, NUVEC const*, int)
LegoCityFighting::PunchCode(MechCharacter*, int, int, int, int, int, float)
LegoCityFighting::SetAttacker(int, MechCharacter*)
LegoCityFighting::SelectOpponent2(MechCharacter*, float, float, MELEE_ATTACK, int, MechObjectData&, unsigned int)
LegoCityFighting::SelectFightAction(MechCharacter*, MechCharacter*, int, unsigned char)
LegoCityFighting::ObjOpponent(MechCharacter*, float, float, int, int, int)
LegoCityFighting::Punch_Hit(MechCharacter*, MechCharacter*, float, float, MechObjectData*)
CityStepBackFromTarget(MechCharacter*)
LegoCityFighting::Punch_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoCityFighting::OnEnterLevel(LegoLevelContainer&)
LegoCityFighting::OnInitPostConfig()
LegoCityFighting::PunchPossible(MechCharacter*)
LegoCityFighting::~LegoCityFighting()
LegoCityFighting::~LegoCityFighting()
LegoFighting::GetComboGap(MechCharacter*)
LegoFighting::CanStartHold(MechCharacter*)
LegoFighting::GetPunchAction(MechCharacter&, short)
LegoFighting::EndedPunchContext(MechCharacter&)
LegoFighting::PunchGetDamage(MechCharacter*, MechCharacter*)
LegoFighting::GetComboAction(MechCharacter&, MechObjectData&, short)
LegoFighting::AddComboMultiplier(MechCharacter&, MechCharacter*)
LegoFighting::DrawComboMultiplier(MechCharacter&, MechCharacter*)
LegoFighting::UpdateComboTimer(MechCharacter&)
LegoFighting::OverrideStunDieAirTakeHit(MechCharacter&, MechCharacter*, unsigned long, unsigned char&)
LegoFighting::OverrideStandardSpecialMoveCheck(MechCharacter&, MechCharacter*, int, int)
LegoFighting::GetStunDieAction(MechCharacter&)
LegoFighting::ModifySpecialMoveCheckFlags(MechCharacter&, MechCharacter&, unsigned long, int) const
LegoFighting::PreSpecialMoveStart(MechCharacter&, MechCharacter&, int)
LegoFighting::OverrideSpecialMoveStudBonus(MechCharacter&, MechCharacter&, int&)
LegoFighting::SpecialMoveMoveCode(MechCharacter&, MechCharacter*)
LegoFighting::CanDoSuperStrengthSpecialMoveButtonPrompt(MechCharacter&, MechCharacter*, int)
LegoFighting::AllowComboStreaks(MechCharacter&)
MechKrawlieSimpleHookHitBy::GetHashedKey()
LegoCityFloating::GetFloatDieAttachChar(WORLDINFO*)
LegoCityFloating::~LegoCityFloating()
LegoFloating::GetDrowningPFX()
LegoFloating::JumpOutPreventDouble(GameObject&)
LegoFloating::FloatConditionsSatisfied(GameObject&, bool&)
LegoFloating::CanCharBeKilledByDeadlyDeepWater(MechCharacter&)
LegoCityFlowHelper::InitLegoCityFlowHelpers()
LegoCityFlowHelper::LegoCityFlowHelper()
GizFlowHelper::~GizFlowHelper()
LegoCityFlowHelper::~LegoCityFlowHelper()
non-virtual thunk to LegoCityFlowHelper::~LegoCityFlowHelper()
non-virtual thunk to LegoCityFlowHelper::~LegoCityFlowHelper()
IEventListener::IsInContainer(LevelContainer&)
LegoCityFlowSystem::LegoCityFlowSystem()
LegoCityFlowSystem::~LegoCityFlowSystem()
MechSystemBase<MechFlowSystem, int>::Suppress(int)
MechSystemBase<MechFlowSystem, int>::IsSuppressed(int) const
LegoCityGame_ShowReturnToXXX()
LegoCityGame::IsShopUIActive()
LegoCityGame_AllowReturnToXXX()
LegoCityGame::GetSafeGuard()
LegoCityGame_SuppressLevelStreaming(bool)
LegoCityGame_UpdateLevelStreamingSuppressor()
LegoCityGame_ShouldSuppressLevelStreaming()
NuPvsData::~NuPvsData()
LegoCityGame::FindCityCheatIndex(eCHEAT)
LegoCityGame::GetCheatList()
DrawShieldTokenCount(WORLDINFO*, int, float, float, float)
NuList<NuSceneResourceHndl>::~NuList()
CreateGame_LegoCity()
LegoCityGame::RefreshCityReport()
LegoCityGame::GetCityReport() const
LegoCityGame::LegoCityGame()
LegoCityGame::~LegoCityGame()
LegoCityGame::~LegoCityGame()
LegoCityGame::SetupStreamingVariables()
LegoCityGame::RegisterSaveLoadManagers(cLoadSaveManager&)
LegoCityGame::InitNewGame()
LegoCityGame::RequestProceedToGameplay()
LegoCityGame::ShouldIgnoreStartDoor(WORLDINFO&)
LegoCityGame::GetInhibitDropIn()
LegoCityGame::GetInhibitDropOut()
LegoCityGame::CreateSystems()
SystemMixins<MechGadgetProximitySystem>::UseDefault()
SystemMixins<MechGadgetControllerSystem>::UseDefault()
SystemMixins<MechGadgetTargetSystem>::UseDefault()
SystemMixins<DRCEmu>::UseDefault()
LegoCityGame::ConfigureSystems()
LegoCityGame::RegisterHelpers()
LegoCityGame::ParseGameConfigEntry(nufpar_s*)
LegoCityGame::ShouldAssignActionId(CharAnimEntry const*)
LegoCityGame::ConfigureCharSys()
LegoCityGame::CreateGameSplashScreens()
LegoCityGame::GetExtraGoldBrickCodeAt(int)
LegoCityGame::CreateHashCodeForExtraGoldbricks()
LegoCity100PercentCompleteFn()
LegoCityGame::OnInit()
LegoCityGame::PvsInitBg()
LegoCityGame::ForceUsingBrickCountTotal(bool)
LegoCityGame::Close()
LegoCityGame::TriggerAutoSave()
LegoCityGame::ResetSaveGame()
LegoCityGame::OnActivateLevel(WORLDINFO*)
LegoCityGame::SetDCamTakeoverScreenDefault(bool)
LegoCityGame::OnDeactivateLevel(WORLDINFO*)
LegoCityGame::OnInitPostConfig()
MechAddOns::RegisterClass(char const*, void* (*)(), bool)
void* Constructor<ZiplineAttachmentAddOn>()
void* Constructor<FarmerChickenGlideAddOn>()
void* Constructor<VehicleProximityToBlowUp>()
void* Constructor<TestCustomRenderClient>()
LegoCityGame_IncludeStatusSave(char)
LegoCityGame::OnLoadPermComplete(void*)
LegoCityGame::CreateLevelContainer(char const*, bool, LevelContainer::LevelContainerMemory, StreamingLevel*)
LegoCityGame::FindLocalisedTextureId(char const*)
LegoCityGame::ShouldGameCameraSetDoF(WORLDINFO&)
CityTimeOfDay::GetTimeOfDayName()
CityTimeOfDay::SetTimeOfDay(char const*)
CityTimeOfDay::SetTimeOfDay(CityTimeOfDay::TimeOfDay)
CityTimeOfDay::GetTimeOfDay()
LegoCityGame::GetStatusStages() const
LegoCityGame::GameParseCommandLine(int*, char***)
LegoCityGame::UpdateFrameworkConfig(FrameworkConfig&) const
LegoCityGame::CreateCustomCollections()
LegoCityGame::MiniCutStarted()
LegoCityGame::InitAbilities()
LegoCityGame::GetLevelConfigKeywords(nufpcomjmp_s*&, nufpcomjmp_s*&) const
LegoCityGame::WorldInfoDump(WORLDINFO*)
LegoCityGame::SetNewGameLevel()
LegoCityGame::Print(float, float, unsigned int, float, int, char*, float, float*, bool)
LegoCityGame::GetSuperCharMaterialNames() const
LegoCityGame::Process()
LegoCityGame::GetGlobalCollectableStatistic()
LegoCityGame::NobbleFireGizmoLayers(LevelContainer*)
LegoCityGame::UpdateSplitSegmentTargetObjects(LevelContainer&)
LegoCityGame::IsChunk0Complete()
LegoCityGame::CanEnableSuperfigCheat()
FirstPointCollector::~FirstPointCollector()
LegoCityGame::GetCityLocationName(char*)
LegoCityGame::EventNotify(Event&, NuEventData&)
LegoCityGame::ResetPickupBrickCount()
SAction_SetTimeOfDay::Exec(ScriptContext&)
SAction_ReplayingStandalone::Exec(ScriptContext&)
LegoCityGame::IsReplayingStandalone(LevelContainer*)
SAction_UseLiveReflections::Exec(ScriptContext&)
SAction_UsePedestrians::Exec(ScriptContext&)
LegoCityGame::ShouldCamVolumesApplyTo(MechCharacter*)
LegoCityGame::IsInTheHub()
LegoCityGame::OverridePlayerFrameObjId(int, int&)
LegoCityGame::UpdateGameObjectGameActions(MechCharacter*, int)
LegoCityGame::InSaveableLevel()
LegoCityGame::CanShowProgressLostMessage(LegoLevelContainer const&)
LegoCityGame::RecalcGamePercentage()
LegoCityGame::RegisterGizActions()
LegoCityGame::IsLevelTheCity(LegoLevelContainer&)
LegoCityGame::IsEnteringTheCity()
LegoCityGame::AddAdditionalGoldBrickTotal(int&)
LegoCityGame::PurchaseCollectedRedBricks()
LegoCityGame::CalculateCityStatistics()
LegoCityGame::ReCalculateGameCompletionPoints()
LegoCityGame::GameOptions_CompleteAllCityObjectives()
LegoCityGame::CalculateGameTotalCompletionPoints()
LegoCityGame::GetDistrictCollectableStatistic(eDistrictID)
LegoCityGame::GetLevelTokenCollectionCount(int)
LegoCityGame::CanAddStatusScreenPhase(unsigned int) const
LegoCityGame::GetPickupBrickCount()
LegoCityGame::SetPickupBrickCount(int)
LegoCityGame::GetVehicleGroupLevel()
LegoCityGame::SetVehicleGroupLevel(int)
LegoCityGame::GetPickupBrickMultiplier()
LegoCityGame::SetPickupBrickMultiplier(float)
LegoCityGame::GetPickupBrickCountTotal()
LegoCityGame::SetPickupBrickCountTotal(int)
LegoCityGame::GetAreaSavedPickupBrickCount()
LegoCityGame::SetAreaSavedPickupBrickCount(int)
LegoCityGame::GetGoldBrickBaseCost()
LegoCityGame::InitStatusScreen(WORLDINFO*, STATUSPACKET*)
LegoCityGame::SetResumeLocation(CityResumeLocation const&)
LegoCityGame::GetResumeLocation()
LegoCityGame::GetResumeHandler()
LegoCityGame::OnEnterNewArea(LegoLevelContainer const&)
LegoCityGame::ShouldDrawLevelName(WORLDINFO&)
LegoCityGame::IsUnpauseAllowed()
LegoCityGame::OnUnpauseGame()
LegoCityGame::GameSecretCode(char*, char const**)
LegoCityGame::GetPlayerHUDIconAlpha(MechCharacter*)
LegoCityGame::RequiresSplitScreenMenuOption()
DisableInputTriggerBatch(MechCharacter*, int*, int, bool)
LegoCityGame_IsTrain(ApiVehicle*)
LegoCityGame_IsCar(ApiVehicle*)
LegoCityGame_IsTruck(ApiVehicle*)
LegoCityGame_LookAtHead(ChaseCamera*, ChaseCameraState*, MechCharacter*)
LegoCityGame::ModeUsesChaseCamera(ChaseCamera*, ChaseCameraState*, MechCharacter*)
LegoCityGame::PausedShowStats(WORLDINFO&, int, int)
LegoCityGame::DrawPanel(WORLDINFO&)
LegoCityGame::UpdateTrueHeroTotal(WORLDINFO&, unsigned long&)
LegoCityGame::OnGrappleWhipTarget(MechCharacter&, GizmoGrapple&)
LegoCityGame::OnGrappleWhipTarget(MechCharacter&, GizmoObstacle*)
LegoCityGame::IsPauseAllowed()
LegoCityGame::GetCurrentStudCount()
LegoCityGame::OnCreateCutsceneInstance(CutsceneInstance&) const
LegoCityGame::AddAdditionalCharacters(WORLDINFO*, TempCharacterData&)
IsNintendoPlatform()
LegoCityGame::InitGlobalMessages()
LegoCityGame::LoadPermData()
LegoCityGame::LoadPermCityData(void*)
NuFixedStringT<(unsigned short)256>::Format(char const*, ...)
LegoCityGame_CorrectlyColourObject(GIZFLOW*, char*)
ReturnToLevelMenu::Enter(MENU*)
ReturnToLevelMenu::Update(MENU*)
ReturnToLevelMenu::ExitToLevel(MENU*, ReturnToLevelMenu::eMode, LEVELDATA const*)
ReturnToLevelMenu::Render(MENU*)
ReturnToLevelMenu::Exit(MENU*)
SideMissionsMenu::BlockPlayerPause(bool)
SideMissionsMenu::ShouldShow()
SideMissionsMenu::Enter(MENU*)
SideMissionsMenu::Update(MENU*)
SideMissionsMenu::Render(MENU*)
SideMissionsMenu::Exit(MENU*)
SideMissionsMenu::Enter_Dummy(MENU*)
SideMissionsMenu::Update_Dummy(MENU*)
SideMissionsMenu::Exit_Dummy(MENU*)
SideMissionsMenu::IsAllowed()
DummyMenu::BlockPlayerPause(bool)
DummyMenu::Update_Dummy(MENU*)
DummyMenu::Exit(MENU*)
DummyMenu::Enter(MENU*)
DummyMenu_NoPause::Update_Dummy(MENU*)
DummyMenu_NoPause::Exit(MENU*)
DummyMenu_NoPause::Enter(MENU*)
PauseRequestHandler::PauseRequestHandler(int)
PauseRequestHandler::RequestPause(int, PauseRequestHandler::Flags, bool, int)
PauseRequestHandler::Update()
PauseRequestHandler::UpdateRequest()
PauseRequestHandler::NotifyPauseRequestSuccess()
PauseRequestHandler::Reset()
PauseRequestHandler::GetRequestID() const
PauseRequestHandler::NotifyPauseRequestFail()
GameFramework::InitGameLanguages()
GameFramework::CreateSystemLevelContainer()
GameFramework::CreateGlobalLevelContainer()
GameFramework::CreateGUILevelContainer()
GameFramework::SetApiCameraFromLedEdHack()
LegoGameBase::OnCreateHubCutscenePlayer(HUBCUTSCENEPLAYER&)
LegoGameBase::ShouldUseDriveCam(LevelContainer*)
LegoGameBase::IsEpisodeStarted(int)
LegoGameBase::IsAlternativePauseButtonPressed(int, int&)
LegoGameBase::ShouldDrawPause(WORLDINFO&)
LegoGameBase::IsAllowedMagicPushRestrictCam(LegoLevelContainer&)
LegoGameBase::OnDestroyCutsceneInstance(CutsceneInstance const&) const
LegoGameBase::OnPlayerDataSetID(PlayerData const&)
LegoGameBase::PostLegoProgressReStoreAreaProgress(WORLDINFO*)
LegoGameBase::GetCreditsExtraScenePath(WORLDINFO const&, char*, int) const
LegoGameBase::OnCreateLegoVehicle(cLegoVehicle&)
LegoGameBase::ShouldLeaveFootPrintDecal(MechCharacter&, bool)
LegoCityGame::ShouldProcessPlayerLOSDuringDropOutDisappear()
LegoGameBase::IsAllowedToResetSafePositionOnTakeOver()
LegoGameBase::GameAllowsBuilderFileSaving()
LegoGameBase::AutoActivatePlayer(WORLDINFO*, int)
LegoGameBase::CollectAllHubGoldBricks()
LegoGameBase::SetAllRedBricksCollected()
LegoGameBase::AddToggleIcons()
LegoGameBase::UsingPartyManager()
LegoGameBase::CreateParty(int, int)
LegoGameBase::GetPartyMember(int)
LegoGameBase::GetPartyIndex(int)
LegoGameBase::SafeToSwitchToID(int, int)
LegoGameBase::GetPartySwitchID(int, int, bool)
LegoGameBase::SuppressCharacter(int)
LegoGameBase::IncrementBoltLimit(float)
LegoGameBase::UpdateBoltLimit()
LegoGameBase::CanFireBolt()
LegoGameBase::GetBoltLimitTime()
LegoGameBase::GetCurrentQuitIndex()
LegoGameBase::SetCurrentQuitIndex(ExitItemIndex)
LegoGameBase::OnEarlyDeactivate(WORLDINFO*)
LegoGameBase::VeryEarlyDeactivateLevel(WORLDINFO*)
LegoGameBase::OnInitLevel(WORLDINFO*)
LegoGameBase::InitialisePanelParams()
LegoGameBase::InitialiseCompletionInfo()
LegoGameBase::GetAdditionalGoldBrickTotal(int)
LegoGameBase::GetAdditionalGoldBricksCollected(int)
LegoGameBase::PostLoadPickup(LegoLevelContainer*, GizmoCSList*)
LegoGameBase::GoThroughDoor(WORLDINFO*, MechCharacter*, int)
LegoGameBase::ProcessPanel(float, bool)
LegoGameBase::Draw()
LegoGameBase::MenuDrawPauseMain_DrawViewMapMenuEntry(MENU*)
LegoGameBase::MenuDrawPauseMain_ViewMapShowMenu(MENU*)
LegoGameBase::MenuDrawPauseMain_SelectedViewMap(MENU*)
LegoGameBase::PreUpdateMenuProcess(WORLDINFO&)
LegoGameBase::LoadGlobalCharacters()
LegoGameBase::DrawCollectionGrid(WORLDINFO*, COLLECTION*, float, float, float, float, float, float)
LegoCityGame::CreateFlowHelper()
LegoGameBase::GetStartLevelIdOverride(char const*)
LegoGameBase::GetTextCrawlOverride(AREADATA*, char**, char**)
LegoGameBase::MenuUpdateInGameGotoLevel(MENU*)
LegoGameBase::MenuDrawInGameGotoLevel(MENU*)
LegoGameBase::MenuExitInGameGotoLevel(MENU*)
LegoGameBase::GetExitToHub() const
LegoGameBase::GetQuitToTitles() const
LegoGameBase::GetHubLData() const
LegoGameBase::GetStatusLData(LEVELDATA*) const
LegoGameBase::GetCreditsLData() const
LegoGameBase::IsReflectionEnabled() const
LegoGameBase::SetCameraSeeks(GAMECAMERA*)
LegoGameBase::CameraShake(GAMECAMERA*)
LegoGameBase::CameraShakeUpdate()
LegoGameBase::GetChaseCamCustomInfo(MechCharacter const*)
LegoGameBase::PreProcessLevelScripts(WORLDINFO&)
LegoGameBase::GetBoomerangLosRange()
LegoGameBase::GetForceVerticalSplit()
LegoGameBase::SetForceVerticalSplit(bool)
LegoGameBase::SetForceVerticalSplitLeftIndex(short)
LegoGameBase::GetForceMinicutToUseBlendedCam()
LegoGameBase::SetForceMinicutToUseBlendedCam(bool)
LegoGameBase::SetInhibitDropOut(bool)
LegoGameBase::GetInhibitTagging()
LegoGameBase::SetInhibitTagging()
LegoGameBase::OnPreLevelUnload(WORLDINFO&)
LegoGameBase::ExitStatusScreen()
LegoGameBase::UpdateStatusScreen(cGameStatus&, STATUSPACKET&)
LegoGameBase::UpdateStatusScreenSkip(cGameStatus&)
LegoGameBase::DrawStatusScreen(cGameStatus&)
LegoGameBase::DrawStatusScreenBG(cGameStatus&)
LegoGameBase::SetStatusBGAlpha(float)
LegoGameBase::OnSaveAndExitViaStatusScreen()
LegoGameBase::UpdateGoldBrickTotal()
LegoGameBase::DisableMinicutMovement()
LegoGameBase::AllowHackedPlayerList(AREADATA*) const
LegoGameBase::IsHotLego(Gizmo*)
LegoGameBase::PlayerTakeOverOccured(GameObject*)
LegoGameBase::SetTerrExtraMask(MechCharacter*, int*)
LegoGameBase::SetTerrExtraMask(MechCharacter*, int*, int)
LegoGameBase::DemoLevelChars(short*, WORLDINFO&)
LegoGameBase::TagAllow360Transfer(GameObject*)
LegoGameBase::SetTagMode(WORLDINFO*, bool)
LegoGameBase::GameCameraPropertiesOverride(int&, int&, int&, NUVEC&, NUMTX&, GAMECAMERA*, NUVEC const&, unsigned long)
LegoGameBase::OverrideGameCameraDoF(VuVec const&, VuVec&)
LegoGameBase::OverrideShadowFocalPoint(int, VuVec&)
LegoGameBase::CanTriggerFloorPads(MechCharacter*)
LegoGameBase::OnAnimate(WORLDINFO*, GameObject*)
LegoGameBase::SetLevelSfxBits(WORLDINFO*)
LegoGameBase::GameOverrideFollowPlayerAction(GameObject&, ScriptProcessor*, AIPACKET*)
LegoGameBase::GetMiniKitFileName(int, int, char*)
LegoGameBase::GetDockingStatus(GameObject*)
LegoGameBase::CanToggleInFreeplay(MechCharacter*)
LegoGameBase::ClrDockingStatus(MechCharacter*)
LegoGameBase::CanShowHint(int)
LegoGameBase::IsSpaceMissionEndSequenceActive()
LegoGameBase::SetSpaceMissionEndSequenceActive(bool)
LegoGameBase::SetHoloMenuActive(bool)
LegoGameBase::IsHoloMenuActive()
LegoGameBase::PreDropOutPlayer(int)
LegoGameBase::CanRestartScripts(MechCharacter*)
LegoGameBase::IncrementMissionScore(unsigned int)
LegoGameBase::SetMissionGoldBrickPos(VuVec&)
LegoGameBase::GetMissionGoldBrickPos(VuVec&)
LegoGameBase::GetDefaultAreaProgressBufferSize()
LegoGameBase::GetStartingHubRoomTag()
LegoGameBase::ResetGridAnim()
LegoGameBase::GridExitAnimFP(int, int)
LegoGameBase::GridExitAnimFP_Draw(float)
LegoGameBase::IsGridAnimating()
LegoGameBase::SetGridAnimating(bool)
LegoGameBase::ModifyFreeplayModelList(APICHARACTERMODELLIST*, int, short*, int, int)
LegoGameBase::CheckGameSpecificContexts(MechCharacter&)
LegoGameBase::SetLoadScriptWorldInfo(WORLDINFO*)
LegoGameBase::SetReturnAndQuitOnScreen(bool)
LegoGameBase::IsReturnAndQuitOnScreen()
LegoGameBase::GetLoadingMessage(unsigned int)
LegoGameBase::SetLoadingMessage(unsigned int, float)
LegoGameBase::CheckDamageTerrainAlways()
LegoGameBase::GetGameOverride_CanBreakOutLandJump(MechCharacter&)
LegoGameBase::CanBreakContextForSpecialMove(MechCharacter&)
LegoGameBase::GetSpecialMoveYTolerance(MechCharacter*, MechCharacter*)
LegoGameBase::OnCanDoSpecialMove(MechCharacter*, MechCharacter*, unsigned long, int)
LegoGameBase::SpecialMoveRayCastShouldHit(Entity const*, Geom const*, MechCharacter*, MechCharacter*)
LegoGameBase::GetDisableOffScreenPlayerDropOut(MechCharacter&)
LegoGameBase::IsPlayerPurchasing(int)
LegoGameBase::GetLocationNameAlpha()
LegoGameBase::CanDropOffClimbWall(MechCharacter*)
LegoGameBase::OnBeginMindControl(MechCharacter*, MechCharacter*)
LegoGameBase::IsAllowedLeviosaGlow(MechCharacter&)
LegoGameBase::OverrideBoltPos(MechCharacter*, NUVEC*, NUMTX*)
LegoGameBase::GetMagicPushCameraRatio()
LegoGameBase::OverridAwkwardShapeContextCheck(MechCharacter&)
LegoCityGame::IsPlayerGameObjectSelfThinking() const
LegoGameBase::ForceToOnlyDisplayOneLevelName(WORLDINFO*)
LegoGameBase::MenuDrawDuelingInstance(MENU*)
LegoGameBase::MenuUpdateDuelingInstance(MENU*)
SAction_SetTimeOfDay::~SAction_SetTimeOfDay()
SAction_SetTimeOfDay::GetName() const
SAction_SetTimeOfDay::GetInputs(SCmdParams&) const
SAction_SetTimeOfDay::GetOutputs(SCmdParams&) const
SAction_UseLiveReflections::~SAction_UseLiveReflections()
SAction_UseLiveReflections::GetName() const
SAction_UseLiveReflections::GetInputs(SCmdParams&) const
SAction_UseLiveReflections::GetOutputs(SCmdParams&) const
SAction_UsePedestrians::~SAction_UsePedestrians()
SAction_UsePedestrians::GetName() const
SAction_UsePedestrians::GetInputs(SCmdParams&) const
SAction_UsePedestrians::GetOutputs(SCmdParams&) const
SAction_ReplayingStandalone::~SAction_ReplayingStandalone()
SAction_ReplayingStandalone::GetName() const
SAction_ReplayingStandalone::GetInputs(SCmdParams&) const
SAction_ReplayingStandalone::GetOutputs(SCmdParams&) const
LegoCityVehiclePerfOverride::GetDebugName() const
LegoCityVehiclePerfOverride::Set(bool)
LegoCityLiveReflectionsPerfOverride::GetDebugName() const
LegoCityLiveReflectionsPerfOverride::Set(bool)
LegoCityPedestrianPerfOverride::GetDebugName() const
LegoCityPedestrianPerfOverride::Set(bool)
NuPerfOverridePVSVolume::GetType() const
MechContext* MechContextConstructor<GrappleRopeContext>(MechCharacter&)
MechContext* MechContextConstructor<BouncePadJumpContext>(MechCharacter&)
FirstPointCollector::SetWorldHitData(float, Geom const*, VuVec const&, VuVec const&)
FirstPointCollector::~FirstPointCollector()
void ScriptContext::SetReturn<SVarBool, bool>(int, bool)
SVarScalar<bool>::~SVarScalar()
SVarBool::~SVarBool()
SVarScalar<bool>::AsFloat() const
SVarScalar<bool>::AsInt() const
SVarScalar<bool>::AsBool() const
SVarBool::AsText() const
SVarScalar<bool>::Equals(ScriptVariable const*)
SVarScalar<bool>::Set(ScriptVariable const*)
SVarScalar<bool>::~SVarScalar()
SVarScalar<bool>::AsText() const
DummyMenu_NoPause::CloseEventData::~CloseEventData()
NuEventData::GetEventDataClassType() const
NuEventData::~NuEventData()
GlobalPlayerCharVars::GlobalPlayerCharVars()
GlobalPlayerCharVars::~GlobalPlayerCharVars()
GlobalPlayerCharVars::DestroyVars()
GlobalPlayerCharVars::Init()
GlobalPlayerCharVars::CreateVars()
GlobalPlayerCharVars::Update()
GlobalPlayerCharVars::Exit()
GlobalPlayerCharVars::SetPlayerVar(int, MechCharacter*)
GlobalPlayerCharVars::GetPlayerVar(int)
GlobalPlayerCharVars::ParseCommandLine(int, char**)
LegoCityGameObject::LegoCityGameObject(MechCharacter&)
LegoCityGameObject::~LegoCityGameObject()
OverHeadIcon::~OverHeadIcon()
non-virtual thunk to LegoCityGameObject::~LegoCityGameObject()
LegoCityGameObject::~LegoCityGameObject()
non-virtual thunk to LegoCityGameObject::~LegoCityGameObject()
LegoCityGameObject::IsPedestrian() const
LegoCityGameObject::IsEnforcer() const
LegoCityGameObject::IsCriminal() const
LegoCityGameObject::AllowLiftPlayer(MechCharacter&)
LegoCityGameObject::ApplyDefaultOrderHook()
LegoCityGameObject::Update()
LegoCityGameObject::RButtonCheck()
LegoCityGameObject::CheckSkyDive()
LegoCityGameObject::ShapShotAllowed()
LegoCityGameObject::EventNotify(Event&, NuEventData&)
non-virtual thunk to LegoCityGameObject::EventNotify(Event&, NuEventData&)
LegoCityGameObject::OverrideJumpLandContext(MechCharacter&, int)
LegoCityGameObjects::LegoCityGameObjects()
LegoCityGameObjects::Init()
MechContext* MechContextConstructor<DrillShockContext>(MechCharacter&)
MechContext* MechContextConstructor<KnockdownHitContext>(MechCharacter&)
MechContext* MechContextConstructor<KnockdownContext>(MechCharacter&)
MechContext* MechContextConstructor<KnockdownGetupContext>(MechCharacter&)
MechContext* MechContextConstructor<TreadmillContext>(MechCharacter&)
MechContext* MechContextConstructor<BenchPressContext>(MechCharacter&)
MechContext* MechContextConstructor<BuckingBroncoContext>(MechCharacter&)
MechContext* MechContextConstructor<RideAlongContext>(MechCharacter&)
MechContext* MechContextConstructor<LabyrinthContext>(MechCharacter&)
MechContext* MechContextConstructor<FishingContext>(MechCharacter&)
MechContext* MechContextConstructor<BasketBallContext>(MechCharacter&)
MechContext* MechContextConstructor<HookADuckContext>(MechCharacter&)
MechContext* MechContextConstructor<VerticalMazeContext>(MechCharacter&)
MechContext* MechContextConstructor<PipePuzzleContext>(MechCharacter&)
MechContext* MechContextConstructor<DJDeckContext>(MechCharacter&)
MechContext* MechContextConstructor<CoconutShyContext>(MechCharacter&)
LegoCityGameObjects::OnEnterLevel(LegoLevelContainer&)
LegoCityGameObjects::OnExitLevel(LegoLevelContainer&)
LegoCityGameObjects::OnDestroyMechCharacter(MechCharacter&)
LegoCityGameObjects::OnDestroyGameObject(GameObject&)
void ObjectiveTracker::ObjectiveMarker::TurnOffTarget<ApiCharacter>(ApiCharacter*)
LegoCityGameObjects::OverriveCharacterPhysicsCapsule(MechCharacter&)
AstroJetPack_MoveCode(MechCharacter*, int)
LegoCityGameObjects::EarlyMoveCode(MechCharacter&)
LegoCityGameObjects::MoveCode(MechCharacter&)
LegoCityGameObjects::PreUpdateGameObjects()
LegoCityGameObjects::OverheadIconProcess(MechCharacter&)
LegoCityGameObjects::GetDieWait(MechCharacter&)
LegoCityGameObjects::AdjustLayerBits(long&, MechCharacter*)
LegoCityGameObjects::AnimateCharacter(MechCharacter&)
LegoCityGlide_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoCityGameObjects::OnPostInitPlayer(MechCharacter&)
LegoCityGameObjects::LocaliseTexture(CharInst*)
LegoCityGameObjects::LocaliseTexture(MechCharacter&)
LegoCityGameObjects::OnPostInitCreature(MechCharacter&)
LegoCityGameObjects::OnPostPlayersInit()
LegoCityGameObjects::OnObjectMoved(MechCharacter&)
LegoCityGameObjects::CanToggle(MechCharacter const&) const
LegoCityGameObjects::CanToggle(MechCharacter const&, int)
LegoCityGameObjects::OnPreToggle(MechCharacter&, int, bool)
LegoCityGameObjects::OnPostToggle(MechCharacter&, int, bool)
LegoCityGameObjects::GetNextToggleCharacter(MechCharacter const&, LegoGameObjects::ToggleDirection, LegoGameObjects::ToggleInfo const&) const
LegoCityGameObjects::ParseCommandLine(int, char**)
LegoCityGameObjects::CanTag(MechCharacter&, MechCharacter&)
LegoCityGameObjects::CanTagToVehicle(MechCharacter&, MechVehicle&)
LegoCityGameObjects::IsCharacterAllowedToRideOnTopOfVehicles(MechCharacter&)
LegoCityGameObjects::OnObjHitObj(MechCharacter*, MechCharacter*, Bolt*, int&, unsigned long&, bool, bool)
LegoCityGameObjects::TakeOverActionOverride(int&, GameObject&, GameObject&)
LegoCityGameObjects::IsAllowedToFlicker(MechCharacter&)
LegoCityGameObjects::NotifyTakeOverChanged(MechCharacter&)
LegoCityGameObjects::ProcessTakeHit(MechCharacter*, int)
LegoCityGameObjects::OnLoseCoins(unsigned long&, eLOSECOINS, MechCharacter&)
LegoCityGameObjects::StartShrugIcon(MechCharacter&, int, int)
LegoCityGameObjects::StartShrugIcon(MechCharacter&, int, nuhspecial_s*, bool, bool, bool, int, bool, bool)
LegoCityGameObjects::SetShrugIconYOffset(MechCharacter&, float)
LegoCityGameObjects::EndShrugIcon(MechCharacter&)
LegoCityGameObjects::ForceEndShrugIcon(MechCharacter&)
LegoCityGameObjects::ForceEndDrawIcon(MechCharacter&)
LegoCityGameObjects::GetShrugIcons(Gizmo&, MechCharacter&, int&, int&)
LegoCityGameObjects::StartShrugHint(Gizmo&, MechCharacter&)
LegoCityGameObjects::EventNotify(Event&, NuEventData&)
LegoCityGameObjects::OnCreateMechCharacter(MechCharacter&)
LegoCityGameObjects::OnCreateGameObject(GameObject&)
LegoCityGameObjects::GetGameSpecificContextDrillShockId()
LegoCityGameObjects::OnObjHitShield(GameObject*, GameObject*, Bolt*, int&, unsigned long)
LegoCityGameObjects::OnDrawParaphernalia(MechCharacter*)
LegoCityGameObjects::CheckBoulerHint(WORLDINFO*, HINT_s*)
LegoCityGameObjects::CheckBoulerFailedHint(WORLDINFO*, HINT_s*)
LegoCityGameObjects::NotifyGameObjectRespawn(MechCharacter&)
LegoCityGameObjects::CheckInvulnerable(MechCharacter*, unsigned long, MechCharacter*)
LegoCityGameObjects::OverrideVehicleExitPosition(MechObjectInterface*, MechObjectInterface*, VehicleDefSeat::SEATTYPES, VuVec&, float, int, float, VuVec*)
LegoCityGameObjects::AllowJumpDirection(LegoCityGameObjects::DISMOUNT_DIRECTION, ApiVehicle*, VehicleDefSeat::SEATTYPES)
LegoCityGameObjects::SetVehicleTargetExitPointFromDirection(LegoCityGameObjects::DISMOUNT_DIRECTION, int, MechObjectInterface*, VehicleDefSeat::SEATTYPES, float, float)
LegoCityGameObjects::IsWaterBelowThisPosition(DynoScene*, Entity*, VuVec const&)
LegoCityGameObjects::CanTag(MechCharacter&) const
LegoCityGameObject::AllowCoinPickup(MechCharacter&)
LegoCityGameObject::AllowGizmoPickup(MechCharacter&, GizmoPickup&)
LegoCityGameObjects::~LegoCityGameObjects()
LegoCityGameObjects::~LegoCityGameObjects()
LegoGameObjects::ShouldWeReallyKillThisCharacter(MechCharacter*, MechCharacter*)
LegoGameObjects::NotifyCameraVolume(MechCharacter&, float, MechSockParams&)
LegoGameObjects::ModifyBurnDamageColour(MechCharacter&, NUCOLOUR3&)
LegoGameObjects::Sonar_MoveCode(GameObject&)
LegoGameObjects::OverrideTakeHitAnim(MechCharacter&, MechCharacter*, unsigned long)
LegoGameObjects::IgnoreInvulnerableFlag(MechCharacter&)
LegoGameObjects::PostOnObjHitObj(MechCharacter*, MechCharacter*, Bolt*, int&, unsigned long)
LegoGameObjects::CanDropIn(GameObject&, bool)
LegoGameObjects::CanSeeOrHearOpponent(MechCharacter*, MechCharacter*, float, unsigned long, float, float, float, int&)
LegoGameObjects::CanToggleIfNotCollected(MechCharacter&, int)
LegoGameObjects::GetCharacterTypeFlag(char const*)
LegoGameObjects::OnTagBetween(GameObject&, GameObject&)
LegoGameObjects::OnRemoveGameObject(GameObject&)
LegoGameObjects::OnTerrainChange(GameObject&, eSURFACE, eSURFACE, float)
LegoGameObjects::OnTerrainTouching(GameObject&, eSURFACE, float)
LegoGameObjects::DropsBigPickups(MechCharacter*)
LegoGameObjects::UpdateCharacterLights(GameObject&)
LegoGameObjects::GetAbilityBits(int, int) const
LegoGameObjects::GetMaxAbilities(int, int) const
LegoGameObjects::SetCharacterAbilities(int, CHARACTERDATA&, GAMECHARACTERDATA&)
LegoGameObjects::ObjCanWallJump(MechCharacter*)
LegoGameObjects::ObjCanHang(MechCharacter*)
LegoGameObjects::IsAllowedToDodge(MechCharacter&)
LegoGameObjects::OnGameObjectStateChange(GameObject&, LegoGameObjects::GAMEOBJSTATECHANGE)
LegoGameObjects::KillPartsExcludeLayers(MechCharacter&)
LegoGameObjects::ResetMaxHatsToSpawn()
LegoGameObjects::GetRebuildableHead()
LegoGameObjects::AllowDropIn(GameObject&, VuVec&)
LegoGameObjects::OnDroppingOut(GameObject&)
LegoGameObjects::HasCameraOverride(GameObject&)
LegoGameObjects::GetCameraOverride(GameObject&)
LegoGameObjects::GetCamLookOverride(GameObject&)
LegoGameObjects::HasSuperStrengthFromPotion(MechCharacter&)
LegoGameObjects::AllowShootWhilstInPuppetContext(MechCharacter&)
LegoGameObjects::AllowJumpWhilstInPuppetContext(MechCharacter&)
LegoGameObjects::IsVehicleCanUseGrapple(MechCharacter&)
LegoGameObjects::StopRunStop(MechCharacter&)
LegoGameObjects::IsOnSafePosition(GameObject*)
LegoGameObjects::OverrideLoseCoins(MechCharacter*, MechCharacter*)
LegoGameObjects::CanHover(GameObject&)
LegoGameObjects::NumberOfStudsToDrop(MechCharacter&)
LegoGameObjects::ClimbSpeedOverride(GameObject&)
LegoGameObjects::IsValidTakeOver(MechCharacter&, MechCharacter&)
LegoGameObjects::FinalTakeOverCheck(MechCharacter&, MechCharacter&)
LegoGameObjects::HandleCollisionWithEntity(GameObject*, Entity&)
LegoGameObjects::AllowTagToGameObj(GameObject*)
LegoGameObjects::CheckForStrafeTargetLock(GameObject&)
LegoGameObjects::FilterPhobia(MechCharacter&, int&)
LegoGameObjects::AddPhobiaArea(MechCharacter&)
LegoGameObjects::ShouldUseDeathAnim(MechCharacter&)
LegoGameObjects::CanDoShrug(MechCharacter&)
LegoGameObjects::SpecialMoveFilter(int, unsigned long, MechCharacter*, MechCharacter*)
LegoGameObjects::PreventChooserCycle(GameObject&)
LegoGameObjects::AllowResetHighlightTimeWhenTagOff(GameObject&)
LegoGameObjects::ForceContextAllowAlterEgoTag(GameObject&)
LegoGameObjects::AllowedToConsiderDigging(GameObject&)
LegoGameObjects::AllowedToAutoGrappleAttachCharactersClose()
LegoGameObjects::CanGoIntoLightUpContext(GameObject&)
LegoGameObjects::CanBeKilledByTerr(MechCharacter&)
LegoGameObjects::CanWearDisguise(int)
LegoGameObjects::CanAutoDropItem(GameObject*, LegoInventoryItem*)
LegoGameObjects::OverrideDrawTargetOffset(GameObject*, NUVEC&)
LegoGameObjects::IsOnDoomTerrain(MechCharacter*)
LegoGameObjects::DoomedRecovery(MechCharacter&)
LegoGameObjects::DoEdgeStopCode(MechCharacter&, bool)
LegoGameObjects::CanSprintTiltAddOnBeUsed(MechCharacter&)
LegoGameObjects::OverrideHudCharacterIconid(MechCharacter&)
LegoGameObjects::IsNonBoomerangCharThatNeedsGrappleTargeting(MechCharacter*)
LegoCityGameObjects::CreateGameData(MechCharacter&) const
DynamicScriptVariable<ApiCharacter>::~DynamicScriptVariable()
DynamicScriptVariable<ApiCharacter>::~DynamicScriptVariable()
ScriptVariable::AsFloat() const
ScriptVariable::AsInt() const
ScriptVariable::AsBool() const
ScriptVariable::AsText() const
DynamicScriptVariable<ApiCharacter>::Set(ScriptVariable const*)
DynamicScriptVariable<ApiCharacter>::EventNotify(Event&, NuEventData&)
non-virtual thunk to DynamicScriptVariable<ApiCharacter>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<ApiCharacter>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<ApiCharacter>::EventNotify(Event&, NuEventData&)
OverHeadIcon::~OverHeadIcon()
CharInst::SetTextureMap(CharTextureMap const*, bool)
BoltEventData::~BoltEventData()
LegoContextHandlerBase<KnockdownHitContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<KnockdownHitContext>::GetInstanceId() const
LegoContextHandlerBase<KnockdownGetupContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<KnockdownGetupContext>::GetInstanceId() const
LegoContextHandlerBase<ButtonGameContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<ButtonGameContext>::GetInstanceId() const
LabyrinthContext::LabyrinthContext(MechCharacter&)
LegoCityLegoGlowTargeting::CanDrawTargetGlow(MechCharacter&) const
LegoCityLegoGlowTargeting::DrawButtonWhipOffscreen(MechCharacter*)
LegoCityLegoGlowTargeting::LegoCityLegoGlowTargeting()
LegoCityLegoGlowTargeting::AddTakeHereArrowMsg(MechCharacter*, sGlowPacket&)
LegoCityLegoGlowTargeting::UpdateGlowForObject(MechCharacter*)
LegoCityLegoGlowTargeting::~LegoCityLegoGlowTargeting()
LegoCityLegoGlowTargeting::ShouldDrawGrappleOverPlayersHead(MechCharacter&) const
LegoGlowTargeting::DrawGlowOnWhipTargets()
LegoCityGrapples::LegoCityGrapples()
LegoCityGrapples::DrawFloorTarget(GizmoGrapple&)
LegoCityGrapples::GetMaxWhipLength()
LegoCityGrapples::AutoJumpAtTopOfGRapple(MechCharacter*, GizmoGrapple*)
LegoCityGrapples::SetAutoJumpForwardSpeed(MechCharacter*)
LegoCityGrapples::CheckXZDistance(GizmoGrapple&, NUVEC const*)
LegoCityGrapples::GetRequiredInventoryItem(MechCharacter&, GizmoGrapple*)
LegoCityGrapples::CanWhipGrapple(MechCharacter*)
LegoCityGrapples::IsGrappleValid(MechCharacter*, GizmoGrapple*)
LegoCityGrapples::CanUseGrapple(MechCharacter*, GizmoGrapple*)
CityGizmoGrapple::CityGizmoGrapple()
CityGizmoGrapple::LoadEx(WORLDINFO*, int)
CityGizmoGrapple::SetInstanceData(Gizmo*)
LegoCityGrapples::GetRopeMtl(GizmoGrapple*, MechCharacter&, int&)
LegoCityGrapples::GameGrappleDrawGrab(GizmoGrapple*, VuVec&, VuVec&)
GizmoGrapple::~GizmoGrapple()
CityGizmoGrapple::~CityGizmoGrapple()
Gizmo::InstanceMovedEx()
Gizmo::GetBuilderOrigin(NUVEC*)
GizmoGrapple::LOS_GetPoint(NUVEC&, TARGETING_TYPE, int)
GizmoGrapple::isAIInteractSupported()
non-virtual thunk to CityGizmoGrapple::~CityGizmoGrapple()
non-virtual thunk to CityGizmoGrapple::~CityGizmoGrapple()
AIInteractable::CanInteract(APIOBJECT* const&)
LegoCityGrapples::~LegoCityGrapples()
LegoGizmoSystemBase<LegoGrapples>::ShutDown()
LegoGizmoSystemBase<LegoGrapples>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoCityGrapples::CreateGrapple()
LegoGrapples::SetGrappleDirectionUp(MechCharacter*)
LegoGrapples::DrawGrappleHighlight(GizmoGrapple&)
LegoGrapples::AllowShrug()
LegoCityGrapples::GetBigJumpAtTopHeight(GizmoGrapple&)
LegoGrapples::GetExtraJumpHeight()
LegoGrapples::DrawGlowOnWhipTarget(MechCharacter&, GizmoGrapple&)
LegoCityHints::ShutDown()
LegoCityHints::InitNewGame()
LegoCityHints::OnEnterLevel(LegoLevelContainer&)
LegoCityHints::OnExitLevel(LegoLevelContainer&)
LegoCityHints::LoadDynamicHints()
LegoCityHints::FixUpEnums()
LegoCityHints::GetHintFunctions()
LegoCityHints::EventNotify(Event&, NuEventData&)
LegoCityHints::ShrugHintComplete()
LegoCityHints::DisplayButtonPrompt(Gizmo&, MechCharacter&, float)
Callback_DrawObstacleProgressBar(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoCityHints::DrawProgressBar(VuVec&, float, float, unsigned int*, bool, MechCharacter*)
LegoCityHints::DisplayLockedIcon(MechCharacter&, bool)
LegoCityHints::DisplayingLockedIcon(MechCharacter&)
LegoCityHints::DisplayLockedIconAtPosition(MechCharacter&, NUVEC const*, float)
LegoCityHints::DisplayButtonPromptAtPosition(MechCharacter&, NUVEC const*)
LegoCityHints::DisplayTagPromptAtCharacter(MechCharacter&)
LegoCityHints::GetHintIcon(WORLDINFO&, short)
LegoCityHints::ShrugHintTrigger(int)
LegoCityHints::ShrugHintTest(WORLDINFO*, HINT_s*)
LegoCityHints::VehicleControlHint(WORLDINFO*, HINT_s*)
LegoCityHints::PigControlHint(WORLDINFO*, HINT_s*)
LegoCityHints::CopterControlHint(WORLDINFO*, HINT_s*)
LegoCityHints::UFOControlHint(WORLDINFO*, HINT_s*)
LegoCityHints::CheckGrapplHint(WORLDINFO*, HINT_s*)
LegoCityHints::CheckGrapplFailedHint(WORLDINFO*, HINT_s*)
LegoCityHints::RCControlHint(WORLDINFO*, HINT_s*)
LegoCityHints::GrappleNewAreasHint(WORLDINFO*, HINT_s*)
LegoCityHints::FirstEncounterGrapple(bool)
LegoCityHints::SetHint(char const*, bool, bool)
LegoCityHints::SetHint(int, bool, bool)
LegoCityHints::SetToDefaultHintIcon()
LegoCityHints::SetCurrentHintIcon(short)
LegoCityHints::GetDefaultHintColour()
LegoCityHints::OnHintSet(WORLDINFO*, HINT_s*)
LegoCityHints::HintsSuppressed()
LegoCityHints::GetRandomLoadingHint(LevelContainer*, HINT_s*, bool&)
LegoCityHints::DrawHintForLoadScreen(WORLDINFO&, HINT_s*, float, float)
LegoCityHints::GetYPosModifiedForAspect(float)
LegoCityHints::~LegoCityHints()
LegoHints::PostInit()
LegoHints::CheckCharFlags(MechCharacter*, unsigned int)
LegoHints::DisplayIconPrompt(Gizmo&, MechCharacter&, float)
LegoHints::OnHintSet(WORLDINFO&, HINT_s&)
LegoCityItems::OnInit()
LegoCityItems::OnInitPostConfig()
LegoCityItems::EventNotify(Event&, NuEventData&)
LegoCityItems::AcquireJobValues()
LegoCityItems::GetSearchRange(MechCharacter*)
LegoCityItems::AllowPickUpItem(MechCharacter&, GizItem&)
LegoCityItems::CreateGizmoManager()
non-virtual thunk to LegoCityItems::CreateGizmoManager()
LegoCityItems::CanPickUpItem(MechCharacter&, GizItem&)
LegoCityItems::GetThrowSpeed(GizItem*)
LegoCityItems::GetDefaultThrowMom(GizItem&, float&, float&)
LegoCityItems::DoImpactItem(GizItem*)
LegoCityItems::OnItemHitObject(GizItem*, MechCharacter*, MechCharacter*)
LegoCityItems::CanThrowItemAtTarget(MechCharacter&, GizItem&, MechObjectData&)
LegoCityItems::CheckToRemoveTorchTimer(MechCharacter&, LegoInventoryItem&)
LegoCityItems::OnDropItemOverride(MechCharacter&, LegoInventoryItem&, int, VuVec*, float, GizItem**)
LegoCityItems::DestroyItemFeedback(LegoInventoryItem*, GizItem*, LegoItemType*, WORLDINFO*, NUMTX*, MechCharacter*, int)
LegoCityItems::OnPostAddDefaultItems(MechCharacter&)
LegoCityItems::AllowItemSwitching(MechCharacter&)
LegoCityItems::UpdateItem(WORLDINFO&, MechCharacter*, LegoInventoryItem*, GizItem*, LegoItemType*, NUMTX const*, float, bool, int)
LegoCityItems::DrawItemFX(WORLDINFO&, MechCharacter*, LegoInventoryItem*, GizItem*, LegoItemType*, NUMTX const*, float, bool, int)
LegoCityItems::OnInventoryItemStateChanged(MechCharacter&, LegoInventoryItem&)
LegoCityItems::ManageFireExtinguisher(MechCharacter&, bool)
LegoCityItems::IgnoreInputThisFrame(MechCharacter&, int)
LegoCityItemManager::LateUpdate(float)
LegoCityItemManager::UpdateItemsHint()
LegoCityItemManager::ItemHintListener::EventNotify(Event&, NuEventData&)
LegoCityItemManager::CheckDynamiteStickHint(WORLDINFO*, HINT_s*)
LegoCityItems::~LegoCityItems()
LegoCityItems::~LegoCityItems()
LegoGizmoSystemBase<LegoItems>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoItems::OnPreAddDefaultItems(MechCharacter&)
LegoItems::ModifyStreaks(MechCharacter&, LegoInventoryItem*, unsigned char&, unsigned char&, unsigned char&, unsigned char&, float&)
LegoItems::ModifyDrawPos(MechCharacter&, LegoInventoryItem&, int&, int&, NUVEC&, int&, NUMTX&, NUVEC&)
LegoItems::OnItemStopped(GizItem*)
LegoItems::OnCreateItem(GizItem&)
LegoItems::OnDestroyItem(GizItem&, NUMTX&, MechCharacter*, int)
LegoItems::ParseItemConfig(nufpar_s*, LegoItemType&)
LegoItems::InitPartFlags(GizItem&, unsigned int&)
LegoItems::ModifyAnimFlags(MechCharacter&, int, int)
LegoItems::CanThrowItemsAtPlugs(MechCharacter&)
LegoItems::CanThrowItemsAtBlowups(MechCharacter&)
LegoItems::CanThrowItemsAtOpponents(MechCharacter&)
LegoItems::ThrownItem(MechCharacter&, GizItem*)
LegoItems::CanTargetObject(MechCharacter*, MechCharacter*)
LegoItems::CanThrowAtBlowUp(MechCharacter&, BlowUp&, bool)
LegoItems::ModifyThrowGlowTargetMsg(MechCharacter&, GAMEMESSAGE&)
LegoItems::CanOnlyPickUpType(MechCharacter&)
LegoItems::CanSetGlowOnItemToPickUp(MechCharacter&, GizItem&)
LegoItems::CanPutDownItem(MechCharacter&, GizItem&)
LegoItems::CanAutoPickupItem(MechCharacter&, GizItem&)
LegoItems::CanAutoDropItem(MechCharacter&, LegoInventoryItem&)
LegoItems::CanPlugItem(MechCharacter&, GizmoPlug&)
LegoItems::CanUnclipItem(MechCharacter&, GizmoPlug&)
LegoItems::CanAnimateOutItemToPlug(MechCharacter&, LegoInventoryItem&)
LegoItems::DetectorCode(WORLDINFO&, GizItem&)
LegoCityItemManager::~LegoCityItemManager()
LegoGizmoManager::DoHiddenLayerCulling(int, GAMECAMERA&, int, int, int)
LegoGizmoManager::IsHiddenLayerCullingEnabled()
GizItemManager::SaveVersion()
LegoGizmoManager::RequestSfx()
LegoGizmoManager::ReleaseSfx()
LegoCityItemManager::ItemHintListener::~ItemHintListener()
LegoItemItemOnlyEventData::~LegoItemItemOnlyEventData()
LegoCityLedgesListener::EventNotify(Event&, NuEventData&)
LegoCityLedges::LegoCityLedges()
LegoCityLedges::~LegoCityLedges()
LegoCityLedges::~LegoCityLedges()
Ledge_VerticalMiss(NUVEC*, MechCharacter*)
Ledge_ShouldAutoJumpOff(MechCharacter*)
LegoCityLedges::GetLedgeType(LEDGEPIECE*)
LegoCityLedges::CheckLedge(GizmoLedge*, MechCharacter*, NUVEC*, int*, int*, float*, float*, unsigned char*, LegoParkour::MoveParameters*, LegoParkour::MoveParameters*)
LegoCityLedgeManager::FixUpLedgePieces()
LegoCityLedges::AccurateCheckLedge(MechCharacter*, GizmoLedge*)
LegoCityLedges::CanGrabLedge(GizmoLedge*)
LegoCityLedges::FindMoveTarget(MechCharacter*, WORLDINFO*, NUVEC*, int*, int*, LegoParkour::MoveParameters**, unsigned char*, bool*, LegoParkour::MoveParameters*, LegoParkour::MoveParameters*)
LegoCityLedges::FindJumpTarget(MechCharacter*, WORLDINFO*, NUVEC*, int*, unsigned short, float, float, float, float, unsigned short, unsigned char)
LegoCityLedges::OnInit()
LegoCityLedges::OnInitPostConfig()
LegoCityLedges::CreateGizmoManager()
non-virtual thunk to LegoCityLedges::CreateGizmoManager()
IsVerticalDrainPipePiece(GizmoLedge*)
IsDrainPipePiece(GizmoLedge*)
LegoCityLedges::MoveCode(WORLDINFO*, MechCharacter*)
LegoCityLedges::TwirlLedge_MoveCode(WORLDINFO*, MechCharacter*)
LegoCityLedges::HPole_CheckStoredInputs(MechCharacter*)
LegoCityLedges::HPole_UpdateLoopPadAngle(MechCharacter*)
LegoCityLedges::HPole_ClearStoredInputs(MechCharacter*)
LegoCityLedges::HPole_LoopInput(MechCharacter*)
LegoCityLedges::HPole_FlipLoopPadAngle(MechCharacter*)
LegoCityLedges::HPole_JumpInput(MechCharacter*)
LegoCityLedges::HPole_TurnInput(MechCharacter*)
LegoCityLedges::HPole_BackupStoredInputs(MechCharacter*, bool*, bool*)
LegoCityLedges::HPole_RestoreStoredInputs(MechCharacter*, bool, bool)
LegoCityLedges::HPole_IsHPoleToHPoleAction(short)
LegoCityLedges::IsWallHug(GizmoLedge*)
LegoCityLedges::AttachPoint(MechCharacter*, WORLDINFO*, NUVEC*, NUVEC*, NUVEC*, unsigned short*, int*, int*, int*, int*, GizmoLedge*, bool*)
LegoCityLedges::AttachTo(MechCharacter*, GizmoLedge*, NUVEC*, unsigned short)
LegoCityLedges::SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoCityLedges::GetDrawPos(MechCharacter*, NUVEC*)
LegoCityLedges::GetMoveForAI(GizmoLedge*, bool)
LegoCityLedges::FixUp_AI_Nodes(GizmoLedge*, AIManager&)
CMList<VuVec const*>::Append(VuVec const* const&, CMList<VuVec const*>::ListLink*)
LegoCityLedges::FixUp_AI(GizmoLedgeManager&, AIManager&)
LegoCityLedges::FixUp_AI_ConnectedLedges(GizmoLedgeManager*, AIManager&, ConvexNode*, GizmoLedge*)
LegoCityLedges::FixUp_AI_HPole(GizmoLedgeManager*, AIManager&, ConvexNode*, GizmoLedge*)
LegoCityLedges::FixUp_AI_DrainPipe(GizmoLedgeManager*, AIManager&, ConvexNode*, GizmoLedge*)
LegoCityLedges::FixUp_AI_Vault(GizmoLedgeManager*, AIManager&, GizmoLedge*)
LegoCityLedges::FixUp_AI_Fence(GizmoLedgeManager*, AIManager&, GizmoLedge*)
LegoCityLedges::FixUp_AI_VWallRun(GizmoLedgeManager*, AIManager&, GizmoLedge*)
LegoCityLedges::FixUp_AI_SymmetricalVault(GizmoLedgeManager*, AIManager&, GizmoLedge*, LegoParkour::MoveParameters**, int)
CMList<ConvexEdge*>::Append(ConvexEdge* const&, CMList<ConvexEdge*>::ListLink*)
AIVaultSelectionFunction(LegoParkour::MoveParameters*)
LegoCityLedges::FixUp_AI_TraditionalLedge(GizmoLedgeManager*, AIManager&, ConvexNode*, GizmoLedge*)
LegoCityLedges::FindNodeForLedge(AIManager&, float, GizmoLedge const*)
LegoCityLedges::FindNodeForLedge(AIManager&, GizmoLedge const*)
LegoCityLedges::FindNodeForLedgeBelowY(AIManager&, float, GizmoLedge const*)
LegoCityLedges::FindHighestAndLowestNodeForLedge(AIManager&, GizmoLedge const*, ConvexNode**, ConvexNode**)
LegoCityLedgeManager::OnInit()
LegoCityLedgeManager::EventNotify(Event&, NuEventData&)
LegoCityLedgeManager::AddSpecialInstances()
LegoCityLedgeManager::RemoveSpecialInstances()
LegoCityLedgeManager::PostLoad()
LegoCityLedgeManager::FixUp_LedgesNeighbours()
LegoCityLedgeManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
LegoCityLedgeManager::Draw(float, ClassManager::eRenderingPriority)
LegoCityLedge::~LegoCityLedge()
non-virtual thunk to LegoCityLedge::~LegoCityLedge()
LegoCityLedge::~LegoCityLedge()
non-virtual thunk to LegoCityLedge::~LegoCityLedge()
LegoCityLedge::IsTwirlLedge()
LegoCityLedge::PositionNextPiece(GizmoLedge*)
LegoCityLedge::PositionPrevPiece(GizmoLedge*)
LegoCityLedge::SetVisibility(int)
LegoCityLedge::Hide(unsigned char, bool)
LegoCityLedgesListener::~LegoCityLedgesListener()
GizmoLedgeManager::~GizmoLedgeManager()
LegoCityLedgeManager::~LegoCityLedgeManager()
LegoGizmoManager::LateUpdate(float)
GizmoLedgeManager::SaveVersion()
Gizmo::LoadInstanceDataEx(WORLDINFO*, int)
Gizmo::SaveInstanceDataEx(WORLDINFO*)
GizmoLedge::isAIInteractSupported()
LegoGizmoSystemBase<LegoLedges>::ShutDown()
LegoGizmoSystemBase<LegoLedges>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoLedges::GameSpecificCheck(MechCharacter*, GizmoLedge*)
LegoCityLedges::GetTargetPos(MechCharacter*, NUVEC*, int)
LegoLedges::CanUseLedge(MechCharacter&, GizmoLedge&)
LegoLedges::CanBeTargetedByBoomerang(GizmoLedge*, MechCharacter*)
LegoLedges::NearbyLedgeGrabRange()
LegoCityLedges::CanTwirl(MechCharacter*)
DetectiveMode::DetectiveMode()
DetectiveMode::LookUpSpecialForSwitch(char const*)
DetectiveMode::AddSpecialForSwitch(Gizmo*, char const*)
DetectiveMode::ClearSpecialToSwitchList()
DetectiveMode::RemoveSpecialToSwitchEntry(Gizmo*)
DetectiveMode::AddFootprintProperties(char const*, float, float)
DetectiveMode::LookupFootprintProperties(char const*, float&, float&)
DetectiveMode::LoadFootprintProperties()
DetectiveMode::FoundReveal(GizSwitch*)
DetectiveMode::HasFoundReveal(GizSwitch*)
DetectiveMode::HideFalseQuestions(WORLDINFO*, MechCharacter&, GizSwitch*, bool, bool)
DetectiveMode::GetFalseQuestionsPos(WORLDINFO*, MechCharacter&, GizSwitch*, VuVec*, bool)
DetectiveMode::HideFootprints(WORLDINFO*, MechCharacter&, GizSwitch*)
DetectiveMode::HideReveal(WORLDINFO*, MechCharacter&, GizSwitch*)
DetectiveMode::FadeCurrentFootprintsOff(MechCharacter&)
DetectiveMode::FadeFootprints(bool)
DetectiveMode::UpdateFootprintFade(MechCharacter&)
DetectiveMode::OnDeactivateObstacle(LegoCityObstacle*)
DetectiveMode::OnDeactivateSwitch(LegoCitySwitch*)
DetectiveMode::OnEnterLevel(LegoLevelContainer*)
DetectiveMode::PositionRayCastedFootprints(int)
DetectiveMode::RayCastFootprint(WORLDINFO*)
DetectiveMode::AddFootprintPickup(NUVEC&, WORLDINFO&)
SplineGeneratorCB(VuVec const&, VuVec const&, int, float, float, void*)
DetectiveMode::SplineGeneratorCallback(VuVec const&, VuVec const&, int, float, float, SplineData*)
DetectiveMode::OnDraw(float, ClassManager::eRenderingPriority)
DetectiveMode::ClearFootprintPickupList()
DetectiveMode::PopulateList(WORLDINFO*, MechCharacter&, GizSwitch*)
CMList<GizmoObstacle*>::Append(GizmoObstacle* const&, CMList<GizmoObstacle*>::ListLink*)
DetectiveMode::CrossedTile(MechCharacter&)
DetectiveMode::Update(MechCharacter&)
DetectiveMode::RestObstaclesAndSwitch(MechCharacter&)
DetectiveMode::InitializeMechanicInArea(WORLDINFO*, MechCharacter&)
DetectiveMode::UpdateFootprintPickupFade()
DetectiveMode::ExitDetectiveMode(MechCharacter&, bool)
NuPositionable::SetDirection(NuVector3Base const&, NuVector3Base const&)
DetectiveMode::EnterDetectiveMode(MechCharacter&)
DetectiveMode::IsInDetectiveMode()
DetectiveMode::CleanUp()
DetectiveMode::GetNearestFootprintPosition(MechCharacter&)
DetectiveMode::OnExitLevel()
DetectiveMode::AllowDetectiveMode(bool)
LegoCityObstacle_TurnOffDetectiveFootprints(MechCharacter*)
LegoCityObstacle_TurnOffDetectiveMode(MechCharacter*)
LegoCityObstacles_AllowDetectiveMode(MechCharacter*, bool)
LegoCityObstacles_SetDetectiveFootprint(Gizmo*, char const*)
LegoCityObstacles_HintDetective(WORLDINFO*, HINT_s*)
LegoCityObstacles_IsSpotVisible(GizSwitch*, MechCharacter*)
LegoCityObstacles_CanUseSwitch(GizSwitch*, MechCharacter*)
DetectiveModeContextHandler::OnProcess(LevelContainer*, float)
DetectiveModeContextHandler::OnEnter(LevelContainer*)
DetectiveModeContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
DetectiveModeContextHandler::OnLeave()
LegoCityObstacle::LegoCityObstacle(EdRegContext&)
LegoCityObstacle::DeactivateLevel()
LegoCityObstacle::DestroySilverLego()
LegoCityObstacle::IsDetectiveModeObstacle()
LegoCityObstacle::ShowMapPin(bool)
LegoCityObstacle::IsBrickGrabFlagSet(unsigned char)
LegoCityObstacle::SetBrickGrabFlag(unsigned char)
LegoCityObstacle::IsSkyDiveIndestructableFlagSet()
LegoCityObstacle::CreateAndUpdateSilverLego()
LegoCityObstacle::FixupBrickGrabs(GizmoCSList*)
LegoCityObstacle::FixupBouncePadTarget(WORLDINFO*)
LegoCityObstacle::SetInstanceData(GizmoObstacle*)
LegoCityObstacle::LoadInstanceDataEx(WORLDINFO*, int)
LegoCityObstacle::LoadEx(WORLDINFO*, int)
LegoCityObstacle::SaveInstanceDataEx(WORLDINFO*)
LegoCityObstacle::HandlePaintHit(WORLDINFO const*, Bolt*)
LegoCityObstacle::CharacterEnteredConvexNode(Brain*, ConvexNode const*)
LegoCityObstacle::CharacterBouncedOnObstacle(MechCharacter&) const
LegoCityObstacle::Activate(bool)
LegoCityObstacle::Hide(unsigned char, bool)
LegoCityObstacle::ActivateLevel()
LegoCityObstacle::UpdateMapPin()
LegoCityObstacle::IsColouredCorrectly()
LegoCityObstacle::ColourCorrectly()
LegoCityObstacleManager::LegoCityObstacleManager()
LegoCityObstacleManager::OnInit()
LegoCityObstacleManager::EventNotify(Event&, NuEventData&)
LegoCityObstacleManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoCityObstacleManager::Draw(float, ClassManager::eRenderingPriority)
LegoCityObstacleManager::LateUpdate(float)
LegoCityObstacleManager::PostLoad()
LegoCityObstacleManager::FixUp_AI_Nodes(AIManager&)
LegoCityObstacleManager::FixUp_AI(AIManager&)
LegoCityObstacleManager::Fixup_AI_BrickGrab(AIManager&, LegoCityObstacle*)
LegoCityObstacleManager::Fixup_AI_PostHop(AIManager&, LegoCityObstacle*)
LegoCityObstacleManager::Fixup_AI_Bouncepad(AIManager&, LegoCityObstacle*)
LegoCityObstacleManager::Fixup_AI_WallRun(AIManager&, LegoCityObstacle*)
LegoCityObstacles::CreateGizmoManager()
non-virtual thunk to LegoCityObstacles::CreateGizmoManager()
LegoCityObstacles::CanPushObstacle(MechCharacter&, GizmoObstacle*, int)
LegoCityObstacles::OnPushObstacleFinished(MechCharacter&, GizmoObstacle&)
LegoCityObstacles::OnPushObstacleFailed(MechCharacter&, GizmoObstacle&)
LegoCityObstacles::OnPushObstacleUpdate(MechCharacter&, GizmoObstacle&)
LegoCityObstacles::OnInitPostConfig()
LegoCityObstacles::CanBeAITrigger(GizmoObstacle*)
LegoCityObstacles::CanBeGrappled(GizmoObstacle*)
LegoCityObstacles::CanTriggerProximityObstacleWhileDead(GizmoObstacle*, MechCharacter*)
LegoCityObstacles::DontAddKrawlieCollision(GizmoObstacle*)
LegoCityObstacles::ExtraObstacleCheck(MechCharacter&, GizmoObstacle&)
LegoCityObstacles::OnEnterLevel(LegoLevelContainer&)
LegoCityObstacles::GetPushAnimationSpeed(MechCharacter&)
LegoCityObstacles::OnEnterEditor(LegoLevelContainer&)
LegoCityObstacles::OnExitEditor(LegoLevelContainer&)
LegoCityObstacles::OnInit()
MechContext* MechContextConstructor<DetectiveModeContextHandler>(MechCharacter&)
LegoCityObstacles::MoveCode(MechCharacter&, LegoLevelContainer*)
LegoCityObstacles::CanTriggerProximity(GizmoObstacle&, MechCharacter&)
DetectiveModeContextHandler::~DetectiveModeContextHandler()
LegoContextHandlerBase<DetectiveModeContextHandler>::GetInstanceId() const
LegoCityObstacle::~LegoCityObstacle()
LegoCityObstacle::~LegoCityObstacle()
GizmoObstacle::GetMechObjectInterfacePtr()
GizmoObstacle::GetTargetType()
GizmoObstacle::GetGameAnimSet() const
GizmoObstacle::Targeting_GetTargetPos(NUVEC&, TARGETING_TYPE, int)
GizmoObstacle::LOS_GetPoint(NUVEC&, TARGETING_TYPE, int)
GizmoObstacle::isAIInteractSupported()
GizmoObstacle::ForceWhipPull(MechCharacter*)
GizmoObstacle::SetForceWhipPull(bool, MechCharacter*)
GizmoObstacle::GameSpecificCheck(MechCharacter&, GizmoObstacle&)
GizmoObstacle::CanBeTargeted()
GizmoObstacle::CanBeTargetedByBolt(BoltType const&)
GizmoObstacle::Glow_GetTargetPos(NUVEC&, int)
GizmoObstacle::BoltHit(NUVEC*, int, int, Bolt*)
GizmoObstacle::IsASpinner()
non-virtual thunk to LegoCityObstacle::~LegoCityObstacle()
non-virtual thunk to LegoCityObstacle::~LegoCityObstacle()
non-virtual thunk to LegoCityObstacle::~LegoCityObstacle()
non-virtual thunk to LegoCityObstacle::~LegoCityObstacle()
LegoCityObstacleManager::~LegoCityObstacleManager()
GizmoObstacleManager::SaveVersion()
LegoCityObstacles::~LegoCityObstacles()
LegoGizmoSystemBase<LegoObstacles>::ShutDown()
LegoGizmoSystemBase<LegoObstacles>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoObstacles::AllowPhysicsSlam(Gizmo&) const
LegoObstacles::CanObjUseAITrigger(GizmoObstacle*, MechCharacter*)
LegoObstacles::DrawTwinkles(GizmoObstacle const&) const
LegoObstacles::GameObstEarlyUpdate(GizmoObstacle&, float)
LegoObstacles::ShouldBeOnBoltHitList(GizmoObstacle&)
LegoObstacles::CanPushObstInAir(MechCharacter&)
LegoObstacles::PreventTagging(GameObject&)
LegoObstacles::ShouldPlayForwards(GizmoObstacle&, int)
LegoObstacles::OnPlayForwards(GizmoObstacle&, int)
LegoObstacles::OnPlayingForwards(GizmoObstacle&)
LegoObstacles::OnObstacleAnimationPlayedToEnd(GizmoObstacle&)
LegoObstacles::OnObstacleAnimationPlayedToStart(GizmoObstacle&)
LegoObstacles::Draw(GizmoObstacle*, float)
LegoObstacles::ActivatesWallCut(Gizmo*)
LegoCityObstacles::PullObstRequiredButtonBash(GizmoObstacle&)
LegoObstacles::ObstaclesCanBePunched()
LegoObstacles::ShouldDo2DBoltAngleCheck(BoltType const&, GizmoObstacle*)
LegoObstacles::SendInfoToAddon(GizmoObstacle*, int)
LegoCityObstacles::ShouldAllowCameraShakeOverride(GizmoObstacle const&) const
LegoObstacles::AllowCameraLookat()
LegoObstacles::CanBeTargeted(GizmoObstacle&, MechCharacter*, TARGETING_TYPE)
LegoObstacles::CanBeTargetedWhenAnimAtEnd(GizmoObstacle&)
LegoCityObstacles::CreateObstacle(EdRegContext&)
non-virtual thunk to LegoObstacles::AllowPhysicsSlam(Gizmo&) const
NuDynamicStringT<true>::Reserve(unsigned short)
CharInst::SetMaterialMap(CharMaterialMap const*, bool, bool)
BoolEventData<DetectiveMode>::~BoolEventData()
LegoContextHandlerBase<DetectiveModeContextHandler>::~LegoContextHandlerBase()
Pickup_CollectCoin_LegoCity(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectRedBrick_LegoCity(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectGoldBrick_LegoCity(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_SuperBrick_Update(WORLDINFO*, GizmoPickup*)
Pickup_CollectGoldPlate(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectMultiplier(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectPhantomWidget(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectBrick(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectCharacterToken(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectGlidePowerUp(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectShieldToken(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectJetPackPowerUp(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CreateTrail(WORLDINFO*, PART*, NUVEC const*)
Pickup_UpdateTrail(PART*, GizmoPickup*)
Pickup_StopTrail(PART*, GizmoPickup*)
Pickup_TrailTransfer(PART*, GizmoPickup*)
CityGizmoPickup::RenderPickupSpecial(WORLDINFO*, NUMTX&, int, float)
CityGizmoPickup::Reset()
CityGizmoPickup::SetVisibility(int)
LegoCityPickups::AllGoldBricksCollectedEvent::Fire(NuEventData const&)
LegoCityPickups::LegoCityPickups()
LegoCityPickups::GetPickupSysTable()
LegoCityPickups::OnInit()
LegoCityPickups::EventNotify(Event&, NuEventData&)
LegoCityPickups::ApplyDynamicScale(WORLDINFO*, GizmoPickup*, float*)
LegoCityPickups::Do2DCollision(MechCharacter&, float&)
LegoCityPickups::PickupUpdate(GizmoPickup&)
LegoCityPickups::OnEnterLevel(LegoLevelContainer&)
LegoCityPickups::CheckRedBrickCheatScale(WORLDINFO*, GizmoPickup*, float*)
PartStop_CityBrick(PART*)
Brick_Collect(MechCharacter*, NUVEC*, unsigned short, short, int, NUCOLOUR3&)
Brick_PartCollide(PART*)
AddBricksAsParts(WORLDINFO*, int, NUVEC const*, NUVEC*, float, bool, int, bool, int, bool)
CityPickup_Remap_Objid_To_PickupID(unsigned int)
CharToken_GameMsg_Draw(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoCityPickups::DrawPickUpExtra(GizmoPickup*, char*, int, int, NUMTX*, float)
Shield_GameMsg_Update(GAMEMESSAGE*)
Shield_GameMsg_Draw(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
Shield_GameMsg_End(GAMEMESSAGE*)
LCScoreMultiplier_DrawGameMessage(MechCharacter*, MechCharacter*, bool)
LegoCityPickups::SaveLoad::SaveLoad(char const*)
LegoCityPickups::SaveLoad::~SaveLoad()
LegoCityPickups::SaveLoad::~SaveLoad()
LegoCityPickups::SaveLoad::GetTotalSizeInBytes()
LegoCityPickups::SaveLoad::Reset()
LegoCityPickups::SaveLoad::SaveSaveGame(EdStream&, int)
LegoCityPickups::SaveLoad::CopyFromGame()
LegoCityPickups::SaveLoad::LoadSaveGame(EdStream&, int, int)
LegoCityPickups::SaveLoad::CopyToGame()
LegoCityPickups::SaveLoad::InitNewGame()
LegoCityPickups::UpdatePickupTimer()
CityGizmoPickup::~CityGizmoPickup()
Gizmo::SetGamePos(NUVEC&)
non-virtual thunk to CityGizmoPickup::~CityGizmoPickup()
non-virtual thunk to CityGizmoPickup::~CityGizmoPickup()
LegoCityPickups::AllGoldBricksCollectedEvent::~AllGoldBricksCollectedEvent()
ScriptEvent::Validate()
LegoCityPickups::~LegoCityPickups()
LegoGizmoSystemBase<LegoPickups>::ShutDown()
LegoGizmoSystemBase<LegoPickups>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoCityPickups::GetNumPickupTypes()
LegoPickups::DontClipLevPickups(WORLDINFO*)
LegoPickups::OnPickUpOrTrigger(GizmoPickup*)
LegoPickups::OnPostLoadPickup(GizmoPickup&)
LegoPickups::OnPostLoadPickups()
LegoCityPickups::CreatePickup()
LegoCityPoleClimbs::Init()
LegoCityPoleClimbs::~LegoCityPoleClimbs()
LegoGizmoSystemBase<LegoPoles>::ShutDown()
LegoGizmoSystemBase<LegoPoles>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoPoles::OnPlayerAttach(MechCharacter*)
LegoCityPushBlock::LegoCityPushBlock()
LegoCityPushBlock::Reset()
LegoCityPushBlock::Activate(bool)
LegoCityPushBlock::LoadEx(WORLDINFO*, int)
LegoCityPushBlock::GetOutputName(int)
LegoCityPushBlock::GetOutput(int, int)
LegoCityPushBlock::HandlePaintHit(WORLDINFO const*, Bolt*)
LegoCityPushBlock::SetInstanceData(Gizmo*)
LegoCityPushBlock::CreateJoint()
LegoCityPushBlock::ResetForLoop()
LegoCityPushBlocks::Update(PushBlock*)
LegoCityPushBlocks::CanPushBlock(MechCharacter&, PushBlock&, bool)
PushBlock_VerifyLOS(PushBlock*, NUVEC const*, NUVEC const*, NUVEC const*, FirstPointCollector*, float)
LegoCityPushBlocks::~LegoCityPushBlocks()
LegoGizmoSystemBase<LegoPushBlocks2>::ShutDown()
LegoGizmoSystemBase<LegoPushBlocks2>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoPushBlocks2::HandleBoltHit(WORLDINFO*, PushBlock&, Bolt&, NUVEC&, MechCharacter*)
LegoCityPushBlocks::CreatePushBlock()
LegoCityPushBlocks::TargetPushBlocks()
LegoCityPushBlock::~LegoCityPushBlock()
LegoCityPushBlock::~LegoCityPushBlock()
PushBlock::SetXRot(unsigned short)
PushBlock::SetZRot(unsigned short)
PushBlock::GetLegoSpecial() const
LegoCityPushBlock::CanNudgeWithBoltsWhenDynamic()
PushBlock::GetNumOutputs()
PushBlock::isAIInteractSupported()
non-virtual thunk to LegoCityPushBlock::~LegoCityPushBlock()
non-virtual thunk to LegoCityPushBlock::~LegoCityPushBlock()
non-virtual thunk to LegoCityPushBlock::~LegoCityPushBlock()
non-virtual thunk to LegoCityPushBlock::~LegoCityPushBlock()
LegoCityProgressSystem::ExcludeFromProgress(LEVELDATA&)
LegoProgressSystem::~LegoProgressSystem()
LegoCityProgressSystem::~LegoCityProgressSystem()
LegoProgressSystem::GetCreatureProgress(WORLDINFO*, LEVEL_PROGRESS_s*)
LegoCityProgressSystem::KeepLevelProgressByDefault(LEVELDATA&)
SuperBuildGizmos::SuperBuildGizmos()
SuperBuildGizmos::CreateGizmoManager()
non-virtual thunk to SuperBuildGizmos::CreateGizmoManager()
SuperBuildGizmos::CreateHelper()
SuperBuildGizmos::CreateSuperBuild()
SuperBuildGizmos::OnInit()
MechContext* MechContextConstructor<SuperBuildContextHandler>(MechCharacter&)
SuperBuildGizmos::OnInitPostConfig()
SuperBuildGizmos::IsUsingASuperBuild(MechCharacter&) const
SuperBuildGizmos::GetTargetHeading(SuperBuildGizmo*, MechCharacter*, bool)
SuperBuildGizmos::DealWithObjectsInArea(SuperBuildGizmo&, MechCharacter*)
SuperBuildGizmos::GameObjectCanUse(SuperBuildGizmo&, MechCharacter*, float)
SuperBuildGizmos::PreLoadResources(SuperBuildGizmo*, MechCharacter*)
SuperBuildGizmos::DisplayButtonPrompt(SuperBuildGizmo*, MechCharacter*)
SuperBuildGizmos::HideButtonPrompt(SuperBuildGizmo*, MechCharacter*)
SuperBuildGizmos::NotifyCannotBuy(SuperBuildGizmo*, MechCharacter*)
SuperBuildInputTrigger::IsInputTriggered(MechCharacter&, unsigned int, SuperBuildGizmo&)
SuperBuildGizmos::IsPlayerWithinSuperbuildRange(MechCharacter*, SuperBuildGizmo*)
SuperBuildGizmos::MoveCode(MechCharacter*)
SuperBuildGizmoManager::FindNearestSuperBuild(NUVEC const*, MechCharacter*, float*, float, SuperBuildGizmo*, SuperBuildGizmos::eCANUSE*)
SuperBuildGizmo::SetUser(MechCharacter*)
SuperBuildGizmo::SetPhase(int)
SuperBuildGizmos::CanCheckForSuperBuilds(MechCharacter&)
SuperBuildGizmos::EventNotify(Event&, NuEventData&)
SuperBuildGizmos::OnExitLevel(LegoLevelContainer&)
SuperBuildGizmo::SuperBuildGizmo()
SuperBuildGizmo::~SuperBuildGizmo()
non-virtual thunk to SuperBuildGizmo::~SuperBuildGizmo()
SuperBuildGizmo::~SuperBuildGizmo()
non-virtual thunk to SuperBuildGizmo::~SuperBuildGizmo()
SuperBuildGizmo::GetClass() const
SuperBuildGizmo::Init(WORLDINFO*)
SuperBuildGizmo::IsFlagSet(SuperBuildGizmo::FLAGS)
SuperBuildGizmo::GetNumOutputs()
SuperBuildGizmo::GetOutput(int, int)
SuperBuildGizmo::GetOutputName(int)
SuperBuildGizmo::DoneStreamingAnim()
SuperBuildGizmo::Reset()
SuperBuildGizmo::GameAnimSet_ApplyVisibility()
SuperBuildGizmo::IsInteractionAllowed()
SuperBuildGizmo::Activate(bool)
SuperBuildGizmo::SetVisibility(int)
SuperBuildGizmo::LoadEx(WORLDINFO*, int)
SuperBuildGizmo::EnsureGotButtonFlagSet()
SuperBuildGizmo::EnsureGotTypeFlagSet()
SuperBuildGizmo::SaveEx(WORLDINFO*)
SuperBuildGizmo::LoadInstanceDataEx(WORLDINFO*, int)
SuperBuildGizmo::SaveInstanceDataEx(WORLDINFO*)
SuperBuildGizmo::InstanceMovedEx()
SuperBuildGizmo::GetBuilderOrigin(NUVEC*)
SuperBuildGizmo::SetAlpha(float)
SuperBuildGizmo::GetMyIndex()
SuperBuildGizmo::AIInteract(APIOBJECT* const&, float)
non-virtual thunk to SuperBuildGizmo::AIInteract(APIOBJECT* const&, float)
SuperBuildGizmo::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to SuperBuildGizmo::SetupInteractFocus(Task_PathTo&, AIManager const&)
SuperBuildGizmo::CanInteract(APIOBJECT* const&)
non-virtual thunk to SuperBuildGizmo::CanInteract(APIOBJECT* const&)
SuperBuildGizmoManager::SuperBuildGizmoManager()
SuperBuildGizmoManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
SuperBuildGizmoManager::LateUpdate(float)
SuperBuildGizmoManager::Draw(float, ClassManager::eRenderingPriority)
SuperBuildGizmoManager::AllocateProgressData(WORLDINFO*)
SuperBuildGizmoManager::ClearProgress(WORLDINFO*, void*)
SuperBuildGizmoManager::StoreProgress(WORLDINFO*, void*)
SuperBuildGizmoManager::Reset(WORLDINFO*, void*)
SuperBuildGizmoManager::EventNotify(Event&, NuEventData&)
SuperBuildGizmoManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
SuperBuildGizmoManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
SuperBuildGizmoManager::RequestSfx()
SuperBuildGizmoManager::ReleaseSfx()
SuperBuildGizmoManager::IsHiddenLayerCullingEnabled()
SuperBuildGizmoManager::DoHiddenLayerCulling(int, GAMECAMERA&, int, int, int)
SuperBuildContextHandler::OnProcess(LevelContainer*, float)
SuperBuildContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
SuperBuildContextHandler::OnLeave()
SuperBuildGizmoManager::~SuperBuildGizmoManager()
SuperBuildGizmoManager::SaveVersion()
SuperBuildContextHandler::~SuperBuildContextHandler()
LegoContextHandlerBase<SuperBuildContextHandler>::GetInstanceId() const
SuperBuildGizmos::~SuperBuildGizmos()
SuperBuildGizmos::~SuperBuildGizmos()
LegoGizmoSystemBase<SuperBuildGizmos>::ShutDown()
LegoGizmoSystemBase<SuperBuildGizmos>::ShouldAddManagersForLevel(MechLevelContainer&)
SuperBuildGizmos::GetFailedAnimAction(SuperBuildGizmo*)
SuperBuildGizmo::GetVisibility() const
SuperBuildGizmo::SetGamePos(NUVEC&)
SuperBuildGizmo::GetGameAnimSet() const
SuperBuildGizmoHelper::~SuperBuildGizmoHelper()
SuperBuildInputTrigger::~SuperBuildInputTrigger()
LegoContextHandlerBase<SuperBuildContextHandler>::~LegoContextHandlerBase()
LegoCityTagging::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoCityTagging::GetVehicleDriverSeatWeightMod(MechVehicle&)
LegoCityTagging::CheckEnterExitHint(WORLDINFO*, HINT_s*)
LegoCityTagging::CanTagFromRidableToRidable(MechCharacter&)
LegoCityTagging::GetMaxRidableTagDistance(MechCharacter&)
LegoCityTagging::GetMaxTouchDistance(MechCharacter*, ApiVehicle*)
LegoCityTagging::OnTaggedToRidable(MechCharacter&, MechObjectInterface&, VehicleDefSeat::SEATTYPES)
LegoCityTagging::IsInFrontCone(MechCharacter*, VuVec const&)
LegoCityTagging::CanTagToVehicle(MechCharacter&, MechVehicle&)
LegoCityTagging::CanTagToCharacter(MechCharacter&, MechCharacter&)
LegoCityTagging::DrawTagData(MechTaggingToData&)
LegoCityTagging::AllowTag(MechCharacter&, MechObjectInterface&)
LegoCityTagging::OnFailedToTagToRidable(MechCharacter&, MechObjectInterface&, VehicleDefSeat::SEATTYPES)
LegoCityTagging::GetRidableMaxYOffset(MechCharacter*, MechVehicle*)
LegoCityTagging::CanDismountRidable(MechCharacter&, MechRidingData&)
MechTagging::~MechTagging()
LegoCityTagging::~LegoCityTagging()
MechSystemBase<MechTagging, int>::Suppress(int)
MechSystemBase<MechTagging, int>::IsSuppressed(int) const
MechTagging::AllowChooseTagContext(MechCharacter*)
MechTagging::BlockSubChooser(MechCharacter*)
MechTagging::OnTaggedToCharacter(MechCharacter&, MechCharacter&)
MechTagging::OnFailedToTagToCharacter(MechCharacter&, MechCharacter&)
LegoCityLightBeams::OnInit()
LegoCityLightBeams::OnEnterLevel(LegoLevelContainer&)
CityGizmoLightBeam::GetOutput(int, int)
CityGizmoLightBeam::GetOutputName(int)
CityGizmoLightBeam::GetNumOutputs()
CityGizmoLightBeam::LimitSnap()
LegoCityLightBeams::CreateLightBeam()
LegoCityLightBeams::CanReflectOffEntity(Entity&, GizmoLightBeam*)
LegoCityLightBeams::GetLightBeamMaterial(GizmoLightBeam*)
LegoCityLightBeams::CanDamageCharacter(MechCharacter&, GizmoLightBeam*)
LegoCityLightBeams::OnHitCharacter(MechCharacter&, GizmoLightBeam*, GizmoLightBeam*, NUVEC&, NUVEC&, NUVEC&, float)
LegoCityLightBeams::CreateGizmoManager()
non-virtual thunk to LegoCityLightBeams::CreateGizmoManager()
LegoCityLightBeamManager::CheckRayresultForUpdate(LIGHTBEAMTARGET*, FirstPointCollector&)
CityGizmoLightBeam::~CityGizmoLightBeam()
non-virtual thunk to CityGizmoLightBeam::~CityGizmoLightBeam()
non-virtual thunk to CityGizmoLightBeam::~CityGizmoLightBeam()
LegoCityLightBeams::~LegoCityLightBeams()
LegoCityLightBeams::~LegoCityLightBeams()
LegoGizmoSystemBase<LegoLightBeams>::ShutDown()
LegoGizmoSystemBase<LegoLightBeams>::ShouldAddManagersForLevel(MechLevelContainer&)
GizmoLightBeamManager::~GizmoLightBeamManager()
LegoCityLightBeamManager::~LegoCityLightBeamManager()
GizmoLightBeamManager::SaveVersion()
CityGizmoPuzzle::CityGizmoPuzzle()
CityGizmoPuzzle::~CityGizmoPuzzle()
non-virtual thunk to CityGizmoPuzzle::~CityGizmoPuzzle()
CityGizmoPuzzle::~CityGizmoPuzzle()
non-virtual thunk to CityGizmoPuzzle::~CityGizmoPuzzle()
CityGizmoPuzzle::AcquireSpecials()
LegoCityPuzzles::GameObjCanUsePuzzle(MechCharacter*, GizmoPuzzle*, bool)
LegoCityPuzzles::HasAbility(MechCharacter*)
LegoCityPuzzles::PrepareToUseAbility(MechCharacter*)
LegoCityPuzzles::DrawPuzzle(GizmoPuzzle*)
LegoCityPuzzles::GetFloorTargetObjects(GizmoPuzzle*, int&, int&)
LegoCityPuzzles::CreateGizmoManager()
non-virtual thunk to LegoCityPuzzles::CreateGizmoManager()
CityGizmoPuzzleManager::CityGizmoPuzzleManager()
GizmoPuzzleManager::~GizmoPuzzleManager()
CityGizmoPuzzleManager::~CityGizmoPuzzleManager()
CityGizmoPuzzleManager::~CityGizmoPuzzleManager()
CityGizmoPuzzleManager::PreLoad()
CityGizmoPuzzleManager::PostLoad()
CityGizmoPuzzleManager::OnFail(GizmoPuzzle*, MechCharacter*)
LegoCityPuzzles::~LegoCityPuzzles()
LegoGizmoSystemBase<LegoPuzzles>::ShutDown()
LegoGizmoSystemBase<LegoPuzzles>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoCityPuzzles::CreatePuzzle()
LegoCityPuzzles::DefaultType()
LegoCityPuzzles::IsRadial2x2()
LegoCityPuzzles::GetFailedAnimAction(GizmoPuzzle*)
LegoPuzzles::DisplayButtonPrompt(GizmoPuzzle*, MechCharacter*)
LegoPuzzles::GameObjCanReallyUsePuzzle(MechCharacter*, GizmoPuzzle*)
LegoPuzzles::GetSfxToUse(GizmoPuzzle&, SFXTypeID)
LegoPuzzles::PostLoadEx(WORLDINFO*, GizmoPuzzle*)
LegoPuzzles::ResetEx(WORLDINFO*, GizmoPuzzle*)
GizmoPuzzle::GetNumOutputs()
GizmoPuzzleManager::SaveVersion()
CityGizmoPuzzleManager::ShouldFaceOnFail(GizmoPuzzle*)
LegoCityRemotes::StartUsingRemote(MechGadgetRemoteInstance*, MechCharacter&)
LegoCityRemotes::HasAbilityToUse(MechGadgetRemoteInstance*, MechCharacter&)
LegoCityRemotes::~LegoCityRemotes()
MechGadgetRemotes::Init()
MechSystemBase<MechGadgetRemotes, int>::Suppress(int)
MechSystemBase<MechGadgetRemotes, int>::IsSuppressed(int) const
MechGadgetRemotes::TriggerProximityHint(MechGadgetRemoteInstance*, MechCharacter&)
MechGadgetRemotes::DisplayButtonPrompt(MechGadgetRemoteInstance&, MechCharacter&)
MechGadgetRemotes::DrawProgressBar(MechGadgetRemoteInstance&, MechCharacter*)
MechGadgetRemotes::GetFailedAnimAction(MechGadgetRemoteInstance*)
MechGadgetRemotes::GetHintExtraRange(MechGadgetRemoteInstance&)
MechGadgetRemotes::GetProximityReactionExtraRange(MechGadgetRemoteInstance&)
LegoCityRemotes::GetBarrelRiderRunAnim(GameObject&)
LegoCityRemotes::DeactivateAtEnd(MechGadgetRemoteInstance&)
MechGadgetRemotes::GetAttachHandleWinchAnim(MechGadgetRemoteInstance&, MechCharacter&)
MechGadgetRemotes::GetStartUsingWinchAnim(MechGadgetRemoteInstance&, MechCharacter&)
MechGadgetRemotes::GetUsingWinchAnim(MechGadgetRemoteInstance&, MechCharacter&)
MechGadgetRemotes::GetStopUsingWinchAnim(MechGadgetRemoteInstance&, MechCharacter&)
LegoCityRenderContainer::LegoCityRenderContainer()
LegoCityRenderContainer::~LegoCityRenderContainer()
LegoCityRenderContainer::ClearStrings()
LegoCityRenderContainer::~LegoCityRenderContainer()
LegoCityRenderContainer::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoCityRender::RenderHUDLevelOnly(LegoLevelContainer*)
LegoCityRender::RenderMain3DLevelOnly(LegoLevelContainer*)
LegoCityRenderContainer::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoCityRender::ProcessLevelOnly(LegoLevelContainer*)
LegoCityRenderContainer::AddRenderString(char const*, float, float, float, char)
LegoCityRender::Process()
LegoCityRenderContainer::RemoveString(RenderString*)
LegoCityRenderContainer::ProcessStrings()
LegoCityRenderContainer::RenderStrings()
LegoCityRender::LegoCityRender()
LegoCityRender::~LegoCityRender()
LegoCityRender::~LegoCityRender()
LegoCityRender::Init()
LegoCityRender::SetSaveIconPosition()
LegoCityRender::OnInitPostConfig()
LegoCityRender::PauseMenuDrawer::Init()
LegoCityRender::FMVPauseMenuDrawer::Init()
LegoCityRender::LoadingIconDrawer::Init()
LegoCityRender::ShutDown()
LegoCityRender::LoadingIconDrawer::Release()
LegoCityRender::PauseMenuDrawer::Release()
LegoCityRender::FMVPauseMenuDrawer::Release()
LegoCityRender::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoCityRender::RenderHUDLowest()
LegoCityRender::RenderHUD()
LegoCityRender::RenderMain3D()
LegoCityRender::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoCityRender::AddManagersForLevel(LegoLevelContainer&)
LegoCityRenderContainer::RegisterProcessing()
LegoCityRenderContainer::RegisterRendering()
LegoCityRender::RemoveManagersForLevel(LegoLevelContainer&)
LegoCityRender::OnEnterLevel(LegoLevelContainer&)
LegoCityRender::PauseMenuDrawer::Reset()
LegoCityRender::LoadingIconDrawer::Reset()
LegoCityRender::OnExitLevel(LegoLevelContainer&)
DisplaySpecialCommands(LegoLevelContainer*)
LegoCityRender::PauseMenuDrawer::Draw()
LegoCityRender::LoadingIconDrawer::Draw()
LegoCityRender::HandleInActiveGridCell()
LegoCityRender::ShowLoadIcon(bool)
LegoCityRender::UpdatePauseDrawerState()
LegoCityRender::PauseMenuDrawer::Update(float)
LegoCityRender::UpdateFadeTimeCheck(float)
LegoCityRender::LoadingIconDrawer::Update(float)
LegoCityRender::FMVPauseMenuDrawer::FMVPauseMenuDrawer()
LegoCityRender::FMVPauseMenuDrawer::~FMVPauseMenuDrawer()
LegoCityRender::PauseMenuDrawer::PauseMenuDrawer()
LegoCityRender::PauseMenuDrawer::~PauseMenuDrawer()
LegoCityRender::PauseMenuDrawer::SetShouldDraw(bool)
MyTesterFunc(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
DisplayHudTimer(MechCharacter*, LegoLevelContainer*)
LegoCityRender::ShouldAddManagersForLevel(MechLevelContainer&)
LegoCityRender::EventNotify(Event&, NuEventData&)
LegoCityRender::LoadingIconDrawer::SetAspectScale(float)
LegoCityRender::LoadingIconDrawer::SetShouldDraw(bool)
LegoCityRender::ForceShowPauseBG(bool)
LegoCityRender::LoadingIconDrawer::LoadingIconDrawer()
LegoCityRender::LoadingIconDrawer::~LoadingIconDrawer()
LegoCityRender::LoadingIconDrawer::GetTextureIDFromFlash(LegoCityRender::LoadingIconDrawer::eIconType) const
LegoCityRender::LoadingIconDrawer::IsVisible() const
LegoCityRender::LoadingIconDrawer::DrawBackground() const
LegoCityRender::LoadingIconDrawer::DrawOuterLoadIcon() const
LegoCityRender::LoadingIconDrawer::DrawInnerLoadIcon() const
LegoCityRender::LoadingIconDrawer::DrawIconRect(LegoCityRender::LoadingIconDrawer::IconData const&, float, float, float) const
LegoCityRenderHelper::~LegoCityRenderHelper()
NuPrimContext2D::AddXYZ_Safe(float, float, float)
LegoCitySplashScreens::LegoCitySplashScreens()
LegoCitySplashScreens::~LegoCitySplashScreens()
GameSplashScreens::~GameSplashScreens()
LegoCitySplashScreens::~LegoCitySplashScreens()
LegoCitySplashScreens::GetLegalScreenFilePath(DynamicString&)
LegoCitySplashScreens::GetAdvertFilePath(DynamicString&)
LegoCitySplashScreens::InitLocalisedScreens()
LegoCitySplashScreens::ParseSplashScreenConfig()
LegoCitySplashScreens::GetMaxLegalScreens() const
GameSplashScreens::GetControllerFilePath(DynamicString&)
GameSplashScreens::GetRatingScreenFilePath(DynamicString&)
LegoCitySuperCounters::LegoCitySuperCounters()
LegoCitySuperCounters::Init()
LegoCitySuperCounters::EventNotify(Event&, NuEventData&)
LegoCitySuperCounters::FindIconObjects(StreamingLevel&)
LegoCitySuperCounters::ClearIconObjects()
LegoCitySuperCounters::GetSuperCounterID(unsigned int const&)
LegoCitySuperCounters::GetSuperCounterHash(int)
LegoCitySuperCounters::AddSuperCounter(unsigned int, char const*, char const*, StreamingLevel*)
LegoCitySuperCounters::FindIconObject(int const&, StreamingLevel&)
LegoCitySuperCounters::StartUI(int, int, int, bool, char const*, bool, bool, bool, int)
LegoCitySuperCounters::StartUI(int, char const*, bool, char const*, bool, bool, int)
SAction_RegisterSuperCounter::Exec(ScriptContext&)
SAction_SuperCounterUI::Exec(ScriptContext&)
SAction_SuperCounterUIAndAnim::Exec(ScriptContext&)
SAction_SuperCounterUI_NoGoldBrick::Exec(ScriptContext&)
SAction_SuperCounterUI_NoGoldBrick_Text::Exec(ScriptContext&)
SAction_SuperCounterUI_NoGoldBrickAndAnim_Text::Exec(ScriptContext&)
SAction_SuperCounterUI_NoGoldBrickAndAnim::Exec(ScriptContext&)
SAction_SuperCounterUI::~SAction_SuperCounterUI()
SAction_SuperCounterUI::GetName() const
SAction_SuperCounterUI::GetInputs(SCmdParams&) const
SAction_SuperCounterUI::GetOutputs(SCmdParams&) const
SAction_SuperCounterUIAndAnim::~SAction_SuperCounterUIAndAnim()
SAction_SuperCounterUIAndAnim::GetName() const
SAction_SuperCounterUIAndAnim::GetInputs(SCmdParams&) const
SAction_SuperCounterUIAndAnim::GetOutputs(SCmdParams&) const
SAction_SuperCounterUI_NoGoldBrick::~SAction_SuperCounterUI_NoGoldBrick()
SAction_SuperCounterUI_NoGoldBrick::GetName() const
SAction_SuperCounterUI_NoGoldBrick::GetInputs(SCmdParams&) const
SAction_SuperCounterUI_NoGoldBrick::GetOutputs(SCmdParams&) const
SAction_SuperCounterUI_NoGoldBrick_Text::~SAction_SuperCounterUI_NoGoldBrick_Text()
SAction_SuperCounterUI_NoGoldBrick_Text::GetName() const
SAction_SuperCounterUI_NoGoldBrick_Text::GetInputs(SCmdParams&) const
SAction_SuperCounterUI_NoGoldBrick_Text::GetOutputs(SCmdParams&) const
SAction_SuperCounterUI_NoGoldBrickAndAnim_Text::~SAction_SuperCounterUI_NoGoldBrickAndAnim_Text()
SAction_SuperCounterUI_NoGoldBrickAndAnim_Text::GetName() const
SAction_SuperCounterUI_NoGoldBrickAndAnim_Text::GetInputs(SCmdParams&) const
SAction_SuperCounterUI_NoGoldBrickAndAnim_Text::GetOutputs(SCmdParams&) const
SAction_SuperCounterUI_NoGoldBrickAndAnim::~SAction_SuperCounterUI_NoGoldBrickAndAnim()
SAction_SuperCounterUI_NoGoldBrickAndAnim::GetName() const
SAction_SuperCounterUI_NoGoldBrickAndAnim::GetInputs(SCmdParams&) const
SAction_SuperCounterUI_NoGoldBrickAndAnim::GetOutputs(SCmdParams&) const
LegoCitySuperCounters::~LegoCitySuperCounters()
LegoCitySuperCounters::~LegoCitySuperCounters()
SAction_RegisterSuperCounter::~SAction_RegisterSuperCounter()
SAction_RegisterSuperCounter::GetName() const
SAction_RegisterSuperCounter::GetInputs(SCmdParams&) const
SAction_RegisterSuperCounter::GetOutputs(SCmdParams&) const
LegoCitySwitch::LegoCitySwitch()
LegoCitySwitch::~LegoCitySwitch()
non-virtual thunk to LegoCitySwitch::~LegoCitySwitch()
LegoCitySwitch::~LegoCitySwitch()
non-virtual thunk to LegoCitySwitch::~LegoCitySwitch()
IsPDAPlayer(MechCharacter*, int&)
LegoCitySwitch::LoadEx(WORLDINFO*, int)
LegoCitySwitch::UsesHotspotVFX2()
LegoCitySwitch::SetPhase(int)
LegoCitySwitch::EndPaintSwap()
LegoCitySwitch::GetRandomActions(int)
LegoCitySwitch::InstanceSetup(GizSwitch*)
LegoCitySwitch::SetPaintColour(int, int)
LegoCitySwitch::GetPullAction(MechCharacter&)
LegoCitySwitch::GetLoopAction(MechCharacter&)
LegoCitySwitch::GetReleaseAction(MechCharacter&)
LegoCitySwitch::SetRandomAnims()
LegoCitySwitch::GetNumOutputs()
LegoCitySwitch::GetOutput(int, int)
LegoCitySwitch::GetOutputName(int)
LegoCitySwitch::Reset()
LegoCitySwitch::InitHotSpotAbilityItemVfxId()
LegoCitySwitch::Activate(bool)
LegoCitySwitch::IsSplatSwapper()
LegoCitySwitches::Unlock_FastTravel(GizSwitch&, WORLDINFO*, bool)
LegoCitySwitch::ShowMapPinForSwitch(bool)
LegoCitySwitch::DeactivateLevel()
LegoCitySwitch::ActivateLevel()
LegoCitySwitch::AIInteract(APIOBJECT* const&, float)
non-virtual thunk to LegoCitySwitch::AIInteract(APIOBJECT* const&, float)
LegoCitySwitch::GetHotspotVFX()
LegoCitySwitch::GetHotspotVFX2()
LegoCitySwitch::SetUser(MechCharacter*)
LegoCitySwitch::IsInteractionAllowed()
LegoCitySwitch::DoDraw()
LegoCitySwitch::BeginPaintSwap(MechCharacter*)
LegoCitySwitch::SwapCharacterPaint(MechCharacter*)
LegoCitySwitches::OwnerDrawnFloorTarget(GizSwitch*)
LegoCitySwitches::GameSpecificCheck(MechCharacter*, GizSwitch*)
LegoCitySwitches::DisplayButtonPrompt(GizSwitch*, MechCharacter*)
LegoCitySwitches::MoveCode(MechCharacter*)
LegoCitySwitches::ButtonMash_MoveCode(WORLDINFO*, MechCharacter*, LegoCitySwitch*)
LegoCitySwitches::ThreeStageAction_MoveCode(WORLDINFO*, MechCharacter*)
LegoCitySwitches::OverrideSwitchBehaviour(GizSwitch&, MechCharacter*, LegoSwitches::eCANUSE&)
LegoCitySwitches::CanCheckForSwitches(MechCharacter&)
LegoCitySwitches::OnPrepareToPull(GizSwitch&, MechCharacter*)
LegoCitySwitches::ShockDamage(MechCharacter*)
LegoCitySwitches::OnStartPulling(GizSwitch&, MechCharacter*)
LegoCitySwitches::OnPulled(GizSwitch&, MechCharacter*)
LegoCitySwitches::Activate_FastTravel(MechCharacter*, GizSwitch&, WORLDINFO*)
LegoCitySwitches::ShouldPlayerKeepPulling(MechCharacter&, GizSwitch&)
LegoCitySwitches::OnPullReleased(GizSwitch&, MechCharacter*)
LegoCitySwitches::GameObjectCanUse(GizSwitch&, MechCharacter*, float)
LegoCitySwitches::GetFloorTargetObjects(GizSwitch*, int&, int&)
LegoCitySwitches::GetFailedAnimAction(GizSwitch*)
LegoCitySwitches::GetTargetHeading(GizSwitch*, MechCharacter*, bool)
LegoCitySwitches::OnInit()
MechContext* MechContextConstructor<LegoCitySwitchContextHandler>(MechCharacter&)
LegoCitySwitches::OnInitPostConfig()
LegoCitySwitchInputTrigger::IsSwitchTriggered(MechCharacter&, unsigned int, GizSwitch&)
LegoCitySwitches::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoCitySwitches::RemoveManagersForLevel(LegoLevelContainer&)
LegoCitySwitches::ResetSpecialFades(LegoLevelContainer&)
LegoCitySwitches::OnExitLevel(LegoLevelContainer&)
LegoCitySwitches::Reset_FastTravel(LegoLevelContainer&)
LegoCitySwitches::OnResetLevel(LegoLevelContainer&)
LegoCitySwitches::SpecialFade::SpecialFade(LegoSpecial*, float, float, GizSwitch*, float)
LegoCitySwitches::LegoCitySwitches()
LegoCitySwitches::EventNotify(Event&, NuEventData&)
LegoCitySwitchContextHandler::OnProcess(LevelContainer*, float)
LegoCitySwitchContextHandler::OnLeave()
LegoCitySwitches::Deactivate_FastTravel(MechCharacter*, GizSwitch&, WORLDINFO*)
LegoCitySwitchContextHandler::AllowLeave(int, MechContext*)
GizmoAction_LegoGizmoSwapperColour::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_LegoGizmoGetSwapperColour::GizmoExec(ScriptContext&, Gizmo*)
LegoCitySwitches::CreateGizmoManager()
non-virtual thunk to LegoCitySwitches::CreateGizmoManager()
LegoCitySwitches::IsContextID_A_Minigame(int)
LegoCitySwitch::Hide(unsigned char, bool)
LegoCitySwitchManager::LegoCitySwitchManager()
LegoCitySwitchManager::LateUpdate(float)
LegoCitySwitchManager::CheckSafeCrackHint(WORLDINFO*, HINT_s*)
LegoCitySwitchManager::CheckDisguiseBoothHint(WORLDINFO*, HINT_s*)
LegoCitySwitchManager::CheckDrillHint(WORLDINFO*, HINT_s*)
LegoCitySwitchManager::CheckSuperChickenRingHint(WORLDINFO*, HINT_s*)
LegoCitySwitchManager::CheckSuperJetPackHint(WORLDINFO*, HINT_s*)
LegoCitySwitchInputTrigger::~LegoCitySwitchInputTrigger()
LegoCitySwitchContextHandler::~LegoCitySwitchContextHandler()
LegoContextHandlerBase<LegoSwitchContextHandler>::GetInstanceId() const
GizSwitch::GetVisibility() const
GizSwitch::GetMechObjectInterfacePtr()
GizSwitch::GetGameAnimSet() const
GizSwitch::isAIInteractSupported()
GizSwitch::ProjectileTypeTargeting(MechCharacter*)
GizSwitch::ProjectileTypeReset(MechCharacter*)
GizSwitch::OnLateUpdate(float)
GizSwitch::Process()
GizmoAction_LegoGizmoSwapperColour::~GizmoAction_LegoGizmoSwapperColour()
GizmoAction_LegoGizmoSwapperColour::GetName() const
GizmoAction_LegoGizmoSwapperColour::GetInputs(SCmdParams&) const
GizmoAction_LegoGizmoSwapperColour::GetOutputs(SCmdParams&) const
GizmoAction_LegoGizmoGetSwapperColour::~GizmoAction_LegoGizmoGetSwapperColour()
GizmoAction_LegoGizmoGetSwapperColour::GetName() const
GizmoAction_LegoGizmoGetSwapperColour::GetInputs(SCmdParams&) const
GizmoAction_LegoGizmoGetSwapperColour::GetOutputs(SCmdParams&) const
LegoCitySwitches::~LegoCitySwitches()
LegoCitySwitches::~LegoCitySwitches()
LegoGizmoSystemBase<LegoSwitches>::ShutDown()
LegoGizmoSystemBase<LegoSwitches>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoCitySwitches::GetSearchRange(MechCharacter*)
LegoSwitches::GameObjectCanBreakoutJump(GizSwitch*, GameObject*)
LegoSwitches::ParameteriseLoopAction(GizSwitch&, MechCharacter&, short&)
LegoSwitches::GetItemOut(GizSwitch&, MechCharacter&)
LegoSwitches::SetHintComplete(WORLDINFO&, GizSwitch&)
LegoSwitches::PullingHitDone(GizSwitch&, MechCharacter&)
LegoCitySwitches::CreateSwitch()
LegoCitySwitchManager::~LegoCitySwitchManager()
GizSwitchManager::SaveVersion()
void ScriptContext::SetReturn<SVarFloat, float>(int, float)
SVarFloat::~SVarFloat()
SVarScalar<float>::AsFloat() const
SVarScalar<float>::AsInt() const
SVarScalar<float>::AsBool() const
SVarScalar<float>::AsText() const
SVarScalar<float>::Equals(ScriptVariable const*)
SVarScalar<float>::Set(ScriptVariable const*)
SVarScalar<float>::~SVarScalar()
SVarScalar<float>::~SVarScalar()
LegoContextHandlerBase<LegoSwitchContextHandler>::~LegoContextHandlerBase()
NuMechPtr<Gizmo, 16>::~NuMechPtr()
CheckLOS_CITY(MechCharacter*, TARGETING_TYPE, NUVEC&, MechObjectData&, bool)
LegoCityShooting::FindShootTarget(WORLDINFO*, MechCharacter*, BoltType*, TARGET_INFO*, int, unsigned int, float, NUVEC const*, NUVEC const*)
LegoCityShooting::ShootThisFrame(MechCharacter*, MechCharacter*)
LegoCityShooting::CanDoShootTargeting(MechCharacter&)
LegoCityShooting::CanBlendToShoot(MechCharacter*)
City_TargetGameObject(MechCharacter*, NUVEC*, NUVEC*, float, float, unsigned int, int, int, BoltTypeID const&, float, MechCharacter*, int, float, unsigned long)
LegoCityShooting::FindBoltTarget(MechCharacter*, NUVEC&, NUVEC&, BoltType*, BoltTypeID, float, int, int, int&, int&, unsigned int)
LegoCityShooting::CanShootChecks(MechCharacter*, int, int, LegoItemType*)
LegoCityShooting::~LegoCityShooting()
LegoShooting::GetShootOnSpecial(MechCharacter&)
LegoShooting::CanAllowShootEvenIfNoShootContextFlag(MechCharacter&)
LegoShooting::CanDoShootTargetingEvenIfContextInfoFlagsDontAllow(GameObject&)
LegoShooting::CanDoShootTargetingEvenIfContextActionNotFound(MechCharacter&)
LegoShooting::CanDoShootTargetingInAir(MechCharacter&)
LegoShooting::GetShootAction(MechCharacter*, int, BoltTypeID)
LegoShooting::AimBetweenShots(MechCharacter*)
LegoShooting::HandleShootingThisTarget(MechCharacter&, TARGETING_TYPE, MechObjectData const&)
LegoShooting::SortTargetArray(MechCharacter&, TargetArray&)
LegoShooting::MultiTargetShootHack(MechCharacter&)
LegoShooting::GetTargetingRange(MechCharacter*)
LegoShooting::Do3DRangeCheckTargeting()
LegoShooting::GetStartTargetingAnimOverride(MechCharacter*)
LegoShooting::CanShootRapidFire(MechCharacter*)
LegoCitySaveGame::LegoCitySaveGame()
LegoCitySaveGame::ShouldWarnAboutProgressOnExitLevel()
LegoCitySaveGame::SaveSaveGame(EdStream&, int)
LegoCitySaveGame::LoadSaveGame(EdStream&, int)
CityAutoCheats::ResetUnlockedAutoCheats()
LegoCitySaveGame::GameSpecificSaveVersion()
LegoCitySaveGame::MaxTotalSaveSize()
LegoCitySaveGame::InitNewGame()
LegoCitySaveGame::ShouldSaveOptionsWithGame()
LegoCitySaveGame::EventNotify(Event&, NuEventData&)
LegoCitySaveGame::RegisterSaveLoadManagerItems(cLoadSaveManager&)
LegoCitySaveGame::GameSpecificSaveSize()
LegoCitySaveGame::GameSpecificSaveSize(int)
SAction_TriggerAutoSave::Exec(ScriptContext&)
CityAutoCheats::IsRedBrickForCheat(int, int)
CityAutoCheats::EnableCheatIfInAutoEnableList(int)
CityAutoCheats::EnableCheatIfInAutoEnableList(CHEAT_s*)
CityAutoCheats::HandleRedBrickPurchase(int)
CityAutoCheats::HandleRedBrickUnlock(CHEAT_s*)
SAction_TriggerAutoSave::~SAction_TriggerAutoSave()
SAction_TriggerAutoSave::GetName() const
SAction_TriggerAutoSave::GetInputs(SCmdParams&) const
SAction_TriggerAutoSave::GetOutputs(SCmdParams&) const
LegoCitySaveGame::~LegoCitySaveGame()
CityResumeLocation::CityResumeLocation()
CityResumeLocation::CityResumeLocation(CityResumeLocation const&)
CityResumeLocation::operator=(CityResumeLocation const&)
CityResumeLocation::~CityResumeLocation()
CityResumeLocation::SetCutsceneName(char const*)
CityResumeLocation::GetCutsceneName() const
CityResumeLocation::HasCutscene() const
CityResumeLocation::SetDoorName(char const*)
CityResumeLocation::GetDoorName() const
CityResumeLocation::HasDoor() const
CityResumeLocation::SetLevelName(char const*)
CityResumeLocation::GetLevelName() const
CityResumeLocation::GetLevelIndex() const
CityResumeLocation::HasLevel() const
CityResumeLocation::Clear()
CityResumeLocation::SetSource(CityResumeLocation::eSource)
CityResumeLocation::GetSource() const
CityResumeLocation::ResetToDefault()
CityResumeLocation::IsStandaloneLevel() const
CityResumeLocation::IsResumableLevel(char const*)
CityResumeLocation::IsResumableLevel(LEVELDATA const*)
CityResumeLocation::CreateForStandalone(StreamingLevel*)
CityResumeLocation::IsForLevel(StreamingLevel*) const
CityResumeLocation::IsEmpty() const
CityResumeHandler::StandaloneBlob::StandaloneBlob()
CityResumeHandler::StandaloneBlob::~StandaloneBlob()
CityResumeHandler::StandaloneBlob::ReadFromCurrentGameState()
CityResumeHandler::StandaloneBlob::ApplyToCurrentGameState()
CityResumeHandler::StandaloneBlob::Clear()
CityResumeHandler::PlayerCoinCountBlob::PlayerCoinCountBlob()
CityResumeHandler::PlayerCoinCountBlob::Clear()
CityResumeHandler::PlayerCoinCountBlob::~PlayerCoinCountBlob()
CityResumeHandler::PlayerCoinCountBlob::ReadFromCurrentGameState()
CityResumeHandler::PlayerCoinCountBlob::ReadCoinCountFromPlayer(unsigned int)
CityResumeHandler::PlayerCoinCountBlob::ApplyToCurrentGameState()
CityResumeHandler::PlayerCoinCountBlob::ApplyCoinCountToPlayer(unsigned int)
CityResumeHandler::CityResumeHandler()
CityResumeHandler::~CityResumeHandler()
CityResumeHandler::~CityResumeHandler()
CityResumeHandler::Start()
CityResumeHandler::ApplyDoor()
CityResumeHandler::EventNotify(Event&, NuEventData&)
CityResumeHandler::IsResuming() const
CityResumeHandler::ClearFlag(int)
CityResumeHandler::OnProcess()
CityResumeHandler::Finish()
CityResumeHandler::OnEnterNewArea()
CityResumeHandler::IsResuming(int) const
CityResumeHandler::OnActivateLevel(StreamingLevel*)
CityResumeHandler::GetStandaloneBlob()
CityResumeHandler::GetPlayerCoinCountBlob()
CityRestoreLoadSave::CityRestoreLoadSave(char const*, CityResumeHandler*)
CityRestoreLoadSave::~CityRestoreLoadSave()
CityRestoreLoadSave::~CityRestoreLoadSave()
CityRestoreLoadSave::GetTotalSizeInBytes()
CityRestoreLoadSave::Reset()
CityRestoreLoadSave::SaveSaveGame(EdStream&, int)
CityRestoreLoadSave::LoadSaveGame(EdStream&, int, int)
CityRestoreLoadSave::PrepareNewGame()
CityRestoreLoadSave::ApplyActiveRestoreData()
SAction_CityResume_Reset::Exec(ScriptContext&)
SAction_CityResume_SetCutscene::Exec(ScriptContext&)
SAction_CityResume_SetDoor::Exec(ScriptContext&)
SAction_CityResume_Reset::~SAction_CityResume_Reset()
SAction_CityResume_Reset::GetName() const
SAction_CityResume_Reset::GetInputs(SCmdParams&) const
SAction_CityResume_Reset::GetOutputs(SCmdParams&) const
SAction_CityResume_SetCutscene::~SAction_CityResume_SetCutscene()
SAction_CityResume_SetCutscene::GetName() const
SAction_CityResume_SetCutscene::GetInputs(SCmdParams&) const
SAction_CityResume_SetCutscene::GetOutputs(SCmdParams&) const
SAction_CityResume_SetDoor::~SAction_CityResume_SetDoor()
SAction_CityResume_SetDoor::GetName() const
SAction_CityResume_SetDoor::GetInputs(SCmdParams&) const
SAction_CityResume_SetDoor::GetOutputs(SCmdParams&) const
CityGizmoTechno::CityGizmoTechno()
CityGizmoTechno::~CityGizmoTechno()
non-virtual thunk to CityGizmoTechno::~CityGizmoTechno()
CityGizmoTechno::~CityGizmoTechno()
non-virtual thunk to CityGizmoTechno::~CityGizmoTechno()
CityGizmoTechno::AttachHandle(MechCharacter*)
CityGizmoTechno::LoadEx(WORLDINFO*, int)
LegoCityTechnos::CanUseTechno(MechCharacter&, GizmoTechno&)
LegoCityTechnos::GetRequiredInventoryItem(MechCharacter&, GizmoTechno&)
LegoCityTechnos::GetHotspotVFX(unsigned int, long&)
LegoCityTechnos::IsHotSpotVisible(GizmoTechno&) const
LegoCityTechnos::DrawTechno(GizmoTechno&)
LegoCityTechnos::GetAttachCrankAnimAction(GizmoTechno*)
LegoCityTechnos::LegoCityTechnos()
LegoCityTechnos::EventNotify(Event&, NuEventData&)
LegoCityTechnos::CreateGizmoManager()
non-virtual thunk to LegoCityTechnos::CreateGizmoManager()
LegoCityTechnos::ResetHighlightedTechnos()
LegoCityTechnos::UnSetTechnoHighlightedForPlayer(int)
LegoCityTechnos::GetTechnoHighlightData(int) const
LegoCityTechnos::SetTechnoHighlightedForPlayer(int, NUVEC&, float)
LegoCityTechnos::SetTechnoPhaseHint(eTECHNOPHASE, GizmoTechno*)
LegoCityGizmoTechnoManager::LegoCityGizmoTechnoManager()
LegoCityGizmoTechnoManager::LateUpdate(float)
LegoCityGizmoTechnoManager::SetHighlightedGizmo(unsigned int, CityGizmoTechno*)
LegoCityGizmoTechnoManager::GetHighlightedGizmo(unsigned int)
LegoCityTechnos::~LegoCityTechnos()
LegoGizmoSystemBase<LegoTechnos>::ShutDown()
LegoGizmoSystemBase<LegoTechnos>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoCityTechnos::CreateTechno()
LegoCityTechnos::GetFailedAnimAction(GizmoTechno*)
GizmoTechno::isAIInteractSupported()
GizmoTechnoManager::~GizmoTechnoManager()
LegoCityGizmoTechnoManager::~LegoCityGizmoTechnoManager()
GizmoTechnoManager::SaveVersion()
LegoCityTeleports::GetTypes()
LegoCityTeleports::CanUseTeleport(MechCharacter&, GizmoTeleport&)
LegoCityTeleports::OnInit()
LegoCityTeleports::OnLeaveTeleportContext(MechCharacter&)
LegoCityTeleports::MoveCode(MechCharacter&, GizmoTeleport&)
LegoCityTeleports::UpdatePosition(GizmoTeleport*, CONTEXTPACKET*) const
LegoCityTeleports::ShouldSnapToDestination(MechCharacter&, GizmoTeleport&)
LegoCityTeleports::EventNotify(Event&, NuEventData&)
LegoCityTeleports::CanLinkTeleports(GizmoTeleport&, GizmoTeleport&)
LegoCityTeleports::GetFloorTargetOffset(GizmoTeleport*, bool&)
LegoCityTeleports::SetHintComplete(WORLDINFO&, GizmoTeleport&)
LegoCityTeleports::UpdateHint(WORLDINFO*, HINT_s*)
GizmoTeleportViaDoorAddOn::GizmoTeleportViaDoorAddOn()
GizmoTeleportViaDoorAddOn::OnHook(unsigned char, HookArgs*)
GizmoTeleportViaDoorAddOn::GetDoor() const
non-virtual thunk to GizmoTeleportViaDoorAddOn::OnHook(unsigned char, HookArgs*)
GizmoTeleportViaDoorAddOn::GetLevelContainer() const
non-virtual thunk to GizmoTeleportViaDoorAddOn::GetLevelContainer() const
GizmoTeleportViaDoorAddOn::~GizmoTeleportViaDoorAddOn()
GizmoTeleportViaDoorAddOn::~GizmoTeleportViaDoorAddOn()
GizmoTeleportViaDoorAddOn::OnAdded()
AddOn::OnRemoved()
non-virtual thunk to GizmoTeleportViaDoorAddOn::~GizmoTeleportViaDoorAddOn()
non-virtual thunk to GizmoTeleportViaDoorAddOn::~GizmoTeleportViaDoorAddOn()
LegoTeleports::~LegoTeleports()
LegoCityTeleports::~LegoCityTeleports()
LegoGizmoSystemBase<LegoTeleports>::ShutDown()
LegoGizmoSystemBase<LegoTeleports>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoTeleports::TeleportInUse(GizmoTeleport*, GizmoTeleport*, MechCharacter*)
LegoCityTightRopes::LegoCityTightRopes()
LegoCityTightRopes::CreateGizmoManager()
non-virtual thunk to LegoCityTightRopes::CreateGizmoManager()
LegoCityTightRopeManager::LegoCityTightRopeManager()
LegoCityTightRopeManager::EventNotify(Event&, NuEventData&)
LegoCityTightRopes::~LegoCityTightRopes()
LegoGizmoSystemBase<LegoTightRope>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoCityTightRopeManager::~LegoCityTightRopeManager()
LegoGizmoManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoTightRopeManager::SaveVersion()
LegoGizmoManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
LegoCityTubes::ShouldIgnoreTube(MechCharacter&, GizmoTube*)
LegoCityTubes::~LegoCityTubes()
LegoGizmoSystemBase<LegoTubes>::ShutDown()
LegoGizmoSystemBase<LegoTubes>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoTubes::DontSetTubeContext(MechCharacter*, GizmoTube*)
LegoTubes::TubeMoveGameCode(MechCharacter*, GizmoTube*)
FlowCommonInterface_Gizmo::GetName()
LegoGizmoPhantomInterface::UpdatePhantomMinMax()
LegoCityTurrets::LegoCityTurrets()
LegoCityTurrets::CreateGizmoManager()
non-virtual thunk to LegoCityTurrets::CreateGizmoManager()
LegoCityTurrets::CreateHelper()
CityGizmoTurret::LoadEx(WORLDINFO*, int)
CityGizmoTurret::SaveEx(WORLDINFO*)
GizTurret_GetTgt(CityGizmoTurret*, NUMTX*)
CityGizTurret_CalculateInterceptVector(NUVEC*, NUMTX*, NUVEC*, NUVEC*, float, NUVEC*, NUVEC*, unsigned int)
CityGizmoTurretManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
CityGizmoTurretManager::DestroyGizmoEx(Gizmo*)
CityGizmoTurretManager::LateUpdate(float)
CityGizmoTurretManager::Draw(float, ClassManager::eRenderingPriority)
CityGizmoTurret::GetOutput(int, int)
CityGizmoTurret::GetOutputName(int)
CityGizmoTurret::GetNumOutputs()
CityGizmoTurret::GetWorldMatrix(VuMtx&)
CityGizmoTurret::AccuireTarget(int, MechCharacter**)
CityGizmoTurretManager::AllocateProgressData(WORLDINFO*)
CityGizmoTurretManager::ClearProgress(WORLDINFO*, void*)
CityGizmoTurretManager::StoreProgress(WORLDINFO*, void*)
CityGizmoTurretManager::Reset(WORLDINFO*, void*)
CityGizmoTurret::~CityGizmoTurret()
non-virtual thunk to CityGizmoTurret::~CityGizmoTurret()
CityGizmoTurret::~CityGizmoTurret()
non-virtual thunk to CityGizmoTurret::~CityGizmoTurret()
CityGizmoTurretManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
CityGizmoTurretManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
CityGizmoTurretManager::PostLoad()
CityGizmoTurretManager::RequestSfx()
CityGizmoTurretManager::ReleaseSfx()
GizTurrets_Hit(WORLDINFO*, CityGizmoTurret*, NUVEC*, int, int)
CityGizmoTurretManager::BoltHitPlat(Bolt*)
CityGizmoTurretManager::GetBestBoltTarget(float*, NUVEC*, NUVEC*, void*, NUVEC*, NUVEC*, float, float, int, int, BoltTypeID const&, MechObjectData&)
CityGizmoTurretManager::BoltHit(WORLDINFO*, void*, NUVEC*, int, float, NUVEC*, NUVEC*, Bolt*, unsigned int)
FlowCommonInterface_Gizmo::~FlowCommonInterface_Gizmo()
FlowCommonInterface_Gizmo::GetObject()
MechFlowInterface::GetHashedNameKey()
FlowCommonInterface_Gizmo::GetTypeName()
FlowCommonInterface_Gizmo::GetGizmoPrefix()
FlowCommonInterface_Gizmo::GetClass()
FlowCommonInterface_Gizmo::GetNumOutputs()
FlowCommonInterface_Gizmo::GetOutput(int, int)
FlowCommonInterface_Gizmo::GetDefaultOutputIndex()
FlowCommonInterface_Gizmo::GetOutputName(int)
FlowCommonInterface_Gizmo::Activate(bool)
FlowCommonInterface_Gizmo::ActivateRev(int, int)
FlowCommonInterface_Gizmo::SetVisibility(int)
FlowCommonInterface_Gizmo::IsActive()
FlowCommonInterface_Gizmo::IsVisible()
FlowCommonInterface_Gizmo::AcquireSpecials()
FlowCommonInterface_Gizmo::Reset()
FlowCommonInterface_Gizmo::ActivateByComplexGizmo()
FlowCommonInterface_Gizmo::ResetForLoop()
FlowCommonInterface_Gizmo::GetTriggeredByPlayerId()
FlowCommonInterface_Gizmo::SetTriggeredByPlayerId(MechCharacter*)
FlowCommonInterface_Gizmo::GetBuilderOrigin(NUVEC*)
FlowCommonInterface_Gizmo::GetRotationMatrix(NUMTX&)
FlowCommonInterface_Gizmo::HideFromEditor()
FlowCommonInterface_Gizmo::SetGlowing(bool)
FlowCommonInterface_Gizmo::CanBeAddedToComplexGizmo()
FlowCommonInterface_Gizmo::GetReference()
FlowCommonInterface_Gizmo::JumpToComplete()
FlowCommonInterface_Gizmo::TagAsInvolvedInFlow()
FlowCommonInterface_Gizmo::IsInvolvedInFlow()
MechFlowInterface::SerialiseProgressData(EdStream&)
MechCommonPhantomInterface::~MechCommonPhantomInterface()
LegoGizmoPhantomInterface::~LegoGizmoPhantomInterface()
MechCommonPhantomInterface::RequiresPhantom(bool)
LegoGizmoPhantomInterface::EvaluateInteraction(MechCharacter&)
LegoGizmoPhantomInterface::StartInteraction(MechCharacter&)
LegoGizmoPhantomInterface::GetContainer()
LegoGizmoPhantomInterface::GetBaseObject()
GizmoTurret::GetGameAnimSet() const
GizmoTurret::Targeting_GetTargetPos(NUVEC&, TARGETING_TYPE, int)
CityGizmoTurretManager::~CityGizmoTurretManager()
CityGizmoTurretManager::SaveVersion()
LegoCityTurrets::~LegoCityTurrets()
LegoGizmoSystemBase<LegoTurrets>::ShutDown()
LegoGizmoSystemBase<LegoTurrets>::ShouldAddManagersForLevel(MechLevelContainer&)
CityGizTurretHelper::~CityGizTurretHelper()
GizmoTurret::operator=(GizmoTurret&)
LegoCityUnlocks::LegoCityUnlocks()
LegoCityUnlocks::Init()
LegoCityUnlocks::EventNotify(Event&, NuEventData&)
LegoCityUnlocks::Commit()
LegoCityUnlocks::ClearUnCommitted()
LegoCityUnlocks::Unlock(char const&, bool, bool)
LegoCityUnlocks::Lock(char const&)
LegoCityUnlocks::Unlock(HashedKey const&, bool, bool)
LegoCityUnlocks::GetUnlockIDInternal(HashedKey const&, LegoCityUnlocks::sUnlockData const*)
LegoCityUnlocks::Lock(HashedKey const&)
LegoCityUnlocks::UnlockAll(bool, bool)
LegoCityUnlocks::LockAll()
LegoCityUnlocks::IsUnlocked(char)
LegoCityUnlocksSaveLoad::LegoCityUnlocksSaveLoad(char const*)
LegoCityUnlocksSaveLoad::~LegoCityUnlocksSaveLoad()
LegoCityUnlocksSaveLoad::~LegoCityUnlocksSaveLoad()
LegoCityUnlocksSaveLoad::GetTotalSizeInBytes()
LegoCityUnlocksSaveLoad::Reset()
LegoCityUnlocksSaveLoad::SaveSaveGame(EdStream&, int)
LegoCityUnlocksSaveLoad::FillInFromGameData()
LegoCityUnlocksSaveLoad::LoadSaveGame(EdStream&, int, int)
LegoCityUnlocksSaveLoad::ShouldSaveTempUnlocks()
LegoCityUnlocksSaveLoad::InitNewGame()
BasicUnlockCriterion::requireCharacterClassUnlock(eCharClass)
BasicUnlockCriterion::requireAbilityUnlock(eUnlockID)
BasicUnlockCriterion::fromText(char const*, char const*)
BasicUnlockCriterion::BasicUnlockCriterion()
BasicUnlockCriterion::BasicUnlockCriterion(BasicUnlockCriterion const&)
BasicUnlockCriterion::operator=(BasicUnlockCriterion const&)
BasicUnlockCriterion::operator==(BasicUnlockCriterion const&) const
BasicUnlockCriterion::operator!=(BasicUnlockCriterion const&) const
BasicUnlockCriterion::~BasicUnlockCriterion()
BasicUnlockCriterion::GetLockMode() const
BasicUnlockCriterion::GetLockId() const
BasicUnlockCriterion::IsUnlocked() const
BasicUnlockCriterion::IsClear() const
BasicUnlockCriterion::GetCompressed() const
BasicUnlockCriterion::RestoreFromCompressed(char)
BasicUnlockCriterion::fromCompressed(char)
SAction_IsAbilityUnlocked::Exec(ScriptContext&)
SAction_UnlockAbility::Exec(ScriptContext&)
SAction_LockAbility::Exec(ScriptContext&)
SAction_UnlockSequence::Exec(ScriptContext&)
SAction_UnlockSequenceAndAnim::Exec(ScriptContext&)
LegoCityUnlocks::~LegoCityUnlocks()
SAction_IsAbilityUnlocked::~SAction_IsAbilityUnlocked()
SAction_IsAbilityUnlocked::GetName() const
SAction_IsAbilityUnlocked::GetInputs(SCmdParams&) const
SAction_IsAbilityUnlocked::GetOutputs(SCmdParams&) const
SAction_UnlockAbility::~SAction_UnlockAbility()
SAction_UnlockAbility::GetName() const
SAction_UnlockAbility::GetInputs(SCmdParams&) const
SAction_UnlockAbility::GetOutputs(SCmdParams&) const
SAction_LockAbility::~SAction_LockAbility()
SAction_LockAbility::GetName() const
SAction_LockAbility::GetInputs(SCmdParams&) const
SAction_LockAbility::GetOutputs(SCmdParams&) const
SAction_UnlockSequence::~SAction_UnlockSequence()
SAction_UnlockSequence::GetName() const
SAction_UnlockSequence::GetInputs(SCmdParams&) const
SAction_UnlockSequence::GetOutputs(SCmdParams&) const
SAction_UnlockSequenceAndAnim::~SAction_UnlockSequenceAndAnim()
SAction_UnlockSequenceAndAnim::GetName() const
SAction_UnlockSequenceAndAnim::GetInputs(SCmdParams&) const
SAction_UnlockSequenceAndAnim::GetOutputs(SCmdParams&) const
AbilityUnlockEventData::~AbilityUnlockEventData()
NuSmartPtr<NuTexture, true>::~NuSmartPtr()
VehicleClasses_GetClassFromString(char const*)
VehicleClasses_Init(char const*)
VehicleClasses_LoadTextures()
LegoCityVehicles::CreateMechVehicle(ApiVehicle&)
LegoCityVehicles::ApplyDefaultOrderHook(ApiVehicle&, bool, bool, bool)
LegoCityVehicles::ApiVehicleTest_UpdateChaseCamera(MechVehicle&, int)
LegoCityVehicles::CanOccupySeat(MechCharacter&, ApiVehicle&, VehicleDefSeat::SEATTYPES, unsigned int, cVehicleRidingBaseTask*)
LegoCityVehicles::GetRespawnMtxOverride(MechVehicle const&, VuMtx&)
LegoCityVehicles::~LegoCityVehicles()
MechSystemBase<MechVehicles, int>::Suppress(int)
MechSystemBase<MechVehicles, int>::IsSuppressed(int) const
MechVehicles::OnVehicleCreated(MechVehicle&)
MechVehicles::OnVehicleDestroyed(MechVehicle&)
MechVehicles::ShouldUseSecondaryHorn(MechVehicle const&) const
MechVehicles::IsShootTargeting(MechVehicle&)
MechVehicles::OverrideShootTargetPos(MechVehicle&, VuVec&)
MechVehicles::OnKillTriggerDebris(MechVehicles::KillRequest const&) const
LegoCityWhips::CanUseWhip(MechCharacter*)
LegoCityWhips::~LegoCityWhips()
LegoWhips::IsAimTargetingEnabled()
LegoCityPlugs::CreateGizmoManager()
non-virtual thunk to LegoCityPlugs::CreateGizmoManager()
LegoCityPlugs_MinerDynamiteCheck(unsigned short*, MechCharacter*)
LegoCityPlugs_MinerGetDynamite(MechCharacter*)
LegoCityPlugs::CanShowDetectorArrow(GizmoPlug&, MechCharacter*)
LegoCityPlugs::CanShowPlugButtonPrompt(GizmoPlug&, MechCharacter*)
LegoCityPlugs::PartyMemberPlugLateUpdate(GizmoPlug&, MechCharacter*, bool)
LegoCityPlugs::SetPlugHighlightedForPlayer(int, NUVEC&, float)
LegoCityPlugs::OnInit()
LegoCityPlugs::UnSetPlugHighlightedForPlayer(int)
LegoCityPlugs::OnPlugPlugged(GizmoPlug&, MechCharacter*, int)
LegoCityPlugs::ResetHighlightedPlugs()
LegoCityPlugs::GetPlugHighlightData(int) const
LegoCityPlugs::GetSystemDetectorArrowRange()
LegoCityGizmoPlugManager::LegoCityGizmoPlugManager()
LegoCityGizmoPlugManager::LateUpdate(float)
LegoCityGizmoPlugManager::UpdatePlugsHint()
LegoCityGizmoPlugManager::GetHighlightedGizmo(unsigned int)
LegoCityGizmoPlugManager::SetHighlightedGizmo(unsigned int, GizmoPlug*)
LegoCityGizmoPlugManager::CheckDynamiteCheatHint(WORLDINFO*, HINT_s*)
LegoCityGizmoPlugManager::CheckDynamitePlugHint(WORLDINFO*, HINT_s*)
LegoCityPlugs::~LegoCityPlugs()
LegoGizmoSystemBase<LegoPlugs>::ShutDown()
LegoGizmoSystemBase<LegoPlugs>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoPlugs::OnPlugUnClip(GizmoPlug&)
LegoPlugs::OnLateUpdate(GizmoPlug&)
LegoPlugs::DrawTwinkleOnPlug(GizmoPlug&)
GizmoPlugManager::~GizmoPlugManager()
LegoCityGizmoPlugManager::~LegoCityGizmoPlugManager()
GizmoPlugManager::SaveVersion()
LegoParkour::LegoParkour()
LegoParkour::~LegoParkour()
LegoParkour::~LegoParkour()
LegoParkour::MoveActions::MoveActions()
LegoParkour::MoveParameters::MoveParameters()
LegoParkour::MoveParameters::SetToDefault()
LegoParkour::MoveParameters::~MoveParameters()
LegoParkour::MoveParameters::ClearActions()
LegoParkour::MoveContext::MoveContext(MechCharacter&)
LegoParkour::MoveContext::~MoveContext()
LegoParkour::MoveContext::~MoveContext()
LegoParkour::MoveContext::AllowEnter(int, MechContext*)
LegoParkour::MoveContext::AllowLeave(int, MechContext*)
LegoParkour::MoveContext::OnEnter(LevelContainer*)
LegoParkour::DisableCollision(MechCharacter*, bool)
LegoParkour::MoveContext::OnProcess(LevelContainer*, float)
LegoParkour::EnableCollision(MechCharacter*)
LegoParkour::MoveContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoParkour::MoveContext::OnLeave()
LegoParkour::MoveEndContext::MoveEndContext(MechCharacter&)
LegoParkour::MoveEndContext::~MoveEndContext()
LegoParkour::MoveEndContext::~MoveEndContext()
LegoParkour::MoveEndContext::AllowEnter(int, MechContext*)
LegoParkour::MoveEndContext::AllowLeave(int, MechContext*)
LegoParkour::MoveEndContext::OnEnter(LevelContainer*)
LegoParkour::MoveEndContext::OnProcess(LevelContainer*, float)
LegoParkour::MoveEndContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoParkour::MoveEndContext::OnLeave()
LegoParkour::MoveEndTrackRootContext::MoveEndTrackRootContext(MechCharacter&)
LegoParkour::MoveEndTrackRootContext::~MoveEndTrackRootContext()
LegoParkour::MoveEndTrackRootContext::~MoveEndTrackRootContext()
LegoParkour::MoveEndTrackRootContext::AllowEnter(int, MechContext*)
LegoParkour::MoveEndTrackRootContext::AllowLeave(int, MechContext*)
LegoParkour::MoveEndTrackRootContext::OnEnter(LevelContainer*)
LegoParkour::MoveEndTrackRootContext::OnProcess(LevelContainer*, float)
LegoParkour::MoveEndTrackRootContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoParkour::MoveEndTrackRootContext::OnLeave()
LegoParkour::ShouldFireOvermaxEvent(MechCharacter*, bool)
LegoParkour::QTEContext::QTEContext(MechCharacter&)
LegoParkour::QTEContext::~QTEContext()
LegoParkour::QTEContext::~QTEContext()
LegoParkour::QTEContext::AllowEnter(int, MechContext*)
LegoParkour::QTEContext::AllowLeave(int, MechContext*)
LegoParkour::QTEContext::OnEnter(LevelContainer*)
LegoParkour::QTEContext::SetFailInternals()
LegoParkour::QTEContext::GetFailAnim()
LegoParkour::QTEContext::OnProcess(LevelContainer*, float)
LegoParkour::QTEContext::DrawPressMeToLiveButton()
LegoParkour::QTEContext::GetRecoverAnim()
LegoParkour::QTEContext::GetPerilAnim()
LegoParkour::QTEContext::GetExitToContext()
LegoParkour::QTEContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoParkour::QTEContext::OnLeave()
LegoParkour::QTEContext::IsInQTEAnim()
LegoParkour::ClearMoveData()
ParseLocation(char*)
ParseSpeed(char*)
LegoParkour::LoadMoveData(void*, LevelContainer&)
LegoParkour::GetCurrentSpeed(MechCharacter*)
LegoParkour::FindMoveParameters(unsigned short, unsigned short)
LegoParkour::MoveCount(unsigned short, unsigned short, bool (*)(LegoParkour::MoveParameters*))
LegoParkour::GetAllMoveParameters(unsigned short, unsigned short, LegoParkour::MoveParameters**, int, bool (*)(LegoParkour::MoveParameters*))
LegoParkour::MoveFromGroundCheck(MechCharacter*)
LegoParkour::OldMoveFromGroundCheck(MechCharacter*)
LegoParkour::CodeDrivenMove_Start(MechCharacter*, LegoParkour::MoveParameters*, GizmoLedge*, NUVEC, int, int, unsigned char, LegoParkour::SPEED)
LegoParkour::Move_Start(MechCharacter*, LegoParkour::MoveParameters*, short*, unsigned char, GizmoLedge*, NUVEC, int, int, unsigned char, LegoParkour::SPEED, LegoParkour::SPEED, bool, NUVEC, bool)
LegoParkour::MoveCode(MechCharacter*)
LegoParkour::UpdateRewards(MechCharacter*)
LegoParkour::Move_MoveCode(MechCharacter*)
LegoParkour::RewardsInit()
LegoParkour::SetRewardsActive(LegoCityGameObject*)
LegoParkour::DrawRewardParticles(MechCharacter*)
LegoParkour::Move_CanBreakout(MechCharacter*)
LegoParkour::Move_Breakout(MechCharacter*)
LegoParkour::MoveSeek_SetTargetMomCallback(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoParkour::MoveSeek_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoParkour::SwitchParkourLayer(GIZMOSYS*, bool)
LegoParkour::Init()
MechContext* MechContextConstructor<LegoParkour::MoveContext>(MechCharacter&)
MechContext* MechContextConstructor<LegoParkour::MoveEndContext>(MechCharacter&)
MechContext* MechContextConstructor<LegoParkour::MoveEndTrackRootContext>(MechCharacter&)
MechContext* MechContextConstructor<LegoParkour::QTEContext>(MechCharacter&)
LegoParkour::ShutDown()
LegoParkour::PointCameraAtHead(MechCharacter*, unsigned long)
LegoParkour::PointCameraAtAdjustPosition(MechCharacter*, unsigned long)
LegoParkour::PointCameraAtPos(MechCharacter*, unsigned long)
LegoParkourManager::LegoParkourManager(LevelContainer&)
LegoParkourManager::~LegoParkourManager()
LegoParkourManager::~LegoParkourManager()
LegoParkourManager::EventNotify(Event&, NuEventData&)
QTEHandler::QTEHandler(MechCharacter&, int, int, int)
QTEHandler::SetActions(int, int, int)
QTEHandler::Start()
QTEHandler::AdjustHeight()
QTEHandler::Process()
QTEHandler::DrawPressMeToLiveButton()
QTEHandler::UpdateCamera()
QTEHandler::Succeed() const
QTEHandler::Failed() const
QTEHandler::ApplyGravity() const
QTEHandler::EnablePhysics() const
LegoContextHandlerBase<LegoParkour::MoveContext>::GetInstanceId() const
LegoContextHandlerBase<LegoParkour::MoveEndContext>::GetInstanceId() const
LegoContextHandlerBase<LegoParkour::MoveEndTrackRootContext>::GetInstanceId() const
LegoContextHandlerBase<LegoParkour::QTEContext>::GetInstanceId() const
LegoParkourManager::GetManagerName() const
LegoContextHandlerBase<LegoParkour::MoveContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<LegoParkour::MoveEndContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<LegoParkour::MoveEndTrackRootContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<LegoParkour::QTEContext>::~LegoContextHandlerBase()
ClassManagerAccessor<ParticleManager>::GetFromCreate(ILevelContainer const&)
CameraTweakAddOn* CameraTweakAddOn::FindOrCreateAddOn<MechCharacter*>(MechCharacter*&, unsigned long, float, float, float)
CameraTweakAddOn* CameraTweakAddOn::FindOrCreateAddOn<MechCharacter>(MechCharacter&, unsigned long, float, float, float)
SkidContext::Init()
MechContext* MechContextConstructor<SkidContext>(MechCharacter&)
SkidContext::Check(MechCharacter*)
SkidContext::SkidContext(MechCharacter&)
SkidContext::~SkidContext()
SkidContext::~SkidContext()
SkidContext::AllowEnter(int, MechContext*)
SkidContext::AllowLeave(int, MechContext*)
SkidContext::OnEnter(LevelContainer*)
SkidContext::UpdateAutoMomentumAndHeading()
SkidContext::OnProcess(LevelContainer*, float)
SkidContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
SkidContext::OnLeave()
LegoContextHandlerBase<SkidContext>::GetInstanceId() const
LegoContextHandlerBase<SkidContext>::~LegoContextHandlerBase()
VaultContext::Init()
MechContext* MechContextConstructor<VaultContext>(MechCharacter&)
VaultContext::VaultContext(MechCharacter&)
VaultContext::~VaultContext()
VaultContext::~VaultContext()
VaultContext::AllowEnter(int, MechContext*)
VaultContext::AllowLeave(int, MechContext*)
VaultContext::OnEnter(LevelContainer*)
VaultContext::OnProcess(LevelContainer*, float)
VaultContext::UpdateJumpMomentum()
VaultContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
VaultContext::OnLeave()
LegoContextHandlerBase<VaultContext>::GetInstanceId() const
LegoContextHandlerBase<VaultContext>::~LegoContextHandlerBase()
WallRunPropListener::WallRunPropListener(Entity*)
WallRunPropListener::~WallRunPropListener()
WallRunPropListener::~WallRunPropListener()
WallRunPropListener::OverlapBegin(Entity const*, Entity const*)
WallRunPropPhantom::WallRunPropPhantom(LegoCityObstacle*)
WallRunPropPhantom::BeginCollision(Entity*)
WallRunContext::SetHitWallRunCorner(LegoCityObstacle const*)
WallRunPropPhantom::~WallRunPropPhantom()
WallRunPropPhantom::~WallRunPropPhantom()
WallRunContext::Init()
MechContext* MechContextConstructor<WallRunContext>(MechCharacter&)
WallRunContext::InitSample(short)
WallRunContext::Check(MechCharacter*)
WallRunContext::FindFirstWall(MechCharacter*, LegoCityObstacle const*, Gizmo const*, VuVec&, VuVec&, bool&)
WallRunContext::SetStart(LegoCityObstacle const*, VuVec const&, VuVec const&, bool)
WallRunContext::RayTest(VuVec const&, VuVec const&, bool, bool, VuVec&, VuVec&, bool&)
WallRunContext::FindNextWall(MechCharacter*, LegoCityObstacle const*, Gizmo const*, VuVec&, VuVec&, bool&)
WallRunContext::ShutDown()
WallRunContext::AddPhantomsAndListenersToObstacles(LegoCityObstacleManager*)
WallRunContext::RemovePhantomsAndListenersFromObstacles(LegoCityObstacleManager*)
WallRunContext::WallRunContext(MechCharacter&)
WallRunContext::~WallRunContext()
WallRunContext::~WallRunContext()
WallRunContext::AllowEnter(int, MechContext*)
WallRunContext::AllowLeave(int, MechContext*)
WallRunContext::OnEnter(LevelContainer*)
WallRunContext::OnProcess(LevelContainer*, float)
WallRunContext::SwitchTo(WallRunContext::State, float)
WallRunContext::ProcessJumpOn(float)
WallRunContext::ProcessRun(float)
WallRunContext::ProcessCorner(float)
WallRunContext::ProcessEndCorner(float)
WallRunContext::ProcessLand(float)
WallRunContext::StartJumpOffWall()
WallRunContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
WallRunContext::OnLeave()
WallRunContext::FindNextTargetObstacle(LegoCityObstacle const*)
WallRunContext::CalcTargetPos()
WallRunContext::IsPropValid(LegoCityObstacle const*)
WallRunContext::EnterJumpOn(float)
WallRunContext::EnterRun(float)
WallRunContext::EnterCorner(float)
WallRunContext::EnterEndCorner(float)
WallRunContext::CalcVelocityAlongWall(bool, bool)
WallRunContext::EnterLand(float)
WallRunContext::ExitJumpOn(float)
WallRunContext::ExitRun(float)
WallRunContext::ExitCorner(float)
WallRunContext::ExitEndCorner(float)
WallRunContext::ExitLand(float)
WallRunContext::UpdateContact()
DynoListener::AllowCollision(Entity const*, Entity const*)
Entity::Validate()
Entity::IsEntitySleeping()
Entity::IntegrateVelocity(float)
Entity::IntegratePosition(float)
LegoContextHandlerBase<WallRunContext>::GetInstanceId() const
LegoContextHandlerBase<WallRunContext>::~LegoContextHandlerBase()
WallHugStartPhantom::WallHugStartPhantom(LegoCityLedge*, char)
WallHugStartPhantom::~WallHugStartPhantom()
WallHugStartPhantom::~WallHugStartPhantom()
WallHugStartPhantom::GetPhantomPosition()
WallHugStartPhantom::BeginCollision(Entity*)
WallHugStartPhantom::EndCollision(Entity*)
WallHugContext::AddPhantomsToLedges(LegoCityLedgeManager*)
WallHugContext::RemovePhantomsFromLedges(LegoCityLedgeManager*)
WallHugContext::Init()
MechContext* MechContextConstructor<WallHugContext>(MechCharacter&)
WallHugContext::AlwaysUpdate(MechCharacter*)
WallHugContext::Check(MechCharacter*)
WallHugContext::ShutDown()
WallHugContext::WallHugContext(MechCharacter&)
WallHugContext::~WallHugContext()
WallHugContext::~WallHugContext()
WallHugContext::AllowEnter(int, MechContext*)
WallHugContext::AllowLeave(int, MechContext*)
WallHugContext::OnEnter(LevelContainer*)
WallHugContext::StartStepOn()
WallHugContext::StartLand()
WallHugContext::StartIdle()
WallHugContext::OnProcess(LevelContainer*, float)
WallHugContext::GetRotation()
WallHugContext::StartRightCorner()
WallHugContext::StartRight()
WallHugContext::StartLeftCorner()
WallHugContext::StartLeft()
WallHugContext::UpdateStepOnPosAndMom(float)
WallHugContext::UpdatePosition()
WallHugContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
WallHugContext::OnLeave()
LegoContextHandlerBase<WallHugContext>::GetInstanceId() const
LegoContextHandlerBase<WallHugContext>::~LegoContextHandlerBase()
SGenericMissionData::~SGenericMissionData()
OldLegoCityMissions::InitMissions()
OldLegoCityMissions::GenericRenderPressToPlayFunc(float)
OldLegoCityMissions::GenericRenderStartFunc(LegoLevelContainer*, float)
OldLegoCityMissions::GenericRenderFunc(float)
OldLegoCityMissions::GenericRenderCompleteFunc(float)
OldLegoCityMissions::GetMission(char const*)
OldLegoCityMissions::ExitMissions()
OldLegoCityMissions::UnloadGenericScreenData()
OldLegoCityMissions::LoadGenericScreenData()
OldLegoCityMissions::LoadPerm()
OldLegoCityMissions::ShowScreen(EMISSIONSCREEN)
OldLegoCityMissions::Update(float)
OldLegoCityMissions::Abandon(char*)
OldLegoCityMissions::Render(LegoLevelContainer*)
OldLegoCityMissions::IsAvailable(char*)
OldLegoCityMissions::RequestStartMission(char*)
OldLegoCityMissions::CompleteObjective()
OldLegoCityMissions::IncScore(float)
Phone_SetScreen(EPHONESCREEN)
Phone_SetState(EPHONESTATE)
Phone_Update()
Phone_DrawRect(NuSmartPtr<NuMtl, true>, float, float, float, float)
Phone_Draw(LegoLevelContainer*)
PostGroup::PostGroup()
PostGroup::~PostGroup()
PostGroup::RecalculateBounds()
PostHopContext::GetPostPosition(LegoCityObstacle*, NUVEC*)
PostHopManager::PostHopManager(LevelContainer&)
PostHopManager::~PostHopManager()
CSListHeader<PostHopManager::JumpOnAreaPair>::Clear()
PostHopManager::~PostHopManager()
PostHopManager::FixUpPosts(LegoCityObstacleManager*)
PostHopManager::AddJumpOnArea(NuMechPtr<ConvexArea, -1>, NuMechPtr<Gizmo, -1>)
PostHopManager::RemovePosts(LegoCityObstacleManager*)
PostHopManager::ClearObsoleteAreas(LegoCityObstacle*)
PostHopManager::ClearObsoleteAreas()
PostHopManager::CheckGroupBounds(MechCharacter*, NuList<PostGroup*>&)
PostHopManager::FindPostByArea(MechCharacter*)
CSListHeader<PostHopManager::JumpOnAreaPair>::Delete(PostHopManager::JumpOnAreaPair*)
PostHopContext::Init()
MechContext* MechContextConstructor<PostHopContext>(MechCharacter&)
PostHopContext::Check(MechCharacter*)
PostHopContext::CheckGroupBounds(MechCharacter*, NuList<PostGroup*>&)
PostHopContext::IsPostActive(LegoCityObstacle*)
PostHopContext::SetTargetPost(LegoCityObstacle*, NUVEC const*)
PostHopContext::SetState(PostHopContext::POSTHOPSTATE)
PostHopContext::CalcExtraHeight(VuVec const&, VuVec const&)
PostHopContext::ShutDown()
PostHopContext::FixUpPosts(LegoCityObstacleManager*)
PostHopContext::RemovePosts(LegoCityObstacleManager*)
PostHopContext::PostHopContext(MechCharacter&)
PostHopContext::~PostHopContext()
non-virtual thunk to PostHopContext::~PostHopContext()
PostHopContext::~PostHopContext()
non-virtual thunk to PostHopContext::~PostHopContext()
PostHopContext::AllowEnter(int, MechContext*)
PostHopContext::AllowLeave(int, MechContext*)
PostHopContext::OnEnter(LevelContainer*)
PostHopContext::OnProcess(LevelContainer*, float)
PostHopContext::UpdateJumpPosition()
PostHopContext::IsWithinLandRange()
PostHopContext::UpdateIntoLandPosition()
PostHopContext::UpdateTargetPost()
PostHopContext::StartHop()
PostHopContext::StartJumpOff()
PostHopContext::StartFall()
PostHopContext::UpdateFallMomentum()
PostHopContext::UpdateTargetHeading()
PostHopContext::UpdateAIState()
PostHopContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
PostHopContext::OnLeave()
PostHopContext::Collision(Character*, Entity*, ContactPoint&)
non-virtual thunk to PostHopContext::Collision(Character*, Entity*, ContactPoint&)
PostHopContext::StartJumpOn()
PostHopContext::StartIntoLand()
PostHopContext::StartLand(int)
PostHopContext::StartBalance()
PostHopContext::UpdateJumpOffPoints()
PostHopAITask::Process(Brain&, float const&)
PostHopAITask::PostHopAITask()
PostHopAITask::FindCurrentEdge(MechCharacter&, LegoCityObstacle const*)
PostHopManager::GetManagerName() const
LegoContextHandlerBase<PostHopContext>::GetInstanceId() const
NuListFind<PostGroup*, NuListNode<PostGroup*> >::Remove(NuListNode<PostGroup*>*, NuListNode<PostGroup*>*, PostGroup* const&)
NuListFind<LegoCityObstacle*, NuListNode<LegoCityObstacle*> >::Remove(NuListNode<LegoCityObstacle*>*, NuListNode<LegoCityObstacle*>*, LegoCityObstacle* const&)
ClassManagerAccessor<PostHopManager>::GetFromCreate(ILevelContainer const&)
LegoContextHandlerBase<PostHopContext>::~LegoContextHandlerBase()
SatNavUIHandler::SatNavUIHandler(unsigned int)
SatNavUIHandler::~SatNavUIHandler()
SatNavUIHandler::~SatNavUIHandler()
SatNavUIHandler::Render(UIMap const&)
CitySatNavSystem::GetDRCPathMaterial(int) const
SatNavUIHandler::SetCanRender(bool)
SatNavUIHandler::CanRender()
CitySatNavSystem::CitySatNavSystem()
CitySatNavSystem::~CitySatNavSystem()
CitySatNavSystem::~CitySatNavSystem()
CitySatNavSystem::Init()
CitySatNavSystem::ShutDown()
CitySatNavSystem::UnloadTextures()
CitySatNavSystem::OnInitPostConfig()
CitySatNavSystem::LoadTextures()
CitySatNavSystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CitySatNavSystem::ProcessIndicatorIcon()
CitySatNavSystem::EventNotify(Event&, NuEventData&)
CitySatNavSystem::OnEnterLevel(MechLevelContainer&)
CitySatNavSystem::SetCanShowIndicator(bool)
CitySatNavSystem::OnExitLevel(MechLevelContainer&)
CitySatNavSystem::RemoveIconFromTarget(unsigned int, bool)
CitySatNavSystem::AttachUI(MechCharacter&, SatNavTarget&)
CitySatNavSystem::IsShowingMapUI(int) const
CitySatNavSystem::HideMapUI(int)
CitySatNavSystem::ShowMapUI(int)
CitySatNavSystem::DetachUI(MechCharacter&)
CitySatNavSystem::UpdateIndicator(MechCharacter&, VuVec const&)
CitySatNavSystem::AttachIconToTarget(unsigned int)
CitySatNavSystem::CreateIndicator(MechCharacter&, VuVec const&)
CitySatNavSystem::DestroyIndicator(MechCharacter&)
CitySatNavSystem::ShowIndicator(MechCharacter&)
CitySatNavSystem::HideIndicator(MechCharacter&)
CitySatNavSystem::HideCurrentPin(MechCharacter&)
CitySatNavSystem::OnArrived(MechCharacter&, LevelContainer&) const
CitySatNavSystem::AcquireJobValues()
CitySatNavSystem::PostEscapeSpaceIsland() const
CitySatNavSystem::PostSpaceDive() const
CitySatNavSystem::CanShowIndicator()
CitySatNavSystem::IsDestinationNearObjective(VuVec const*, ApiCharacter const*, ApiVehicle const*) const
CitySatNavSystem::GetTargetPin(int) const
CitySatNavSystem::GetTargetPin(int)
TaxiUI::LoadFunc()
TaxiUI::InitFunc()
TaxiUI::ExitFunc()
TaxiUI::Render3D(LegoLevelContainer*)
TaxiUI::UpdateFunc(float)
TaxiUI::ObjectiveCompleteFunc()
TaxiUI::RenderPressToPlayFunc(float)
TaxiUI::RenderStartFunc(LegoLevelContainer*, float)
TaxiUI::RenderFunc(float)
TaxiUI::RenderCompleteFunc(float)
TaxiUI::SetDestination(char*)
TaxiUI::Pickup_CollectClock(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
LegoCityGame::SpecifyMemorySettings(LegoMemorySettings&, LegoMemorySettings&) const
CityKrawlieSimpleHookCivilianAttacked::GetHashedKey()
CityKrawlies::Init()
CityKrawlies::CreateManager(MechLevelContainer&)
CityKrawlies::RegisterControllers()
void* Constructor<CityBasicController>()
void* Constructor<CityKrawlieStandardController>()
void* Constructor<CityKrawlieWanderController>()
void* Constructor<CityPedestrianKrawlieController>()
void* Constructor<CityKrawlieSpiderController>()
void* Constructor<CityKrawlieStationaryController>()
CityKrawlies::MechKrawlieMiniFigGenericHooks(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlies::HookMovingVehicleClose(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlies::HookScarySpiceClose(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlies::HookFlatten(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlies::HookPlayerClose(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlies::HookContextCompleted(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlies::HookHitBy(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlies::HookTransformIntoCharacter(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlies::HookDrillAttack(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlies::CreateKrawlieGameData(MechKrawlie&)
CityKrawlies::DestroyKrawlieGameData(MechKrawlie&)
CityKrawlies::CreateKrawliePedestrian(MechCharacter&, bool)
CityKrawlies::WalkAwayFromVehicle(MechKrawlie&, MechKrawlieSimpleHookMovingVehicleClose&)
CityKrawlies::DiveOutOfTheWayOfVehicle(MechKrawlie&, MechVehicle&)
CityKrawlies::FlattenKrawlie(MechKrawlie&, VuVec const&, ApiVehicle*)
CityKrawlies::MoveAwayFromPosition(MechKrawlie&, VuVec const&, VuVec const&, KRAWLIEANIM)
CityKrawlies::HookHitByBolt(MechKrawlie&, MechKrawlieSimpleHookHitBy&)
CityKrawlies::PausePedestrianProcessingAndRendering()
CityKrawlies::ResumePedestrianProcessingAndRendering()
CityKrawlies::~CityKrawlies()
MechSystemBase<MechKrawlies, int>::Suppress(int)
MechSystemBase<MechKrawlies, int>::IsSuppressed(int) const
CityKrawlies::GetSectorWanderController()
CityKrawlies::OverrideSectorWanderAvoidance(bool)
MechKrawlies::EnableGadgetCollision() const
CityKrawlies::GetObjDescAttachmentLayerIgnoreMask() const
void KrawlieContextConstructor<MechKrawlieMiniFigContextJump>(MechKrawlie&)
void KrawlieContextConstructor<MechKrawlieMiniFigContextFlatten>(MechKrawlie&)
void KrawlieContextConstructor<MechKrawliePlayAnimContext>(MechKrawlie&)
void KrawlieContextConstructor<CityKrawlieContextKnockDown>(MechKrawlie&)
void KrawlieContextConstructor<MechKrawlieContextMiniFigRandomWander>(MechKrawlie&)
MechVehicleObjectEventData::~MechVehicleObjectEventData()
CityKrawlieManager::CityKrawlieManager(MechLevelContainer&)
CityKrawlieManager::~CityKrawlieManager()
CityKrawlieManager::~CityKrawlieManager()
CityKrawlieManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CityKrawlieManager::ProcessCheatKrawlieType()
CityKrawlieManager::ProcessCharacter(MechCharacter&)
CityKrawlieManager::EventNotify(Event&, NuEventData&)
CityKrawlieManager::InitAllKrawlyPlayAreasFromInfo()
CityKrawlieManager::LoadResources()
CityKrawlieManager::CreateKrawlieRider(MechVehicle&, int, unsigned int const*)
CityKrawlieManager::CreateKrawliePassenger(MechVehicle&, VehicleDefSeat::SEATTYPES)
CityKrawlieManager::GetLodIndexForDistance(float)
CityKrawlieManager::ToggleCheatKrawlieType()
CityKrawlieManager::GetManagerName() const
MechKrawlieManager::IsChildlessManager()
MechKrawlieSimpleHookOverrideTypeId::GetHashedKey()
MechKrawlieSimpleHookBigScaryObjectClose::GetHashedKey()
SAction_ConvertKrawlieToCharacter::Exec(ScriptContext&)
void ScriptContext::SetReturn<ApiCharacterScriptVariable, ApiCharacter*>(int, ApiCharacter*)
SAction_SetKrawlieRendering::Exec(ScriptContext&)
SAction_SetKrawlieProcessing::Exec(ScriptContext&)
SAction_OverrideKrawlieLODDistances::Exec(ScriptContext&)
SAction_ClearKrawlieLODDistanceOverrides::Exec(ScriptContext&)
SAction_DestroyKrawliesInGroup::Exec(ScriptContext&)
SAction_PauseKrawlieGroup::Exec(ScriptContext&)
SAction_PauseKrawlieSpawner::Exec(ScriptContext&)
SAction_TriggerKrawliesMassPanic::GetInputs(SCmdParams&) const
SAction_TriggerKrawliesMassPanic::Exec(ScriptContext&)
SAction_KrawliePartyTime::Exec(ScriptContext&)
CityKrawlieScriptActions::RegisterScriptActions()
SAction_TriggerKrawliesMassPanic::~SAction_TriggerKrawliesMassPanic()
SAction_TriggerKrawliesMassPanic::GetName() const
SAction_TriggerKrawliesMassPanic::GetOutputs(SCmdParams&) const
SAction_ConvertKrawlieToCharacter::~SAction_ConvertKrawlieToCharacter()
SAction_ConvertKrawlieToCharacter::GetName() const
SAction_ConvertKrawlieToCharacter::GetInputs(SCmdParams&) const
SAction_ConvertKrawlieToCharacter::GetOutputs(SCmdParams&) const
SAction_SetKrawlieRendering::~SAction_SetKrawlieRendering()
SAction_SetKrawlieRendering::GetName() const
SAction_SetKrawlieRendering::GetInputs(SCmdParams&) const
SAction_SetKrawlieRendering::GetOutputs(SCmdParams&) const
SAction_SetKrawlieProcessing::~SAction_SetKrawlieProcessing()
SAction_SetKrawlieProcessing::GetName() const
SAction_SetKrawlieProcessing::GetInputs(SCmdParams&) const
SAction_SetKrawlieProcessing::GetOutputs(SCmdParams&) const
SAction_OverrideKrawlieLODDistances::~SAction_OverrideKrawlieLODDistances()
SAction_OverrideKrawlieLODDistances::GetName() const
SAction_OverrideKrawlieLODDistances::GetInputs(SCmdParams&) const
SAction_OverrideKrawlieLODDistances::GetOutputs(SCmdParams&) const
SAction_ClearKrawlieLODDistanceOverrides::~SAction_ClearKrawlieLODDistanceOverrides()
SAction_ClearKrawlieLODDistanceOverrides::GetName() const
SAction_ClearKrawlieLODDistanceOverrides::GetInputs(SCmdParams&) const
SAction_ClearKrawlieLODDistanceOverrides::GetOutputs(SCmdParams&) const
SAction_DestroyKrawliesInGroup::~SAction_DestroyKrawliesInGroup()
SAction_DestroyKrawliesInGroup::GetName() const
SAction_DestroyKrawliesInGroup::GetInputs(SCmdParams&) const
SAction_DestroyKrawliesInGroup::GetOutputs(SCmdParams&) const
SAction_PauseKrawlieGroup::~SAction_PauseKrawlieGroup()
SAction_PauseKrawlieGroup::GetName() const
SAction_PauseKrawlieGroup::GetInputs(SCmdParams&) const
SAction_PauseKrawlieGroup::GetOutputs(SCmdParams&) const
SAction_PauseKrawlieSpawner::~SAction_PauseKrawlieSpawner()
SAction_PauseKrawlieSpawner::GetName() const
SAction_PauseKrawlieSpawner::GetInputs(SCmdParams&) const
SAction_PauseKrawlieSpawner::GetOutputs(SCmdParams&) const
SAction_KrawliePartyTime::~SAction_KrawliePartyTime()
SAction_KrawliePartyTime::GetName() const
SAction_KrawliePartyTime::GetInputs(SCmdParams&) const
SAction_KrawliePartyTime::GetOutputs(SCmdParams&) const
CityKrawlieSimpleHookDance::GetHashedKey()
KTD_Type_SetFlag(unsigned char)
KTD_Type_SetFlag_DisableUseAttractors(nufpar_s*)
KTD_Type_SetFlag_IsZombie(nufpar_s*)
CityKrawlieTypeDefinitions::GetGameParserKeywords()
CityKrawlieTypeDefinitions::~CityKrawlieTypeDefinitions()
MechSystemBase<MechKrawlieTypeDefinitions, int>::Suppress(int)
MechSystemBase<MechKrawlieTypeDefinitions, int>::IsSuppressed(int) const
CityKrawlieStationaryController::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
CityKrawlieStationaryController::HookHitByBolt(MechKrawlie&, MechKrawlieSimpleHookHitBy&)
CityKrawlieStationaryController::~CityKrawlieStationaryController()
AddOn::OnAdded()
MechKrawlieControllerBase::Initialise()
MechKrawlieControllerBase::Shutdown()
MechKrawlieControllerBase::PreSpawnKrawlies()
MechKrawlieControllerBase::Process(float)
MechKrawlieControllerBase::ProcessSpawning(float)
MechKrawlieControllerBase::OverrideRenderMtx(MechKrawlie&, VuMtx&)
MechKrawlieControllerBase::OverrideRender(MechKrawlie&, MechKrawlieRenderInfo const&, bool&)
MechKrawlieControllerBase::CanSpawnKrawlies()
MechKrawlieControllerBase::GetRidingData(MechKrawlie const&) const
CityKrawlieStationaryController::GetInteractFilterMask()
MechKrawlieController<MechKrawlieStationaryControllerData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<MechKrawlieStationaryControllerData>::OnKrawlieDestroyed(MechKrawlie*)
non-virtual thunk to CityKrawlieStationaryController::~CityKrawlieStationaryController()
non-virtual thunk to CityKrawlieStationaryController::~CityKrawlieStationaryController()
CityKrawlieContextRequest_BlastDamage(VuVec const&)
void KrawlieContextConstructor<CityKrawlieContextBlastDamage>(MechKrawlie&)
CityKrawlieContextBlastDamage::CityKrawlieContextBlastDamage(MechKrawlie&)
CityKrawlieContextBlastDamage::~CityKrawlieContextBlastDamage()
CityKrawlieContextBlastDamage::~CityKrawlieContextBlastDamage()
CityKrawlieContextBlastDamage::OnAdded(MechKrawlie&)
CityKrawlieContextBlastDamage::OnRemoved(MechKrawlie&)
CityKrawlieContextBlastDamage::OverrideRenderMtx(MechKrawlie&, VuMtx&)
CityKrawlieContextBlastDamage::Process(float, MechKrawlie&)
MechKrawlieContext::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie&)
MechKrawlieContext::OverrideRender(MechKrawlie&, MechKrawlieRenderInfo const&, bool&)
CityKrawlieContextBlastDamage::GetSize() const
MechKrawlieContext::Relocated(MechKrawlie&, MechKrawlie&)
CityKrawlieContextBlastDamage::GetContextId()
CityKrawlieContextRequest_KnockBack(VuVec const&, float)
void KrawlieContextConstructor<CityKrawlieContextKnockBack>(MechKrawlie&)
CityKrawlieContextKnockBack::CityKrawlieContextKnockBack(MechKrawlie&)
CityKrawlieContextKnockBack::~CityKrawlieContextKnockBack()
CityKrawlieContextKnockBack::~CityKrawlieContextKnockBack()
CityKrawlieContextKnockBack::Process(float, MechKrawlie&)
MechKrawlieContext::OnAdded(MechKrawlie&)
MechKrawlieContext::OnRemoved(MechKrawlie&)
MechKrawlieContext::OverrideRenderMtx(MechKrawlie&, VuMtx&)
CityKrawlieContextKnockBack::GetSize() const
CityKrawlieContextKnockBack::GetContextId()
CityKrawlieContextRequest_KnockDown(VuVec const&)
CityKrawlieContextKnockDown::CityKrawlieContextKnockDown(MechKrawlie&)
CityKrawlieContextKnockDown::~CityKrawlieContextKnockDown()
CityKrawlieContextKnockDown::~CityKrawlieContextKnockDown()
CityKrawlieContextKnockDown::Process(float, MechKrawlie&)
CityKrawlieContextKnockDown::GetSize() const
CityKrawlieContextKnockDown::GetContextId()
MechKrawlieSimpleHookContextCompleted::GetHashedKey()
CityKrawlieContextRequest_Stun(VuVec const&, float, float)
void KrawlieContextConstructor<CityKrawlieContextStun>(MechKrawlie&)
CityKrawlieContextStun::CityKrawlieContextStun(MechKrawlie&)
CityKrawlieContextStun::~CityKrawlieContextStun()
CityKrawlieContextStun::~CityKrawlieContextStun()
CityKrawlieContextStun::OnAdded(MechKrawlie&)
CityKrawlieContextStun::OnRemoved(MechKrawlie&)
CityKrawlieContextStun::OverrideRenderMtx(MechKrawlie&, VuMtx&)
CityKrawlieContextStun::Process(float, MechKrawlie&)
CityKrawlieContextStun::GetSize() const
CityKrawlieContextStun::GetContextId()
CityKrawlieContextRequest_TakeHit(VuVec const&)
void KrawlieContextConstructor<CityKrawlieContextTakeHit>(MechKrawlie&)
CityKrawlieContextTakeHit::CityKrawlieContextTakeHit(MechKrawlie&)
CityKrawlieContextTakeHit::~CityKrawlieContextTakeHit()
CityKrawlieContextTakeHit::~CityKrawlieContextTakeHit()
CityKrawlieContextTakeHit::Process(float, MechKrawlie&)
CityKrawlieContextTakeHit::GetSize() const
CityKrawlieContextTakeHit::GetContextId()
CityPedestrianKrawlieController::CityPedestrianKrawlieController()
CityPedestrianKrawlieController::~CityPedestrianKrawlieController()
non-virtual thunk to CityPedestrianKrawlieController::~CityPedestrianKrawlieController()
CityPedestrianKrawlieController::~CityPedestrianKrawlieController()
non-virtual thunk to CityPedestrianKrawlieController::~CityPedestrianKrawlieController()
CityPedestrianKrawlieController::Initialise()
CityPedestrianKrawlieController::SpawnKrawlies()
CityPedestrianKrawlieController::Shutdown()
CityPedestrianKrawlieController::Process(float)
CityPedestrianKrawlieController::ProcessSpawning(float)
CityPedestrianKrawlieController::GetInteractFilterMask()
CityPedestrianKrawlieController::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
CityPedestrianKrawlieController::HookHitBy(MechKrawlieSimpleHook&, MechKrawlie&)
CityPedestrianKrawlieController::HookPlayerClose(MechKrawlieSimpleHook&, MechKrawlie*)
CityPedestrianKrawlieController::HookCollision(MechKrawlieSimpleHook&, MechKrawlie&)
CityPedestrianKrawlieController::HookContextComplete(MechKrawlieSimpleHook&, MechKrawlie*)
CityPedestrianKrawlieController::HookSectorRemoved(MechKrawlieSimpleHook&, MechKrawlie*)
CityPedestrianKrawlieController::HookOnCreate(MechKrawlieSimpleHook&, MechKrawlie*)
CityPedestrianKrawlieController::HookOnDestroy(MechKrawlieSimpleHook&, MechKrawlie*)
CityPedestrianKrawlieController::HookOverrideTypeId(MechKrawlieSimpleHook&, MechKrawlie*)
CityPedestrianKrawlieController::HookCivilianAttacked(MechKrawlieSimpleHook&, MechKrawlie*)
CityPedestrianKrawlieController::HookEdgeCollision(MechKrawlieSimpleHook&, MechKrawlie&)
IsThisAConvict(int, int)
IsThisAConvict(CharDef const&)
IsThisAFarmer(int, int)
IsThisAFarmer(CharDef const&)
MechKrawlieController<CityPedestrianKrawlieControllerData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<CityPedestrianKrawlieControllerData>::OnKrawlieDestroyed(MechKrawlie*)
void KrawlieContextConstructor<CityPedestrianKrawlieDefaultContext>(MechKrawlie&)
void KrawlieContextConstructor<CityPedestrianKrawlieInteractWithPlayerContext>(MechKrawlie&)
void KrawlieContextConstructor<CityPedestrianKrawlieInteractWithPedestrianContext>(MechKrawlie&)
NuVector<cAINodeLink const*>::Reserve(unsigned int, bool)
CityPedestrianKrawlieDefaultContext::CityPedestrianKrawlieDefaultContext(MechKrawlie&)
CityPedestrianKrawlieDefaultContext::HasArrivedAtDestination(MechKrawlie&, float, bool&)
CityPedestrianKrawlieDefaultContext::ChooseDestination(MechKrawlie&, bool)
CityPedestrianKrawlieDefaultContext::~CityPedestrianKrawlieDefaultContext()
CityPedestrianKrawlieDefaultContext::~CityPedestrianKrawlieDefaultContext()
CityPedestrianKrawlieDefaultContext::OnAdded(MechKrawlie&)
CityPedestrianKrawlieDefaultContext::OnRemoved(MechKrawlie&)
CityPedestrianKrawlieDefaultContext::Process(float, MechKrawlie&)
CityPedestrianKrawlieDefaultContext::ProcessAnimation(MechKrawlie&, float)
CityPedestrianKrawlieDefaultContext::ProcessGreenCrossCode(MechKrawlie&)
CityPedestrianKrawlieDefaultContext::CaclulateNextNodeWeight(MechKrawlie&, cAINode const*, cAINode const*)
CityPedestrianKrawlieDefaultContext::ProcessStuck(MechKrawlie&, float, float)
CityPedestrianKrawlieDefaultContext::GetSize() const
CityPedestrianKrawlieDefaultContext::GetContextId()
NuVector<MechKrawlieWeightedContainerEntry<CityPedestrianKrawlieDefaultContext::PossibleNode> >::Reserve(unsigned int, bool)
CityPedestrianKrawlieInteractWithPlayerContext::CityPedestrianKrawlieInteractWithPlayerContext(MechKrawlie&)
CityPedestrianKrawlieInteractWithPlayerContext::~CityPedestrianKrawlieInteractWithPlayerContext()
CityPedestrianKrawlieInteractWithPlayerContext::~CityPedestrianKrawlieInteractWithPlayerContext()
CityPedestrianKrawlieInteractWithPlayerContext::OnAdded(MechKrawlie&)
CityPedestrianKrawlieInteractWithPlayerContext::OnRemoved(MechKrawlie&)
CityPedestrianKrawlieInteractWithPlayerContext::Process(float, MechKrawlie&)
CityPedestrianKrawlieInteractWithPlayerContext::GetSize() const
CityPedestrianKrawlieInteractWithPlayerContext::GetContextId()
CityPedestrianKrawlieInteractWithPedestrianContext::CityPedestrianKrawlieInteractWithPedestrianContext(MechKrawlie&)
CityPedestrianKrawlieInteractWithPedestrianContext::~CityPedestrianKrawlieInteractWithPedestrianContext()
CityPedestrianKrawlieInteractWithPedestrianContext::~CityPedestrianKrawlieInteractWithPedestrianContext()
CityPedestrianKrawlieInteractWithPedestrianContext::OnAdded(MechKrawlie&)
CityPedestrianKrawlieInteractWithPedestrianContext::ChooseRandomInteractionAnimation()
CityPedestrianKrawlieInteractWithPedestrianContext::OnRemoved(MechKrawlie&)
CityPedestrianKrawlieInteractWithPedestrianContext::Process(float, MechKrawlie&)
CityPedestrianKrawlieInteractWithPedestrianContext::GetSize() const
CityPedestrianKrawlieInteractWithPedestrianContext::GetContextId()
NuVector<MechKrawlieWeightedContainerEntry<KRAWLIEANIM> >::Reserve(unsigned int, bool)
CityPedestrianKrawlieStuck::CityPedestrianKrawlieStuck(MechKrawlie&)
CityPedestrianKrawlieStuck::~CityPedestrianKrawlieStuck()
CityPedestrianKrawlieStuck::~CityPedestrianKrawlieStuck()
CityPedestrianKrawlieStuck::OnAdded(MechKrawlie&)
CityPedestrianKrawlieStuck::OnRemoved(MechKrawlie&)
CityPedestrianKrawlieStuck::Process(float, MechKrawlie&)
CityPedestrianKrawlieStuck::GetSize() const
CityPedestrianKrawlieStuck::GetContextId()
CityPedestrianFollowCharacterContext::CityPedestrianFollowCharacterContext(MechKrawlie&)
CityPedestrianFollowCharacterContext::~CityPedestrianFollowCharacterContext()
CityPedestrianFollowCharacterContext::~CityPedestrianFollowCharacterContext()
CityPedestrianFollowCharacterContext::OnAdded(MechKrawlie&)
CityPedestrianFollowCharacterContext::OnRemoved(MechKrawlie&)
CityPedestrianFollowCharacterContext::Process(float, MechKrawlie&)
CityPedestrianFollowCharacterContext::GetSize() const
CityPedestrianFollowCharacterContext::GetContextId()
CityKrawliePaintedAddon::CityKrawliePaintedAddon(VuVec const&, BoltTypeID)
CityKrawliePaintedAddon::~CityKrawliePaintedAddon()
CityKrawliePaintedAddon::~CityKrawliePaintedAddon()
CityKrawliePaintedAddon::OnAdded(MechKrawlie&)
CityKrawliePaintedAddon::OnRemoved(MechKrawlie&)
CityKrawliePaintedAddon::Process(MechKrawlie&, float)
CityKrawliePaintedAddon::OverrideRender(MechKrawlie&, MechKrawlieRenderInfo const&, bool&)
MechKrawlieRenderInfo::Render() const
MechKrawlieAddon::OverrideRenderMtx(MechKrawlie&, VuMtx&)
MechKrawlieAddon::SimpleHook(MechKrawlie&, MechKrawlieSimpleHook&)
MechKrawlieAddon::ParseParamItem(cParseContextItem&)
CityKrawlieRespawnAddon::CityKrawlieRespawnAddon(float, long)
CityKrawlieRespawnAddon::~CityKrawlieRespawnAddon()
CityKrawlieRespawnAddon::~CityKrawlieRespawnAddon()
CityKrawlieRespawnAddon::Process(MechKrawlie&, float)
MechKrawlieAddon::OnAdded(MechKrawlie&)
MechKrawlieAddon::OnRemoved(MechKrawlie&)
MechKrawlieAddon::OverrideRender(MechKrawlie&, MechKrawlieRenderInfo const&, bool&)
LegoCityLevelContainer::LegoCityLevelContainer(char const*, bool, LevelContainer::LevelContainerMemory, StreamingLevel*)
LegoCityLevelContainer::~LegoCityLevelContainer()
non-virtual thunk to LegoCityLevelContainer::~LegoCityLevelContainer()
LegoCityLevelContainer::~LegoCityLevelContainer()
non-virtual thunk to LegoCityLevelContainer::~LegoCityLevelContainer()
LegoCityLevelContainer::PreAnimUpdate(bool)
LegoCityLevelContainer::CameraPropertiesOverride(int&, int&, int&, NUVEC&, NUMTX&, GAMECAMERA*, NUVEC const&, bool, MechCharacter*, MechCharacter*)
LegoCityLevelContainer::OnReset()
LegoCityLevelContainer::GetExitToLevel(ExitItemIndex) const
LegoCityLevelContainer::GetContinueToLevel() const
LegoCityLevelContainer::AddFootStep(int, MechCharacter*)
LegoCityLevelContainer::PostLoadInit(cHubContainer*)
LegoCityLevelContainer::EventNotify(Event&, NuEventData&)
non-virtual thunk to LegoCityLevelContainer::EventNotify(Event&, NuEventData&)
LegoCityLevelContainer::ParseStartingClass(nufpar_s*)
LegoCityLevelContainer::ParseCharacterOverride(nufpar_s*)
LegoCityLevelContainer::GetBeforeLoadConfigKeywords() const
LegoCityLevelContainer::GetAfterLoadConfigKeywords() const
LegoCityLevelContainer::AddManagers()
LegoCityLevelContainer::GetCharacterOverride(eCharClass, unsigned int) const
LegoCityLevelContainer::GetCharacterOverrideStoryOnly(eCharClass, unsigned int) const
LegoCityLevelContainer::AddAdditionalResident(char const*, unsigned int)
LegoCityLevelContainer::AddAdditionalResidents(TempCharacterData&) const
LevelContainer::GetManager(int) const
LegoLevelContainer::IsInContainer(LevelContainer&)
LegoLevelContainer::OnActivate()
LegoLevelContainer::OnUpdate()
LegoLevelContainer::Render()
LegoLevelContainer::GetCameraRoll()
LegoLevelContainer::SetCameraRollAxis(int)
LegoLevelContainer::GetCameraRollAxis()
LegoLevelContainer::ScaleTorpedoSpecial(NUMTX&)
LegoLevelContainer::ParseConfigEntry(nufpar_s*)
LegoLevelContainer::InitPlayerPositions()
LegoLevelContainer::GetContinueToCutscene() const
non-virtual thunk to LegoLevelContainer::IsInContainer(LevelContainer&)
NuVector<APICHARACTERMODELLIST>::Reserve(unsigned int, bool)
NuList<NuMechPtr<Gizmo, -1> >::~NuList()
LegoCityTargeting::GetMaxAimTargets(MechCharacter&) const
LegoCityTargeting::ColourGizmoPaintGlow(Gizmo*)
NuMechPtr<Gizmo, -1>::~NuMechPtr()
LegoCityTargeting_DrawIcon(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoCityTargeting_GetTargetPointForIcon(Gizmo*, VuVec*)
LegoCityTargeting_AddMessage(Gizmo*, float, float, float, nuhspecial_s*, float)
LegoCityTargeting::UpdateColourGlow()
LegoCityTargeting::OnBeginTargeting(MechCharacter&, TARGETING_TYPE)
LegoCityTargeting::OnShootRequested(MechCharacter*, MechObjectData&)
LegoCityTargeting::SetNewTarget(MechCharacter*, MechObjectData&)
LegoCityTargeting::AddNewTarget(MechCharacter*, TARGET_ARRAY_DATA&)
LegoCityTargeting::TargetContext_GetCursorDrawingInfo(MechCharacter*, unsigned char*, unsigned char*, unsigned char*, float*, float*, int*)
LegoCityTargeting::TargetContext_GetTargetDrawingInfo(MechCharacter*, MechObjectData&, sTargetDrawInfo&, bool&, float&)
LegoCityTargeting::OnExitLevel(LegoLevelContainer&)
LegoCityTargeting::CleanUp()
NuList<NuMechPtr<Gizmo, -1> >::Clear()
LegoCityTargeting::~LegoCityTargeting()
LegoTargeting::UpdateTargeting(MechCharacter*)
LegoTargeting::FilterCursorUpdate(MechCharacter&, NUVEC&, NUVEC&, NUVEC&)
LegoTargeting::ShouldTargetCursorPulse(MechCharacter&) const
LegoTargeting::ShouldDrawBadTargets(MechCharacter&) const
LegoTargeting::OnDrawTarget(MechCharacter&, NuCamera const&, VuVec const&, float, unsigned char, bool)
LegoTargeting::OnEndTargeting(MechCharacter&)
LegoTargeting::SetStartingTargetPos2D(MechCharacter&, BoltType*, VuVec&)
LegoTargeting::ShouldMagnetiseCursor(MechCharacter*, TARGET_INFO*, BoltType*)
LegoTargeting::CanTargetBySpecialMove(MechCharacter&, MechCharacter&, MechCharacter&)
LegoTargeting::TargetedBySpecialMoveTargeting(MechCharacter&, MechCharacter&, MechCharacter&)
NuListFind<NuMechPtr<Gizmo, -1>, NuListNode<NuMechPtr<Gizmo, -1> > >::Remove(NuListNode<NuMechPtr<Gizmo, -1> >*, NuListNode<NuMechPtr<Gizmo, -1> >*, NuMechPtr<Gizmo, -1> const&)
SimpleBoltPaintAddOn::PaintHit(GameAnimSet*, LegoSpecial*, CharInst*, int, NuColour, NUVEC const*, float)
SimpleBoltPaintAddOn::PaintUpdate(GameAnimSet*, LegoSpecial*, CharInst*, float)
SimpleBoltPaintAddOn::ColourToTargetColour(GameAnimSet*, LegoSpecial*, VuVec*, cBoltPaintManager*)
FrameUpdateRationer::FrameUpdateRationer()
FrameUpdateRationer::~FrameUpdateRationer()
FrameUpdateRationer::FrameStart(int)
FrameUpdateRationer::RationCheck()
FrameUpdateRationer::FrameEnd()
GizSimpleProp_EvalAveragePosAndRadius(GizmoCitySimpleProp*, int)
LegoCitySimpleProps::LegoCitySimpleProps()
LegoCitySimpleProps::AllowPhysicsSlam(Gizmo&) const
non-virtual thunk to LegoCitySimpleProps::AllowPhysicsSlam(Gizmo&) const
LegoCitySimpleProps::CreateGizmoManager()
non-virtual thunk to LegoCitySimpleProps::CreateGizmoManager()
LegoCitySimpleProps::CreateHelper()
LegoCitySimpleProps::OnInit()
GizmoCitySimpleProp::GizmoCitySimpleProp(EdRegContext&)
GizmoCitySimpleProp::~GizmoCitySimpleProp()
GizmoCitySimpleProp::RemoveCollisionListener()
non-virtual thunk to GizmoCitySimpleProp::~GizmoCitySimpleProp()
non-virtual thunk to GizmoCitySimpleProp::~GizmoCitySimpleProp()
GizmoCitySimpleProp::~GizmoCitySimpleProp()
non-virtual thunk to GizmoCitySimpleProp::~GizmoCitySimpleProp()
non-virtual thunk to GizmoCitySimpleProp::~GizmoCitySimpleProp()
GizmoCitySimpleProp::GetClass() const
GizmoCitySimpleProp::ResetForLoop()
GizmoCitySimpleProp::AddCollisionListener()
GizmoCitySimpleProp::GetSpecial()
GizmoCitySimpleProp::RemovePhysics()
GizmoCitySimpleProp::GetNumOutputs()
GizmoCitySimpleProp::GetOutput(int, int)
GizmoCitySimpleProp::GetDefaultOutputIndex()
GizmoCitySimpleProp::GetOutputName(int)
GizSimpleProp_PlayForwards(GizmoCitySimpleProp*, bool, int)
GizmoCitySimpleProp::Activate(bool)
GizmoCitySimpleProp::ActivateNew(bool, bool)
GizmoCitySimpleProp::Init(WORLDINFO*)
GizmoCitySimpleProp::Reset()
GizmoCitySimpleProp::HideAnimParts(bool)
GizmoCitySimpleProp::CalculateColourTargetPos()
GizmoCitySimpleProp::SetVisibility(int)
GizmoCitySimpleProp::LoadEx(WORLDINFO*, int)
GizmoCitySimpleProp::LoadInstanceDataEx(WORLDINFO*, int)
GizmoCitySimpleProp::SaveInstanceDataEx(WORLDINFO*)
GizmoCitySimpleProp::InstanceMovedEx()
GizmoCitySimpleProp::GetBuilderOrigin(NUVEC*)
GizmoCitySimpleProp::SetGamePos(NUVEC&)
GizmoCitySimpleProp::SetGameMtx(NUMTX&)
GizmoCitySimpleProp::Blowup_sfx(bool)
GizmoCitySimpleProp::BreakAppart(WORLDINFO const*, MechCharacter*)
GizmoCitySimpleProp::SetDynamicParts()
GizmoCitySimpleProp::Blowup(WORLDINFO const*)
GizmoCitySimpleProp::Blowup(WORLDINFO const*, ApiVehicle*)
GizmoCitySimpleProp::Blowup(WORLDINFO const*, MechCharacter*)
GizmoCitySimpleProp::EmitCoins(bool)
GizmoCitySimpleProp::Blowup(WORLDINFO const*, Bolt*)
GizmoCitySimpleProp::DelayedBlowup(WORLDINFO const*, MechCharacter*)
GizmoCitySimplePropManager::AddDelayedBlowup(GizmoCitySimpleProp*, MechCharacter*)
GizmoCitySimpleProp::ShockSmash(WORLDINFO const*)
GizmoCitySimpleProp::SlamSmash(WORLDINFO const*)
GizmoCitySimpleProp::HandlePaintHit(WORLDINFO const*, Bolt*)
GizmoCitySimpleProp::CheckPaintHit(GizmoCitySimpleProp*, NuPerPixelFadePacket*)
GizmoCitySimpleProp::GetMinMax(NUVEC&, NUVEC&)
GizmoCitySimpleProp::CalcStaticMinMax()
GizmoCitySimpleProp::TurnOffSpecialCollision()
GizmoCitySimpleProp::CheckOptimisedMesh()
GizmoCitySimpleProp::CheckLOS(MechCharacter*, int)
SimpleProp_VerifyLOS(GizmoCitySimpleProp*, NUVEC const*, NUVEC const*, NUVEC const*, FirstPointCollector*, float)
GizmoCitySimplePropManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoCitySimplePropManager::DestroyGizmoEx(Gizmo*)
GizmoCitySimplePropManager::EarlyUpdate(float)
GizmoCitySimplePropManager::UpdateProximityList()
CMList<Gizmo*>::Append(Gizmo* const&, CMList<Gizmo*>::ListLink*)
GizmoCitySimplePropManager::ResetLOS()
GizmoCitySimplePropManager::LateUpdate(float)
GizmoCitySimplePropManager::Draw(float, ClassManager::eRenderingPriority)
GizmoCitySimplePropManager::BoltHitPlat(Bolt*)
GizmoCitySimplePropManager::GetBestBoltTarget(float*, NUVEC*, NUVEC*, void*, NUVEC*, NUVEC*, float, float, int, int, BoltTypeID const&, MechObjectData&)
GizmoCitySimplePropManager::BoltHit(WORLDINFO*, void*, NUVEC*, int, float, NUVEC*, NUVEC*, Bolt*, unsigned int)
SimpleProp_BreakupAndSmash(Gizmo*)
GizmoCitySimplePropManager::HitExplosion(WORLDINFO*, MechCharacter*, NUVEC*, int, float, NUVEC*, NUVEC*, Bolt*, eHITBLOWUPTYPE, unsigned char)
GizmoCitySimplePropManager::AllocateProgressData(WORLDINFO*)
GizmoCitySimplePropManager::ClearProgress(WORLDINFO*, void*)
GizmoCitySimplePropManager::StoreProgress(WORLDINFO*, void*)
GizmoCitySimplePropManager::Reset(WORLDINFO*, void*)
GizmoCitySimplePropManager::SetupObject(GizmoCitySimpleProp*)
GizmoCitySimplePropManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoCitySimpleProp::operator=(GizmoCitySimpleProp&)
GizmoCitySimplePropManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoCitySimplePropManager::PostLoad()
GizmoCitySimplePropManager::RequestSfx()
GizmoCitySimplePropManager::ReleaseSfx()
GizmoCitySimplePropManager::EventNotify(Event&, NuEventData&)
GizmoCitySimplePropManager::FindNearest(NUVEC*, GameObject*, float*, int)
GizmoCitySimplePropManager::BlowUpOpponent(MechCharacter*, float, float, float, int, unsigned long const&, unsigned long const&, unsigned long const&, BlowUp*)
GizmoCitySimplePropManager::GetClosest(MechCharacter*, float, float, float, int, unsigned long const&, unsigned long const&, unsigned long const&)
GizmoCitySimplePropManager::IsHiddenLayerCullingEnabled()
GizmoCitySimplePropManager::DoHiddenLayerCulling(int, GAMECAMERA&, int, int, int)
BoltPaintAddOn::~BoltPaintAddOn()
SimpleBoltPaintAddOn::~SimpleBoltPaintAddOn()
GizmoCitySimplePropManager::~GizmoCitySimplePropManager()
GizmoCitySimplePropManager::~GizmoCitySimplePropManager()
GizmoCitySimplePropManager::SaveVersion()
LegoCitySimpleProps::~LegoCitySimpleProps()
LegoGizmoSystemBase<LegoCitySimpleProps>::ShutDown()
LegoGizmoSystemBase<LegoCitySimpleProps>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoCitySimpleProps::CanObjUseAITrigger(GizmoCitySimpleProp*, MechCharacter*)
LegoCitySimpleProps::CanBeGrappled(GizmoCitySimpleProp*)
LegoCitySimpleProps::CanTriggerProximity(GizmoCitySimpleProp&, GameObject&)
LegoCitySimpleProps::ShouldPlayForwards(GizmoCitySimpleProp&, int)
LegoCitySimpleProps::PiecesFlickerAway()
GizmoCitySimpleProp::IsValidAsAttractor() const
GizmoCitySimpleProp::GetGameAnimSet() const
GizSimplePropHelper::~GizSimplePropHelper()
SimplePropCollisionListener::~SimplePropCollisionListener()
SimplePropCollisionListener::~SimplePropCollisionListener()
SimplePropCollisionListener::Collision(BodyPair*, Array<ContactPoint>&)
SimplePropCollisionListener::Collision(Character*, Entity*, ContactPoint&)
NuVector<SimplePropCollisionListener*>::Reserve(unsigned int, bool)
cLegoCityPhotographyManager::cLegoCityPhotographyManager(LevelContainer&)
cLegoCityPhotographyManager::~cLegoCityPhotographyManager()
cLegoCityPhotographyManager::EndPhotography()
cLegoCityPhotographyManager::~cLegoCityPhotographyManager()
cLegoCityPhotographyManager::RequestTakeNewPicture(LegoCityPhotograph*, bool)
cLegoCityPhotographyManager::IsTakingPicture()
cLegoCityPhotographyManager::StartPhotography(LegoCityPhotograph*, bool)
LegoCityPhotograph::PrepareToTake()
LegoCityPhotograph::FinishTaking()
cLegoCityPhotographyManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoCityPhotograph::GetTextureId() const
cLegoCityPhotographyManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
cLegoCityPhotographyBase::cLegoCityPhotographyBase()
cLegoCityPhotographyBase::~cLegoCityPhotographyBase()
cLegoCityPhotographyBase::~cLegoCityPhotographyBase()
cLegoCityPhotographyBase::Init()
cLegoCityPhotographyManager::RegisterProcessing()
RenderScreenQuad(NuSmartPtr<NuMtl, true>, unsigned int, VuVec&, VuVec&)
LegoCityPhotograph::LegoCityPhotograph(LevelContainer*)
LegoCityPhotograph::CreateMtl()
LegoCityPhotograph::~LegoCityPhotograph()
LegoCityPhotograph::DestroyMtl()
LegoCityPhotograph::DestroyTexture()
LegoCityPhotograph::Clear()
LegoCityPhotograph::Draw(VuVec&, VuVec&, unsigned int)
LegoCityPhotograph::ContainsImage() const
LegoCityPhotograph::IsBusy() const
LegoCityPhotograph::CreateTextureIfNeeded()
LegoCityPhotograph::UpdateMtl()
createReadableFramebufferCopy()
LegoCityPhotograph::RequestCapture(bool)
cLegoCityPhotographyHelper::~cLegoCityPhotographyHelper()
ClassManagerAccessor<cLegoCityPhotographyManager>::GetFromCreate(ILevelContainer const&)
LegoCityFX::CreateEffect(LevelContainer const&, FXTypeID const&, NUVEC const*, int, LegoFXHandle*, MechCharacter*)
LegoCityFX::Init()
LegoFX::~LegoFX()
LegoCityFX::~LegoCityFX()
LegoPointerHandleTable<FXType*, short, FXTypeID>::~LegoPointerHandleTable()
LegoPointerHandleTable<FXType*, short, FXTypeID>::~LegoPointerHandleTable()
LegoHandleTable<FXType*, short, FXTypeID>::~LegoHandleTable()
LegoHandleTable<FXType*, short, FXTypeID>::~LegoHandleTable()
LegoCityPaintings::GetFlashImpostor()
LegoCityPaintings::OnInit()
LegoCityPaintings::ShutDown()
LegoCityPaintings::CreateGizmoManager()
non-virtual thunk to LegoCityPaintings::CreateGizmoManager()
LegoCityPaintings::OnExitLevel(LegoLevelContainer&)
CityGizmoPainting::CityGizmoPainting()
CityGizmoPainting::RenderToTexture()
CityGizmoPainting::LoadEx(WORLDINFO*, int)
CityGizmoPainting::RenderImpostor(float)
CityGizmoPainting::ActivateLevel()
CityGizmoPainting::AddFlashSceneTarget(unsigned int)
CityGizmoPainting::DeactivateLevel()
CityGizmoPainting::RemoveFlashSceneTarget()
CityGizmoPainting::Release()
CityGizmoPainting::SetFlashTargetType(unsigned int)
CityGizmoPainting::EventNotify(Event&, NuEventData&)
CityGizmoPainting::CreateImpostor()
CityGizmoPainting::DestroyImpostor(NuImpostor*)
LegoCityPaintings::~LegoCityPaintings()
LegoGizmoSystemBase<LegoPaintings>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoPaintings::OnActivateLevelPainting(GizmoPainting&)
LegoPaintings::OnDeactivateLevelPainting(GizmoPainting&)
LegoPaintings::AdjustCamera(GizmoPainting const&, NuCamera&)
LegoPaintings::GetCutScenePassMaterial(GizmoPainting const&, int)
CityGizmoPainting::~CityGizmoPainting()
Gizmo::Reset()
Gizmo::GetNumOutputs()
Gizmo::GetOutput(int, int)
Gizmo::GetOutputName(int)
GizmoPainting::GetPos()
non-virtual thunk to CityGizmoPainting::~CityGizmoPainting()
non-virtual thunk to CityGizmoPainting::~CityGizmoPainting()
CityGizmoPaintingManager::~CityGizmoPaintingManager()
GizmoPaintingManager::SaveVersion()
CityGizmoPaintingManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
ConversationLocatorIconAddOn::ConversationLocatorIconAddOn(AIConvexLocator*)
ConversationLocatorIconAddOn::~ConversationLocatorIconAddOn()
non-virtual thunk to ConversationLocatorIconAddOn::~ConversationLocatorIconAddOn()
ConversationLocatorIconAddOn::~ConversationLocatorIconAddOn()
non-virtual thunk to ConversationLocatorIconAddOn::~ConversationLocatorIconAddOn()
ConversationLocatorIconAddOn::OnAdded()
ConversationLocatorIconAddOn::OnRemoved()
ConversationLocatorIconAddOn::EndIcon()
ConversationLocatorIconAddOn::IsShowingIcon()
ConversationLocatorIconAddOn::ShowIcon()
ConversationLocatorIconAddOn::GetLocator()
ConversationLocatorIconAddOn::GetForLocator(LevelContainer*, AIConvexLocator*, bool)
ConversationLocatorIconAddOn::StartShrugIcon(AIConvexLocator*)
ConversationLocatorIconAddOn::ForceStopShrugIcon(AIConvexLocator*)
ConversationLocatorIconAddOn::OnHook(unsigned char, HookArgs*)
ConversationLocatorIconAddOn::Process(float)
non-virtual thunk to ConversationLocatorIconAddOn::OnHook(unsigned char, HookArgs*)
ConversationLocatorIconAddOn::UpdateIcon()
ConversationLocatorIconAddOn::UpdateIconPriority()
ConversationLocatorIconAddOn::Singleton()
FacialAnimPreserverAddOn::State::State()
FacialAnimPreserverAddOn::State::IsValid() const
FacialAnimPreserverAddOn::State::Clear()
FacialAnimPreserverAddOn::GetFaceFromCharInst(CharInst*)
FacialAnimPreserverAddOn::IsValidStateToPreserve(CharAnimState*)
FacialAnimPreserverAddOn::FacialAnimPreserverAddOn()
FacialAnimPreserverAddOn::~FacialAnimPreserverAddOn()
non-virtual thunk to FacialAnimPreserverAddOn::~FacialAnimPreserverAddOn()
non-virtual thunk to FacialAnimPreserverAddOn::~FacialAnimPreserverAddOn()
FacialAnimPreserverAddOn::~FacialAnimPreserverAddOn()
non-virtual thunk to FacialAnimPreserverAddOn::~FacialAnimPreserverAddOn()
non-virtual thunk to FacialAnimPreserverAddOn::~FacialAnimPreserverAddOn()
FacialAnimPreserverAddOn::OnAdded()
FacialAnimPreserverAddOn::OnRemoved()
FacialAnimPreserverAddOn::OnHook(unsigned char, HookArgs*)
FacialAnimPreserverAddOn::ClearState()
non-virtual thunk to FacialAnimPreserverAddOn::OnHook(unsigned char, HookArgs*)
FacialAnimPreserverAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
FacialAnimPreserverAddOn::EventNotify(Event&, NuEventData&)
FacialAnimPreserverAddOn::SaveState()
FacialAnimPreserverAddOn::RestoreState()
non-virtual thunk to FacialAnimPreserverAddOn::EventNotify(Event&, NuEventData&)
FacialAnimPreserverAddOn::IsInContainer(LevelContainer&)
non-virtual thunk to FacialAnimPreserverAddOn::IsInContainer(LevelContainer&)
FacialAnimPreserverAddOn::AddTo(MechCharacter*)
LC_Conversations::CONVERSATION::CONVERSATION()
LC_Conversations::CONVERSATION::~CONVERSATION()
LC_Conversations::CONVERSATION::Play(int, int)
LC_Conversations::CONVERSATION::GetNumLines() const
LC_Conversations::CONVERSATION::SetState(LC_ConversationsState)
LC_Conversations::CONVERSATION::PlayAmbient(VuVec&, bool)
LC_Conversations::CONVERSATION::Stop(LC_Conversations::CONVERSATION_MANIFEST*)
LC_Conversations::CONVERSATION::ForceEndShrugIcon(LC_Conversations::CONVERSATION_MANIFEST*)
LC_Conversations::CONVERSATION_MANIFEST::HasAnims() const
LC_Conversations::CONVERSATION::ClearFacialAnimation(LC_Conversations::CONVERSATION_MANIFEST*)
LC_Conversations::CONVERSATION::GetLine(int) const
LC_Conversations::CONVERSATION::FlushConversationRequest(LC_Conversations::CONVERSATION_DATA const*)
LC_Conversations::CONVERSATION::IsPlaying() const
LC_Conversations::CONVERSATION::GetState()
LC_Conversations::CONVERSATION::SetVolume(float)
LC_Conversations::CONVERSATION::IsAmbient() const
LC_Conversations::CONVERSATION::IsLOUD() const
LC_Conversations::CONVERSATION::GetVolume() const
LC_Conversations::CONVERSATION::GetCurrentCharacter() const
LC_Conversations::CONVERSATION::GetCurrentLocator(LC_Conversations::CONVERSATION_MANIFEST*) const
LC_Conversations::CONVERSATION_MANIFEST::GetVoiceFromIndex(int)
LC_Conversations::CONVERSATION::GetName() const
LC_Conversations::CONVERSATION::GetCurrentLine() const
LC_Conversations::CONVERSATION::GetCurrentLineIndex() const
LC_Conversations::CONVERSATION::PlayConversationAnimation(bool, LC_Conversations::CONVERSATION_VOICE*)
LC_Conversations::CONVERSATION::Update()
LC_Conversations::CONVERSATION::UpdatePrevLineAnimPlayback(LevelContainer*, LC_Conversations::CONVERSATION_MANIFEST*)
LC_Conversations::CONVERSATION::ClearFacialAnimationForLine(LC_Conversations::CONVERSATION_MANIFEST*, LC_Conversations::CONVERSATION_DATA*)
LC_Conversations::CONVERSATION::UpdatePlayback(LevelContainer*, LC_Conversations::CONVERSATION_MANIFEST*)
LC_Conversations::CONVERSATION_MANIFEST::IsForcedDRC() const
LC_Conversations::CONVERSATION::PlayFacialAnimation(LC_Conversations::CONVERSATION_VOICE*, LC_Conversations::CONVERSATION_MANIFEST*)
LC_Conversations::GetPlayStatus()
ConversationPlayStatus::Acknowledge(LC_Conversations::CONVERSATION_MANIFEST*, LC_Conversations::CONVERSATION*)
LC_Conversations::CONVERSATION_MANIFEST::CONVERSATION_MANIFEST()
LC_Conversations::CONVERSATION_MANIFEST::~CONVERSATION_MANIFEST()
LC_Conversations::CONVERSATION_MANIFEST::FindConversation(char const*) const
LC_Conversations::CONVERSATION_MANIFEST::GetConversation(int) const
LC_Conversations::CONVERSATION_MANIFEST::GetNumConversations() const
LC_Conversations::CONVERSATION_MANIFEST::IsLoading() const
LC_Conversations::CONVERSATION_MANIFEST::IsLoaded() const
LC_Conversations::CONVERSATION_MANIFEST::IncrementLoadCount()
LC_Conversations::CONVERSATION_MANIFEST::SetFlag(int, bool)
LC_Conversations::CONVERSATION_MANIFEST::HasCharacterAsVoice(MechCharacter*) const
LC_Conversations::CONVERSATION_MANIFEST::FindAnimEntry(char const*)
LC_Conversations::LC_Conversations()
CSListHeader<LC_Conversations::CONVERSATION_MANIFEST>::Clear()
LC_Conversations::~LC_Conversations()
LC_Conversations::~LC_Conversations()
LC_Conversations::Init()
LC_Conversations::FindManifest(char const*)
LC_Conversations::FindManifestWithSpecificAnimLoadedness(char const*, bool)
LC_Conversations::PlayAmbientSpeech(VuVec&, bool)
LC_Conversations::IsCity(StreamingLevel*)
LC_Conversations::UnLoadConversationManifest(LC_Conversations::CONVERSATION_MANIFEST*)
LC_Conversations::LoadConversationManifest(LevelContainer const*, char const*, bool)
LC_Conversations::DoLoadAmbientBinaryData(void*)
LC_Conversations::PlayHerpDerpSpeech(MechKrawlie&, LC_ConversationsHerpDerpType)
LC_Conversations::PlayZombieSpeech(MechKrawlie&)
LC_Conversations::PlayScreamSpeech(MechKrawlie&)
LC_Conversations::PlayTerrorSpeech(MechKrawlie&)
LC_Conversations::FindConversation(char const*, char const*)
LC_Conversations::CONVERSATION_MANIFEST::Hack_GetLocalRequestId() const
LC_Conversations::DoLoadConversationManifest(void*)
LC_Conversations::DoLoadConversationBinaryData(void*)
LC_Conversations::HasManifestAlreadybeenAdded(char const*)
LC_Conversations::AddCharacterToManifest(char const*, int, ApiCharacter*)
LC_Conversations::GetVoiceFromIndex(LC_Conversations::CONVERSATION_MANIFEST*, int)
LC_Conversations::RemoveCharacterFromManifest(char const*, int)
CSListHeader<LC_Conversations::CONVERSATION_VOICE>::Delete(LC_Conversations::CONVERSATION_VOICE*)
LC_Conversations::AddDRCCharacterToManifest(char const*, int, ApiCharacter*)
LC_Conversations::AddLocatorToManifest(char const*, int, AIConvexLocator*)
LC_Conversations::RemoveLocatorFromManifest(char const*, int)
LC_Conversations::PlayConversation(char const*, bool)
LC_Conversations::LoadConversationPacFile(SpeechPack*)
LC_Conversations::UnLoadConversationManifest(char const*, bool)
LC_Conversations::ForceUnloadManifest(LC_Conversations::CONVERSATION_MANIFEST*, bool)
CSListHeader<LC_Conversations::CONVERSATION_VOICE>::Clear()
LC_Conversations::AbortUnprocessedManifestRequests(LevelContainer*)
LC_Conversations::Hack_GetRequestId(StreamingLevel*)
LC_Conversations::AbortUnprocessedManifest(LC_Conversations::CONVERSATION_MANIFEST*)
LC_Conversations::OnEnterLevel(LegoLevelContainer&)
LC_Conversations::OnExitLevel(LegoLevelContainer&)
LC_Conversations::EventNotify(Event&, NuEventData&)
LC_Conversations::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LC_Conversations::Render2D()
LC_Conversations::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ConversationPlayStatus::Reset()
LC_Conversations::UpdateSubtitleRequests(float)
LC_Conversations::ProcessActiveManifest(LC_Conversations::CONVERSATION_MANIFEST*)
LC_Conversations::GetSubtitleLineCount()
LC_Conversations::CreateSubtitleRequest(LC_Conversations::CONVERSATION_DATA const&, LC_ConversationsPriority, float)
LC_Conversations::CONVERSATION::GetSubtitleAlpha()
LC_Conversations::GetSubtitleAlpha()
LC_Conversations::GetSubtitleConversationData()
LC_Conversations::CONVERSATION::SetSubtitleAlphaFromProximity(float)
LC_Conversations::FlushConversationRequest(LC_Conversations::CONVERSATION_DATA const*)
LC_Conversations::UpdateSubtitleAlpha(float)
LC_Conversations::SetConversationDuckingScale(char const*, float)
LC_Conversations::SetBKConversationFallOff(char const*, int, float, float)
LC_Conversations::ConversationIsSamplePlaying(char const*)
LC_Conversations::ConversationManifestPAKIsLoaded(char const*)
LC_Conversations::ConversationsInAManifest(char const*)
LC_Conversations::StopConversation(char const*)
LC_Conversations::GetConversationLineInSeconds(char const*, int)
LC_Conversations::GetConversationLengthInSeconds(char const*)
LC_Conversations::GetConversationLineCount(char const*)
LC_Conversations::IsConversationLineFinished(char const*, int)
LC_Conversations::HasConversationLineStarted(char const*, int)
LC_Conversations::HasConversationManifestLoaded(char const*)
LC_Conversations::ToggleSpeechBubble(bool)
LC_Conversations::FaceConversationTarget(MechCharacter*, char const*, int)
LC_Conversations::IsCurrentConversationFaceAnimSet(CharAnimSet const*)
LC_Conversations::GetCharacterFaceToAnimate(LC_Conversations::CONVERSATION_VOICE*, LC_Conversations::CONVERSATION*)
ConversationObject::ConversationObject()
ConversationObject::~ConversationObject()
ConversationObject::Clear()
ConversationObject::ClearNames()
ConversationObject::SetDRC(bool)
ConversationObject::SetSourceNames(char const*, char const*, bool)
ConversationObject::Release()
ConversationObject::GetManifestName() const
ConversationObject::GetConversationName() const
ConversationObject::Request(LevelContainer*)
ConversationObject::HasBeenRequested() const
ConversationObject::ProcessRequestState()
ConversationObject::Update()
ConversationObject::Invalidate()
ConversationObject::SetVolume(float)
ConversationObject::SetSubtitleAlphaFromProximity(float)
ConversationObject::GetVolume() const
ConversationObject::Play()
ConversationObject::Stop()
ConversationObject::IsPlaying() const
ConversationObject::ResetPlayCount()
ConversationObject::IsLoaded() const
ConversationObject::IsInvalid() const
ConversationObject::WaitingToLoad() const
ConversationObject::GetPlayCount() const
ConversationObject::IncrementPlayCount()
ConversationObject::SetSourceToSameAs(ConversationObject const&, bool)
ConversationObject::AcquireConversation()
LC_Conversations::GetMatchedConversationIndex(MechKrawlie&)
LegoCity_GetConversationDisplay()
ConversationPlayStatus::IsActive() const
LegoCity_ToggleConversationDisplay()
ConversationPlayStatus::SetActive(bool)
ConversationPlayStatus::ConversationPlayStatus()
ConversationPlayStatus::~ConversationPlayStatus()
ConversationPlayStatus::DrawLine(ConversationPlayStatus::PlayingInfo*, float)
ConversationPlayStatus::Render()
LC_Conversations::RenderSubtitleRequests()
LC_Conversations::SwapCharactersInBuffer(char*, int, unsigned short, unsigned short)
LC_ConversationsHelper::~LC_ConversationsHelper()
SVarSpeechData::SVarSpeechData()
NuSoundWeakPtr<NuSoundVoice>::~NuSoundWeakPtr()
NuSoundWeakPtr<NuSoundVoice>::~NuSoundWeakPtr()
NuSoundWeakPtr<NuSoundVoice>::Clear()
ClassManagerAccessor<AddOnsManager>::GetFromCreate(ILevelContainer const&)
SVarSpeechData::~SVarSpeechData()
SoundEventDataDuck::~SoundEventDataDuck()
SoundEventData::~SoundEventData()
SoundEventDataDuck::~SoundEventDataDuck()
LegoCityMechToggling::LegoCityMechToggling()
LegoCityMechToggling::OnInitPostConfig()
LegoCityMechToggling::ResetCanToggle()
LegoCityMechToggling::GetNextToggleCharacter(MechCharacter&, MechToggling::ToggleDirection, MechToggling::ToggleInfo const&)
LegoCityMechToggling::GetNextCharClass(eCharClass, MechToggling::ToggleDirection) const
LegoCityMechToggling::CanToggleCharacter(MechCharacter&, CHARACTERDATA*, int, MechToggling::ToggleDirection, MechToggling::ToggleInfo const&)
LegoCityMechToggling::AllowCharGrid(MechCharacter&)
LegoCityMechToggling::AllowPrevNextToggle(MechCharacter&)
LegoCityMechToggling::ForceToggleIfSameModel(MechCharacter&)
LegoCityMechToggling::~LegoCityMechToggling()
MechSystemBase<MechToggling, int>::Suppress(int)
MechSystemBase<MechToggling, int>::IsSuppressed(int) const
DistrictGridPos::DistrictGridPos()
DistrictGridPos::DistrictGridPos(unsigned char, unsigned char)
DistrictGridPos::operator==(DistrictGridPos const&) const
CityDistrict::CityDistrict()
LegoCityDistrictSystem::LegoCityDistrictSystem()
LegoCityDistrictSystem::~LegoCityDistrictSystem()
LegoCityDistrictSystem::~LegoCityDistrictSystem()
LegoCityDistrictSystem::Init()
CityDistrictLoader::LoadFromFile(char const*)
CityDistrictGroupLoader::LoadFromFile(char const*)
LegoCityDistrictSystem::ShutDown()
CityDistrictLoader::Unload()
CityDistrictGroupLoader::Unload()
LegoCityDistrictSystem::OnEnterLevel(LegoLevelContainer&)
LegoCityDistrictManager::InitForLevel()
LegoCityDistrictSystem::OnExitLevel(LegoLevelContainer&)
LegoCityDistrictManager::Reset()
LegoCityDistrictSystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoCityDistrictSystem::DebugRender(UIMap const&)
LegoCityDistrictSystem::GetDistrictIDFromFileName(NuDynamicStringT<false> const&)
LegoCityDistrictSystem::GetDistrictIDFromName(NuDynamicStringT<false> const&)
LegoCityDistrictSystem::GetDistrictIDFromName(char const*)
LegoCityDistrictSystem::GetDistrictIDFromHashedName(HashedKey const&)
LegoCityDistrictSystem::GetDistrictNameFromID(eDistrictID) const
LegoCityDistrictSystem::GetDistrictFromID(eDistrictID) const
LegoCityDistrictSystem::GetDistrictFromLevel(StreamingLevel&) const
LegoCityDistrictSystem::GetDistrictFromGridPos(DistrictGridPos const&) const
LegoCityDistrictSystem::GetUnlockIDFromDistrictID(eDistrictID) const
LegoCityDistrictSystem::UnlockDistrictGroup(char const*)
LegoCityDistrictSystem::UnlockDistrictGroup(HashedKey const&)
CityDistrictGroupLoader::FindNamedGroup(HashedKey const&)
LegoCityDistrictSystem::IsDistrictGroupUnlocked(HashedKey const&)
LegoCityDistrictSystem::IsDistrictGroupUnlocked(CityDistrictGroup const&)
LegoCityDistrictSystem::AddManagersForLevel(LegoLevelContainer&)
LegoCityDistrictManager::RegisterProcessing()
LegoCityDistrictSystem::RemoveManagersForLevel(LegoLevelContainer&)
LegoCityDistrictSystem::GetDistrictFromID_Internal(eDistrictID)
LegoCityDistrictSystem::FindUnlockIDForDistrictID(eDistrictID)
LegoCityDistrictSystem::CreateLevelDistrictList(StreamingLevel&)
LegoCityDistrictSystem::CreateDistrictFromStreamingLevel(StreamingLevel&, eDistrictID)
LegoCityDistrictSystem::CreateUnassignedDistrict(CityDistrict&)
LegoCityDistrictSystem::DestroyLevelDistrictList()
LegoCityDistrictManager::LegoCityDistrictManager()
LegoCityDistrictManager::~LegoCityDistrictManager()
LegoCityDistrictManager::~LegoCityDistrictManager()
LegoCityDistrictManager::SetPlayerToTrack(int)
LegoCityDistrictManager::GetTrackedPlayer()
LegoCityDistrictManager::GetCurrentPlayerDistrict()
LegoCityDistrictManager::UpdatePlayerDistrict()
LegoCityDistrictManager::GetCurrentPlayerDistrictID()
LegoCityDistrictManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CityDistrictLoader_ParserConfig::GetConfigkeywords()
CityDistrictLoader_ParserConfig::PK_StartDistrict(nufpar_s*)
NuDynamicStringT<false>::operator=(char const*)
CityDistrictLoader_ParserConfig::PK_DisplayName(nufpar_s*)
CityDistrictLoader_ParserConfig::PK_GridPos(nufpar_s*)
CityDistrictLoader_ParserConfig::PK_EndDistrict(nufpar_s*)
CityDistrictGroupLoader_ParserConfig::GetConfigkeywords()
CityDistrictGroupLoader_ParserConfig::PK_StartDistrictGroup(nufpar_s*)
CityDistrictGroupLoader_ParserConfig::PK_Add_District(nufpar_s*)
CityDistrictGroupLoader_ParserConfig::PK_EndDistrictGroup(nufpar_s*)
SAction_IsDistrictGroupUnlocked::Exec(ScriptContext&)
SAction_UnlockDistrictGroup::Exec(ScriptContext&)
SAction_IsDistrictGroupUnlocked::~SAction_IsDistrictGroupUnlocked()
SAction_IsDistrictGroupUnlocked::GetName() const
SAction_IsDistrictGroupUnlocked::GetInputs(SCmdParams&) const
SAction_IsDistrictGroupUnlocked::GetOutputs(SCmdParams&) const
SAction_UnlockDistrictGroup::~SAction_UnlockDistrictGroup()
SAction_UnlockDistrictGroup::GetName() const
SAction_UnlockDistrictGroup::GetInputs(SCmdParams&) const
SAction_UnlockDistrictGroup::GetOutputs(SCmdParams&) const
LegoCityDistrictHelper::~LegoCityDistrictHelper()
StreamingLevelList::StreamingLevelIteratorBase::Advance()
LegoCityLoadScreen::LegoCityLoadScreen(LegoLevelContainer&)
LegoCityLoadScreen::~LegoCityLoadScreen()
LegoCityLoadScreen::~LegoCityLoadScreen()
LegoCityLoadScreen::CanUseHintsAddOn()
LegoCityLoadScreen::IsAProperLoadingScreen(StreamingLevel*)
LegoCityLoadScreen::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoCityLoadScreen::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoCityLoadScreen::LoadScreenText::RenderText()
LegoCityLoadScreen::SetLevelScreen(LegoCityLoadScreen::eLoadScreen_Demo)
LegoCityLoadScreen::SetCurrentScreen(LegoCityLoadScreen::eLoadScreen_Demo)
LegoCityLoadScreen::RenderLoadTimer(float)
LegoCityLoadScreens::GetScreenMtl(LegoCityLoadScreen::eLoadScreen_Demo)
LegoCityLoadScreen::RenderScreen(LegoCityLoadScreen::eScreenImage, float)
LegoCityLoadScreens::GetScreenMtl(LegoCityLoadScreen::eScreenImage)
LegoCityLoadScreen::RenderScreen(LegoCityLoadScreen::eLoadScreen_Demo, float)
LegoCityLoadScreen::Activate()
LegoCityLoadScreen::LoadScreenText::SetTextForLoadScreen(LegoCityLoadScreen&)
LegoCityLoadScreens::SetPDAToLoadState(bool)
LegoCityLoadScreen::Deactivate()
LegoCityLoadScreens::DeactivatePDALoadState()
LegoCityLoadScreen::SetScreenFadeTime(float)
LegoCityLoadScreen::SetScreenChangeTimeMax(float)
AreaLoadTimeParser::GetConfigkeywords()
AreaLoadTimeParser::Parse_AREALOADTIME_BEGIN(nufpar_s*)
AreaLoadTimeParser::Parse_AreaName(nufpar_s*)
AreaLoadTimeParser::Parse_LoadTime(nufpar_s*)
AreaLoadTimeParser::Parse_AREALOADTIME_END(nufpar_s*)
AreaLoadTimeParser::ParseFile(AreaLoadTimeManager&, char const*)
AreaLoadTimeManager::AreaLoadTimeManager()
AreaLoadTimeManager::LoadFromFile(char const*)
AreaLoadTimeManager::FindLoadTimeForArea(char const*) const
LegoCityLoadScreens::LegoCityLoadScreens()
LegoCityLoadScreens::~LegoCityLoadScreens()
LegoCityLoadScreens::FreeTextures()
LegoCityLoadScreens::~LegoCityLoadScreens()
LegoCityLoadScreens::Init()
LegoCityLoadScreens::OnInitPostConfig()
LegoCityLoadScreens::LoadTextures()
LegoCityLoadScreens::InitLoadingTextStrings()
LegoCityLoadScreens::ShutDown()
LegoCityLoadScreens::GetLoadingText()
LegoCityLoadScreens::GetDestinationLoadTime() const
LegoCityLoadScreens::GetAreaLoadTimes() const
LegoCityLoadScreens::AcquireJobValues()
LegoCityLoadScreens::OverrideCityLoadScreen(OverrideAreaLoadingScreenEventData&) const
LegoCityLoadScreens::GetJobFlowInfo(int&, int&, int&) const
LegoCityLoadScreens::SetEndingScreen(bool)
LegoCityLoadScreens::IsInEndingScreenMode()
LegoCityLoadScreens::CreateLegoLoadScreen(LegoLevelContainer&)
NuFixedStringT<(unsigned short)64>::Format(char const*, ...)
LegoCityLoadScreens::EventNotify(Event&, NuEventData&)
LegoCityLoadScreen::LoadScreenText::LoadScreenText()
NuGetTitleTextFromFileName(char const*)
LegoLoadScreen::GetManagerName() const
LegoCityLoadScreens::ShouldShowDefaultLoadingScreenIfLevelLoaded(StreamingLevel const&) const
LegoCityCustomisers::InitializeMenuItems()
LegoCityCustomisers::Customiser_MapMaterialIdToSaveSlot(int)
LegoCityCustomisers::OnActivateLevel(WORLDINFO&)
LegoCityCustomisers::CreateGameObjects(WORLDINFO&, bool)
LegoCityCustomisers::ShouldAllowMaterialIntoPool(CHARACTERDATA const&, SuperCharMtlId) const
LegoCityCustomisers::GetDefaultCharacterAction(MechCharacter const&) const
LegoCityCustomisers::CanEnterCustomiserMenu(MechCharacter&)
LegoCityCustomisers::OnEnterCustomiserMenu(MechCharacter&)
LegoCityCustomisers::OnExitCustomiserMenu(MechCharacter&)
LegoCityCustomisers::OnUpdateCustomiserAction(MechCharacter&)
LegoCityCustomisers::CalculateGetBlendOutFrame(MechCharacter&, int)
LegoCityCustomisers::OnUpdateCharacterMenuAction(MechCharacter&)
LegoCityCustomisers::GetAttachmentShortName(char const*, SuperCharObjId)
LegoCityCustomisers::GetAttachmentFolderPath(SuperCharObjId)
LegoCityCustomisers::GetAttachmentTypeForObjectId(SuperCharObjId)
LegoCityCustomisers::NotifyLeaveCustomiserMenu(MechCharacter const*, int, int, int)
LegoCityCustomisers::NotifyEnterCustomiserMenu(MechCharacter const*, int, int, int)
LegoCityCustomisers::CanMoveToNextMenuItem(CustomiserInput, CustomiserMenuItemType, float)
LegoCityCustomisers::ShouldHoldDefaultItem()
LegoCityCustomisers::DoTag(MechCharacterBaseInterface&, MechCharacterBaseInterface&)
LegoCityCustomisers::OnEnterCustomiser(MechCharacter&)
LegoCityCustomisers::OnExitCustomiser(MechCharacter&)
LegoCityCustomisers::GetCharacterNameText(MechCharacter&, char*)
LegoCityCustomisers::IsCustomiserActive()
LegoCustomisers::~LegoCustomisers()
LegoCityCustomisers::~LegoCityCustomisers()
LegoCustomisers::ShouldAutoActivate() const
LegoCustomisers::CreateCustomiserManager(WORLDINFO&)
LegoCustomisers::GetDefaultHeadLayerId(CharDef const&) const
LegoCustomisers::GetSpecialFaceLayerId(CharDef const&) const
LegoCustomisers::ShouldAllowAttachmentIntoPool(CHARACTERDATA const&, SuperCharObjId) const
LegoCustomisers::OnDestroyGameObject(MechCharacter&)
CitySideMissions::MissionData::MissionData()
CitySideMissions::MissionData::~MissionData()
CitySideMissions::MissionData::GetNameID() const
CitySideMissions::MissionData::GetProperties() const
CitySideMissions::MissionData::ApplyDataTo(CitySideMissions::StartScreen&, CitySideMissions::UIDataManager const&) const
CitySideMissions::UIDataManager::GetTextureFromNameID(HashedKey const&) const
CitySideMissions::MissionData::ApplyDataTo(CitySideMissions::ExitScreen&) const
CitySideMissions::MissionData::GetTypeFromName(char const*)
CitySideMissions::MissionData::GetRewardTypeFromName(char const*)
CitySideMissions::MissionData::GetRewardIDFromName(char const*)
CitySideMissions::MissionData::IsCompleted() const
CitySideMissions::UIDataManager::UIDataManager()
CitySideMissions::UIDataManager::~UIDataManager()
CitySideMissions::UIDataManager::ReleaseAll()
CitySideMissions::UIDataManager::LoadAll()
CitySideMissions::UIDataManager::GetTextureFromMissionType(CitySideMissions::eType) const
CitySideMissions::UIDataManager::GetTextureFromIconType(CitySideMissions::UIDataManager::eIconType) const
CitySideMissions::MissionDataManager::Parser::GetConfigkeywords()
CitySideMissions::MissionDataManager::Parser::Parse_START_SIDE_MISSION(nufpar_s*)
CitySideMissions::MissionDataManager::Parser::Parse_Name(nufpar_s*)
CitySideMissions::MissionDataManager::Parser::Parse_Type(nufpar_s*)
CitySideMissions::MissionDataManager::Parser::Parse_Title(nufpar_s*)
CitySideMissions::MissionDataManager::Parser::Parse_Description(nufpar_s*)
CitySideMissions::MissionDataManager::Parser::Parse_Icon(nufpar_s*)
CitySideMissions::MissionDataManager::Parser::Parse_Reward(nufpar_s*)
CitySideMissions::MissionDataManager::Parser::Parse_RewardID(nufpar_s*)
CitySideMissions::MissionDataManager::Parser::Parse_CompletionJobValue(nufpar_s*)
CitySideMissions::MissionDataManager::Parser::Parse_END_SIDE_MISSION(nufpar_s*)
CitySideMissions::MissionDataManager::Parser::LoadDataFromFile(char const*)
CitySideMissions::MissionDataManager::MissionDataManager()
CitySideMissions::MissionDataManager::~MissionDataManager()
CitySideMissions::MissionDataManager::LoadFromFile(char const*)
CitySideMissions::MissionDataManager::FindMissionWithNameID(HashedKey const&, char const*) const
CitySideMissions::MissionDataManager::GetMissionWithIndexID(unsigned int) const
CitySideMissions::MissionDataManager::GetMissionCommonData() const
CitySideMissions::MissionDataManager::ApplyCommonDataTo(CitySideMissions::StartScreen&) const
CitySideMissions::MissionDataManager::ApplyCommonDataTo(CitySideMissions::ExitScreen&, bool) const
CitySideMissions::MissionDataManager::GetTotalCountForType(CitySideMissions::eType) const
CitySideMissions::MissionDataManager::GetTotalCount() const
CitySideMissions::MissionDataManager::GetCompletionCountForType(CitySideMissions::eType) const
CitySideMissions::MissionDataManager::GetCompletionCountTotal() const
CitySideMissions::MissionDataManager::GetCompletionScoreForType(CitySideMissions::eType, Score&) const
CitySideMissions::MissionDataManager::GetCompletionScoreTotal(Score&) const
CitySideMissionsPlayerManager::CitySideMissionsPlayerManager(CitySideMissionsManager&, int)
CitySideMissionsPlayerManager::~CitySideMissionsPlayerManager()
CitySideMissionsPlayerManager::~CitySideMissionsPlayerManager()
CitySideMissionsPlayerManager::EventNotify(Event&, NuEventData&)
LegoCitySideMissions::GetUIDataManager() const
CitySideMissionsPlayerManager::OnEnterLevel(LegoLevelContainer&)
CitySideMissionsPlayerManager::OnExitLevel(LegoLevelContainer&)
CitySideMissionsPlayerManager::OnProcess()
CitySideMissionsPlayerManager::RequestGamePause()
CitySideMissionsPlayerManager::NotifyExitByMenu(bool, CitySideMissionsPlayerManager::eScreenExitMode)
CitySideMissionsPlayerManager::Hide(CitySideMissionsPlayerManager::eUIComponent)
CitySideMissionsPlayerManager::Show(CitySideMissionsPlayerManager::eUIComponent)
CitySideMissionsPlayerManager::StartSideMission(char const*, bool)
CitySideMissionsPlayerManager::StartSideMission(HashedKey const&, char const*, bool)
CitySideMissionsPlayerManager::CompleteCurrentSideMission()
CitySideMissionsPlayerManager::ShowCompleteScreens(CitySideMissions::MissionData const*)
CitySideMissionsPlayerManager::NotifySideMissionEnded()
CitySideMissionsPlayerManager::ExitCurrentSideMission()
CitySideMissionsManager::CitySideMissionsManager(CitySideMissions::MissionDataManager const&)
CitySideMissionsManager::~CitySideMissionsManager()
CitySideMissionsManager::~CitySideMissionsManager()
CitySideMissionsManager::RegisterProcessing()
CitySideMissionsManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CitySideMissionsManager::EventNotify(Event&, NuEventData&)
CitySideMissionsManager::OnEnterLevel(LegoLevelContainer&)
CitySideMissionsManager::OnExitLevel(LegoLevelContainer&)
LegoCitySideMissions::LegoCitySideMissions()
LegoCitySideMissions::~LegoCitySideMissions()
LegoCitySideMissions::~LegoCitySideMissions()
LegoCitySideMissions::Init()
LegoCitySideMissions::OnInitPostConfig()
LegoCitySideMissions::ShutDown()
LegoCitySideMissions::OnEnterLevel(LegoLevelContainer&)
LegoCitySideMissions::OnExitLevel(LegoLevelContainer&)
LegoCitySideMissions::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoCitySideMissions::GetMissionDataManager() const
LegoCitySideMissions::AddManagersForLevel(LegoLevelContainer&)
LegoCitySideMissions::RemoveManagersForLevel(LegoLevelContainer&)
LegoCitySideMissions::IsSideMissionActive(int)
SAction_SideMissions_IsActive::Exec(ScriptContext&)
SAction_SideMissions_SetCurrent::Exec(ScriptContext&)
SAction_SideMissions_ExitCurrent::Exec(ScriptContext&)
SAction_SideMissions_CompleteCurrent::Exec(ScriptContext&)
SAction_SideMissions_ShowCountDownText::Exec(ScriptContext&)
SAction_SideMissions_ShowStartScreen::Exec(ScriptContext&)
SAction_SideMissions_ShowExitScreen::Exec(ScriptContext&)
SAction_SideMissions_ShowAbortScreen::Exec(ScriptContext&)
SideMissionMenuQuitScriptEvent::Fire(NuEventData const&)
SideMissionMenuRetryScriptEvent::Fire(NuEventData const&)
SideMissionMenuStartScriptEvent::Fire(NuEventData const&)
SideMissionMenuQuitScriptEvent::~SideMissionMenuQuitScriptEvent()
SideMissionMenuRetryScriptEvent::~SideMissionMenuRetryScriptEvent()
SideMissionMenuStartScriptEvent::~SideMissionMenuStartScriptEvent()
SAction_SideMissions_IsActive::~SAction_SideMissions_IsActive()
SAction_SideMissions_IsActive::GetName() const
SAction_SideMissions_IsActive::GetInputs(SCmdParams&) const
SAction_SideMissions_IsActive::GetOutputs(SCmdParams&) const
SAction_SideMissions_SetCurrent::~SAction_SideMissions_SetCurrent()
SAction_SideMissions_SetCurrent::GetName() const
SAction_SideMissions_SetCurrent::GetInputs(SCmdParams&) const
SAction_SideMissions_SetCurrent::GetOutputs(SCmdParams&) const
SAction_SideMissions_ShowStartScreen::~SAction_SideMissions_ShowStartScreen()
SAction_SideMissions_ShowStartScreen::GetName() const
SAction_SideMissions_ShowStartScreen::GetInputs(SCmdParams&) const
SAction_SideMissions_ShowStartScreen::GetOutputs(SCmdParams&) const
SAction_SideMissions_ShowExitScreen::~SAction_SideMissions_ShowExitScreen()
SAction_SideMissions_ShowExitScreen::GetName() const
SAction_SideMissions_ShowExitScreen::GetInputs(SCmdParams&) const
SAction_SideMissions_ShowExitScreen::GetOutputs(SCmdParams&) const
SAction_SideMissions_ShowAbortScreen::~SAction_SideMissions_ShowAbortScreen()
SAction_SideMissions_ShowAbortScreen::GetName() const
SAction_SideMissions_ShowAbortScreen::GetInputs(SCmdParams&) const
SAction_SideMissions_ShowAbortScreen::GetOutputs(SCmdParams&) const
SAction_SideMissions_ShowCountDownText::~SAction_SideMissions_ShowCountDownText()
SAction_SideMissions_ShowCountDownText::GetName() const
SAction_SideMissions_ShowCountDownText::GetInputs(SCmdParams&) const
SAction_SideMissions_ShowCountDownText::GetOutputs(SCmdParams&) const
SAction_SideMissions_ExitCurrent::~SAction_SideMissions_ExitCurrent()
SAction_SideMissions_ExitCurrent::GetName() const
SAction_SideMissions_ExitCurrent::GetInputs(SCmdParams&) const
SAction_SideMissions_ExitCurrent::GetOutputs(SCmdParams&) const
SAction_SideMissions_CompleteCurrent::~SAction_SideMissions_CompleteCurrent()
SAction_SideMissions_CompleteCurrent::GetName() const
SAction_SideMissions_CompleteCurrent::GetInputs(SCmdParams&) const
SAction_SideMissions_CompleteCurrent::GetOutputs(SCmdParams&) const
LegoCitySideMissions::MenuRequestEventData::~MenuRequestEventData()
LegoCitySideMissionsHelper::~LegoCitySideMissionsHelper()
GenericEventCreator<SideMissionMenuQuitScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<SideMissionMenuRetryScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<SideMissionMenuStartScriptEvent>::Create(ScriptContext&, ScriptScope&)
LegoCityUtils::JetPackFailure(MechCharacter*)
LegoCityUtils::VehicleFlatteningAllowedCallback(MechCharacter*, ApiVehicle*)
LegoCityUtils::IsAircraft(MechObjectInterface&)
LegoCityUtils::IsAircraft(ApiVehicle&)
FadeHelpers::IsScreenFullyVisible()
FadeHelpers::IsScreenFullyFaded()
FadeHelpers::IsViewFullyVisibleFor(MechCharacter&)
FadeHelpers::GetSplitFor(MechCharacter&)
FadeHelpers::IsViewFullyFadedFor(MechCharacter&)
SafeGuard::SafeGuard()
SafeGuard::~SafeGuard()
SafeGuard::~SafeGuard()
SafeGuard::EventNotify(Event&, NuEventData&)
SafeGuard::ProtectForMinDuration(float)
SafeGuard::TriggerAutoSave()
SafeGuard::FinaliseStandaloneStates()
SafeGuard::ClearStandaloneStates()
SafeGuard::CheckProtectionConditions()
SafeGuard::LevelStart(bool)
SafeGuard::SetSaveableLevel(bool)
SafeGuard::AreaStart()
SafeGuard::IsSaveableLevel() const
SafeGuard::PrepareStandaloneStates()
SafeGuard::Process(float)
SafeGuard::OnRelease()
SafeGuard::IsProtected() const
SafeGuard::IsUsingStandaloneStates() const
SAction_SafeGuard_ProtectFor::Exec(ScriptContext&)
SAction_SafeGuard_ProtectFor::~SAction_SafeGuard_ProtectFor()
SAction_SafeGuard_ProtectFor::GetName() const
SAction_SafeGuard_ProtectFor::GetInputs(SCmdParams&) const
SAction_SafeGuard_ProtectFor::GetOutputs(SCmdParams&) const
DialoguePreview::DialoguePreview_Enter(MENU*)
DialoguePreview::DialoguePreview_Update(MENU*)
DialoguePreview::DialoguePreview_Render(MENU*)
DialoguePreview::DialoguePreview_Exit(MENU*)
DialoguePreview::Unpaused()
DialoguePreview::Init()
DialoguePreview::ShutDown()
LegoCity_DialoguePreviewEnabled()
cLegoCityAttractorManager::cLegoCityAttractorManager(LevelContainer&)
cLegoCityAttractorManager::~cLegoCityAttractorManager()
cLegoCityAttractorManager::~cLegoCityAttractorManager()
cLegoCityAttractorManager::Reset()
cLegoCityAttractorManager::RegisterProcessing()
cLegoCityAttractorManager::RegisterRendering()
cLegoCityAttractorManager::EventNotify(Event&, NuEventData&)
cLegoCityAttractorManager::LevelInit(NuEventData&)
cLegoCityAttractorManager::LevelUninit(NuEventData&)
cLegoCityAttractorManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
cLegoCityAttractorManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
cLegoCityAttractorManager::CreateAttractor(PlaceableBase*, cLegoCityAttractorManager::eAction)
cLegoCityAttractorManager::CreateSwitchAttractor(LegoCitySwitch*)
cLegoCityAttractorManager::CreateGadgetAttractor(LegoCityGadgetPropInstance*)
cLegoCityAttractorManagers::cLegoCityAttractorManagers()
cLegoCityAttractorManagers::cLegoCityAttractorManagers(char const*)
cLegoCityAttractorManagers::~cLegoCityAttractorManagers()
cLegoCityAttractorManagers::~cLegoCityAttractorManagers()
cLegoCityAttractorManagers::Init()
cLegoCityAttractorManagers::ShouldAddManagersForLevel(MechLevelContainer&)
cLegoCityAttractorManagers::AddManagersForLevel(MechLevelContainer&)
cLegoCityAttractorManagers::RemoveManagersForLevel(MechLevelContainer&)
cLegoCityAttractorManagers::EventNotify(Event&, NuEventData&)
cLegoCityAttractorManager::GetManagerName() const
cLegoCityAttractorManager::IsChildlessManager()
cLegoCityAttractorManager::GetInterestPosition(int) const
cLegoCityAttractorManager::GetInterestDirection(int) const
cLegoCityAttractorManager::GetInterest(int) const
MechSystemBase<cLegoCityAttractorManagers, int>::Suppress(int)
MechSystemBase<cLegoCityAttractorManagers, int>::IsSuppressed(int) const
cLegoCityAttractor::cLegoCityAttractor()
cLegoCityAttractor::cLegoCityAttractor(PlaceableBase*)
cLegoCityAttractor::~cLegoCityAttractor()
cLegoCityAttractor::~cLegoCityAttractor()
cLegoCityAttractor::Update()
cLegoCityAttractor::UpdateSpeech()
cLegoCityAttractor::StartAttractorSpeech(MechKrawlie&)
cLegoCityAttractor::SetTimer()
cLegoCityAttractor::SetInteresting(bool)
cLegoCityAttractor::CalculateInterest()
cLegoCityAttractor::DoFindConversationFilename(void*)
Task_KrawlieUseAttractor::Task_KrawlieUseAttractor(cLegoCityAttractor*, VuVec&)
StrongPtr<cAITarget> create<cAITarget>()
Task_KrawlieUseAttractor::~Task_KrawlieUseAttractor()
Task_KrawlieUseAttractor::~Task_KrawlieUseAttractor()
Task_KrawlieUseAttractor::CalcNetworkReturnPos(MechCharacter const*)
Task_KrawlieUseAttractor::Activate()
Task_KrawlieUseAttractor::Process(Brain&, float const&)
cLegoCityAttractor::SetUser(MechCharacter*)
cLegoCityAttractor::GetPosition()
cLegoCityAttractor::GetDirection()
cLegoCityAttractor::Reset()
cLegoCityAttractor::GetAttractRadius()
cLegoCityAttractor::GetMinUpdateWaitTime()
cLegoCityAttractor::GetMaxUpdateWaitTime()
cLegoCityAttractor::UseGlobalUpdateTime()
cLegoCityAttractor::UseGlobalAttractRadius()
cLegoCityAttractor::IsActive()
cLegoCityAttractor::GetActionTask()
AITask::Sleep(Brain&)
cLegoCitySwitchAttractor::cLegoCitySwitchAttractor()
cLegoCitySwitchAttractor::cLegoCitySwitchAttractor(LegoCitySwitch*)
cLegoCitySwitchAttractor::~cLegoCitySwitchAttractor()
cLegoCitySwitchAttractor::~cLegoCitySwitchAttractor()
cLegoCitySwitchAttractor::GetPosition()
cLegoCitySwitchAttractor::GetDirection()
cLegoCitySwitchAttractor::IsActive()
cLegoCitySwitchAttractor::Reset()
cLegoCitySwitchAttractor::Update()
cLegoCitySwitchAttractor::GetAttractRadius()
cLegoCitySwitchAttractor::GetMinUpdateWaitTime()
cLegoCitySwitchAttractor::GetMaxUpdateWaitTime()
cLegoCitySwitchAttractor::GetActionTask()
cLegoCityAnimatedAttractor::cLegoCityAnimatedAttractor()
cLegoCityAnimatedAttractor::cLegoCityAnimatedAttractor(LegoCityGadgetPropInstance*)
cLegoCityAnimatedAttractor::~cLegoCityAnimatedAttractor()
cLegoCityAnimatedAttractor::~cLegoCityAnimatedAttractor()
cLegoCityAnimatedAttractor::GetPosition()
cLegoCityAnimatedAttractor::GetDirection()
cLegoCityAnimatedAttractor::GetAttractRadius()
cLegoCityAnimatedAttractor::GetMinUpdateWaitTime()
cLegoCityAnimatedAttractor::GetMaxUpdateWaitTime()
cLegoCityAnimatedAttractor::IsActive()
cLegoCityAnimatedAttractor::GetActionTask()
Task_AnimateAtAttractor::Init(MechCharacter*, cLegoCityAnimatedAttractor*)
Task_AnimateAtAttractor::Task_AnimateAtAttractor()
Task_AnimateAtAttractor::~Task_AnimateAtAttractor()
Task_AnimateAtAttractor::~Task_AnimateAtAttractor()
Task_AnimateAtAttractor::ClearTasks(Brain&)
Task_AnimateAtAttractor::Activate()
Task_AnimateAtAttractor::Terminate(Brain&)
Task_AnimateAtAttractor::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
Task_AnimateAtAttractor::Process(Brain&, float const&)
LegoCityGadgetSystem::Init()
LegoCityGadgetSystem::~LegoCityGadgetSystem()
MechSystemBase<MechGadgetSystem, int>::Suppress(int)
MechSystemBase<MechGadgetSystem, int>::IsSuppressed(int) const
LegoCityGadgetProps::CreatePropTemplate(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoCityGadgetProps::CreatePropInstance(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoCityGadgetProps::GetBoltDamage(MechGadgetSimplePropInstance&, Bolt&, bool&)
LegoCityGadgetProps::RequestPunchHint(MechGadgetSimplePropInstance&, MechCharacter&)
LegoCityGadgetProps::SetPunchHintComplete(MechGadgetSimplePropInstance&, MechCharacter&)
LegoCityGadgetPropTemplate::LegoCityGadgetPropTemplate(EdRegContext&)
LegoCityGadgetPropTemplate::GetClass() const
LegoCityGadgetPropTemplate::AddBlowUpEffects(LevelContainer&, MechGadgetSimplePropInstance&)
LegoCityGadgetPropTemplateHelper::Initialise()
LegoCityGadgetPropInstanceHelper::Initialise()
LegoCityGadgetPropInstance::LegoCityGadgetPropInstance(EdRegContext&)
LegoCityGadgetPropInstance::LegoCityGadgetPropInstance(CoreGroup&, EdRegContext&)
LegoCityGadgetPropInstance::LegoCityGadgetPropInstance(EdString&, EdRegContext&)
LegoCityGadgetPropInstance::LegoCityGadgetPropInstance(LegoCityGadgetPropInstance&, EdRegContext&)
LegoCityGadgetPropInstance::GetClass() const
LegoCityGadgetPropInstance::GetTransform(VuMtx&) const
LegoCityGadgetPropInstance::GetPosition(VuVec&) const
LegoCityGadgetPropTemplate::~LegoCityGadgetPropTemplate()
LegoCityGadgetPropTemplate::~LegoCityGadgetPropTemplate()
PlaceableGroup::GetTransform(VuMtx&) const
PlaceableGroup::GetPosition(VuVec&) const
PlaceableGroup::SetPosition(VuVec const&)
PlaceableGroup::GetVisibility() const
PlaceableGroup::SetVisibility(int)
MechGadgetBaseTemplate::OnPostLoadInitialisation()
non-virtual thunk to LegoCityGadgetPropTemplate::~LegoCityGadgetPropTemplate()
non-virtual thunk to LegoCityGadgetPropTemplate::~LegoCityGadgetPropTemplate()
non-virtual thunk to LegoCityGadgetPropTemplate::~LegoCityGadgetPropTemplate()
non-virtual thunk to LegoCityGadgetPropTemplate::~LegoCityGadgetPropTemplate()
LegoCityGadgetProps::~LegoCityGadgetProps()
LegoCityGadgetProps::Init()
MechSystemBase<MechGadgetSimpleProps, int>::Suppress(int)
MechSystemBase<MechGadgetSimpleProps, int>::IsSuppressed(int) const
LegoCityGadgetProps::GetVehicleHitDamage(MechGadgetSimplePropInstance&, MechCharacter&, bool&)
LegoCityGadgetProps::GetVehicleHitDamage(MechGadgetSimplePropInstance&, ApiVehicle&, bool&)
LegoCityGadgetProps::GetCharacterHitDamage(MechGadgetSimplePropInstance&, MechCharacter&, bool&)
MechGadgetSimpleProps::GetCharacterPunchDamage(MechGadgetSimplePropInstance&, MechCharacter&, bool&)
LegoCityGadgetProps::GetInstanceHelper() const
LegoCityGadgetProps::FadeOutWhenDestroyed()
MechGadgetSimpleProps::GetPunchHintExtraRange(MechGadgetSimplePropInstance&)
MechGadgetSimplePropInstance::~MechGadgetSimplePropInstance()
LegoCityGadgetPropInstance::~LegoCityGadgetPropInstance()
MechGadgetBaseInstance::Activate(bool)
MechGadgetBaseInstance::IsActive() const
MechGadgetSimplePropInstance::IsGadgetSimpleProp()
MechGadgetBaseInstance::OnSetIdle()
CoreGroupInstance::BuildDynamicInstance(CoreGroupInstance::eDynamicBuildMode)
MechGadgetBaseInstance::OnGameLevelInit()
MechGadgetBaseInstance::OnLEDEditorPostExit()
MechGadgetSimplePropInstance::GetKrawlieCollisionRadius()
MechGadgetBaseInstance::GetIconPos(VuVec&, int)
MechGadgetBaseInstance::GetArrowPos(VuVec&, int)
MechGadgetBaseInstance::AddComponents()
MechGadgetSimplePropInstance::GetDefaultOutputIndex()
MechGadgetSimplePropInstance::ActivateRev(int, int)
MechGadgetBaseInstance::ResetForLoop()
MechGadgetBaseInstance::JumpToComplete()
MechGadgetBaseInstance::StartInteraction(MechCharacter&)
MechGadgetBaseInstance::GetFloorTargetAlpha()
MechGadgetBaseInstance::GetFloorTargetPos(VuVec&)
MechGadgetBaseInstance::ShowTakeHereArrow(MechGadgetBaseInstance&, MechCharacter&)
MechGadgetBaseInstance::DisplayItemRetrieveIcon(MechGadgetBaseInstance&)
MechGadgetSimplePropInstance::SetBeenHit(bool)
non-virtual thunk to LegoCityGadgetPropInstance::~LegoCityGadgetPropInstance()
non-virtual thunk to LegoCityGadgetPropInstance::~LegoCityGadgetPropInstance()
NuUniqueObject::Destroy()
MechGadgetSimplePropTemplate::~MechGadgetSimplePropTemplate()
MechGadgetBaseTemplateHelper::~MechGadgetBaseTemplateHelper()
LegoCityGadgetPropTemplateHelper::~LegoCityGadgetPropTemplateHelper()
non-virtual thunk to LegoCityGadgetPropTemplateHelper::~LegoCityGadgetPropTemplateHelper()
non-virtual thunk to LegoCityGadgetPropTemplateHelper::~LegoCityGadgetPropTemplateHelper()
MechGadgetBaseInstanceHelper::~MechGadgetBaseInstanceHelper()
LegoCityGadgetPropInstanceHelper::~LegoCityGadgetPropInstanceHelper()
non-virtual thunk to LegoCityGadgetPropInstanceHelper::~LegoCityGadgetPropInstanceHelper()
non-virtual thunk to LegoCityGadgetPropInstanceHelper::~LegoCityGadgetPropInstanceHelper()
MechGadgetBaseInstance::~MechGadgetBaseInstance()
LegoCityGadgetTrafficLights::CreateTrafficLightTemplate(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoCityGadgetTrafficLights::CreateTrafficLightInstance(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoCityGadgetTrafficLights::GetBoltDamage(MechGadgetTrafficLightInstance&, Bolt&, bool&)
LegoCityGadgetTrafficLights::RequestPunchHint(MechGadgetTrafficLightInstance&, MechCharacter&)
LegoCityGadgetTrafficLights::SetPunchHintComplete(MechGadgetTrafficLightInstance&, MechCharacter&)
LegoCityGadgetTrafficLightTemplate::LegoCityGadgetTrafficLightTemplate(EdRegContext&)
LegoCityGadgetTrafficLightTemplate::GetClass() const
LegoCityGadgetTrafficLightTemplate::AddBlowUpEffects(LevelContainer&, MechGadgetTrafficLightInstance&)
LegoCityGadgetTrafficLightTemplateHelper::Initialise()
LegoCityGadgetTrafficLightInstanceHelper::Initialise()
LegoCityGadgetTrafficLightInstance::LegoCityGadgetTrafficLightInstance(EdRegContext&)
LegoCityGadgetTrafficLightInstance::LegoCityGadgetTrafficLightInstance(CoreGroup&, EdRegContext&)
LegoCityGadgetTrafficLightInstance::LegoCityGadgetTrafficLightInstance(EdString&, EdRegContext&)
LegoCityGadgetTrafficLightInstance::LegoCityGadgetTrafficLightInstance(LegoCityGadgetTrafficLightInstance&, EdRegContext&)
LegoCityGadgetTrafficLightInstance::GetClass() const
LegoCityGadgetTrafficLightInstance::GetTransform(VuMtx&) const
LegoCityGadgetTrafficLightInstance::GetPosition(VuVec&) const
LegoCityGadgetTrafficLightTemplate::~LegoCityGadgetTrafficLightTemplate()
LegoCityGadgetTrafficLightTemplate::~LegoCityGadgetTrafficLightTemplate()
non-virtual thunk to LegoCityGadgetTrafficLightTemplate::~LegoCityGadgetTrafficLightTemplate()
non-virtual thunk to LegoCityGadgetTrafficLightTemplate::~LegoCityGadgetTrafficLightTemplate()
non-virtual thunk to LegoCityGadgetTrafficLightTemplate::~LegoCityGadgetTrafficLightTemplate()
non-virtual thunk to LegoCityGadgetTrafficLightTemplate::~LegoCityGadgetTrafficLightTemplate()
LegoCityGadgetTrafficLights::~LegoCityGadgetTrafficLights()
LegoCityGadgetTrafficLights::Init()
MechSystemBase<MechGadgetTrafficLights, int>::Suppress(int)
MechSystemBase<MechGadgetTrafficLights, int>::IsSuppressed(int) const
LegoCityGadgetTrafficLights::GetVehicleHitDamage(MechGadgetTrafficLightInstance&, MechCharacter&, bool&)
LegoCityGadgetTrafficLights::GetVehicleHitDamage(MechGadgetTrafficLightInstance&, ApiVehicle&, bool&)
LegoCityGadgetTrafficLights::GetCharacterHitDamage(MechGadgetTrafficLightInstance&, MechCharacter&, bool&)
MechGadgetTrafficLights::GetCharacterPunchDamage(MechGadgetTrafficLightInstance&, MechCharacter&, bool&)
LegoCityGadgetTrafficLights::GetInstanceHelper() const
MechGadgetTrafficLights::GetInitialLightStates(bool&, bool&, bool&)
LegoCityGadgetTrafficLights::FadeOutWhenDestroyed()
LegoCityGadgetTrafficLightInstance::~LegoCityGadgetTrafficLightInstance()
MechGadgetBaseInstance::IsGadgetSimpleProp()
MechGadgetTrafficLightInstance::GetKrawlieCollisionRadius()
MechGadgetTrafficLightInstance::GetDefaultOutputIndex()
MechGadgetTrafficLightInstance::ActivateRev(int, int)
MechGadgetBaseInstance::EvaluateInteraction(MechCharacter&)
MechGadgetBaseInstance::IsPotentialExplosionVictim(MechCharacter*, unsigned int)
MechGadgetBaseInstance::BeenHitByExplosion(MechCharacter*, unsigned int)
MechGadgetBaseInstance::SetBeenHit(bool)
non-virtual thunk to LegoCityGadgetTrafficLightInstance::~LegoCityGadgetTrafficLightInstance()
non-virtual thunk to LegoCityGadgetTrafficLightInstance::~LegoCityGadgetTrafficLightInstance()
MechGadgetTrafficLightTemplate::~MechGadgetTrafficLightTemplate()
LegoCityGadgetTrafficLightTemplateHelper::~LegoCityGadgetTrafficLightTemplateHelper()
non-virtual thunk to LegoCityGadgetTrafficLightTemplateHelper::~LegoCityGadgetTrafficLightTemplateHelper()
non-virtual thunk to LegoCityGadgetTrafficLightTemplateHelper::~LegoCityGadgetTrafficLightTemplateHelper()
LegoCityGadgetTrafficLightInstanceHelper::~LegoCityGadgetTrafficLightInstanceHelper()
non-virtual thunk to LegoCityGadgetTrafficLightInstanceHelper::~LegoCityGadgetTrafficLightInstanceHelper()
non-virtual thunk to LegoCityGadgetTrafficLightInstanceHelper::~LegoCityGadgetTrafficLightInstanceHelper()
LegoCityGadgetComponentBricksHelper::Register()
LegoCityGadgetComponentBricks::GetEdClass()
LegoCityGadgetComponentBricks::SpawnBricks(LevelContainer&, VuVec&, VuVec&, bool)
MechGadgetComponentTemplate::~MechGadgetComponentTemplate()
LegoCityGadgetComponentBricks::~LegoCityGadgetComponentBricks()
MechGadgetComponentTemplate::LevelInit(LevelContainer&, MechGadgetBaseTemplate&)
LegoCityGadgetComponentBricksHelper::~LegoCityGadgetComponentBricksHelper()
EdClassInterface::GetManagerId()
EdClassInterface::Render(EdRenderWindowInfo const&, void*, int, EdRef*)
LegoCityGadgetComponentAnimsHelper::Register()
LegoCityGadgetComponentAnims::GetAction(int)
LegoCityGadgetComponentAnims::GetEdClass()
LegoCityGadgetComponentAnims::~LegoCityGadgetComponentAnims()
LegoCityGadgetComponentAnims::~LegoCityGadgetComponentAnims()
LegoCityGadgetComponentAnimsHelper::~LegoCityGadgetComponentAnimsHelper()
WorldAreaScriptVariable::Set(ScriptVariable const*)
WorldAreaScriptVariable::Equals(ScriptVariable const*)
WorldAreaScriptVariable::Init()
SAction_Text2WorldArea::Exec(ScriptContext&)
void ScriptContext::SetReturn<WorldAreaScriptVariable, AREADATA*>(int, AREADATA*)
SAction_WorldArea2Text::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarText, char const*>(int, char const*)
SAction_WorldArea_GetCurrent::Exec(ScriptContext&)
SAction_WorldArea_IsCurrentWorldArea::Exec(ScriptContext&)
WorldAreaScriptVariable::~WorldAreaScriptVariable()
WorldAreaScriptVariable::AsBool() const
WorldAreaScriptVariable::AsText() const
SAction_Text2WorldArea::~SAction_Text2WorldArea()
SAction_Text2WorldArea::GetName() const
SAction_Text2WorldArea::GetInputs(SCmdParams&) const
SAction_Text2WorldArea::GetOutputs(SCmdParams&) const
SAction_WorldArea2Text::~SAction_WorldArea2Text()
SAction_WorldArea2Text::GetName() const
SAction_WorldArea2Text::GetInputs(SCmdParams&) const
SAction_WorldArea2Text::GetOutputs(SCmdParams&) const
SAction_WorldArea_IsCurrentWorldArea::~SAction_WorldArea_IsCurrentWorldArea()
SAction_WorldArea_IsCurrentWorldArea::GetName() const
SAction_WorldArea_IsCurrentWorldArea::GetInputs(SCmdParams&) const
SAction_WorldArea_IsCurrentWorldArea::GetOutputs(SCmdParams&) const
SAction_WorldArea_GetCurrent::~SAction_WorldArea_GetCurrent()
SAction_WorldArea_GetCurrent::GetName() const
SAction_WorldArea_GetCurrent::GetInputs(SCmdParams&) const
SAction_WorldArea_GetCurrent::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<WorldAreaScriptVariable>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<WorldAreaScriptVariable>(char const*, ScriptContext&)
JobValue::JobValue()
JobValue_Bool::~JobValue_Bool()
JobValue::~JobValue()
JobValue::GetId() const
JobValue::GetName() const
JobValue::ShouldBeSaved() const
JobValue::SetName(char const*)
JobValue::ReadFromString(char const*)
JobValue::Load(JobEFileReader&, char const*, char const*)
JobValue::GetDebugInfoSize() const
JobValue_Int::JobValue_Int()
JobValue_Int::~JobValue_Int()
JobValue_Int::ReturnStateToContext(ScriptContext&, int)
JobValue_Int::Get() const
JobValue_Int::SetStateFromScriptVariable(ScriptVariable*)
JobValue_Int::Set(int)
JobValue_Int::Load(JobEFileReader&, char const*, char const*)
JobValue_Int::Reset()
JobValue_Int::ReadFromData(JobEFileReader&)
JobValue_Int::ReadFromString(char const*)
JobValue_Int::CompareSameType(JobValue::Comparator, JobValue*)
JobValue_Int::GetTypeName()
JobValue_Int::GetAsInt() const
JobValue_Int::SetAsInt(int)
JobValue_Int::GetSaveDataElementSize()
JobValue_Int::WriteElementToSaveData(EdStream&, int)
JobValue_Int::ReadElementFromSaveData(EdStream&, int)
JobValue_Bool::JobValue_Bool()
JobValue_Bool::~JobValue_Bool()
JobValue_Bool::ReturnStateToContext(ScriptContext&, int)
JobValue_Bool::Get() const
JobValue_Bool::SetStateFromScriptVariable(ScriptVariable*)
JobValue_Bool::Set(bool)
JobValue_Bool::Load(JobEFileReader&, char const*, char const*)
JobValue_Bool::Reset()
JobValue_Bool::ReadFromData(JobEFileReader&)
JobValue_Bool::ReadFromString(char const*)
JobValue_Bool::CompareSameType(JobValue::Comparator, JobValue*)
JobValue_Bool::GetTypeName()
JobValue_Bool::GetAsInt() const
JobValue_Bool::SetAsInt(int)
JobValue_Bool::GetSaveDataElementSize()
JobValue_Bool::WriteElementToSaveData(EdStream&, int)
JobValue_Bool::ReadElementFromSaveData(EdStream&, int)
JobDataBlock::JobDataBlock()
JobDataBlock::~JobDataBlock()
JobDataBlock::DestroyValues()
JobDataBlock::FindValue(unsigned int)
JobDataBlock::GetNumValues() const
JobDataBlock::GetValueAtIndex(int)
JobDataBlock::Reset()
JobDataBlock::GetId() const
JobDataBlock::CreateValues(int)
JobDataBlock::GetNumSavedValues() const
JobDataBlock::GetDebugInfoSize() const
JobDataStore::ValueLocator::ValueLocator(char const*)
JobDataStore::ValueLocator::ParseAddress(char const*)
JobDataStore::ValueLocator::appearsValid() const
JobDataStore::ValueLocator::ValueLocator(char const*, char const*)
JobDataStore::ValueLocator::ValueLocator(unsigned int, unsigned int)
JobDataStore::ValueLocator::ValueLocator()
JobDataStore::ValueLocator::~ValueLocator()
JobDataStore::ValueLocator::ValueLocator(JobDataStore::ValueLocator const&)
JobDataStore::ValueLocator::operator=(JobDataStore::ValueLocator const&)
JobDataStore::ValueLocator::GetJobId() const
JobDataStore::ValueLocator::GetValueId() const
copyUpToFirstOccurenceOf(char*, char const*, char, int)
JobDataStore::ValueLocator::GetValue() const
JobDataStore::FindValue(JobDataStore::ValueLocator const&)
JobDataStore::ValueOverride::ValueOverride()
JobDataStore::ValueOverride::SetValueText(char const*)
JobDataStore::ValueOverride::ValueOverride(JobDataStore::ValueLocator const&, char const*)
JobDataStore::ValueOverride::ValueOverride(JobDataStore::ValueOverride const&)
JobDataStore::ValueOverride::GetValueText() const
JobDataStore::ValueOverride::operator=(JobDataStore::ValueOverride const&)
JobDataStore::ValueOverride::~ValueOverride()
JobDataStore::ValueOverride::GetValueLocator() const
JobDataStore::ValueOverride::restoreFromString(char const*)
JobDataStore::ValueOverride::CreateFromString(char const*)
JobDataStore::JobDataStore()
JobDataStore::RegisterValueType(char const*, void* (*)(), bool)
void* Constructor<JobValue_Int>()
void* Constructor<JobValue_Bool>()
JobDataStore::~JobDataStore()
JobDataStore::DestroyStartupValueOverrides()
JobDataStore::DestroyBlocks()
ClassTable<JobValue>::~ClassTable()
JobDataStore::FindBlock(unsigned int)
JobDataStore::FindBlock(char const*)
JobDataStore::GetNumBlocks() const
JobDataStore::GetBlockAt(int) const
JobDataStore::FindValue(unsigned int, unsigned int)
JobDataStore::FindValue(unsigned int, char const*)
JobDataStore::FindValue(char const*, char const*)
JobDataStore::CreateBlocks(int)
JobDataStoreHelpers_SortFn(void const*, void const*)
JobDataStore::SortBlocks()
JobDataStore::Debug_GetStoreSizeInBytes()
JobDataStore::AddStartupValueOverride(char const*)
JobDataStore::ApplyStartupValueOverrides()
JobDataStore::ApplyValueOverride(JobDataStore::ValueOverride const&)
JobDataStore::HasBeenLoaded() const
JobDataStore::CreateValue(char const*)
JobDataStore::ReadJobDataBlocksBlock(JobEFileReader&)
JobDataStore::ReReadJobDataBlocksBlock(JobEFileReader&)
JobDataStore::ResetToInitialValues()
JobDataStore::GetNumSavedValues() const
JobDataStore::GetDebugInfoSize() const
JobDataMapLoader::JobDataMapLoader(JobDataStore&)
JobDataMapLoader::~JobDataMapLoader()
JobDataMapLoader::~JobDataMapLoader()
JobDataMapLoader::SetFilename(char const*)
JobDataMapLoader::PerformLoad()
ClassTable<JobValue>::~ClassTable()
JobDataSaveLoad::JobDataSaveLoad(char const*)
JobDataSaveLoad::~JobDataSaveLoad()
non-virtual thunk to JobDataSaveLoad::~JobDataSaveLoad()
JobDataSaveLoad::~JobDataSaveLoad()
non-virtual thunk to JobDataSaveLoad::~JobDataSaveLoad()
JobDataSaveLoad::EventNotify(Event&, NuEventData&)
JobDataSaveLoad::CalculateDataSize()
non-virtual thunk to JobDataSaveLoad::EventNotify(Event&, NuEventData&)
JobDataSaveLoad::GetTotalSizeInBytes()
JobDataSaveLoad::Reset()
JobDataSaveLoad::SaveSaveGame(EdStream&, int)
JobDataSaveLoad::LoadSaveGame(EdStream&, int, int)
JobDataSaveLoad::IsValid()
JobComponent::JobComponent(JobComponentManager*, int)
JobComponent::~JobComponent()
JobComponent::~JobComponent()
JobComponent::IsIdle() const
JobComponent::IsActive() const
JobComponent::SetActive(bool)
JobComponent::SetFlag(unsigned short, bool)
JobComponentManager::OnActiveStateChanged(unsigned int, bool)
JobComponent::OnLevelReset()
JobComponent::SetPowered(bool)
JobComponent::IsFlagSet(unsigned short) const
JobComponent::IsPowered() const
JobComponent::GetOwnerFrom(JobTree*)
JobComponent::HasTypeName(char const*, bool)
JobComponent::AddedToJob(Job*)
JobComponent::GetTypeId() const
JobComponentManager::JobComponentManager(char const*)
JobComponentManager::~JobComponentManager()
JobComponentManager::DestroyComponents()
JobComponentManager::~JobComponentManager()
JobComponentManager::GetComponentTypeId()
JobComponentManager::GetLibraryPositionOfJobForComponent(JobComponent*) const
JobComponentManager::IsInContainer(LevelContainer&)
JobComponentManager::EventNotify(Event&, NuEventData&)
JobComponentManager::OnRegisterWithJobManager(JobManager&)
JobComponentManager::OnLevelExit()
JobComponentManager::GetJobForComponent(JobComponent*) const
JobComponentManager::GetJobManager() const
JobComponentManager::FindBaseComponentForJob(Job*)
JobComponentManager::OnJobStart(Job*)
JobComponentManager::OnJobStop(Job*)
JobComponentManager::GetNumComponents() const
JobComponentManager::AllocateComponents(unsigned int)
RuntimeFixedSizeRefArray<JobComponent>::Allocate(unsigned int)
JobComponentManager::RegisterWith(JobManager*)
JobComponentManager::GetBaseComponentAt(unsigned int) const
JobComponentManager::ReadManagerConfig(JobEFileReader&)
JobComponentManager::IsVersionSupported(unsigned int)
JobComponentManager::ReadComponentBlock(JobEFileReader&)
JobComponentManager::ReadCommonBlockHeader(JobEFileReader&)
JobComponentManager::ReadComponents(JobEFileReader&)
JobComponentManager::OnLevelReset()
JobComponentManager::ReadCommonComponentHeader(JobComponent*, JobEFileReader&)
JobComponentManager::DebugDumpList(JobTree&)
JobComponent::Init(Job*, char const*)
JobTreeHelpers::ValidateJobName(char const*)
JobTree::Index::Index()
JobTree::Index::~Index()
JobTree::Index::GetLastDescendantIndex() const
JobTree::Index::GetSourceJobTree() const
JobTree::Index::GetPositionInLibrary() const
JobTree::Index::GetTotalNumDescendants() const
JobTree::JobTree()
JobTree::~JobTree()
JobTree::FindJob(unsigned int) const
JobTree::FindJobWithName(char const*) const
JobTree::FindChildOf(Job const*, unsigned int) const
JobTree::FindParentOf(Job const*) const
JobTree::CheckForImmediateChild(Job const*, Job const*) const
JobTree::GetNumJobs() const
JobTree::IsValid() const
JobTree::GetManager() const
JobTree::UpdateState()
JobTree::GetJobAtPosition(unsigned short) const
Job::UpdateState(bool)
Job::GetState() const
Job::GetIndex() const
JobTree::AllJobsStable() const
Job::IsStable() const
JobTree::BreakStartupLocks()
Job::IsFlagSet(int) const
Job::SetFlag(int, bool)
JobTree::ResetJobs()
Job::Reset()
JobTree::CreateList(unsigned short)
JobTree::DestroyList()
RuntimeFixedSizeRefArray<Job>::Allocate(unsigned int)
RuntimeFixedSizeArray<Job>::Free()
JobTreeHelpers_SortFn(void const*, void const*)
Job::GetId() const
JobTree::SortList()
JobTree::ReadJobHeaderBlock(JobEFileReader&)
Job::SetName(char const*)
Job::AllocateComponents(unsigned short)
JobTree::ChildIterator::ChildIterator(Job*)
JobTree::ChildIterator::GetNext()
JobTree::ChildIterator::AtEnd()
JobTree::RootIterator::RootIterator(JobTree*)
JobTree::RootIterator::GetNext()
JobTree::RootIterator::AtEnd()
JobTree::StructureIterator::StructureIterator(JobTree*)
JobTree::StructureIterator::Next()
JobTree::StructureIterator::GetJob() const
JobTree::StructureIterator::GetDepth() const
JobTree::StructureIterator::GetFullJobPath(char*, int)
Job::GetName() const
JobTree::GetDebugInfoSize() const
Job::GetDebugInfoSize() const
Job::Job()
Job::~Job()
Job::GetDataBlock() const
Job::GetJobManager() const
Job::GetLevelContainer() const
Job::HasChildren() const
Job::SetPowered(bool)
Job::GetNumComponents() const
Job::GetComponentAtIndex(int) const
Job::ShouldAutoStart()
Job::RequestStart()
Job::IsPowered() const
Job::GetParent() const
Job::GetChild(char const*) const
Job::IsSuppressed() const
Job::RequestStop()
Job::IsRunning() const
Job::AllocateTransitionFlag()
Job::SetTransitionFlag(unsigned int, bool)
Job::CheckTransitionFlag(unsigned int)
Job::CheckTransitionFlags()
Job::CheckForActiveChildren()
Job::IncrementSuppressionCount()
Job::DecrementSuppressionCount()
Job::StartInternal(bool)
Job::StopInternal(bool)
Job::ResolveLocalState(bool)
Job::DestroyComponents()
Job::FindComponentWithType(char const*, bool) const
Job::ResolveToRunning()
Job::ResolveToStopped()
Job::StartPoweringDown()
Job::TransitionEventData::TransitionEventData(Job*)
JobTree::DebugDumpJobs(char const*, bool (*)(Job*))
JobTree::DebugDumpJobs()
Job::TransitionEventData::~TransitionEventData()
CStack<Job*, 64>::~CStack()
CStack<Job*, 64>::~CStack()
FileInputStream::FileInputStream()
FileInputStream::~FileInputStream()
FileInputStream::CloseFile()
FileInputStream::SetFilename(char const*)
FileInputStream::GetFilename() const
FileInputStream::OpenFile()
FileInputStream::IsReady()
FileInputStream::IsExhausted()
FileInputStream::GetPosition()
FileInputStream::SkipTo(long)
FileInputStream::ReadString(char*, int)
FileInputStream::ReadS8()
FileInputStream::ReadU8()
FileInputStream::ReadU16()
FileInputStream::ReadU32()
FileInputStream::ReadS16()
FileInputStream::ReadS32()
FileInputStream::Skip(unsigned int)
LoaderBase::LoaderBase()
LoaderBase::~LoaderBase()
LoaderBase::~LoaderBase()
LoaderBase::GetState() const
LoaderBase::StartLoading()
LoaderBase::TriggerBgLoad()
LoaderBase::LoadInternal()
LoaderBase::LoadBgFunc(void*)
LoaderBase::MarkAsReady()
LoaderBase::Reset()
LoaderBase::IsBusy() const
LoaderBase::BeforeLoading() const
LoaderBase::FinishedLoading() const
JobEFileReader::BlockHeader::BlockHeader()
JobEFileReader::BlockHeader::~BlockHeader()
JobEFileReader::BlockHeader::ReadFromInput(JobEFileReader&)
JobEFileReader::GetState() const
JobEFileReader::BlockHeader::IsBlockType(char const*) const
JobEFileReader::BlockHeader::GetBlockTypeName() const
JobEFileReader::BlockHeader::GetBlockType() const
JobEFileReader::BlockHeader::GetBlockVersion() const
JobEFileReader::BlockHeader::GetBlockSize() const
JobEFileReader::BlockHeader::GetBlockIndex() const
JobEFileReader::BlockHeader::GetBlockEnd() const
JobEFileReader::BlockHeader::IsValid() const
JobEFileReader::HeaderInfo::HeaderInfo()
JobEFileReader::HeaderInfo::ReadFrom(JobEFileReader&)
JobEFileReader::HeaderInfo::ParseVersionString(char const*)
JobEFileReader::HeaderInfo::IsNumber(char)
JobEFileReader::HeaderInfo::ParseVersionSegment(char const*, char*, int)
JobEFileReader::JobEFileReader()
JobEFileReader::~JobEFileReader()
JobEFileReader::StartReading()
JobEFileReader::Fail(char const*)
JobEFileReader::ReadHeaderInfo()
JobEFileReader::ReadNextBlockHeader(JobEFileReader::BlockHeader&)
JobEFileReader::Close()
JobEFileReader::IsVersionAtLeast(unsigned short, unsigned short) const
JobEFileReader::IsVersionNewerThan(unsigned short, unsigned short) const
JobEFileReader::IsContentType(char const*) const
JobEFileReader::GetContentType() const
JobEFileReader::IsValid() const
JobEFileReader::GetTotalBlockCount() const
JobEFileReader::GetNumBlocksLeft() const
JobEFileReader::Failed() const
JobEFileReader::AtBlockStart() const
JobEFileReader::GetBlockInfo() const
JobEFileReader::AtEnd() const
JobEFileReader::SkipBlock()
JobEFileReader::FinishCurrentBlock()
JobEFileReader::AssertCurrentBlockTypeIs(char const*)
JobEFileReader::GetErrorMessage() const
JobEFileReader::Reset()
JobTreeLoader::JobTreeLoader(JobManager&)
JobTreeLoader::~JobTreeLoader()
JobTreeLoader::~JobTreeLoader()
JobTreeLoader::SetFilename(char const*)
JobTreeLoader::PerformLoad()
JobManager::GetJobTree()
JobTreeLoader::ReadComponentBlock()
JobManager::FixupComponents()
JobManager::FindComponentManagerForType(unsigned int)
JobManager::JobManager()
JobSystem::GetHelper()
JobManager::RegisterComponentManager(JobComponentManager*)
JobManager::~JobManager()
JobManager::~JobManager()
JobManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
JobManager::StartupLock::StartupLock()
JobManager::BeginStartup()
JobManager::PowerRootJobs()
JobManager::InStartup()
JobManager::EndStartup()
UnstableJobSelector(Job*)
JobManager::ProcessStartupPhase()
JobManager::TakeStartupLock(Job*)
JobManager::ReleaseStartupLock(Job*)
JobManager::EventNotify(Event&, NuEventData&)
JobManager::PrepareForLevel()
JobManager::OnLevelCreate(LegoLevelContainer&)
JobSystem::GetLevelTreeFilename(char*, LegoLevelContainer&)
JobManager::RegisterProcessing()
JobManager::OnLevelDestroy(LegoLevelContainer&)
JobManager::ForceStopAllJobs()
JobManager::OnLevelEnter(LegoLevelContainer&)
JobManager::OnLevelExit(LegoLevelContainer&)
JobManager::OnLevelReset(LegoLevelContainer&)
JobManager::GetFromContext(ScriptContext&)
JobManager::GetMutexManager()
JobManager::CalculateDebugInfoSize()
JobSystem::GetDataStore()
JobManager::DebugDumpComponents()
JobSystem::JobSystem()
JobSystem::~JobSystem()
JobSystem::~JobSystem()
JobSystem::Init()
JobSystem::SortOfUnitTests()
JobSystem::InitialiseScriptSystem()
JobSystem::SetLibraryLocation(char const*)
JobSystem::SetLibraryName(char const*)
JobSystem::GetDataMapFilename(char*)
JobSystem::InitNewGame()
JobSystem::ResetDataStore()
JobSystem::BusyWithDataStore() const
JobSystem::ShutDown()
JobSystem::AddManagersForLevel(LegoLevelContainer&)
JobSystem::RemoveManagersForLevel(LegoLevelContainer&)
JobSystem::ShouldLevelHaveManager(LegoLevelContainer&)
JobSystem::CheckPlayerAffinity(ScriptContext&, int)
JobSystem::OnEnterLevel(LegoLevelContainer&)
JobSystem::OnExitLevel(LegoLevelContainer&)
JobSystem::OnResetLevel(LegoLevelContainer&)
JobSystem::PostOverrideJobValues(bool)
JobSystem::SetIntValue(JobDataStore::ValueLocator const&, int)
JobSystem::GetIntValue(JobDataStore::ValueLocator const&, int)
JobSystem::PrepareFilenamePrefix(char*)
JobSystem::PrependLibraryPath(char*, char const*)
JobSystem::LoadPermData()
JobSystem::GetBoolValue(JobDataStore::ValueLocator const&, bool)
JobSystem::SetBoolValue(JobDataStore::ValueLocator const&, bool)
JobSystem::IsEnabled()
JobSystem::IsDebugEnabled()
JobSystem::ParseCommandLine(int, char**)
JobSystemGizAction_SetJobValue(Flow*, FlowObject*, char**, int)
JobSystem::RegisterGizActions()
JobManagerHelper::~JobManagerHelper()
JobDebugHelpers::GetMenuColourForJob(Job*)
JobDebugHelpers::RenderTextButton(float, float, float, float, char const*, NuColour const&, NuColour const&, float)
JobDebugHelpers::RenderTextField(float, float, float, float, char const*, char const*, NuColour const&, NuColour const&, NuColour const&, float)
JobDebugViews::JobStateMenuPage::GetSelectedJob()
JobDebugViews::JobControlView::GetSourceJob()
JobDebugViews::JobTreeView::JobInfo::GetNodeType()
JobDebugViews::JobTreeView::Slot::Slot(SlidingList&)
JobDebugViews::JobTreeView::JobTreeView()
JobDebugViews::JobTreeView::~JobTreeView()
non-virtual thunk to JobDebugViews::JobTreeView::~JobTreeView()
JobDebugViews::JobTreeView::~JobTreeView()
non-virtual thunk to JobDebugViews::JobTreeView::~JobTreeView()
JobDebugViews::JobTreeView::GetManager()
JobDebug::GetInstance()
JobDebug::GetCurrentManager()
JobDebugViews::JobTreeView::RefreshSlotContent(SlidingListSlot*, int, int)
non-virtual thunk to JobDebugViews::JobTreeView::RefreshSlotContent(SlidingListSlot*, int, int)
JobDebugViews::JobTreeView::RefreshSlotTransforms(SlidingListSlot*)
non-virtual thunk to JobDebugViews::JobTreeView::RefreshSlotTransforms(SlidingListSlot*)
JobDebugViews::JobTreeView::CreateSlotInstance(int)
non-virtual thunk to JobDebugViews::JobTreeView::CreateSlotInstance(int)
JobDebugViews::JobTreeView::UpdateView(float)
JobDebugViews::JobTreeView::GetJobInfoIndexAtOpenIndex(int)
JobDebugViews::JobTreeView::OnMenuEnter()
JobDebugViews::JobTreeView::RebuildInfoCache()
JobDebugViews::JobTreeView::OnMenuExit()
JobDebugViews::JobTreeView::Clear()
JobDebugViews::JobTreeView::UpdateViewControls(MENU*, float)
JobDebugViews::JobTreeView::ForceOpennessForDescendents(int, bool)
JobDebugViews::JobTreeView::CycleFilter()
JobDebugViews::JobTreeView::ToggleOpennessForInfo(int)
JobDebugViews::JobTreeView::RenderNode(float, float, float, float, int, unsigned char)
JobDebugViews::JobTreeView::RenderFilterBar(float, float, float, float)
JobDebugViews::JobTreeView::RenderView()
JobDebug::GetBreakFocusJob()
JobDebugViews::JobTreeView::RefreshOpenIndexTable()
CStack<Job*, 32>::~CStack()
JobDebugViews::JobTreeView::GetSelectedJob()
JobDebugViews::JobTreeView::SetFilter(JobDebugViews::JobTreeView::eFilter)
JobDebugViews::JobTreeView::GetFilter()
JobDebugViews::JobInfoView::JobInfoView()
JobDebugViews::JobInfoView::~JobInfoView()
JobDebugViews::JobInfoView::~JobInfoView()
JobDebugViews::JobInfoView::OnMenuEnter()
JobDebugViews::JobInfoView::SetSourceJob(Job*)
JobDebugViews::JobInfoView::RenderView()
JobDebugViews::JobInfoView::GetSourceJob()
JobDebugViews::JobControlView::JobControlView()
JobDebugViews::JobControlView::~JobControlView()
JobDebugViews::JobStateMenuPage::~JobStateMenuPage()
JobDebugViews::JobControlView::~JobControlView()
JobDebugViews::JobControlView::OnMenuEnter()
JobDebugViews::JobControlView::SetTab(JobDebugViews::JobControlView::eTab)
JobDebugViews::JobControlView::ActiveStatusChanged(bool)
JobDebugViews::JobControlView::OnMenuExit()
JobDebugViews::JobControlView::UpdateViewControls(MENU*, float)
JobDebugViews::JobControlView::CycleTab()
JobDebugViews::JobControlView::UpdateView(float)
JobDebugViews::JobControlView::PopRequested()
JobDebugViews::JobControlView::RenderView()
JobDebugViews::JobControlView::RenderTabs(float, float, float, float, float)
JobDebugViews::JobControlView::GetTab()
JobDebugViews::JobControlView::SetSourceJob(Job*)
JobDebug::JobDebug()
JobDebug::ViewHolder::ViewHolder()
JobDebug::~JobDebug()
JobDebug::SetCurrentManager(JobManager*)
JobDebug::ManagerChanged()
JobDebug::GetDataStore()
JobDebug::GetSelectedJob()
JobDebug::MainMenu_Enter(MENU*)
JobDebug::MainMenu_Update(MENU*)
JobDebug::MainMenu_Render(MENU*)
JobDebug::MainMenu_Exit(MENU*)
JobDebug::AttemptToShowForJob(Job*)
JobDebug::GamePause()
MenuControlledView::ActiveStatusChanged(bool)
MenuControlledView::UpdateViewControls(MENU*, float)
MenuControlledView::UpdateView(float)
MenuControlledView::OnMenuExit()
JobDebugViews::JobTreeView::Slot::~Slot()
JobDebugViews::JobStateMenuPage::~JobStateMenuPage()
JobDebugViews::JobStateMenuPage::AboutToRefresh()
JobDebugViews::JobStateMenuPage::GetNumListItems()
JobDebugViews::JobStateMenuPage::RenderListItem(int, RectangleF const&, float, bool)
BasicList::Page::RenderListBackground(RectangleF const&, float)
BasicList::Page::ListSelectionChanged(int, int)
BasicList::Page::Update(float)
JobDebugViews::JobStateMenuPage::HandleListNotification(int)
JobDebugViews::JobScriptVarListPage::~JobScriptVarListPage()
JobDebugViews::JobScriptVarListPage::AboutToRefresh()
JobDebugViews::JobScriptVarListPage::GetNumListItems()
JobDebugViews::JobScriptVarListPage::RenderListItem(int, RectangleF const&, float, bool)
BasicList::Page::HandleListNotification(int)
JobDebug::ViewHolder::~ViewHolder()
JobDebug::ViewHolder::~ViewHolder()
MenuViewContainer::OnUpdate(float)
MenuViewContainer::OnRender()
JobDebug::ViewHolder::HandleViewNotification(int, MenuControlledView*)
CStack<Job*, 32>::~CStack()
JobFlowInterface::JobFlowInterface(LevelContainer&)
JobFlowInterface::~JobFlowInterface()
JobFlowInterface::~JobFlowInterface()
JobFlowInterface::SetJob(Job*)
JobFlowInterface::GetName()
JobFlowInterface::GetLedFile()
JobFlowInterface::GetNumOutputs()
JobFlowInterface::GetOutput(int, int)
JobFlowInterface::GetOutputName(int)
JobFlowInterface::CloneObject(LevelContainer&, NUVEC&, NUMTX&, Gizmo*)
JobFlowInterface::GetObject()
JobFlowInterface::GetTypeName()
JobFlowInterface::GetGizmoPrefix()
JobFlowInterface::GetClass()
JobFlowInterface::GetDefaultOutputIndex()
JobFlowInterface::Activate(bool)
JobFlowInterface::ActivateRev(int, int)
JobFlowInterface::SetVisibility(int)
JobFlowInterface::IsActive()
JobFlowInterface::IsVisible()
JobFlowInterface::AcquireSpecials()
JobFlowInterface::Reset()
JobFlowInterface::ActivateByComplexGizmo()
JobFlowInterface::ResetForLoop()
JobFlowInterface::GetTriggeredByPlayerId()
JobFlowInterface::SetTriggeredByPlayerId(MechCharacter*)
JobFlowInterface::GetBuilderOrigin(NUVEC*)
JobFlowInterface::GetRotationMatrix(NUMTX&)
JobFlowInterface::HideFromEditor()
JobFlowInterface::CanBeAddedToComplexGizmo()
JobFlowInterface::GetReference()
MechFlowInterface::JumpToComplete()
MechFlowInterface::TagAsInvolvedInFlow()
MechFlowInterface::IsInvolvedInFlow()
NuVector<JobFlowInterface*>::Reserve(unsigned int, bool)
JobFlowObjectHelper::Initialise()
JobFlowObjectHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
JobFlowObjectHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
JobFlowObjectHelper::GetParentObject(ClassObject const&)
JobFlowTarget::SetAddress(char const*)
JobFlowObject::JobFlowObject(short)
JobFlowObject::Process(Flow*, unsigned char)
JobFlowObject::CheckOutput(Flow*, unsigned char)
JobFlowObject::GetNumericalOutput(Flow*, unsigned char)
JobFlowObjectHelper::~JobFlowObjectHelper()
JobFlowObject::~JobFlowObject()
FlowObject::Reset(Flow*)
FlowObject::IsWrongGameMode()
EdRefJobFlowObject::~EdRefJobFlowObject()
EdRefJobFlowObject::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefJobFlowObject::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowTarget::~FlowTarget()
JobFlowTarget::~JobFlowTarget()
FlowTarget::ActivateReverse(Flow*, int, int)
FlowTarget::SetVisibility(Flow*, int, int)
FlowTarget::Activate(Flow*, int, int)
FlowTarget::ResetForLoop(Flow*)
FlowTarget::IsEmpty()
JobScheduleComponent::JobScheduleComponent(JobComponentManager*, int)
JobScheduleComponent::~JobScheduleComponent()
JobScheduleComponent::~JobScheduleComponent()
JobScheduleComponent::ShouldStart()
JobScheduleComponent::Condition::Condition()
JobScheduleComponent::Condition::~Condition()
JobScheduleComponent::Condition::~Condition()
JobScheduler::JobScheduler()
JobScheduler::RegisterConditionType(char const*, void* (*)(), bool)
void* Constructor<JobScheduleConditions::ValueCompare>()
void* Constructor<JobScheduleConditions::CompositeAnd>()
void* Constructor<JobScheduleConditions::CompositeOr>()
void* Constructor<JobScheduleConditions::LevelLoaded>()
JobScheduler::~JobScheduler()
ClassTable<JobScheduleComponent::Condition>::~ClassTable()
JobScheduler::~JobScheduler()
JobScheduler::Update()
JobScheduler::CreateComponent(int)
JobScheduler::ReadComponentTypeInfo(JobComponent*, JobEFileReader&)
JobScheduler::CreateNextCondition(JobEFileReader&)
JobScheduler::CreateCondition(char const*)
JobScheduleConditions::LevelLoaded::Handler::RegisterInstance(JobScheduleConditions::LevelLoaded*)
JobScheduleConditions::ValueCompare::ValueCompare()
JobScheduleConditions::ValueCompare::~ValueCompare()
JobScheduleConditions::ValueCompare::~ValueCompare()
JobScheduleConditions::ValueCompare::GetResult()
JobScheduleConditions::ValueCompare::ReadFromData(JobScheduler*, JobEFileReader&)
JobScheduleConditions::CompositeBase::CompositeBase()
JobScheduleConditions::CompositeAnd::~CompositeAnd()
JobScheduleConditions::CompositeBase::DestroyConditions()
JobScheduleConditions::CompositeBase::~CompositeBase()
JobScheduleConditions::CompositeBase::ReadFromData(JobScheduler*, JobEFileReader&)
RuntimeFixedSizeRefArray<JobScheduleComponent::Condition>::Allocate(unsigned int)
JobScheduleConditions::CompositeAnd::CompositeAnd()
JobScheduleConditions::CompositeAnd::~CompositeAnd()
JobScheduleConditions::CompositeAnd::GetResult()
JobScheduleConditions::CompositeOr::CompositeOr()
JobScheduleConditions::CompositeOr::~CompositeOr()
JobScheduleConditions::CompositeOr::GetResult()
JobScheduleConditions::LevelLoaded::LevelLoaded()
JobScheduleConditions::LevelLoaded::~LevelLoaded()
JobScheduleConditions::LevelLoaded::SetLevelName(char const*)
JobScheduleConditions::LevelLoaded::~LevelLoaded()
JobScheduleConditions::LevelLoaded::GetResult()
JobScheduleConditions::LevelLoaded::ReadFromData(JobScheduler*, JobEFileReader&)
JobScheduleConditions::LevelLoaded::Fixup(StreamingLevel*)
JobScheduleConditions::LevelLoaded::Handler::Handler()
NuVector<JobScheduleConditions::LevelLoaded*>::Reserve(unsigned int, bool)
JobScheduleConditions::LevelLoaded::Handler::~Handler()
JobScheduleConditions::LevelLoaded::Handler::~Handler()
JobScheduleConditions::LevelLoaded::Handler::EventNotify(Event&, NuEventData&)
JobScheduleConditions::LevelLoaded::Handler::FixupInstances(StreamingLevel*)
JobScheduleConditions::LevelLoaded::Handler::OnLevelLoaded(StreamingLevel*)
JobScheduleConditions::LevelLoaded::Handler::OnLevelUnloaded(StreamingLevel*)
JobMutexComponent::JobMutexComponent(JobComponentManager*, int)
JobMutexComponent::~JobMutexComponent()
JobMutexComponent::~JobMutexComponent()
JobMutexComponent::OnLevelReset()
JobMutexComponent::Manager::Manager()
JobMutexComponent::Manager::~Manager()
JobMutexComponent::Manager::~Manager()
JobMutexComponent::Manager::IsLocked()
JobMutexComponent::Manager::GetCurrentLockHolder()
JobMutexComponent::Manager::LockMutexFor(Job*)
JobMutexComponent::Manager::SuppressJob(Job*, JobMutexComponent*)
JobMutexComponent::Manager::UnlockMutex(Job*)
JobMutexComponent::Manager::AllowJob(Job*, JobMutexComponent*)
JobMutexComponent::Manager::Update()
JobMutexComponent::Manager::CreateComponent(int)
JobMutexComponent::Manager::ReadComponentTypeInfo(JobComponent*, JobEFileReader&)
JobMutexComponent::Manager::OnLevelReset()
SAction_Job_IsMutexLocked::Exec(ScriptContext&)
SAction_Job_GetMutexJob::Exec(ScriptContext&)
SAction_Job_HasMutex::Exec(ScriptContext&)
SAction_Job_LockMutex::Exec(ScriptContext&)
JobScheduleComponent::GetTypeName() const
JobScheduleConditions::ValueCompare::GetTypeString()
JobScheduleConditions::CompositeAnd::GetTypeString()
JobScheduleConditions::CompositeOr::GetTypeString()
JobScheduleConditions::LevelLoaded::GetTypeString()
JobMutexComponent::GetTypeName() const
SAction_Job_IsMutexLocked::~SAction_Job_IsMutexLocked()
SAction_Job_IsMutexLocked::GetName() const
SAction_Job_IsMutexLocked::GetInputs(SCmdParams&) const
SAction_Job_IsMutexLocked::GetOutputs(SCmdParams&) const
SAction_Job_GetMutexJob::~SAction_Job_GetMutexJob()
SAction_Job_GetMutexJob::GetName() const
SAction_Job_GetMutexJob::GetInputs(SCmdParams&) const
SAction_Job_GetMutexJob::GetOutputs(SCmdParams&) const
SAction_Job_HasMutex::~SAction_Job_HasMutex()
SAction_Job_HasMutex::GetName() const
SAction_Job_HasMutex::GetInputs(SCmdParams&) const
SAction_Job_HasMutex::GetOutputs(SCmdParams&) const
SAction_Job_LockMutex::~SAction_Job_LockMutex()
SAction_Job_LockMutex::GetName() const
SAction_Job_LockMutex::GetInputs(SCmdParams&) const
SAction_Job_LockMutex::GetOutputs(SCmdParams&) const
ClassTable<JobScheduleComponent::Condition>::~ClassTable()
JobRuntimeComponent::JobRuntimeComponent(JobComponentManager*, int)
JobRuntimeComponent::~JobRuntimeComponent()
JobRuntimeComponent::~JobRuntimeComponent()
JobRuntimeComponent::UpdateStarting(bool)
JobRuntimeComponent::UpdateStopping(bool, bool)
JobRuntimeComponent::ReadyToRun()
JobRuntimeComponent::UpdateRunning(float)
JobRuntimeComponent::UpdateState(float)
JobRuntimeComponent::SetTransitionLock(bool)
JobRuntimeComponent::AddedToJob(Job*)
JobRuntimeComponent::IsTransitionLockSet()
JobRuntimeComponent::GetOwnerJob()
JobRuntimeComponent::OnLevelReset()
JobRuntimeComponent::HandleJobStart(Job*)
JobRuntimeComponent::HandleJobStop(Job*)
JobRuntimeManager::JobRuntimeManager(char const*)
JobRuntimeManager::~JobRuntimeManager()
JobRuntimeManager::~JobRuntimeManager()
JobRuntimeManager::GetComponentAt(unsigned int)
JobRuntimeManager::Update(float)
JobRuntimeManager::OnJobStart(Job*)
JobRuntimeManager::OnJobStop(Job*)
JobScriptContext::JobScriptContext(ScriptManager&, ScriptScope&)
JobScriptContext::JobScriptContext(ScriptManager&)
JobScriptContext::JobScriptContext(JobScriptContext&)
JobScriptContext::~JobScriptContext()
JobScriptContext::~JobScriptContext()
JobScriptContext::GetLevelContainer() const
JobScriptContext::NotifyEvent(Event&, NuEventData&)
JobScriptContext::GetJob() const
JobScriptContext::GetScriptJobComponent() const
JobScriptContext::FindVariable(char const*)
JobScriptContext::SetScriptJobComponent(ScriptJobComponent*)
JobScriptContext::Init()
JobScriptContext::GetFrom(Job*)
ScriptJobComponent::GetFrom(Job*)
ScriptJobComponent::GetContext()
ScriptJobComponent::ScriptJobComponent(JobComponentManager*, int)
ScriptJobComponent::~ScriptJobComponent()
ScriptJobComponent::DestroyContext()
ScriptJobComponent::~ScriptJobComponent()
ScriptJobComponent::GetScriptManager()
ScriptJobComponent::EnterState(char const*)
ScriptJobComponent::GetFilename() const
ScriptJobComponent::Manager::SharedScript::GetFilename() const
ScriptJobComponent::GetFullFilename(char*) const
ScriptJobComponent::Manager::GetFullScriptFilename(char*, ScriptJobComponent::Manager::SharedScript const*)
ScriptJobComponent::UpdateStarting(bool)
ScriptJobComponent::Manager::SharedScript::Request()
ScriptJobComponent::Manager::SharedScript::IsLoaded()
ScriptJobComponent::CreateContext()
ScriptJobComponent::ReadyToRun()
ScriptJobComponent::ParameterSet::ApplyTo(JobScriptContext&) const
ScriptJobComponent::UpdateStopping(bool, bool)
ScriptJobComponent::Manager::SharedScript::Release()
ScriptJobComponent::UpdateRunning(float)
ScriptJobComponent::OnLevelReset()
ScriptJobComponent::Init(Job*, char const*)
ScriptJobComponent::Manager::SharedScript::SharedScript()
ScriptJobComponent::Manager::SharedScript::~SharedScript()
ScriptJobComponent::Manager::SharedScript::ClearLoadRequest()
ScriptJobComponent::Manager::SharedScript::SetFilename(char const*)
ScriptJobComponent::Manager::SharedScript::GetScriptManager()
ScriptJobComponent::Manager::SharedScript::LoadScriptFor(ScriptJobComponent::Manager::SharedScript*)
ScriptJobComponent::Manager::SharedScript::LoadProcessBg(void*)
ScriptJobComponent::Manager::SharedScript::TriggerLoad()
ScriptJobComponent::Manager::SharedScript::TriggerUnload()
ScriptJobComponent::ParameterSet::ParameterSet(int)
ScriptJobComponent::ParameterSet::~ParameterSet()
ScriptJobComponent::ParameterSet::ApplyValueTo(ScriptVariable*, char const*) const
ScriptJobComponent::ParameterSet::ReadParams(JobEFileReader&)
ScriptJobComponent::ParameterSet::Load(int, JobEFileReader&)
ScriptJobComponent::GetParameters() const
ScriptJobComponent::Manager::Manager()
ScriptJobComponent::Manager::~Manager()
RuntimeFixedSizeArray<ScriptJobComponent::Manager::SharedScript>::Free()
ScriptJobComponent::Manager::~Manager()
ScriptJobComponent::Manager::ReadComponentTypeInfo(JobComponent*, JobEFileReader&)
ScriptJobComponent::Manager::ReadManagerConfig(JobEFileReader&)
ScriptJobComponent::Manager::OnRegisterWithJobManager(JobManager&)
ScriptJobComponent::Manager::OnLevelExit()
ScriptJobComponent::Manager::UpdateStartupLockedScripts()
ScriptJobComponent::Manager::GetScriptInfo(int)
ScriptJobComponent::Manager::CreateComponent(int)
SVarJob::SVarJob(char const*, unsigned int, ScriptContext&)
SVarJob::SVarJob(char const*, ScriptContext&)
SVarJob::GetRef()
SVarJob::SetRef(unsigned int)
SVarJob::AsBool() const
SVarJob::Set(ScriptVariable const*)
SVarJob::Equals(ScriptVariable const*)
SVarJob::GetJob()
SVarJob::RefreshInstance()
SVarJob::GetDataBlock()
SVarJob::GetJobUsingId() const
SVarJob::GetJobWithoutCaching() const
SVarJob::GetFrom(ScriptContext&, int)
SVarJob::GetInstanceParam(ScriptContext&, int)
SVarJob::ReturnToContext(Job*, ScriptContext&, int)
void ScriptContext::SetReturn<SVarJob, unsigned int>(int, unsigned int)
SVarJob::ReturnToContext(unsigned int, ScriptContext&, int)
SVarJob::Init()
SVarJobHelpers::VariableAccessError_NoContext(ScriptContext&, Job*, char const*)
SVarJobHelpers::VariableAccessError_NoVar(ScriptContext&, Job*, char const*)
SAction_Job_TextToJob::Exec(ScriptContext&)
SAction_Job_JobToText::Exec(ScriptContext&)
SAction_Job_This::Exec(ScriptContext&)
SAction_Job_GetParent::Exec(ScriptContext&)
SAction_Job_GetChild::Exec(ScriptContext&)
SAction_Job_ExistsInLevel::Exec(ScriptContext&)
SAction_Job_IsRunning::Exec(ScriptContext&)
SAction_Job_Start::Exec(ScriptContext&)
SAction_Job_Stop::SAction_Job_Stop(bool)
SAction_Job_Stop::Exec(ScriptContext&)
SAction_Job_GetValue_TEXT::Exec(ScriptContext&)
SAction_Job_GetValue::Exec(ScriptContext&)
SAction_Job_SetValue::Exec(ScriptContext&)
SAction_Job_Debug::Exec(ScriptContext&)
SAction_Job_ScriptNotify::Exec(ScriptContext&)
SAction_Job_ScriptGetVar::Exec(ScriptContext&)
SAction_Job_ScriptSetVar::Exec(ScriptContext&)
SAction_Job_StartupLock::Exec(ScriptContext&)
SAction_Job_InStartup::Exec(ScriptContext&)
SAction_Job_Break::Exec(ScriptContext&)
ScriptContext::CreateNewContext()
JobScriptContext::GetType()
ScriptJobComponent::GetTypeName() const
SVarJob::~SVarJob()
SAction_Job_TextToJob::~SAction_Job_TextToJob()
SAction_Job_TextToJob::GetName() const
SAction_Job_TextToJob::GetInputs(SCmdParams&) const
SAction_Job_TextToJob::GetOutputs(SCmdParams&) const
SAction_Job_JobToText::~SAction_Job_JobToText()
SAction_Job_JobToText::GetName() const
SAction_Job_JobToText::GetInputs(SCmdParams&) const
SAction_Job_JobToText::GetOutputs(SCmdParams&) const
SAction_Job_This::~SAction_Job_This()
SAction_Job_This::GetName() const
SAction_Job_This::GetInputs(SCmdParams&) const
SAction_Job_This::GetOutputs(SCmdParams&) const
SAction_Job_GetParent::~SAction_Job_GetParent()
SAction_Job_GetParent::GetName() const
SAction_Job_GetParent::GetInputs(SCmdParams&) const
SAction_Job_GetParent::GetOutputs(SCmdParams&) const
SAction_Job_GetChild::~SAction_Job_GetChild()
SAction_Job_GetChild::GetName() const
SAction_Job_GetChild::GetInputs(SCmdParams&) const
SAction_Job_GetChild::GetOutputs(SCmdParams&) const
SAction_Job_Start::~SAction_Job_Start()
SAction_Job_Start::GetName() const
SAction_Job_Start::GetInputs(SCmdParams&) const
SAction_Job_Start::GetOutputs(SCmdParams&) const
SAction_Job_ExistsInLevel::~SAction_Job_ExistsInLevel()
SAction_Job_ExistsInLevel::GetName() const
SAction_Job_ExistsInLevel::GetInputs(SCmdParams&) const
SAction_Job_ExistsInLevel::GetOutputs(SCmdParams&) const
SAction_Job_IsRunning::~SAction_Job_IsRunning()
SAction_Job_IsRunning::GetName() const
SAction_Job_IsRunning::GetInputs(SCmdParams&) const
SAction_Job_IsRunning::GetOutputs(SCmdParams&) const
SAction_Job_GetValue::~SAction_Job_GetValue()
SAction_Job_GetValue::GetName() const
SAction_Job_GetValue::GetInputs(SCmdParams&) const
SAction_Job_GetValue::GetOutputs(SCmdParams&) const
SAction_Job_GetValue_TEXT::~SAction_Job_GetValue_TEXT()
SAction_Job_GetValue_TEXT::GetName() const
SAction_Job_GetValue_TEXT::GetInputs(SCmdParams&) const
SAction_Job_GetValue_TEXT::GetOutputs(SCmdParams&) const
SAction_Job_SetValue::~SAction_Job_SetValue()
SAction_Job_SetValue::GetName() const
SAction_Job_SetValue::GetInputs(SCmdParams&) const
SAction_Job_SetValue::GetOutputs(SCmdParams&) const
SAction_Job_Debug::~SAction_Job_Debug()
SAction_Job_Debug::GetName() const
SAction_Job_Debug::GetInputs(SCmdParams&) const
SAction_Job_Debug::GetOutputs(SCmdParams&) const
SAction_Job_ScriptNotify::~SAction_Job_ScriptNotify()
SAction_Job_ScriptNotify::GetName() const
SAction_Job_ScriptNotify::GetInputs(SCmdParams&) const
SAction_Job_ScriptNotify::GetOutputs(SCmdParams&) const
SAction_Job_ScriptGetVar::~SAction_Job_ScriptGetVar()
SAction_Job_ScriptGetVar::GetName() const
SAction_Job_ScriptGetVar::GetInputs(SCmdParams&) const
SAction_Job_ScriptGetVar::GetOutputs(SCmdParams&) const
SAction_Job_ScriptSetVar::~SAction_Job_ScriptSetVar()
SAction_Job_ScriptSetVar::GetName() const
SAction_Job_ScriptSetVar::GetInputs(SCmdParams&) const
SAction_Job_ScriptSetVar::GetOutputs(SCmdParams&) const
SAction_Job_StartupLock::~SAction_Job_StartupLock()
SAction_Job_StartupLock::GetName() const
SAction_Job_StartupLock::GetInputs(SCmdParams&) const
SAction_Job_StartupLock::GetOutputs(SCmdParams&) const
SAction_Job_InStartup::~SAction_Job_InStartup()
SAction_Job_InStartup::GetName() const
SAction_Job_InStartup::GetInputs(SCmdParams&) const
SAction_Job_InStartup::GetOutputs(SCmdParams&) const
SAction_Job_Break::~SAction_Job_Break()
SAction_Job_Break::GetName() const
SAction_Job_Break::GetInputs(SCmdParams&) const
SAction_Job_Break::GetOutputs(SCmdParams&) const
SAction_Job_Stop::~SAction_Job_Stop()
SAction_Job_Stop::GetName() const
SAction_Job_Stop::GetInputs(SCmdParams&) const
SAction_Job_Stop::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarJob>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarJob>(char const*, ScriptContext&)
CityScriptArrayHelpers::GetItemVariableName()
ScriptArrayData::SharedInstance::SharedInstance(unsigned int)
ScriptArrayData::SharedInstance::~SharedInstance()
ScriptArrayData::SharedInstance::Clear()
ScriptArrayData::SharedInstance::~SharedInstance()
ScriptArrayData::ScriptArrayData()
ScriptArrayData::ScriptArrayData(ScriptArrayData const&)
ScriptArrayData::operator=(ScriptArrayData const&)
ScriptArrayData::operator==(ScriptArrayData const&) const
ScriptArrayData::operator!=(ScriptArrayData const&) const
ScriptArrayData::~ScriptArrayData()
ScriptArrayData::IsValid() const
ScriptArrayData::GetType() const
ScriptArrayData::Size() const
ScriptArrayData::Add(ScriptVariable*)
ScriptArrayData::Remove(int)
ScriptArrayData::Get(int) const
ScriptArrayData::Replace(int, ScriptVariable*)
ScriptArrayData::Clear()
ScriptArrayData::CreateCopy() const
ScriptArrayData::CreateForType(unsigned int)
ScriptArrayData::IsValidType(unsigned int)
SVarCityArray::SVarCityArray(char const*, ScriptArrayData, ScriptContext&)
SVarCityArray::SVarCityArray(char const*, ScriptContext&)
SVarCityArray::GetRef()
SVarCityArray::SetRef(ScriptArrayData)
SVarCityArray::AsBool() const
SVarCityArray::Set(ScriptVariable const*)
SVarCityArray::Equals(ScriptVariable const*)
SVarCityArray::GetParamFrom(ScriptContext&, int)
SVarCityArray::ReturnToContext(ScriptArrayData const&, ScriptContext&, int)
void ScriptContext::SetReturn<SVarCityArray, ScriptArrayData>(int, ScriptArrayData)
SVarCityArray::Init()
SAction_CityArray_NumberToCityArray::Exec(ScriptContext&)
SAction_CityArray_Create::Exec(ScriptContext&)
SAction_CityArray_Size::Exec(ScriptContext&)
SAction_CityArray_Add::Exec(ScriptContext&)
SAction_CityArray_Clear::Exec(ScriptContext&)
SAction_CityArray_Remove::Exec(ScriptContext&)
SAction_CityArray_Get::Exec(ScriptContext&)
SAction_CityArray_Set::Exec(ScriptContext&)
SAction_CityArray_CreateCopy::Exec(ScriptContext&)
SVarCityArray::~SVarCityArray()
SVarCityArray::~SVarCityArray()
SAction_CityArray_NumberToCityArray::~SAction_CityArray_NumberToCityArray()
SAction_CityArray_NumberToCityArray::GetName() const
SAction_CityArray_NumberToCityArray::GetInputs(SCmdParams&) const
SAction_CityArray_NumberToCityArray::GetOutputs(SCmdParams&) const
SAction_CityArray_Size::~SAction_CityArray_Size()
SAction_CityArray_Size::GetName() const
SAction_CityArray_Size::GetInputs(SCmdParams&) const
SAction_CityArray_Size::GetOutputs(SCmdParams&) const
SAction_CityArray_Create::~SAction_CityArray_Create()
SAction_CityArray_Create::GetName() const
SAction_CityArray_Create::GetInputs(SCmdParams&) const
SAction_CityArray_Create::GetOutputs(SCmdParams&) const
SAction_CityArray_Add::~SAction_CityArray_Add()
SAction_CityArray_Add::GetName() const
SAction_CityArray_Add::GetInputs(SCmdParams&) const
SAction_CityArray_Add::GetOutputs(SCmdParams&) const
SAction_CityArray_Clear::~SAction_CityArray_Clear()
SAction_CityArray_Clear::GetName() const
SAction_CityArray_Clear::GetInputs(SCmdParams&) const
SAction_CityArray_Clear::GetOutputs(SCmdParams&) const
SAction_CityArray_Remove::~SAction_CityArray_Remove()
SAction_CityArray_Remove::GetName() const
SAction_CityArray_Remove::GetInputs(SCmdParams&) const
SAction_CityArray_Remove::GetOutputs(SCmdParams&) const
SAction_CityArray_Get::~SAction_CityArray_Get()
SAction_CityArray_Get::GetName() const
SAction_CityArray_Get::GetInputs(SCmdParams&) const
SAction_CityArray_Get::GetOutputs(SCmdParams&) const
SAction_CityArray_Set::~SAction_CityArray_Set()
SAction_CityArray_Set::GetName() const
SAction_CityArray_Set::GetInputs(SCmdParams&) const
SAction_CityArray_Set::GetOutputs(SCmdParams&) const
SAction_CityArray_CreateCopy::~SAction_CityArray_CreateCopy()
SAction_CityArray_CreateCopy::GetName() const
SAction_CityArray_CreateCopy::GetInputs(SCmdParams&) const
SAction_CityArray_CreateCopy::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarCityArray>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarCityArray>(char const*, ScriptContext&)
FlowTree::StructureIterator::StructureIterator(FlowTree*)
FlowTree::GetNumPresets() const
FlowTree::StructureIterator::Next()
FlowPresetNode::GetNumDescendants() const
FlowPresetNode::GetLastDescendantIndex() const
FlowTree::GetPresetAtPosition(unsigned short) const
FlowTree::StructureIterator::GetCurrent() const
FlowTree::StructureIterator::GetDepth() const
FlowPresetNode::FlowPresetNode()
FlowPresetNode::~FlowPresetNode()
FlowPresetNode::SetName(char const*)
FlowPresetNode::GetName() const
FlowPresetNode::IsPreset() const
FlowPresetNode::IsBank() const
FlowPresetNode::GetId() const
FlowPresetNode::GetTreePosition() const
FlowPresetNode::GetLevelId() const
FlowTree::FlowTree()
FlowTree::~FlowTree()
FlowTree::DestroyList()
FlowTree::FindPreset(unsigned int) const
FlowTree::FindChildOf(FlowPresetNode const*, unsigned int) const
FlowTree::FindParentOf(FlowPresetNode const*) const
FlowTree::CheckForImmediateChild(FlowPresetNode const*, FlowPresetNode const*) const
FlowTree::CreateList(unsigned short)
RuntimeFixedSizeRefArray<FlowPresetNode>::Allocate(unsigned int)
FlowTreeHelpers_SortFn(void const*, void const*)
FlowTree::SortList()
FlowTree::LoadFromFile(char const*)
EasyParser::ParseFile(char const*)
FlowTree::Parser::~Parser()
FlowTree::GetFilename() const
FlowTree::IsValid() const
FlowTreeView::NodeInfo::GetNodeType()
FlowTreeView::NodeInfo::IsOpen() const
FlowTreeView::Slot::Slot(SlidingList&)
FlowTreeView::FlowTreeView(FlowTree&)
FlowTreeView::~FlowTreeView()
non-virtual thunk to FlowTreeView::~FlowTreeView()
FlowTreeView::~FlowTreeView()
non-virtual thunk to FlowTreeView::~FlowTreeView()
FlowTreeView::RefreshSlotContent(SlidingListSlot*, int, int)
non-virtual thunk to FlowTreeView::RefreshSlotContent(SlidingListSlot*, int, int)
FlowTreeView::RefreshSlotTransforms(SlidingListSlot*)
non-virtual thunk to FlowTreeView::RefreshSlotTransforms(SlidingListSlot*)
FlowTreeView::CreateSlotInstance(int)
non-virtual thunk to FlowTreeView::CreateSlotInstance(int)
FlowTreeView::UpdateView(float)
FlowTreeView::GetNodeInfoIndexAtOpenIndex(int)
FlowTreeView::OnMenuEnter()
FlowTreeView::RebuildInfoCache()
FlowTreeView::OnMenuExit()
FlowTreeView::Clear()
FlowTreeView::UpdateViewControls(MENU*, float)
FlowTreeView::GetSelectedNode()
FlowTreeView::ToggleOpennessForInfo(int)
FlowTreeView::ForceOpennessForDescendents(int, bool)
FlowTreeView::GetOpenIndexForNode(FlowPresetNode*)
FlowTreeView::RenderNode(float, float, float, float, int, unsigned char)
FlowTreeView::RenderView()
FlowTreeView::RefreshOpenIndexTable()
GoToFlow::GoToFlow()
GoToFlow::~GoToFlow()
GoToFlow::~GoToFlow()
GoToFlow::LoadStuff()
GoToFlow::Init()
GoToFlow::ShutDown()
GoToFlow::EventNotify(Event&, NuEventData&)
GoToFlow::PerformGoToPreset(int)
GoToFlow::ClearChosenPreset()
GoToFlow::TriggerPreset(int)
GoToFlow::GoToFlow_Enter(MENU*)
GoToFlow::GoToFlow_Update(MENU*)
GoToFlow::GoToFlow_Render(MENU*)
GoToFlow::GoToFlow_Exit(MENU*)
FlowTreeView::Slot::~Slot()
FlowTreeParserBase::FlowTreeParserBase()
FlowTreeCounter::~FlowTreeCounter()
FlowTreeCounter::BeginItem(int)
EasyParser::ProcessItemField(DynamicString const&, int)
EasyParser::EndItem(int)
EasyParser::Finish()
FlowTreeParserBase::~FlowTreeParserBase()
EasyParser::BeginItem(int)
EasyParser::~EasyParser()
EasyParser::~EasyParser()
CStack<int, 64>::~CStack()
CStack<int, 64>::~CStack()
EasyParser::ParseInternal()
FlowTree::Parser::~Parser()
FlowTree::Parser::BeginItem(int)
FlowTree::Parser::ProcessItemField(DynamicString const&, int)
FlowTree::Parser::EndItem(int)
FlowTree::Parser::Finish()
CStack<FlowPresetNode*, 64>::~CStack()
GoToFlow::ViewHolder::~ViewHolder()
GoToFlow::ViewHolder::~ViewHolder()
GoToFlow::ViewHolder::HandleViewNotification(int, MenuControlledView*)
GoToFlow::ExecutiveParser::~ExecutiveParser()
GoToFlow::ExecutiveParser::BeginItem(int)
GoToFlow::ExecutiveParser::ProcessItemField(DynamicString const&, int)
GoToFlow::ExecutiveParser::EndItem(int)
GoToFlow::ExecutiveParser::Finish()
CStack<FlowPresetNode*, 64>::~CStack()
SetConstString(char const*&, char const*)
ScannableObjectiveType::ScannableObjectiveType()
ScannableObjectiveType::~ScannableObjectiveType()
ScannableObjectiveType::SetObjectiveTypeId(char const*)
ScannableObjectiveType::GetObjectiveTypeId() const
ScannableObjectiveType::GetObjectiveTypeName() const
ScannableObjectiveType::SetIconId(int)
ScannableObjectiveType::GetIconId() const
ScannableObjectiveType::SetTextureName(char const*)
ScannableObjectiveType::GetTextureName() const
ScannableObjectiveType::SetInfoText(char const*)
ScannableObjectiveType::GetInfoText() const
ScannableObjectiveType::SetInfoDescription(char const*)
ScannableObjectiveType::GetInfoDescription() const
ScannableObjectiveType::SetHasCounter(bool)
ScannableObjectiveType::HasCounter() const
ScannableObjectiveType::SetTint(char const*)
ScannableObjectiveType::GetTint() const
ScannableObjectiveType::Get2DIconTextureFilename(char*, int) const
ScannableObjectiveType::Clear()
ScannableObjectiveTypeTable::ScannableObjectiveTypeTable()
ScannableObjectiveTypeTable::~ScannableObjectiveTypeTable()
ScannableObjectiveTypeTable::Clear()
ScannableObjectiveTypeTable::ClearEntry(ScannableObjectiveType*)
ScannableObjectiveTypeTable::AllocateType()
ScannableObjectiveTypeTable::FindType(HashedNameParam const&) const
ScannableObjectiveTypeTable::IndexOfType(HashedNameParam const&) const
ScannableObjectiveTypeTable::IndexOfType(ScannableObjectiveType const*) const
ScannableObjectiveTypeTable::GetTypeAtIndex(int) const
ScannableObjectiveTypeTable::GetNumTypes() const
ScannableObjectiveTypeTable::LoadFromFile(char const*)
ScannableObjectiveTypeTable::Parser::~Parser()
ScannableObjectiveInstanceTable::Instance::GetLockCriteria()
ScannableObjectiveInstanceTable::Instance::SetLockness(BasicUnlockCriterion const&)
ScannableObjectiveInstanceTable::Instance::GetTypeIndex() const
ScannableObjectiveInstanceTable::Instance::GetDistrictId() const
ScannableObjectiveInstanceTable::Instance::IsHiddenWhenLocked() const
ScannableObjectiveInstanceTable::Instance::SetTypeAndHiddenFlag(int, bool)
ScannableObjectiveInstanceTable::Instance::SetDistrict(eDistrictID)
ScannableObjectiveInstanceTable::Instance::CountsTowardsScore() const
ScannableObjectiveInstanceTable::ScannableObjectiveInstanceTable()
ScannableObjectiveInstanceTable::~ScannableObjectiveInstanceTable()
ScannableObjectiveInstanceTable::DestroyInstances()
ScannableObjectiveInstanceTable::AllocateInstances(int)
ScannableObjectiveInstanceTable::AddInstance(char const*, int, BasicUnlockCriterion const&, bool, int)
ScannableObjectiveInstanceTable::SortFn(void const*, void const*)
ScannableObjectiveInstanceTable::SortById()
ScannableObjectiveInstanceTable::LoadFromFile(char const*)
ScannableObjectiveInstanceTable::Parser::~Parser()
ScannableObjectiveInstanceTable::GetNumInstances() const
ScannableObjectiveInstanceTable::FindInstanceHandle_Unsorted(HashedNameParam const&) const
ScannableObjectiveInstanceTable::FindInstanceHandle(HashedNameParam const&) const
ScannableObjectiveTypeSuppressor::ScannableObjectiveTypeSuppressor()
ScannableObjectiveTypeSuppressor::~ScannableObjectiveTypeSuppressor()
ScannableObjectiveTypeSuppressor::Init(int)
ScannableObjectiveTypeSuppressor::RequestSuppressType(int, unsigned long)
ScannableObjectiveTypeSuppressor::TypeHandler::SubmitRequest(unsigned long)
ScannableObjectiveTypeSuppressor::RequestUnsuppressType(int, unsigned long)
ScannableObjectiveTypeSuppressor::TypeHandler::RemoveRequest(unsigned long)
ScannableObjectiveTypeSuppressor::RequestSuppressAll(unsigned long)
ScannableObjectiveTypeSuppressor::RequestUnsuppressAll(unsigned long)
ScannableObjectiveTypeSuppressor::ForceUnsuppressAll()
ScannableObjectiveTypeSuppressor::TypeHandler::Clear()
ScannableObjectiveTypeSuppressor::IsTypeSuppressed(int) const
ScannableObjectiveTypeSuppressor::TypeHandler::IsSuppressed()
ScannableObjectiveTypeSuppressor::TypeHandler::TypeHandler()
ScannableObjectiveTypeSuppressor::TypeHandler::~TypeHandler()
ObjectiveReport::ObjectiveReport()
ObjectiveReport::~ObjectiveReport()
ObjectiveReport::SetCity()
ObjectiveReport::Clear()
ObjectiveReport::SetDistrict(eDistrictID)
ObjectiveReport::GetDistrict() const
ObjectiveReport::IsForCity() const
ObjectiveReport::Refresh()
ObjectiveReport::Purge()
ObjectiveReport::GetScoreForTypeAtIndex(int) const
ObjectiveReport::GetScoreForType(HashedNameParam const&) const
ObjectiveReport::GetTypes() const
ObjectiveReport::GetOverallScore() const
ObjectiveReport::PrepareTypes()
NuVector<Score>::Reserve(unsigned int, bool)
ObjectiveReport::DebugDump()
ScannableObjectiveTypeTable::Parser::~Parser()
ScannableObjectiveTypeTable::Parser::BeginItem(DynamicString const&)
ScannableObjectiveTypeTable::Parser::ProcessItemField(DynamicString const&)
ScannableObjectiveTypeTable::Parser::EndItem(DynamicString const&)
ScannableObjectiveInstanceTable::Parser::~Parser()
ScannableObjectiveInstanceTable::Parser::BeginItem(DynamicString const&)
ScannableObjectiveInstanceTable::Parser::ProcessItemField(DynamicString const&)
ScannableObjectiveInstanceTable::Parser::EndItem(DynamicString const&)
NuVector<unsigned long>::Reserve(unsigned int, bool)
SVarCityObjective::SVarCityObjective(char const*, int, ScriptContext&)
SVarCityObjective::RefreshInstanceIndex()
SVarCityObjective::SVarCityObjective(char const*, ScriptContext&)
SVarCityObjective::~SVarCityObjective()
SVarCityObjective::~SVarCityObjective()
SVarCityObjective::GetRef()
SVarCityObjective::SetRef(int)
SVarCityObjective::AsBool() const
SVarCityObjective::Set(ScriptVariable const*)
SVarCityObjective::Equals(ScriptVariable const*)
SVarCityObjective::GetParamFrom(ScriptContext&, int)
SVarCityObjective::ReturnToContext(int, ScriptContext&, int)
void ScriptContext::SetReturn<SVarCityObjective, int>(int, int)
SVarCityObjective::ReturnToContext(char const*, ScriptContext&, int)
SVarCityObjective::SetObjectiveId(char const*)
SVarCityObjective::GetObjectiveId() const
SVarCityObjective::GetHandle() const
SVarCityObjective::GetInstanceProgressIndex() const
SVarCityObjective::Init()
SAction_Job_TextToCityObjective::Exec(ScriptContext&)
SAction_CityObjective_LinkGizmo_TEXT::Exec(ScriptContext&)
SAction_CityObjective_LinkGizmo::Exec(ScriptContext&)
SAction_CityObjective_LinkCharacter_TEXT::Exec(ScriptContext&)
SAction_CityObjective_LinkCharacter::Exec(ScriptContext&)
SAction_CityObjective_SetComplete_TEXT::Exec(ScriptContext&)
SAction_CityObjective_SetComplete::Exec(ScriptContext&)
SAction_CityObjective_IsComplete_TEXT::Exec(ScriptContext&)
SAction_CityObjective_IsComplete::Exec(ScriptContext&)
SAction_CityObjective_SetHidden_TEXT::Exec(ScriptContext&)
SAction_CityObjective_SetHidden::Exec(ScriptContext&)
SAction_CityObjective_IsHidden_TEXT::Exec(ScriptContext&)
SAction_CityObjective_IsHidden::Exec(ScriptContext&)
SAction_CityObjective_RefreshReport::Exec(ScriptContext&)
SAction_CityObjective_GetReportCount::Exec(ScriptContext&)
SAction_CityObjective_GetReportMax::Exec(ScriptContext&)
SAction_CityObjective_SuppressType::Exec(ScriptContext&)
SAction_CityObjective_SuppressAllTypes::Exec(ScriptContext&)
SAction_PDA_ProgressPanelActive::Exec(ScriptContext&)
SAction_CityObjective_LinkGizmo_TEXT::~SAction_CityObjective_LinkGizmo_TEXT()
SAction_CityObjective_LinkGizmo_TEXT::GetName() const
SAction_CityObjective_LinkGizmo_TEXT::GetInputs(SCmdParams&) const
SAction_CityObjective_LinkGizmo_TEXT::GetOutputs(SCmdParams&) const
SAction_CityObjective_LinkGizmo::~SAction_CityObjective_LinkGizmo()
SAction_CityObjective_LinkGizmo::GetName() const
SAction_CityObjective_LinkGizmo::GetInputs(SCmdParams&) const
SAction_CityObjective_LinkGizmo::GetOutputs(SCmdParams&) const
SAction_CityObjective_LinkCharacter_TEXT::~SAction_CityObjective_LinkCharacter_TEXT()
SAction_CityObjective_LinkCharacter_TEXT::GetName() const
SAction_CityObjective_LinkCharacter_TEXT::GetInputs(SCmdParams&) const
SAction_CityObjective_LinkCharacter_TEXT::GetOutputs(SCmdParams&) const
SAction_CityObjective_LinkCharacter::~SAction_CityObjective_LinkCharacter()
SAction_CityObjective_LinkCharacter::GetName() const
SAction_CityObjective_LinkCharacter::GetInputs(SCmdParams&) const
SAction_CityObjective_LinkCharacter::GetOutputs(SCmdParams&) const
SAction_CityObjective_SetComplete_TEXT::~SAction_CityObjective_SetComplete_TEXT()
SAction_CityObjective_SetComplete_TEXT::GetName() const
SAction_CityObjective_SetComplete_TEXT::GetInputs(SCmdParams&) const
SAction_CityObjective_SetComplete_TEXT::GetOutputs(SCmdParams&) const
SAction_CityObjective_SetComplete::~SAction_CityObjective_SetComplete()
SAction_CityObjective_SetComplete::GetName() const
SAction_CityObjective_SetComplete::GetInputs(SCmdParams&) const
SAction_CityObjective_SetComplete::GetOutputs(SCmdParams&) const
SAction_CityObjective_IsComplete_TEXT::~SAction_CityObjective_IsComplete_TEXT()
SAction_CityObjective_IsComplete_TEXT::GetName() const
SAction_CityObjective_IsComplete_TEXT::GetInputs(SCmdParams&) const
SAction_CityObjective_IsComplete_TEXT::GetOutputs(SCmdParams&) const
SAction_CityObjective_IsComplete::~SAction_CityObjective_IsComplete()
SAction_CityObjective_IsComplete::GetName() const
SAction_CityObjective_IsComplete::GetInputs(SCmdParams&) const
SAction_CityObjective_IsComplete::GetOutputs(SCmdParams&) const
SAction_CityObjective_SetHidden_TEXT::~SAction_CityObjective_SetHidden_TEXT()
SAction_CityObjective_SetHidden_TEXT::GetName() const
SAction_CityObjective_SetHidden_TEXT::GetInputs(SCmdParams&) const
SAction_CityObjective_SetHidden_TEXT::GetOutputs(SCmdParams&) const
SAction_CityObjective_SetHidden::~SAction_CityObjective_SetHidden()
SAction_CityObjective_SetHidden::GetName() const
SAction_CityObjective_SetHidden::GetInputs(SCmdParams&) const
SAction_CityObjective_SetHidden::GetOutputs(SCmdParams&) const
SAction_CityObjective_IsHidden_TEXT::~SAction_CityObjective_IsHidden_TEXT()
SAction_CityObjective_IsHidden_TEXT::GetName() const
SAction_CityObjective_IsHidden_TEXT::GetInputs(SCmdParams&) const
SAction_CityObjective_IsHidden_TEXT::GetOutputs(SCmdParams&) const
SAction_CityObjective_IsHidden::~SAction_CityObjective_IsHidden()
SAction_CityObjective_IsHidden::GetName() const
SAction_CityObjective_IsHidden::GetInputs(SCmdParams&) const
SAction_CityObjective_IsHidden::GetOutputs(SCmdParams&) const
SAction_CityObjective_RefreshReport::~SAction_CityObjective_RefreshReport()
SAction_CityObjective_RefreshReport::GetName() const
SAction_CityObjective_RefreshReport::GetInputs(SCmdParams&) const
SAction_CityObjective_RefreshReport::GetOutputs(SCmdParams&) const
SAction_CityObjective_GetReportCount::~SAction_CityObjective_GetReportCount()
SAction_CityObjective_GetReportCount::GetName() const
SAction_CityObjective_GetReportCount::GetInputs(SCmdParams&) const
SAction_CityObjective_GetReportCount::GetOutputs(SCmdParams&) const
SAction_CityObjective_GetReportMax::~SAction_CityObjective_GetReportMax()
SAction_CityObjective_GetReportMax::GetName() const
SAction_CityObjective_GetReportMax::GetInputs(SCmdParams&) const
SAction_CityObjective_GetReportMax::GetOutputs(SCmdParams&) const
SAction_CityObjective_SuppressType::~SAction_CityObjective_SuppressType()
SAction_CityObjective_SuppressType::GetName() const
SAction_CityObjective_SuppressType::GetInputs(SCmdParams&) const
SAction_CityObjective_SuppressType::GetOutputs(SCmdParams&) const
SAction_CityObjective_SuppressAllTypes::~SAction_CityObjective_SuppressAllTypes()
SAction_CityObjective_SuppressAllTypes::GetName() const
SAction_CityObjective_SuppressAllTypes::GetInputs(SCmdParams&) const
SAction_CityObjective_SuppressAllTypes::GetOutputs(SCmdParams&) const
SAction_PDA_ProgressPanelActive::~SAction_PDA_ProgressPanelActive()
SAction_PDA_ProgressPanelActive::GetName() const
SAction_PDA_ProgressPanelActive::GetInputs(SCmdParams&) const
SAction_PDA_ProgressPanelActive::GetOutputs(SCmdParams&) const
SAction_Job_TextToCityObjective::~SAction_Job_TextToCityObjective()
SAction_Job_TextToCityObjective::GetName() const
SAction_Job_TextToCityObjective::GetInputs(SCmdParams&) const
SAction_Job_TextToCityObjective::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarCityObjective>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarCityObjective>(char const*, ScriptContext&)
ScannableObjectiveAddon::ScannableObjectiveAddon(int)
ScannableObjectiveAddon::~ScannableObjectiveAddon()
non-virtual thunk to ScannableObjectiveAddon::~ScannableObjectiveAddon()
ScannableObjectiveAddon::~ScannableObjectiveAddon()
non-virtual thunk to ScannableObjectiveAddon::~ScannableObjectiveAddon()
ScannableObjectiveAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to ScannableObjectiveAddon::OnHook(unsigned char, HookArgs*)
ScannableObjectiveAddon::GetObjectiveInstanceHandle() const
EdRefScannableObjective::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefScannableObjective::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefScannableObjective::PopulateTypeEnum(ScannableObjectiveTypeTable const&)
EdRefScannableObjective::ClearTypeEnum()
ScannableObjectiveEdPlaceableHelper::ScannableObjectiveEdPlaceableHelper()
ScannableObjectiveEdPlaceableHelper::Initialise()
ScannableObjectiveEdPlaceableHelper::GetManNumObjects(ClassManager*, void*)
ScannableObjectiveManager::GetNumLocators() const
ScannableObjectiveEdPlaceableHelper::GetManNextObject(ClassManager*, void*, void*)
ScannableObjectiveManager::GetLocatorAtIndex(int) const
ScannableObjectiveEdPlaceableHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ScannableObjectiveManager::AddLocator(ScannableObjectiveLocator*)
ScannableObjectiveEdPlaceableHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ScannableObjectiveManager::RemoveLocator(ScannableObjectiveLocator*)
ScannableObjectiveLocator::ScannableObjectiveLocator(EdRegContext&)
ScannableObjectiveLocator::GetClass() const
ScannableObjectiveLocator::GetInstanceId() const
ScannableObjectiveLocator::GetTransform(VuMtx&) const
ScannableObjectiveLocator::SetTransform(VuMtx const&)
ScannableObjectiveLocator::GetPosition(VuVec&) const
ScannableObjectiveLocator::SetPosition(VuVec const&)
ScannableObjectiveManager::ScannableObjectiveManager(LevelContainer&)
ScannableObjectiveManager::~ScannableObjectiveManager()
ScannableObjectiveManager::~ScannableObjectiveManager()
ScannableObjectiveManager::FindLocator(HashedNameParam const&) const
ScannableObjectiveManager::EventNotify(Event&, NuEventData&)
ScannableObjectiveLocator::~ScannableObjectiveLocator()
ScannableObjectiveLocator::~ScannableObjectiveLocator()
non-virtual thunk to ScannableObjectiveLocator::~ScannableObjectiveLocator()
non-virtual thunk to ScannableObjectiveLocator::~ScannableObjectiveLocator()
EdRefScannableObjective::~EdRefScannableObjective()
ScannableObjectiveEdPlaceableHelper::~ScannableObjectiveEdPlaceableHelper()
ClassManagerAccessor<ScannableObjectiveManager>::GetFromCreate(ILevelContainer const&)
ScannableObjectiveTypeInterface::ScannableObjectiveTypeInterface()
ScannableObjectiveSystem::GetTypeTable() const
ScannableObjectiveTypeInterface::~ScannableObjectiveTypeInterface()
ScannableObjectiveTypeInterface::FindType(HashedNameParam const&) const
ScannableObjectiveTypeInterface::GetTable() const
ScannableObjectiveInterface::ScannableObjectiveInterface()
ScannableObjectiveSystem::GetInstanceTable() const
ScannableObjectiveInterface::~ScannableObjectiveInterface()
ScannableObjectiveInterface::FindInstanceHandle(HashedNameParam const&) const
ScannableObjectiveInterface::FindHandleForInstanceIndex(int) const
ScannableObjectiveInterface::IsValidHandle(int) const
ScannableObjectiveInterface::GetInstanceIndexForHandle(int) const
ScannableObjectiveInterface::GetTypeForHandle(int) const
ScannableObjectiveInterface::GetInstance(int) const
ScannableObjectiveInterface::GetTypeIndexForHandle(int) const
ScannableObjectiveInterface::IsInstanceUnlocked(int) const
ScannableObjectiveInterface::GetInstanceUnlockCriterion(int) const
ScannableObjectiveInterface::IsInstanceHiddenWhenLocked(int) const
ScannableObjectiveInterface::CreateAddOnForInstance(HashedNameParam const&) const
ScannableObjectiveInterface::CreateAddOnForHandle(int) const
ScannableObjectiveInterface::GetAddonFromGizmo(Gizmo*) const
ScannableObjectiveInterface::GetAddonFromCharacter(MechCharacter*) const
ScannableObjectiveInterface::CalculateTypeScore(HashedNameParam const&) const
ScannableObjectiveSystem::GetProgressData()
ScannableObjectiveProgress::IsInstanceCompleted(unsigned int) const
ScannableObjectiveInterface::CalculateTypeScoreForDistrict(HashedNameParam const&, eDistrictID) const
ScannableObjectiveInterface::CalculateOverallDistrictScore(eDistrictID) const
ScannableObjectiveInterface::CalculateOverallCityScore() const
ScannableObjectiveInterface::GetTypes() const
ScannableObjectiveInterface::PopulateReport(ObjectiveReport&)
ScannableObjectiveProgress::CompleteEvent::Fire(NuEventData const&)
ScannableObjectiveProgress::MapOpenEvent::Fire(NuEventData const&)
ScannableObjectiveProgress::MapCloseEvent::Fire(NuEventData const&)
ScannableObjectiveProgress::ScannableObjectiveProgress()
ScannableObjectiveProgress::~ScannableObjectiveProgress()
ScannableObjectiveProgress::Shutdown()
ScannableObjectiveProgress::Init(int)
ScannableObjectiveProgress::GetTotalNumInstances() const
ScannableObjectiveProgress::Clear()
ScannableObjectiveProgress::SetAllComplete()
ScannableObjectiveProgress::CacheState()
ScannableObjectiveProgress::FinaliseState()
ScannableObjectiveProgress::ResetState()
ScannableObjectiveProgress::ShouldForceKeepFlag(unsigned int)
ScannableObjectiveProgress::SetCompleteFlagInternal(int)
ScannableObjectiveProgress::SetInstanceCompleted(unsigned int, bool)
ScannableObjectiveProgress::SetInstanceHidden(unsigned int, bool)
ScannableObjectiveProgress::IsInstanceHidden(unsigned int) const
ObjectiveLoadSaveItem::ObjectiveLoadSaveItem(char const*)
ObjectiveLoadSaveItem::~ObjectiveLoadSaveItem()
ObjectiveLoadSaveItem::~ObjectiveLoadSaveItem()
ObjectiveLoadSaveItem::GetTotalSizeInBytes()
ObjectiveLoadSaveItem::CalculateDataSize()
ObjectiveLoadSaveItem::Reset()
ObjectiveLoadSaveItem::SaveSaveGame(EdStream&, int)
ObjectiveLoadSaveItem::LoadSaveGame(EdStream&, int, int)
ScannableObjectiveSystem::ScannableObjectiveSystem()
ScannableObjectiveSystem::~ScannableObjectiveSystem()
ScannableObjectiveSystem::~ScannableObjectiveSystem()
ScannableObjectiveSystem::GetHelper()
ScannableObjectiveSystem::Init()
ScannableObjectiveSystem::OnLoadPermComplete()
ScannableObjectiveSystem::EventNotify(Event&, NuEventData&)
ScannableObjectiveSystem::ShutDown()
ScannableObjectiveSystem::OnEnterLevel(LegoLevelContainer&)
ScannableObjectiveSystem::AddManagersForLevel(LegoLevelContainer&)
ScannableObjectiveSystem::RemoveManagersForLevel(LegoLevelContainer&)
ScannableObjectiveSystem::GetTypeSuppressor()
ScannableObjectiveSystem::ShouldDisplayType(int) const
ScannableObjectiveSystem::SetObjectiveComplete(char const*)
ScannableObjectiveSystem::IsObjectiveComplete(HashedNameParam const&)
ScannableObjectiveSystem::IsObjectiveComplete(char const*)
ScannableObjectiveSystem::SetObjectiveHidden(char const*, bool)
ScannableObjectiveSystem::IsObjectiveHidden(char const*)
ScannableObjectiveProgress::CompleteEvent::~CompleteEvent()
ScannableObjectiveProgress::MapOpenEvent::~MapOpenEvent()
ScannableObjectiveProgress::MapCloseEvent::~MapCloseEvent()
ScannableObjectiveManagerHelper::~ScannableObjectiveManagerHelper()
HotSpot::TypeLibrary::TypeLibrary()
HotSpot::TypeLibrary::~TypeLibrary()
HotSpot::TypeLibrary::DestroyTypes()
HotSpot::TypeLibrary::LoadFromFile(char const*)
HotSpot::TypeLibrary::AllocateTypes(int)
HotSpot::TypeLibrary::Parser::~Parser()
HotSpot::TypeLibrary::GetNumTypes() const
HotSpot::TypeLibrary::GetTypeFromName(char const*) const
HotSpot::TypeLibrary::GetNameForType(int) const
HotSpot::TypeLibrary::GetTypeInfo(int) const
HotSpot::TypeLibrary::GetVfxNameForType(int) const
HotSpot::TypeLibrary::GetHaloSpecialNameForType(int) const
HotSpot::TypeLibrary::GetColourForType(int) const
HotSpot::TypeLibrary::TypeInfo::TypeInfo()
HotSpotCondition::HotSpotCondition()
HotSpotSinglePlayerInsideCondition::~HotSpotSinglePlayerInsideCondition()
HotSpotCondition::~HotSpotCondition()
HotSpotCondition::Reset(HotSpot&)
HotSpotCondition::ResetLatch()
HotSpotCondition::EvaluateLatched(HotSpot&, float, HotSpot::TriggerInfo&)
HotSpotResponse::HotSpotResponse()
HotSpotResponse::~HotSpotResponse()
HotSpot::TriggerInfo::TriggerInfo()
HotSpot::TriggerInfo::TriggerInfo(HotSpot::TriggerInfo const&)
HotSpot::TriggerInfo::operator=(HotSpot::TriggerInfo const&)
HotSpot::TriggerInfo::Reset()
HotSpot::TriggerInfo::WasTriggeredByAnyPlayer() const
HotSpot::HotSpot(EdRegContext&, HotSpotManager&)
HotSpot::SetDefaultCondition()
HotSpot::~HotSpot()
HotSpot::ReleaseVFX()
non-virtual thunk to HotSpot::~HotSpot()
HotSpot::~HotSpot()
non-virtual thunk to HotSpot::~HotSpot()
HotSpot::GetClass() const
HotSpot::GetState() const
HotSpot::IsEnabled() const
HotSpot::SetIconType(int)
HotSpot::AcquireVFX()
HotSpot::GetIconType()
HotSpot::GetIconTypeForName(char const*)
HotSpot::SetHaloVisible(bool)
HotSpot::IsHaloVisible()
HotSpot::IsVisibleForPlayer(int)
HotSpot::AutoDetectWaitForSafeGuard()
HotSpot::Enable()
HotSpot::SetState(HotSpot::eState)
HotSpot::SetWaitForSafeGuard(bool)
HotSpot::MoveToActiveList()
HotSpot::Disable(bool)
HotSpot::DisableInternal()
HotSpot::MoveToInactiveList()
HotSpot::Trigger(HotSpot::TriggerInfo const&)
HotSpot::Reset()
HotSpot::SetCondition(HotSpotCondition*)
HotSpot::Clear(bool)
HotSpot::SetResponse(HotSpotResponse*)
HotSpot::Update(float)
HotSpot::IsCurrentlyDetectable()
HotSpot::SetVFXVisibilityAllowed(bool)
HotSpot::GetOwner()
GetCurrentRenderPlayer(ManagerRenderData*)
HotSpot::RenderHotSpot(ManagerRenderData*)
HotSpotManager::GetHaloSpecial(int)
HotSpotManager::GetHotSpotColour(int)
HotSpotManager::GetHotSpotPresence() const
HotSpot::RenderVFX()
HotSpot::SetAutoDisableOnTrigger(bool)
HotSpot::GetAutoDisable()
HotSpotManager::AreHotSpotsAllowed() const
HotSpot::ShouldWaitForSafeGuard()
HotSpot::GetParam(ScriptContext&, int)
HotSpotSystem::HotSpotSystem()
HotSpotSystem::~HotSpotSystem()
HotSpotSystem::~HotSpotSystem()
HotSpotSystem::GetHelper()
HotSpotSystem::Init()
HotSpotSystem::InitVfxTypes()
HotSpotSystem::ShutDown()
HotSpotSystem::AddManagersForLevel(LegoLevelContainer&)
HotSpotManager::RegisterProcessing()
HotSpotManager::RegisterRendering()
HotSpotSystem::RemoveManagersForLevel(LegoLevelContainer&)
HotSpotSystem::OnEnterLevel(LegoLevelContainer&)
HotSpotManager::AcquireSpecials()
HotSpotSystem::OnExitLevel(LegoLevelContainer&)
HotSpotManager::OnExitLevel()
HotSpotSystem::OnResetLevel(LegoLevelContainer&)
HotSpotSystem::FindHotSpotByName(char const*) const
HotSpotManager::FindHotSpotByName(char const*) const
HotSpotSystem::RegisterScriptFunctionality()
HotSpotManager::HotSpotManager()
HotSpotManager::AllocateHaloSpecials()
HotSpotManager::~HotSpotManager()
HotSpotManager::DestroyHaloSpecials()
HotSpotManager::~HotSpotManager()
HotSpotManager::FindHotSpotByUid(int) const
HotSpotManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
HotSpotManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
HotSpotManager::UpdateVFXVisibilityHack()
HotSpotManager::UpdateHotSpotPresence(float)
HotSpotManager::EventNotify(Event&, NuEventData&)
HotSpotSinglePlayerInsideCondition::HotSpotSinglePlayerInsideCondition()
HotSpotSinglePlayerInsideCondition::~HotSpotSinglePlayerInsideCondition()
HotSpotSinglePlayerInsideCondition::Evaluate(HotSpot&, float, HotSpot::TriggerInfo&)
HotSpotScriptCallbackResponse::HotSpotScriptCallbackResponse(ScriptContext&, ScriptScope*)
HotSpotScriptCallbackResponse::Perform(HotSpot&, HotSpot::TriggerInfo const&)
HotSpotResponse::~HotSpotResponse()
HotSpotScriptCallbackResponse::~HotSpotScriptCallbackResponse()
HotSpot::TypeLibrary::Parser::~Parser()
HotSpot::TypeLibrary::Parser::BeginItem(DynamicString const&)
HotSpot::TypeLibrary::Parser::ProcessItemField(DynamicString const&)
HotSpot::TypeLibrary::Parser::EndItem(DynamicString const&)
HotSpotManagerHelper::~HotSpotManagerHelper()
HotSpotEdPlaceableHelper::~HotSpotEdPlaceableHelper()
HotSpotEdPlaceableHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
HotSpotEdPlaceableHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
HotSpotEdPlaceableHelper::GetManNumObjects(ClassManager*, void*)
HotSpotEdPlaceableHelper::GetManNextObject(ClassManager*, void*, void*)
HotSpotEdPlaceableHelper::Initialise()
DynamicScriptVariable<HotSpot>::~DynamicScriptVariable()
DynamicScriptVariable<HotSpot>::~DynamicScriptVariable()
DynamicScriptVariable<HotSpot>::Set(ScriptVariable const*)
DynamicScriptVariable<HotSpot>::EventNotify(Event&, NuEventData&)
non-virtual thunk to DynamicScriptVariable<HotSpot>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<HotSpot>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<HotSpot>::EventNotify(Event&, NuEventData&)
HotSpotScriptVariable::Init()
HotSpotScriptVariable::Equals(ScriptVariable const*)
HotSpotScriptVariable::LoadVariable(char const*)
SAction_HotSpot2Position::Exec(ScriptContext&)
SAction_Text2HotSpot::Exec(ScriptContext&)
void ScriptContext::SetReturn<HotSpotScriptVariable, HotSpot*>(int, HotSpot*)
SAction_HotSpot::Exec(ScriptContext&)
void ScriptContext::SetReturn<HotSpotScriptVariable, sDynamicVariableData>(int, sDynamicVariableData)
HotSpotAction_SetActive::Exec(ScriptContext&)
HotSpotAction_SetIcon::Exec(ScriptContext&)
HotSpotAction_SetHaloVisible::Exec(ScriptContext&)
HotSpotAction_TriggerDummy::Exec(ScriptContext&)
HotSpotAction_Trigger::Exec(ScriptContext&)
HotSpotAction_ContainsCharacter::Exec(ScriptContext&)
HotSpotAction_ContainsVehicle::Exec(ScriptContext&)
HotSpotAction_ScriptResponse::Exec(ScriptContext&)
HotSpotAction_SetAutoDisable::Exec(ScriptContext&)
HotSpotAction_NoCondition::Exec(ScriptContext&)
SAction_HotSpot_WaitForSafeGuard::Exec(ScriptContext&)
SAction_HotSpotAction_Clear::Exec(ScriptContext&)
HotSpotScriptVariable::~HotSpotScriptVariable()
HotSpotScriptVariable::AsBool() const
HotSpotScriptVariable::AsText() const
non-virtual thunk to HotSpotScriptVariable::~HotSpotScriptVariable()
non-virtual thunk to HotSpotScriptVariable::~HotSpotScriptVariable()
SAction_HotSpot::~SAction_HotSpot()
SAction_HotSpot::GetName() const
SAction_HotSpot::GetInputs(SCmdParams&) const
SAction_HotSpot::GetOutputs(SCmdParams&) const
SAction_Text2HotSpot::~SAction_Text2HotSpot()
SAction_Text2HotSpot::GetName() const
SAction_Text2HotSpot::GetInputs(SCmdParams&) const
SAction_Text2HotSpot::GetOutputs(SCmdParams&) const
SAction_HotSpot2Position::~SAction_HotSpot2Position()
SAction_HotSpot2Position::GetName() const
SAction_HotSpot2Position::GetInputs(SCmdParams&) const
SAction_HotSpot2Position::GetOutputs(SCmdParams&) const
HotSpotAction_SetActive::~HotSpotAction_SetActive()
HotSpotAction_SetActive::GetName() const
HotSpotAction_SetActive::GetInputs(SCmdParams&) const
HotSpotAction_SetActive::GetOutputs(SCmdParams&) const
HotSpotAction_SetIcon::~HotSpotAction_SetIcon()
HotSpotAction_SetIcon::GetName() const
HotSpotAction_SetIcon::GetInputs(SCmdParams&) const
HotSpotAction_SetIcon::GetOutputs(SCmdParams&) const
HotSpotAction_SetHaloVisible::~HotSpotAction_SetHaloVisible()
HotSpotAction_SetHaloVisible::GetName() const
HotSpotAction_SetHaloVisible::GetInputs(SCmdParams&) const
HotSpotAction_SetHaloVisible::GetOutputs(SCmdParams&) const
HotSpotAction_SetAutoDisable::~HotSpotAction_SetAutoDisable()
HotSpotAction_SetAutoDisable::GetName() const
HotSpotAction_SetAutoDisable::GetInputs(SCmdParams&) const
HotSpotAction_SetAutoDisable::GetOutputs(SCmdParams&) const
HotSpotAction_Trigger::~HotSpotAction_Trigger()
HotSpotAction_Trigger::GetName() const
HotSpotAction_Trigger::GetInputs(SCmdParams&) const
HotSpotAction_Trigger::GetOutputs(SCmdParams&) const
HotSpotAction_ContainsCharacter::~HotSpotAction_ContainsCharacter()
HotSpotAction_ContainsCharacter::GetName() const
HotSpotAction_ContainsCharacter::GetInputs(SCmdParams&) const
HotSpotAction_ContainsCharacter::GetOutputs(SCmdParams&) const
HotSpotAction_ContainsVehicle::~HotSpotAction_ContainsVehicle()
HotSpotAction_ContainsVehicle::GetName() const
HotSpotAction_ContainsVehicle::GetInputs(SCmdParams&) const
HotSpotAction_ContainsVehicle::GetOutputs(SCmdParams&) const
SAction_HotSpot_WaitForSafeGuard::~SAction_HotSpot_WaitForSafeGuard()
SAction_HotSpot_WaitForSafeGuard::GetName() const
SAction_HotSpot_WaitForSafeGuard::GetInputs(SCmdParams&) const
SAction_HotSpot_WaitForSafeGuard::GetOutputs(SCmdParams&) const
SAction_HotSpotAction_Clear::~SAction_HotSpotAction_Clear()
SAction_HotSpotAction_Clear::GetName() const
SAction_HotSpotAction_Clear::GetInputs(SCmdParams&) const
SAction_HotSpotAction_Clear::GetOutputs(SCmdParams&) const
HotSpotAction_ScriptResponse::~HotSpotAction_ScriptResponse()
HotSpotAction_ScriptResponse::GetName() const
HotSpotAction_ScriptResponse::GetInputs(SCmdParams&) const
HotSpotAction_ScriptResponse::GetOutputs(SCmdParams&) const
HotSpotAction_NoCondition::~HotSpotAction_NoCondition()
HotSpotAction_NoCondition::GetName() const
HotSpotAction_NoCondition::GetInputs(SCmdParams&) const
HotSpotAction_NoCondition::GetOutputs(SCmdParams&) const
HotSpotAction_TriggerDummy::~HotSpotAction_TriggerDummy()
HotSpotAction_TriggerDummy::GetName() const
HotSpotAction_TriggerDummy::GetInputs(SCmdParams&) const
HotSpotAction_TriggerDummy::GetOutputs(SCmdParams&) const
SAction_HotSpot2Text::~SAction_HotSpot2Text()
SAction_HotSpot2Text::GetName() const
SAction_HotSpot2Text::GetInputs(SCmdParams&) const
SAction_HotSpot2Text::GetOutputs(SCmdParams&) const
SAction_HotSpot2Text::Exec(ScriptContext&)
ScriptVariable* CreateObject<HotSpotScriptVariable>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<HotSpotScriptVariable>(char const*, ScriptContext&)
cTakeDownOnFoot::cTakeDownOnFoot()
cTakeDownOnFoot::cTakeDownOnFoot(unsigned int)
cTakeDownOnFoot::~cTakeDownOnFoot()
cTakeDownOnFoot::~cTakeDownOnFoot()
cTakeDownOnFoot::ClearTasks(Brain&)
cTakeDownOnFoot::Activate()
cTakeDownOnFoot::Terminate(Brain&)
cTakeDownOnFoot::Process(Brain&, float const&)
cTakeDownOnFoot::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cLCPlayerOnFoot::cLCPlayerOnFoot()
cLCPlayerOnFoot::Process(Brain&, float const&)
cLCPlayerOnFoot::ProcessFleeingCriminal(Brain&, float const&)
cLCPlayerOnFoot::ProcessCounterableAttacker(Brain&, float const&)
cLCPlayerOnFoot::ProcessAttacks(Brain&, float const&)
cLCPlayerOnFoot::ProcessArrest(Brain&, float const&)
cLCPlayerOnFoot::ProcessWhistle(MechCharacter*)
cGetAttckableStillValidFunctor::operator()(MechCharacter*)
cLegoCityLakCharacterFunctor::~cLegoCityLakCharacterFunctor()
PutDownContext::SetNextOpponent(MechCharacter*)
TurnToPutDownContext::SetOpponent(MechCharacter*)
cGetAttckableFunctor::operator()(MechCharacter*)
MissAttackContext::SetOpponent(MechCharacter*)
PutDownContext::SetOpponent(MechCharacter*)
cLCPlayerOnFoot::~cLCPlayerOnFoot()
cLCPlayerOnFoot::~cLCPlayerOnFoot()
cGetAttckableStillValidFunctor::~cGetAttckableStillValidFunctor()
cGetAttckableFunctor::~cGetAttckableFunctor()
TaxiLanePathFunctor::GetLinkCost(LanePathLink&, GLMap const&, LanePathTargetData const&, LanePathTargetData const*) const
TaxiLanePathFunctor::GetRoadCost(short, LanePathLink::LaneDirection, float&) const
TaxiLanePathFunctor::GoalAchieved(short, LanePathNode const*, GLMap const&, LanePathTargetData const&, LanePathTargetData const&) const
TaxiLanePathFunctor::CostToGoal(short, short, GLMap const&, VuVec const&) const
TaxiGoalTargeter::GetGoal()
TaxiPlanningDecomposer::DecomposeGoal(Steering::Actor const&, GLMap const*, Steering::Goal const&, Steering::Path&, float)
TaxiPlanningDecomposer::WithinGoalRange(VuVec const&, VuVec const&, float) const
TaxiPlanningDecomposer::GoalMoved(VuVec const&) const
TaxiPlanningDecomposer::CalculateGoalPathPosition(GLMap const&)
TaxiPlanningDecomposer::BuildPath(Steering::Actor const&, GLMap const&, Steering::Goal const&)
LaneFinderContext::LaneFinderContext(GLMap const&, LanePath&, LanePathFunctor&, VuVec const&, VuVec const&, float)
LaneFinderContext::~LaneFinderContext()
TaxiPlanningDecomposer::ChangeLane(float, float, float, bool) const
TaxiTask::TaxiTask()
TaxiTask::~TaxiTask()
TaxiTask::~TaxiTask()
TaxiTask::ClearTasks(Brain&)
TaxiTask::Activate()
TaxiTask::Terminate(Brain&)
TaxiTask::Process(Brain&, float const&)
TaxiTask::Initialise(Brain&)
SatNavTarget::operator=(SatNavTarget const&)
TaxiTask::UpdateGoal(SatNavTarget const&)
TaxiTask::Drive(GLMap const*, Steering::SteeringOutput&, float)
NuVector3Base::operator*(NuQuatBase const&) const
TaxiTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
TaxiTask::InitialisePipeline(GLMap const*)
TaxiLanePathFunctor::~TaxiLanePathFunctor()
TaxiGoalTargeter::~TaxiGoalTargeter()
TaxiPlanningDecomposer::~TaxiPlanningDecomposer()
GLRandF32()
LaneFinderContext::~LaneFinderContext()
LanePathFunctor::~LanePathFunctor()
Steering::Targeter::~Targeter()
cArrestTask::cArrestTask()
cArrestTask::cArrestTask(unsigned int)
cArrestTask::~cArrestTask()
cArrestTask::~cArrestTask()
cArrestTask::ClearTasks(Brain&)
cArrestTask::Activate()
cArrestTask::Terminate(Brain&)
cArrestTask::Process(Brain&, float const&)
cTakeDownOnFoot::SetTarget(MechCharacter*)
cArrestTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cAttackTask::cAttackTask()
cAttackTask::cAttackTask(unsigned int)
cAttackTask::~cAttackTask()
non-virtual thunk to cAttackTask::~cAttackTask()
cAttackTask::~cAttackTask()
non-virtual thunk to cAttackTask::~cAttackTask()
cAttackTask::ClearTasks(Brain&)
cAttackTask::Activate()
cAttackTask::Terminate(Brain&)
cAttackTask::SwitchToState(cAttackTask::eState, Brain&)
cAttackTask::Process(Brain&, float const&)
cAttackTask::UpdateFocusTarget(MechCharacter&)
cAttackTask::ShouldIgnoreBadPathing(MechCharacter&) const
cAttackTask::UpdateUnset(Brain&, float)
cAttackTask::UpdateChase(Brain&, float)
cAttackTask::UpdateMoveAround(Brain&, float)
cAttackTask::UpdateIdle(Brain&, float)
cAttackTask::UpdateMoveToAttack(Brain&, float)
cAttackTask::UpdateIdleAttack(Brain&, float)
cAttackTask::UpdateAttack(Brain&, float)
cAttackTask::UpdateTaunt(Brain&, float)
cAttackTask::UpdateIdleNoTarget(Brain&, float)
cAttackTask::UpdateMoveAroundNoTarget(Brain&, float)
cAttackTask::RegisterWithAttackManager(MechCharacter&)
cAttackTask::DoMore(MechCharacter&)
cAttackTask::StrafeIdle(MechCharacter&, bool)
cAttackTask::ReleaseLockMoveToAttack(MechCharacter&)
cAttackTask::ReleaseLockAttack(MechCharacter&)
cAttackTask::SelectAction(MechCharacter&)
cAttackTask::Finish(MechCharacter&)
cAttackTask::CreateGotoTargetTask(MechCharacter&, Brain&)
cAttackTask::ClearLocation(MechCharacter&)
cAttackTask::StrafeOff(MechCharacter&)
cAttackTask::CreateGotoAroundTask(MechCharacter&, Brain&)
cAttackTask::StrafeOn(MechCharacter&)
cAttackTask::CreateTauntContext(MechCharacter&)
cAttackTask::DoLess(MechCharacter&)
cAttackTask::CreateAttackContext(MechCharacter&)
cAttackTask::UnregisterWithAttackManager(MechCharacter&)
cAttackTask::InitActionList(MechCharacter&)
cAttackTask::InNonMoveContext(MechCharacter&) const
cAttackTask::AttackedIgnored(MechCharacter&) const
cAttackTask::AttackAllowed(MechCharacter&) const
cAttackTask::TryLockMoveToAttack(MechCharacter&)
cAttackTask::ShouldChase(MechCharacter&, bool) const
cAttackTask::GetAttackLocation(MechCharacter&, bool, bool) const
cAttackTask::ShouldReactToSpecialEvent(MechCharacter&) const
cAttackTask::ProcessPathToTask(Brain&, float const&)
cAttackTask::ForceInMyArea(MechCharacter&)
cAttackTask::ShouldGetUpFinisher(MechCharacter&) const
cAttackTask::SignalRealAttackMoveFinished(MechCharacter&)
cAttackTask::ShouldTaunt(MechCharacter&) const
cAttackTask::AttackedInArea(MechCharacter&) const
cAttackTask::InAttackRange(MechCharacter&, bool) const
cAttackTask::TargetAttackable(MechCharacter&) const
cAttackTask::IsLockedPrimary(MechCharacter&)
cAttackTask::TryLockAttack(MechCharacter&)
cAttackTask::IsLockAttackFree(MechCharacter&) const
cAttackTask::SetHeadingNoTarget(MechCharacter&)
cAttackTask::AmIInsideMyArea(MechCharacter&) const
cAttackTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cAttackTask::EventNotify(Event&, NuEventData&)
non-virtual thunk to cAttackTask::EventNotify(Event&, NuEventData&)
cAttackTask::SetTarget(MechCharacter&, MechCharacter*, int)
cAttackTask::GetManager() const
cAttackTask::FindManager() const
AIFocusPoint_ChrysPivaTarget::~AIFocusPoint_ChrysPivaTarget()
AIFocusPoint_ChrysPivaTarget::~AIFocusPoint_ChrysPivaTarget()
AIFocusPoint_ChrysPivaTarget::GetPosition(VuVec&)
AIFocusPoint_ChrysPivaTarget::GetRadius() const
AIFocusPoint_ChrysPivaTarget::SetRadius(float)
AIFocusPoint_ChrysPivaTarget::GetNode()
AIFocusPoint::GetDirection() const
AIFocusPoint::SetDirection(float)
AIFocusPoint_ChrysPivaTarget::GetType() const
AIFocusPoint_ChrysPivaTarget::IsValid() const
AIFocusPoint::NotifyObjectDestroy(void*)
AIFocusPoint_ChrysPivaTarget::ContainerRemoved(LevelContainer*)
cMeleeMaster::cMeleeMaster()
cMeleeMaster::cMeleeMaster(unsigned int)
cMeleeMaster::~cMeleeMaster()
cMeleeMaster::~cMeleeMaster()
cMeleeMaster::ClearTasks(Brain&)
cMeleeMaster::Activate()
cMeleeMaster::Process(Brain&, float const&)
cMeleeMaster::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cMeleeMaster::Terminate(Brain&)
cMeleeSlave::cMeleeSlave()
cMeleeSlave::cMeleeSlave(unsigned int)
cMeleeSlave::~cMeleeSlave()
cMeleeSlave::~cMeleeSlave()
cMeleeSlave::ClearTasks(Brain&)
cMeleeSlave::Activate()
cMeleeSlave::Terminate(Brain&)
cMeleeSlave::Process(Brain&, float const&)
cMeleeSlave::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cMeleeSlave::SetSlaveState(unsigned int)
cEnforcerOnFoot::cEnforcerOnFoot()
cEnforcerOnFoot::cEnforcerOnFoot(unsigned int)
cEnforcerOnFoot::~cEnforcerOnFoot()
cEnforcerOnFoot::~cEnforcerOnFoot()
cEnforcerOnFoot::ClearTasks(Brain&)
cEnforcerOnFoot::Activate()
cEnforcerOnFoot::Terminate(Brain&)
cEnforcerOnFoot::Process(Brain&, float const&)
cEnforcerOnFoot::HandleEnforcerSubTasks(Brain&, AITask::State)
cArrestTask::SetTarget(MechCharacter*)
cEnforcerOnFoot::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cCriminalDailyRoutine::cCriminalDailyRoutine()
cCriminalDailyRoutine::cCriminalDailyRoutine(unsigned int)
cCriminalDailyRoutine::~cCriminalDailyRoutine()
cCriminalDailyRoutine::~cCriminalDailyRoutine()
cCriminalDailyRoutine::ClearTasks(Brain&)
cCriminalDailyRoutine::Activate()
cCriminalDailyRoutine::Terminate(Brain&)
cCriminalDailyRoutine::Process(Brain&, float const&)
cCriminalDailyRoutine::DoSomethingInteresting(MechCharacter*)
cCriminalDailyRoutine::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cCriminalDailyRoutine::PlayAnimation(MechCharacter*)
cCriminalDailyRoutine::FindAttractor(MechCharacter*)
cEnforcerDailyRoutine::cEnforcerDailyRoutine()
cEnforcerDailyRoutine::cEnforcerDailyRoutine(unsigned int)
cEnforcerDailyRoutine::~cEnforcerDailyRoutine()
cEnforcerDailyRoutine::~cEnforcerDailyRoutine()
cEnforcerDailyRoutine::ClearTasks(Brain&)
cEnforcerDailyRoutine::Activate()
cEnforcerDailyRoutine::Terminate(Brain&)
cEnforcerDailyRoutine::Process(Brain&, float const&)
cEnforcerDailyRoutine::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cLegoCityAISectorNode::cLegoCityAISectorNode(cAIWorldNode*)
cLegoCityAISectorNode::~cLegoCityAISectorNode()
cLegoCityAISectorNode::~cLegoCityAISectorNode()
cLegoCityAISectorNode::FixupJunctions(LevelContainer&, unsigned int)
cLegoCityAISectorNode::GetNodeInstanceByTypeHook(eAINodeType)
cAINode::IsPortal() const
cLegoCityAIWorldNode::cLegoCityAIWorldNode(LevelContainer*)
cLegoCityAIWorldNode::~cLegoCityAIWorldNode()
cLegoCityAIWorldNode::~cLegoCityAIWorldNode()
cLegoCityAIWorldNode::CreateSectorNode()
StrongPtr<cLegoCityAISectorNode> create<cLegoCityAISectorNode, cLegoCityAIWorldNode*>(cLegoCityAIWorldNode*)
LegoCityPopulationAISystem::CreateAIWorldNode(LevelContainer&) const
LegoCityPopulationAISystem::~LegoCityPopulationAISystem()
cAITrafficLight::cAITrafficLight()
cAITrafficLight::cAITrafficLight(GizmoCitySimpleProp*)
cAITrafficLight::cAITrafficLight(unsigned int)
cAITrafficLight::cAITrafficLight(unsigned int, unsigned int)
cAITrafficLight::cAITrafficLight(cLegoCityAIJunctionNode*)
cAITrafficLight::cAITrafficLight(cLegoCityAIJunctionNode*, GizmoCitySimpleProp*)
cAITrafficLight::~cAITrafficLight()
cAITrafficLight::UnFixup()
cAITrafficLight::~cAITrafficLight()
cAITrafficLight::GetPos() const
cAITrafficLight::SetPos(VuVec const&)
cAITrafficLight::AddSemaphore(iSemaphoreBase const*)
cAITrafficLight::RemoveSemaphore(iSemaphoreBase const*)
cAITrafficLight::GetSemaphoreByIndex(unsigned int) const
cAITrafficLight::GetSemaphoreIndex(iSemaphoreBase const*) const
cAITrafficLight::GetLightGizmo()
cAITrafficLight::Fixup(LevelContainer&)
cAITrafficLight::Fixup(LevelContainer&, unsigned int)
cAITrafficLight::SetLights(bool, bool, bool)
NuListFind<iSemaphoreBase const*, NuListNode<iSemaphoreBase const*> >::Remove(NuListNode<iSemaphoreBase const*>*, NuListNode<iSemaphoreBase const*>*, iSemaphoreBase const* const&)
cLegoCityAIJunctionNode::cLegoCityAIJunctionNode(WeakPtr<cAISectorNode>)
cLegoCityAIJunctionNode::~cLegoCityAIJunctionNode()
cLegoCityAIJunctionNode::~cLegoCityAIJunctionNode()
cLegoCityAIJunctionNode::LinkNodeToLight(GizmoCitySimpleProp*, iSemaphoreBase*)
cLegoCityAIJunctionNode::RemoveNode(iSemaphoreBase*)
cLegoCityAIJunctionNode::GetLightIndex(GizmoCitySimpleProp*) const
cLegoCityAIJunctionNode::GetLightByIndex(unsigned int) const
cLegoCityAIJunctionNode::AddLight(cAITrafficLight*)
cLegoCityAIJunctionNode::LinkNodeToLight(unsigned int, iSemaphoreBase*)
cLegoCityAIJunctionNode::GetLightIndex(unsigned int) const
cLegoCityAIJunctionNode::RemoveLight(cAITrafficLight*)
cLegoCityAIJunctionNode::RemoveNodeFromLight(GizmoCitySimpleProp*, iSemaphoreBase*)
cLegoCityAIJunctionNode::RemoveNodeFromLight(unsigned int, iSemaphoreBase*)
cLegoCityAIJunctionNode::GetLightIndex(cAITrafficLight*) const
cLegoCityAIJunctionNode::GetLightIndex(iSemaphoreBase*) const
cLegoCityAIJunctionNode::Update()
cLegoCityAIJunctionNode::FixupLights(LevelContainer&, unsigned int)
cLegoCityAIJunctionNode::DoLoadHook(AIManager&, NuArchive&, NuList<cAINode const*> const&, NuList<cAIPortalNode*> const&)
NuListFind<cAITrafficLight*, NuListNode<cAITrafficLight*> >::Remove(NuListNode<cAITrafficLight*>*, NuListNode<cAITrafficLight*>*, cAITrafficLight* const&)
cLegoCityAIContainer::cLegoCityAIContainer()
cLegoCityAIContainer::~cLegoCityAIContainer()
cLegoCityAIContainer::~cLegoCityAIContainer()
cLegoCityAIContainer::EventNotify(Event&, NuEventData&)
cLegoCityAIContainer::Reset()
cLegoCityAIContainer::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
cLegoCityAISystem::Render(LegoLevelContainer&, int)
cLegoCityAIContainer::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
cLegoCityAISystem::Process(LegoLevelContainer&)
cLegoCityAISystem::cLegoCityAISystem()
cLegoCityAISystem::~cLegoCityAISystem()
cLegoCityAISystem::~cLegoCityAISystem()
cLegoCityAISystem::Init()
cLegoCityAISystem::AddManagersForLevel(LegoLevelContainer&)
cLegoCityAIContainer::RegisterProcessing()
cLegoCityAIContainer::RegisterRendering()
cLegoCityAISystem::RemoveManagersForLevel(LegoLevelContainer&)
cLegoCityAISystem::OnEnterLevel(LegoLevelContainer&)
cLegoCityAISystem::OnExitLevel(LegoLevelContainer&)
cLegoCityAISystem::EventNotify(Event&, NuEventData&)
cLegoCityAISystem::OnResetLevel(LegoLevelContainer&)
cLegoCityAISystem::BGLoad_CallBack(void*)
cLegoCityAIHelper::~cLegoCityAIHelper()
SAction_CreateAICharacter::Exec(ScriptContext&)
SAction_CreateAIApiVehicle::GetInputs(SCmdParams&) const
SAction_CreateAIApiVehicle::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarApiVehicle, ApiVehicle*>(int, ApiVehicle*)
SAction_OverrideTrafficDensity::Exec(ScriptContext&)
SAction_KillSpawnedTraffic::Exec(ScriptContext&)
SAction_KillTrafficVehicle::Exec(ScriptContext&)
SAction_PurgeVehicleModelPool::Exec(ScriptContext&)
SAction_DustOffVehicleModelPool::Exec(ScriptContext&)
SAction_RequestParkedVehicle::GetInputs(SCmdParams&) const
SAction_RequestParkedVehicle::Exec(ScriptContext&)
SAction_EnablePursueFromTraffic::GetInputs(SCmdParams&) const
SAction_EnablePursueFromTraffic::Exec(ScriptContext&)
SAction_EnableNonPursuingTraffic::Exec(ScriptContext&)
SAction_PursueFromTrafficDriver::Exec(ScriptContext&)
SAction_DisablePursueFromTraffic::GetInputs(SCmdParams&) const
SAction_DisablePursueFromTraffic::Exec(ScriptContext&)
SAction_EnableAggressiveVehiclesFromTraffic::GetInputs(SCmdParams&) const
SAction_EnableAggressiveVehiclesFromTraffic::Exec(ScriptContext&)
SAction_DisableAggressiveVehiclesFromTraffic::GetInputs(SCmdParams&) const
SAction_DisableAggressiveVehiclesFromTraffic::Exec(ScriptContext&)
SAction_DestroyVehiclesFromPopulation::Exec(ScriptContext&)
SAction_StreamedCharacterPreLoad::Exec(ScriptContext&)
SAction_StreamedCharacterIsLoaded::Exec(ScriptContext&)
SAction_StreamedCharacterRelease::Exec(ScriptContext&)
SAction_StreamedCharacterReleaseAll::Exec(ScriptContext&)
SAction_SetPlayerMovement::GetInputs(SCmdParams&) const
SAction_SetPlayerMovement::Exec(ScriptContext&)
SAction_PlayerPressedButton::Exec(ScriptContext&)
SAction_PlayerHeldButton::Exec(ScriptContext&)
SAction_PlayerPressedButton_ApiC::Exec(ScriptContext&)
SAction_PlayerPressedButton_Index::Exec(ScriptContext&)
SAction_GoThroughDoor::Exec(ScriptContext&)
SAction_PlayerSetCharacter::Exec(ScriptContext&)
SAction_CharacterAvailable::Exec(ScriptContext&)
SAction_UnlockCharacterDebug::Exec(ScriptContext&)
SAction_LockCharacterDebug::Exec(ScriptContext&)
SAction_AwardCharacter::Exec(ScriptContext&)
SAction_PlayerInsideArea::Exec(ScriptContext&)
SAction_EnableNetworkInArea::Exec(ScriptContext&)
SAction_DisableNetworkInArea::Exec(ScriptContext&)
SAction_RemoveFromArea::GetInputs(SCmdParams&) const
SAction_RemoveFromArea::Exec(ScriptContext&)
SAction_RemoveCriticalFromArea::GetInputs(SCmdParams&) const
SAction_RemoveCriticalFromArea::Exec(ScriptContext&)
SAction_CountInArea::Exec(ScriptContext&)
SAction_SetHotSpot::Exec(ScriptContext&)
SAction_SetHotSpot::GetInputs(SCmdParams&) const
SAction_GivePlayerStuds::Exec(ScriptContext&)
SAction_UI_StartMission::Exec(ScriptContext&)
SAction_UI_EndMission::Exec(ScriptContext&)
SAction_UI_IsEndMissionComplete::Exec(ScriptContext&)
SAction_UI_ResetMission::Exec(ScriptContext&)
SAction_UI_LoadMissionPrompt::Exec(ScriptContext&)
SAction_UI_HideMissionPrompt::Exec(ScriptContext&)
SAction_UI_ShowMissionPrompt::GetInputs(SCmdParams&) const
SAction_UI_ShowMissionPrompt::Exec(ScriptContext&)
SAction_UI_SetStatsStuds::GetInputs(SCmdParams&) const
SAction_UI_SetStatsStuds::Exec(ScriptContext&)
SAction_UI_SetStatsIsStoryMission::Exec(ScriptContext&)
SAction_UI_SetStatsGoldBricks::Exec(ScriptContext&)
SAction_UI_SetStatsRedBricks::Exec(ScriptContext&)
SAction_UI_SetStatsGoldPlates::Exec(ScriptContext&)
SAction_UI_SetStatsRacePosition::Exec(ScriptContext&)
SAction_UI_ShowMissionCounter::GetInputs(SCmdParams&) const
SAction_UI_ShowMissionCounter::Exec(ScriptContext&)
SAction_UI_ShowMissionDamageBar::GetInputs(SCmdParams&) const
SAction_UI_ShowMissionDamageBar::Exec(ScriptContext&)
SAction_UI_SetMissionCounter::GetInputs(SCmdParams&) const
SAction_UI_SetMissionCounter::Exec(ScriptContext&)
SAction_UI_SetMissionDamageBar::GetInputs(SCmdParams&) const
SAction_UI_SetMissionDamageBar::Exec(ScriptContext&)
SAction_UI_SetMissionDamageBarText::Exec(ScriptContext&)
SAction_UI_SetMissionMessage::GetInputs(SCmdParams&) const
SAction_UI_SetMissionMessage::Exec(ScriptContext&)
SAction_UI_SetMissionHelpText::GetInputs(SCmdParams&) const
SAction_UI_SetMissionHelpText::Exec(ScriptContext&)
SAction_UI_RemoveMissionMessage::Exec(ScriptContext&)
SAction_UI_RemoveMissionHelpText::GetInputs(SCmdParams&) const
SAction_UI_RemoveMissionHelpText::Exec(ScriptContext&)
SAction_UI_ShowHUD::Exec(ScriptContext&)
SAction_UI_ShowPlayerHUD::Exec(ScriptContext&)
SAction_UI_ShowHUDTimer::GetInputs(SCmdParams&) const
SAction_UI_ShowHUDTimer::Exec(ScriptContext&)
SAction_UI_SetHUDTimer::GetInputs(SCmdParams&) const
SAction_UI_SetHUDTimer::Exec(ScriptContext&)
SAction_UI_GetHUDTimerTime::Exec(ScriptContext&)
SAction_UI_PauseHUDTimerDuringMinicut::Exec(ScriptContext&)
SAction_UI_HighlightHUDTimer::Exec(ScriptContext&)
SAction_UI_StopHUDTimer::Exec(ScriptContext&)
SAction_UI_PhoneCall::GetInputs(SCmdParams&) const
SAction_UI_PhoneCall::Exec(ScriptContext&)
SAction_UI_RadioCall::GetInputs(SCmdParams&) const
SAction_UI_RadioCall::Exec(ScriptContext&)
SAction_UI_HideBuildPointPrompt::Exec(ScriptContext&)
SAction_UI_ShowBuildPointPrompt::Exec(ScriptContext&)
SAction_UI_LoadBuildPointResources::Exec(ScriptContext&)
SAction_UI_SetHeroBarMax::Exec(ScriptContext&)
SAction_UI_ShowMapUnlock::Exec(ScriptContext&)
SAction_UI_ShowScreen::Exec(ScriptContext&)
SAction_UI_ShowObjectiveScreen::GetInputs(SCmdParams&) const
SAction_UI_ShowObjectiveScreen::Exec(ScriptContext&)
SAction_UI_HideObjectiveScreen::Exec(ScriptContext&)
SAction_UI_ShowDisguiseWheel::Exec(ScriptContext&)
SAction_UI_IsDisguiseWheelActive::Exec(ScriptContext&)
SAction_UI_ShowLevelSummaryScreen::Exec(ScriptContext&)
SAction_UI_HideLevelSummaryScreen::Exec(ScriptContext&)
SAction_UI_ConfirmLevelSummaryScreen::Exec(ScriptContext&)
SAction_UI_ConfirmLevelSummaryScreen::GetInputs(SCmdParams&) const
SAction_UI_ShowJoinPlayerScreen::Exec(ScriptContext&)
SAction_UI_Map_SetLocatorActive::Exec(ScriptContext&)
SAction_UI_Map_SetLocatorType::Exec(ScriptContext&)
SAction_UI_Map_SetLocked::Exec(ScriptContext&)
SAction_UI_Map_PanToPosition::GetInputs(SCmdParams&) const
SAction_UI_Map_PanToPosition::PerPlayerExec(ScriptContext&, int)
SAction_UI_Map_PanToPosition::Exec(ScriptContext&)
SAction_UI_Map_PanToPosition_Queued::GetInputs(SCmdParams&) const
SAction_UI_Map_PanToPosition_Queued::PerPlayerExec(ScriptContext&, int)
SAction_UI_Map_PanToPosition_Queued::Exec(ScriptContext&)
SAction_IsScreenFaded::Exec(ScriptContext&)
SAction_IsScreenFaded_PlayerSpecific::Exec(ScriptContext&)
SAction_FadeScreen::GetInputs(SCmdParams&) const
SAction_FadeScreen::Exec(ScriptContext&)
SAction_UI_ReturnToPoliceStationEnabled::Exec(ScriptContext&)
SAction_UI_WarnAboutProgressOnExitLevel::Exec(ScriptContext&)
SAction_IsLanguage::Exec(ScriptContext&)
SAction_PrintToScreen::Exec(ScriptContext&)
SAction_SnapCameraToDir::Exec(ScriptContext&)
SAction_PlayersInArea::Exec(ScriptContext&)
SAction_GetPlayerBricks::Exec(ScriptContext&)
SAction_GetClassUnlocked::Exec(ScriptContext&)
SAction_RemovePlayerBricks::Exec(ScriptContext&)
SAction_SetDetectiveFootprint::Exec(ScriptContext&)
SAction_AllowDetectiveMode::Exec(ScriptContext&)
SAction_PlayActionMusic::Exec(ScriptContext&)
SAction_TechnoControlledBy::Exec(ScriptContext&)
SAction_ShowSpeechIcon::Exec(ScriptContext&)
SAction_ShowCharacterIcon::Exec(ScriptContext&)
SAction_SetObjectiveMarker::GetInputs(SCmdParams&) const
SAction_SetObjectiveMarker::Exec(ScriptContext&)
SAction_ShowObjectiveMarker::Exec(ScriptContext&)
SAction_SetParachuteDeployHeight::Exec(ScriptContext&)
SAction_LoadSkydiveSettings::Exec(ScriptContext&)
SAction_EnableSkydiveConstantMove::Exec(ScriptContext&)
SAction_DisableSkydiveConstantMove::Exec(ScriptContext&)
SAction_CutscenePlay::Exec(ScriptContext&)
SAction_LoadConversationManifest::Exec(ScriptContext&)
SAction_AddCharacterToManifest::Exec(ScriptContext&)
SAction_RemoveCharacterFromManifest::Exec(ScriptContext&)
SAction_AddDRCCharacterToManifest::Exec(ScriptContext&)
SAction_AddLocatorToManifest::Exec(ScriptContext&)
SAction_RemoveLocatorFromManifest::Exec(ScriptContext&)
SAction_AddCharacterToConversation::Exec(ScriptContext&)
SAction_PlayConversation::GetInputs(SCmdParams&) const
SAction_PlayConversation::Exec(ScriptContext&)
SAction_SetConversationDuckingScale::Exec(ScriptContext&)
SAction_SetBKConversationFallOff::Exec(ScriptContext&)
SAction_UnloadConversationManifest::Exec(ScriptContext&)
SAction_ConversationIsSamplePlaying::Exec(ScriptContext&)
SAction_ConversationManifestPAKIsLoaded::Exec(ScriptContext&)
SAction_ConversationsInAManifest::Exec(ScriptContext&)
SAction_StopConversation::Exec(ScriptContext&)
SAction_GetConversationLineInSeconds::Exec(ScriptContext&)
SAction_GetConversationLengthInSeconds::Exec(ScriptContext&)
SAction_GetConversationLineCount::Exec(ScriptContext&)
SAction_ConversationLineFinished::Exec(ScriptContext&)
SAction_ConversationLineStarted::Exec(ScriptContext&)
SAction_HasConversationManifestLoaded::Exec(ScriptContext&)
SAction_ToggleSpeechBubble::Exec(ScriptContext&)
SAction_FaceConversationCharacter::Exec(ScriptContext&)
SAction_LCUITargetTypeSwitchToBgLoadedFlashFile::Exec(ScriptContext&)
SAction_LCUITargetMainFrameSetState::Exec(ScriptContext&)
SAction_SlowMo::Exec(ScriptContext&)
cParseContextItem::GetCommandTag() const
cParseContextItem::GetString() const
SAction_EndE3Demo::Exec(ScriptContext&)
SAction_TutorialSetNoFighting::Exec(ScriptContext&)
SAction_TutorialSetNoDeathFromFalling::Exec(ScriptContext&)
SAction_CreateLegoProgressBackup::Exec(ScriptContext&)
SAction_ApplyLegoProgressBackup::Exec(ScriptContext&)
SAction_DestroyLegoProgressBackup::Exec(ScriptContext&)
SAction_IsStatusScreenActive::Exec(ScriptContext&)
SAction_DisableSkydiveWind::Exec(ScriptContext&)
SAction_EnableSkydiveWind::Exec(ScriptContext&)
SAction_Play2DSound::Exec(ScriptContext&)
SAction_UnlockVehicleGroup::Exec(ScriptContext&)
SAction_ScreenText::Exec(ScriptContext&)
SAction_LocatorOnScreen::Exec(ScriptContext&)
SAction_SpawnStuds::Exec(ScriptContext&)
SAction_GetSafePosition::Exec(ScriptContext&)
SAction_GetSafePosition::FindSafePosition(VuVec const&, int, VuVec&) const
SAction_GetSafePosition::CheckPosition(VuVec const&, VuVec&) const
SAction_DisablePoliceCars::Exec(ScriptContext&)
SAction_SpawnBulletBill::Exec(ScriptContext&)
SAction_IsBulletBillActive::Exec(ScriptContext&)
SAction_TakeSnapShot::Exec(ScriptContext&)
SAction_StopStudDecayUpdate::Exec(ScriptContext&)
SAction_AllowCharacterSwap::GetInputs(SCmdParams&) const
SAction_AllowCharacterSwap::Exec(ScriptContext&)
SAction_AttachAnimate::Exec(ScriptContext&)
SAction_SafeToInterruptGameplay::Exec(ScriptContext&)
SAction_GetGoldBricksCollected::Exec(ScriptContext&)
SAction_GetGoldBrickTotal::Exec(ScriptContext&)
SAction_GetVehicleInArea::Exec(ScriptContext&)
SAction_ShowTaggingIcon::Exec(ScriptContext&)
SAction_CommitCollectables::Exec(ScriptContext&)
SAction_SetInhibitDropOut::Exec(ScriptContext&)
SAction_ReduceDamageOnPlayersCollision::Exec(ScriptContext&)
SAction_CreateAICharacter::~SAction_CreateAICharacter()
SAction_CreateAICharacter::GetName() const
SAction_CreateAICharacter::GetInputs(SCmdParams&) const
SAction_CreateAICharacter::GetOutputs(SCmdParams&) const
SAction_CreateAIApiVehicle::~SAction_CreateAIApiVehicle()
SAction_CreateAIApiVehicle::GetName() const
SAction_CreateAIApiVehicle::GetOutputs(SCmdParams&) const
SAction_RequestParkedVehicle::~SAction_RequestParkedVehicle()
SAction_RequestParkedVehicle::GetName() const
SAction_RequestParkedVehicle::GetOutputs(SCmdParams&) const
SAction_EnablePursueFromTraffic::~SAction_EnablePursueFromTraffic()
SAction_EnablePursueFromTraffic::GetName() const
SAction_EnablePursueFromTraffic::GetOutputs(SCmdParams&) const
SAction_DisablePursueFromTraffic::~SAction_DisablePursueFromTraffic()
SAction_DisablePursueFromTraffic::GetName() const
SAction_DisablePursueFromTraffic::GetOutputs(SCmdParams&) const
SAction_EnableAggressiveVehiclesFromTraffic::~SAction_EnableAggressiveVehiclesFromTraffic()
SAction_EnableAggressiveVehiclesFromTraffic::GetName() const
SAction_EnableAggressiveVehiclesFromTraffic::GetOutputs(SCmdParams&) const
SAction_DisableAggressiveVehiclesFromTraffic::~SAction_DisableAggressiveVehiclesFromTraffic()
SAction_DisableAggressiveVehiclesFromTraffic::GetName() const
SAction_DisableAggressiveVehiclesFromTraffic::GetOutputs(SCmdParams&) const
SAction_SetPlayerMovement::~SAction_SetPlayerMovement()
SAction_SetPlayerMovement::GetName() const
SAction_SetPlayerMovement::GetOutputs(SCmdParams&) const
SAction_PlayerInsideArea::~SAction_PlayerInsideArea()
SAction_PlayerInsideArea::GetName() const
SAction_PlayerInsideArea::GetInputs(SCmdParams&) const
SAction_PlayerInsideArea::GetOutputs(SCmdParams&) const
SAction_RemoveFromArea::~SAction_RemoveFromArea()
SAction_RemoveFromArea::GetName() const
SAction_RemoveFromArea::GetOutputs(SCmdParams&) const
SAction_RemoveCriticalFromArea::~SAction_RemoveCriticalFromArea()
SAction_RemoveCriticalFromArea::GetName() const
SAction_RemoveCriticalFromArea::GetOutputs(SCmdParams&) const
SAction_CountInArea::~SAction_CountInArea()
SAction_CountInArea::GetName() const
SAction_CountInArea::GetInputs(SCmdParams&) const
SAction_CountInArea::GetOutputs(SCmdParams&) const
SAction_SetHotSpot::~SAction_SetHotSpot()
SAction_SetHotSpot::GetName() const
SAction_SetHotSpot::GetOutputs(SCmdParams&) const
SAction_UI_ShowMissionPrompt::~SAction_UI_ShowMissionPrompt()
SAction_UI_ShowMissionPrompt::GetName() const
SAction_UI_ShowMissionPrompt::GetOutputs(SCmdParams&) const
SAction_UI_SetStatsStuds::~SAction_UI_SetStatsStuds()
SAction_UI_SetStatsStuds::GetName() const
SAction_UI_SetStatsStuds::GetOutputs(SCmdParams&) const
SAction_UI_ShowMissionCounter::~SAction_UI_ShowMissionCounter()
SAction_UI_ShowMissionCounter::GetName() const
SAction_UI_ShowMissionCounter::GetOutputs(SCmdParams&) const
SAction_UI_ShowMissionDamageBar::~SAction_UI_ShowMissionDamageBar()
SAction_UI_ShowMissionDamageBar::GetName() const
SAction_UI_ShowMissionDamageBar::GetOutputs(SCmdParams&) const
SAction_UI_SetMissionCounter::~SAction_UI_SetMissionCounter()
SAction_UI_SetMissionCounter::GetName() const
SAction_UI_SetMissionCounter::GetOutputs(SCmdParams&) const
SAction_UI_SetMissionDamageBar::~SAction_UI_SetMissionDamageBar()
SAction_UI_SetMissionDamageBar::GetName() const
SAction_UI_SetMissionDamageBar::GetOutputs(SCmdParams&) const
SAction_UI_SetMissionMessage::~SAction_UI_SetMissionMessage()
SAction_UI_SetMissionMessage::GetName() const
SAction_UI_SetMissionMessage::GetOutputs(SCmdParams&) const
SAction_UI_SetMissionHelpText::~SAction_UI_SetMissionHelpText()
SAction_UI_SetMissionHelpText::GetName() const
SAction_UI_SetMissionHelpText::GetOutputs(SCmdParams&) const
SAction_UI_RemoveMissionHelpText::~SAction_UI_RemoveMissionHelpText()
SAction_UI_RemoveMissionHelpText::GetName() const
SAction_UI_RemoveMissionHelpText::GetOutputs(SCmdParams&) const
SAction_UI_ShowHUDTimer::~SAction_UI_ShowHUDTimer()
SAction_UI_ShowHUDTimer::GetName() const
SAction_UI_ShowHUDTimer::GetOutputs(SCmdParams&) const
SAction_UI_SetHUDTimer::~SAction_UI_SetHUDTimer()
SAction_UI_SetHUDTimer::GetName() const
SAction_UI_SetHUDTimer::GetOutputs(SCmdParams&) const
SAction_UI_PhoneCall::~SAction_UI_PhoneCall()
SAction_UI_PhoneCall::GetName() const
SAction_UI_PhoneCall::GetOutputs(SCmdParams&) const
SAction_UI_RadioCall::~SAction_UI_RadioCall()
SAction_UI_RadioCall::GetName() const
SAction_UI_RadioCall::GetOutputs(SCmdParams&) const
SAction_UI_ShowObjectiveScreen::~SAction_UI_ShowObjectiveScreen()
SAction_UI_ShowObjectiveScreen::GetName() const
SAction_UI_ShowObjectiveScreen::GetOutputs(SCmdParams&) const
SAction_UI_ConfirmLevelSummaryScreen::~SAction_UI_ConfirmLevelSummaryScreen()
SAction_UI_ConfirmLevelSummaryScreen::GetName() const
SAction_UI_ConfirmLevelSummaryScreen::GetOutputs(SCmdParams&) const
SAction_UI_Map_SetLocked::~SAction_UI_Map_SetLocked()
SAction_UI_Map_SetLocked::GetName() const
SAction_UI_Map_SetLocked::GetInputs(SCmdParams&) const
SAction_UI_Map_SetLocked::GetOutputs(SCmdParams&) const
SAction_UI_Map_PanToPosition::~SAction_UI_Map_PanToPosition()
SAction_UI_Map_PanToPosition::GetName() const
SAction_UI_Map_PanToPosition::GetOutputs(SCmdParams&) const
SAction_UI_Map_PanToPosition_Queued::~SAction_UI_Map_PanToPosition_Queued()
SAction_UI_Map_PanToPosition_Queued::GetName() const
SAction_UI_Map_PanToPosition_Queued::GetOutputs(SCmdParams&) const
SAction_FadeScreen::~SAction_FadeScreen()
SAction_FadeScreen::GetName() const
SAction_FadeScreen::GetOutputs(SCmdParams&) const
SAction_SetObjectiveMarker::~SAction_SetObjectiveMarker()
SAction_SetObjectiveMarker::GetName() const
SAction_SetObjectiveMarker::GetOutputs(SCmdParams&) const
SAction_EnableSkydiveConstantMove::~SAction_EnableSkydiveConstantMove()
SAction_EnableSkydiveConstantMove::GetName() const
SAction_EnableSkydiveConstantMove::GetInputs(SCmdParams&) const
SAction_EnableSkydiveConstantMove::GetOutputs(SCmdParams&) const
SAction_DisableSkydiveConstantMove::~SAction_DisableSkydiveConstantMove()
SAction_DisableSkydiveConstantMove::GetName() const
SAction_DisableSkydiveConstantMove::GetInputs(SCmdParams&) const
SAction_DisableSkydiveConstantMove::GetOutputs(SCmdParams&) const
SAction_CutscenePlay::~SAction_CutscenePlay()
SAction_CutscenePlay::GetName() const
SAction_CutscenePlay::GetInputs(SCmdParams&) const
SAction_CutscenePlay::GetOutputs(SCmdParams&) const
SAction_PlayConversation::~SAction_PlayConversation()
SAction_PlayConversation::GetName() const
SAction_PlayConversation::GetOutputs(SCmdParams&) const
SAction_AllowCharacterSwap::~SAction_AllowCharacterSwap()
SAction_AllowCharacterSwap::GetName() const
SAction_AllowCharacterSwap::GetOutputs(SCmdParams&) const
SAction_OverrideTrafficDensity::~SAction_OverrideTrafficDensity()
SAction_OverrideTrafficDensity::GetName() const
SAction_OverrideTrafficDensity::GetInputs(SCmdParams&) const
SAction_OverrideTrafficDensity::GetOutputs(SCmdParams&) const
SAction_KillSpawnedTraffic::~SAction_KillSpawnedTraffic()
SAction_KillSpawnedTraffic::GetName() const
SAction_KillSpawnedTraffic::GetInputs(SCmdParams&) const
SAction_KillSpawnedTraffic::GetOutputs(SCmdParams&) const
SAction_KillTrafficVehicle::~SAction_KillTrafficVehicle()
SAction_KillTrafficVehicle::GetName() const
SAction_KillTrafficVehicle::GetInputs(SCmdParams&) const
SAction_KillTrafficVehicle::GetOutputs(SCmdParams&) const
SAction_PurgeVehicleModelPool::~SAction_PurgeVehicleModelPool()
SAction_PurgeVehicleModelPool::GetName() const
SAction_PurgeVehicleModelPool::GetInputs(SCmdParams&) const
SAction_PurgeVehicleModelPool::GetOutputs(SCmdParams&) const
SAction_DustOffVehicleModelPool::~SAction_DustOffVehicleModelPool()
SAction_DustOffVehicleModelPool::GetName() const
SAction_DustOffVehicleModelPool::GetInputs(SCmdParams&) const
SAction_DustOffVehicleModelPool::GetOutputs(SCmdParams&) const
SAction_EnableNonPursuingTraffic::~SAction_EnableNonPursuingTraffic()
SAction_EnableNonPursuingTraffic::GetName() const
SAction_EnableNonPursuingTraffic::GetInputs(SCmdParams&) const
SAction_EnableNonPursuingTraffic::GetOutputs(SCmdParams&) const
SAction_PursueFromTrafficDriver::~SAction_PursueFromTrafficDriver()
SAction_PursueFromTrafficDriver::GetName() const
SAction_PursueFromTrafficDriver::GetInputs(SCmdParams&) const
SAction_PursueFromTrafficDriver::GetOutputs(SCmdParams&) const
SAction_DestroyVehiclesFromPopulation::~SAction_DestroyVehiclesFromPopulation()
SAction_DestroyVehiclesFromPopulation::GetName() const
SAction_DestroyVehiclesFromPopulation::GetInputs(SCmdParams&) const
SAction_DestroyVehiclesFromPopulation::GetOutputs(SCmdParams&) const
SAction_StreamedCharacterPreLoad::~SAction_StreamedCharacterPreLoad()
SAction_StreamedCharacterPreLoad::GetName() const
SAction_StreamedCharacterPreLoad::GetInputs(SCmdParams&) const
SAction_StreamedCharacterPreLoad::GetOutputs(SCmdParams&) const
SAction_StreamedCharacterIsLoaded::~SAction_StreamedCharacterIsLoaded()
SAction_StreamedCharacterIsLoaded::GetName() const
SAction_StreamedCharacterIsLoaded::GetInputs(SCmdParams&) const
SAction_StreamedCharacterIsLoaded::GetOutputs(SCmdParams&) const
SAction_StreamedCharacterRelease::~SAction_StreamedCharacterRelease()
SAction_StreamedCharacterRelease::GetName() const
SAction_StreamedCharacterRelease::GetInputs(SCmdParams&) const
SAction_StreamedCharacterRelease::GetOutputs(SCmdParams&) const
SAction_StreamedCharacterReleaseAll::~SAction_StreamedCharacterReleaseAll()
SAction_StreamedCharacterReleaseAll::GetName() const
SAction_StreamedCharacterReleaseAll::GetInputs(SCmdParams&) const
SAction_StreamedCharacterReleaseAll::GetOutputs(SCmdParams&) const
SAction_PlayerPressedButton::~SAction_PlayerPressedButton()
SAction_PlayerPressedButton::GetName() const
SAction_PlayerPressedButton::GetInputs(SCmdParams&) const
SAction_PlayerPressedButton::GetOutputs(SCmdParams&) const
SAction_PlayerHeldButton::~SAction_PlayerHeldButton()
SAction_PlayerHeldButton::GetName() const
SAction_PlayerHeldButton::GetInputs(SCmdParams&) const
SAction_PlayerHeldButton::GetOutputs(SCmdParams&) const
SAction_PlayerPressedButton_ApiC::~SAction_PlayerPressedButton_ApiC()
SAction_PlayerPressedButton_ApiC::GetName() const
SAction_PlayerPressedButton_ApiC::GetInputs(SCmdParams&) const
SAction_PlayerPressedButton_ApiC::GetOutputs(SCmdParams&) const
SAction_PlayerPressedButton_Index::~SAction_PlayerPressedButton_Index()
SAction_PlayerPressedButton_Index::GetName() const
SAction_PlayerPressedButton_Index::GetInputs(SCmdParams&) const
SAction_PlayerPressedButton_Index::GetOutputs(SCmdParams&) const
SAction_GoThroughDoor::~SAction_GoThroughDoor()
SAction_GoThroughDoor::GetName() const
SAction_GoThroughDoor::GetInputs(SCmdParams&) const
SAction_GoThroughDoor::GetOutputs(SCmdParams&) const
SAction_PlayerSetCharacter::~SAction_PlayerSetCharacter()
SAction_PlayerSetCharacter::GetName() const
SAction_PlayerSetCharacter::GetInputs(SCmdParams&) const
SAction_PlayerSetCharacter::GetOutputs(SCmdParams&) const
SAction_CharacterAvailable::~SAction_CharacterAvailable()
SAction_CharacterAvailable::GetName() const
SAction_CharacterAvailable::GetInputs(SCmdParams&) const
SAction_CharacterAvailable::GetOutputs(SCmdParams&) const
SAction_UnlockCharacterDebug::~SAction_UnlockCharacterDebug()
SAction_UnlockCharacterDebug::GetName() const
SAction_UnlockCharacterDebug::GetInputs(SCmdParams&) const
SAction_UnlockCharacterDebug::GetOutputs(SCmdParams&) const
SAction_LockCharacterDebug::~SAction_LockCharacterDebug()
SAction_LockCharacterDebug::GetName() const
SAction_LockCharacterDebug::GetInputs(SCmdParams&) const
SAction_LockCharacterDebug::GetOutputs(SCmdParams&) const
SAction_AwardCharacter::~SAction_AwardCharacter()
SAction_AwardCharacter::GetName() const
SAction_AwardCharacter::GetInputs(SCmdParams&) const
SAction_AwardCharacter::GetOutputs(SCmdParams&) const
SAction_EnableNetworkInArea::~SAction_EnableNetworkInArea()
SAction_EnableNetworkInArea::GetName() const
SAction_EnableNetworkInArea::GetInputs(SCmdParams&) const
SAction_EnableNetworkInArea::GetOutputs(SCmdParams&) const
SAction_DisableNetworkInArea::~SAction_DisableNetworkInArea()
SAction_DisableNetworkInArea::GetName() const
SAction_DisableNetworkInArea::GetInputs(SCmdParams&) const
SAction_DisableNetworkInArea::GetOutputs(SCmdParams&) const
SAction_GivePlayerStuds::~SAction_GivePlayerStuds()
SAction_GivePlayerStuds::GetName() const
SAction_GivePlayerStuds::GetInputs(SCmdParams&) const
SAction_GivePlayerStuds::GetOutputs(SCmdParams&) const
SAction_UI_StartMission::~SAction_UI_StartMission()
SAction_UI_StartMission::GetName() const
SAction_UI_StartMission::GetInputs(SCmdParams&) const
SAction_UI_StartMission::GetOutputs(SCmdParams&) const
SAction_UI_EndMission::~SAction_UI_EndMission()
SAction_UI_EndMission::GetName() const
SAction_UI_EndMission::GetInputs(SCmdParams&) const
SAction_UI_EndMission::GetOutputs(SCmdParams&) const
SAction_UI_IsEndMissionComplete::~SAction_UI_IsEndMissionComplete()
SAction_UI_IsEndMissionComplete::GetName() const
SAction_UI_IsEndMissionComplete::GetInputs(SCmdParams&) const
SAction_UI_IsEndMissionComplete::GetOutputs(SCmdParams&) const
SAction_UI_ResetMission::~SAction_UI_ResetMission()
SAction_UI_ResetMission::GetName() const
SAction_UI_ResetMission::GetInputs(SCmdParams&) const
SAction_UI_ResetMission::GetOutputs(SCmdParams&) const
SAction_UI_LoadMissionPrompt::~SAction_UI_LoadMissionPrompt()
SAction_UI_LoadMissionPrompt::GetName() const
SAction_UI_LoadMissionPrompt::GetInputs(SCmdParams&) const
SAction_UI_LoadMissionPrompt::GetOutputs(SCmdParams&) const
SAction_UI_HideMissionPrompt::~SAction_UI_HideMissionPrompt()
SAction_UI_HideMissionPrompt::GetName() const
SAction_UI_HideMissionPrompt::GetInputs(SCmdParams&) const
SAction_UI_HideMissionPrompt::GetOutputs(SCmdParams&) const
SAction_UI_SetStatsIsStoryMission::~SAction_UI_SetStatsIsStoryMission()
SAction_UI_SetStatsIsStoryMission::GetName() const
SAction_UI_SetStatsIsStoryMission::GetInputs(SCmdParams&) const
SAction_UI_SetStatsIsStoryMission::GetOutputs(SCmdParams&) const
SAction_UI_SetStatsGoldBricks::~SAction_UI_SetStatsGoldBricks()
SAction_UI_SetStatsGoldBricks::GetName() const
SAction_UI_SetStatsGoldBricks::GetInputs(SCmdParams&) const
SAction_UI_SetStatsGoldBricks::GetOutputs(SCmdParams&) const
SAction_UI_SetStatsRedBricks::~SAction_UI_SetStatsRedBricks()
SAction_UI_SetStatsRedBricks::GetName() const
SAction_UI_SetStatsRedBricks::GetInputs(SCmdParams&) const
SAction_UI_SetStatsRedBricks::GetOutputs(SCmdParams&) const
SAction_UI_SetStatsGoldPlates::~SAction_UI_SetStatsGoldPlates()
SAction_UI_SetStatsGoldPlates::GetName() const
SAction_UI_SetStatsGoldPlates::GetInputs(SCmdParams&) const
SAction_UI_SetStatsGoldPlates::GetOutputs(SCmdParams&) const
SAction_UI_SetStatsRacePosition::~SAction_UI_SetStatsRacePosition()
SAction_UI_SetStatsRacePosition::GetName() const
SAction_UI_SetStatsRacePosition::GetInputs(SCmdParams&) const
SAction_UI_SetStatsRacePosition::GetOutputs(SCmdParams&) const
SAction_UI_SetMissionDamageBarText::~SAction_UI_SetMissionDamageBarText()
SAction_UI_SetMissionDamageBarText::GetName() const
SAction_UI_SetMissionDamageBarText::GetInputs(SCmdParams&) const
SAction_UI_SetMissionDamageBarText::GetOutputs(SCmdParams&) const
SAction_UI_RemoveMissionMessage::~SAction_UI_RemoveMissionMessage()
SAction_UI_RemoveMissionMessage::GetName() const
SAction_UI_RemoveMissionMessage::GetInputs(SCmdParams&) const
SAction_UI_RemoveMissionMessage::GetOutputs(SCmdParams&) const
SAction_UI_ShowHUD::~SAction_UI_ShowHUD()
SAction_UI_ShowHUD::GetName() const
SAction_UI_ShowHUD::GetInputs(SCmdParams&) const
SAction_UI_ShowHUD::GetOutputs(SCmdParams&) const
SAction_UI_ShowPlayerHUD::~SAction_UI_ShowPlayerHUD()
SAction_UI_ShowPlayerHUD::GetName() const
SAction_UI_ShowPlayerHUD::GetInputs(SCmdParams&) const
SAction_UI_ShowPlayerHUD::GetOutputs(SCmdParams&) const
SAction_UI_GetHUDTimerTime::~SAction_UI_GetHUDTimerTime()
SAction_UI_GetHUDTimerTime::GetName() const
SAction_UI_GetHUDTimerTime::GetInputs(SCmdParams&) const
SAction_UI_GetHUDTimerTime::GetOutputs(SCmdParams&) const
SAction_UI_PauseHUDTimerDuringMinicut::~SAction_UI_PauseHUDTimerDuringMinicut()
SAction_UI_PauseHUDTimerDuringMinicut::GetName() const
SAction_UI_PauseHUDTimerDuringMinicut::GetInputs(SCmdParams&) const
SAction_UI_PauseHUDTimerDuringMinicut::GetOutputs(SCmdParams&) const
SAction_UI_HighlightHUDTimer::~SAction_UI_HighlightHUDTimer()
SAction_UI_HighlightHUDTimer::GetName() const
SAction_UI_HighlightHUDTimer::GetInputs(SCmdParams&) const
SAction_UI_HighlightHUDTimer::GetOutputs(SCmdParams&) const
SAction_UI_StopHUDTimer::~SAction_UI_StopHUDTimer()
SAction_UI_StopHUDTimer::GetName() const
SAction_UI_StopHUDTimer::GetInputs(SCmdParams&) const
SAction_UI_StopHUDTimer::GetOutputs(SCmdParams&) const
SAction_UI_HideBuildPointPrompt::~SAction_UI_HideBuildPointPrompt()
SAction_UI_HideBuildPointPrompt::GetName() const
SAction_UI_HideBuildPointPrompt::GetInputs(SCmdParams&) const
SAction_UI_HideBuildPointPrompt::GetOutputs(SCmdParams&) const
SAction_UI_ShowBuildPointPrompt::~SAction_UI_ShowBuildPointPrompt()
SAction_UI_ShowBuildPointPrompt::GetName() const
SAction_UI_ShowBuildPointPrompt::GetInputs(SCmdParams&) const
SAction_UI_ShowBuildPointPrompt::GetOutputs(SCmdParams&) const
SAction_UI_LoadBuildPointResources::~SAction_UI_LoadBuildPointResources()
SAction_UI_LoadBuildPointResources::GetName() const
SAction_UI_LoadBuildPointResources::GetInputs(SCmdParams&) const
SAction_UI_LoadBuildPointResources::GetOutputs(SCmdParams&) const
SAction_UI_SetHeroBarMax::~SAction_UI_SetHeroBarMax()
SAction_UI_SetHeroBarMax::GetName() const
SAction_UI_SetHeroBarMax::GetInputs(SCmdParams&) const
SAction_UI_SetHeroBarMax::GetOutputs(SCmdParams&) const
SAction_UI_ShowMapUnlock::~SAction_UI_ShowMapUnlock()
SAction_UI_ShowMapUnlock::GetName() const
SAction_UI_ShowMapUnlock::GetInputs(SCmdParams&) const
SAction_UI_ShowMapUnlock::GetOutputs(SCmdParams&) const
SAction_UI_ShowScreen::~SAction_UI_ShowScreen()
SAction_UI_ShowScreen::GetName() const
SAction_UI_ShowScreen::GetInputs(SCmdParams&) const
SAction_UI_ShowScreen::GetOutputs(SCmdParams&) const
SAction_UI_HideObjectiveScreen::~SAction_UI_HideObjectiveScreen()
SAction_UI_HideObjectiveScreen::GetName() const
SAction_UI_HideObjectiveScreen::GetInputs(SCmdParams&) const
SAction_UI_HideObjectiveScreen::GetOutputs(SCmdParams&) const
SAction_UI_ShowDisguiseWheel::~SAction_UI_ShowDisguiseWheel()
SAction_UI_ShowDisguiseWheel::GetName() const
SAction_UI_ShowDisguiseWheel::GetInputs(SCmdParams&) const
SAction_UI_ShowDisguiseWheel::GetOutputs(SCmdParams&) const
SAction_UI_IsDisguiseWheelActive::~SAction_UI_IsDisguiseWheelActive()
SAction_UI_IsDisguiseWheelActive::GetName() const
SAction_UI_IsDisguiseWheelActive::GetInputs(SCmdParams&) const
SAction_UI_IsDisguiseWheelActive::GetOutputs(SCmdParams&) const
SAction_UI_ShowLevelSummaryScreen::~SAction_UI_ShowLevelSummaryScreen()
SAction_UI_ShowLevelSummaryScreen::GetName() const
SAction_UI_ShowLevelSummaryScreen::GetInputs(SCmdParams&) const
SAction_UI_ShowLevelSummaryScreen::GetOutputs(SCmdParams&) const
SAction_UI_HideLevelSummaryScreen::~SAction_UI_HideLevelSummaryScreen()
SAction_UI_HideLevelSummaryScreen::GetName() const
SAction_UI_HideLevelSummaryScreen::GetInputs(SCmdParams&) const
SAction_UI_HideLevelSummaryScreen::GetOutputs(SCmdParams&) const
SAction_UI_ShowJoinPlayerScreen::~SAction_UI_ShowJoinPlayerScreen()
SAction_UI_ShowJoinPlayerScreen::GetName() const
SAction_UI_ShowJoinPlayerScreen::GetInputs(SCmdParams&) const
SAction_UI_ShowJoinPlayerScreen::GetOutputs(SCmdParams&) const
SAction_UI_Map_SetLocatorActive::~SAction_UI_Map_SetLocatorActive()
SAction_UI_Map_SetLocatorActive::GetName() const
SAction_UI_Map_SetLocatorActive::GetInputs(SCmdParams&) const
SAction_UI_Map_SetLocatorActive::GetOutputs(SCmdParams&) const
SAction_UI_Map_SetLocatorType::~SAction_UI_Map_SetLocatorType()
SAction_UI_Map_SetLocatorType::GetName() const
SAction_UI_Map_SetLocatorType::GetInputs(SCmdParams&) const
SAction_UI_Map_SetLocatorType::GetOutputs(SCmdParams&) const
SAction_IsScreenFaded::~SAction_IsScreenFaded()
SAction_IsScreenFaded::GetName() const
SAction_IsScreenFaded::GetInputs(SCmdParams&) const
SAction_IsScreenFaded::GetOutputs(SCmdParams&) const
SAction_IsScreenFaded_PlayerSpecific::~SAction_IsScreenFaded_PlayerSpecific()
SAction_IsScreenFaded_PlayerSpecific::GetName() const
SAction_IsScreenFaded_PlayerSpecific::GetInputs(SCmdParams&) const
SAction_IsScreenFaded_PlayerSpecific::GetOutputs(SCmdParams&) const
SAction_UI_ReturnToPoliceStationEnabled::~SAction_UI_ReturnToPoliceStationEnabled()
SAction_UI_ReturnToPoliceStationEnabled::GetName() const
SAction_UI_ReturnToPoliceStationEnabled::GetInputs(SCmdParams&) const
SAction_UI_ReturnToPoliceStationEnabled::GetOutputs(SCmdParams&) const
SAction_UI_WarnAboutProgressOnExitLevel::~SAction_UI_WarnAboutProgressOnExitLevel()
SAction_UI_WarnAboutProgressOnExitLevel::GetName() const
SAction_UI_WarnAboutProgressOnExitLevel::GetInputs(SCmdParams&) const
SAction_UI_WarnAboutProgressOnExitLevel::GetOutputs(SCmdParams&) const
SAction_IsLanguage::~SAction_IsLanguage()
SAction_IsLanguage::GetName() const
SAction_IsLanguage::GetInputs(SCmdParams&) const
SAction_IsLanguage::GetOutputs(SCmdParams&) const
SAction_PrintToScreen::~SAction_PrintToScreen()
SAction_PrintToScreen::GetName() const
SAction_PrintToScreen::GetInputs(SCmdParams&) const
SAction_PrintToScreen::GetOutputs(SCmdParams&) const
SAction_SnapCameraToDir::~SAction_SnapCameraToDir()
SAction_SnapCameraToDir::GetName() const
SAction_SnapCameraToDir::GetInputs(SCmdParams&) const
SAction_SnapCameraToDir::GetOutputs(SCmdParams&) const
SAction_PlayersInArea::~SAction_PlayersInArea()
SAction_PlayersInArea::GetName() const
SAction_PlayersInArea::GetInputs(SCmdParams&) const
SAction_PlayersInArea::GetOutputs(SCmdParams&) const
SAction_GetPlayerBricks::~SAction_GetPlayerBricks()
SAction_GetPlayerBricks::GetName() const
SAction_GetPlayerBricks::GetInputs(SCmdParams&) const
SAction_GetPlayerBricks::GetOutputs(SCmdParams&) const
SAction_GetClassUnlocked::~SAction_GetClassUnlocked()
SAction_GetClassUnlocked::GetName() const
SAction_GetClassUnlocked::GetInputs(SCmdParams&) const
SAction_GetClassUnlocked::GetOutputs(SCmdParams&) const
SAction_RemovePlayerBricks::~SAction_RemovePlayerBricks()
SAction_RemovePlayerBricks::GetName() const
SAction_RemovePlayerBricks::GetInputs(SCmdParams&) const
SAction_RemovePlayerBricks::GetOutputs(SCmdParams&) const
SAction_SetDetectiveFootprint::~SAction_SetDetectiveFootprint()
SAction_SetDetectiveFootprint::GetName() const
SAction_SetDetectiveFootprint::GetInputs(SCmdParams&) const
SAction_SetDetectiveFootprint::GetOutputs(SCmdParams&) const
SAction_AllowDetectiveMode::~SAction_AllowDetectiveMode()
SAction_AllowDetectiveMode::GetName() const
SAction_AllowDetectiveMode::GetInputs(SCmdParams&) const
SAction_AllowDetectiveMode::GetOutputs(SCmdParams&) const
SAction_PlayActionMusic::~SAction_PlayActionMusic()
SAction_PlayActionMusic::GetName() const
SAction_PlayActionMusic::GetInputs(SCmdParams&) const
SAction_PlayActionMusic::GetOutputs(SCmdParams&) const
SAction_TechnoControlledBy::~SAction_TechnoControlledBy()
SAction_TechnoControlledBy::GetName() const
SAction_TechnoControlledBy::GetInputs(SCmdParams&) const
SAction_TechnoControlledBy::GetOutputs(SCmdParams&) const
SAction_ShowSpeechIcon::~SAction_ShowSpeechIcon()
SAction_ShowSpeechIcon::GetName() const
SAction_ShowSpeechIcon::GetInputs(SCmdParams&) const
SAction_ShowSpeechIcon::GetOutputs(SCmdParams&) const
SAction_ShowCharacterIcon::~SAction_ShowCharacterIcon()
SAction_ShowCharacterIcon::GetName() const
SAction_ShowCharacterIcon::GetInputs(SCmdParams&) const
SAction_ShowCharacterIcon::GetOutputs(SCmdParams&) const
SAction_ShowObjectiveMarker::~SAction_ShowObjectiveMarker()
SAction_ShowObjectiveMarker::GetName() const
SAction_ShowObjectiveMarker::GetInputs(SCmdParams&) const
SAction_ShowObjectiveMarker::GetOutputs(SCmdParams&) const
SAction_SetParachuteDeployHeight::~SAction_SetParachuteDeployHeight()
SAction_SetParachuteDeployHeight::GetName() const
SAction_SetParachuteDeployHeight::GetInputs(SCmdParams&) const
SAction_SetParachuteDeployHeight::GetOutputs(SCmdParams&) const
SAction_LoadSkydiveSettings::~SAction_LoadSkydiveSettings()
SAction_LoadSkydiveSettings::GetName() const
SAction_LoadSkydiveSettings::GetInputs(SCmdParams&) const
SAction_LoadSkydiveSettings::GetOutputs(SCmdParams&) const
SAction_LoadConversationManifest::~SAction_LoadConversationManifest()
SAction_LoadConversationManifest::GetName() const
SAction_LoadConversationManifest::GetInputs(SCmdParams&) const
SAction_LoadConversationManifest::GetOutputs(SCmdParams&) const
SAction_AddCharacterToManifest::~SAction_AddCharacterToManifest()
SAction_AddCharacterToManifest::GetName() const
SAction_AddCharacterToManifest::GetInputs(SCmdParams&) const
SAction_AddCharacterToManifest::GetOutputs(SCmdParams&) const
SAction_RemoveCharacterFromManifest::~SAction_RemoveCharacterFromManifest()
SAction_RemoveCharacterFromManifest::GetName() const
SAction_RemoveCharacterFromManifest::GetInputs(SCmdParams&) const
SAction_RemoveCharacterFromManifest::GetOutputs(SCmdParams&) const
SAction_AddDRCCharacterToManifest::~SAction_AddDRCCharacterToManifest()
SAction_AddDRCCharacterToManifest::GetName() const
SAction_AddDRCCharacterToManifest::GetInputs(SCmdParams&) const
SAction_AddDRCCharacterToManifest::GetOutputs(SCmdParams&) const
SAction_AddLocatorToManifest::~SAction_AddLocatorToManifest()
SAction_AddLocatorToManifest::GetName() const
SAction_AddLocatorToManifest::GetInputs(SCmdParams&) const
SAction_AddLocatorToManifest::GetOutputs(SCmdParams&) const
SAction_RemoveLocatorFromManifest::~SAction_RemoveLocatorFromManifest()
SAction_RemoveLocatorFromManifest::GetName() const
SAction_RemoveLocatorFromManifest::GetInputs(SCmdParams&) const
SAction_RemoveLocatorFromManifest::GetOutputs(SCmdParams&) const
SAction_AddCharacterToConversation::~SAction_AddCharacterToConversation()
SAction_AddCharacterToConversation::GetName() const
SAction_AddCharacterToConversation::GetInputs(SCmdParams&) const
SAction_AddCharacterToConversation::GetOutputs(SCmdParams&) const
SAction_SetConversationDuckingScale::~SAction_SetConversationDuckingScale()
SAction_SetConversationDuckingScale::GetName() const
SAction_SetConversationDuckingScale::GetInputs(SCmdParams&) const
SAction_SetConversationDuckingScale::GetOutputs(SCmdParams&) const
SAction_SetBKConversationFallOff::~SAction_SetBKConversationFallOff()
SAction_SetBKConversationFallOff::GetName() const
SAction_SetBKConversationFallOff::GetInputs(SCmdParams&) const
SAction_SetBKConversationFallOff::GetOutputs(SCmdParams&) const
SAction_UnloadConversationManifest::~SAction_UnloadConversationManifest()
SAction_UnloadConversationManifest::GetName() const
SAction_UnloadConversationManifest::GetInputs(SCmdParams&) const
SAction_UnloadConversationManifest::GetOutputs(SCmdParams&) const
SAction_ConversationIsSamplePlaying::~SAction_ConversationIsSamplePlaying()
SAction_ConversationIsSamplePlaying::GetName() const
SAction_ConversationIsSamplePlaying::GetInputs(SCmdParams&) const
SAction_ConversationIsSamplePlaying::GetOutputs(SCmdParams&) const
SAction_ConversationManifestPAKIsLoaded::~SAction_ConversationManifestPAKIsLoaded()
SAction_ConversationManifestPAKIsLoaded::GetName() const
SAction_ConversationManifestPAKIsLoaded::GetInputs(SCmdParams&) const
SAction_ConversationManifestPAKIsLoaded::GetOutputs(SCmdParams&) const
SAction_ConversationsInAManifest::~SAction_ConversationsInAManifest()
SAction_ConversationsInAManifest::GetName() const
SAction_ConversationsInAManifest::GetInputs(SCmdParams&) const
SAction_ConversationsInAManifest::GetOutputs(SCmdParams&) const
SAction_StopConversation::~SAction_StopConversation()
SAction_StopConversation::GetName() const
SAction_StopConversation::GetInputs(SCmdParams&) const
SAction_StopConversation::GetOutputs(SCmdParams&) const
SAction_GetConversationLineInSeconds::~SAction_GetConversationLineInSeconds()
SAction_GetConversationLineInSeconds::GetName() const
SAction_GetConversationLineInSeconds::GetInputs(SCmdParams&) const
SAction_GetConversationLineInSeconds::GetOutputs(SCmdParams&) const
SAction_GetConversationLengthInSeconds::~SAction_GetConversationLengthInSeconds()
SAction_GetConversationLengthInSeconds::GetName() const
SAction_GetConversationLengthInSeconds::GetInputs(SCmdParams&) const
SAction_GetConversationLengthInSeconds::GetOutputs(SCmdParams&) const
SAction_GetConversationLineCount::~SAction_GetConversationLineCount()
SAction_GetConversationLineCount::GetName() const
SAction_GetConversationLineCount::GetInputs(SCmdParams&) const
SAction_GetConversationLineCount::GetOutputs(SCmdParams&) const
SAction_ConversationLineFinished::~SAction_ConversationLineFinished()
SAction_ConversationLineFinished::GetName() const
SAction_ConversationLineFinished::GetInputs(SCmdParams&) const
SAction_ConversationLineFinished::GetOutputs(SCmdParams&) const
SAction_ConversationLineStarted::~SAction_ConversationLineStarted()
SAction_ConversationLineStarted::GetName() const
SAction_ConversationLineStarted::GetInputs(SCmdParams&) const
SAction_ConversationLineStarted::GetOutputs(SCmdParams&) const
SAction_HasConversationManifestLoaded::~SAction_HasConversationManifestLoaded()
SAction_HasConversationManifestLoaded::GetName() const
SAction_HasConversationManifestLoaded::GetInputs(SCmdParams&) const
SAction_HasConversationManifestLoaded::GetOutputs(SCmdParams&) const
SAction_ToggleSpeechBubble::~SAction_ToggleSpeechBubble()
SAction_ToggleSpeechBubble::GetName() const
SAction_ToggleSpeechBubble::GetInputs(SCmdParams&) const
SAction_ToggleSpeechBubble::GetOutputs(SCmdParams&) const
SAction_FaceConversationCharacter::~SAction_FaceConversationCharacter()
SAction_FaceConversationCharacter::GetName() const
SAction_FaceConversationCharacter::GetInputs(SCmdParams&) const
SAction_FaceConversationCharacter::GetOutputs(SCmdParams&) const
SAction_LCUITargetTypeSwitchToBgLoadedFlashFile::~SAction_LCUITargetTypeSwitchToBgLoadedFlashFile()
SAction_LCUITargetTypeSwitchToBgLoadedFlashFile::GetName() const
SAction_LCUITargetTypeSwitchToBgLoadedFlashFile::GetInputs(SCmdParams&) const
SAction_LCUITargetTypeSwitchToBgLoadedFlashFile::GetOutputs(SCmdParams&) const
SAction_LCUITargetMainFrameSetState::~SAction_LCUITargetMainFrameSetState()
SAction_LCUITargetMainFrameSetState::GetName() const
SAction_LCUITargetMainFrameSetState::GetInputs(SCmdParams&) const
SAction_LCUITargetMainFrameSetState::GetOutputs(SCmdParams&) const
SAction_SlowMo::~SAction_SlowMo()
SAction_SlowMo::GetName() const
SAction_SlowMo::GetInputs(SCmdParams&) const
SAction_SlowMo::GetOutputs(SCmdParams&) const
SAction_EndE3Demo::~SAction_EndE3Demo()
SAction_EndE3Demo::GetName() const
SAction_EndE3Demo::GetInputs(SCmdParams&) const
SAction_EndE3Demo::GetOutputs(SCmdParams&) const
SAction_TutorialSetNoFighting::~SAction_TutorialSetNoFighting()
SAction_TutorialSetNoFighting::GetName() const
SAction_TutorialSetNoFighting::GetInputs(SCmdParams&) const
SAction_TutorialSetNoFighting::GetOutputs(SCmdParams&) const
SAction_TutorialSetNoDeathFromFalling::~SAction_TutorialSetNoDeathFromFalling()
SAction_TutorialSetNoDeathFromFalling::GetName() const
SAction_TutorialSetNoDeathFromFalling::GetInputs(SCmdParams&) const
SAction_TutorialSetNoDeathFromFalling::GetOutputs(SCmdParams&) const
SAction_CreateLegoProgressBackup::~SAction_CreateLegoProgressBackup()
SAction_CreateLegoProgressBackup::GetName() const
SAction_CreateLegoProgressBackup::GetInputs(SCmdParams&) const
SAction_CreateLegoProgressBackup::GetOutputs(SCmdParams&) const
SAction_ApplyLegoProgressBackup::~SAction_ApplyLegoProgressBackup()
SAction_ApplyLegoProgressBackup::GetName() const
SAction_ApplyLegoProgressBackup::GetInputs(SCmdParams&) const
SAction_ApplyLegoProgressBackup::GetOutputs(SCmdParams&) const
SAction_DestroyLegoProgressBackup::~SAction_DestroyLegoProgressBackup()
SAction_DestroyLegoProgressBackup::GetName() const
SAction_DestroyLegoProgressBackup::GetInputs(SCmdParams&) const
SAction_DestroyLegoProgressBackup::GetOutputs(SCmdParams&) const
SAction_IsStatusScreenActive::~SAction_IsStatusScreenActive()
SAction_IsStatusScreenActive::GetName() const
SAction_IsStatusScreenActive::GetInputs(SCmdParams&) const
SAction_IsStatusScreenActive::GetOutputs(SCmdParams&) const
SAction_DisableSkydiveWind::~SAction_DisableSkydiveWind()
SAction_DisableSkydiveWind::GetName() const
SAction_DisableSkydiveWind::GetInputs(SCmdParams&) const
SAction_DisableSkydiveWind::GetOutputs(SCmdParams&) const
SAction_EnableSkydiveWind::~SAction_EnableSkydiveWind()
SAction_EnableSkydiveWind::GetName() const
SAction_EnableSkydiveWind::GetInputs(SCmdParams&) const
SAction_EnableSkydiveWind::GetOutputs(SCmdParams&) const
SAction_Play2DSound::~SAction_Play2DSound()
SAction_Play2DSound::GetName() const
SAction_Play2DSound::GetInputs(SCmdParams&) const
SAction_Play2DSound::GetOutputs(SCmdParams&) const
SAction_UnlockVehicleGroup::~SAction_UnlockVehicleGroup()
SAction_UnlockVehicleGroup::GetName() const
SAction_UnlockVehicleGroup::GetInputs(SCmdParams&) const
SAction_UnlockVehicleGroup::GetOutputs(SCmdParams&) const
SAction_ScreenText::~SAction_ScreenText()
SAction_ScreenText::GetName() const
SAction_ScreenText::GetInputs(SCmdParams&) const
SAction_ScreenText::GetOutputs(SCmdParams&) const
SAction_LocatorOnScreen::~SAction_LocatorOnScreen()
SAction_LocatorOnScreen::GetName() const
SAction_LocatorOnScreen::GetInputs(SCmdParams&) const
SAction_LocatorOnScreen::GetOutputs(SCmdParams&) const
SAction_SpawnStuds::~SAction_SpawnStuds()
SAction_SpawnStuds::GetName() const
SAction_SpawnStuds::GetInputs(SCmdParams&) const
SAction_SpawnStuds::GetOutputs(SCmdParams&) const
SAction_GetSafePosition::~SAction_GetSafePosition()
SAction_GetSafePosition::GetName() const
SAction_GetSafePosition::GetInputs(SCmdParams&) const
SAction_GetSafePosition::GetOutputs(SCmdParams&) const
SAction_DisablePoliceCars::~SAction_DisablePoliceCars()
SAction_DisablePoliceCars::GetName() const
SAction_DisablePoliceCars::GetInputs(SCmdParams&) const
SAction_DisablePoliceCars::GetOutputs(SCmdParams&) const
SAction_SpawnBulletBill::~SAction_SpawnBulletBill()
SAction_SpawnBulletBill::GetName() const
SAction_SpawnBulletBill::GetInputs(SCmdParams&) const
SAction_SpawnBulletBill::GetOutputs(SCmdParams&) const
SAction_IsBulletBillActive::~SAction_IsBulletBillActive()
SAction_IsBulletBillActive::GetName() const
SAction_IsBulletBillActive::GetInputs(SCmdParams&) const
SAction_IsBulletBillActive::GetOutputs(SCmdParams&) const
SAction_TakeSnapShot::~SAction_TakeSnapShot()
SAction_TakeSnapShot::GetName() const
SAction_TakeSnapShot::GetInputs(SCmdParams&) const
SAction_TakeSnapShot::GetOutputs(SCmdParams&) const
SAction_StopStudDecayUpdate::~SAction_StopStudDecayUpdate()
SAction_StopStudDecayUpdate::GetName() const
SAction_StopStudDecayUpdate::GetInputs(SCmdParams&) const
SAction_StopStudDecayUpdate::GetOutputs(SCmdParams&) const
SAction_AttachAnimate::~SAction_AttachAnimate()
SAction_AttachAnimate::GetName() const
SAction_AttachAnimate::GetInputs(SCmdParams&) const
SAction_AttachAnimate::GetOutputs(SCmdParams&) const
SAction_SafeToInterruptGameplay::~SAction_SafeToInterruptGameplay()
SAction_SafeToInterruptGameplay::GetName() const
SAction_SafeToInterruptGameplay::GetInputs(SCmdParams&) const
SAction_SafeToInterruptGameplay::GetOutputs(SCmdParams&) const
SAction_GetGoldBricksCollected::~SAction_GetGoldBricksCollected()
SAction_GetGoldBricksCollected::GetName() const
SAction_GetGoldBricksCollected::GetInputs(SCmdParams&) const
SAction_GetGoldBricksCollected::GetOutputs(SCmdParams&) const
SAction_GetGoldBrickTotal::~SAction_GetGoldBrickTotal()
SAction_GetGoldBrickTotal::GetName() const
SAction_GetGoldBrickTotal::GetInputs(SCmdParams&) const
SAction_GetGoldBrickTotal::GetOutputs(SCmdParams&) const
SAction_GetVehicleInArea::~SAction_GetVehicleInArea()
SAction_GetVehicleInArea::GetName() const
SAction_GetVehicleInArea::GetInputs(SCmdParams&) const
SAction_GetVehicleInArea::GetOutputs(SCmdParams&) const
SAction_ShowTaggingIcon::~SAction_ShowTaggingIcon()
SAction_ShowTaggingIcon::GetName() const
SAction_ShowTaggingIcon::GetInputs(SCmdParams&) const
SAction_ShowTaggingIcon::GetOutputs(SCmdParams&) const
SAction_CommitCollectables::~SAction_CommitCollectables()
SAction_CommitCollectables::GetName() const
SAction_CommitCollectables::GetInputs(SCmdParams&) const
SAction_CommitCollectables::GetOutputs(SCmdParams&) const
SAction_SetInhibitDropOut::~SAction_SetInhibitDropOut()
SAction_SetInhibitDropOut::GetName() const
SAction_SetInhibitDropOut::GetInputs(SCmdParams&) const
SAction_SetInhibitDropOut::GetOutputs(SCmdParams&) const
SAction_ReduceDamageOnPlayersCollision::~SAction_ReduceDamageOnPlayersCollision()
SAction_ReduceDamageOnPlayersCollision::GetName() const
SAction_ReduceDamageOnPlayersCollision::GetInputs(SCmdParams&) const
SAction_ReduceDamageOnPlayersCollision::GetOutputs(SCmdParams&) const
ScriptAssert(bool, char const*, ...)
ScriptAssert(bool, cParseContextItem const&, char const*, ...)
SmallArray<ScriptVariable*>::Push(ScriptVariable*)
DynamicScriptVariable<ApiVehicle>::~DynamicScriptVariable()
DynamicScriptVariable<ApiVehicle>::~DynamicScriptVariable()
DynamicScriptVariable<ApiVehicle>::Set(ScriptVariable const*)
DynamicScriptVariable<ApiVehicle>::EventNotify(Event&, NuEventData&)
non-virtual thunk to DynamicScriptVariable<ApiVehicle>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<ApiVehicle>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<ApiVehicle>::EventNotify(Event&, NuEventData&)
SVarSoundListener::Init()
SAction_SVarSoundListener_Constructor_Character::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarSoundListener, NuSoundListener*>(int, NuSoundListener*)
SAction_SVarSoundListener_Base::Exec(ScriptContext&)
SAction_SVarSoundListener_SetFocusPositionEnabled::SpeechExec(ScriptContext&, NuSoundListener*)
SAction_SVarSoundListener_Constructor_Character::~SAction_SVarSoundListener_Constructor_Character()
SAction_SVarSoundListener_Constructor_Character::GetName() const
SAction_SVarSoundListener_Constructor_Character::GetInputs(SCmdParams&) const
SAction_SVarSoundListener_Constructor_Character::GetOutputs(SCmdParams&) const
SAction_SVarSoundListener_Base::~SAction_SVarSoundListener_Base()
SAction_SVarSoundListener_SetFocusPositionEnabled::~SAction_SVarSoundListener_SetFocusPositionEnabled()
SAction_SVarSoundListener_SetFocusPositionEnabled::GetName() const
SAction_SVarSoundListener_SetFocusPositionEnabled::GetInputs(SCmdParams&) const
SAction_SVarSoundListener_SetFocusPositionEnabled::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarSoundListener>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarSoundListener>(char const*, ScriptContext&)
SVarSoundListener::~SVarSoundListener()
SVarSoundListener::~SVarSoundListener()
SVarSoundListener::Equals(ScriptVariable const*)
SVarSoundListener::Set(ScriptVariable const*)
SAction_Text2ApiCharacter::Exec(ScriptContext&)
SAction_IsGameCompleteCheatActive::Exec(ScriptContext&)
CharacterAction_SetAvoidVehicle::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_IsOn::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_GetClass::CharacterExec(ApiCharacter*, ScriptContext&)
ScriptContext::ReturnText(int, char const*)
CharacterAction_GetModelName::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_HasClassAbilities::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_GetVehicle::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_GetRidden::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_IsSkydiving::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_OverrideAnimation::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_PlayContextAnimation::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_Teleport::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_ClearContext::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_FadeOut::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_FadeIn::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetScript::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_FaceCamera::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_FaceCharacter::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_FaceLocator::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_FollowCharacter::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_PutAwayCurrentItem::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_TakeOver::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_ReleaseTakeOver::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_MoveTo::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_MoveToChangeSpeed::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_Flee::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_Flee_To::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_Flee_InArea::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_Stop::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_Release::GetInputs(SCmdParams&) const
CharacterAction_Release::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_DriveTo::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetDriveSpeed::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetWaypointDriveSpeed::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetDriveToBoost::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_AddDriveRubberBand::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetCanRamp::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_Pursue::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_EnterVehicle::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_ExitVehicle::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetVehicle::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_MakeChaseCamFollow::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_ClearVehicle::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_Attack::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetAIOverride::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_DeployParachute::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetAlternateChute::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_StartSkydiveMidfall::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_EndSkydive::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SkydiveRotateToHeading::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_ConstrainSkydiveToSpline::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_GetItemOut::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetWantedRating::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_MakeSimpleCharacter::CharacterExec(ApiCharacter*, ScriptContext&)
ChangeDisguiseSequence::CharacterExec(ApiCharacter*, ScriptContext&)
ChangeDisguiseSequence_2Player::CharacterExec(ApiCharacter*, ScriptContext&)
PushExtraCharUnlockWithDisguiseSequence::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_GetDirection::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_GetPosition::CharacterExec(ApiCharacter*, ScriptContext&)
ApiCharacter_IsPlayer(ApiCharacter*, int*)
ApiCharacter_GetForPlayer(int)
CharacterAction_SetArrestable::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetArrestTime::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_ResetArrestTime::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetRexStunned::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetTargetable::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetSilverBossHearts::CharacterExec(ApiCharacter*, ScriptContext&)
PlayerGameObjectScriptEvent::Fire(NuEventData const&)
NuVector<ScriptVariable*>::Reserve(unsigned int, bool)
CharacterAction_EmitPickups::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_LockInPlace::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_AllowParkour::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_CutDownCharacter::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_IsOnCoaster::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_OverrideAnimation::~CharacterAction_OverrideAnimation()
CharacterAction_OverrideAnimation::GetName() const
CharacterAction_OverrideAnimation::GetInputs(SCmdParams&) const
CharacterAction_OverrideAnimation::GetOutputs(SCmdParams&) const
CharacterAction_Teleport::~CharacterAction_Teleport()
CharacterAction_Teleport::GetName() const
CharacterAction_Teleport::GetInputs(SCmdParams&) const
CharacterAction_Teleport::GetOutputs(SCmdParams&) const
CharacterAction_ReleaseTakeOver::~CharacterAction_ReleaseTakeOver()
CharacterAction_ReleaseTakeOver::GetName() const
CharacterAction_ReleaseTakeOver::GetInputs(SCmdParams&) const
CharacterAction_ReleaseTakeOver::GetOutputs(SCmdParams&) const
CharacterAction_Release::~CharacterAction_Release()
CharacterAction_Release::GetName() const
CharacterAction_Release::GetOutputs(SCmdParams&) const
CharacterAction_Flee::~CharacterAction_Flee()
CharacterAction_Flee::GetName() const
CharacterAction_Flee::GetInputs(SCmdParams&) const
CharacterAction_Flee::GetOutputs(SCmdParams&) const
CharacterAction_Flee_To::~CharacterAction_Flee_To()
CharacterAction_Flee_To::GetName() const
CharacterAction_Flee_To::GetInputs(SCmdParams&) const
CharacterAction_Flee_To::GetOutputs(SCmdParams&) const
CharacterAction_Flee_InArea::~CharacterAction_Flee_InArea()
CharacterAction_Flee_InArea::GetName() const
CharacterAction_Flee_InArea::GetInputs(SCmdParams&) const
CharacterAction_Flee_InArea::GetOutputs(SCmdParams&) const
CharacterAction_ExitVehicle::~CharacterAction_ExitVehicle()
CharacterAction_ExitVehicle::GetName() const
CharacterAction_ExitVehicle::GetInputs(SCmdParams&) const
CharacterAction_ExitVehicle::GetOutputs(SCmdParams&) const
CharacterAction_DriveTo::~CharacterAction_DriveTo()
CharacterAction_DriveTo::GetName() const
CharacterAction_DriveTo::GetInputs(SCmdParams&) const
CharacterAction_DriveTo::GetOutputs(SCmdParams&) const
CharacterAction_SetDriveSpeed::~CharacterAction_SetDriveSpeed()
CharacterAction_SetDriveSpeed::GetName() const
CharacterAction_SetDriveSpeed::GetInputs(SCmdParams&) const
CharacterAction_SetDriveSpeed::GetOutputs(SCmdParams&) const
CharacterAction_SetWaypointDriveSpeed::~CharacterAction_SetWaypointDriveSpeed()
CharacterAction_SetWaypointDriveSpeed::GetName() const
CharacterAction_SetWaypointDriveSpeed::GetInputs(SCmdParams&) const
CharacterAction_SetWaypointDriveSpeed::GetOutputs(SCmdParams&) const
CharacterAction_SetDriveToBoost::~CharacterAction_SetDriveToBoost()
CharacterAction_SetDriveToBoost::GetName() const
CharacterAction_SetDriveToBoost::GetInputs(SCmdParams&) const
CharacterAction_SetDriveToBoost::GetOutputs(SCmdParams&) const
CharacterAction_AddDriveRubberBand::~CharacterAction_AddDriveRubberBand()
CharacterAction_AddDriveRubberBand::GetName() const
CharacterAction_AddDriveRubberBand::GetInputs(SCmdParams&) const
CharacterAction_AddDriveRubberBand::GetOutputs(SCmdParams&) const
CharacterAction_SetCanRamp::~CharacterAction_SetCanRamp()
CharacterAction_SetCanRamp::GetName() const
CharacterAction_SetCanRamp::GetInputs(SCmdParams&) const
CharacterAction_SetCanRamp::GetOutputs(SCmdParams&) const
CharacterAction_Pursue::~CharacterAction_Pursue()
CharacterAction_Pursue::GetName() const
CharacterAction_Pursue::GetInputs(SCmdParams&) const
CharacterAction_Pursue::GetOutputs(SCmdParams&) const
PlayerGameObjectScriptEvent::~PlayerGameObjectScriptEvent()
SAction_Text2ApiCharacter::~SAction_Text2ApiCharacter()
SAction_Text2ApiCharacter::GetName() const
SAction_Text2ApiCharacter::GetInputs(SCmdParams&) const
SAction_Text2ApiCharacter::GetOutputs(SCmdParams&) const
SAction_IsGameCompleteCheatActive::~SAction_IsGameCompleteCheatActive()
SAction_IsGameCompleteCheatActive::GetName() const
SAction_IsGameCompleteCheatActive::GetInputs(SCmdParams&) const
SAction_IsGameCompleteCheatActive::GetOutputs(SCmdParams&) const
CharacterAction_SetAvoidVehicle::~CharacterAction_SetAvoidVehicle()
CharacterAction_SetAvoidVehicle::GetName() const
CharacterAction_SetAvoidVehicle::GetInputs(SCmdParams&) const
CharacterAction_SetAvoidVehicle::GetOutputs(SCmdParams&) const
CharacterAction_IsOn::~CharacterAction_IsOn()
CharacterAction_IsOn::GetName() const
CharacterAction_IsOn::GetInputs(SCmdParams&) const
CharacterAction_IsOn::GetOutputs(SCmdParams&) const
CharacterAction_IsOn::Exec(ScriptContext&)
CharacterAction_GetClass::~CharacterAction_GetClass()
CharacterAction_GetClass::GetName() const
CharacterAction_GetClass::GetInputs(SCmdParams&) const
CharacterAction_GetClass::GetOutputs(SCmdParams&) const
CharacterAction_GetModelName::~CharacterAction_GetModelName()
CharacterAction_GetModelName::GetName() const
CharacterAction_GetModelName::GetInputs(SCmdParams&) const
CharacterAction_GetModelName::GetOutputs(SCmdParams&) const
CharacterAction_HasClassAbilities::~CharacterAction_HasClassAbilities()
CharacterAction_HasClassAbilities::GetName() const
CharacterAction_HasClassAbilities::GetInputs(SCmdParams&) const
CharacterAction_HasClassAbilities::GetOutputs(SCmdParams&) const
CharacterAction_GetVehicle::~CharacterAction_GetVehicle()
CharacterAction_GetVehicle::GetName() const
CharacterAction_GetVehicle::GetInputs(SCmdParams&) const
CharacterAction_GetVehicle::GetOutputs(SCmdParams&) const
CharacterAction_GetRidden::~CharacterAction_GetRidden()
CharacterAction_GetRidden::GetName() const
CharacterAction_GetRidden::GetInputs(SCmdParams&) const
CharacterAction_GetRidden::GetOutputs(SCmdParams&) const
CharacterAction_IsSkydiving::~CharacterAction_IsSkydiving()
CharacterAction_IsSkydiving::GetName() const
CharacterAction_IsSkydiving::GetInputs(SCmdParams&) const
CharacterAction_IsSkydiving::GetOutputs(SCmdParams&) const
CharacterAction_PlayContextAnimation::~CharacterAction_PlayContextAnimation()
CharacterAction_PlayContextAnimation::GetName() const
CharacterAction_PlayContextAnimation::GetInputs(SCmdParams&) const
CharacterAction_PlayContextAnimation::GetOutputs(SCmdParams&) const
CharacterAction_ClearContext::~CharacterAction_ClearContext()
CharacterAction_ClearContext::GetName() const
CharacterAction_ClearContext::GetInputs(SCmdParams&) const
CharacterAction_ClearContext::GetOutputs(SCmdParams&) const
CharacterAction_FadeOut::~CharacterAction_FadeOut()
CharacterAction_FadeOut::GetName() const
CharacterAction_FadeOut::GetInputs(SCmdParams&) const
CharacterAction_FadeOut::GetOutputs(SCmdParams&) const
CharacterAction_FadeIn::~CharacterAction_FadeIn()
CharacterAction_FadeIn::GetName() const
CharacterAction_FadeIn::GetInputs(SCmdParams&) const
CharacterAction_FadeIn::GetOutputs(SCmdParams&) const
CharacterAction_SetScript::~CharacterAction_SetScript()
CharacterAction_SetScript::GetName() const
CharacterAction_SetScript::GetInputs(SCmdParams&) const
CharacterAction_SetScript::GetOutputs(SCmdParams&) const
CharacterAction_FaceCamera::~CharacterAction_FaceCamera()
CharacterAction_FaceCamera::GetName() const
CharacterAction_FaceCamera::GetInputs(SCmdParams&) const
CharacterAction_FaceCamera::GetOutputs(SCmdParams&) const
CharacterAction_FaceCharacter::~CharacterAction_FaceCharacter()
CharacterAction_FaceCharacter::GetName() const
CharacterAction_FaceCharacter::GetInputs(SCmdParams&) const
CharacterAction_FaceCharacter::GetOutputs(SCmdParams&) const
CharacterAction_FaceLocator::~CharacterAction_FaceLocator()
CharacterAction_FaceLocator::GetName() const
CharacterAction_FaceLocator::GetInputs(SCmdParams&) const
CharacterAction_FaceLocator::GetOutputs(SCmdParams&) const
CharacterAction_FollowCharacter::~CharacterAction_FollowCharacter()
CharacterAction_FollowCharacter::GetName() const
CharacterAction_FollowCharacter::GetInputs(SCmdParams&) const
CharacterAction_FollowCharacter::GetOutputs(SCmdParams&) const
CharacterAction_PutAwayCurrentItem::~CharacterAction_PutAwayCurrentItem()
CharacterAction_PutAwayCurrentItem::GetName() const
CharacterAction_PutAwayCurrentItem::GetInputs(SCmdParams&) const
CharacterAction_PutAwayCurrentItem::GetOutputs(SCmdParams&) const
CharacterAction_TakeOver::~CharacterAction_TakeOver()
CharacterAction_TakeOver::GetName() const
CharacterAction_TakeOver::GetInputs(SCmdParams&) const
CharacterAction_TakeOver::GetOutputs(SCmdParams&) const
CharacterAction_MoveTo::~CharacterAction_MoveTo()
CharacterAction_MoveTo::GetName() const
CharacterAction_MoveTo::GetInputs(SCmdParams&) const
CharacterAction_MoveTo::GetOutputs(SCmdParams&) const
CharacterAction_MoveToChangeSpeed::~CharacterAction_MoveToChangeSpeed()
CharacterAction_MoveToChangeSpeed::GetName() const
CharacterAction_MoveToChangeSpeed::GetInputs(SCmdParams&) const
CharacterAction_MoveToChangeSpeed::GetOutputs(SCmdParams&) const
CharacterAction_Stop::~CharacterAction_Stop()
CharacterAction_Stop::GetName() const
CharacterAction_Stop::GetInputs(SCmdParams&) const
CharacterAction_Stop::GetOutputs(SCmdParams&) const
CharacterAction_EnterVehicle::~CharacterAction_EnterVehicle()
CharacterAction_EnterVehicle::GetName() const
CharacterAction_EnterVehicle::GetInputs(SCmdParams&) const
CharacterAction_EnterVehicle::GetOutputs(SCmdParams&) const
CharacterAction_SetVehicle::~CharacterAction_SetVehicle()
CharacterAction_SetVehicle::GetName() const
CharacterAction_SetVehicle::GetInputs(SCmdParams&) const
CharacterAction_SetVehicle::GetOutputs(SCmdParams&) const
CharacterAction_MakeChaseCamFollow::~CharacterAction_MakeChaseCamFollow()
CharacterAction_MakeChaseCamFollow::GetName() const
CharacterAction_MakeChaseCamFollow::GetInputs(SCmdParams&) const
CharacterAction_MakeChaseCamFollow::GetOutputs(SCmdParams&) const
CharacterAction_ClearVehicle::~CharacterAction_ClearVehicle()
CharacterAction_ClearVehicle::GetName() const
CharacterAction_ClearVehicle::GetInputs(SCmdParams&) const
CharacterAction_ClearVehicle::GetOutputs(SCmdParams&) const
CharacterAction_Attack::~CharacterAction_Attack()
CharacterAction_Attack::GetName() const
CharacterAction_Attack::GetInputs(SCmdParams&) const
CharacterAction_Attack::GetOutputs(SCmdParams&) const
CharacterAction_SetAIOverride::~CharacterAction_SetAIOverride()
CharacterAction_SetAIOverride::GetName() const
CharacterAction_SetAIOverride::GetInputs(SCmdParams&) const
CharacterAction_SetAIOverride::GetOutputs(SCmdParams&) const
CharacterAction_SetAIOverride::Exec(ScriptContext&)
CharacterAction_DeployParachute::~CharacterAction_DeployParachute()
CharacterAction_DeployParachute::GetName() const
CharacterAction_DeployParachute::GetInputs(SCmdParams&) const
CharacterAction_DeployParachute::GetOutputs(SCmdParams&) const
CharacterAction_SetAlternateChute::~CharacterAction_SetAlternateChute()
CharacterAction_SetAlternateChute::GetName() const
CharacterAction_SetAlternateChute::GetInputs(SCmdParams&) const
CharacterAction_SetAlternateChute::GetOutputs(SCmdParams&) const
CharacterAction_StartSkydiveMidfall::~CharacterAction_StartSkydiveMidfall()
CharacterAction_StartSkydiveMidfall::GetName() const
CharacterAction_StartSkydiveMidfall::GetInputs(SCmdParams&) const
CharacterAction_StartSkydiveMidfall::GetOutputs(SCmdParams&) const
CharacterAction_EndSkydive::~CharacterAction_EndSkydive()
CharacterAction_EndSkydive::GetName() const
CharacterAction_EndSkydive::GetInputs(SCmdParams&) const
CharacterAction_EndSkydive::GetOutputs(SCmdParams&) const
CharacterAction_SkydiveRotateToHeading::~CharacterAction_SkydiveRotateToHeading()
CharacterAction_SkydiveRotateToHeading::GetName() const
CharacterAction_SkydiveRotateToHeading::GetInputs(SCmdParams&) const
CharacterAction_SkydiveRotateToHeading::GetOutputs(SCmdParams&) const
CharacterAction_ConstrainSkydiveToSpline::~CharacterAction_ConstrainSkydiveToSpline()
CharacterAction_ConstrainSkydiveToSpline::GetName() const
CharacterAction_ConstrainSkydiveToSpline::GetInputs(SCmdParams&) const
CharacterAction_ConstrainSkydiveToSpline::GetOutputs(SCmdParams&) const
CharacterAction_GetItemOut::~CharacterAction_GetItemOut()
CharacterAction_GetItemOut::GetName() const
CharacterAction_GetItemOut::GetInputs(SCmdParams&) const
CharacterAction_GetItemOut::GetOutputs(SCmdParams&) const
CharacterAction_SetWantedRating::~CharacterAction_SetWantedRating()
CharacterAction_SetWantedRating::GetName() const
CharacterAction_SetWantedRating::GetInputs(SCmdParams&) const
CharacterAction_SetWantedRating::GetOutputs(SCmdParams&) const
CharacterAction_MakeSimpleCharacter::~CharacterAction_MakeSimpleCharacter()
CharacterAction_MakeSimpleCharacter::GetName() const
CharacterAction_MakeSimpleCharacter::GetInputs(SCmdParams&) const
CharacterAction_MakeSimpleCharacter::GetOutputs(SCmdParams&) const
ChangeDisguiseSequence::~ChangeDisguiseSequence()
ChangeDisguiseSequence::GetName() const
ChangeDisguiseSequence::GetInputs(SCmdParams&) const
ChangeDisguiseSequence::GetOutputs(SCmdParams&) const
ChangeDisguiseSequence_2Player::~ChangeDisguiseSequence_2Player()
ChangeDisguiseSequence_2Player::GetName() const
ChangeDisguiseSequence_2Player::GetInputs(SCmdParams&) const
ChangeDisguiseSequence_2Player::GetOutputs(SCmdParams&) const
PushExtraCharUnlockWithDisguiseSequence::~PushExtraCharUnlockWithDisguiseSequence()
PushExtraCharUnlockWithDisguiseSequence::GetName() const
PushExtraCharUnlockWithDisguiseSequence::GetInputs(SCmdParams&) const
PushExtraCharUnlockWithDisguiseSequence::GetOutputs(SCmdParams&) const
CharacterAction_GetDirection::~CharacterAction_GetDirection()
CharacterAction_GetDirection::GetName() const
CharacterAction_GetDirection::GetInputs(SCmdParams&) const
CharacterAction_GetDirection::GetOutputs(SCmdParams&) const
CharacterAction_GetPosition::~CharacterAction_GetPosition()
CharacterAction_GetPosition::GetName() const
CharacterAction_GetPosition::GetInputs(SCmdParams&) const
CharacterAction_GetPosition::GetOutputs(SCmdParams&) const
CharacterAction_SetArrestable::~CharacterAction_SetArrestable()
CharacterAction_SetArrestable::GetName() const
CharacterAction_SetArrestable::GetInputs(SCmdParams&) const
CharacterAction_SetArrestable::GetOutputs(SCmdParams&) const
CharacterAction_SetArrestTime::~CharacterAction_SetArrestTime()
CharacterAction_SetArrestTime::GetName() const
CharacterAction_SetArrestTime::GetInputs(SCmdParams&) const
CharacterAction_SetArrestTime::GetOutputs(SCmdParams&) const
CharacterAction_ResetArrestTime::~CharacterAction_ResetArrestTime()
CharacterAction_ResetArrestTime::GetName() const
CharacterAction_ResetArrestTime::GetInputs(SCmdParams&) const
CharacterAction_ResetArrestTime::GetOutputs(SCmdParams&) const
CharacterAction_SetRexStunned::~CharacterAction_SetRexStunned()
CharacterAction_SetRexStunned::GetName() const
CharacterAction_SetRexStunned::GetInputs(SCmdParams&) const
CharacterAction_SetRexStunned::GetOutputs(SCmdParams&) const
CharacterAction_SetTargetable::~CharacterAction_SetTargetable()
CharacterAction_SetTargetable::GetName() const
CharacterAction_SetTargetable::GetInputs(SCmdParams&) const
CharacterAction_SetTargetable::GetOutputs(SCmdParams&) const
CharacterAction_SetSilverBossHearts::~CharacterAction_SetSilverBossHearts()
CharacterAction_SetSilverBossHearts::GetName() const
CharacterAction_SetSilverBossHearts::GetInputs(SCmdParams&) const
CharacterAction_SetSilverBossHearts::GetOutputs(SCmdParams&) const
CharacterAction_EmitPickups::~CharacterAction_EmitPickups()
CharacterAction_EmitPickups::GetName() const
CharacterAction_EmitPickups::GetInputs(SCmdParams&) const
CharacterAction_EmitPickups::GetOutputs(SCmdParams&) const
CharacterAction_LockInPlace::~CharacterAction_LockInPlace()
CharacterAction_LockInPlace::GetName() const
CharacterAction_LockInPlace::GetInputs(SCmdParams&) const
CharacterAction_LockInPlace::GetOutputs(SCmdParams&) const
CharacterAction_AllowParkour::~CharacterAction_AllowParkour()
CharacterAction_AllowParkour::GetName() const
CharacterAction_AllowParkour::GetInputs(SCmdParams&) const
CharacterAction_AllowParkour::GetOutputs(SCmdParams&) const
CharacterAction_CutDownCharacter::~CharacterAction_CutDownCharacter()
CharacterAction_CutDownCharacter::GetName() const
CharacterAction_CutDownCharacter::GetInputs(SCmdParams&) const
CharacterAction_CutDownCharacter::GetOutputs(SCmdParams&) const
CharacterAction_IsOnCoaster::~CharacterAction_IsOnCoaster()
CharacterAction_IsOnCoaster::GetName() const
CharacterAction_IsOnCoaster::GetInputs(SCmdParams&) const
CharacterAction_IsOnCoaster::GetOutputs(SCmdParams&) const
GizmoAction_CameraShutDown::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_CameraStartUp::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_SetMiniCutCanSplit::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_GetColour::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_SetColour::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_SetIcon::GetInputs(SCmdParams&) const
GizmoAction_SetIcon::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_RemoveIcon::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_DestroySimpleProp::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_ResetSimpleProp::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_GetCentre::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_GetSuperBuildValue::GizmoExec(ScriptContext&, Gizmo*)
SAction_SetSuperBuildTarget::Exec(ScriptContext&)
SAction_SetSuperBuildTargetCompleted::Exec(ScriptContext&)
SAction_StreamingInstallShowWarning::Exec(ScriptContext&)
SAction_StreamingInstallFinished::Exec(ScriptContext&)
SAction_TileGizmo::Exec(ScriptContext&)
GizmoAction_DistanceTo::GizmoExec(ScriptContext&, Gizmo*)
SAction_GetFailedGlidePlayer::Exec(ScriptContext&)
CityGizmoScriptActions::AddScriptActions()
GizmoAction_SetIcon::~GizmoAction_SetIcon()
GizmoAction_SetIcon::GetName() const
GizmoAction_SetIcon::GetOutputs(SCmdParams&) const
GizmoAction_CameraShutDown::~GizmoAction_CameraShutDown()
GizmoAction_CameraShutDown::GetName() const
GizmoAction_CameraShutDown::GetInputs(SCmdParams&) const
GizmoAction_CameraShutDown::GetOutputs(SCmdParams&) const
GizmoAction_CameraStartUp::~GizmoAction_CameraStartUp()
GizmoAction_CameraStartUp::GetName() const
GizmoAction_CameraStartUp::GetInputs(SCmdParams&) const
GizmoAction_CameraStartUp::GetOutputs(SCmdParams&) const
GizmoAction_SetMiniCutCanSplit::~GizmoAction_SetMiniCutCanSplit()
GizmoAction_SetMiniCutCanSplit::GetName() const
GizmoAction_SetMiniCutCanSplit::GetInputs(SCmdParams&) const
GizmoAction_SetMiniCutCanSplit::GetOutputs(SCmdParams&) const
GizmoAction_GetColour::~GizmoAction_GetColour()
GizmoAction_GetColour::GetName() const
GizmoAction_GetColour::GetInputs(SCmdParams&) const
GizmoAction_GetColour::GetOutputs(SCmdParams&) const
GizmoAction_SetColour::~GizmoAction_SetColour()
GizmoAction_SetColour::GetName() const
GizmoAction_SetColour::GetInputs(SCmdParams&) const
GizmoAction_SetColour::GetOutputs(SCmdParams&) const
GizmoAction_RemoveIcon::~GizmoAction_RemoveIcon()
GizmoAction_RemoveIcon::GetName() const
GizmoAction_RemoveIcon::GetInputs(SCmdParams&) const
GizmoAction_RemoveIcon::GetOutputs(SCmdParams&) const
GizmoAction_DestroySimpleProp::~GizmoAction_DestroySimpleProp()
GizmoAction_DestroySimpleProp::GetName() const
GizmoAction_DestroySimpleProp::GetInputs(SCmdParams&) const
GizmoAction_DestroySimpleProp::GetOutputs(SCmdParams&) const
GizmoAction_ResetSimpleProp::~GizmoAction_ResetSimpleProp()
GizmoAction_ResetSimpleProp::GetName() const
GizmoAction_ResetSimpleProp::GetInputs(SCmdParams&) const
GizmoAction_ResetSimpleProp::GetOutputs(SCmdParams&) const
GizmoAction_GetCentre::~GizmoAction_GetCentre()
GizmoAction_GetCentre::GetName() const
GizmoAction_GetCentre::GetInputs(SCmdParams&) const
GizmoAction_GetCentre::GetOutputs(SCmdParams&) const
GizmoAction_GetSuperBuildValue::~GizmoAction_GetSuperBuildValue()
GizmoAction_GetSuperBuildValue::GetName() const
GizmoAction_GetSuperBuildValue::GetInputs(SCmdParams&) const
GizmoAction_GetSuperBuildValue::GetOutputs(SCmdParams&) const
SAction_SetSuperBuildTarget::~SAction_SetSuperBuildTarget()
SAction_SetSuperBuildTarget::GetName() const
SAction_SetSuperBuildTarget::GetInputs(SCmdParams&) const
SAction_SetSuperBuildTarget::GetOutputs(SCmdParams&) const
SAction_SetSuperBuildTargetCompleted::~SAction_SetSuperBuildTargetCompleted()
SAction_SetSuperBuildTargetCompleted::GetName() const
SAction_SetSuperBuildTargetCompleted::GetInputs(SCmdParams&) const
SAction_SetSuperBuildTargetCompleted::GetOutputs(SCmdParams&) const
SAction_StreamingInstallShowWarning::~SAction_StreamingInstallShowWarning()
SAction_StreamingInstallShowWarning::GetName() const
SAction_StreamingInstallShowWarning::GetInputs(SCmdParams&) const
SAction_StreamingInstallShowWarning::GetOutputs(SCmdParams&) const
SAction_StreamingInstallFinished::~SAction_StreamingInstallFinished()
SAction_StreamingInstallFinished::GetName() const
SAction_StreamingInstallFinished::GetInputs(SCmdParams&) const
SAction_StreamingInstallFinished::GetOutputs(SCmdParams&) const
SAction_TileGizmo::~SAction_TileGizmo()
SAction_TileGizmo::GetName() const
SAction_TileGizmo::GetInputs(SCmdParams&) const
SAction_TileGizmo::GetOutputs(SCmdParams&) const
GizmoAction_DistanceTo::~GizmoAction_DistanceTo()
GizmoAction_DistanceTo::GetName() const
GizmoAction_DistanceTo::GetInputs(SCmdParams&) const
GizmoAction_DistanceTo::GetOutputs(SCmdParams&) const
SAction_GetFailedGlidePlayer::~SAction_GetFailedGlidePlayer()
SAction_GetFailedGlidePlayer::GetName() const
SAction_GetFailedGlidePlayer::GetInputs(SCmdParams&) const
SAction_GetFailedGlidePlayer::GetOutputs(SCmdParams&) const
LegoGizmoScriptVariable::LegoGizmoScriptVariable(char const*, sDynamicVariableData&, ScriptContext&)
DynamicScriptVariable<Gizmo>::~DynamicScriptVariable()
DynamicScriptVariable<Gizmo>::~DynamicScriptVariable()
DynamicScriptVariable<Gizmo>::Set(ScriptVariable const*)
DynamicScriptVariable<Gizmo>::EventNotify(Event&, NuEventData&)
non-virtual thunk to DynamicScriptVariable<Gizmo>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<Gizmo>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<Gizmo>::EventNotify(Event&, NuEventData&)
SAction_SetHint::Exec(ScriptContext&)
SAction_SetHintIconDRC::Exec(ScriptContext&)
SAction_SetHintComplete::Exec(ScriptContext&)
SAction_SetGizmoHintComplete::Exec(ScriptContext&)
SAction_CancelHint::Exec(ScriptContext&)
SAction_SuppressHints::Exec(ScriptContext&)
SAction_SetHint::~SAction_SetHint()
SAction_SetHint::GetName() const
SAction_SetHint::GetInputs(SCmdParams&) const
SAction_SetHint::GetOutputs(SCmdParams&) const
SAction_SetHintIconDRC::~SAction_SetHintIconDRC()
SAction_SetHintIconDRC::GetName() const
SAction_SetHintIconDRC::GetInputs(SCmdParams&) const
SAction_SetHintIconDRC::GetOutputs(SCmdParams&) const
SAction_SetHintComplete::~SAction_SetHintComplete()
SAction_SetHintComplete::GetName() const
SAction_SetHintComplete::GetInputs(SCmdParams&) const
SAction_SetHintComplete::GetOutputs(SCmdParams&) const
SAction_SetGizmoHintComplete::~SAction_SetGizmoHintComplete()
SAction_SetGizmoHintComplete::GetName() const
SAction_SetGizmoHintComplete::GetInputs(SCmdParams&) const
SAction_SetGizmoHintComplete::GetOutputs(SCmdParams&) const
SAction_CancelHint::~SAction_CancelHint()
SAction_CancelHint::GetName() const
SAction_CancelHint::GetInputs(SCmdParams&) const
SAction_CancelHint::GetOutputs(SCmdParams&) const
SAction_SuppressHints::~SAction_SuppressHints()
SAction_SuppressHints::GetName() const
SAction_SuppressHints::GetInputs(SCmdParams&) const
SAction_SuppressHints::GetOutputs(SCmdParams&) const
SAction_Text2ApiVehicle::Exec(ScriptContext&)
SAction_GetVehicle::Exec(ScriptContext&)
VehicleAction_SetPosition::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetPosition::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetDirection::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetDirection::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetSpeed::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetParked::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_TriggerAutoUpright::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_IsOnItsSide::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_TechnoControlledBy::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetTrailer::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_AttachToSpline_YFree::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_AttachToSpline_LoopTheLoop::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetLimitsOnSpline::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_DisableControls::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_DisableManualAIControl::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_ConnectRailVehicles::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_ReleaseCarriage::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_IsAtTheEndOfSpline::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_LockVelocityOfRailVehicle::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_LockVelocityOfRailVehicleTimed::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetHealth::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetHealth::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetInvulnerable::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetDriver::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetOccupant::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_HasOccupant::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_Teleport::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetLocked::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_IsLocked::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetSeatLocked::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_IsSeatLocked::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_Destroy::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetScript::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_InArea::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_IsTakingAction::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetCraneMode::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetCraneLoadIfGizmo::VehicleExec(ApiVehicle*, ScriptContext&)
void ScriptContext::SetReturn<LegoGizmoScriptVariable, Gizmo*>(int, Gizmo*)
VehicleAction_SetTargetForCraneLoad::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetPickupForCrane::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetClass::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetModelName::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_GetCategory::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_Release::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_ReduceTumbling::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetMassMul::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_TurnOnSiren::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_HasSiren::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_AssignCharacter::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_EmitPickups::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetBossIcons::VehicleExec(ApiVehicle*, ScriptContext&)
cParseContextItem::GetFloat() const
VehicleAction_LockInPlace::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_ExplodeCamera::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetBlowUpTimer::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetBoobyTrap::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetUnlimitedBoost::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_DriverlessDriveTo::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_DriverlessSetDriveToBoost::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_DriverlessAddDriveRubberBand::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetCanRamp::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_DriverlessPursue::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_DriverlessFlee::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_CreateKrawlieDriver::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_AddKrawliePassenger::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_IsBoostEnabled::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_OperateDoor::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetMissionCritical::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetMissionCriticalRespawnAtStart::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_IsMissionCritical::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_SetQueryDismount::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_IsQueryDismountSet::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleScriptEvent::Fire(NuEventData const&)
PlayerVehicleScriptEvent::Fire(NuEventData const&)
KrawlieVehicleScriptEvent::Fire(NuEventData const&)
VehicleToVehicleInteractionScriptEvent::Fire(NuEventData const&)
GizmoScriptEvent::Fire(NuEventData const&)
VehicleAction_SetParked::~VehicleAction_SetParked()
VehicleAction_SetParked::GetName() const
VehicleAction_SetParked::GetInputs(SCmdParams&) const
VehicleAction_SetParked::GetOutputs(SCmdParams&) const
VehicleAction_AttachToSpline_YFree::~VehicleAction_AttachToSpline_YFree()
VehicleAction_AttachToSpline_YFree::GetName() const
VehicleAction_AttachToSpline_YFree::GetInputs(SCmdParams&) const
VehicleAction_AttachToSpline_YFree::GetOutputs(SCmdParams&) const
VehicleAction_AttachToSpline_LoopTheLoop::~VehicleAction_AttachToSpline_LoopTheLoop()
VehicleAction_AttachToSpline_LoopTheLoop::GetName() const
VehicleAction_AttachToSpline_LoopTheLoop::GetInputs(SCmdParams&) const
VehicleAction_AttachToSpline_LoopTheLoop::GetOutputs(SCmdParams&) const
VehicleAction_Teleport::~VehicleAction_Teleport()
VehicleAction_Teleport::GetName() const
VehicleAction_Teleport::GetInputs(SCmdParams&) const
VehicleAction_Teleport::GetOutputs(SCmdParams&) const
VehicleAction_DriverlessDriveTo::~VehicleAction_DriverlessDriveTo()
VehicleAction_DriverlessDriveTo::GetName() const
VehicleAction_DriverlessDriveTo::GetInputs(SCmdParams&) const
VehicleAction_DriverlessDriveTo::GetOutputs(SCmdParams&) const
VehicleAction_DriverlessSetDriveToBoost::~VehicleAction_DriverlessSetDriveToBoost()
VehicleAction_DriverlessSetDriveToBoost::GetName() const
VehicleAction_DriverlessSetDriveToBoost::GetInputs(SCmdParams&) const
VehicleAction_DriverlessSetDriveToBoost::GetOutputs(SCmdParams&) const
VehicleAction_DriverlessAddDriveRubberBand::~VehicleAction_DriverlessAddDriveRubberBand()
VehicleAction_DriverlessAddDriveRubberBand::GetName() const
VehicleAction_DriverlessAddDriveRubberBand::GetInputs(SCmdParams&) const
VehicleAction_DriverlessAddDriveRubberBand::GetOutputs(SCmdParams&) const
VehicleAction_SetCanRamp::~VehicleAction_SetCanRamp()
VehicleAction_SetCanRamp::GetName() const
VehicleAction_SetCanRamp::GetInputs(SCmdParams&) const
VehicleAction_SetCanRamp::GetOutputs(SCmdParams&) const
VehicleAction_DriverlessPursue::~VehicleAction_DriverlessPursue()
VehicleAction_DriverlessPursue::GetName() const
VehicleAction_DriverlessPursue::GetInputs(SCmdParams&) const
VehicleAction_DriverlessPursue::GetOutputs(SCmdParams&) const
VehicleAction_DriverlessFlee::~VehicleAction_DriverlessFlee()
VehicleAction_DriverlessFlee::GetName() const
VehicleAction_DriverlessFlee::GetInputs(SCmdParams&) const
VehicleAction_DriverlessFlee::GetOutputs(SCmdParams&) const
VehicleAction_CreateKrawlieDriver::~VehicleAction_CreateKrawlieDriver()
VehicleAction_CreateKrawlieDriver::GetName() const
VehicleAction_CreateKrawlieDriver::GetInputs(SCmdParams&) const
VehicleAction_CreateKrawlieDriver::GetOutputs(SCmdParams&) const
VehicleAction_AddKrawliePassenger::~VehicleAction_AddKrawliePassenger()
VehicleAction_AddKrawliePassenger::GetName() const
VehicleAction_AddKrawliePassenger::GetInputs(SCmdParams&) const
VehicleAction_AddKrawliePassenger::GetOutputs(SCmdParams&) const
VehicleScriptEvent::~VehicleScriptEvent()
PlayerVehicleScriptEvent::~PlayerVehicleScriptEvent()
KrawlieVehicleScriptEvent::~KrawlieVehicleScriptEvent()
VehicleToVehicleInteractionScriptEvent::~VehicleToVehicleInteractionScriptEvent()
GizmoScriptEvent::~GizmoScriptEvent()
SAction_Text2ApiVehicle::~SAction_Text2ApiVehicle()
SAction_Text2ApiVehicle::GetName() const
SAction_Text2ApiVehicle::GetInputs(SCmdParams&) const
SAction_Text2ApiVehicle::GetOutputs(SCmdParams&) const
SAction_GetVehicle::~SAction_GetVehicle()
SAction_GetVehicle::GetName() const
SAction_GetVehicle::GetInputs(SCmdParams&) const
SAction_GetVehicle::GetOutputs(SCmdParams&) const
VehicleAction_SetPosition::~VehicleAction_SetPosition()
VehicleAction_SetPosition::GetName() const
VehicleAction_SetPosition::GetInputs(SCmdParams&) const
VehicleAction_SetPosition::GetOutputs(SCmdParams&) const
VehicleAction_GetPosition::~VehicleAction_GetPosition()
VehicleAction_GetPosition::GetName() const
VehicleAction_GetPosition::GetInputs(SCmdParams&) const
VehicleAction_GetPosition::GetOutputs(SCmdParams&) const
VehicleAction_SetDirection::~VehicleAction_SetDirection()
VehicleAction_SetDirection::GetName() const
VehicleAction_SetDirection::GetInputs(SCmdParams&) const
VehicleAction_SetDirection::GetOutputs(SCmdParams&) const
VehicleAction_GetDirection::~VehicleAction_GetDirection()
VehicleAction_GetDirection::GetName() const
VehicleAction_GetDirection::GetInputs(SCmdParams&) const
VehicleAction_GetDirection::GetOutputs(SCmdParams&) const
VehicleAction_GetSpeed::~VehicleAction_GetSpeed()
VehicleAction_GetSpeed::GetName() const
VehicleAction_GetSpeed::GetInputs(SCmdParams&) const
VehicleAction_GetSpeed::GetOutputs(SCmdParams&) const
VehicleAction_TriggerAutoUpright::~VehicleAction_TriggerAutoUpright()
VehicleAction_TriggerAutoUpright::GetName() const
VehicleAction_TriggerAutoUpright::GetInputs(SCmdParams&) const
VehicleAction_TriggerAutoUpright::GetOutputs(SCmdParams&) const
VehicleAction_IsOnItsSide::~VehicleAction_IsOnItsSide()
VehicleAction_IsOnItsSide::GetName() const
VehicleAction_IsOnItsSide::GetInputs(SCmdParams&) const
VehicleAction_IsOnItsSide::GetOutputs(SCmdParams&) const
VehicleAction_TechnoControlledBy::~VehicleAction_TechnoControlledBy()
VehicleAction_TechnoControlledBy::GetName() const
VehicleAction_TechnoControlledBy::GetInputs(SCmdParams&) const
VehicleAction_TechnoControlledBy::GetOutputs(SCmdParams&) const
VehicleAction_GetTrailer::~VehicleAction_GetTrailer()
VehicleAction_GetTrailer::GetName() const
VehicleAction_GetTrailer::GetInputs(SCmdParams&) const
VehicleAction_GetTrailer::GetOutputs(SCmdParams&) const
VehicleAction_SetLimitsOnSpline::~VehicleAction_SetLimitsOnSpline()
VehicleAction_SetLimitsOnSpline::GetName() const
VehicleAction_SetLimitsOnSpline::GetInputs(SCmdParams&) const
VehicleAction_SetLimitsOnSpline::GetOutputs(SCmdParams&) const
VehicleAction_DisableControls::~VehicleAction_DisableControls()
VehicleAction_DisableControls::GetName() const
VehicleAction_DisableControls::GetInputs(SCmdParams&) const
VehicleAction_DisableControls::GetOutputs(SCmdParams&) const
VehicleAction_DisableManualAIControl::~VehicleAction_DisableManualAIControl()
VehicleAction_DisableManualAIControl::GetName() const
VehicleAction_DisableManualAIControl::GetInputs(SCmdParams&) const
VehicleAction_DisableManualAIControl::GetOutputs(SCmdParams&) const
VehicleAction_ConnectRailVehicles::~VehicleAction_ConnectRailVehicles()
VehicleAction_ConnectRailVehicles::GetName() const
VehicleAction_ConnectRailVehicles::GetInputs(SCmdParams&) const
VehicleAction_ConnectRailVehicles::GetOutputs(SCmdParams&) const
VehicleAction_ReleaseCarriage::~VehicleAction_ReleaseCarriage()
VehicleAction_ReleaseCarriage::GetName() const
VehicleAction_ReleaseCarriage::GetInputs(SCmdParams&) const
VehicleAction_ReleaseCarriage::GetOutputs(SCmdParams&) const
VehicleAction_IsAtTheEndOfSpline::~VehicleAction_IsAtTheEndOfSpline()
VehicleAction_IsAtTheEndOfSpline::GetName() const
VehicleAction_IsAtTheEndOfSpline::GetInputs(SCmdParams&) const
VehicleAction_IsAtTheEndOfSpline::GetOutputs(SCmdParams&) const
VehicleAction_LockVelocityOfRailVehicle::~VehicleAction_LockVelocityOfRailVehicle()
VehicleAction_LockVelocityOfRailVehicle::GetName() const
VehicleAction_LockVelocityOfRailVehicle::GetInputs(SCmdParams&) const
VehicleAction_LockVelocityOfRailVehicle::GetOutputs(SCmdParams&) const
VehicleAction_LockVelocityOfRailVehicleTimed::~VehicleAction_LockVelocityOfRailVehicleTimed()
VehicleAction_LockVelocityOfRailVehicleTimed::GetName() const
VehicleAction_LockVelocityOfRailVehicleTimed::GetInputs(SCmdParams&) const
VehicleAction_LockVelocityOfRailVehicleTimed::GetOutputs(SCmdParams&) const
VehicleAction_GetHealth::~VehicleAction_GetHealth()
VehicleAction_GetHealth::GetName() const
VehicleAction_GetHealth::GetInputs(SCmdParams&) const
VehicleAction_GetHealth::GetOutputs(SCmdParams&) const
VehicleAction_SetHealth::~VehicleAction_SetHealth()
VehicleAction_SetHealth::GetName() const
VehicleAction_SetHealth::GetInputs(SCmdParams&) const
VehicleAction_SetHealth::GetOutputs(SCmdParams&) const
VehicleAction_SetInvulnerable::~VehicleAction_SetInvulnerable()
VehicleAction_SetInvulnerable::GetName() const
VehicleAction_SetInvulnerable::GetInputs(SCmdParams&) const
VehicleAction_SetInvulnerable::GetOutputs(SCmdParams&) const
VehicleAction_GetDriver::~VehicleAction_GetDriver()
VehicleAction_GetDriver::GetName() const
VehicleAction_GetDriver::GetInputs(SCmdParams&) const
VehicleAction_GetDriver::GetOutputs(SCmdParams&) const
VehicleAction_GetOccupant::~VehicleAction_GetOccupant()
VehicleAction_GetOccupant::GetName() const
VehicleAction_GetOccupant::GetInputs(SCmdParams&) const
VehicleAction_GetOccupant::GetOutputs(SCmdParams&) const
VehicleAction_HasOccupant::~VehicleAction_HasOccupant()
VehicleAction_HasOccupant::GetName() const
VehicleAction_HasOccupant::GetInputs(SCmdParams&) const
VehicleAction_HasOccupant::GetOutputs(SCmdParams&) const
VehicleAction_SetLocked::~VehicleAction_SetLocked()
VehicleAction_SetLocked::GetName() const
VehicleAction_SetLocked::GetInputs(SCmdParams&) const
VehicleAction_SetLocked::GetOutputs(SCmdParams&) const
VehicleAction_IsLocked::~VehicleAction_IsLocked()
VehicleAction_IsLocked::GetName() const
VehicleAction_IsLocked::GetInputs(SCmdParams&) const
VehicleAction_IsLocked::GetOutputs(SCmdParams&) const
VehicleAction_SetSeatLocked::~VehicleAction_SetSeatLocked()
VehicleAction_SetSeatLocked::GetName() const
VehicleAction_SetSeatLocked::GetInputs(SCmdParams&) const
VehicleAction_SetSeatLocked::GetOutputs(SCmdParams&) const
VehicleAction_IsSeatLocked::~VehicleAction_IsSeatLocked()
VehicleAction_IsSeatLocked::GetName() const
VehicleAction_IsSeatLocked::GetInputs(SCmdParams&) const
VehicleAction_IsSeatLocked::GetOutputs(SCmdParams&) const
VehicleAction_Destroy::~VehicleAction_Destroy()
VehicleAction_Destroy::GetName() const
VehicleAction_Destroy::GetInputs(SCmdParams&) const
VehicleAction_Destroy::GetOutputs(SCmdParams&) const
VehicleAction_SetScript::~VehicleAction_SetScript()
VehicleAction_SetScript::GetName() const
VehicleAction_SetScript::GetInputs(SCmdParams&) const
VehicleAction_SetScript::GetOutputs(SCmdParams&) const
VehicleAction_InArea::~VehicleAction_InArea()
VehicleAction_InArea::GetName() const
VehicleAction_InArea::GetInputs(SCmdParams&) const
VehicleAction_InArea::GetOutputs(SCmdParams&) const
VehicleAction_IsTakingAction::~VehicleAction_IsTakingAction()
VehicleAction_IsTakingAction::GetName() const
VehicleAction_IsTakingAction::GetInputs(SCmdParams&) const
VehicleAction_IsTakingAction::GetOutputs(SCmdParams&) const
VehicleAction_SetCraneMode::~VehicleAction_SetCraneMode()
VehicleAction_SetCraneMode::GetName() const
VehicleAction_SetCraneMode::GetInputs(SCmdParams&) const
VehicleAction_SetCraneMode::GetOutputs(SCmdParams&) const
VehicleAction_GetCraneLoadIfGizmo::~VehicleAction_GetCraneLoadIfGizmo()
VehicleAction_GetCraneLoadIfGizmo::GetName() const
VehicleAction_GetCraneLoadIfGizmo::GetInputs(SCmdParams&) const
VehicleAction_GetCraneLoadIfGizmo::GetOutputs(SCmdParams&) const
VehicleAction_SetTargetForCraneLoad::~VehicleAction_SetTargetForCraneLoad()
VehicleAction_SetTargetForCraneLoad::GetName() const
VehicleAction_SetTargetForCraneLoad::GetInputs(SCmdParams&) const
VehicleAction_SetTargetForCraneLoad::GetOutputs(SCmdParams&) const
VehicleAction_SetPickupForCrane::~VehicleAction_SetPickupForCrane()
VehicleAction_SetPickupForCrane::GetName() const
VehicleAction_SetPickupForCrane::GetInputs(SCmdParams&) const
VehicleAction_SetPickupForCrane::GetOutputs(SCmdParams&) const
VehicleAction_GetClass::~VehicleAction_GetClass()
VehicleAction_GetClass::GetName() const
VehicleAction_GetClass::GetInputs(SCmdParams&) const
VehicleAction_GetClass::GetOutputs(SCmdParams&) const
VehicleAction_GetModelName::~VehicleAction_GetModelName()
VehicleAction_GetModelName::GetName() const
VehicleAction_GetModelName::GetInputs(SCmdParams&) const
VehicleAction_GetModelName::GetOutputs(SCmdParams&) const
VehicleAction_GetCategory::~VehicleAction_GetCategory()
VehicleAction_GetCategory::GetName() const
VehicleAction_GetCategory::GetInputs(SCmdParams&) const
VehicleAction_GetCategory::GetOutputs(SCmdParams&) const
VehicleAction_Release::~VehicleAction_Release()
VehicleAction_Release::GetName() const
VehicleAction_Release::GetInputs(SCmdParams&) const
VehicleAction_Release::GetOutputs(SCmdParams&) const
VehicleAction_ReduceTumbling::~VehicleAction_ReduceTumbling()
VehicleAction_ReduceTumbling::GetName() const
VehicleAction_ReduceTumbling::GetInputs(SCmdParams&) const
VehicleAction_ReduceTumbling::GetOutputs(SCmdParams&) const
VehicleAction_SetMassMul::~VehicleAction_SetMassMul()
VehicleAction_SetMassMul::GetName() const
VehicleAction_SetMassMul::GetInputs(SCmdParams&) const
VehicleAction_SetMassMul::GetOutputs(SCmdParams&) const
VehicleAction_TurnOnSiren::~VehicleAction_TurnOnSiren()
VehicleAction_TurnOnSiren::GetName() const
VehicleAction_TurnOnSiren::GetInputs(SCmdParams&) const
VehicleAction_TurnOnSiren::GetOutputs(SCmdParams&) const
VehicleAction_HasSiren::~VehicleAction_HasSiren()
VehicleAction_HasSiren::GetName() const
VehicleAction_HasSiren::GetInputs(SCmdParams&) const
VehicleAction_HasSiren::GetOutputs(SCmdParams&) const
VehicleAction_AssignCharacter::~VehicleAction_AssignCharacter()
VehicleAction_AssignCharacter::GetName() const
VehicleAction_AssignCharacter::GetInputs(SCmdParams&) const
VehicleAction_AssignCharacter::GetOutputs(SCmdParams&) const
VehicleAction_EmitPickups::~VehicleAction_EmitPickups()
VehicleAction_EmitPickups::GetName() const
VehicleAction_EmitPickups::GetInputs(SCmdParams&) const
VehicleAction_EmitPickups::GetOutputs(SCmdParams&) const
VehicleAction_SetBossIcons::~VehicleAction_SetBossIcons()
VehicleAction_SetBossIcons::GetName() const
VehicleAction_SetBossIcons::GetInputs(SCmdParams&) const
VehicleAction_SetBossIcons::GetOutputs(SCmdParams&) const
VehicleAction_LockInPlace::~VehicleAction_LockInPlace()
VehicleAction_LockInPlace::GetName() const
VehicleAction_LockInPlace::GetInputs(SCmdParams&) const
VehicleAction_LockInPlace::GetOutputs(SCmdParams&) const
VehicleAction_ExplodeCamera::~VehicleAction_ExplodeCamera()
VehicleAction_ExplodeCamera::GetName() const
VehicleAction_ExplodeCamera::GetInputs(SCmdParams&) const
VehicleAction_ExplodeCamera::GetOutputs(SCmdParams&) const
VehicleAction_SetBlowUpTimer::~VehicleAction_SetBlowUpTimer()
VehicleAction_SetBlowUpTimer::GetName() const
VehicleAction_SetBlowUpTimer::GetInputs(SCmdParams&) const
VehicleAction_SetBlowUpTimer::GetOutputs(SCmdParams&) const
VehicleAction_SetBoobyTrap::~VehicleAction_SetBoobyTrap()
VehicleAction_SetBoobyTrap::GetName() const
VehicleAction_SetBoobyTrap::GetInputs(SCmdParams&) const
VehicleAction_SetBoobyTrap::GetOutputs(SCmdParams&) const
VehicleAction_SetUnlimitedBoost::~VehicleAction_SetUnlimitedBoost()
VehicleAction_SetUnlimitedBoost::GetName() const
VehicleAction_SetUnlimitedBoost::GetInputs(SCmdParams&) const
VehicleAction_SetUnlimitedBoost::GetOutputs(SCmdParams&) const
VehicleAction_IsBoostEnabled::~VehicleAction_IsBoostEnabled()
VehicleAction_IsBoostEnabled::GetName() const
VehicleAction_IsBoostEnabled::GetInputs(SCmdParams&) const
VehicleAction_IsBoostEnabled::GetOutputs(SCmdParams&) const
VehicleAction_OperateDoor::~VehicleAction_OperateDoor()
VehicleAction_OperateDoor::GetName() const
VehicleAction_OperateDoor::GetInputs(SCmdParams&) const
VehicleAction_OperateDoor::GetOutputs(SCmdParams&) const
VehicleAction_SetMissionCritical::~VehicleAction_SetMissionCritical()
VehicleAction_SetMissionCritical::GetName() const
VehicleAction_SetMissionCritical::GetInputs(SCmdParams&) const
VehicleAction_SetMissionCritical::GetOutputs(SCmdParams&) const
VehicleAction_SetMissionCriticalRespawnAtStart::~VehicleAction_SetMissionCriticalRespawnAtStart()
VehicleAction_SetMissionCriticalRespawnAtStart::GetName() const
VehicleAction_SetMissionCriticalRespawnAtStart::GetInputs(SCmdParams&) const
VehicleAction_SetMissionCriticalRespawnAtStart::GetOutputs(SCmdParams&) const
VehicleAction_IsMissionCritical::~VehicleAction_IsMissionCritical()
VehicleAction_IsMissionCritical::GetName() const
VehicleAction_IsMissionCritical::GetInputs(SCmdParams&) const
VehicleAction_IsMissionCritical::GetOutputs(SCmdParams&) const
VehicleAction_SetQueryDismount::~VehicleAction_SetQueryDismount()
VehicleAction_SetQueryDismount::GetName() const
VehicleAction_SetQueryDismount::GetInputs(SCmdParams&) const
VehicleAction_SetQueryDismount::GetOutputs(SCmdParams&) const
VehicleAction_IsQueryDismountSet::~VehicleAction_IsQueryDismountSet()
VehicleAction_IsQueryDismountSet::GetName() const
VehicleAction_IsQueryDismountSet::GetInputs(SCmdParams&) const
VehicleAction_IsQueryDismountSet::GetOutputs(SCmdParams&) const
Task_ConvertToPedestrian::CanConvertToKrawliePedestrian(MechCharacter*)
Task_ConvertToPedestrian::Task_ConvertToPedestrian(bool)
Task_ConvertToPedestrian::~Task_ConvertToPedestrian()
Task_ConvertToPedestrian::~Task_ConvertToPedestrian()
Task_ConvertToPedestrian::Activate()
Task_ConvertToPedestrian::Process(Brain&, float const&)
Task_ConvertToPedestrian::Init(Brain&)
Task_ConvertToPedestrian::SetPhase(Task_ConvertToPedestrian::ePhase)
Task_ConvertToPedestrian::CalcNetworkReturnPos(MechCharacter const*)
RumbleConfig::Load()
RumbleConfig::Get(RumbleConfig::RumbleType)
RumbleTriggerData::RumbleTriggerData(CharAnimTrigger*)
RumbleTriggerData::~RumbleTriggerData()
RumbleTriggerData::~RumbleTriggerData()
RumbleTriggerData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
RumbleTriggerData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
RumbleTriggerUpdateData::RumbleTriggerUpdateData(CharAnimTrigger const&, CharAnimState&)
RumbleTriggerUpdateData::~RumbleTriggerUpdateData()
RumbleTriggerUpdateData::~RumbleTriggerUpdateData()
RumbleTriggerDataHelper::RegisterTriggerType()
RumbleTriggerDataHelper::RegisterClasses(EdRegistry&)
RumbleTriggerDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
RumbleTriggerDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
RumbleTriggerDataHelper::~RumbleTriggerDataHelper()
SlowMoTriggerData::SlowMoTriggerData(CharAnimTrigger*)
SlowMoTriggerData::~SlowMoTriggerData()
SlowMoTriggerData::~SlowMoTriggerData()
SlowMoTriggerData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
SlowMoTriggerData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
SlowMoTriggerUpdateData::SlowMoTriggerUpdateData(CharAnimTrigger const&, CharAnimState&)
SlowMoTriggerUpdateData::~SlowMoTriggerUpdateData()
SlowMoTriggerUpdateData::~SlowMoTriggerUpdateData()
SlowMoTriggerDataHelper::RegisterTriggerType()
SlowMoTriggerDataHelper::RegisterClasses(EdRegistry&)
SlowMoTriggerDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
SlowMoTriggerDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
SlowMoTriggerDataHelper::~SlowMoTriggerDataHelper()
ExplosionTriggerData::ExplosionTriggerData(CharAnimTrigger*)
ExplosionTriggerData::~ExplosionTriggerData()
ExplosionTriggerData::~ExplosionTriggerData()
ExplosionTriggerData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
ExplosionTriggerData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
ExplosionTriggerUpdateData::ExplosionTriggerUpdateData(CharAnimTrigger const&, CharAnimState&)
ExplosionTriggerUpdateData::~ExplosionTriggerUpdateData()
ExplosionTriggerUpdateData::~ExplosionTriggerUpdateData()
ExplosionTriggerDataHelper::RegisterTriggerType()
ExplosionTriggerDataHelper::RegisterClasses(EdRegistry&)
ExplosionTriggerDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
ExplosionTriggerDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
ExplosionTriggerDataHelper::~ExplosionTriggerDataHelper()
LCAtimateAttachRenderAttachLocator(MechCharacter*, unsigned char, MechCharacter*)
AttachAnimateContext::AttachAnimateContext(MechCharacter&)
AttachAnimateContext::OnEnter(LevelContainer*)
AttachAnimateContext::OnProcess(LevelContainer*, float)
AttachAnimateContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
AttachAnimateContext::OnLeave()
AttachAnimateContext::SetPartner(MechCharacter*)
AttachAnimateContext::SetMasterAndHeading(int)
AttachAnimateContext::Prepare()
AttachAnimateContext::Init()
MechContext* MechContextConstructor<AttachAnimateContext>(MechCharacter&)
AttachAnimateContext::~AttachAnimateContext()
AttachAnimateContext::AllowEnter(int, MechContext*)
AttachAnimateContext::AllowLeave(int, MechContext*)
LegoContextHandlerBase<AttachAnimateContext>::GetInstanceId() const
LegoContextHandlerBase<AttachAnimateContext>::~LegoContextHandlerBase()
HandcuffContext::HandcuffContext(MechCharacter&)
HandcuffContext::~HandcuffContext()
HandcuffContext::~HandcuffContext()
HandcuffContext::AllowEnter(int, MechContext*)
HandcuffContext::AllowLeave(int, MechContext*)
HandcuffContext::OnEnter(LevelContainer*)
HandcuffContext::OnProcess(LevelContainer*, float)
HandcuffContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
HandcuffContext::OnLeave()
HandcuffedContext::HandcuffedContext(MechCharacter&)
HandcuffedContext::~HandcuffedContext()
HandcuffedContext::~HandcuffedContext()
HandcuffedContext::AllowEnter(int, MechContext*)
HandcuffedContext::AllowLeave(int, MechContext*)
HandcuffedContext::OnEnter(LevelContainer*)
HandcuffedContext::Prepare()
HandcuffedContext::StartPhase0()
HandcuffedContext::StartPhase1()
HandcuffedContext::OnProcess(LevelContainer*, float)
HandcuffedContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
HandcuffedContext::OnLeave()
HandcuffedContext::SetOpponent(MechCharacter*)
LegoContextHandlerBase<HandcuffContext>::GetInstanceId() const
LegoContextHandlerBase<HandcuffedContext>::GetInstanceId() const
MechCharacterInteractEventData::~MechCharacterInteractEventData()
LegoContextHandlerBase<HandcuffContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<HandcuffedContext>::~LegoContextHandlerBase()
AttackContext::Init()
MechContext* MechContextConstructor<AttackContext>(MechCharacter&)
AttackContext::AllowEnter(int, MechContext*)
AttackContext::OnEnter(LevelContainer*)
AttackContext::OnProcess(LevelContainer*, float)
AttackContext::CheckHit() const
AttackContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
AttackContext::AllowLeave(int, MechContext*)
AttackContext::OnLeave()
CounterableAttackContext::Init()
MechContext* MechContextConstructor<CounterableAttackContext>(MechCharacter&)
CounterableAttackContext::WindupTime(MechCharacter const*)
CounterableAttackContext::TimeTillAttackAllowed(MechCharacter*, float)
CounterableAttackContext::InImmuneContext(MechCharacter*)
CounterableAttackContext::IsAttackable() const
CounterableAttackContext::ShouldBrace() const
CounterableAttackContext::AllowEnter(int, MechContext*)
CounterableAttackContext::OnEnter(LevelContainer*)
CounterableAttackContext::OnProcess(LevelContainer*, float)
CounterableAttackContext::StartAbort()
CounterableAttackContext::StartAttack()
CounterableAttackContext::CheckHit() const
CounterableAttackContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
CounterableAttackContext::AllowLeave(int, MechContext*)
CounterableAttackContext::OnLeave()
CounterableAttackContext::SetlectActionOverrideFromDistance()
TauntContext::Init()
MechContext* MechContextConstructor<TauntContext>(MechCharacter&)
TauntContext::AllowEnter(int, MechContext*)
TauntContext::OnEnter(LevelContainer*)
TauntContext::OnProcess(LevelContainer*, float)
TauntContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
TauntContext::AllowLeave(int, MechContext*)
TauntContext::OnLeave()
AttackContext::~AttackContext()
LegoContextHandlerBase<AttackContext>::GetInstanceId() const
CounterableAttackContext::~CounterableAttackContext()
LegoContextHandlerBase<CounterableAttackContext>::GetInstanceId() const
TauntContext::~TauntContext()
LegoContextHandlerBase<TauntContext>::GetInstanceId() const
LegoContextHandlerBase<AttackContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<CounterableAttackContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<TauntContext>::~LegoContextHandlerBase()
BlockContext::Init()
MechContext* MechContextConstructor<BlockContext>(MechCharacter&)
BlockContext::AllowEnter(int, MechContext*)
BlockContext::OnEnter(LevelContainer*)
BlockContext::OnProcess(LevelContainer*, float)
BlockContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
BlockContext::AllowLeave(int, MechContext*)
BlockContext::OnLeave()
BlockContext::~BlockContext()
LegoContextHandlerBase<BlockContext>::GetInstanceId() const
LegoContextHandlerBase<BlockContext>::~LegoContextHandlerBase()
BrickGrabContext::BrickGrabContext(MechCharacter&)
BrickGrabContext::~BrickGrabContext()
BrickGrabContext::~BrickGrabContext()
BrickGrabContext::AllowEnter(int, MechContext*)
BrickGrabContext::AllowLeave(int, MechContext*)
BrickGrabContext::OnEnter(LevelContainer*)
BrickGrabContext::OnProcess(LevelContainer*, float)
BrickGrabContext::ProcessMountFromGround()
BrickGrabContext::ProcessMountFromTop()
BrickGrabContext::ProcessGrab()
BrickGrabContext::ProcessMountAttach()
BrickGrabContext::ProcessDismountToGround()
BrickGrabContext::ProcessDismountToTop()
BrickGrabContext::ProcessIdle()
BrickGrabContext::ProcessLeaping()
BrickGrabContext::ProcessJump()
BrickGrabContext::ProcessFall()
BrickGrabContext::ProcessQTE()
BrickGrabContext::UpdateAIState()
BrickGrabContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
BrickGrabContext::OnLeave()
BrickGrabContext::SetStart(LegoCityObstacle*, bool, bool)
BrickGrabContext::SwitchTo(BrickGrabContext::State)
BrickGrabContext::Check(MechCharacter*)
BrickGrabContext::CheckBrickFromGround(MechCharacter*, LegoCityObstacle*)
BrickGrabContext::CheckBrickMidAir(MechCharacter*, LegoCityObstacle*, bool)
BrickGrabContext::Init()
MechContext* MechContextConstructor<BrickGrabContext>(MechCharacter&)
BrickGrabContext::IsAIBusy() const
BrickGrabContext::GetAIState() const
BrickGrabContext::SetAINextBrick(LegoCityObstacle*)
BrickGrabContext::SetAINextPos(VuVec const&, bool)
BrickGrabContext::ExitMountFromGround()
BrickGrabContext::ExitMountFromTop()
BrickGrabContext::ExitGrab()
BrickGrabContext::ExitMountAttach()
BrickGrabContext::ExitDismountToGround()
BrickGrabContext::ExitDismountToTop()
BrickGrabContext::ExitIdle()
BrickGrabContext::ExitLeaping()
BrickGrabContext::ExitJump()
BrickGrabContext::ExitFall()
BrickGrabContext::ExitQTE()
BrickGrabContext::EnterMountFromGround()
BrickGrabContext::EnterMountFromTop()
BrickGrabContext::EnterGrab()
BrickGrabContext::EnterMountAttach()
BrickGrabContext::EnterDismountToGround()
BrickGrabContext::EnterDismountToTop()
BrickGrabContext::EnterIdle()
BrickGrabContext::EnterLeaping()
BrickGrabContext::EnterJump()
BrickGrabContext::EnterFall()
BrickGrabContext::EnterQTE()
BrickGrabContext::AdjustHeight()
BrickGrabContext::CalcJump()
BrickGrabContext::StartJump(unsigned short, VuVec const&, bool)
BrickGrabAITask::Process(Brain&, float const&)
BrickGrabAITask::BrickGrabAITask()
BrickGrabAITask::FindCurrentEdge(MechCharacter&, LegoCityObstacle const*)
LegoContextHandlerBase<BrickGrabContext>::GetInstanceId() const
LegoContextHandlerBase<BrickGrabContext>::~LegoContextHandlerBase()
CatchCatContext::CatchCatContext(MechCharacter&)
CatchCatContext::~CatchCatContext()
CatchCatContext::~CatchCatContext()
CatchCatContext::Init()
MechContext* MechContextConstructor<CatchCatContext>(MechCharacter&)
MechContext* MechContextConstructor<CatchCat_TheCatContext>(MechCharacter&)
CatchCatContext::AllowEnter(int, MechContext*)
CatchCatContext::AllowLeave(int, MechContext*)
CatchCatContext::OnEnter(LevelContainer*)
CatchCatContext::OnLeave()
CatchCatContext::OnProcess(LevelContainer*, float)
LegoContextHandlerBase<CatchCatContext>::GetInstanceId() const
LegoContextHandlerBase<CatchCatContext>::~LegoContextHandlerBase()
CatchCat_TheCatContext::~CatchCat_TheCatContext()
CatchCat_TheCatContext::AllowLeave(int, MechContext*)
CatchCat_TheCatContext::OnEnter(LevelContainer*)
LegoContextHandlerBase<CatchCat_TheCatContext>::GetInstanceId() const
LegoContextHandlerBase<CatchCat_TheCatContext>::~LegoContextHandlerBase()
ComboContext::Init()
MechContext* MechContextConstructor<ComboContext>(MechCharacter&)
ComboContext::AllowEnter(int, MechContext*)
ComboContext::OnEnter(LevelContainer*)
ComboContext::OnProcess(LevelContainer*, float)
ComboContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
ComboContext::AllowLeave(int, MechContext*)
ComboContext::OnLeave()
FlyingAttackContext::Init()
MechContext* MechContextConstructor<FlyingAttackContext>(MechCharacter&)
FlyingAttackContext::OnProcess(LevelContainer*, float)
FlyingAttackContext::AllowEnter(int, MechContext*)
FlyingAttackContext::AllowLeave(int, MechContext*)
FlyingAttackContext::OnEnter(LevelContainer*)
FlyingAttackContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
FlyingAttackContext::OnLeave()
ComboContext::~ComboContext()
LegoContextHandlerBase<ComboContext>::GetInstanceId() const
FlyingAttackContext::~FlyingAttackContext()
LegoContextHandlerBase<FlyingAttackContext>::GetInstanceId() const
LegoContextHandlerBase<ComboContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<FlyingAttackContext>::~LegoContextHandlerBase()
DrainPipesContext::DrainPipesContext(MechCharacter&)
DrainPipesContext::~DrainPipesContext()
DrainPipesContext::~DrainPipesContext()
DrainPipesContext::Init()
MechContext* MechContextConstructor<DrainPipesContext>(MechCharacter&)
DrainPipesContext::ShouldAttachTo(MechCharacter*, GizmoLedge const*)
DrainPipesContext::IsLedgeBottomEndPipe(GizmoLedge const*)
DrainPipesContext::CalcLedgeEdges(GizmoLedge const*, VuVec&, VuVec&, VuVec&)
DrainPipesContext::SetStart(GizmoLedge const*, NUVEC*)
DrainPipesContext::IsLedgeTopEndPipe(GizmoLedge const*)
DrainPipesContext::IsLedgeHorizontalInnerCorner(GizmoLedge const*)
DrainPipesContext::IsLedgeHorizontalOuterCorner(GizmoLedge const*)
DrainPipesContext::IsLedgeVerToHorCCWCorner(GizmoLedge const*)
DrainPipesContext::IsLedgeVerToHorCWCorner(GizmoLedge const*)
DrainPipesContext::IsActive(GizmoLedge const*)
DrainPipesContext::IsLedgeHorizontal(GizmoLedge const*, bool)
DrainPipesContext::IsLedgeVertical(GizmoLedge const*)
DrainPipesContext::SetCurrentLedge(GizmoLedge const*, bool)
DrainPipesContext::AllowEnter(int, MechContext*)
DrainPipesContext::OnEnter(LevelContainer*)
DrainPipesContext::OnProcess(LevelContainer*, float)
DrainPipesContext::CaptureJump()
DrainPipesContext::ProcessUnset(float)
DrainPipesContext::ProcessAttach(float)
DrainPipesContext::ProcessQTE(float)
DrainPipesContext::ProcessAttachFromTop(float)
DrainPipesContext::ProcessRelease(float)
DrainPipesContext::ProcessJumpOff(float)
DrainPipesContext::ProcessFallOff(float)
DrainPipesContext::ProcessJumpAtTop(float)
DrainPipesContext::ProcessVertical(float)
DrainPipesContext::ProcessHorizontal(float)
DrainPipesContext::ProcessVerToHor(float)
DrainPipesContext::ProcessHorToVer(float)
DrainPipesContext::UpdateAIState()
DrainPipesContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
DrainPipesContext::AllowLeave(int, MechContext*)
DrainPipesContext::OnLeave()
DrainPipesContext::IsAIBusy() const
DrainPipesContext::SetAIDestination(GizmoLedge const*)
DrainPipesContext::SetAIDestination(GizmoLedge const*, VuVec const&, bool, bool)
DrainPipesContext::GetAICurrentLedge() const
DrainPipesContext::DrainPipesDynoListener::SetGizmoToIgnore(LegoCityLedge const*)
DrainPipesContext::GetOrient(GizmoLedge const*, VuMtx&)
DrainPipesContext::CalcLedgeSegmentEdges(GizmoLedge const*, VuVec&, VuVec&, VuVec&)
DrainPipesContext::CanRelease() const
DrainPipesContext::SwitchTo(DrainPipesContext::State, GizmoLedge const*)
DrainPipesContext::GetDir() const
DrainPipesContext::IsValidTopEnd() const
DrainPipesContext::IsValidForTransitionUpLeft() const
DrainPipesContext::IsValidBottomEnd() const
DrainPipesContext::IsValidForTransitionDownRight() const
DrainPipesContext::IsHorizontalTurnUpLeft() const
DrainPipesContext::IsHorizontalTurnDownRight() const
DrainPipesContext::StopHorizontalCorner()
DrainPipesContext::CalculateHorEdges()
DrainPipesContext::StarHorizontalCorner()
DrainPipesContext::EnterAttach(GizmoLedge const*)
DrainPipesContext::CalculateVerEdges()
DrainPipesContext::EnterQTE(GizmoLedge const*)
DrainPipesContext::EnterAttachFromTop(GizmoLedge const*)
DrainPipesContext::EnterRelease(GizmoLedge const*)
DrainPipesContext::EnterJumpOff(GizmoLedge const*)
DrainPipesContext::AdjustHeight()
DrainPipesContext::EnterFallOff(GizmoLedge const*, DrainPipesContext::State)
DrainPipesContext::EnterJumpAtTop(GizmoLedge const*)
DrainPipesContext::StartJump(short, VuVec const&, bool)
DrainPipesContext::EnterVertical(GizmoLedge const*)
DrainPipesContext::EnterHorizontal(GizmoLedge const*)
DrainPipesContext::EnterVerToHor(GizmoLedge const*)
DrainPipesContext::EnterHorToVer(GizmoLedge const*)
DrainPipesContext::ExitAttach(GizmoLedge const*)
DrainPipesContext::ExitQTE(GizmoLedge const*)
DrainPipesContext::ExitAttachFromTop(GizmoLedge const*)
DrainPipesContext::ExitRelease(GizmoLedge const*)
DrainPipesContext::ExitJumpOff(GizmoLedge const*)
DrainPipesContext::ExitFallOff(GizmoLedge const*)
DrainPipesContext::ExitJumpAtTop(GizmoLedge const*)
DrainPipesContext::ExitVertical(GizmoLedge const*)
DrainPipesContext::ExitHorizontal(GizmoLedge const*)
DrainPipesContext::ExitVerToHor(GizmoLedge const*)
DrainPipesContext::ExitHorToVer(GizmoLedge const*)
DrainPipesContext::IsLedgeVerticalCorner(GizmoLedge const*)
DrainPipesContext::IsLedgeDrainPipe(GizmoLedge const*)
DrainPipesAITask::Process(Brain&, float const&)
DrainPipesContext::DebugRender() const
DrainPipesContext::DrainPipesDynoListener::DrainPipesDynoListener(MechCharacter&)
DrainPipesContext::DrainPipesDynoListener::~DrainPipesDynoListener()
DrainPipesContext::DrainPipesDynoListener::~DrainPipesDynoListener()
DrainPipesContext::DrainPipesDynoListener::AllowCollision(Entity const*, Entity const*)
DrainPipesContext::FixUp_AI_Nodes(GizmoLedge*, AIManager&)
DrainPipesContext::FixUp_AI_Edges(GizmoLedgeManager*, AIManager&, ConvexNode*, GizmoLedge*)
DrainPipeCornerAddOn::DrainPipeCornerAddOn(MechCharacter&, GizmoLedge const*, VuVec const&, VuVec const&, bool)
DrainPipeCornerAddOn::OnHook(unsigned char, HookArgs*)
DrainPipeCornerAddOn::FixPosAndOri()
non-virtual thunk to DrainPipeCornerAddOn::OnHook(unsigned char, HookArgs*)
DrainPipesAITask::DrainPipesAITask()
DrainPipesAITask::FindCurrentRoutePoint(MechCharacter&, GizmoLedge const*) const
DrainPipesAITask::FindTargetVerticalEdge(MechCharacter&, AIRoutePoint const*) const
DrainPipesAITask::FindTargetHorizontalEdge(MechCharacter&, AIRoutePoint const*) const
LegoContextHandlerBase<DrainPipesContext>::GetInstanceId() const
DrainPipeCornerAddOn::~DrainPipeCornerAddOn()
non-virtual thunk to DrainPipeCornerAddOn::~DrainPipeCornerAddOn()
non-virtual thunk to DrainPipeCornerAddOn::~DrainPipeCornerAddOn()
LegoContextHandlerBase<DrainPipesContext>::~LegoContextHandlerBase()
CityKrawlieSimpleHookDrillAttack::GetHashedKey()
DrillShockContext::DrillShockContext(MechCharacter&)
DrillShockContext::~DrillShockContext()
DrillShockContext::~DrillShockContext()
DrillShockContext::AllowEnter(int, MechContext*)
DrillShockContext::AllowLeave(int, MechContext*)
DrillShockContext::OnEnter(LevelContainer*)
DrillShockContext::FindEntitiesInRadius(float)
DrillShockContext::OnProcess(LevelContainer*, float)
DrillShockContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
DrillShockContext::OnLeave()
DrillShockContext::Init()
DrillShockContext::CheckUse(MechCharacter*)
LegoContextHandlerBase<DrillShockContext>::GetInstanceId() const
LegoContextHandlerBase<DrillShockContext>::~LegoContextHandlerBase()
GrabContext::Init()
MechContext* MechContextConstructor<GrabContext>(MechCharacter&)
GrabContext::GrabContext(MechCharacter&)
GrabContext::AllowEnter(int, MechContext*)
GrabContext::SetVictim(MechCharacter*)
GrabContext::AllowLeave(int, MechContext*)
GrabContext::OnEnter(LevelContainer*)
GrabContext::Prepare()
GrabContext::GrowCollisionBox()
GrabContext::OnProcess(LevelContainer*, float)
GrabbedContext::SetPhase(GrabbedContext::PHASE)
GrabContext::RestorCollsionBox()
GrabContext::OnLeave()
GrabContext::TimeTillAttackAllowed() const
GrabContext::ReactToHit(MechCharacter*)
GrabContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
GrabbedContext::GrabbedContext(MechCharacter&)
GrabbedContext::AllowEnter(int, MechContext*)
GrabbedContext::AllowLeave(int, MechContext*)
GrabbedContext::OnEnter(LevelContainer*)
GrabbedContext::Prepare()
GrabbedContext::OnProcess(LevelContainer*, float)
GrabbedContext::OnLeave()
GrabbedContext::Init()
MechContext* MechContextConstructor<GrabbedContext>(MechCharacter&)
GrabbedContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
GrabContext::~GrabContext()
LegoContextHandlerBase<GrabContext>::GetInstanceId() const
GrabbedContext::~GrabbedContext()
LegoContextHandlerBase<GrabbedContext>::GetInstanceId() const
LegoContextHandlerBase<GrabContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<GrabbedContext>::~LegoContextHandlerBase()
IdleNoGravityContext::IdleNoGravityContext(MechCharacter&)
IdleNoGravityContext::OnEnter(LevelContainer*)
IdleNoGravityContext::OnProcess(LevelContainer*, float)
IdleNoGravityContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
IdleNoGravityContext::OnLeave()
IdleNoGravityContext::Init()
MechContext* MechContextConstructor<IdleNoGravityContext>(MechCharacter&)
IdleNoGravityContext::~IdleNoGravityContext()
IdleNoGravityContext::AllowEnter(int, MechContext*)
IdleNoGravityContext::AllowLeave(int, MechContext*)
LegoContextHandlerBase<IdleNoGravityContext>::GetInstanceId() const
LegoContextHandlerBase<IdleNoGravityContext>::~LegoContextHandlerBase()
KnockdownValues::KnockdownValues()
KnockdownValues::ParseTable()
KnockdownValues::ClearTable()
KnockdownValues::GetHitTime(HashedKey const&, bool, KNOCKDOWN, BoltType*, int)
KnockdownValues::IsBoltTypePaint(BoltTypeID)
KnockdownValues::GetPaintNuColour(BoltTypeID, float)
KnockdownValues::GetPaintNuColour(int, float)
KnockdownHitContext::OnEnter(LevelContainer*)
KnockdownHitContext::OnProcess(LevelContainer*, float)
KnockdownContext::SetFromAction(int, KNOCKDOWN, BoltType*)
KnockdownContext::KnockdownContext(MechCharacter&)
KnockdownContext::AllowEnter(int, MechContext*)
KnockdownContext::AllowLeave(int, MechContext*)
KnockdownContext::OnEnter(LevelContainer*)
KnockdownContext::OnProcess(LevelContainer*, float)
KnockdownContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
KnockdownContext::GetReaction(int, int*, int*)
KnockdownContext::GetTimePercentage() const
KnockdownContext::OnLeave()
KnockdownGetupContext::AllowEnter(int, MechContext*)
KnockdownGetupContext::AllowLeave(int, MechContext*)
KnockdownGetupContext::OnEnter(LevelContainer*)
KnockdownGetupContext::OnProcess(LevelContainer*, float)
KnockdownGetupContext::OnLeave()
KnockdownHitContext::~KnockdownHitContext()
KnockdownHitContext::AllowEnter(int, MechContext*)
KnockdownHitContext::AllowLeave(int, MechContext*)
KnockdownContext::~KnockdownContext()
LegoContextHandlerBase<KnockdownContext>::GetInstanceId() const
KnockdownGetupContext::~KnockdownGetupContext()
LegoContextHandlerBase<KnockdownContext>::~LegoContextHandlerBase()
OldLedgeContext::Init()
MechContext* MechContextConstructor<OldLedgeContext>(MechCharacter&)
OldLedgeContext::AllowEnter(int, MechContext*)
OldLedgeContext::OnEnter(LevelContainer*)
OldLedgeContext::OnProcess(LevelContainer*, float)
OldLedgeContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
OldLedgeContext::AllowLeave(int, MechContext*)
OldLedgeContext::OnLeave()
LedgeContext::LedgeContext(MechCharacter&)
LedgeContext::~LedgeContext()
LedgeContext::~LedgeContext()
LedgeContext::Init()
MechContext* MechContextConstructor<LedgeContext>(MechCharacter&)
LedgeContext::CheckLedge(MechCharacter*, GizmoLedge const*, LegoParkour::CheckLedgeResult&)
LedgeContext::IsActive(GizmoLedge const*)
LedgeContext::IsLedge(GizmoLedge const*, bool)
LedgeContext::CheckLandOnWallHug(MechCharacter*, bool)
LedgeContext::IsWallHug(GizmoLedge const*, bool)
LedgeContext::IsWallHugCorner(GizmoLedge const*)
LedgeContext::CalcLedgeEdges(GizmoLedge const*, VuVec&, VuVec&, VuVec&)
LedgeContext::SetStartOnWallHug(GizmoLedge const*, bool)
LedgeContext::AllowEnter(int, MechContext*)
LedgeContext::AllowLeave(int, MechContext*)
LedgeContext::OnEnter(LevelContainer*)
LedgeContext::OnProcess(LevelContainer*, float)
LedgeContext::ProcessMount()
LedgeContext::ProcessMountAttach()
LedgeContext::ProcessMountTop()
LedgeContext::ProcessMountFromHpole()
LedgeContext::ProcessAttach()
LedgeContext::ProcessWallHugLand()
LedgeContext::ProcessQTE()
LedgeContext::ProcessWallHugStepOn()
LedgeContext::ProcessLedge()
LedgeContext::ProcessLedgeUptoWallHug()
LedgeContext::ProcessLedgeDowntoWallHug()
LedgeContext::ProcessLedgeUptoLedge()
LedgeContext::ProcessLedgeDowntoLedge()
LedgeContext::ProcessLedgeDrop()
LedgeContext::ProcessLedgeJump()
LedgeContext::ProcessLedgeJumpOff()
LedgeContext::ProcessLedgeJumpTop()
LedgeContext::ProcessWallHug()
LedgeContext::ProcessWallHugCorner()
LedgeContext::ProcessWallHugDowntoLedge()
LedgeContext::ProcessWallHugUptoLedge()
LedgeContext::ProcessWallHugJump()
LedgeContext::ProcessWallHugJumpBack()
LedgeContext::ProcessWallHugStepOff()
LedgeContext::UpdateAIState()
LedgeContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LedgeContext::OnLeave()
LedgeContext::StopLedgeCorner()
LedgeContext::SetStartFromTopAI(GizmoLedge const*, VuVec const&)
LedgeContext::SwitchTo(LedgeContext::State, GizmoLedge const*)
LedgeContext::SetStartFromGround(GizmoLedge const*, LegoParkour::MoveParameters const*, VuVec const&)
LedgeContext::SetStartFromAir(GizmoLedge const*)
LedgeContext::SetStartFromHpole(GizmoLedge const*, unsigned long)
LedgeContext::SetStartIntoIdle(GizmoLedge const*, unsigned long)
LedgeContext::IsAIBusy() const
LedgeContext::SetAIDestination(GizmoLedge const*, LedgeContext::eAIMoveType)
LedgeContext::SetAIDestination(GizmoLedge const*, VuVec const&, LedgeContext::eAIMoveType)
LedgeContext::GetAICurrentLedge() const
LedgeContext::NewAttachAllowed() const
LedgeContext::EnterMount(GizmoLedge const*)
LedgeContext::StartAttach(short, short, GizmoLedge const*, bool, VuVec const&)
LedgeContext::EnterMountAttach(GizmoLedge const*)
LedgeContext::SetCurrentLedge(GizmoLedge const*)
LedgeContext::EnterMountTop(GizmoLedge const*)
LedgeContext::EnterMountFromHpole(GizmoLedge const*)
LedgeContext::CalcAttach(GizmoLedge const*, bool, VuVec const&)
LedgeContext::IsDangle(GizmoLedge const*)
LedgeContext::EnterAttach(GizmoLedge const*)
LedgeContext::EnterWallHugLand(GizmoLedge const*)
MPMMath::ClosestPointOnSegment(VuVec const&, VuVec const&, VuVec const&)
LedgeContext::EnterQTE(GizmoLedge const*)
LedgeContext::EnterWallHugStepOn(GizmoLedge const*)
LedgeContext::EnterLedge(GizmoLedge const*)
LedgeContext::CalculateLedgeEdges()
LedgeContext::SnapToCurrentLedge(bool)
LedgeContext::EnterLedgeUptoWallHug(GizmoLedge const*)
LedgeContext::EnterLedgeDowntoWallHug(GizmoLedge const*)
LedgeContext::EnterTransition(GizmoLedge const*, bool)
LedgeContext::EnterLedgeUptoLedge(GizmoLedge const*)
LedgeContext::EnterLedgeDowntoLedge(GizmoLedge const*)
LedgeContext::EnterLedgeDrop(GizmoLedge const*)
LedgeContext::AdjustHeight()
LedgeContext::EnterLedgeJump(GizmoLedge const*)
LedgeContext::StartJump(short, VuVec const&, bool)
LedgeContext::EnterLedgeJumpOff(GizmoLedge const*)
LedgeContext::EnterLedgeJumpTop(GizmoLedge const*)
LedgeContext::EnterWallHugUptoLedge(GizmoLedge const*)
LedgeContext::EnterWallHugJump(GizmoLedge const*)
LedgeContext::EnterWallHugJumpBack(GizmoLedge const*)
LedgeContext::EnterWallHugStepOff(GizmoLedge const*)
LedgeContext::EnterWallHugDowntoLedge(GizmoLedge const*)
LedgeContext::EnterWallHug(GizmoLedge const*)
LedgeContext::CalculateWallHugEdges()
LedgeContext::EnterWallHugCorner(GizmoLedge const*)
LedgeContext::IsWallHugInnerCorner(GizmoLedge const*)
LedgeContext::ExitMount()
LedgeContext::ExitMountAttach()
LedgeContext::ExitAttach()
LedgeContext::ExitMountTop()
LedgeContext::ExitMountFromHpole()
LedgeContext::ExitWallHugLand()
LedgeContext::ExitWallHugStepOn()
LedgeContext::ExitQTE()
LedgeContext::ExitLedge()
LedgeContext::ExitLedgeUptoWallHug()
LedgeContext::ExitLedgeDowntoWallHug()
LedgeContext::ExitLedgeUptoLedge()
LedgeContext::ExitLedgeDowntoLedge()
LedgeContext::ExitLedgeDrop()
LedgeContext::ExitLedgeJump()
LedgeContext::ExitLedgeJumpOff()
LedgeContext::ExitLedgeJumpTop()
LedgeContext::ExitWallHug()
LedgeContext::ExitWallHugCorner()
LedgeContext::ExitWallHugJump()
LedgeContext::ExitWallHugJumpBack()
LedgeContext::ExitWallHugStepOff()
LedgeContext::ExitWallHugDowntoLedge()
LedgeContext::ExitWallHugUptoLedge()
LedgeContext::ShouldBreak() const
LedgeContext::GetDir() const
LedgeContext::StartLedgeTransitionUp(LedgeContext::Direction)
LedgeContext::StartLedgeTransitionDown()
LedgeContext::IsLedgeCorner(GizmoLedge const*)
LedgeContext::StartLedgeCorner()
LedgeContext::StartWallHugTransitionUp(LedgeContext::Direction)
LedgeContext::StartWallHugTransitionDown()
LedgeContext::StartWallHugStepOff()
LedgeContext::ProcessTransition(LedgeContext::State)
LedgeContext::FindMoveLedgeToLedge(LegoCityLedge const*, GizmoLedge const*)
LedgeContext::IsTop(GizmoLedge const*)
LedgeContext::PlayerWantToMove() const
LedgeContext::IsLedgeInnerCorner(GizmoLedge const*)
LedgeAITask::Process(Brain&, float const&)
LedgeContext::IsLedgeOuterCorner(GizmoLedge const*)
LedgeContext::IsWallHugOuterCorner(GizmoLedge const*)
LedgeContext::IsLedgeEnd(GizmoLedge const*)
LedgeContext::Fixup_LedgesNeighbours(LegoCityLedge*)
LedgeContext::FixUp_AI_Nodes(GizmoLedge*, AIManager&)
LedgeContext::FixUp_AI_Edges(GizmoLedgeManager*, AIManager&, ConvexNode*, GizmoLedge*)
LedgeContext::CalcLedgeSegmentEdges(GizmoLedge const*, VuVec&, VuVec&, VuVec&)
LedgeContext::DebugRender() const
LedgeAITask::LedgeAITask()
LedgeAITask::FindCurrentRoutePoint(MechCharacter&, GizmoLedge const*) const
LedgeAITask::FindTargetEdge(MechCharacter&, AIRoutePoint const*) const
OldLedgeContext::~OldLedgeContext()
LegoContextHandlerBase<OldLedgeContext>::GetInstanceId() const
LegoContextHandlerBase<LedgeContext>::GetInstanceId() const
LegoContextHandlerBase<OldLedgeContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<LedgeContext>::~LegoContextHandlerBase()
BouncePadContext::Check(MechCharacter*)
BouncePadContext::OnEnter(LevelContainer*)
BouncPadCameraAddon::BouncPadCameraAddon()
BouncPadCameraAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to BouncPadCameraAddon::OnHook(unsigned char, HookArgs*)
BouncPadCameraAddon::~BouncPadCameraAddon()
non-virtual thunk to BouncPadCameraAddon::~BouncPadCameraAddon()
non-virtual thunk to BouncPadCameraAddon::~BouncPadCameraAddon()
BouncePadJumpContext::BouncePadJumpContext(MechCharacter&)
BouncePadJumpContext::~BouncePadJumpContext()
BouncePadJumpContext::~BouncePadJumpContext()
BouncePadJumpContext::AllowEnter(int, MechContext*)
BouncePadJumpContext::AllowLeave(int, MechContext*)
BouncePadJumpContext::OnEnter(LevelContainer*)
BouncePadJumpContext::Jump(VuVec const*, int, float, float, int, int, int, int, float, float, int, unsigned short)
BouncePadJumpContext::OnProcess(LevelContainer*, float)
BouncePadJumpContext::IsAIBusy() const
BouncePadJumpContext::OnLeave()
BouncePadJumpContext::TryStartBouncePadJump(MechCharacter*)
BouncePadJumpContext::SetObstacle(LegoCityObstacle*)
BouncePadJumpContext::SetAIDestination(VuVec const&)
BouncePadJumpContext::InitFlags()
NuVector<int>::Reserve(unsigned int, bool)
MechCharactersObjectEventData::~MechCharactersObjectEventData()
ParkourMoveContext::Init()
MechContext* MechContextConstructor<ParkourMoveContext>(MechCharacter&)
ParkourMoveContext::ParkourMoveContext(MechCharacter&)
ParkourMoveContext::~ParkourMoveContext()
ParkourMoveContext::~ParkourMoveContext()
ParkourMoveContext::SetStart(GizmoLedge const*, LegoParkour::MoveParameters const*, VuVec const&)
ParkourMoveContext::SwitchTo(ParkourMoveContext::State)
ParkourMoveContext::AllowEnter(int, MechContext*)
ParkourMoveContext::AllowLeave(int, MechContext*)
ParkourMoveContext::OnEnter(LevelContainer*)
ParkourMoveContext::OnProcess(LevelContainer*, float)
ParkourMoveContext::ProcessUnset(float)
ParkourMoveContext::ProcessMoveStart(float)
ParkourMoveContext::ProcessMoveToAttach(float)
ParkourMoveContext::ProcessMoveToMaxY(float)
ParkourMoveContext::ProcessMoveToPhy(float)
ParkourMoveContext::ProcessMoveToEnd(float)
ParkourMoveContext::ProcessMoveEnd(float)
ParkourMoveContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
ParkourMoveContext::OnLeave()
ParkourMoveContext::EnterMoveStart()
ParkourMoveContext::EnterMoveToAttach()
ParkourMoveContext::EnterMoveToMaxY()
ParkourMoveContext::EnterMoveToPhy()
ParkourMoveContext::EnterMoveToEnd()
ParkourMoveContext::EnterMoveEnd()
ParkourMoveContext::CheckLedge(MechCharacter*, GizmoLedge const*, LegoParkour::CheckLedgeResult&)
ParkourMoveContext::CheckLedgeAI(MechCharacter*, GizmoLedge const*, VuVec const&, VuVec const&, bool, LegoParkour::CheckLedgeResult&)
LegoContextHandlerBase<ParkourMoveContext>::GetInstanceId() const
LegoContextHandlerBase<ParkourMoveContext>::~LegoContextHandlerBase()
WindUpContext::Init()
MechContext* MechContextConstructor<WindUpContext>(MechCharacter&)
WindUpContext::AllowEnter(int, MechContext*)
WindUpContext::OnEnter(LevelContainer*)
WindUpContext::OnProcess(LevelContainer*, float)
WindUpContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
WindUpContext::AllowLeave(int, MechContext*)
WindUpContext::OnLeave()
WindUpContext::ShouldDisplayPromt()
WindUpContext::~WindUpContext()
WindUpContext::~WindUpContext()
LegoContextHandlerBase<WindUpContext>::GetInstanceId() const
LegoContextHandlerBase<WindUpContext>::~LegoContextHandlerBase()
ThrowContext::ThrowContext(MechCharacter&)
ThrowContext::Init()
MechContext* MechContextConstructor<ThrowContext>(MechCharacter&)
ThrowContext::Prepare()
ThrownContext::SetThrowNumber(int, int)
ThrownContext::SetPrepareToParry(int, int)
ThrownContext::SetRexFinisherNumber(int)
ThrownContext::SetGrabReactToHit(int, int)
ThrowContext::TimeTillAttackAllowed() const
ThrowContext::BreakAllowed() const
ThrowContext::OnEnter(LevelContainer*)
ThrowContext::SetOpponent(MechCharacter*)
ThrowContext::OnProcess(LevelContainer*, float)
TurnToPutDownContext::Prepare()
ThrowContext::OnLeave()
PutDownContext::PutDownContext(MechCharacter&)
PutDownContext::AllowEnter(int, MechContext*)
PutDownContext::Prepare()
PutDownContext::PrepareFinisherCamera()
ThrownContext::SetAutoCounterNumber(int)
ThrownContext::SetFinisherNumber(int, int)
ThrownContext::SetParriedNumber(int, bool)
ThrownContext::SetPutDownNumber(int)
PutDownContext::TimeTillAttackAllowed() const
PutDownContext::BreakAllowed() const
PutDownContext::OnEnter(LevelContainer*)
PutDownContext::OnProcess(LevelContainer*, float)
PutDownContext::ProcessFinisherCamera()
PutDownContext::OnLeave()
PutDownContext::Init()
MechContext* MechContextConstructor<PutDownContext>(MechCharacter&)
PutDownContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LCFightingRenderAttachLocator(MechCharacter*, MechCharacter*)
LCFightingRenderTargetPosition(MechObjectData&, bool)
ThrownContext::ThrownContext(MechCharacter&)
ThrownContext::Init()
MechContext* MechContextConstructor<ThrownContext>(MechCharacter&)
ThrownContext::Prepare()
ThrownContext::SetThrowBobomb()
ThrownContext::HitObject(GizmoCitySimpleProp const*)
ThrownContext::HitObject(MechGadgetSimplePropInstance*)
ThrownContext::OnEnter(LevelContainer*)
ThrownContext::OnProcess(LevelContainer*, float)
ThrownContext::RocketOutOfControlStart(bool)
ThrownContext::AllowEnter(int, MechContext*)
ThrownContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
ThrownContext::AllowLeave(int, MechContext*)
ThrownContext::OnLeave()
ThrownContext::Collision(Character*, Entity*, ContactPoint&)
non-virtual thunk to ThrownContext::Collision(Character*, Entity*, ContactPoint&)
MissAttackContext::MissAttackContext(MechCharacter&)
MissAttackContext::Init()
MechContext* MechContextConstructor<MissAttackContext>(MechCharacter&)
MissAttackContext::OnEnter(LevelContainer*)
MissAttackContext::OnProcess(LevelContainer*, float)
MissAttackContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
MissAttackContext::BreakAllowed() const
TurnToPutDownContext::TurnToPutDownContext(MechCharacter&)
TurnToPutDownContext::Init()
MechContext* MechContextConstructor<TurnToPutDownContext>(MechCharacter&)
TurnToPutDownContext::OnEnter(LevelContainer*)
TurnToPutDownContext::OnProcess(LevelContainer*, float)
TurnToPutDownContext::InDirection(float) const
TurnToPutDownContext::Stop()
TurnToPutDownContext::StartPutDown()
TurnToPutDownContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
TakeHitContext::TakeHitContext(MechCharacter&)
TakeHitContext::Init()
MechContext* MechContextConstructor<TakeHitContext>(MechCharacter&)
TakeHitContext::OnEnter(LevelContainer*)
TakeHitContext::OnProcess(LevelContainer*, float)
TakeHitContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
TakeHitContext::HitFrom(MechCharacter*)
ThrowContext::~ThrowContext()
ThrowContext::~ThrowContext()
ThrowContext::AllowEnter(int, MechContext*)
ThrowContext::AllowLeave(int, MechContext*)
ThrowContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoContextHandlerBase<ThrowContext>::GetInstanceId() const
PutDownContext::~PutDownContext()
PutDownContext::~PutDownContext()
PutDownContext::AllowLeave(int, MechContext*)
LegoContextHandlerBase<PutDownContext>::GetInstanceId() const
ThrownContext::~ThrownContext()
ThrownContext::~ThrownContext()
non-virtual thunk to ThrownContext::~ThrownContext()
non-virtual thunk to ThrownContext::~ThrownContext()
MissAttackContext::~MissAttackContext()
MissAttackContext::~MissAttackContext()
MissAttackContext::AllowEnter(int, MechContext*)
MissAttackContext::AllowLeave(int, MechContext*)
MissAttackContext::OnLeave()
LegoContextHandlerBase<MissAttackContext>::GetInstanceId() const
TurnToPutDownContext::~TurnToPutDownContext()
TurnToPutDownContext::~TurnToPutDownContext()
TurnToPutDownContext::AllowEnter(int, MechContext*)
TurnToPutDownContext::AllowLeave(int, MechContext*)
TurnToPutDownContext::OnLeave()
LegoContextHandlerBase<TurnToPutDownContext>::GetInstanceId() const
TakeHitContext::~TakeHitContext()
TakeHitContext::AllowEnter(int, MechContext*)
TakeHitContext::AllowLeave(int, MechContext*)
TakeHitContext::OnLeave()
LegoContextHandlerBase<TakeHitContext>::GetInstanceId() const
LegoContextHandlerBase<ThrowContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<PutDownContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<MissAttackContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<TurnToPutDownContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<TakeHitContext>::~LegoContextHandlerBase()
TackleContext::Init()
MechContext* MechContextConstructor<TackleContext>(MechCharacter&)
TackleContext::AllowEnter(int, MechContext*)
TackleContext::OnEnter(LevelContainer*)
TackleContext::OnProcess(LevelContainer*, float)
TackleContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
TackleContext::AllowLeave(int, MechContext*)
TackleContext::OnLeave()
TackleContext::~TackleContext()
TackleContext::~TackleContext()
LegoContextHandlerBase<TackleContext>::GetInstanceId() const
non-virtual thunk to TackleContext::~TackleContext()
non-virtual thunk to TackleContext::~TackleContext()
LegoContextHandlerBase<TackleContext>::~LegoContextHandlerBase()
GetSlopeUpFromNormal(NUVEC const*, NUVEC*)
IsOnUphillRunSurface(MechCharacter*)
ShouldEnterUphillRun(MechCharacter*)
UphillRunContext::UphillRunContext(MechCharacter&)
UphillRunContext::~UphillRunContext()
UphillRunContext::~UphillRunContext()
UphillRunContext::AllowEnter(int, MechContext*)
UphillRunContext::AllowLeave(int, MechContext*)
UphillRunContext::OnEnter(LevelContainer*)
UphillRunContext::GetSlopeNormal() const
UphillRunContext::OnProcess(LevelContainer*, float)
UphillRunContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
UphillRunContext::OnLeave()
UphillRunSystem::UphillRunSystem()
UphillRunSystem::~UphillRunSystem()
UphillRunSystem::~UphillRunSystem()
UphillRunSystem::Init()
MechContext* MechContextConstructor<UphillRunContext>(MechCharacter&)
LegoContextHandlerBase<UphillRunContext>::GetInstanceId() const
LegoContextHandlerBase<UphillRunContext>::~LegoContextHandlerBase()
TreadmillContext::ProcessStateChange(LevelContainer*, float)
TreadmillContext::ProcessState(LevelContainer*, float)
TreadmillContext::ProcessSubState(LevelContainer*, float)
TreadmillContext::OnLeave()
TreadmillContext::~TreadmillContext()
DJDeckContext::~DJDeckContext()
DJDeckContext::~DJDeckContext()
DJDeckContext::OnEnter(LevelContainer*)
DJDeckContext::OnLeave()
DJDeckContext::InitFlashUI()
DJDeckContext::HideUI()
DJDeckContext::ProcessStateChange(LevelContainer*, float)
DJDeckContext::ProcessState(LevelContainer*, float)
DJDeckContext::UpdateTimeCountUI()
DJDeckContext::ProcessSubState(LevelContainer*, float)
BenchPressContext::ProcessStateChange(LevelContainer*, float)
BenchPressContext::ProcessState(LevelContainer*, float)
BenchPressContext::ProcessSubState(LevelContainer*, float)
BenchPressContext::OnLeave()
BenchPressContext::~BenchPressContext()
BuckingBroncoContext::~BuckingBroncoContext()
BuckingBroncoContext::~BuckingBroncoContext()
BuckingBroncoContext::OnEnter(LevelContainer*)
BuckingBroncoContext::OnLeave()
BuckingBroncoContext::AllowQuit()
BuckingBroncoContext::ProcessStateChange(LevelContainer*, float)
BuckingBroncoContext::ProcessState(LevelContainer*, float)
BuckingBroncoContext::UpdateTimeCountUI()
BuckingBroncoContext::ProcessSubState(LevelContainer*, float)
BuckingBroncoContext::HideForMiniCut(bool)
ButtonGame_CreateLookAt(VuMtx&, VuVec const&, VuVec const&)
ButtonGameContext::~ButtonGameContext()
ButtonGameContext::CleanUpMess()
ButtonGameContext::~ButtonGameContext()
ButtonGameContext::AllowEnter(int, MechContext*)
ButtonGameContext::AllowLeave(int, MechContext*)
ButtonGameContext::FadeOut()
ButtonGameContext::MaintainFade()
ButtonGameContext::FadeIn()
ButtonGameContext::OnEnter(LevelContainer*)
ButtonGameContext::StoreForMessageRender()
ButtonGameContext::OnLeave()
ButtonGameContext::AllowQuit()
ButtonGameContext::CheckQuitInput()
ButtonGameContext::ProcessStateChange(LevelContainer*, float)
ButtonGameContext::ProcessState(LevelContainer*, float)
ButtonGameContext::OnProcess(LevelContainer*, float)
ButtonGameContext::RenderGetReady()
ButtonGameContext::RenderGetReadyInternal()
ButtonGameContext::SetSwitch(GizSwitch*)
RideAlongContext::ProcessStateChange(LevelContainer*, float)
RideAlongContext::FindSeatSpecial(GameAnimSet*, VuVec*)
RideAlongContext::ProcessState(LevelContainer*, float)
RideAlongContext::ProcessSubState(LevelContainer*, float)
RideAlongContext::~RideAlongContext()
RidonAddon::~RidonAddon()
RidonAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to RidonAddon::~RidonAddon()
non-virtual thunk to RidonAddon::~RidonAddon()
non-virtual thunk to RidonAddon::OnHook(unsigned char, HookArgs*)
LabyrinthContext::ProcessStateChange(LevelContainer*, float)
LabyrinthContext::ProcessState(LevelContainer*, float)
LabyrinthContext::ProcessSubState(LevelContainer*, float)
LabyrinthContext::RegisterSfxTypes()
LabyrinthContext::~LabyrinthContext()
LabyrinthContext::~LabyrinthContext()
LabyrinthAddOn::~LabyrinthAddOn()
LabyrinthAddOn::~LabyrinthAddOn()
LabyrinthAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to LabyrinthAddOn::~LabyrinthAddOn()
non-virtual thunk to LabyrinthAddOn::~LabyrinthAddOn()
non-virtual thunk to LabyrinthAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to LabyrinthAddOn::~LabyrinthAddOn()
non-virtual thunk to LabyrinthAddOn::~LabyrinthAddOn()
IEventListener::EventNotify(Event&, NuEventData&)
WrestleContext::ActionConfig::ActionConfig()
WrestleContext::ActionConfig::~ActionConfig()
WrestleContext::WrestleContext(MechCharacter&)
WrestleContext::SetActionConfig(WrestleContext::ActionConfig&)
WrestleContext::Init()
MechContext* MechContextConstructor<WrestleContext>(MechCharacter&)
WrestleContext::OnEnter(LevelContainer*)
WrestleContext::OnProcess(LevelContainer*, float)
WrestleContext::IsPlayerControlled()
WrestleContext::AllowEnter(int, MechContext*)
WrestleContext::AllowLeave(int, MechContext*)
WrestleContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
WrestleContext::OnLeave()
WrestleContext::SetOpponent(MechCharacter*)
WrestleContext::~WrestleContext()
WrestleContext::~WrestleContext()
LegoContextHandlerBase<WrestleContext>::GetInstanceId() const
LegoContextHandlerBase<WrestleContext>::~LegoContextHandlerBase()
FishingContext::StartAnimation(int)
FishingContext::ProcessStateChange(LevelContainer*, float)
FishingContext::ProcessState(LevelContainer*, float)
FishingContext::ProcessSubState(LevelContainer*, float)
FishingContext::InZone()
FishingContext::DrawButton(NUVEC*, unsigned int)
FishingContext::~FishingContext()
BasketBallContext::~BasketBallContext()
BasketBallContext::~BasketBallContext()
BasketBallContext::InitFlashUI()
BasketBallContext::ProcessStateChange(LevelContainer*, float)
BasketBallContext::UpdateBallCountUI(int)
BasketBallContext::UpdateUILayout()
BasketBallContext::ProcessState(LevelContainer*, float)
BasketBallContext::ProcessSubState(LevelContainer*, float)
BasketBallContext::UpdateTimeCountUI()
BasketBallContext::OnLeave()
BasketBallContext::RemoveBasketBall()
BasketBallAddOn::~BasketBallAddOn()
BasketBallAddOn::~BasketBallAddOn()
BasketBallAddOn::OnAdded()
BasketBallAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to BasketBallAddOn::~BasketBallAddOn()
non-virtual thunk to BasketBallAddOn::~BasketBallAddOn()
non-virtual thunk to BasketBallAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to BasketBallAddOn::~BasketBallAddOn()
non-virtual thunk to BasketBallAddOn::~BasketBallAddOn()
HookADuckContext::ProcessStateChange(LevelContainer*, float)
HookADuckContext::ProcessState(LevelContainer*, float)
HookADuckContext::ProcessSubState(LevelContainer*, float)
HookADuckContext::DrawButton(NUVEC*)
HookADuckContext::~HookADuckContext()
HPoleContext::HPoleContext(MechCharacter&)
HPoleContext::~HPoleContext()
HPoleContext::~HPoleContext()
HPoleContext::Init()
MechContext* MechContextConstructor<HPoleContext>(MechCharacter&)
HPoleContext::CheckLedge(MechCharacter*, GizmoLedge const*, LegoParkour::CheckLedgeResult&)
HPoleContext::AllowEnter(int, MechContext*)
HPoleContext::AllowLeave(int, MechContext*)
HPoleContext::OnEnter(LevelContainer*)
HPoleContext::OnProcess(LevelContainer*, float)
HPoleContext::UpdateMount()
HPoleContext::UpdateJumpOrDropToGround()
HPoleContext::UpdateGrab()
HPoleContext::UpdateQTE()
HPoleContext::UpdateIdle()
HPoleContext::UpdateToIdle()
HPoleContext::UpdateIdleDrop()
HPoleContext::UpdateToFiller()
HPoleContext::UpdateFiller()
HPoleContext::UpdateJumpToHPole()
HPoleContext::UpdateJumpToLedge()
HPoleContext::UpdateAIState()
HPoleContext::CaputreJump()
HPoleContext::UpdateCamera()
HPoleContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
HPoleContext::OnLeave()
HPoleContext::IsAIBusy() const
HPoleContext::SetTargetHPole(GizmoLedge const*, bool)
HPoleContext::SwitchTo(HPoleContext::eState)
HPoleContext::SetTargetLedge(GizmoLedge const*)
HPoleContext::SetTargetPos(VuVec const&)
HPoleContext::StartMount()
HPoleContext::StartDropToGround()
HPoleContext::StartFiller(HPoleContext::eState)
HPoleContext::StartGrab()
HPoleContext::StartQTE()
HPoleContext::SetupAction(unsigned short)
HPoleContext::StartActionToIdle(unsigned short)
HPoleContext::StartIdleDrop()
HPoleContext::StartActionToFiller(unsigned short)
HPoleContext::StartJumpToHPole()
HPoleContext::StartJumpToLedge()
HPoleContext::StartJumpToGround()
HPoleContext::ProcessInputIdle()
HPoleContext::ProcessInput()
HPoleContext::ClearJumpPressed()
HPoleContext::AICalcJumpToGroundVelocity()
HPoleContext::CalcJumpToLedge()
HPoleContext::AdjustHeight()
HPoleAITask::Process(Brain&, float const&)
HPoleContext::GetDir()
HPoleContext::IsHPole(GizmoLedge const*)
HPoleContext::FixUp_HPolesNeighbours(LegoCityLedge*)
HPoleContext::CheckHPoleToLedge(LegoCityLedge const*, GizmoLedge const*, bool&, float&)
HPoleContext::IsStraightLedge(GizmoLedge const*)
HPoleAITask::HPoleAITask()
HPoleAITask::FindCurrentEdge(MechCharacter&, LegoCityLedge const*)
LegoContextHandlerBase<HPoleContext>::GetInstanceId() const
LegoContextHandlerBase<HPoleContext>::~LegoContextHandlerBase()
VerticalMazeContext::ProcessStateChange(LevelContainer*, float)
VerticalMazeContext::ProcessState(LevelContainer*, float)
VerticalMazeContext::ProcessSubState(LevelContainer*, float)
VerticalMazeContext::~VerticalMazeContext()
VerticalMazeAddOn::~VerticalMazeAddOn()
VerticalMazeAddOn::~VerticalMazeAddOn()
VerticalMazeAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to VerticalMazeAddOn::~VerticalMazeAddOn()
non-virtual thunk to VerticalMazeAddOn::~VerticalMazeAddOn()
non-virtual thunk to VerticalMazeAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to VerticalMazeAddOn::~VerticalMazeAddOn()
non-virtual thunk to VerticalMazeAddOn::~VerticalMazeAddOn()
ApproximatelyEqual(float, float, float)
PipePuzzleContext::PipePuzzleContext(MechCharacter&)
PipePuzzleContext::~PipePuzzleContext()
PipePuzzleContext::~PipePuzzleContext()
PipePuzzleContext::OnEnter(LevelContainer*)
PipePuzzleContext::OnLeave()
PipePuzzleContext::ProcessStateChange(LevelContainer*, float)
PipePuzzleContext::UpdatePieces()
PipePuzzleContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
PipePuzzleContext::SetTargetYRot()
PipePuzzleContext::ProcessState(LevelContainer*, float)
PipePuzzleContext::GenerateGoalZVec(VuMtx const&, float)
PipePuzzleContext::CalcCurrentAngle(VuMtx const&)
PipePuzzleContext::UpdateGlowPieces()
PipePuzzleContext::PlaySoundFX(short)
PipePuzzleContext::PuzzleComplete()
PipePuzzleContext::ProcessSubState(LevelContainer*, float)
PipePuzzleContext::UpdateActivePiece(PipePuzzleContext::PuzzlePiece*)
PipePuzzleContext::UpdateRaisingPiece(PipePuzzleContext::PuzzlePiece*)
PipePuzzleContext::UpdateRaisedPiece(PipePuzzleContext::PuzzlePiece*)
PipePuzzleContext::UpdateLoweringPiece(PipePuzzleContext::PuzzlePiece*)
PipePuzzleContext::UpdateRotatingPiece(PipePuzzleContext::PuzzlePiece*)
PipePuzzleContext::GetPiece(int, int)
PipePuzzleContext::TestAndActivateGlowAdjacecy(PipePuzzleContext::PuzzlePiece*, int)
ClampAngle(float)
IsDoubleCorner(int)
IsCrossPiece(int)
PipePuzzleAddOn::~PipePuzzleAddOn()
PipePuzzleAddOn::~PipePuzzleAddOn()
PipePuzzleAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to PipePuzzleAddOn::~PipePuzzleAddOn()
non-virtual thunk to PipePuzzleAddOn::~PipePuzzleAddOn()
non-virtual thunk to PipePuzzleAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to PipePuzzleAddOn::~PipePuzzleAddOn()
non-virtual thunk to PipePuzzleAddOn::~PipePuzzleAddOn()
RexFuryStunnedContext::Init()
MechContext* MechContextConstructor<RexFuryStunnedContext>(MechCharacter&)
RexFuryStunnedContext::RexFuryStunnedContext(MechCharacter&)
RexFuryStunnedContext::ResetTimer()
RexFuryStunnedContext::AllowEnter(int, MechContext*)
RexFuryStunnedContext::OnEnter(LevelContainer*)
RexFuryStunnedContext::OnProcess(LevelContainer*, float)
RexFuryStunnedContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
RexFuryStunnedContext::AllowLeave(int, MechContext*)
RexFuryStunnedContext::OnLeave()
RexFuryStunnedContext::~RexFuryStunnedContext()
LegoContextHandlerBase<RexFuryStunnedContext>::GetInstanceId() const
LegoContextHandlerBase<RexFuryStunnedContext>::~LegoContextHandlerBase()
RocketOutOfControlContext::Init()
MechContext* MechContextConstructor<RocketOutOfControlContext>(MechCharacter&)
RocketOutOfControlContext::RocketOutOfControlContext(MechCharacter&)
RocketOutOfControlContext::SetFromLanded()
RocketOutOfControlContext::SetFaceDown()
RocketOutOfControlContext::AllowEnter(int, MechContext*)
RocketOutOfControlContext::OnEnter(LevelContainer*)
RocketOutOfControlContext::OnProcess(LevelContainer*, float)
RocketOutOfControlContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
RocketOutOfControlContext::AllowLeave(int, MechContext*)
RocketOutOfControlContext::OnLeave()
RocketOutOfControlContext::~RocketOutOfControlContext()
LegoContextHandlerBase<RocketOutOfControlContext>::GetInstanceId() const
LegoContextHandlerBase<RocketOutOfControlContext>::~LegoContextHandlerBase()
WhistleContext::WhistleContext(MechCharacter&)
WhistleContext::~WhistleContext()
WhistleContext::~WhistleContext()
WhistleContext::Init()
MechContext* MechContextConstructor<WhistleContext>(MechCharacter&)
WhistleContext::LoadRedBrickSFX()
WhistleContext::UnLoadRedBrickSFX()
WhistleContext::AllowEnter(int, MechContext*)
WhistleContext::AllowLeave(int, MechContext*)
WhistleContext::OnEnter(LevelContainer*)
WhistleContext::OnLeave()
WhistleContext::OnProcess(LevelContainer*, float)
WhistleContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoContextHandlerBase<WhistleContext>::GetInstanceId() const
LegoContextHandlerBase<WhistleContext>::~LegoContextHandlerBase()
CoconutShyContext::~CoconutShyContext()
CoconutShyContext::~CoconutShyContext()
CoconutShyContext::InitFlashUI()
CoconutShyContext::ProcessStateChange(LevelContainer*, float)
CoconutShyContext::UpdateBallCountUI(int)
CoconutShyContext::UpdateUILayout()
CoconutShyContext::ProcessState(LevelContainer*, float)
CoconutShyContext::ProcessSubState(LevelContainer*, float)
CoconutShyContext::UpdateTimeCountUI()
CoconutShyAddOn::~CoconutShyAddOn()
CoconutShyAddOn::~CoconutShyAddOn()
CoconutShyAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CoconutShyAddOn::~CoconutShyAddOn()
non-virtual thunk to CoconutShyAddOn::~CoconutShyAddOn()
non-virtual thunk to CoconutShyAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CoconutShyAddOn::~CoconutShyAddOn()
non-virtual thunk to CoconutShyAddOn::~CoconutShyAddOn()
CityBarrelContext::CityBarrelContext(MechCharacter&)
CityBarrelContext::~CityBarrelContext()
CityBarrelContext::~CityBarrelContext()
CityBarrelContext::OnProcess(LevelContainer*, float)
CityBarrelContext::OnEnter(LevelContainer*)
CityBarrelContext::OnLeave(int)
CityBarrelContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
CityBarrelContext::Init()
MechContext* MechContextConstructor<CityBarrelContext>(MechCharacter&)
LegoContextHandlerBase<CityBarrelContext>::GetInstanceId() const
LegoContextHandlerBase<CityBarrelContext>::~LegoContextHandlerBase()
cLegoCityLAK::cLegoCityLAK()
cLegoCityLAK::~cLegoCityLAK()
cLegoCityLAK::~cLegoCityLAK()
cLegoCityLAK::ForEachCharacter(cLegoCityLakCharacterFunctor&)
cLegoCityLAK::GetNearestCharacterHook(MechCharacter*, unsigned int) const
cLegoCityLAK::GetNearestVehicleHook(WeakPtr<cAIVehicle>, unsigned int) const
MegaFigAddOn::MegaFigAddOn()
MegaFigAddOn::InitThrowConfig()
MegaFigAddOn::~MegaFigAddOn()
non-virtual thunk to MegaFigAddOn::~MegaFigAddOn()
non-virtual thunk to MegaFigAddOn::~MegaFigAddOn()
MegaFigAddOn::~MegaFigAddOn()
non-virtual thunk to MegaFigAddOn::~MegaFigAddOn()
non-virtual thunk to MegaFigAddOn::~MegaFigAddOn()
MegaFigAddOn::OnAdded()
MegaFigAddOn::OnRemoved()
MegaFigAddOn::IsCarrying()
MegaFigAddOn::GetRider()
MegaFigAddOn::MakeRiderItemsInvisible()
MegaFigAddOn::MakeExplode()
MegaFigAddOn::CauseStaggerFrom(VuVec const&)
MegaFigAddOn::IsJumping()
MegaFigAddOn::StaggerContext::SetAgitationOrigin(VuVec const&)
MegaFigAddOn::SetMySarahConnor(MechCharacter*)
MegaFigAddOn::GetMySarahConnor()
MegaFigAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
MegaFigAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MegaFigAddOn::OnHook(unsigned char, HookArgs*)
MegaFigAddOn::EventNotify(Event&, NuEventData&)
MegaFigAddOn::TriggerExplosion(VuVec const&)
MegaFigAddOn::FixRiderAnim()
non-virtual thunk to MegaFigAddOn::EventNotify(Event&, NuEventData&)
MegaFigAddOn::IsInContainer(LevelContainer&)
non-virtual thunk to MegaFigAddOn::IsInContainer(LevelContainer&)
MegaFigAddOn::InitType()
void* Constructor<MegaFigAddOn>()
MegaFigAddOn::StaggerContext::Init()
MegaFigAddOn::SpecialPunchContext::Init()
MegaFigAddOn::SarahConnorAlert(MechCharacter*)
MegaFigAddOn::GetFrom(MechCharacter&)
MegaFigAddOn::StaggerContext::StaggerContext(MechCharacter&)
MegaFigAddOn::StaggerContext::~StaggerContext()
MegaFigAddOn::StaggerContext::~StaggerContext()
MegaFigAddOn::StaggerContext::OnProcess(LevelContainer*, float)
MegaFigAddOn::StaggerContext::OnEnter(LevelContainer*)
MegaFigAddOn::StaggerContext::CalculateSourceDir()
MegaFigAddOn::StaggerContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
MegaFigAddOn::StaggerContext::OnLeave()
MegaFigAddOn::StaggerContext::StaggerCharacter(MechCharacter*, VuVec const&, int)
MechContext* MechContextConstructor<MegaFigAddOn::StaggerContext>(MechCharacter&)
MegaFigAddOn::StaggerContext::GetActionForDir(eDIR)
MegaFigAddOn::SpecialPunchContext::SpecialPunchContext(MechCharacter&)
MegaFigAddOn::SpecialPunchContext::~SpecialPunchContext()
MegaFigAddOn::SpecialPunchContext::~SpecialPunchContext()
MegaFigAddOn::SpecialPunchContext::AllowEnter(int, MechContext*)
MegaFigAddOn::SpecialPunchContext::AllowLeave(int, MechContext*)
MegaFigAddOn::SpecialPunchContext::BeginAction(int)
MegaFigAddOn::SpecialPunchContext::AtEndOfAction()
MegaFigAddOn::SpecialPunchContext::OnEnter(LevelContainer*)
MegaFigAddOn::SpecialPunchContext::OnProcess(LevelContainer*, float)
MegaFigAddOn::SpecialPunchContext::GetTargetCharacter()
MegaFigAddOn::SpecialPunchContext::CanFistDamage()
MegaFigAddOn::SpecialPunchContext::MarkAsHit()
MegaFigAddOn::SpecialPunchContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
MegaFigAddOn::SpecialPunchContext::OnLeave()
MegaFigAddOn::SpecialPunchContext::GetPunchIndex() const
MegaFigAddOn::SpecialPunchContext::GetNumConnections() const
MegaFigAddOn::SpecialPunchContext::GetFistRadius()
MegaFigAddOn::SpecialPunchContext::GetActiveFist()
MegaFigAddOn::SpecialPunchContext::GetFrom(MechCharacter*)
MegaFigAddOn::SpecialPunchContext::GetActiveFistPosition()
MechContext* MechContextConstructor<MegaFigAddOn::SpecialPunchContext>(MechCharacter&)
LegoContextHandlerBase<MegaFigAddOn::StaggerContext>::GetInstanceId() const
LegoContextHandlerBase<MegaFigAddOn::SpecialPunchContext>::GetInstanceId() const
MegaFigAddOn::SpecialPunchContext::PunchData::~PunchData()
LegoContextHandlerBase<MegaFigAddOn::StaggerContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<MegaFigAddOn::SpecialPunchContext>::~LegoContextHandlerBase()
PiranhaPlantAddon::PiranhaPlantAddon()
PiranhaPlantAddon::~PiranhaPlantAddon()
non-virtual thunk to PiranhaPlantAddon::~PiranhaPlantAddon()
PiranhaPlantAddon::~PiranhaPlantAddon()
non-virtual thunk to PiranhaPlantAddon::~PiranhaPlantAddon()
PiranhaPlantAddon::OnAdded()
PiranhaPlantAddon::OnRemoved()
PiranhaPlantAddon::GetDistanceToPlayer()
PiranhaPlantAddon::UpdateFacing()
PiranhaPlantAddon::UpdateState()
PiranhaPlantAddon::Shoot()
PiranhaPlantAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to PiranhaPlantAddon::OnHook(unsigned char, HookArgs*)
PiranhaPlantAddon::InitType()
void* Constructor<PiranhaPlantAddon>()
PiranhaPlantContext::PiranhaPlantContext(MechCharacter&)
PiranhaPlantContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
PiranhaPlantContext::~PiranhaPlantContext()
PiranhaPlantContext::AllowEnter(int, MechContext*)
PiranhaPlantContext::AllowLeave(int, MechContext*)
PiranhaPlantContext::OnEnter(LevelContainer*)
PiranhaPlantContext::OnLeave()
PiranhaPlantContext::OnProcess(LevelContainer*, float)
LegoContextHandlerBase<PiranhaPlantContext>::GetInstanceId() const
MechContext* MechContextConstructor<PiranhaPlantContext>(MechCharacter&)
LegoContextHandlerBase<PiranhaPlantContext>::~LegoContextHandlerBase()
BobombAddon::BobombAddon()
BobombAddon::~BobombAddon()
non-virtual thunk to BobombAddon::~BobombAddon()
BobombAddon::~BobombAddon()
non-virtual thunk to BobombAddon::~BobombAddon()
BobombAddon::OnAdded()
BobombAddon::AddHudExplosionTimer()
BobombAddon::OnRemoved()
BobombAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to BobombAddon::OnHook(unsigned char, HookArgs*)
BobombAddon::InitType()
void* Constructor<BobombAddon>()
cAttackManager::Grid::Location::Reset()
cAttackManager::Grid::Location::IsInInnerArea(int) const
cAttackManager::Grid::Location::IsInOuterArea(int) const
cAttackManager::Grid::Location::IsInArea(int, bool) const
cAttackManager::Grid::Location::CheckForDynamicObstructions(DynoScene*)
cAttackManager::Grid::Location::IsPotentialObstruction(Entity const*)
cAttackManager::Grid::Location::UpdateWorldPosition(cAttackManager&, int, float, float)
cAttackManager::Grid::WorldXZPositionFromCoords(cAttackManager::Grid::Coords const&)
cAttackManager::CalcInnerAreaMask(VuVec const&, int) const
cAttackManager::CalcOuterAreaMask(VuVec const&, int) const
cAttackManager::Grid::Coords::Coords()
cAttackManager::Grid::Coords::Coords(int, int)
cAttackManager::Grid::Grid()
cAttackManager::Grid::CoordsFromWorldPosition(VuVec const&)
cAttackManager::Grid::Reset(VuVec const&)
cAttackManager::Grid::Reset(cAttackManager::Grid::Coords const&)
cAttackManager::Grid::RefreshWorldRange()
cAttackManager::Grid::GetCell(cAttackManager::Grid::Coords const&)
cAttackManager::Grid::ContainsWorldCoords(cAttackManager::Grid::Coords const&) const
cAttackManager::Grid::WorldCoordsToAccessCoords(cAttackManager::Grid::Coords const&) const
cAttackManager::Grid::Shift(cAttackManager::Grid::Coords const&)
cAttackManager::Grid::ShiftX(int)
cAttackManager::Grid::ShiftZ(int)
cAttackManager::Grid::ShiftAndAdjustInput(cAttackManager::Grid::Coords&)
cAttackManager::Grid::MarkForObstructionCheck()
cAttackManager::Grid::UpdateWorldMapping(cAttackManager&, int, float, float)
cAttackManager::GetDynoScene()
cAttackManager::Grid::ValidAccessCoords(cAttackManager::Grid::Coords const&)
cAttackManager::Grid::DebugRender(cAttackManager&, float, float, unsigned int, int)
cAttackManager::Grid::DebugRenderCell(VuVec const&, float, unsigned int)
cAttackManager::Grid::DebugRenderCellOutline(VuVec const&, float, unsigned int, float)
cAttackManager::GetPerpData(MechCharacter const*)
cAttackManager::FindLocation(cAttackManager::CellId const&)
cAttackManager::CellId::CellId()
cAttackManager::CellId::Clear()
cAttackManager::CellId::CellId(cAttackManager::CellId::GridType, int, cAttackManager::Grid::Coords const&)
cAttackManager::CellId::IsValid() const
cAttackManager::SubjectData::Timers::Timers()
cAttackManager::SubjectData::Timers::Clear()
cAttackManager::SubjectData::Attackers::Attackers()
cAttackManager::SubjectData::Attackers::IsEngaged(MechCharacter*) const
cAttackManager::SubjectData::Attackers::Clear()
NuList<MechWeakPtr<MechCharacter, 8> >::Clear()
cAttackManager::SubjectData::SubjectData()
cAttackManager::SubjectData::~SubjectData()
cAttackManager::SubjectData::SetObject(MechCharacter*)
cAttackManager::SubjectData::Attackers::~Attackers()
cAttackManager::SubjectData::~SubjectData()
cAttackManager::SubjectData::Init(cAttackManager&, int)
cAttackManager::SubjectData::EventNotify(Event&, NuEventData&)
cAttackManager::SubjectData::IsRelevant() const
cAttackManager::SubjectData::ResetLocalGrid()
cAttackManager::SubjectData::Unfocus()
cAttackManager::PerpData::SetFocusSubject(cAttackManager&, int)
cAttackManager::SubjectData::OnPerpRemoved(MechCharacter*)
cAttackManager::SubjectData::ShiftGrid(cAttackManager&, cAttackManager::Grid::Coords&)
cAttackManager::FindGridFor(cAttackManager::CellId const&)
cAttackManager::SubjectData::CheckForSuspend(cAttackManager&)
cAttackManager::SubjectData::Process(cAttackManager&, float)
cAttackManager::SubjectData::ProcessTimings(float)
cAttackManager::SubjectInHighPriorityToBeAttacked(MechCharacter*) const
cAttackManager::SubjectData::UpdateChain()
cAttackManager::SubjectData::UpdateGridLocations()
cAttackManager::SubjectData::InPunchDistanceToPerp()
cAttackManager::InPunchDistanceToPerp(MechCharacter*) const
cAttackManager::SubjectData::UpdateCurrentAttacker()
cAttackManager::PerpData::PerpData()
cAttackManager::PerpData::CanChangeFocus(cAttackManager&)
cAttackManager::PerpData::UpdateFocus(cAttackManager&)
cAttackManager::cAttackAreaGroup::IsSubjectInArea(int) const
NuList<StrongPtr<cAttackManager> >::~NuList()
cAttackManager::cAttackManager(char const*, MechCharacter*, int)
cAttackManager::UpdateSubjectInclusion()
cAttackManager::Process()
cAttackManager::CalcSuspendPositions()
cAttackManager::UpdateSubjectInAreaGroup(cAttackManager::SubjectData&)
cAttackManager::UpdateSubjectInFightingMode()
cAttackManager::UpdatePerpsAttackAreaGroups()
cAttackManager::UpdateAreaGridLocation()
cAttackManager::RestartDynamicGridLocationUpdates()
cAttackManager::UpdateAreaGridLocationScore()
cAttackManager::UpdateSubjectGridLocationScore()
cAttackManager::ShouldDestroy()
cAttackManager::GetSubject(int) const
cAttackManager::GetDefaultSubject() const
cAttackManager::AddPerp(MechCharacter*)
cAttackManager::GetAttackLocation_Common(cAttackManager::PerpData&, cAttackManager::CellId const&, bool, bool)
cAttackManager::ClearLocation(cAttackManager::PerpData*)
cAttackManager::RemovePerp(MechCharacter*)
cAttackManager::ClearLocation(MechCharacter*)
cAttackManager::EventNotify(Event&, NuEventData&)
cAttackManager::GetSubjectDataFor(MechCharacter const*) const
cAttackManager::OnSubdue(cAttackManager::PerpData&, cAttackManager::SubjectData&)
cAttackManager::FinishAreaDefinition()
cAttackManager::cAttackAreaGroup::CalculateLocationGrid()
cAttackManager::ValidateAreas() const
cAttackManager::SetAutoSuspend(VuVec const&, float, float)
cAttackManager::SetSuspended(bool)
cAttackManager::TryLockMoveToAttack(MechCharacter*)
cAttackManager::GetFocusSubjectDataFor(cAttackManager::PerpData const&) const
cAttackManager::IsFocusSubjectInMyArea(MechCharacter*) const
cAttackManager::ReleaseMoveToAttack(MechCharacter*)
cAttackManager::TryLockAttack(MechCharacter*)
cAttackManager::IsLockAttackFree(MechCharacter*) const
cAttackManager::GetPerpData(MechCharacter const*) const
cAttackManager::ReleaseAttack(MechCharacter*)
cAttackManager::SignalRealAttackMoveFinished(MechCharacter*)
cAttackManager::ShouldChase(MechCharacter*, bool) const
cAttackManager::GetFocusSubjectFor(cAttackManager::PerpData const&) const
cAttackManager::ShouldTaunt(MechCharacter*)
cAttackManager::ShouldReactToSpecialEvent(MechCharacter*)
cAttackManager::AmIInsideMyArea(MechCharacter*) const
cAttackManager::cAttackAreaGroup::IsInOuter(VuVec const&) const
cAttackManager::SetInnerCentreAndRadius(char const*, VuVec const&, float)
cAttackManager::FindOrAllocNewAttackAreaGroup(char const*)
cAttackManager::cAttackAreaGroup::SetInnerCentreAndRadius(VuVec const&, float)
cAttackManager::SetOuterCentreAndRadius(char const*, VuVec const&, float)
cAttackManager::cAttackAreaGroup::SetOuterCentreAndRadius(VuVec const&, float)
cAttackManager::AddInnerArea(char const*, AIConvexArea const*)
cAttackManager::cAttackAreaGroup::AddInnerArea(AIConvexArea const*)
cAttackManager::AddOuterArea(char const*, AIConvexArea const*)
cAttackManager::cAttackAreaGroup::AddOuterArea(AIConvexArea const*)
cAttackManager::GetActiveSubjectData(int) const
cAttackManager::FindGrid(cAttackManager::CellId::GridType, int)
cAttackManager::cAttackAreaGroup::GetInnerCentre() const
cAttackManager::cAttackAreaGroup::GetExtraHeightToFindNode() const
cAttackManager::ForceSubjectInMyArea(MechCharacter*)
cAttackManager::ForceSubjectInMyArea(cAttackManager::SubjectData&, cAttackManager::PerpData&)
cAttackManager::cAttackAreaGroup::ToggleSubjectInArea(int)
cAttackManager::ShouldUseFinishingMove() const
cAttackManager::OnePerpRemaining() const
cAttackManager::GetMyAreaCentre(MechCharacter*, VuVec&) const
cAttackManager::IsSubjectInFightingMode(int) const
cAttackManager::AnySubjectInFightingMode() const
cAttackManager::cAttackAreaGroup::NeedToToggleSubjectInArea(int, VuVec const&) const
cAttackManager::cAttackAreaGroup::DistanceInnerSq(VuVec const&) const
cAttackManager::cAttackAreaGroup::DistanceOuterSq(VuVec const&) const
cAttackManager::GetFocusSubjectFor(MechCharacter const*) const
cAttackManager::GetAttackLocation(MechCharacter*, bool, bool)
cAttackManager::ScoreForPerp(VuVec const&, VuVec const&) const
cAttackManager::ValidForSubject(MechCharacter*, VuVec const&, bool) const
cAttackManager::ScoreForDistanceFromInner(VuVec const&, int) const
cAttackManager::ScoreForSubject(MechCharacter*, VuVec const&, float) const
cAttackManager::ScoreForMovingNearSubject(MechCharacter*, VuVec const&, VuVec const&) const
cAttackManager::UpdateGridLocationScore(cAttackManager::Grid::Location&)
cAttackManager::cAttackAreaGroup::RelativeDistanceInner(VuVec const&) const
cAttackManager::ScoreForPerp(VuVec const&, MechCharacter*) const
cAttackManager::DistanceToSubject(MechCharacter*, VuVec const&, float&, float&) const
cAttackManager::ValidForSubject(MechCharacter*, VuVec const&) const
cAttackManager::ValidForSubjectMinOnly(MechCharacter*, VuVec const&) const
cAttackManager::CalcInnerAreaMask(VuVec const&) const
cAttackManager::cAttackAreaGroup::IsInInner(VuVec const&) const
cAttackManager::CalcOuterAreaMask(VuVec const&) const
cAttackManager::cAttackAreaGroup::SetName(char const*)
cAttackManager::CanSubjectBeAttacked(MechCharacter*) const
cAttackManager::GetFrom(MechCharacter*, bool)
cAttackManager::GetFrom(char const*)
cAttackManager::GetOrCreate(MechCharacter*, int)
StrongPtr<cAttackManager> create<cAttackManager, char const*, MechCharacter*, int>(char const*, MechCharacter*, int)
cAttackManager::CreateOld(MechCharacter*)
cAttackManager::Create(char const*, MechCharacter*)
cAttackManager::HaveAttackers(MechCharacter const*)
cAttackManager::DestroyAll()
cAttackManager::ProcessAll()
cAttackManager::LevelExitReset()
cAttackManager::CheckCombatHint(WORLDINFO*, HINT_s*)
cAttackManager::cAttackAreaGroup::cAttackAreaGroup()
cAttackManager::cAttackAreaGroup::IsSubjectInArea_OLD() const
AttackManagerScriptVariable::AttackManagerScriptVariable(char const*, WeakPtr<cAttackManager> const&, ScriptContext&)
AttackManagerScriptVariable::AttackManagerScriptVariable(char const*, ScriptContext&)
AttackManagerScriptVariable::~AttackManagerScriptVariable()
AttackManagerScriptVariable::~AttackManagerScriptVariable()
AttackManagerScriptVariable::Set(ScriptVariable const*)
AttackManagerScriptVariable::Equals(ScriptVariable const*)
AttackManagerScriptVariable::Init()
SAction_AtkMngr_AttackManager2Text::Exec(ScriptContext&)
SAction_AtkMngr_Text2AttackManager::Exec(ScriptContext&)
void ScriptContext::SetReturn<AttackManagerScriptVariable, WeakPtr<cAttackManager> >(int, WeakPtr<cAttackManager>)
SAction_AtkMngr_CreateAttackManager::Exec(ScriptContext&)
SAction_AtkMngr_Command::Exec(ScriptContext&)
SAction_AtkMngr_Finish::SAction_AtkMngr_Finish()
SAction_AtkMngr_Finish::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_AddAttacker::SAction_AtkMngr_AddAttacker()
SAction_AtkMngr_AddAttacker::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_AddInnerArea::SAction_AtkMngr_AddInnerArea()
SAction_AtkMngr_AddInnerArea::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_AddOuterArea::SAction_AtkMngr_AddOuterArea()
SAction_AtkMngr_AddOuterArea::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_SetInnerCentreAndRadius::SAction_AtkMngr_SetInnerCentreAndRadius()
SAction_AtkMngr_SetInnerCentreAndRadius::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_SetOuterCentreAndRadius::SAction_AtkMngr_SetOuterCentreAndRadius()
SAction_AtkMngr_SetOuterCentreAndRadius::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_FinishAreaDefinition::SAction_AtkMngr_FinishAreaDefinition()
SAction_AtkMngr_FinishAreaDefinition::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_GetAttackersCount::SAction_AtkMngr_GetAttackersCount()
SAction_AtkMngr_GetAttackersCount::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_SetTutorialMode::SAction_AtkMngr_SetTutorialMode()
SAction_AtkMngr_SetTutorialMode::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_SetAllowFinisher::SAction_AtkMngr_SetAllowFinisher()
SAction_AtkMngr_SetAllowFinisher::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_SetDiffculty::SAction_AtkMngr_SetDiffculty()
SAction_AtkMngr_SetDiffculty::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_Suspend::SAction_AtkMngr_Suspend()
SAction_AtkMngr_Suspend::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_Resume::SAction_AtkMngr_Resume()
SAction_AtkMngr_Resume::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_IsSuspended::SAction_AtkMngr_IsSuspended()
SAction_AtkMngr_IsSuspended::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_AutoSuspend::SAction_AtkMngr_AutoSuspend(bool)
SAction_AtkMngr_AutoSuspend::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_StopAutoSuspend::SAction_AtkMngr_StopAutoSuspend()
SAction_AtkMngr_StopAutoSuspend::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_AllowAttacks::SAction_AtkMngr_AllowAttacks()
SAction_AtkMngr_AllowAttacks::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_DisallowAttacks::SAction_AtkMngr_DisallowAttacks()
SAction_AtkMngr_DisallowAttacks::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_AttackedInCombat::SAction_AtkMngr_AttackedInCombat()
SAction_AtkMngr_AttackedInCombat::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_IgnoreBadPathing::SAction_AtkMngr_IgnoreBadPathing()
SAction_AtkMngr_IgnoreBadPathing::DoExec(WeakPtr<cAttackManager>&, ScriptContext&)
SAction_AtkMngr_AttackManager2Text::~SAction_AtkMngr_AttackManager2Text()
SAction_AtkMngr_AttackManager2Text::GetName() const
SAction_AtkMngr_AttackManager2Text::GetInputs(SCmdParams&) const
SAction_AtkMngr_AttackManager2Text::GetOutputs(SCmdParams&) const
SAction_AtkMngr_Text2AttackManager::~SAction_AtkMngr_Text2AttackManager()
SAction_AtkMngr_Text2AttackManager::GetName() const
SAction_AtkMngr_Text2AttackManager::GetInputs(SCmdParams&) const
SAction_AtkMngr_Text2AttackManager::GetOutputs(SCmdParams&) const
SAction_AtkMngr_CreateAttackManager::~SAction_AtkMngr_CreateAttackManager()
SAction_AtkMngr_CreateAttackManager::GetName() const
SAction_AtkMngr_CreateAttackManager::GetInputs(SCmdParams&) const
SAction_AtkMngr_CreateAttackManager::GetOutputs(SCmdParams&) const
SAction_AtkMngr_Command::~SAction_AtkMngr_Command()
cAttackManager::~cAttackManager()
cAttackManager::~cAttackManager()
AttackManagerScriptVariable::AsBool() const
AttackManagerScriptVariable::AsText() const
SAction_AtkMngr_Finish::~SAction_AtkMngr_Finish()
SAction_AtkMngr_Finish::GetName() const
SAction_AtkMngr_Finish::GetInputs(SCmdParams&) const
SAction_AtkMngr_Finish::GetOutputs(SCmdParams&) const
SAction_AtkMngr_AddAttacker::~SAction_AtkMngr_AddAttacker()
SAction_AtkMngr_AddAttacker::GetName() const
SAction_AtkMngr_AddAttacker::GetInputs(SCmdParams&) const
SAction_AtkMngr_AddAttacker::GetOutputs(SCmdParams&) const
SAction_AtkMngr_AddInnerArea::~SAction_AtkMngr_AddInnerArea()
SAction_AtkMngr_AddInnerArea::GetName() const
SAction_AtkMngr_AddInnerArea::GetInputs(SCmdParams&) const
SAction_AtkMngr_AddInnerArea::GetOutputs(SCmdParams&) const
SAction_AtkMngr_AddOuterArea::~SAction_AtkMngr_AddOuterArea()
SAction_AtkMngr_AddOuterArea::GetName() const
SAction_AtkMngr_AddOuterArea::GetInputs(SCmdParams&) const
SAction_AtkMngr_AddOuterArea::GetOutputs(SCmdParams&) const
SAction_AtkMngr_SetInnerCentreAndRadius::~SAction_AtkMngr_SetInnerCentreAndRadius()
SAction_AtkMngr_SetInnerCentreAndRadius::GetName() const
SAction_AtkMngr_SetInnerCentreAndRadius::GetInputs(SCmdParams&) const
SAction_AtkMngr_SetInnerCentreAndRadius::GetOutputs(SCmdParams&) const
SAction_AtkMngr_SetOuterCentreAndRadius::~SAction_AtkMngr_SetOuterCentreAndRadius()
SAction_AtkMngr_SetOuterCentreAndRadius::GetName() const
SAction_AtkMngr_SetOuterCentreAndRadius::GetInputs(SCmdParams&) const
SAction_AtkMngr_SetOuterCentreAndRadius::GetOutputs(SCmdParams&) const
SAction_AtkMngr_FinishAreaDefinition::~SAction_AtkMngr_FinishAreaDefinition()
SAction_AtkMngr_FinishAreaDefinition::GetName() const
SAction_AtkMngr_FinishAreaDefinition::GetInputs(SCmdParams&) const
SAction_AtkMngr_FinishAreaDefinition::GetOutputs(SCmdParams&) const
SAction_AtkMngr_GetAttackersCount::~SAction_AtkMngr_GetAttackersCount()
SAction_AtkMngr_GetAttackersCount::GetName() const
SAction_AtkMngr_GetAttackersCount::GetInputs(SCmdParams&) const
SAction_AtkMngr_GetAttackersCount::GetOutputs(SCmdParams&) const
SAction_AtkMngr_SetTutorialMode::~SAction_AtkMngr_SetTutorialMode()
SAction_AtkMngr_SetTutorialMode::GetName() const
SAction_AtkMngr_SetTutorialMode::GetInputs(SCmdParams&) const
SAction_AtkMngr_SetTutorialMode::GetOutputs(SCmdParams&) const
SAction_AtkMngr_SetAllowFinisher::~SAction_AtkMngr_SetAllowFinisher()
SAction_AtkMngr_SetAllowFinisher::GetName() const
SAction_AtkMngr_SetAllowFinisher::GetInputs(SCmdParams&) const
SAction_AtkMngr_SetAllowFinisher::GetOutputs(SCmdParams&) const
SAction_AtkMngr_SetDiffculty::~SAction_AtkMngr_SetDiffculty()
SAction_AtkMngr_SetDiffculty::GetName() const
SAction_AtkMngr_SetDiffculty::GetInputs(SCmdParams&) const
SAction_AtkMngr_SetDiffculty::GetOutputs(SCmdParams&) const
SAction_AtkMngr_Suspend::~SAction_AtkMngr_Suspend()
SAction_AtkMngr_Suspend::GetName() const
SAction_AtkMngr_Suspend::GetInputs(SCmdParams&) const
SAction_AtkMngr_Suspend::GetOutputs(SCmdParams&) const
SAction_AtkMngr_Resume::~SAction_AtkMngr_Resume()
SAction_AtkMngr_Resume::GetName() const
SAction_AtkMngr_Resume::GetInputs(SCmdParams&) const
SAction_AtkMngr_Resume::GetOutputs(SCmdParams&) const
SAction_AtkMngr_IsSuspended::~SAction_AtkMngr_IsSuspended()
SAction_AtkMngr_IsSuspended::GetName() const
SAction_AtkMngr_IsSuspended::GetInputs(SCmdParams&) const
SAction_AtkMngr_IsSuspended::GetOutputs(SCmdParams&) const
SAction_AtkMngr_AutoSuspend::~SAction_AtkMngr_AutoSuspend()
SAction_AtkMngr_AutoSuspend::GetName() const
SAction_AtkMngr_AutoSuspend::GetInputs(SCmdParams&) const
SAction_AtkMngr_AutoSuspend::GetOutputs(SCmdParams&) const
SAction_AtkMngr_StopAutoSuspend::~SAction_AtkMngr_StopAutoSuspend()
SAction_AtkMngr_StopAutoSuspend::GetName() const
SAction_AtkMngr_StopAutoSuspend::GetInputs(SCmdParams&) const
SAction_AtkMngr_StopAutoSuspend::GetOutputs(SCmdParams&) const
SAction_AtkMngr_AllowAttacks::~SAction_AtkMngr_AllowAttacks()
SAction_AtkMngr_AllowAttacks::GetName() const
SAction_AtkMngr_AllowAttacks::GetInputs(SCmdParams&) const
SAction_AtkMngr_AllowAttacks::GetOutputs(SCmdParams&) const
SAction_AtkMngr_DisallowAttacks::~SAction_AtkMngr_DisallowAttacks()
SAction_AtkMngr_DisallowAttacks::GetName() const
SAction_AtkMngr_DisallowAttacks::GetInputs(SCmdParams&) const
SAction_AtkMngr_DisallowAttacks::GetOutputs(SCmdParams&) const
SAction_AtkMngr_AttackedInCombat::~SAction_AtkMngr_AttackedInCombat()
SAction_AtkMngr_AttackedInCombat::GetName() const
SAction_AtkMngr_AttackedInCombat::GetInputs(SCmdParams&) const
SAction_AtkMngr_AttackedInCombat::GetOutputs(SCmdParams&) const
SAction_AtkMngr_IgnoreBadPathing::~SAction_AtkMngr_IgnoreBadPathing()
SAction_AtkMngr_IgnoreBadPathing::GetName() const
SAction_AtkMngr_IgnoreBadPathing::GetInputs(SCmdParams&) const
SAction_AtkMngr_IgnoreBadPathing::GetOutputs(SCmdParams&) const
NuListFind<MechWeakPtr<MechCharacter, 8>, NuListNode<MechWeakPtr<MechCharacter, 8> > >::Remove(NuListNode<MechWeakPtr<MechCharacter, 8> >*, NuListNode<MechWeakPtr<MechCharacter, 8> >*, MechWeakPtr<MechCharacter, 8> const&)
NuList<cAttackManager::PerpData>::CreateNode(cAttackManager::PerpData const&)
ScriptVariable* CreateObject<AttackManagerScriptVariable>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<AttackManagerScriptVariable>(char const*, ScriptContext&)
cLegoCityPopData::cLegoCityPopData(cPopulationManager*)
cLegoCityPopData::~cLegoCityPopData()
cLegoCityPopData::~cLegoCityPopData()
cLegoCityPopData::InitAITypesArrayHook()
cLegoCityPopData::UninitAITypesArrayHook()
cLegoCityPopData::InitByAICharacterTypesHook()
cLegoCityPopData::UninitByAICharacterTypesHook()
LegoCityPopulationManagers::~LegoCityPopulationManagers()
LegoCityPopulationManagers::~LegoCityPopulationManagers()
LegoCityPopulationManagers::OnInitPostConfig()
NuHash::~NuHash()
LegoCityPopulationManagers::OnEnterLevel(MechLevelContainer&)
LegoCityPopulationManagers::GetGlobalInfo(unsigned int&, unsigned int&, sEdAICharacter*&, sEdAIVehicle*&) const
LegoCityPopulationManagers::IsIncidentalCharacter(MechCharacter&)
LegoCityPopulationManagers::SupportsPassengers(int, int) const
LegoCityPopulationManagers::RandomKrawliePassenger(int, int) const
LegoCityPopulationManagers::GetGridlockMap(int, int) const
LegoCityPopulationManagers::GetGridlockRoadGroup(int, int) const
LegoCityPopulationManagers::GetMaxSpeed(int, int) const
LegoCityPopulationManagers::AreYouReady(int, int) const
LegoCityPopulationManagers::GetFarClip(int, int) const
LegoCityPopulationManagers::GetOverrideVehicleSpawnRefPos(VuVec&, VuVec&) const
LegoCityPopulationManagers::AllowMovingVehicleSpawn(int, int) const
LegoCityPopulationManagers::IsVisible(NuVector3Base const&, float, float) const
LegoCityPopulationManagers::LoadLevelVehicleModels(LevelContainer&) const
LegoCityPopulationManagers::EnablePursuer(WeakPtr<cAIVehicle>, PursuitTarget const&) const
LegoCityPopulationManagers::DisablePursuer(WeakPtr<cAIVehicle>, PursuitTarget const&) const
MechSystemBase<PopulationManagers, int>::Suppress(int)
MechSystemBase<PopulationManagers, int>::IsSuppressed(int) const
LegoCityPopulationManagers::CreateGamePopulationData(cPopulationManager&) const
cLegoCityPopData::PreUpdateHook()
cLegoCityPopData::UpdateHook()
cLegoCityPopData::AfterUpdateHook()
cLegoCityPopData::CreateLAK() const
NuListFind<sAICharDataEntry*, NuListNode<sAICharDataEntry*> >::Remove(NuListNode<sAICharDataEntry*>*, NuListNode<sAICharDataEntry*>*, sAICharDataEntry* const&)
CameraLocator::CameraLocator()
CameraLocator::~CameraLocator()
CameraLocator::Activate(int)
CameraLocator::Update()
CameraLocator::SetCameraPosition(VuVec const&, VuVec const&)
CameraLocator::SetParent(CharInst*, int)
AimingCamera::AimingCamera()
AimingCamera::~AimingCamera()
AimingCamera::Activate(int)
AimingCamera::CameraSetup(DynoScene*, CharInst*, int, VuVec const*, VuVec const*, float, float, float)
AimingCamera::SetLimits(int, float, int, float)
AimingCamera::SetAsymmetricLimit(int, float, float)
AimingCamera::SetAsymmetricLimit2(int, float, float)
AimingCamera::CalculateRemainingAxis()
AimingCamera::Update(float, float, float, bool, VuVec const*)
CharacterCannon::CharacterCannon()
CharacterCannon::~CharacterCannon()
CharacterCannon::~CharacterCannon()
CharacterCannon::Initialize(float)
CharacterCannon::Launch(GameObject*, VuVec const&, short, Entity*)
CharacterCannon::Update(float)
CharacterCannon::ReleaseCharacter()
CharacterCannon::OverlapBegin(Entity const*, Entity const*)
CharacterCannon::Collision(Character*, Entity*, ContactPoint&)
CharacterCannon::Stop()
CraneWithTurnTable::Activate(bool)
CraneWithTurnTable::Update(float, float, float)
CraneWithTurnTable::GetCraneFrame()
CraneWithTurnTable::foldTheCrane(bool, float)
CraneWithTurnTable::goToInitialPos(bool, float)
CraneWithTurnTable::IsCraneAtFullExtent()
CraneWithTurnTable::CraneWithTurnTable()
CraneWithTurnTable::~CraneWithTurnTable()
CraneWithTurnTable::~CraneWithTurnTable()
CraneWithTurnTable::DidCraneReachInitPos()
CraneWithTurnTable::Initialize(GameObject*, char const*, bool, float, float, float, float, char const*, char const*, char const*)
CraneWithTurnTable::IsActive()
CraneWithTurnTable::SetTurnTableSpeed(float)
CraneWithTurnTable::SetTargetArmPosition(float, float)
GunHandler::GunHandler()
GunHandler::Bang()
GunHandler::Update(float)
GunHandler::ConfigureGun(BoltTypeID, float)
GunHandler::Activate(bool)
GunHandler::IsShooting()
GunHandler::~GunHandler()
JointModifier::JointModifier()
JointModifier::~JointModifier()
JointModifier::Activate(bool)
JointModifier::Initialize(CharInst*, float, char const*, float, float, float, float, float, float)
JointModifier::Update(float, float, float, float)
JointModifier::SetVerticalAngle(float)
JointModifier::SetHorizontalAngle(float)
JointModifier::SetTiltAngle(float)
PassengerSeat::PassengerSeat()
PassengerSeat::~PassengerSeat()
PassengerSeat::KickCharFromTheSeat()
PassengerSeat::~PassengerSeat()
PassengerSeat::Initialize(GameObject*, int, short, bool)
PassengerSeat::Update()
PassengerSeat::CharInTheSeat()
PassengerSeat::GettingInSequence(bool)
PassengerSeat::PlaceCharInTheSeat(GameObject*)
PassengerSeat::InitializeGettingInSequence(GameObject*)
PassengerSeat::SetCharAction(short)
PlayersDetector::PlayersDetector()
PlayersDetector::~PlayersDetector()
PlayersDetector::RemoveFromTheScene()
PlayersDetector::~PlayersDetector()
PlayersDetector::AddToTheScene(DynoScene*, float, GameObject*, int)
PlayersDetector::BeginCollision(Entity*)
PlayersDetector::EndCollision(Entity*)
PlayersDetector::Update(NuVector3Base const*)
ToolBox::TimeGapSwitch::Activate(bool)
ToolBox::TimeGapSwitch::Activate_NoDelay(bool)
ToolBox::TimeGapSwitch::IsActive()
ToolBox::TimeGapSwitch::Initialize(float)
ToolBox::TimeGapSwitch::Update(float)
ToolBox::GetEnterRequestingCharacter(PlayersDetector&, PassengerSeat&, unsigned int)
ToolBox::GetInputFromCharInSeat(PassengerSeat&, unsigned int*, unsigned int*, float*, float*, float*, float*)
ToolBox::DrawIconAtLocation(GameObject*, VuVec const&, int, float)
ToolBox::Append_LegoCityApiVehicleUserData(ApiVehicle&)
StrongPtr<cAIVehicle> create<cAIVehicle, ApiVehicle*, ePlayerAssociation>(ApiVehicle*, ePlayerAssociation)
ToolBox::FindConnection(ApiVehicle*, ApiVehicle*)
ToolBox::ApiCharacterPlay(ApiCharacter*, int)
ToolBox::ApiCharacterIsPlaying(ApiCharacter*, int)
ToolBox::VelocityUpdate(float, float, float, float, float, float, float)
WaterCannonTargeting::WaterCannonTargeting()
WaterCannonTargeting::~WaterCannonTargeting()
WaterCannonTargeting::Activate(bool)
WaterCannonTargeting::Initialize(float, float, CharInst*, int, char const*, char, char const*)
WaterCannonTargeting::Update(float, VuVec const&)
CraneWinder::CraneWinder()
CraneWinder::~CraneWinder()
CraneWinder::Activate(bool)
CraneWinder::~CraneWinder()
CraneWinder::Initialize(LevelContainer const*, DistanceJoint*, float, float, float, float, float, float)
CraneWinder::TryToPickUp()
CraneWinder::Dump()
CraneWinder::SetTargetGizmo(Gizmo*, bool)
CraneWinder::TakeAction()
CraneWinder::Update(float)
CraneWinder::resetDistanceJoint()
CraneWinder::Release()
CraneWinder::AllowCollision(Entity const*, Entity const*)
CraneWinder::RemoveEntity(Entity*)
CraneWinder::Collision(BodyPair*, Array<ContactPoint>&)
CraneWinder::DontMove()
CraneWinder::GetLoad()
ProjectilesEmitterHandler::ProjectilesEmitterHandler()
ProjectilesEmitterHandler::SetGunner(MechCharacter*)
ProjectilesEmitterHandler::SetGunModel(CharInst*)
ProjectilesEmitterHandler::SetBarrelLocator(int)
ProjectilesEmitterHandler::SetBarrelOffset(VuMtx const&)
ProjectilesEmitterHandler::~ProjectilesEmitterHandler()
ProjectilesEmitterHandler::~ProjectilesEmitterHandler()
WaterStream::WaterStream(MechCharacter*, CharInst*, int, VuMtx const&)
FireExtinguisherAudio::Get()
WaterStream::~WaterStream()
non-virtual thunk to WaterStream::~WaterStream()
non-virtual thunk to WaterStream::~WaterStream()
WaterStream::~WaterStream()
non-virtual thunk to WaterStream::~WaterStream()
non-virtual thunk to WaterStream::~WaterStream()
WaterStream::OnAdded()
WaterStream::OnHook(unsigned char, HookArgs*)
WaterStream::ProcessPreRender(float)
non-virtual thunk to WaterStream::OnHook(unsigned char, HookArgs*)
WaterStream::OnBoltDestroyed(Bolt*)
WaterStream::Process(float)
WaterStream::UpdateCharacter(MechCharacter&, float)
WaterStream::EventNotify(Event&, NuEventData&)
non-virtual thunk to WaterStream::EventNotify(Event&, NuEventData&)
WaterStreamHandler::WaterStreamHandler()
WaterStreamHandler::~WaterStreamHandler()
WaterStreamHandler::~WaterStreamHandler()
WaterStreamHandler::Activate(bool)
WaterStreamHandler::SetGunner(MechCharacter*)
WaterStreamHandler::SetGunModel(CharInst*)
WaterStreamHandler::SetBarrelLocator(int)
WaterStreamHandler::SetBarrelOffset(VuMtx const&)
WaterStreamHandler::Update(float)
WaterStreamHandler::Bang()
WaterStreamHandler::IsShooting()
PhantomDetector::PhantomDetector(float, float, float, VuVec const*, bool (*)(Entity*))
PhantomDetector::Update(VuVec const*)
PhantomDetector::~PhantomDetector()
PhantomDetector::~PhantomDetector()
PhantomDetector::BeginCollision(Entity*)
PropsSmasher::PropsSmasher()
PropsSmasher::~PropsSmasher()
PropsSmasher::~PropsSmasher()
PropsSmasher::Activate(bool)
PropsSmasher::Initialize(GameObject*, RigidBody*, VuVec const&, VuVec const&)
PropsSmasher::Update()
PropsSmasher::Collision(BodyPair*, Array<ContactPoint>&)
PositionAlongTheSpline::Initialize(SplineObject*, float)
PositionAlongTheSpline::IsTheEndReached()
PositionAlongTheSpline::IsTheBeginningReached()
PositionAlongTheSpline::Update(VuVec const&)
PositionAlongTheSpline::GetPosition()
PositionAlongTheSpline::GetOrientation()
PositionAlongTheSpline::GetLocationParameter()
RailJoint::RailJoint(RigidBody*)
RailJoint::RailJoint(RailJoint*, RigidBody*)
RailJoint::Clone(Entity*, Entity*)
RailJoint::SetPositionAlongTheRail(VuVec const&)
RailJoint::SetCorrectionDir(VuVec const&)
RailJoint::SetMovingDir(VuVec const&)
RailJoint::SetForceLimits(float, float)
RailJoint::GetConstraints(ConstraintSolver&)
RailJoint::AddConstraints(ConstraintSolver&)
RailConnection::RailConnection(RigidBody*, VuVec const&, IkJointModifier*)
RailConnection::~RailConnection()
RailConnection::AttachToSpline(SplineObject*)
RailConnection::Update(VuVec*)
RailConnection::IsAtTheEndOfTheSpline()
RailJoint::~RailJoint()
BallJoint::GetType()
Joint::IsTemp()
VehicleFollowsTheRail::LoopTheLoopHack::LoopTheLoopHack()
VehicleFollowsTheRail::LoopTheLoopHack::Reset()
VehicleFollowsTheRail::LoopTheLoopHack::ProcessCross(VuVec&)
VehicleFollowsTheRail::VehicleFollowsTheRail(ApiVehicle*)
VehicleFollowsTheRail::~VehicleFollowsTheRail()
VehicleFollowsTheRail::~VehicleFollowsTheRail()
VehicleFollowsTheRail::ModifyNormal(ApiVehicle*, int*, VuVec&)
VehicleFollowsTheRail::GetTransversalFromWheels(ApiVehicle*, int*, VuVec&)
VehicleFollowsTheRail::OnProcess()
VehicleFollowsTheRail::AttachToSpline(SplineObject*, bool)
VehicleFollowsTheRail::ClearLoopTheLoopHack()
VehicleFollowsTheRail::IsAttached()
VehicleFollowsTheRail::IsAtTheEndOfSpline()
VehicleFollowsTheRail::Initialize(ApiVehicle*, float*, float*)
VehicleFollowsTheRail::LockVelocity(bool, float, float, float)
VehicleFollowsTheRail::IsInitialized()
VehicleFollowsTheRail::GetPositionsAlongSpline(VuVec&, VuVec&)
VehicleFollowsTheRail::GetLocationParameter()
VehicleFollowsTheRail::IsOrientationPositive()
VehicleFollowsTheRail::EnableLoopTheLoopHack()
TurnTableParts::TurnTableParts()
TurnTableParts::~TurnTableParts()
TurnTableParts::~TurnTableParts()
TurnTableParts::Initialize(ApiVehicle*, RigidBody*, int, int)
TurnTableParts::HorizontalInputModify(float&, int)
TurnTableParts::VerticalInputModify(float&)
TurnTableParts::Update(float)
ApiCraneWithTurnTable::Activate(bool)
ApiCraneWithTurnTable::Update(float, float, float)
ApiCraneWithTurnTable::GetCraneFrame()
ApiCraneWithTurnTable::foldTheCrane(bool)
ApiCraneWithTurnTable::goToInitialPos(bool)
ApiCraneWithTurnTable::IsCraneAtFullExtent()
ApiCraneWithTurnTable::PostDynoUpdate(float)
ApiCraneWithTurnTable::ApiCraneWithTurnTable()
ApiCraneWithTurnTable::StopSFX()
ApiCraneWithTurnTable::DestroySFX()
ApiCraneWithTurnTable::~ApiCraneWithTurnTable()
ApiCraneWithTurnTable::~ApiCraneWithTurnTable()
ApiCraneWithTurnTable::DidCraneReachInitPos()
ApiCraneWithTurnTable::Initialize(ApiVehicle*, char const*, bool, float, float, float, float, char const*, char const*, char const*)
ApiCraneWithTurnTable::IsActive()
ApiCraneWithTurnTable::SetTurnTableSpeed(float)
ApiCraneWithTurnTable::SetTargetArmPosition(float, float)
ApiCraneWithTurnTable::EnableMovingPartsCollisions(int, bool, bool)
ApiCraneWithTurnTable::DisableMovingPartsCollisions()
ApiAimingCamera::ApiAimingCamera()
ApiAimingCamera::~ApiAimingCamera()
ApiAimingCamera::Activate(int)
ApiAimingCamera::CameraSetup(DynoScene*, ApiVehicle*, int, VuVec const*, VuVec const*, float, float, float)
ApiAimingCamera::SetLimits(int, float, int, float)
ApiAimingCamera::SetAsymmetricLimit(int, float, float)
ApiAimingCamera::SetAsymmetricLimit2(int, float, float)
ApiAimingCamera::CalculateRemainingAxis()
ApiAimingCamera::GetLocatorMtx(int, VuMtx&)
ApiAimingCamera::Update(float, float, float, bool)
ApiPropsSmasher::ApiPropsSmasher()
ApiPropsSmasher::~ApiPropsSmasher()
ApiPropsSmasher::~ApiPropsSmasher()
ApiPropsSmasher::Activate(bool)
ApiPropsSmasher::Initialize(ApiVehicle*, VuVec const&, VuVec const&)
ApiPropsSmasher::Update()
ApiPropsSmasher::Collision(BodyPair*, Array<ContactPoint>&)
RiderActions::RiderActions()
RiderActions::GetAnim(RiderActions::VehicleDrivingAnimations)
RiderActions::Set(RiderActions::VehicleDrivingAnimations, short)
MovingPartCollision::MovingPartCollision()
MovingPartCollision::~MovingPartCollision()
MovingPartCollision::~MovingPartCollision()
MovingPartCollision::Initialize(ApiVehicle*, char const*)
MovingPartCollision::Activate(bool)
MovingPartCollision::Remove()
MovingPartCollision::GetCollisionData(VuVec&, VuVec&)
MovingPartCollision::Update(float)
MovingPartCollision::PostDynoUpdate(float)
MovingPartCollision::AllowCollision(Entity const*, Entity const*)
MovingPartCollision::Collision(BodyPair*, Array<ContactPoint>&)
CraneJoint::CraneJoint(RigidBody*, RigidBody*, float, float)
CraneJoint::MeasureEllipticConeError(VuMtx const&, VuVec const&, VuVec&)
CraneJoint::AddConstraints(ConstraintSolver&)
CraneJoint::GetConstraints(ConstraintSolver&)
CraneJoint::Clone(Entity*, Entity*)
CraneJoint::GetType()
CraneJoint::~CraneJoint()
CraneJoint::~CraneJoint()
CraneJointHookPhysicsCorrection(RigidBody*, RigidBody*, float, float, float)
Joint::Render()
NuVector<Trigger*>::~NuVector()
NuVector<HelicopterSpecialZonesListener::DataBlock>::~NuVector()
NuMap<int, sVehicleCustomData>::~NuMap()
NuVector<LegoCityVehicleSettings::ExplodeData>::~NuVector()
MassMulSettings::Set(ApiVehicleMassMulMatrix&) const
MassMulSettings::MassMulSettings()
MassMulSettings::Clear()
LegoCityVehicleSettings::GetVehicleCustomData(short)
PK_addtiles(nufpar_s*)
VS_massmul(nufpar_s*)
VS_massmulend(nufpar_s*)
VS_scale_player(nufpar_s*)
VS_ybias_player(nufpar_s*)
VS_tyregrip_player(nufpar_s*)
VS_scale_ai(nufpar_s*)
VS_ybias_ai(nufpar_s*)
VS_tyregrip_ai(nufpar_s*)
VS_minrelvel(nufpar_s*)
VS_playeralwayswins(nufpar_s*)
PK_innerblurradius(nufpar_s*)
PK_outerBlurRadius(nufpar_s*)
PK_blurweight(nufpar_s*)
EC_defaultDistance(nufpar_s*)
EC_defaultHeight(nufpar_s*)
EC_distance(nufpar_s*)
EC_height(nufpar_s*)
LegoCityVehicleSettings::LoadLegoCityVehiclesResources()
HelicopterSpecialZonesListener::_Initialize()
LegoCityVehicleSettings::GetZone(short)
LegoCityVehicleSettings::LoadLegoCityVehiclesSettings()
LegoCityVehicleSettings::FindVehicleData(short)
LegoCityVehicleSettings::FindColourId(HashedKey const&)
LegoCityVehicleSettings::GetDefaultPlayerMassMul(short, short)
LegoCityVehicleSettings::FindMassMul(HashedKey const&)
LegoCityVehicleSettings::GetPolizeiTexid(int)
LegoCityVehicleData::GetHealth()
LegoCityVehicleData::GetDefaultColour()
LegoCityVehicleData::IsNoColourRandSet()
LegoCityVehicleData::IsColourLocked()
LegoCityVehicleData::IsBoostEnabled()
HelicopterSpecialZonesListener::HelicopterSpecialZonesListener()
HelicopterSpecialZonesListener::~HelicopterSpecialZonesListener()
HelicopterSpecialZonesListener::~HelicopterSpecialZonesListener()
HelicopterSpecialZonesListener::EventNotify(Event&, NuEventData&)
NuVector<LegoCityVehicleSettings::ExplodeData>::Reserve(unsigned int, bool)
NuMap<int, sVehicleCustomData>::InsertNode(int const&)
NuVector<HelicopterSpecialZonesListener::DataBlock>::Reserve(unsigned int, bool)
NuVector<Trigger*>::Reserve(unsigned int, bool)
NuMap<int, sVehicleCustomData>::DeleteNodeLinks(NuMapNode<int, sVehicleCustomData>*)
ToggleLegoCityVehicleDamageSys()
GetLegoCityVehicleDamageSysMode()
ApiVehicleUserData_LCGeneric::SetChaseCamFollowVehicle(int, ApiVehicle*)
ApiVehiclePFX::~ApiVehiclePFX()
ApiVehicle_ExplodeCameraAddOn::ApiVehicle_ExplodeCameraAddOn()
ApiVehicle_ExplodeCameraAddOn::SetTarget(ApiVehicle*)
ApiVehicle_ExplodeCameraAddOn::OnAdded()
ApiVehicle_ExplodeCameraAddOn::OnHook(unsigned char, HookArgs*)
ApiVehicle_ExplodeCameraAddOn::Process()
non-virtual thunk to ApiVehicle_ExplodeCameraAddOn::OnHook(unsigned char, HookArgs*)
ApiVehicle_ExplodeCameraAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to ApiVehicle_ExplodeCameraAddOn::EventNotify(Event&, NuEventData&)
ApiVehicleUserData_LCGeneric::SafeCopyGenericPFX(ApiVehiclePFX&, ApiVehiclePFX*)
ApiVehicleUserData_LCGeneric::DestroyGenericPFX(ApiVehiclePFX**)
ApiVehicleUserData_LCGeneric::LookupGenericPFX(char const*, ApiVehiclePFX**, LevelContainer*)
ApiVehicleUserData_LCGeneric::DestroyGenericPFX()
ApiVehicleUserData_LCGeneric::LookupGenericPFX()
ApiVehicleUserData_LCGeneric::ApiVehicleUserData_LCGeneric(ApiVehicle&)
ApiVehicleUserData_LCGeneric::EnableDriverAnimsCustomization()
ApiVehicleUserData_LCGeneric::SetDriverCustomAnim(RiderActions::VehicleDrivingAnimations, short)
ApiVehicleUserData_LCGeneric::IsMaterialOverridingPossible(CharInst const*, int, int)
ApiVehicleUserData_LCGeneric::~ApiVehicleUserData_LCGeneric()
ApiVehicleUserData_LCGeneric::ReleaseCarriage()
non-virtual thunk to ApiVehicleUserData_LCGeneric::~ApiVehicleUserData_LCGeneric()
non-virtual thunk to ApiVehicleUserData_LCGeneric::~ApiVehicleUserData_LCGeneric()
ApiVehicleUserData_LCGeneric::~ApiVehicleUserData_LCGeneric()
non-virtual thunk to ApiVehicleUserData_LCGeneric::~ApiVehicleUserData_LCGeneric()
non-virtual thunk to ApiVehicleUserData_LCGeneric::~ApiVehicleUserData_LCGeneric()
ApiVehicleUserData_LCGeneric::RegisterInputTriggers()
ApiVehicleUserData_LCGeneric::SetColour(bool, int)
ApiVehicleUserData_LCGeneric::DislodgeAllRiders()
ApiVehicleUserData_LCGeneric::DislodgeKrawlieRiders()
ApiVehicleUserData_LCGeneric::OnPostCreate(ApiVehicle*)
ApiVehicleUserData_LCGeneric::TowerTrailerCollisionDisabler::Enable(bool)
non-virtual thunk to ApiVehicleUserData_LCGeneric::OnPostCreate(ApiVehicle*)
ApiVehicleUserData_LCGeneric::PlayFxAlongVehicle(int, ApiVehiclePFX*)
ApiVehicleUserData_LCGeneric::SpawnCollectablesAlongVehicle(bool)
ApiVehicleUserData_LCGeneric::OnImpact(ApiVehicle*, float, VuVec const&, VuVec const&, RigidBody*)
ApiVehicleUserData_LCGeneric::LockPosition(bool)
non-virtual thunk to ApiVehicleUserData_LCGeneric::OnImpact(ApiVehicle*, float, VuVec const&, VuVec const&, RigidBody*)
ApiVehicleUserData_LCGeneric::HandleBoltHit(Bolt*)
ApiVehicleUserData_LCGeneric::HandleBeenHit(BeenHit::BeenHitType, MechObjectInterface*, VuVec*)
ApiVehicleUserData_LCGeneric::ApplyDamage(int, float, bool, bool)
ApiVehicleUserData_LCGeneric::GetLightingInfo(NUCOLOUR3&, NUCOLOUR3&)
ApiVehicleUserData_LCGeneric::UpdatePassengerLocation(MechCharacter*, int)
ApiVehicleUserData_LCGeneric::EnableSuperRam(MechCharacter*, int)
ApiVehicleUserData_LCGeneric::DisableSuperRam()
ApiVehicleUserData_LCGeneric::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_LCGeneric::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_LCGeneric::OnKillRequestEnd()
ApiVehicleUserData_LCGeneric::NotifyRespawned()
non-virtual thunk to ApiVehicleUserData_LCGeneric::NotifyRespawned()
ApiVehicleUserData_LCGeneric::OnJumpStart(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_LCGeneric::OnJumpStart(ApiVehicle*)
ApiVehicleUserData_LCGeneric::OnProcessPostDynoEvolve(ApiVehicle*)
ApiVehicleUserData_LCGeneric::RespawnOnPedestriansNetwork(MechCharacter*)
non-virtual thunk to ApiVehicleUserData_LCGeneric::OnProcessPostDynoEvolve(ApiVehicle*)
ApiVehicleUserData_LCGeneric::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_LCGeneric::UpdateBoostBlur(bool, MechCharacter*)
ApiVehicleUserData_LCGeneric::VehicleSpecificUnmount(MechCharacter*, int)
ApiVehicleUserData_LCGeneric::SetNewApiVehicleMode(bool)
ApiVehicleUserData_LCGeneric::GetActionId(ApiVehicleUserData_LCGeneric::VehicleDrivingAnimations)
ApiVehicleUserData_LCGeneric::OnProcess(ApiVehicle*)
CharInst::OverrideAllMaterials(NuSmartPtr<NuMtl, true>)
ApiVehicleUserData_LCGeneric::LockVelocity(bool, float, float, float)
ApiVehicleUserData_LCGeneric::VehicleInput(MechCharacter*, ApiVehicleController&, ApiVehicleUserData_LCGeneric::InputMode, bool)
non-virtual thunk to ApiVehicleUserData_LCGeneric::OnProcess(ApiVehicle*)
ApiVehicleUserData_LCGeneric::OnRender(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_LCGeneric::OnRender(ApiVehicle*)
ApiVehicleUserData_LCGeneric::OnRenderHUD(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_LCGeneric::OnRenderHUD(ApiVehicle*)
ApiVehicleUserData_LCGeneric::ActivateDefaultAnims(bool)
ApiVehicleUserData_LCGeneric::SetAnimSwitchingConf(float, float, float)
ApiVehicleUserData_LCGeneric::InitializePropsSmasher()
ApiVehicleUserData_LCGeneric::IsTakingAction()
ApiVehicleUserData_LCGeneric::SetDriverAnimsParams(float, float)
ApiVehicleUserData_LCGeneric::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_LCGeneric::DisableManualAIControl(bool)
ApiVehicleUserData_LCGeneric::DisableInputControls(bool)
ApiVehicleUserData_LCGeneric::HandleVehiclePadRumble(ApiVehicle*, MechCharacter*)
ApiVehicleUserData_LCGeneric::AttachToSpline(SplineObject*, bool)
ApiVehicleUserData_LCGeneric::LoopTheLoopHack()
ApiVehicleUserData_LCGeneric::IsAtTheEndOfSpline()
ApiVehicleUserData_LCGeneric::SetTumblingReduction(float)
ApiVehicleUserData_LCGeneric::SetHealthPerDamageLayer(int)
ApiVehicleUserData_LCGeneric::TurnOnSiren(bool)
ApiVehicleUserData_LCGeneric::TowerTrailerCollisionDisabler::TowerTrailerCollisionDisabler(ApiVehicle&)
ApiVehicleUserData_LCGeneric::TowerTrailerCollisionDisabler::AllowCollision(Entity const*, Entity const*)
ApiVehicleUserData_LCGeneric::ConnectRailVehicles(ApiVehicleUserData_LCGeneric*, ApiVehicleUserData_LCGeneric*)
ApiVehicleUserData_LCGeneric::RampDetector(Entity*)
ApiVehicleUserData_LCGeneric::AddRampBooster()
ApiVehicleUserData_LCGeneric::SetUnlimitedBoost(float)
ApiVehicleUserData_LCGeneric::Detonate(float)
ApiVehicleUserData_LCGeneric::RequestKill(MechRequestKillInfo const&)
ApiVehicleUserData_LCGeneric::EnableRamping()
ApiVehicleUserData_LCGeneric::DisableRamping()
ApiVehicleUserData_LCGeneric::SpawnPiecesOfVehicleLayers(unsigned int)
ApiVehicleUserData_LCGeneric::OperateDoor(bool, bool)
ApiVehicleUserData_LCGeneric::GetLegoCityStuckAmount()
ApiVehicleUserData_LCGeneric::GetCarriage()
ApiVehicle_ExplodeCameraAddOn::~ApiVehicle_ExplodeCameraAddOn()
ApiVehicle_ExplodeCameraAddOn::~ApiVehicle_ExplodeCameraAddOn()
non-virtual thunk to ApiVehicle_ExplodeCameraAddOn::~ApiVehicle_ExplodeCameraAddOn()
non-virtual thunk to ApiVehicle_ExplodeCameraAddOn::~ApiVehicle_ExplodeCameraAddOn()
non-virtual thunk to ApiVehicle_ExplodeCameraAddOn::~ApiVehicle_ExplodeCameraAddOn()
non-virtual thunk to ApiVehicle_ExplodeCameraAddOn::~ApiVehicle_ExplodeCameraAddOn()
ApiVehicleUserData_LCGeneric::TowerTrailerCollisionDisabler::~TowerTrailerCollisionDisabler()
MechVehicle::OnEnteredWater(ApiVehicle*)
MechVehicle::OnSetPlayerControls(ApiVehicleController&)
MechVehicle::IsVehicleAllowedToRespawn()
ApiVehicleUserData_LCGeneric::CanVehicleRamp() const
ApiVehicleUserData_LCGeneric::SetRailsLimits(float, float)
non-virtual thunk to MechVehicle::OnEnteredWater(ApiVehicle*)
ApiVehicleUserData::OnDriverEnter(ApiVehicle*)
ApiVehicleUserData::OnDriverExit(ApiVehicle*)
ApiVehicleUserData::PassengerMtxTweak(VehicleDefSeat::SEATTYPES, VuMtx&)
ApiVehicleUserData::ToInfinityAndBeyond()
MechVehicleInteractionEventData::~MechVehicleInteractionEventData()
GizmoEventData::~GizmoEventData()
ApiVehicleUserData_CherryPicker::~ApiVehicleUserData_CherryPicker()
non-virtual thunk to ApiVehicleUserData_CherryPicker::~ApiVehicleUserData_CherryPicker()
non-virtual thunk to ApiVehicleUserData_CherryPicker::~ApiVehicleUserData_CherryPicker()
ApiVehicleUserData_CherryPicker::~ApiVehicleUserData_CherryPicker()
non-virtual thunk to ApiVehicleUserData_CherryPicker::~ApiVehicleUserData_CherryPicker()
non-virtual thunk to ApiVehicleUserData_CherryPicker::~ApiVehicleUserData_CherryPicker()
ApiVehicleUserData_CherryPicker::InitializeCherryPicker()
ApiVehicleUserData_CherryPicker::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_CherryPicker::PlayerInput(float, float)
ApiVehicleUserData_CherryPicker::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_CherryPicker::ApplyDamage(int, float, bool, bool)
ApiVehicleUserData_CherryPicker::VehicleSpecificUnmount(MechCharacter*, int)
ApiVehicleUserData_CherryPicker::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_CherryPicker::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_CherryPicker::OnProcess(ApiVehicle*)
ApiVehicleUserData_CherryPicker::OnProcessPostDynoEvolve(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_CherryPicker::OnProcessPostDynoEvolve(ApiVehicle*)
ApiVehicleUserData_LadderCar::ApiVehicleUserData_LadderCar(ApiVehicle&)
ApiVehicleUserData_LadderCar::~ApiVehicleUserData_LadderCar()
non-virtual thunk to ApiVehicleUserData_LadderCar::~ApiVehicleUserData_LadderCar()
non-virtual thunk to ApiVehicleUserData_LadderCar::~ApiVehicleUserData_LadderCar()
ApiVehicleUserData_LadderCar::~ApiVehicleUserData_LadderCar()
non-virtual thunk to ApiVehicleUserData_LadderCar::~ApiVehicleUserData_LadderCar()
non-virtual thunk to ApiVehicleUserData_LadderCar::~ApiVehicleUserData_LadderCar()
ApiVehicleUserData_LadderCar::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_LadderCar::FiremanInput(float, float, bool)
ApiVehicleUserData_LadderCar::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_LadderCar::VehicleSpecificUnmount(MechCharacter*, int)
ApiVehicleUserData_LadderCar::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_LadderCar::PassengerMtxTweak(VehicleDefSeat::SEATTYPES, VuMtx&)
non-virtual thunk to ApiVehicleUserData_LadderCar::PassengerMtxTweak(VehicleDefSeat::SEATTYPES, VuMtx&)
ApiVehicleUserData_LadderCar::InitializeLadderCar()
ApiVehicleUserData_LadderCar::Abort()
ApiVehicleUserData_LadderCar::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_LadderCar::OnProcess(ApiVehicle*)
ApiVehicleUserData_LadderCar::OnProcessPostDynoEvolve(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_LadderCar::OnProcessPostDynoEvolve(ApiVehicle*)
ApiVehicleUserData_LadderCar::ApplyDamage(int, float, bool, bool)
ApiVehicleUserData_SteamRoller::~ApiVehicleUserData_SteamRoller()
non-virtual thunk to ApiVehicleUserData_SteamRoller::~ApiVehicleUserData_SteamRoller()
non-virtual thunk to ApiVehicleUserData_SteamRoller::~ApiVehicleUserData_SteamRoller()
non-virtual thunk to ApiVehicleUserData_SteamRoller::~ApiVehicleUserData_SteamRoller()
ApiVehicleUserData_SteamRoller::~ApiVehicleUserData_SteamRoller()
non-virtual thunk to ApiVehicleUserData_SteamRoller::~ApiVehicleUserData_SteamRoller()
non-virtual thunk to ApiVehicleUserData_SteamRoller::~ApiVehicleUserData_SteamRoller()
non-virtual thunk to ApiVehicleUserData_SteamRoller::~ApiVehicleUserData_SteamRoller()
ApiVehicleUserData_SteamRoller::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_SteamRoller::OnProcess(ApiVehicle*)
ApiVehicleUserData_SteamRoller::InitializeSteamRoller()
ApiVehicleUserData_SteamRoller::Collision(BodyPair*, Array<ContactPoint>&)
non-virtual thunk to ApiVehicleUserData_SteamRoller::Collision(BodyPair*, Array<ContactPoint>&)
HelicopterJoint::HelicopterJoint(RigidBody*)
HelicopterJoint::HelicopterJoint(HelicopterJoint*, RigidBody*)
HelicopterJoint::SetLocalPivot(VuVec const&)
HelicopterJoint::GetConstraints(ConstraintSolver&)
HelicopterJoint::AddConstraints(ConstraintSolver&)
HelicopterJoint::Clone(Entity*, Entity*)
ApiVehicleUserData_Helicopter::~ApiVehicleUserData_Helicopter()
non-virtual thunk to ApiVehicleUserData_Helicopter::~ApiVehicleUserData_Helicopter()
non-virtual thunk to ApiVehicleUserData_Helicopter::~ApiVehicleUserData_Helicopter()
non-virtual thunk to ApiVehicleUserData_Helicopter::~ApiVehicleUserData_Helicopter()
ApiVehicleUserData_Helicopter::~ApiVehicleUserData_Helicopter()
non-virtual thunk to ApiVehicleUserData_Helicopter::~ApiVehicleUserData_Helicopter()
non-virtual thunk to ApiVehicleUserData_Helicopter::~ApiVehicleUserData_Helicopter()
non-virtual thunk to ApiVehicleUserData_Helicopter::~ApiVehicleUserData_Helicopter()
ApiVehicleUserData_Helicopter::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_Helicopter::OnProcess(ApiVehicle*)
ApiVehicleUserData_Helicopter::InitializeHelicopter()
ApiVehicleUserData_Helicopter::Collision(BodyPair*, Array<ContactPoint>&)
non-virtual thunk to ApiVehicleUserData_Helicopter::Collision(BodyPair*, Array<ContactPoint>&)
HelicopterJoint::~HelicopterJoint()
HelicopterJoint::GetType()
ApiVehicleUserData_FireSoaker::~ApiVehicleUserData_FireSoaker()
non-virtual thunk to ApiVehicleUserData_FireSoaker::~ApiVehicleUserData_FireSoaker()
non-virtual thunk to ApiVehicleUserData_FireSoaker::~ApiVehicleUserData_FireSoaker()
ApiVehicleUserData_FireSoaker::~ApiVehicleUserData_FireSoaker()
non-virtual thunk to ApiVehicleUserData_FireSoaker::~ApiVehicleUserData_FireSoaker()
non-virtual thunk to ApiVehicleUserData_FireSoaker::~ApiVehicleUserData_FireSoaker()
ApiVehicleUserData_FireSoaker::ProcessInputForShooting(MechCharacter&, bool&)
ApiVehicleUserData_FireSoaker::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_FireSoaker::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_FireSoaker::VehicleSpecificUnmount(MechCharacter*, int)
ApiVehicleUserData_FireSoaker::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_FireSoaker::InitializeFireSoaker()
ApiVehicleUserData_FireSoaker::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_FireSoaker::OnProcess(ApiVehicle*)
CharacterCraneWinder::CharacterCraneWinder()
CharacterCraneWinder::~CharacterCraneWinder()
CharacterCraneWinder::~CharacterCraneWinder()
CharacterCraneWinder::Initialize(DistanceJoint*, float, float, float, VuVec const&, float, float)
CharacterCraneWinder::SetTargetGizmo(Gizmo*, bool)
CharacterCraneWinder::TakeAction()
CharacterCraneWinder::Update(float)
CharacterCraneWinder::resetDistanceJoint()
CharacterCraneWinder::AllowCollision(Entity const*, Entity const*)
ApiVehicleUserData_CraneGrasper::~ApiVehicleUserData_CraneGrasper()
non-virtual thunk to ApiVehicleUserData_CraneGrasper::~ApiVehicleUserData_CraneGrasper()
non-virtual thunk to ApiVehicleUserData_CraneGrasper::~ApiVehicleUserData_CraneGrasper()
ApiVehicleUserData_CraneGrasper::~ApiVehicleUserData_CraneGrasper()
non-virtual thunk to ApiVehicleUserData_CraneGrasper::~ApiVehicleUserData_CraneGrasper()
non-virtual thunk to ApiVehicleUserData_CraneGrasper::~ApiVehicleUserData_CraneGrasper()
ApiVehicleUserData_CraneGrasper::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_CraneGrasper::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_CraneGrasper::VehicleSpecificUnmount(MechCharacter*, int)
ApiVehicleUserData_CraneGrasper::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_CraneGrasper::InitializeCraneGrasper()
ApiVehicleUserData_CraneGrasper::GetActionId(ApiVehicleUserData_LCGeneric::VehicleDrivingAnimations)
ApiVehicleUserData_CraneGrasper::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_CraneGrasper::OnProcess(ApiVehicle*)
ApiVehicleUserData_CraneGrasper::SetTargetGizmo(Gizmo*)
ApiVehicleUserData_CraneGrasper::OnRender(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_CraneGrasper::OnRender(ApiVehicle*)
ApiVehicleUserData_RC_Digger::ApiVehicleUserData_RC_Digger(ApiVehicle&)
ApiVehicleUserData_RC_Digger::~ApiVehicleUserData_RC_Digger()
non-virtual thunk to ApiVehicleUserData_RC_Digger::~ApiVehicleUserData_RC_Digger()
non-virtual thunk to ApiVehicleUserData_RC_Digger::~ApiVehicleUserData_RC_Digger()
non-virtual thunk to ApiVehicleUserData_RC_Digger::~ApiVehicleUserData_RC_Digger()
ApiVehicleUserData_RC_Digger::~ApiVehicleUserData_RC_Digger()
non-virtual thunk to ApiVehicleUserData_RC_Digger::~ApiVehicleUserData_RC_Digger()
non-virtual thunk to ApiVehicleUserData_RC_Digger::~ApiVehicleUserData_RC_Digger()
non-virtual thunk to ApiVehicleUserData_RC_Digger::~ApiVehicleUserData_RC_Digger()
ApiVehicleUserData_RC_Digger::Condition(Entity*)
ApiVehicleUserData_RC_Digger::InitializeRCDigger()
ApiVehicleUserData_RC_Digger::IsTakingAction()
ApiVehicleUserData_RC_Digger::OnProcess(ApiVehicle*)
ApiVehicleUserData_RC_Digger::AutomaticScooping()
non-virtual thunk to ApiVehicleUserData_RC_Digger::OnProcess(ApiVehicle*)
ApiVehicleUserData_RC_Digger::AllowCollision(Entity const*, Entity const*)
non-virtual thunk to ApiVehicleUserData_RC_Digger::AllowCollision(Entity const*, Entity const*)
ApiVehicleUserData_ForkLift2::ApiVehicleUserData_ForkLift2(ApiVehicle&)
ApiVehicleUserData_ForkLift2::~ApiVehicleUserData_ForkLift2()
non-virtual thunk to ApiVehicleUserData_ForkLift2::~ApiVehicleUserData_ForkLift2()
non-virtual thunk to ApiVehicleUserData_ForkLift2::~ApiVehicleUserData_ForkLift2()
non-virtual thunk to ApiVehicleUserData_ForkLift2::~ApiVehicleUserData_ForkLift2()
ApiVehicleUserData_ForkLift2::~ApiVehicleUserData_ForkLift2()
non-virtual thunk to ApiVehicleUserData_ForkLift2::~ApiVehicleUserData_ForkLift2()
non-virtual thunk to ApiVehicleUserData_ForkLift2::~ApiVehicleUserData_ForkLift2()
non-virtual thunk to ApiVehicleUserData_ForkLift2::~ApiVehicleUserData_ForkLift2()
ApiVehicleUserData_ForkLift2::UpdateFork(bool)
ApiVehicleUserData_ForkLift2::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_ForkLift2::OnProcess(ApiVehicle*)
ApiVehicleUserData_ForkLift2::Collision(Character*, Entity*, ContactPoint&)
non-virtual thunk to ApiVehicleUserData_ForkLift2::Collision(Character*, Entity*, ContactPoint&)
ApiVehicleUserData_ForkLift2::Collision(BodyPair*, Array<ContactPoint>&)
non-virtual thunk to ApiVehicleUserData_ForkLift2::Collision(BodyPair*, Array<ContactPoint>&)
ApiVehicleUserData_CrawlerCrane2::ApiVehicleUserData_CrawlerCrane2(ApiVehicle&)
ApiVehicleUserData_CrawlerCrane2::~ApiVehicleUserData_CrawlerCrane2()
ApiVehicleUserData_CrawlerCrane2::TurnOffCraneMode()
non-virtual thunk to ApiVehicleUserData_CrawlerCrane2::~ApiVehicleUserData_CrawlerCrane2()
non-virtual thunk to ApiVehicleUserData_CrawlerCrane2::~ApiVehicleUserData_CrawlerCrane2()
ApiVehicleUserData_CrawlerCrane2::~ApiVehicleUserData_CrawlerCrane2()
non-virtual thunk to ApiVehicleUserData_CrawlerCrane2::~ApiVehicleUserData_CrawlerCrane2()
non-virtual thunk to ApiVehicleUserData_CrawlerCrane2::~ApiVehicleUserData_CrawlerCrane2()
ApiVehicleUserData_CrawlerCrane2::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_CrawlerCrane2::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_CrawlerCrane2::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_CrawlerCrane2::TurnOnCraneMode(MechCharacter*)
ApiVehicleUserData_CrawlerCrane2::SetCraneMode(bool)
ApiVehicleUserData_CrawlerCrane2::GetActionId(ApiVehicleUserData_LCGeneric::VehicleDrivingAnimations)
ApiVehicleUserData_CrawlerCrane2::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_CrawlerCrane2::OnProcess(ApiVehicle*)
ApiVehicleUserData_CrawlerCrane2::OnProcessPostDynoEvolve(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_CrawlerCrane2::OnProcessPostDynoEvolve(ApiVehicle*)
ApiVehicleUserData_CrawlerCrane2::OnRender(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_CrawlerCrane2::OnRender(ApiVehicle*)
ApiVehicleUserData_CrawlerCrane2::RequestKill(MechRequestKillInfo const&)
ApiVehicleUserData_Ball::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_Ball::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_Ball::VehicleSpecificUnmount(MechCharacter*, int)
ApiVehicleUserData_Ball::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_Ball::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_Ball::ApiVehicleUserData_Ball(ApiVehicle&)
ApiVehicleUserData_Ball::~ApiVehicleUserData_Ball()
non-virtual thunk to ApiVehicleUserData_Ball::~ApiVehicleUserData_Ball()
non-virtual thunk to ApiVehicleUserData_Ball::~ApiVehicleUserData_Ball()
ApiVehicleUserData_Ball::~ApiVehicleUserData_Ball()
non-virtual thunk to ApiVehicleUserData_Ball::~ApiVehicleUserData_Ball()
non-virtual thunk to ApiVehicleUserData_Ball::~ApiVehicleUserData_Ball()
ApiVehicleUserData_Ball::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_Ball::OnProcess(ApiVehicle*)
ApiVehicleUserData_Ball::InitializeBall(float, float)
ApiVehicleUserData_Yellowsubmarine::ApiVehicleUserData_Yellowsubmarine(ApiVehicle&)
ApiVehicleUserData_Yellowsubmarine::Condition(Entity*)
ApiVehicleUserData_Yellowsubmarine::~ApiVehicleUserData_Yellowsubmarine()
non-virtual thunk to ApiVehicleUserData_Yellowsubmarine::~ApiVehicleUserData_Yellowsubmarine()
non-virtual thunk to ApiVehicleUserData_Yellowsubmarine::~ApiVehicleUserData_Yellowsubmarine()
non-virtual thunk to ApiVehicleUserData_Yellowsubmarine::~ApiVehicleUserData_Yellowsubmarine()
ApiVehicleUserData_Yellowsubmarine::~ApiVehicleUserData_Yellowsubmarine()
non-virtual thunk to ApiVehicleUserData_Yellowsubmarine::~ApiVehicleUserData_Yellowsubmarine()
non-virtual thunk to ApiVehicleUserData_Yellowsubmarine::~ApiVehicleUserData_Yellowsubmarine()
non-virtual thunk to ApiVehicleUserData_Yellowsubmarine::~ApiVehicleUserData_Yellowsubmarine()
ApiVehicleUserData_Yellowsubmarine::GetActionId(ApiVehicleUserData_LCGeneric::VehicleDrivingAnimations)
ApiVehicleUserData_Yellowsubmarine::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_Yellowsubmarine::OnProcess(ApiVehicle*)
ApiVehicleUserData_Yellowsubmarine::PickingUpSequence()
non-virtual thunk to ApiVehicleUserData_Yellowsubmarine::OnProcess(ApiVehicle*)
ApiVehicleUserData_Yellowsubmarine::AllowCollision(Entity const*, Entity const*)
non-virtual thunk to ApiVehicleUserData_Yellowsubmarine::AllowCollision(Entity const*, Entity const*)
ApiVehicleUserData_FloorCleaner::ApiVehicleUserData_FloorCleaner(ApiVehicle&)
ApiVehicleUserData_FloorCleaner::Condition(Entity*)
ApiVehicleUserData_FloorCleaner::~ApiVehicleUserData_FloorCleaner()
non-virtual thunk to ApiVehicleUserData_FloorCleaner::~ApiVehicleUserData_FloorCleaner()
non-virtual thunk to ApiVehicleUserData_FloorCleaner::~ApiVehicleUserData_FloorCleaner()
ApiVehicleUserData_FloorCleaner::~ApiVehicleUserData_FloorCleaner()
non-virtual thunk to ApiVehicleUserData_FloorCleaner::~ApiVehicleUserData_FloorCleaner()
non-virtual thunk to ApiVehicleUserData_FloorCleaner::~ApiVehicleUserData_FloorCleaner()
ApiVehicleUserData_FloorCleaner::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_FloorCleaner::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_FloorCleaner::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_FloorCleaner::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_FloorCleaner::IsTakingAction()
ApiVehicleUserData_FloorCleaner::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_FloorCleaner::OnProcess(ApiVehicle*)
ApiVehicleUserData_FireBoat::ProcessInputForShooting(MechCharacter&, bool&)
ApiVehicleUserData_FireBoat::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_FireBoat::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_FireBoat::VehicleSpecificUnmount(MechCharacter*, int)
ApiVehicleUserData_FireBoat::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_FireBoat::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_FireBoat::CreateVehicleSpecificExitTask(MechCharacter*, int, DismountInfo*)
ApiVehicleUserData_FireBoat::ApiVehicleUserData_FireBoat(ApiVehicle&)
ApiVehicleUserData_FireBoat::~ApiVehicleUserData_FireBoat()
non-virtual thunk to ApiVehicleUserData_FireBoat::~ApiVehicleUserData_FireBoat()
non-virtual thunk to ApiVehicleUserData_FireBoat::~ApiVehicleUserData_FireBoat()
ApiVehicleUserData_FireBoat::~ApiVehicleUserData_FireBoat()
non-virtual thunk to ApiVehicleUserData_FireBoat::~ApiVehicleUserData_FireBoat()
non-virtual thunk to ApiVehicleUserData_FireBoat::~ApiVehicleUserData_FireBoat()
ApiVehicleUserData_FireBoat::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_FireBoat::OnProcess(ApiVehicle*)
ApiVehicleUserData_ControlCentre::ProcessInputForShooting(MechCharacter&, bool&)
ApiVehicleUserData_ControlCentre::~ApiVehicleUserData_ControlCentre()
non-virtual thunk to ApiVehicleUserData_ControlCentre::~ApiVehicleUserData_ControlCentre()
ApiVehicleUserData_ControlCentre::~ApiVehicleUserData_ControlCentre()
non-virtual thunk to ApiVehicleUserData_ControlCentre::~ApiVehicleUserData_ControlCentre()
ApiVehicleUserData_ControlCentre::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_ControlCentre::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_ControlCentre::VehicleSpecificUnmount(MechCharacter*, int)
ApiVehicleUserData_ControlCentre::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_ControlCentre::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_ControlCentre::OnProcess(ApiVehicle*)
MechVehicle::OnKillRequestEnd()
MechVehicle::HandleBeenHit(BeenHit::BeenHitType, MechObjectInterface*, VuVec*)
MechVehicle::OnRender(ApiVehicle*)
MechVehicle::CanVehicleRamp() const
MechVehicle::Detonate(float)
ApiVehicleUserData::OnJumpStart(ApiVehicle*)
non-virtual thunk to MechVehicle::OnRender(ApiVehicle*)
ApiVehicleUserData::OnRenderHUD(ApiVehicle*)
ApiVehicleUserData::NotifyRespawned()
ApiVehicleUserData_Gantry::ApiVehicleUserData_Gantry(ApiVehicle&)
ApiVehicleUserData_Gantry::~ApiVehicleUserData_Gantry()
non-virtual thunk to ApiVehicleUserData_Gantry::~ApiVehicleUserData_Gantry()
ApiVehicleUserData_Gantry::~ApiVehicleUserData_Gantry()
non-virtual thunk to ApiVehicleUserData_Gantry::~ApiVehicleUserData_Gantry()
ApiVehicleUserData_Gantry::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_Gantry::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_Gantry::VehicleSpecificUnmount(MechCharacter*, int)
ApiVehicleUserData_Gantry::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_Gantry::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_Gantry::OnProcess(ApiVehicle*)
ApiVehicleUserData_TrackPump::ApiVehicleUserData_TrackPump(ApiVehicle&)
ApiVehicleUserData_TrackPump::~ApiVehicleUserData_TrackPump()
non-virtual thunk to ApiVehicleUserData_TrackPump::~ApiVehicleUserData_TrackPump()
non-virtual thunk to ApiVehicleUserData_TrackPump::~ApiVehicleUserData_TrackPump()
non-virtual thunk to ApiVehicleUserData_TrackPump::~ApiVehicleUserData_TrackPump()
ApiVehicleUserData_TrackPump::~ApiVehicleUserData_TrackPump()
non-virtual thunk to ApiVehicleUserData_TrackPump::~ApiVehicleUserData_TrackPump()
non-virtual thunk to ApiVehicleUserData_TrackPump::~ApiVehicleUserData_TrackPump()
non-virtual thunk to ApiVehicleUserData_TrackPump::~ApiVehicleUserData_TrackPump()
ApiVehicleUserData_TrackPump::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_TrackPump::OnProcess(ApiVehicle*)
ApiVehicleUserData_TrackPump::GetActionId(ApiVehicleUserData_LCGeneric::VehicleDrivingAnimations)
ApiVehicleUserData_TrackPump::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_TrackPump::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_TrackPump::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_TrackPump::Collision(BodyPair*, Array<ContactPoint>&)
non-virtual thunk to ApiVehicleUserData_TrackPump::Collision(BodyPair*, Array<ContactPoint>&)
ApiVehicleUserData_Rookie::ApiVehicleUserData_Rookie(ApiVehicle&)
ApiVehicleUserData_Rookie::~ApiVehicleUserData_Rookie()
non-virtual thunk to ApiVehicleUserData_Rookie::~ApiVehicleUserData_Rookie()
ApiVehicleUserData_Rookie::~ApiVehicleUserData_Rookie()
non-virtual thunk to ApiVehicleUserData_Rookie::~ApiVehicleUserData_Rookie()
ApiVehicleUserData_Rookie::ProcessInputForShooting(MechCharacter&, bool&)
ApiVehicleUserData_Rookie::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_Rookie::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_Rookie::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_Rookie::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_Rookie::OnProcess(ApiVehicle*)
ApiVehicleUserData_TowTruck::ApiVehicleUserData_TowTruck(ApiVehicle&)
ApiVehicleUserData_TowTruck::~ApiVehicleUserData_TowTruck()
non-virtual thunk to ApiVehicleUserData_TowTruck::~ApiVehicleUserData_TowTruck()
non-virtual thunk to ApiVehicleUserData_TowTruck::~ApiVehicleUserData_TowTruck()
ApiVehicleUserData_TowTruck::~ApiVehicleUserData_TowTruck()
non-virtual thunk to ApiVehicleUserData_TowTruck::~ApiVehicleUserData_TowTruck()
non-virtual thunk to ApiVehicleUserData_TowTruck::~ApiVehicleUserData_TowTruck()
ApiVehicleUserData_TowTruck::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_TowTruck::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_TowTruck::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_TowTruck::OnImpact(ApiVehicle*, float, VuVec const&, VuVec const&, RigidBody*)
non-virtual thunk to ApiVehicleUserData_TowTruck::OnImpact(ApiVehicle*, float, VuVec const&, VuVec const&, RigidBody*)
ApiVehicleUserData_TowTruck::ApplyDamage(int, float, bool, bool)
ApiVehicleUserData_TowTruck::OnProcess(ApiVehicle*)
ApiVehicleUserData_TowTruck::IsCloseEnough(ApiVehicle*, VuVec&)
non-virtual thunk to ApiVehicleUserData_TowTruck::OnProcess(ApiVehicle*)
ToggleAbilityToGetOutOfLegoCityAircraft()
CanGetOutOfLegoCityAircraft()
ApiVehicleUserData_HoveringAircraft::Condition(Entity*)
ApiVehicleUserData_HoveringAircraft::ApiVehicleUserData_HoveringAircraft(ApiVehicle&)
ApiVehicleUserData_HoveringAircraft::~ApiVehicleUserData_HoveringAircraft()
non-virtual thunk to ApiVehicleUserData_HoveringAircraft::~ApiVehicleUserData_HoveringAircraft()
non-virtual thunk to ApiVehicleUserData_HoveringAircraft::~ApiVehicleUserData_HoveringAircraft()
non-virtual thunk to ApiVehicleUserData_HoveringAircraft::~ApiVehicleUserData_HoveringAircraft()
ApiVehicleUserData_HoveringAircraft::~ApiVehicleUserData_HoveringAircraft()
non-virtual thunk to ApiVehicleUserData_HoveringAircraft::~ApiVehicleUserData_HoveringAircraft()
non-virtual thunk to ApiVehicleUserData_HoveringAircraft::~ApiVehicleUserData_HoveringAircraft()
non-virtual thunk to ApiVehicleUserData_HoveringAircraft::~ApiVehicleUserData_HoveringAircraft()
ApiVehicleUserData_HoveringAircraft::GetActionId(ApiVehicleUserData_LCGeneric::VehicleDrivingAnimations)
ApiVehicleUserData_HoveringAircraft::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_HoveringAircraft::GetHeightCeiling()
ApiVehicleUserData_HoveringAircraft::VehicleSpecificRiderUpdate(MechCharacter*, int)
VuMtx::operator*=(VuMtx const&)
ApiVehicleUserData_HoveringAircraft::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_HoveringAircraft::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_HoveringAircraft::OnProcess(ApiVehicle*)
ApiVehicleUserData_HoveringAircraft::LandingSequence()
non-virtual thunk to ApiVehicleUserData_HoveringAircraft::OnProcess(ApiVehicle*)
ApiVehicleUserData_HoveringAircraft::AllowCollision(Entity const*, Entity const*)
non-virtual thunk to ApiVehicleUserData_HoveringAircraft::AllowCollision(Entity const*, Entity const*)
ApiVehicleUserData_HoveringAircraft::Collision(BodyPair*, Array<ContactPoint>&)
non-virtual thunk to ApiVehicleUserData_HoveringAircraft::Collision(BodyPair*, Array<ContactPoint>&)
ApiVehicleUserData_HoveringAircraft::OperateDoor(bool, bool)
ApiVehicleUserData_HoveringAircraft::GetLegoCityStuckAmount()
ApiVehicleUserData_FireHelicopter::ApiVehicleUserData_FireHelicopter(ApiVehicle&)
ApiVehicleUserData_FireHelicopter::~ApiVehicleUserData_FireHelicopter()
non-virtual thunk to ApiVehicleUserData_FireHelicopter::~ApiVehicleUserData_FireHelicopter()
non-virtual thunk to ApiVehicleUserData_FireHelicopter::~ApiVehicleUserData_FireHelicopter()
non-virtual thunk to ApiVehicleUserData_FireHelicopter::~ApiVehicleUserData_FireHelicopter()
ApiVehicleUserData_FireHelicopter::~ApiVehicleUserData_FireHelicopter()
non-virtual thunk to ApiVehicleUserData_FireHelicopter::~ApiVehicleUserData_FireHelicopter()
non-virtual thunk to ApiVehicleUserData_FireHelicopter::~ApiVehicleUserData_FireHelicopter()
non-virtual thunk to ApiVehicleUserData_FireHelicopter::~ApiVehicleUserData_FireHelicopter()
ApiVehicleUserData_FireHelicopter::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_FireHelicopter::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_FireHelicopter::VehicleSpecificUnmount(MechCharacter*, int)
ApiVehicleUserData_FireHelicopter::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_FireHelicopter::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_FireHelicopter::OnProcess(ApiVehicle*)
ApiVehicleUserData_Boat::ApiVehicleUserData_Boat(ApiVehicle&)
ApiVehicleUserData_Boat::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_Boat::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_Boat::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_Boat::OnProcess(ApiVehicle*)
ApiVehicleUserData_Boat::OperateDoor(bool, bool)
ApiVehicleUserData_Boat::GetActionId(ApiVehicleUserData_LCGeneric::VehicleDrivingAnimations)
ApiVehicleUserData_Boat::~ApiVehicleUserData_Boat()
non-virtual thunk to ApiVehicleUserData_Boat::~ApiVehicleUserData_Boat()
non-virtual thunk to ApiVehicleUserData_Boat::~ApiVehicleUserData_Boat()
non-virtual thunk to ApiVehicleUserData_Boat::~ApiVehicleUserData_Boat()
non-virtual thunk to ApiVehicleUserData_Boat::~ApiVehicleUserData_Boat()
ApiVehicleUserData_Plough::GetActionId(ApiVehicleUserData_LCGeneric::VehicleDrivingAnimations)
ApiVehicleUserData_Plough::~ApiVehicleUserData_Plough()
non-virtual thunk to ApiVehicleUserData_Plough::~ApiVehicleUserData_Plough()
non-virtual thunk to ApiVehicleUserData_Plough::~ApiVehicleUserData_Plough()
non-virtual thunk to ApiVehicleUserData_Plough::~ApiVehicleUserData_Plough()
non-virtual thunk to ApiVehicleUserData_Plough::~ApiVehicleUserData_Plough()
ApiVehicleUserData_Skateboard::ApiVehicleUserData_Skateboard(ApiVehicle&)
ApiVehicleUserData_Skateboard::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_Skateboard::OnProcess(ApiVehicle*)
ApiVehicleUserData_Skateboard::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_Skateboard::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_Skateboard::~ApiVehicleUserData_Skateboard()
non-virtual thunk to ApiVehicleUserData_Skateboard::~ApiVehicleUserData_Skateboard()
non-virtual thunk to ApiVehicleUserData_Skateboard::~ApiVehicleUserData_Skateboard()
non-virtual thunk to ApiVehicleUserData_Skateboard::~ApiVehicleUserData_Skateboard()
non-virtual thunk to ApiVehicleUserData_Skateboard::~ApiVehicleUserData_Skateboard()
ApiVehicleUserData_Shrapnel::ApiVehicleUserData_Shrapnel(ApiVehicle&)
ApiVehicleUserData_Shrapnel::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_Shrapnel::OnProcess(ApiVehicle*)
ApiVehicleUserData_Shrapnel::RequestKill(MechRequestKillInfo const&)
ApiVehicleUserData_Shrapnel::~ApiVehicleUserData_Shrapnel()
non-virtual thunk to ApiVehicleUserData_Shrapnel::~ApiVehicleUserData_Shrapnel()
non-virtual thunk to ApiVehicleUserData_Shrapnel::~ApiVehicleUserData_Shrapnel()
non-virtual thunk to ApiVehicleUserData_Shrapnel::~ApiVehicleUserData_Shrapnel()
non-virtual thunk to ApiVehicleUserData_Shrapnel::~ApiVehicleUserData_Shrapnel()
ApiVehicleUserData_Wheelchair::ApiVehicleUserData_Wheelchair(ApiVehicle&)
ApiVehicleUserData_Wheelchair::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_Wheelchair::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_Wheelchair::OnProcess(ApiVehicle*)
ApiVehicleUserData_Wheelchair::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_Wheelchair::~ApiVehicleUserData_Wheelchair()
non-virtual thunk to ApiVehicleUserData_Wheelchair::~ApiVehicleUserData_Wheelchair()
non-virtual thunk to ApiVehicleUserData_Wheelchair::~ApiVehicleUserData_Wheelchair()
non-virtual thunk to ApiVehicleUserData_Wheelchair::~ApiVehicleUserData_Wheelchair()
non-virtual thunk to ApiVehicleUserData_Wheelchair::~ApiVehicleUserData_Wheelchair()
ApiVehicleUserData_Train::ApiVehicleUserData_Train(ApiVehicle&)
ApiVehicleUserData_Train::~ApiVehicleUserData_Train()
non-virtual thunk to ApiVehicleUserData_Train::~ApiVehicleUserData_Train()
non-virtual thunk to ApiVehicleUserData_Train::~ApiVehicleUserData_Train()
ApiVehicleUserData_Train::~ApiVehicleUserData_Train()
non-virtual thunk to ApiVehicleUserData_Train::~ApiVehicleUserData_Train()
non-virtual thunk to ApiVehicleUserData_Train::~ApiVehicleUserData_Train()
ApiVehicleUserData_Train::VehicleSpecificMounting(MechCharacter*, int)
ApiVehicleUserData_Train::VehicleSpecificRiderUpdate(MechCharacter*, int)
ApiVehicleUserData_Train::VehicleInput(MechCharacter*, bool)
ApiVehicleUserData_Train::VehicleSpecificOnRemoved(MechCharacter*, int)
ApiVehicleUserData_Train::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_Train::OnProcess(ApiVehicle*)
ApiVehicleUserData_Train::VehicleSpecificDriverInput(MechCharacter*, ApiVehicleController&)
ApiVehicleUserData_Train::SetRailsLimits(float, float)
ApiVehicleUserData_Train::IsAtTheEndOfSpline()
ApiVehicleUserData_Emerald::ApiVehicleUserData_Emerald(ApiVehicle&)
ApiVehicleUserData_Emerald::~ApiVehicleUserData_Emerald()
non-virtual thunk to ApiVehicleUserData_Emerald::~ApiVehicleUserData_Emerald()
non-virtual thunk to ApiVehicleUserData_Emerald::~ApiVehicleUserData_Emerald()
ApiVehicleUserData_Emerald::~ApiVehicleUserData_Emerald()
non-virtual thunk to ApiVehicleUserData_Emerald::~ApiVehicleUserData_Emerald()
non-virtual thunk to ApiVehicleUserData_Emerald::~ApiVehicleUserData_Emerald()
ApiVehicleUserData_Emerald::AttachToSpline(SplineObject*, bool)
ApiVehicleUserData_Emerald::OnProcess(ApiVehicle*)
non-virtual thunk to ApiVehicleUserData_Emerald::OnProcess(ApiVehicle*)
LegoCityBoltType::LegoCityBoltType()
LegoCityBoltType::GetBoltHitAction(int)
LegoCityBolts::Init()
void* Constructor<GrappleBoltType>()
void* Constructor<BoltSwagType>()
void* Constructor<cBoltPaintType>()
void* Constructor<cBoltCityType>()
void* Constructor<cBulletBillBoltType>()
void* Constructor<cBoltTRexRoarType>()
LegoCityBolts::OnEnterLevel(MechLevelContainer&)
LegoCityBolts::AddManagersForLevel(LegoLevelContainer&)
LegoCityBolts::RemoveManagersForLevel(LegoLevelContainer&)
LegoCityBolts::FindTypeIDByCreature(MechCharacter*) const
LegoCityBolts::GetConfigKeywords()
LegoCityBolts::OnHitMechCharacterBase(Bolt*, MechCharacter*, int&)
LegoCityBolts::ShouldIgnoreVehicles(BoltTypeID)
LegoCityBolts::GetBoltDamage(BeenHit const&, MechObjectInterface const&) const
LegoCityBolts::BoltShouldBeBlocked(Bolt*, MechCharacter*, int, int, bool)
LegoCityBolts::ShouldCauseDismount(Bolt&, MechRidingData&)
LegoCityBolts::~LegoCityBolts()
LegoBolts::ShouldAddManagersForLevel(MechLevelContainer&)
LegoBolts::AddNewBolt(MechCharacter*, VuVec&, VuMtx&, BoltTypeID const&, int, MechObjectData*)
LegoBolts::HitPart(Bolt*, PART*)
LegoBolts::GetTypeIDFromTarget(MechCharacter*)
LegoBolts::ShouldBoltHitEntity(Entity const*, Geom const*, Bolt*)
LegoBolts::AllowGameObjectHitEvenIfImmuneToBoltsAndDie(Bolt*, MechCharacter*)
LegoBolts::ShouldDrawHitDebris(Bolt*)
LegoBolts::AddPlayerMom(MechCharacter&)
LegoBolts::GetGameFlagTable() const
LegoBolts::RayCastBoltOverride(Bolt*, VuVec&, VuVec&, int&)
LegoBolts::OnTypesCreated()
LegoBolts::OnHitPlatform(Bolt*)
LegoBolts::OnHitGameObject(Bolt*, MechCharacter*, int&)
BoltType::OnBoltInit(Bolt*)
BoltType::OnBoltEnd(Bolt*, bool)
BoltType::OnBoltUpdate(Bolt*)
BoltType::OnBoltPreHit(Bolt*, NUVEC*)
BoltType::OnBoltHitGameObject(MechCharacter*, Bolt*)
BoltType::OnBoltHitGizmo(Bolt*)
LegoCityBoltType::~LegoCityBoltType()
GrappleBoltType::OnBoltEnd(Bolt*, bool)
GrappleBoltType::~GrappleBoltType()
cBoltPaintSystem::GetPaintColourFromName(char const*)
cBoltPaintSystem::GetColourName(int)
cBoltPaintSystem::IsValidColourId(int)
cBoltPaintSystem::cBoltPaintSystem()
cBoltPaintSystem::~cBoltPaintSystem()
cBoltPaintSystem::~cBoltPaintSystem()
cBoltPaintSystem::Init()
cBoltPaintSystem::PlayerCharacterHasSplatGun(MechCharacter&)
cBoltPaintSystem::GetStoredPlayerColour(int)
cBoltPaintSystem::SetStoredPlayerColour(int, int)
cBoltPaintSystem::AddManagersForLevel(LegoLevelContainer&)
cBoltPaintManager::RegisterProcessing()
cBoltPaintManager::RegisterRendering()
cBoltPaintSystem::RemoveManagersForLevel(LegoLevelContainer&)
cBoltPaintSystem::FindUserDataForPlayer(MechCharacter&)
cBoltPaintManager::GetUserDataForPlayer(MechCharacter&)
cBoltPaintSystem::OnEnterLevel(LegoLevelContainer&)
cBoltPaintManager::LevelEnter()
cBoltPaintSystem::OnExitLevel(LegoLevelContainer&)
cBoltPaintManager::LevelExit()
cBoltPaintManager::cBoltPaintManager(LegoLevelContainer&)
BoltPaintAddOn::BoltPaintAddOn()
cBoltPaintManager::LoadOverrideMaterials(LegoLevelContainer&)
cBoltPaintManager::~cBoltPaintManager()
non-virtual thunk to cBoltPaintManager::~cBoltPaintManager()
cBoltPaintManager::~cBoltPaintManager()
non-virtual thunk to cBoltPaintManager::~cBoltPaintManager()
cBoltPaintManager::SetupMtlOverride(LegoLevelContainer&, int, char const*)
cBoltPaintManager::GetPaintColour(cBoltPaintSystem::PaintColour)
cBoltPaintManager::MaterialOverrideGizmo(Gizmo*, int)
cBoltPaintManager::MaterialOverrideSpecial(LegoSpecial*, int)
cBoltPaintManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
cBoltPaintManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
cBoltPaintUserData::Process()
cBoltPaintGadget::BoltPaintGadgetUpdate(float)
cBoltPaintManager::HandleObjDeath(MechCharacter*)
cBoltPaintUserData::HandleObjDeath(MechCharacter*)
cBoltPaintManager::GetUserDataForPlayer(int)
cBoltPaintManager::EventNotify(Event&, NuEventData&)
cBoltPaintUserData::RestoreCurrentColour()
cBoltPaintManager::GetUserDataForBolt(Bolt*)
cBoltPaintManager::DoHitVFX(Bolt*, int)
cBoltPaintUserData::cBoltPaintUserData(cBoltPaintManager*, int)
cBoltPaintUserData::AddToHitlist(MechCharacter*)
CMList<MechWeakPtr<MechCharacter, 8> >::Append(MechWeakPtr<MechCharacter, 8> const&, CMList<MechWeakPtr<MechCharacter, 8> >::ListLink*)
cBoltPaintUserData::RemoveFromHitlist(MechCharacter*)
cBoltPaintUserData::IsObjectinHitList(MechCharacter*)
cBoltPaintUserData::Update(MechCharacter*, CharInst*, NUVEC*)
cBoltPaintUserData::GetCurrentColour()
cBoltPaintUserData::UpdatePaintedMan(MechCharacter*)
cBoltPaintUserData::SetLayerTimer(MechCharacter*, short, float)
cBoltPaintUserData::MaterialOverrideGizmo(Gizmo*)
cBoltPaintUserData::MaterialOverrideSpecial(LegoSpecial*)
cBoltPaintUserData::MaterialOverrideGun(LegoSpecial*)
cBoltPaintUserData::GetCurrentNuColour()
cBoltPaintUserData::SetCurrentColour(int)
cBoltPaintUserData::ApplyColourToGun(MechCharacter&)
cBoltPaintType::OnBoltInit(Bolt*)
cBoltPaintType::OnBoltExit(Bolt*)
cBoltPaintType::OnBoltEnd(Bolt*, bool)
cBoltPaintGadget::BoltPaintGadgetHit(int, NuColour, NUVEC const*, float)
cBoltPaintType::OnBoltHitGameObject(MechCharacter*, Bolt*)
cBoltPaintType::OnBoltHitGizmo(Bolt*)
SAction_CharacterSetPaintColour::CharacterExec(ApiCharacter*, ScriptContext&)
SAction_CharacterGetPaintColour::CharacterExec(ApiCharacter*, ScriptContext&)
cBoltPaintSystem::MainMenu::LeftRightControl(MENU*, int&, int, int, int)
cBoltPaintSystem::MainMenu::Enter(MENU*)
cBoltPaintSystem::MainMenu::Render(MENU*)
cBoltPaintSystem::MainMenu::Update(MENU*)
BoltPaintAddOn::Init()
BoltPaintAddOn::RequiresColourSplat()
BoltPaintAddOn::HitByCorrectColour()
BoltPaintAddOn::HitByIncorrectColour()
BoltPaintAddOn::PaintHit(GameAnimSet*, LegoSpecial*, CharInst*, int, NuColour, NUVEC const*, float)
BoltPaintAddOn::ColourToTargetColour(GameAnimSet*, LegoSpecial*, VuVec*, cBoltPaintManager*)
BoltPaintAddOn::PaintUpdate(GameAnimSet*, LegoSpecial*, CharInst*, float)
BoltPaintAddOn::~BoltPaintAddOn()
SAction_CharacterSetPaintColour::~SAction_CharacterSetPaintColour()
SAction_CharacterSetPaintColour::GetName() const
SAction_CharacterSetPaintColour::GetInputs(SCmdParams&) const
SAction_CharacterSetPaintColour::GetOutputs(SCmdParams&) const
SAction_CharacterGetPaintColour::~SAction_CharacterGetPaintColour()
SAction_CharacterGetPaintColour::GetName() const
SAction_CharacterGetPaintColour::GetInputs(SCmdParams&) const
SAction_CharacterGetPaintColour::GetOutputs(SCmdParams&) const
cBoltPaintType::~cBoltPaintType()
cBoltPaintHelper::~cBoltPaintHelper()
cBoltPaintGadget::~cBoltPaintGadget()
cBoltPaintGadget::~cBoltPaintGadget()
LegoManagerBase<cBoltPaintManager>::~LegoManagerBase()
BoltSwagType::OnBoltInit(Bolt*)
BoltSwagType::OnBoltUpdate(Bolt*)
BoltSwagType::OnBoltEnd(Bolt*, bool)
BoltSwagType::OnBoltPreHit(Bolt*, NUVEC*)
BoltSwagType::GetBoltScale(Bolt*)
BoltSwagType::OnBoltHitGameObject(MechCharacter*, Bolt*)
BoltType::GetBoltHitAction(int)
BoltSwagType::~BoltSwagType()
cBoltCityType::OnBoltEnd(Bolt*, bool)
cBoltCityType::~cBoltCityType()
cBulletBillBoltType::OnBoltInit(Bolt*)
cBulletBillBoltType::OnBoltEnd(Bolt*, bool)
cBulletBillBoltType::OnBoltUpdate(Bolt*)
cBulletBillBoltType::OnBoltHitGameObject(MechCharacter*, Bolt*)
cBulletBillBoltType::~cBulletBillBoltType()
QueueableAction::QueueableAction()
QueueableAction::~QueueableAction()
QueueableAction::~QueueableAction()
QueueableAction::Take()
QueueableAction::Release()
QueueableActionPool::QueueableActionPool(int)
QueueableActionPool::~QueueableActionPool()
QueueableActionPool::~QueueableActionPool()
QueueableActionPool::GetFirstUnusedAction()
PickupClusterSystem::PickupClusterSystem()
PickupClusterSystem::~PickupClusterSystem()
PickupClusterSystem::~PickupClusterSystem()
PickupClusterSystem::GetHelper()
CreateSplineManagerStudChainSpline(LevelContainer&)
PickupClusterSystem::Init()
PickupClusterSystem::ShutDown()
PickupClusterSystem::SetupPickupTypes()
PickupClusterSystem::AddManagersForLevel(MechLevelContainer&)
PickupClusterManager::RegisterProcessing()
PickupClusterManager::RegisterRendering()
PickupClusterSystem::RemoveManagersForLevel(MechLevelContainer&)
PickupClusterSystem::OnEnterLevel(MechLevelContainer&)
PickupClusterSystem::OnExitLevel(MechLevelContainer&)
PickupClusterSystem::OnResetLevel(MechLevelContainer&)
PickupClusterSystem::EventNotify(Event&, NuEventData&)
PickupClusterSystem::RegisterScriptFunctionality()
PickupClusterSystem::ShouldAddManagersForLevel(MechLevelContainer&)
PickupClusterManager::PickupClusterManager()
PickupClusterManager::~PickupClusterManager()
NuHashMap<unsigned int, StudChainSpline*>::~NuHashMap()
NuHashMap<unsigned int, SpicyChickenRing*>::~NuHashMap()
PickupClusterManager::~PickupClusterManager()
PickupClusterManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
PickupClusterManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
PickupClusterManager::EventNotify(Event&, NuEventData&)
PickupClusterManager::AddSpicyChickenRing(SpicyChickenRing*)
PickupClusterManager::MapSpicyChickenRingByName(SpicyChickenRing*, char const*)
PickupClusterManager::AddStudChain(StudChainSpline*)
PickupClusterManager::MapStudChainByName(StudChainSpline*, char const*)
PickupClusterManager::MapSpicyChickenRing(SpicyChickenRing*)
PickupClusterManager::MapStudChain(StudChainSpline*)
NuHashMap<unsigned int, SpicyChickenRing*>::Erase(unsigned int const&)
NuHashMap<unsigned int, StudChainSpline*>::Erase(unsigned int const&)
PickupClusterManager::RemoveSpicyChickenRing(SpicyChickenRing*)
PickupClusterManager::RemoveStudChain(StudChainSpline*)
PickupClusterManager::CollectCentralPickup(GizmoPickup const&, MechCharacter*)
PickupClusterManager::CollectPhantomWidget(GizmoPickup const&, MechCharacter*)
PickupClusterManager::ApplyDynamicScale(GizmoPickup const*, float*)
SAction_PickupClusterChickenRingSetVisible::GetInputs(SCmdParams&) const
SAction_PickupClusterChickenRingSetVisible::Exec(ScriptContext&)
SAction_PickupClusterStudChainStart::GetInputs(SCmdParams&) const
SAction_PickupClusterStudChainStart::Exec(ScriptContext&)
SAction_PickupClusterStudChainBeginCountdown::GetInputs(SCmdParams&) const
SAction_PickupClusterStudChainBeginCountdown::Exec(ScriptContext&)
SAction_PickupClusterStudChainAllCollected::GetInputs(SCmdParams&) const
SAction_PickupClusterStudChainAllCollected::Exec(ScriptContext&)
SAction_PickupClusterStudChainReset::GetInputs(SCmdParams&) const
SAction_PickupClusterStudChainReset::Exec(ScriptContext&)
GlideRingManager::GlideRingManager()
GlideRingManager::~GlideRingManager()
GlideRingManager::~GlideRingManager()
GlideRingManager::RegisterProcessing()
GlideRingManager::RegisterRendering()
GlideRingManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
GlideRingManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
GlideRingManager::EventNotify(Event&, NuEventData&)
GlideRingManager::AddGlideRings(GlideRings*)
GlideRingManager::RemoveGlideRings(GlideRings*)
GlideRingManager::GetNumGlideRings() const
GlideRingManager::FindGlideRings(HashedNameParam const&) const
GlideRingManager::GetNextGlideRings(GlideRings const*) const
GlideRingManager::GetGlideRingsAtIndex(int) const
SAction_PickupClusterChickenRingSetVisible::~SAction_PickupClusterChickenRingSetVisible()
SAction_PickupClusterChickenRingSetVisible::GetName() const
SAction_PickupClusterChickenRingSetVisible::GetOutputs(SCmdParams&) const
SAction_PickupClusterStudChainStart::~SAction_PickupClusterStudChainStart()
SAction_PickupClusterStudChainStart::GetName() const
SAction_PickupClusterStudChainStart::GetOutputs(SCmdParams&) const
SAction_PickupClusterStudChainBeginCountdown::~SAction_PickupClusterStudChainBeginCountdown()
SAction_PickupClusterStudChainBeginCountdown::GetName() const
SAction_PickupClusterStudChainBeginCountdown::GetOutputs(SCmdParams&) const
SAction_PickupClusterStudChainAllCollected::~SAction_PickupClusterStudChainAllCollected()
SAction_PickupClusterStudChainAllCollected::GetName() const
SAction_PickupClusterStudChainAllCollected::GetOutputs(SCmdParams&) const
SAction_PickupClusterStudChainReset::~SAction_PickupClusterStudChainReset()
SAction_PickupClusterStudChainReset::GetName() const
SAction_PickupClusterStudChainReset::GetOutputs(SCmdParams&) const
PickupClusterManagerHelper::~PickupClusterManagerHelper()
SplineManagerT<StudChainSpline>::~SplineManagerT()
SplineManagerT<StudChainSpline>::GetManagerName() const
SplineManagerT<StudChainSpline>::GetClass(int)
SplineManagerT<StudChainSpline>::GetNumClasses()
SplineManagerT<StudChainSpline>::NewSpline(EdRegContext*, void*, int) const
SplineManagerT<StudChainSpline>::DeleteSpline(SplineObject*) const
SplineManagerT<StudChainSpline>::GetSplineHelper() const
SplineManager::GetSplineList()
NuFixedStringT<(unsigned short)64>::~NuFixedStringT()
KnotHelper::~KnotHelper()
KnotHelperT<SplineKnot>::~KnotHelperT()
KnotHelper::GetParentObject(void*)
KnotHelperT<SplineKnot>::NewKnot()
KnotHelperT<SplineKnot>::DeleteKnot(SplineKnot*)
non-virtual thunk to KnotHelperT<SplineKnot>::~KnotHelperT()
non-virtual thunk to KnotHelperT<SplineKnot>::~KnotHelperT()
NuListFind<SpicyChickenRing*, NuListNode<SpicyChickenRing*> >::Remove(NuListNode<SpicyChickenRing*>*, NuListNode<SpicyChickenRing*>*, SpicyChickenRing* const&)
NuListFind<StudChainSpline*, NuListNode<StudChainSpline*> >::Remove(NuListNode<StudChainSpline*>*, NuListNode<StudChainSpline*>*, StudChainSpline* const&)
NuListFind<GlideRings*, NuListNode<GlideRings*> >::Remove(NuListNode<GlideRings*>*, NuListNode<GlideRings*>*, GlideRings* const&)
ChickenRingInterface::CloneObject(LevelContainer&, NUVEC&, NUMTX&, Gizmo*)
ChickenRingInterface::GetName()
ChickenRingInterface::GetLedFile()
ChickenRingInterface::SerialiseProgressData(EdStream&)
SpicyChickenRing::SpicyChickenRing(EdRegContext&, PickupClusterManager&, VuVec const&)
SpicyChickenRing::~SpicyChickenRing()
SpicyChickenRing::Clear()
SpicyChickenRing::RemoveEffect()
SpicyChickenRing::NotifyGlideRingOfDestruction()
non-virtual thunk to SpicyChickenRing::~SpicyChickenRing()
SpicyChickenRing::~SpicyChickenRing()
non-virtual thunk to SpicyChickenRing::~SpicyChickenRing()
SpicyChickenRing::GetClass() const
SpicyChickenRing::SetVisibility(int)
SpicyChickenRing::Reset()
SpicyChickenRing::ActivatePickups(bool)
SpicyChickenRing::Process(float)
SpicyChickenRing::Build(LegoPickupManager&)
SpicyChickenRing::Collect(MechCharacter*)
SpicyChickenRing::Render()
SpicyChickenRing::SetName(char const*)
SpicyChickenRingHelperFunctions::CreatePickup(GizmoPickup*, LegoPickupManager&, int, NUVEC&, unsigned short, short, bool, bool)
SpicyChickenRing::TriggerEffect()
SpicyChickenRing::GetValue()
SpicyChickenRingHelper::SpicyChickenRingHelper()
SpicyChickenRingHelper::Initialise()
SpicyChickenRingHelper::SetupPickupMap()
SpicyChickenRingHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
SpicyChickenRingHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
SpicyChickenRingHelper::GetManNumObjects(ClassManager*, void*)
SpicyChickenRingHelper::GetManNextObject(ClassManager*, void*, void*)
SpicyChickenRingHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
EdRefSpicyChickenRing::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSpicyChickenRing::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ChickenRingInterface::~ChickenRingInterface()
ChickenRingInterface::GetObject()
ChickenRingInterface::GetTypeName()
ChickenRingInterface::GetGizmoPrefix()
ChickenRingInterface::GetClass()
ChickenRingInterface::GetNumOutputs()
ChickenRingInterface::GetOutput(int, int)
ChickenRingInterface::GetDefaultOutputIndex()
ChickenRingInterface::GetOutputName(int)
ChickenRingInterface::Activate(bool)
ChickenRingInterface::ActivateRev(int, int)
ChickenRingInterface::SetVisibility(int)
ChickenRingInterface::IsActive()
ChickenRingInterface::IsVisible()
ChickenRingInterface::AcquireSpecials()
ChickenRingInterface::Reset()
ChickenRingInterface::ActivateByComplexGizmo()
ChickenRingInterface::ResetForLoop()
ChickenRingInterface::GetTriggeredByPlayerId()
ChickenRingInterface::SetTriggeredByPlayerId(MechCharacter*)
ChickenRingInterface::GetBuilderOrigin(NUVEC*)
ChickenRingInterface::GetRotationMatrix(NUMTX&)
ChickenRingInterface::HideFromEditor()
ChickenRingInterface::CanBeAddedToComplexGizmo()
ChickenRingInterface::GetReference()
ChickenRingInterface::JumpToComplete()
EdRefSpicyChickenRing::~EdRefSpicyChickenRing()
EdRefSpicyChickenRing::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSpicyChickenRing::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SpicyChickenRing::GetLedFile() const
SpicyChickenRing::SetLedFile(short)
SpicyChickenRing::GetTransform(VuMtx&) const
SpicyChickenRing::SetTransform(VuMtx const&)
SpicyChickenRing::GetPosition(VuVec&) const
SpicyChickenRing::SetPosition(VuVec const&)
SpicyChickenRing::Activate(bool)
SpicyChickenRing::GetNumOutputs()
SpicyChickenRing::GetOutput(int, int)
SpicyChickenRing::GetDefaultOutputIndex()
SpicyChickenRing::GetOutputName(int)
SpicyChickenRing::ActivateRev(int, int)
SpicyChickenRing::ResetForLoop()
SpicyChickenRingHelper::~SpicyChickenRingHelper()
SpicyChickenRingHelper::~SpicyChickenRingHelper()
non-virtual thunk to SpicyChickenRingHelper::~SpicyChickenRingHelper()
non-virtual thunk to SpicyChickenRingHelper::~SpicyChickenRingHelper()
StudChainSpline::StudChainSpline(EdRegContext&, void*, int)
StudChainSpline::~StudChainSpline()
StudChainSpline::Clear()
non-virtual thunk to StudChainSpline::~StudChainSpline()
StudChainSpline::~StudChainSpline()
non-virtual thunk to StudChainSpline::~StudChainSpline()
StudChainSpline::Update(float)
StudChainSpline::Build(LegoPickupManager&)
StudChainSpline::GetSmoothSplineLength() const
StudChainSpline::GetPointOnSpline(VuVec&, float) const
StudChainSpline::BestDist(VuVec&, VuVec&, float, float, float, int)
StudChainSpline::StartChain()
StudChainSpline::ResetChain()
StudChainSpline::RenderChain()
StudChainSpline::UpdateWidget()
StudChainHelperFunctions::CreatePickup(GizmoPickup*, LegoPickupManager&, int, NUVEC&, short, bool)
StudChainSpline::SetName(char const*)
StudChainHelper::SetupPickupMap()
StudChainHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
StudChainHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
StudChainHelper::GetManNumObjects(ClassManager*, void*)
StudChainHelper::GetManNextObject(ClassManager*, void*, void*)
StudChainHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to StudChainHelper::EventNotify(Event&, NuEventData&)
StudChainHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
StudChainHelper::RegisterSplineData(EdClass*)
EdRefStudChain::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefStudChain::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefStudChain::~EdRefStudChain()
EdRefStudChain::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefStudChain::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
StudChainSpline::SetTransform(VuMtx const&)
SplineObject::GetPosition(VuVec&) const
StudChainSpline::SetPosition(VuVec const&)
SplineObject::GetVisibility() const
SplineObject::SetVisibility(int)
SplineObject::Activate()
SplineObject::Deactivate()
SplineObject::IsActive() const
StudChainSpline::SetDirty()
SplineObject::Process(void*, float)
SplineHelper::~SplineHelper()
StudChainHelper::~StudChainHelper()
SplineHelperT<StudChainSpline>::NewSpline(EdRegContext*, void*, int) const
SplineHelperT<StudChainSpline>::DeleteSpline(SplineObject*) const
SplineHelperT<StudChainSpline>::GetManagerID() const
SplineHelper::SkipPositionRefs()
StudChainHelper::GetPrefix()
StudChainHelper::GetCategory()
StudChainHelper::GetFileExt()
SplineHelper::GetNameOverrideForSpline()
SplineHelper::GetNameOverrideForKnot()
SplineHelper::RegisterKnotData(EdClass*)
non-virtual thunk to StudChainHelper::~StudChainHelper()
non-virtual thunk to StudChainHelper::~StudChainHelper()
GlideRingsInterface::CloneObject(LevelContainer&, NUVEC&, NUMTX&, Gizmo*)
GlideRingsInterface::GetName()
GlideRingsInterface::GetLedFile()
GlideRings_PopulateList(char const**)
EdRefGlideRings::PopulateTypeEnum(char const**)
GlideRings_Init()
GlideRingsEdHelper::GlideRingsEdHelper()
GlideRingsEdHelper::Initialise()
GlideRingsEdHelper::GetManNumObjects(ClassManager*, void*)
GlideRingsEdHelper::GetManNextObject(ClassManager*, void*, void*)
GlideRingsEdHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
GlideRingsEdHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
GlideRings::GlideRings(EdRegContext&, GlideRingManager&, PickupClusterManager&)
GlideRings::~GlideRings()
non-virtual thunk to GlideRings::~GlideRings()
GlideRings::~GlideRings()
non-virtual thunk to GlideRings::~GlideRings()
GlideRings::GetClass() const
GlideRings::GetInstanceId() const
GlideRings::GetTransform(VuMtx&) const
GlideRings::SetTransform(VuMtx const&)
GlideRings::GetPosition(VuVec&) const
GlideRings::SetPosition(VuVec const&)
GlideRings::Process(float)
GlideRings::UpdateState(float)
GlideRings::RingCollected(SpicyChickenRing*, MechCharacter*)
GlideRings::SetVisibility(int)
GlideRings::LinkChickenRingsToNames()
GlideRings::UnLinkChickenRing(SpicyChickenRing*)
GlideRings::GetLastFailedPlayerIndex()
GlideRingsInterface::~GlideRingsInterface()
GlideRingsInterface::GetObject()
GlideRingsInterface::GetTypeName()
GlideRingsInterface::GetGizmoPrefix()
GlideRingsInterface::GetClass()
GlideRingsInterface::GetNumOutputs()
GlideRingsInterface::GetOutput(int, int)
GlideRingsInterface::GetDefaultOutputIndex()
GlideRingsInterface::GetOutputName(int)
GlideRingsInterface::Activate(bool)
GlideRingsInterface::ActivateRev(int, int)
GlideRingsInterface::SetVisibility(int)
GlideRingsInterface::IsActive()
GlideRingsInterface::IsVisible()
GlideRingsInterface::AcquireSpecials()
GlideRingsInterface::Reset()
GlideRingsInterface::ActivateByComplexGizmo()
GlideRingsInterface::ResetForLoop()
GlideRingsInterface::GetTriggeredByPlayerId()
GlideRingsInterface::SetTriggeredByPlayerId(MechCharacter*)
GlideRingsInterface::GetBuilderOrigin(NUVEC*)
GlideRingsInterface::GetRotationMatrix(NUMTX&)
GlideRingsInterface::HideFromEditor()
GlideRingsInterface::CanBeAddedToComplexGizmo()
GlideRingsInterface::GetReference()
GlideRingsInterface::JumpToComplete()
GlideRingsEdHelper::~GlideRingsEdHelper()
GlideRings::Activate(bool)
GlideRings::GetNumOutputs()
GlideRings::GetOutput(int, int)
GlideRings::GetDefaultOutputIndex()
GlideRings::GetOutputName(int)
GlideRings::ActivateRev(int, int)
GlideRings::ResetForLoop()
EdRefGlideRings::~EdRefGlideRings()
EdRefGlideRings::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefGlideRings::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
LegoCityJobValues::FindValue(char const*, char const*)
LegoCityJobValues::AcquireValues()
Lego_City_LevelThings_Init()
Lego_City_LevelThings_Shutdown()
LocaliseSigns(WORLDINFO*)
IsBridgeUp()
BR_Twin_Bridge_ULD_Bridge_Reset(WORLDINFO*)
BR_Twin_Bridge_ULD_Bridge_Destroy(WORLDINFO*)
Reset_ULD_SuperBuilds(WORLDINFO*, MechWeakPtr<Gizmo, 16>*, StreamingLevel**, char const*, char const*, char const*)
NY_Beach_2506_ULD_LHOUSE_Reset(WORLDINFO*)
WI_Forest_1002_ULD_Bridge_Reset(WORLDINFO*)
WI_Forest_1002_ULD_Bridge_Destroy(WORLDINFO*)
NY_Downtown_2125_ULD_FWheel_Reset(WORLDINFO*)
NY_Downtown_2125_ULD_FWheel_Destroy(WORLDINFO*)
NY_Downtown_2125_HD_Reset(WORLDINFO*)
NY_Downtown_2125_HD_Destroy(WORLDINFO*)
NY_Downtown_2125_LD_Reset(WORLDINFO*)
NY_Downtown_2125_LD_Destroy(WORLDINFO*)
NY_Airport_2105_LD_Reset(WORLDINFO*)
NY_Airport_2105_HD_Destroy(WORLDINFO*)
NY_Beach_2506_ULD_LHOUSE_Destroy(WORLDINFO*)
IS_Space_Centre_3422_Init(WORLDINFO*)
WI_Farmlands_0505_Init(WORLDINFO*)
SF_Residential_0822_Init(WORLDINFO*)
SF_Residential_0822_Reset(WORLDINFO*)
SF_Residential_0822_LD_Reset(WORLDINFO*)
SF_Residential_0822_Signs_Reset(WORLDINFO*)
SF_Residential_0822_Signs_Destroy(WORLDINFO*)
SF_Residential_0823_Reset(WORLDINFO*)
SF_Residential_0823_LD_Reset(WORLDINFO*)
SF_Residential_0823_Signs_Reset(WORLDINFO*)
SF_Residential_0823_Signs_Destroy(WORLDINFO*)
WI_Forest_0803_Reset(WORLDINFO*)
WI_Forest_0803_LD_Reset(WORLDINFO*)
WI_Forest_0803_Signs_Reset(WORLDINFO*)
WI_Forest_0803_Signs_Destroy(WORLDINFO*)
CUT_02_MeetFrank_Reset(WORLDINFO*)
CUT_20_CrashingTheParty_Reset(WORLDINFO*)
CUT_30B_Outro_BlackwellRescued_Reset(WORLDINFO*)
CUT_14_HammerTime_Reset(WORLDINFO*)
CUT_14_HammerTime_Destroy(WORLDINFO*)
TileSpecificFixup::~TileSpecificFixup()
Lego_City_Reset(WORLDINFO*)
NY_1604_MuseumFixup::OnCityReset(WORLDINFO*)
NY_2023_BankFixup::OnCityReset(WORLDINFO*)
Update_ULD_Superbuild(StreamingLevel*, MechWeakPtr<Gizmo, 16>*, char const*)
Lego_City_Draw(WORLDINFO*)
Lego_City_Update(WORLDINFO*)
NY_1604_MuseumFixup::OnCityUpdate(WORLDINFO*)
NY_2023_BankFixup::OnCityUpdate(WORLDINFO*)
Lego_City_Destroy(WORLDINFO*)
Lego_City_GetSpecialInitialFrame(LegoSpecial*)
Lego_City_LevelThings::~Lego_City_LevelThings()
Lego_City_LevelThings::~Lego_City_LevelThings()
Lego_City_LevelThings::EventNotify(Event&, NuEventData&)
ULDSpecialSwitcher::SetActiveSpecial(int)
LegoCityGame::GetAreaFixUpTable() const
Icecream02_Factory_Reset(WORLDINFO*)
Icecream02_Factory_Update(WORLDINFO*)
LegoCityGame::GetLevelFixUpTable() const
LegoCityLevels::GetDistrict(eLegoCityLevelID)
LegoCityLevels::GetNoOfLevelsInDistrict(eDistrictID)
LegoCityLevels::GetCollectedBricksForDistrict(eDistrictID, int*, int*)
LegoCityLevels::IsCutsceneLevel(LevelContainer const&)
LegoCityLevels::ShouldPseudoActivateOnVisibility(StreamingLevel*)
LegoCityLevels::AssignAreaIndex(AREADATA*)
LegoCityLevels::GetCityLevelFromAreaIndex(int)
Fire_Station_Boathouse_Init(WORLDINFO*)
Fire_Station_Boathouse_Exit(WORLDINFO*)
CityLoadScreenParser::PK_BeginLoadingScreen(nufpar_s*)
CityLoadScreens::AddLoadingScreen(char const*)
CityLoadScreenParser::PK_EndLoadingScreen(nufpar_s*)
CityLoadScreenParser::PK_AddStoryUsage(nufpar_s*)
CityLoadScreens::AddStoryUsage(int, int, int, int)
CityLoadScreenParser::PK_IncludeInRandomSelection(nufpar_s*)
CityLoadScreens::AddToRandomSelectionIndexes(int, int, int, int)
CityLoadScreens::CityLoadScreens()
CityLoadScreens::~CityLoadScreens()
CityLoadScreens::LoadFromFile(char const*)
CityLoadScreens::GetLoadingScreenName(int, int, int, bool) const
CityLoadScreen::IsValidForStory(int, int, int) const
CityLoadScreen::IsValidForRandomSelection(int, int, int) const
CityLoadScreens::FindLoadingScreen(HashedKey const&) const
CityLoadScreen::Init(char const*)
CityLoadScreen::AddStoryUsage(int, int, int)
CityLoadScreen::SetRandomSelectionUsage(int, int, int)
CityLoadScreen::CityLoadScreen()
CityLoadScreen::~CityLoadScreen()
CityLoadScreenStoryUsage::CityLoadScreenStoryUsage()
CityLoadScreenStoryUsage::~CityLoadScreenStoryUsage()
NuVector<CityLoadScreen>::ReSize(unsigned int, bool)
NuVector<CityLoadScreen>::Reserve(unsigned int, bool)
CityLoadScreen::CityLoadScreen(CityLoadScreen const&)
NuVector<CityLoadScreenStoryUsage>::Reserve(unsigned int, bool)
NuVector<unsigned int>::Reserve(unsigned int, bool)
ConstructionSite01_Init(WORLDINFO*)
FireTrainingArea_Init(WORLDINFO*)
MineTunnel_Init(WORLDINFO*)
MineCavern_Init(WORLDINFO*)
MineCollisionListener::MineCollisionListener(WORLDINFO*, BlowUp*)
MineCavern_Update(WORLDINFO*)
MineCollisionListener::Update()
MineCavern_Destroy(WORLDINFO*)
MineCollisionListener::~MineCollisionListener()
MineCollisionListener::~MineCollisionListener()
MineCollisionListener::Collision(BodyPair*, Array<ContactPoint>&)
Museum01_Init(WORLDINFO*)
Museum01_Update(WORLDINFO*)
PoliceGarage_Init(WORLDINFO*)
PoliceGarage_Destroy(WORLDINFO*)
PoliceLobby_Init(WORLDINFO*)
PoliceBriefingRoom_Init(WORLDINFO*)
PoliceBriefingRoom_Reset(WORLDINFO*)
PoliceBriefingRoom_Destroy(WORLDINFO*)
PoliceLineUp_Init(WORLDINFO*)
PoliceLineUp_Reset(WORLDINFO*)
PoliceLineUp_Update(WORLDINFO*)
PrisonMainCells_Init(WORLDINFO*)
RexCell_Update(WORLDINFO*)
GetNamedMechCharacterBase(AIManager*, char const*)
MoonBaseBoss::BattleChar::BattleChar()
MoonBaseBoss::BattleChar::~BattleChar()
MoonBaseBoss::BattleChar::SetNames(char const*, char const*, bool)
MoonBaseBoss::BattleChar::AcquireBods(LevelContainer&)
MoonBaseBoss::BattleChar::IsValid() const
MoonBaseBoss::BattleChar::GetPerson() const
MoonBaseBoss::BattleChar::GetRide() const
MoonBaseBoss::BattleChar::GetBod(MoonBaseBoss::BattleChar::eBod) const
MoonBaseBoss::BattleChar::Mount(bool)
MoonBaseBoss::BattleChar::SetRiderAnim(int)
MoonBaseBoss::CanisterTracker::Canister::Canister()
MoonBaseBoss::CanisterTracker::Canister::Acquire(LevelContainer&, char const*, int, int)
MoonBaseBoss::CanisterTracker::Canister::Reset()
MoonBaseBoss::CanisterTracker::CanisterTracker()
MoonBaseBoss::CanisterTracker::~CanisterTracker()
MoonBaseBoss::CanisterTracker::DestroyCanister(int)
MoonBaseBoss::CanisterTracker::IsValidCanisterIndex(int)
MoonBaseBoss::CanisterTracker::GetCanister(int)
MoonBaseBoss::CanisterTracker::GetNumDestroyed()
MoonBaseBoss::CanisterTracker::Reset()
MoonBaseBoss::CanisterTracker::AcquireObjects(LevelContainer&)
MoonBaseBoss::CanisterTracker::GetNextTargetCanisterIndex()
MoonBaseBoss::BattleAddOn::BattleAddOn()
MoonBaseBoss::BattleAddOn::~BattleAddOn()
non-virtual thunk to MoonBaseBoss::BattleAddOn::~BattleAddOn()
non-virtual thunk to MoonBaseBoss::BattleAddOn::~BattleAddOn()
MoonBaseBoss::BattleAddOn::~BattleAddOn()
non-virtual thunk to MoonBaseBoss::BattleAddOn::~BattleAddOn()
non-virtual thunk to MoonBaseBoss::BattleAddOn::~BattleAddOn()
MoonBaseBoss::BattleAddOn::GetPlayerChar(MechCharacter*)
MoonBaseBoss::BattleAddOn::FindBattleChar(MechCharacter*)
MoonBaseBoss::BattleAddOn::GetPlayerBattleChar(int)
MoonBaseBoss::BattleAddOn::GetBattleChar(MoonBaseBoss::eBattleChar)
MoonBaseBoss::BattleAddOn::GetCanisterTracker()
MoonBaseBoss::BattleAddOn::OnAdded()
MoonBaseBoss::BattleAddOn::Prepare(LevelContainer&)
MoonBaseBoss::BattleAddOn::SetupChar(MoonBaseBoss::eBattleChar)
MoonBaseBoss::BattleAddOn::OnRemoved()
MoonBaseBoss::BattleAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::BattleAddOn::Complete()
non-virtual thunk to MoonBaseBoss::BattleAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::BattleAddOn::Process(float)
MoonBaseBoss::BattleAddOn::TwirlBlur::Update(bool)
MoonBaseBoss::BattleAddOn::RecoveryCamera::Update(LevelContainer*, float)
MoonBaseBoss::BattleAddOn::GetPlayerHomePosition(int)
MoonBaseBoss::BattleAddOn::UpdateTakeoverScreen()
MoonBaseBoss::BattleAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to MoonBaseBoss::BattleAddOn::EventNotify(Event&, NuEventData&)
MoonBaseBoss::BattleAddOn::GetStateTime() const
MoonBaseBoss::BattleAddOn::SetState(int)
MoonBaseBoss::BattleAddOn::ResetStateTime()
MoonBaseBoss::BattleAddOn::GetState() const
MoonBaseBoss::BattleAddOn::GetFrom(LevelContainer*)
MoonBaseBoss::BattleAddOn::GetBossHomePosition()
MoonBaseBoss::BattleAddOn::Initiate(LevelContainer*)
MoonBaseBoss::BattleAddOn::SetTakeoverChar(MechCharacter*)
MoonBaseBoss::BattleAddOn::IsValid() const
MoonBaseBoss::BattleAddOn::SetBlur(bool)
MoonBaseBoss::BattleAddOn::CompleteEvent::Fire(NuEventData const&)
MoonBaseBoss::BattleAddOn::TriggerVFX(char const*, LevelContainer*, VuVec const&, float)
MoonBaseBoss::BattleAddOn::TwirlBlur::TwirlBlur()
MoonBaseBoss::BattleAddOn::TwirlBlur::~TwirlBlur()
MoonBaseBoss::BattleAddOn::TwirlBlur::Clear()
MoonBaseBoss::BattleAddOn::RecoveryCamera::RecoveryCamera()
MoonBaseBoss::BattleAddOn::RecoveryCamera::~RecoveryCamera()
MoonBaseBoss::BattleAddOn::RecoveryCamera::Activate(MechCharacter*, VuVec const&, VuVec const&)
MoonBaseBoss::BattleAddOn::RecoveryCamera::SetActive(bool)
MoonBaseBoss::BattleAddOn::GetSideInfo()
MoonBaseBoss::BattleAddOn::EndRecoveryCamera()
MoonBaseBoss::BattleAddOn::GetRecoveryCamera()
MoonBaseBoss::BattleAddOn::InitScriptFns()
MoonBaseBoss::LevelInitFn(WORLDINFO*)
MoonBaseBoss::LevelResetFn(WORLDINFO*)
MoonBaseBoss::LevelUpdateFn(WORLDINFO*)
MoonBaseBoss::LevelEndingFn(WORLDINFO*)
MoonBaseBoss::LevelDestroyFn(WORLDINFO*)
MoonBaseBoss::BattleSideInfo::BattleSideInfo()
MoonBaseBoss::BattleSideInfo::~BattleSideInfo()
MoonBaseBoss::BattleSideInfo::GetSideForCurrentActivity(MoonBaseBoss::BattleChar&, MoonBaseBoss::BattleChar&)
MoonBaseBoss::BattleSideInfo::EnsureValid(int)
MoonBaseBoss::BattleAddOn::CompleteEvent::~CompleteEvent()
MoonBaseBoss::RadialRespawnHelper::~RadialRespawnHelper()
MoonBaseBoss::RadialRespawnHelper::CheckSafePosition(VuVec&)
non-virtual thunk to MoonBaseBoss::RadialRespawnHelper::~RadialRespawnHelper()
non-virtual thunk to MoonBaseBoss::RadialRespawnHelper::~RadialRespawnHelper()
SAction_Function::~SAction_Function()
SAction_Function::GetName() const
SAction_Function::GetInputs(SCmdParams&) const
SAction_Function::GetOutputs(SCmdParams&) const
SAction_Function::Exec(ScriptContext&)
GenericEventCreator<MoonBaseBoss::BattleAddOn::CompleteEvent>::Create(ScriptContext&, ScriptScope&)
ReadDVVec3(VuVec&, dvVec3X32)
MoonBaseBoss::IsCharAtEndOfAction(MechCharacter*)
MoonBaseBoss::ButtonMashAddOn::GetFrom(MechCharacter*)
MoonBaseBoss::ButtonMashAddOn::ButtonMashAddOn()
MoonBaseBoss::ButtonMashAddOn::~ButtonMashAddOn()
non-virtual thunk to MoonBaseBoss::ButtonMashAddOn::~ButtonMashAddOn()
MoonBaseBoss::ButtonMashAddOn::~ButtonMashAddOn()
non-virtual thunk to MoonBaseBoss::ButtonMashAddOn::~ButtonMashAddOn()
MoonBaseBoss::ButtonMashAddOn::OnAdded()
MoonBaseBoss::ButtonMashAddOn::GetHud()
MoonBaseBoss::ButtonMashAddOn::OnRemoved()
MoonBaseBoss::ButtonMashAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::ButtonMashAddOn::Update(float)
non-virtual thunk to MoonBaseBoss::ButtonMashAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::ButtonMashAddOn::GetCompletion()
MoonBaseBoss::ButtonMashAddOn::Won()
MoonBaseBoss::ButtonMashAddOn::Failed()
MoonBaseBoss::ButtonMashAddOn::SetCompletion(float)
MoonBaseBoss::ButtonMashAddOn::SetAllowComplete(bool)
MoonBaseBoss::ButtonMashAddOn::ApplyBoost(float, float, float)
MoonBaseBoss::ButtonMashAddOn::ApplyDecay(float, float, float)
MoonBaseBoss::TwirlControlAddOn::GetFrom(MechCharacter*)
MoonBaseBoss::TwirlControlAddOn::TwirlControlAddOn(MechCharacter*, MechCharacter*, int)
MoonBaseBoss::TwirlControlAddOn::~TwirlControlAddOn()
non-virtual thunk to MoonBaseBoss::TwirlControlAddOn::~TwirlControlAddOn()
MoonBaseBoss::TwirlControlAddOn::~TwirlControlAddOn()
non-virtual thunk to MoonBaseBoss::TwirlControlAddOn::~TwirlControlAddOn()
MoonBaseBoss::TwirlControlAddOn::GetPlayerChar()
MoonBaseBoss::TwirlControlAddOn::OnAdded()
MoonBaseBoss::TwirlControlAddOn::EnslaveCharacter(MechCharacter*, bool)
MoonBaseBoss::TwirlControlAddOn::GetBattle()
MoonBaseBoss::TwirlControlAddOn::SetSlaveAction(MechCharacter*, int)
MoonBaseBoss::TwirlControlAddOn::OnRemoved()
MoonBaseBoss::TwirlControlAddOn::WasSuccessful() const
MoonBaseBoss::TwirlControlAddOn::Abort()
MoonBaseBoss::TwirlControlAddOn::GetSlaveContext(MechCharacter*)
MoonBaseBoss::TwirlControlAddOn::SlaveContext::Abort()
MoonBaseBoss::TwirlControlAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::TwirlControlAddOn::Process(float)
non-virtual thunk to MoonBaseBoss::TwirlControlAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::TwirlControlAddOn::SetUp()
MoonBaseBoss::TwirlControlAddOn::SetSlaveAction(int)
MoonBaseBoss::TwirlControlAddOn::UpdatePickUpCam(float)
MoonBaseBoss::TwirlControlAddOn::LetGo(MoonBaseBoss::TwirlControlAddOn::eReleaseType)
MoonBaseBoss::TwirlControlAddOn::LetGoInternal()
MoonBaseBoss::TwirlControlAddOn::SetPickupCamStage(MoonBaseBoss::TwirlControlAddOn::ePickupCamStage)
MoonBaseBoss::TwirlControlAddOn::Init()
MechContext* MechContextConstructor<MoonBaseBoss::TwirlControlAddOn::SlaveContext>(MechCharacter&)
MoonBaseBoss::TwirlControlAddOn::Commence(MechCharacter*, LevelContainer&, int, bool)
MoonBaseBoss::TwirlControlAddOn::Complete()
MoonBaseBoss::TwirlControlAddOn::VictimAddOn::GetFrom(MechCharacter*)
MoonBaseBoss::TwirlControlAddOn::VictimAddOn::VictimAddOn(int, MechCharacter*)
MoonBaseBoss::TwirlControlAddOn::VictimAddOn::GetAttacker()
MoonBaseBoss::TwirlControlAddOn::VictimAddOn::OnAdded()
MoonBaseBoss::TwirlControlAddOn::VictimAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MoonBaseBoss::TwirlControlAddOn::VictimAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::TwirlControlAddOn::SlaveContext::SlaveContext(MechCharacter&)
MoonBaseBoss::TwirlControlAddOn::SlaveContext::~SlaveContext()
MoonBaseBoss::TwirlControlAddOn::SlaveContext::~SlaveContext()
MoonBaseBoss::TwirlControlAddOn::SlaveContext::OnProcess(LevelContainer*, float)
MoonBaseBoss::TwirlControlAddOn::SlaveContext::OnEnter(LevelContainer*)
MoonBaseBoss::TwirlControlAddOn::SlaveContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
MoonBaseBoss::TwirlControlAddOn::SlaveContext::OnLeave()
MoonBaseBoss::TwirlControlAddOn::SlaveContext::AllowEnter(int, MechContext*)
MoonBaseBoss::TwirlControlAddOn::SlaveContext::AllowLeave(int, MechContext*)
MoonBaseBoss::TwirlControlAddOn::SlaveContext::IsVictim() const
MoonBaseBoss::TwirlControlAddOn::SlaveContext::GetController()
MoonBaseBoss::GrappleControlAddOn::GetFrom(MechCharacter*)
MoonBaseBoss::GrappleControlAddOn::GrappleControlAddOn(MechCharacter*, MechCharacter*, MoonBaseBoss::BattleSideInfo::eSide)
MoonBaseBoss::GrappleControlAddOn::~GrappleControlAddOn()
non-virtual thunk to MoonBaseBoss::GrappleControlAddOn::~GrappleControlAddOn()
MoonBaseBoss::GrappleControlAddOn::~GrappleControlAddOn()
non-virtual thunk to MoonBaseBoss::GrappleControlAddOn::~GrappleControlAddOn()
MoonBaseBoss::GrappleControlAddOn::OnAdded()
MoonBaseBoss::GrappleControlAddOn::EnslaveCharacter(MechCharacter*, bool)
MoonBaseBoss::GrappleControlAddOn::GetBattle()
MoonBaseBoss::GrappleControlAddOn::SetUp()
MoonBaseBoss::GrappleControlAddOn::OnRemoved()
MoonBaseBoss::GrappleControlAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::GrappleControlAddOn::Process(float)
MoonBaseBoss::GrappleControlAddOn::UpdateCamera(float)
non-virtual thunk to MoonBaseBoss::GrappleControlAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::GrappleControlAddOn::GetState()
MoonBaseBoss::GrappleControlAddOn::Complete(bool)
MoonBaseBoss::GrappleControlAddOn::SetGrappleAnimProgress(float)
MoonBaseBoss::GrappleControlAddOn::SetSlaveAction(int)
MoonBaseBoss::GrappleControlAddOn::GetSlaveContext(MechCharacter*)
MoonBaseBoss::GrappleControlAddOn::MoveCharactersForWinTransition()
MoonBaseBoss::GrappleControlAddOn::Disconnect()
MoonBaseBoss::GrappleControlAddOn::PerformWinTransition()
MoonBaseBoss::GrappleControlAddOn::GetSnapPositions(VuVec&, VuVec&, bool)
MoonBaseBoss::GrappleControlAddOn::GetVictim() const
MoonBaseBoss::GrappleControlAddOn::GetPlayer() const
MoonBaseBoss::GrappleControlAddOn::WasSuccessful() const
MoonBaseBoss::GrappleControlAddOn::SetSlaveAction(MechCharacter*, int)
MoonBaseBoss::GrappleControlAddOn::Commence(MechCharacter*, LevelContainer&)
MoonBaseBoss::GrappleControlAddOn::Init()
MechContext* MechContextConstructor<MoonBaseBoss::GrappleControlAddOn::SlaveContext>(MechCharacter&)
MoonBaseBoss::GrappleControlAddOn::SlaveContext::SlaveContext(MechCharacter&)
MoonBaseBoss::GrappleControlAddOn::SlaveContext::~SlaveContext()
MoonBaseBoss::GrappleControlAddOn::SlaveContext::~SlaveContext()
MoonBaseBoss::GrappleControlAddOn::SlaveContext::OnProcess(LevelContainer*, float)
MoonBaseBoss::GrappleControlAddOn::SlaveContext::GetController()
MoonBaseBoss::GrappleControlAddOn::SlaveContext::OnEnter(LevelContainer*)
MoonBaseBoss::GrappleControlAddOn::SlaveContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
MoonBaseBoss::GrappleControlAddOn::SlaveContext::OnLeave()
MoonBaseBoss::GrappleControlAddOn::SlaveContext::AllowEnter(int, MechContext*)
MoonBaseBoss::GrappleControlAddOn::SlaveContext::AllowLeave(int, MechContext*)
MoonBaseBoss::GrappleControlAddOn::SlaveContext::IsVictim() const
MoonBaseBoss::GrappleControlAddOn::SlaveContext::Abort()
MoonBaseBoss::GrappleControlAddOn::SlaveAITask::SlaveAITask(MoonBaseBoss::GrappleControlAddOn*)
MoonBaseBoss::GrappleControlAddOn::SlaveAITask::~SlaveAITask()
MoonBaseBoss::GrappleControlAddOn::SlaveAITask::~SlaveAITask()
MoonBaseBoss::GrappleControlAddOn::SlaveAITask::Process(Brain&, float const&)
MoonBaseBoss::PlayerRootAITask::PlayerRootAITask()
MoonBaseBoss::PlayerRootAITask::~PlayerRootAITask()
MoonBaseBoss::PlayerRootAITask::~PlayerRootAITask()
MoonBaseBoss::PlayerRootAITask::Process(Brain&, float const&)
MoonBaseBoss::PlayerRootAITask::CommenceTwirl(MoonBaseBoss::BattleAddOn*, MechCharacter*)
MoonBaseBoss::TwirlControlAddOn::VictimAddOn::~VictimAddOn()
MoonBaseBoss::TwirlControlAddOn::VictimAddOn::~VictimAddOn()
non-virtual thunk to MoonBaseBoss::TwirlControlAddOn::VictimAddOn::~VictimAddOn()
non-virtual thunk to MoonBaseBoss::TwirlControlAddOn::VictimAddOn::~VictimAddOn()
LegoContextHandlerBase<MoonBaseBoss::TwirlControlAddOn::SlaveContext>::GetInstanceId() const
LegoContextHandlerBase<MoonBaseBoss::GrappleControlAddOn::SlaveContext>::GetInstanceId() const
AddOnEventData::~AddOnEventData()
LegoContextHandlerBase<MoonBaseBoss::TwirlControlAddOn::SlaveContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<MoonBaseBoss::GrappleControlAddOn::SlaveContext>::~LegoContextHandlerBase()
MoonBaseBoss::RexBrainParasite::GetFrom(MechCharacter*)
MoonBaseBoss::RexBrainParasite::RexBrainParasite()
MoonBaseBoss::RexBrainParasite::OnAdded()
MoonBaseBoss::ProximityWhipAddOn::SetActiveFor(MechCharacter*, bool, bool)
MoonBaseBoss::RexBrainParasite::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::RexBrainParasite::Infect()
non-virtual thunk to MoonBaseBoss::RexBrainParasite::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::RexBrainParasite::Implant(MechCharacter*)
MoonBaseBoss::RexBrainParasite::DestroyFrom(MechCharacter*)
MoonBaseBoss::RexBrainParasite::SetHeartSilver(MechCharacter*, bool)
MoonBaseBoss::RexBrainParasite::GetChestPosition(MechCharacter*)
MoonBaseBoss::MalfunctionAnimAddOn::GetFrom(MechCharacter*)
MoonBaseBoss::MalfunctionAnimAddOn::MalfunctionAnimAddOn()
MoonBaseBoss::MalfunctionAnimAddOn::OnAdded()
MoonBaseBoss::MalfunctionAnimAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MoonBaseBoss::MalfunctionAnimAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::MalfunctionAnimAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to MoonBaseBoss::MalfunctionAnimAddOn::EventNotify(Event&, NuEventData&)
MoonBaseBoss::MalfunctionAnimAddOn::IsInContainer(LevelContainer&)
non-virtual thunk to MoonBaseBoss::MalfunctionAnimAddOn::IsInContainer(LevelContainer&)
MoonBaseBoss::MalfunctionAnimAddOn::ApplyTo(MechCharacter*)
MoonBaseBoss::PotentialBarrelVictimAddOn::GetFrom(MechCharacter*)
MoonBaseBoss::PotentialBarrelVictimAddOn::PotentialBarrelVictimAddOn()
MoonBaseBoss::PotentialBarrelVictimAddOn::~PotentialBarrelVictimAddOn()
non-virtual thunk to MoonBaseBoss::PotentialBarrelVictimAddOn::~PotentialBarrelVictimAddOn()
non-virtual thunk to MoonBaseBoss::PotentialBarrelVictimAddOn::~PotentialBarrelVictimAddOn()
MoonBaseBoss::PotentialBarrelVictimAddOn::~PotentialBarrelVictimAddOn()
non-virtual thunk to MoonBaseBoss::PotentialBarrelVictimAddOn::~PotentialBarrelVictimAddOn()
non-virtual thunk to MoonBaseBoss::PotentialBarrelVictimAddOn::~PotentialBarrelVictimAddOn()
MoonBaseBoss::PotentialBarrelVictimAddOn::OnAdded()
MoonBaseBoss::PotentialBarrelVictimAddOn::OnRemoved()
MoonBaseBoss::PotentialBarrelVictimAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MoonBaseBoss::PotentialBarrelVictimAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::PotentialBarrelVictimAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to MoonBaseBoss::PotentialBarrelVictimAddOn::EventNotify(Event&, NuEventData&)
MoonBaseBoss::PotentialBarrelVictimAddOn::IsInContainer(LevelContainer&)
non-virtual thunk to MoonBaseBoss::PotentialBarrelVictimAddOn::IsInContainer(LevelContainer&)
MoonBaseBoss::RexPunchableAddOn::GetFrom(MechCharacter*)
MoonBaseBoss::RexPunchableAddOn::RexPunchableAddOn()
MoonBaseBoss::RexPunchableAddOn::~RexPunchableAddOn()
non-virtual thunk to MoonBaseBoss::RexPunchableAddOn::~RexPunchableAddOn()
non-virtual thunk to MoonBaseBoss::RexPunchableAddOn::~RexPunchableAddOn()
MoonBaseBoss::RexPunchableAddOn::~RexPunchableAddOn()
non-virtual thunk to MoonBaseBoss::RexPunchableAddOn::~RexPunchableAddOn()
non-virtual thunk to MoonBaseBoss::RexPunchableAddOn::~RexPunchableAddOn()
MoonBaseBoss::RexPunchableAddOn::OnAdded()
MoonBaseBoss::RexPunchableAddOn::OnRemoved()
MoonBaseBoss::RexPunchableAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::ProximityWhipAddOn::GetFrom(MechCharacter*)
non-virtual thunk to MoonBaseBoss::RexPunchableAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::RexPunchableAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to MoonBaseBoss::RexPunchableAddOn::EventNotify(Event&, NuEventData&)
MoonBaseBoss::RexPunchableAddOn::IsInContainer(LevelContainer&)
non-virtual thunk to MoonBaseBoss::RexPunchableAddOn::IsInContainer(LevelContainer&)
MoonBaseBoss::RexAITasks::GoHomeTask::GoHomeTask(MechCharacter*, VuVec const&, float)
MoonBaseBoss::RexAITasks::GoHomeTask::Activate()
MoonBaseBoss::RexAITasks::GoHomeTask::Process(Brain&, float const&)
MoonBaseBoss::RexAITasks::GuardAITask::GetModeForCurrentBattleState(LevelContainer*)
MoonBaseBoss::RexAITasks::GuardAITask::GuardAITask(MechCharacter*, MoonBaseBoss::RexAITasks::GuardAITask::eMode)
MoonBaseBoss::RexAITasks::GuardAITask::~GuardAITask()
MoonBaseBoss::RexAITasks::GuardAITask::~GuardAITask()
MoonBaseBoss::RexAITasks::GuardAITask::Activate()
MoonBaseBoss::RexAITasks::GuardAITask::SetTrackPlayer(bool)
MoonBaseBoss::RexAITasks::GuardAITask::Process(Brain&, float const&)
MoonBaseBoss::RexAITasks::GuardAITask::UpdateFocusPlayer(float)
MoonBaseBoss::RexAITasks::GuardAITask::UpdateHeadingTowardsPlayer(MechCharacter*, float)
MoonBaseBoss::RexAITasks::GuardAITask::GetPlayerChar()
MoonBaseBoss::RexAITasks::GuardAITask::RoarTask::RoarTask(MoonBaseBoss::RexAITasks::GuardAITask*)
MoonBaseBoss::RexAITasks::GuardAITask::RoarTask::Activate()
MoonBaseBoss::RexAITasks::GuardAITask::RoarTask::Terminate(Brain&)
MoonBaseBoss::RexAITasks::GuardAITask::RoarTask::Process(Brain&, float const&)
MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext::SetTargetContext(int)
MoonBaseBoss::RexAITasks::GuardAITask::StompTask::StompTask(MoonBaseBoss::RexAITasks::GuardAITask*)
MoonBaseBoss::RexAITasks::GuardAITask::StompTask::Activate()
MoonBaseBoss::RexAITasks::GuardAITask::StompTask::Terminate(Brain&)
MoonBaseBoss::RexAITasks::GuardAITask::StompTask::Process(Brain&, float const&)
MoonBaseBoss::StompWaveAddOn::GetFrom(MechCharacter*)
MoonBaseBoss::StompWaveAddOn::AddShockWave()
MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext::BuildUpContext(MechCharacter&)
MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext::~BuildUpContext()
MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext::~BuildUpContext()
MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext::OnProcess(LevelContainer*, float)
MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext::OnEnter(LevelContainer*)
MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext::OnLeave(int)
MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext::Init()
MechContext* MechContextConstructor<MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext>(MechCharacter&)
MoonBaseBoss::RexAITasks::MalfunctionTask::MalfunctionTask(MechCharacter*)
MoonBaseBoss::RexAITasks::MalfunctionTask::~MalfunctionTask()
non-virtual thunk to MoonBaseBoss::RexAITasks::MalfunctionTask::~MalfunctionTask()
MoonBaseBoss::RexAITasks::MalfunctionTask::~MalfunctionTask()
non-virtual thunk to MoonBaseBoss::RexAITasks::MalfunctionTask::~MalfunctionTask()
MoonBaseBoss::RexAITasks::MalfunctionTask::Activate()
MoonBaseBoss::RexAITasks::MalfunctionTask::Process(Brain&, float const&)
MoonBaseBoss::RexAITasks::MalfunctionTask::EventNotify(Event&, NuEventData&)
non-virtual thunk to MoonBaseBoss::RexAITasks::MalfunctionTask::EventNotify(Event&, NuEventData&)
MoonBaseBoss::RexAITasks::MalfunctionTask::IsInContainer(LevelContainer&)
non-virtual thunk to MoonBaseBoss::RexAITasks::MalfunctionTask::IsInContainer(LevelContainer&)
MoonBaseBoss::RexAITasks::NeedToRechargeTask::NeedToRechargeTask(MechCharacter*)
MoonBaseBoss::RexAITasks::NeedToRechargeTask::Activate()
MoonBaseBoss::RexAITasks::NeedToRechargeTask::Process(Brain&, float const&)
MoonBaseBoss::RexAITasks::RecoveryTask::RecoveryTask(MechCharacter*)
MoonBaseBoss::RexAITasks::RecoveryTask::~RecoveryTask()
non-virtual thunk to MoonBaseBoss::RexAITasks::RecoveryTask::~RecoveryTask()
MoonBaseBoss::RexAITasks::RecoveryTask::~RecoveryTask()
non-virtual thunk to MoonBaseBoss::RexAITasks::RecoveryTask::~RecoveryTask()
MoonBaseBoss::RexAITasks::RecoveryTask::Activate()
MoonBaseBoss::RexAITasks::RecoveryTask::Terminate(Brain&)
MoonBaseBoss::RexAITasks::RecoveryTask::Process(Brain&, float const&)
MoonBaseBoss::RexAITasks::RecoveryTask::GetSlaveContext()
MoonBaseBoss::HotSpotAddOn::GetFrom(MechCharacter*)
MoonBaseBoss::HotSpotAddOn::Dismiss()
MoonBaseBoss::RexAITasks::RecoveryTask::EventNotify(Event&, NuEventData&)
non-virtual thunk to MoonBaseBoss::RexAITasks::RecoveryTask::EventNotify(Event&, NuEventData&)
MoonBaseBoss::RexAITasks::RecoveryTask::IsInContainer(LevelContainer&)
non-virtual thunk to MoonBaseBoss::RexAITasks::RecoveryTask::IsInContainer(LevelContainer&)
MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext::SlaveContext(MechCharacter&)
MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext::~SlaveContext()
MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext::~SlaveContext()
MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext::OnProcess(LevelContainer*, float)
MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext::OnEnter(LevelContainer*)
MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext::OnLeave(int)
MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext::Init()
MechContext* MechContextConstructor<MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext>(MechCharacter&)
MoonBaseBoss::ProximityWhipAddOn::ProximityWhipAddOn()
MoonBaseBoss::ProximityWhipAddOn::~ProximityWhipAddOn()
non-virtual thunk to MoonBaseBoss::ProximityWhipAddOn::~ProximityWhipAddOn()
MoonBaseBoss::ProximityWhipAddOn::~ProximityWhipAddOn()
non-virtual thunk to MoonBaseBoss::ProximityWhipAddOn::~ProximityWhipAddOn()
MoonBaseBoss::ProximityWhipAddOn::SetActive(bool)
MoonBaseBoss::ProximityWhipAddOn::IsActive() const
MoonBaseBoss::ProximityWhipAddOn::OnAdded()
MoonBaseBoss::ProximityWhipAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::ProximityWhipAddOn::PlayerProximityCheck(float)
non-virtual thunk to MoonBaseBoss::ProximityWhipAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::ProximityWhipAddOn::WhipContext::WhipContext(MechCharacter&)
MoonBaseBoss::ProximityWhipAddOn::WhipContext::~WhipContext()
MoonBaseBoss::ProximityWhipAddOn::WhipContext::~WhipContext()
MoonBaseBoss::ProximityWhipAddOn::WhipContext::CheckPlayerHit(MechCharacter*)
MoonBaseBoss::ProximityWhipAddOn::WhipContext::OnProcess(LevelContainer*, float)
MoonBaseBoss::ProximityWhipAddOn::WhipContext::AllowEnter(int, MechContext*)
MoonBaseBoss::ProximityWhipAddOn::WhipContext::AllowLeave(int, MechContext*)
MoonBaseBoss::ProximityWhipAddOn::WhipContext::OnEnter(LevelContainer*)
MoonBaseBoss::ProximityWhipAddOn::WhipContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
MoonBaseBoss::ProximityWhipAddOn::WhipContext::OnLeave()
MoonBaseBoss::ProximityWhipAddOn::WhipContext::Init()
MechContext* MechContextConstructor<MoonBaseBoss::ProximityWhipAddOn::WhipContext>(MechCharacter&)
MoonBaseBoss::HotSpotAddOn::HotSpotTriggerEventData::HotSpotTriggerEventData(MoonBaseBoss::HotSpotAddOn&, MechCharacter*)
MoonBaseBoss::HotSpotAddOn::HotSpotAddOn(VuVec const&, float)
MoonBaseBoss::HotSpotAddOn::~HotSpotAddOn()
non-virtual thunk to MoonBaseBoss::HotSpotAddOn::~HotSpotAddOn()
MoonBaseBoss::HotSpotAddOn::~HotSpotAddOn()
non-virtual thunk to MoonBaseBoss::HotSpotAddOn::~HotSpotAddOn()
MoonBaseBoss::HotSpotAddOn::OnAdded()
MoonBaseBoss::HotSpotAddOn::AcquireHotSpotVfx()
MoonBaseBoss::HotSpotAddOn::GetHotSpotTransform(VuMtx&)
MoonBaseBoss::HotSpotAddOn::GetHotSpotPosition()
MoonBaseBoss::HotSpotAddOn::OnRemoved()
MoonBaseBoss::HotSpotAddOn::ReleaseHotSpotVfx()
MoonBaseBoss::HotSpotAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MoonBaseBoss::HotSpotAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::HotSpotAddOn::CheckPlayerUse(int)
MoonBaseBoss::HotSpotAddOn::Update(float)
MoonBaseBoss::StompWaveAddOn::StompWaveAddOn()
MoonBaseBoss::StompWaveAddOn::~StompWaveAddOn()
non-virtual thunk to MoonBaseBoss::StompWaveAddOn::~StompWaveAddOn()
non-virtual thunk to MoonBaseBoss::StompWaveAddOn::~StompWaveAddOn()
MoonBaseBoss::StompWaveAddOn::~StompWaveAddOn()
non-virtual thunk to MoonBaseBoss::StompWaveAddOn::~StompWaveAddOn()
non-virtual thunk to MoonBaseBoss::StompWaveAddOn::~StompWaveAddOn()
MoonBaseBoss::StompWaveAddOn::OnAdded()
MoonBaseBoss::StompWaveAddOn::OnRemoved()
MoonBaseBoss::StompWaveAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MoonBaseBoss::StompWaveAddOn::OnHook(unsigned char, HookArgs*)
MoonBaseBoss::StompWaveAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to MoonBaseBoss::StompWaveAddOn::EventNotify(Event&, NuEventData&)
MoonBaseBoss::StompWaveAddOn::IsInContainer(LevelContainer&)
non-virtual thunk to MoonBaseBoss::StompWaveAddOn::IsInContainer(LevelContainer&)
MoonBaseBoss::StompWaveAddOn::CreateWaveInstance()
MoonBaseBoss::RexBrainParasite::~RexBrainParasite()
MoonBaseBoss::RexBrainParasite::~RexBrainParasite()
non-virtual thunk to MoonBaseBoss::RexBrainParasite::~RexBrainParasite()
non-virtual thunk to MoonBaseBoss::RexBrainParasite::~RexBrainParasite()
MoonBaseBoss::MalfunctionAnimAddOn::~MalfunctionAnimAddOn()
MoonBaseBoss::MalfunctionAnimAddOn::~MalfunctionAnimAddOn()
non-virtual thunk to MoonBaseBoss::MalfunctionAnimAddOn::~MalfunctionAnimAddOn()
non-virtual thunk to MoonBaseBoss::MalfunctionAnimAddOn::~MalfunctionAnimAddOn()
non-virtual thunk to MoonBaseBoss::MalfunctionAnimAddOn::~MalfunctionAnimAddOn()
non-virtual thunk to MoonBaseBoss::MalfunctionAnimAddOn::~MalfunctionAnimAddOn()
MoonBaseBoss::RexAITasks::GoHomeTask::~GoHomeTask()
MoonBaseBoss::RexAITasks::GuardAITask::RoarTask::~RoarTask()
MoonBaseBoss::RexAITasks::GuardAITask::StompTask::~StompTask()
LegoContextHandlerBase<MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext>::GetInstanceId() const
MoonBaseBoss::RexAITasks::NeedToRechargeTask::~NeedToRechargeTask()
LegoContextHandlerBase<MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext>::GetInstanceId() const
LegoContextHandlerBase<MoonBaseBoss::ProximityWhipAddOn::WhipContext>::GetInstanceId() const
MoonBaseBoss::HotSpotAddOn::HotSpotTriggerEventData::~HotSpotTriggerEventData()
MoonBaseBoss::RexZombieBrain::~RexZombieBrain()
MoonBaseBoss::RexZombieBrain::~RexZombieBrain()
MoonBaseBoss::RexZombieBrain::Process(Brain&, float const&)
MoonBaseBoss::StompShockWave::~StompShockWave()
MoonBaseBoss::StompShockWave::DamageGameObj(MechCharacter*, VuVec const&, float, float, int, float, float, bool)
LegoContextHandlerBase<MoonBaseBoss::RexAITasks::GuardAITask::BuildUpContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<MoonBaseBoss::RexAITasks::RecoveryTask::SlaveContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<MoonBaseBoss::ProximityWhipAddOn::WhipContext>::~LegoContextHandlerBase()
SnapHelpers::SnapPositionAddOn::GetFrom(MechCharacter*)
SnapHelpers::SnapPositionAddOn::SnapPositionAddOn()
SnapHelpers::SnapPositionAddOn::~SnapPositionAddOn()
non-virtual thunk to SnapHelpers::SnapPositionAddOn::~SnapPositionAddOn()
SnapHelpers::SnapPositionAddOn::~SnapPositionAddOn()
non-virtual thunk to SnapHelpers::SnapPositionAddOn::~SnapPositionAddOn()
SnapHelpers::SnapPositionAddOn::OnAdded()
SnapHelpers::SnapPositionAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to SnapHelpers::SnapPositionAddOn::OnHook(unsigned char, HookArgs*)
SnapHelpers::SnapPositionAddOn::Reset(VuVec const&, float)
SnapHelpers::SnapPositionAddOn::SnapTo(MechCharacter*, VuVec const&, float)
SnapHelpers::SnapHeadingAddOn::GetFrom(MechCharacter*)
SnapHelpers::SnapHeadingAddOn::SnapHeadingAddOn()
SnapHelpers::SnapHeadingAddOn::~SnapHeadingAddOn()
non-virtual thunk to SnapHelpers::SnapHeadingAddOn::~SnapHeadingAddOn()
SnapHelpers::SnapHeadingAddOn::~SnapHeadingAddOn()
non-virtual thunk to SnapHelpers::SnapHeadingAddOn::~SnapHeadingAddOn()
SnapHelpers::SnapHeadingAddOn::OnAdded()
SnapHelpers::SnapHeadingAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to SnapHelpers::SnapHeadingAddOn::OnHook(unsigned char, HookArgs*)
SnapHelpers::SnapHeadingAddOn::Reset(float, float)
SnapHelpers::SnapHeadingAddOn::SnapTo(MechCharacter*, float, float)
SnapHelpers::SnapPosition(MechCharacter*, VuVec const&, float)
SnapHelpers::SnapHeading(MechCharacter*, float, float)
SnapHelpers::SnapPositionAndHeading(MechCharacter*, VuVec const&, float, float)
SnapHelpers::IsSnapping(MechCharacter*)
RiderAnimAddOn::GetFrom(MechCharacter*)
RiderAnimAddOn::RiderAnimAddOn()
RiderAnimAddOn::~RiderAnimAddOn()
non-virtual thunk to RiderAnimAddOn::~RiderAnimAddOn()
non-virtual thunk to RiderAnimAddOn::~RiderAnimAddOn()
RiderAnimAddOn::~RiderAnimAddOn()
non-virtual thunk to RiderAnimAddOn::~RiderAnimAddOn()
non-virtual thunk to RiderAnimAddOn::~RiderAnimAddOn()
RiderAnimAddOn::OnAdded()
RiderAnimAddOn::ApplyAction()
RiderAnimAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to RiderAnimAddOn::OnHook(unsigned char, HookArgs*)
RiderAnimAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to RiderAnimAddOn::EventNotify(Event&, NuEventData&)
RiderAnimAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
RiderAnimAddOn::SetAction(int)
RespawnAssistAddOn::GetFrom(MechCharacter*)
RespawnAssistAddOn::RespawnAssistAddOn()
RespawnAssistAddOn::~RespawnAssistAddOn()
non-virtual thunk to RespawnAssistAddOn::~RespawnAssistAddOn()
RespawnAssistAddOn::~RespawnAssistAddOn()
non-virtual thunk to RespawnAssistAddOn::~RespawnAssistAddOn()
RespawnAssistAddOn::OnAdded()
RespawnAssistAddOn::OnRemoved()
RespawnAssistAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
RespawnAssistAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to RespawnAssistAddOn::OnHook(unsigned char, HookArgs*)
RespawnAssistAddOn::CheckSafePosition(VuVec&)
MoonBaseCameras::BattleCamHelper::BattleCamHelper()
MoonBaseCameras::BattleCamHelper::~BattleCamHelper()
MoonBaseCameras::BattleCamHelper::SetCharacters(MechCharacter*, MechCharacter*)
MoonBaseCameras::BattleCamHelper::RefreshCharacterPositions()
MoonBaseCameras::BattleCamHelper::SetCharacterPositions(VuVec const&, VuVec const&)
MoonBaseCameras::BattleCamHelper::SetOrbitOffsetProportion(float)
MoonBaseCameras::BattleCamHelper::SetOrbitDistance(float)
MoonBaseCameras::BattleCamHelper::SetOrbitAngle(float)
MoonBaseCameras::BattleCamHelper::RefreshResult()
MoonBaseCameras::BattleCamHelper::GetPosBetweenCharacters(float, float)
MoonBaseCameras::BattleCamHelper::GetResult() const
MoonBaseCameras::BattleCamHelper2::BattleCamHelper2()
MoonBaseCameras::BattleCamHelper2::~BattleCamHelper2()
MoonBaseCameras::BattleCamHelper2::SetCharacters(MechCharacter*, MechCharacter*)
MoonBaseCameras::BattleCamHelper2::RefreshCharacterPositions()
MoonBaseCameras::BattleCamHelper2::SetCharacterPositions(VuVec const&, VuVec const&)
MoonBaseCameras::BattleCamHelper2::SetOrbitOffsetProportion(float)
MoonBaseCameras::BattleCamHelper2::RefreshResult()
MoonBaseCameras::BattleCamHelper2::GetPosBetweenCharacters(float, float)
MoonBaseCameras::BattleCamHelper2::GetResult() const
MoonBaseCameras::BattleCamHelper2::SetSourceOffset(VuVec const&)
MoonBaseCameras::BattleCamHelper2::SetTargetOffset(VuVec const&)
MoonBaseCameras::BattleCamHelper2::GetSourceResult() const
MoonBaseCameras::BattleCamHelper2::GetTargetResult() const
MoonBaseCameras::GrappleCameraObject::GrappleCameraObject()
MoonBaseCameras::GrappleCameraObject::~GrappleCameraObject()
MoonBaseCameras::GrappleCameraObject::SetProgress(float)
MoonBaseCameras::GrappleCameraObject::Win()
MoonBaseCameras::GrappleCameraObject::GetProgress()
MoonBaseCameras::GrappleCameraObject::SetSide(int)
MoonBaseCameras::GrappleCameraObject::SetInUse(bool)
MoonBaseCameras::GrappleCameraObject::UpdateProgress(float)
MoonBaseCameras::GrappleCameraObject::Reset()
MoonBaseCameras::GrappleCameraObject::GetPlayerChar()
MoonBaseCameras::GrappleCameraObject::SetPlayerChar(MechCharacter*)
MoonBaseCameras::GrappleCameraObject::Update(LevelContainer*, float)
IDropInPropHandler::IDropInPropHandler(DropInPropDetectionPhantom*)
DropInPropDetectionPhantom::AddDropInPropHandler(IDropInPropHandler const*)
IDropInPropHandler::~IDropInPropHandler()
DropInPropDetectionPhantom::RemoveDropInPropHandler(IDropInPropHandler const*)
IDropInPropHandler::~IDropInPropHandler()
IDropInPropHandler::NotifyPhantomDestroyed(DropInPropDetectionPhantom*)
DropInPropDetectionPhantom::DropInPropDetectionPhantom(float, float)
DropInPropDetectionPhantom::UpdateExtents()
DropInPropDetectionPhantom::~DropInPropDetectionPhantom()
DropInPropDetectionPhantom::~DropInPropDetectionPhantom()
DropInPropDetectionPhantom::AddToDynoScene(LevelContainer*)
DropInPropDetectionPhantom::RemoveFromDynoScene()
DropInPropDetectionPhantom::BeginCollision(Entity*)
NuVector<IDropInPropHandler const*>::Reserve(unsigned int, bool)
FallSplatDropInSequence::FallSplatDropInSequence()
FallSplatDropInSequence::~FallSplatDropInSequence()
FallSplatDropInSequence::~FallSplatDropInSequence()
FallSplatDropInSequence::CalculatePriority(MechCharacter&, float)
FallSplatDropInSequence::IsType(HashedKey const&) const
FallSplatDropInSequence::Start(MechCharacter&)
FallSplatDropInSequence::ChangeState(FallSplatDropInSequence::FallSplatState)
FallSplatDropInSequence::Update(float)
FallSplatDropInSequence::ProcessState(float)
DropInSequenceHandlerBase::OnLevelLoad(StreamingLevel&)
PointAnimDropInSequence::PointAnimDropInSequence(float, float)
PointAnimDropInSequence::~PointAnimDropInSequence()
PointAnimDropInSequence::~PointAnimDropInSequence()
PointAnimDropInSequence::CalculatePriority(MechCharacter&, float)
PointAnimDropInSequence::IsType(HashedKey const&) const
PointAnimDropInSequence::Start(MechCharacter&)
PointAnimDropInSequence::ChangeState(PointAnimDropInSequence::PointAnimState)
PointAnimDropInSequence::Update(float)
PointAnimDropInSequence::ProcessState(float)
DropInNoCollisions::DropInNoCollisions(MechCharacter&)
DropInNoCollisions::~DropInNoCollisions()
DropInNoCollisions::~DropInNoCollisions()
DropInNoCollisions::AllowCollision(Entity const*, Entity const*)
DropInNoCollisions::IsIgnoredCollision(Entity const*) const
DropInNoCollisions::Collision(Character*, Entity*, ContactPoint&)
PointAnimDropInSequence::GetDropInPoint(MechCharacter&, VuVec&, unsigned short&) const
PointAnimDropInSequence::OnUpdate(float)
PointAnimDropInSequence::PreStateChange(MechCharacter&, PointAnimDropInSequence::PointAnimState)
PointAnimDropInSequence::OnStateChanged(MechCharacter&)
PointAnimDropInSequence::GetCameraStartOffset() const
PointAnimDropInSequence::GetCameraEndOffset() const
PointAnimDropInSequence::GetMiniCutCameraStartPos() const
PointAnimDropInSequence::GetMiniCutCameraEndPos() const
PointAnimDropInSequence::GetActionId() const
PointAnimDropInSequence::GetSpawnFocusTime() const
PointAnimDropInSequence::GetSpawnFocusHoldTime() const
PointAnimDropInSequence::GetAnimateCutBlendTime() const
PointAnimDropInSequence::GetMiniCutDuration() const
PointAnimDropInSequence::GetCharacterFadeInTime() const
PointAnimDropInSequence::AllowMiniCut(MechCharacter&) const
SpaceSuitTeleportDropInSequence::SpaceSuitTeleportDropInSequence()
SpaceSuitTeleportDropInSequence::~SpaceSuitTeleportDropInSequence()
SpaceSuitTeleportDropInSequence::~SpaceSuitTeleportDropInSequence()
SpaceSuitTeleportDropInSequence::IsType(HashedKey const&) const
SpaceSuitTeleportDropInSequence::GetDropInPoint(MechCharacter&, VuVec&, unsigned short&) const
SpaceSuitTeleportDropInSequence::PreStateChange(MechCharacter&, PointAnimDropInSequence::PointAnimState)
SpawnGadgetDropInSequence::SpawnGadgetDropInSequence(EdClass const*, DropInPropDetectionPhantom*)
SpawnGadgetDropInSequence::~SpawnGadgetDropInSequence()
NuHashMap<unsigned int, unsigned int>::~NuHashMap()
non-virtual thunk to SpawnGadgetDropInSequence::~SpawnGadgetDropInSequence()
SpawnGadgetDropInSequence::~SpawnGadgetDropInSequence()
non-virtual thunk to SpawnGadgetDropInSequence::~SpawnGadgetDropInSequence()
SpawnGadgetDropInSequence::IsType(HashedKey const&) const
SpawnGadgetDropInSequence::GetDropInPoint(MechCharacter&, VuVec&, unsigned short&) const
SpawnGadgetDropInSequence::FindPropAnimData(MechGadgetBaseInstance&) const
SpawnGadgetDropInSequence::PropAnimData::GetDropInPoint(MechGadgetBaseInstance&, DynoScene*, VuVec const&, VuVec const&, float&, VuVec&, unsigned short&, bool) const
SpawnGadgetDropInSequence::GetCameraStartOffset() const
SpawnGadgetDropInSequence::GetActionId() const
SpawnGadgetDropInSequence::GetSpawnFocusTime() const
SpawnGadgetDropInSequence::GetSpawnFocusHoldTime() const
SpawnGadgetDropInSequence::GetAnimateCutBlendTime() const
SpawnGadgetDropInSequence::GetMiniCutDuration() const
SpawnGadgetDropInSequence::GetCharacterFadeInTime() const
SpawnGadgetDropInSequence::OnStateChanged(MechCharacter&)
SpawnGadgetDropInSequence::AddGadgetPropAnim(char const*, char const*, char const*, float, float, float, float, float, VuVec const&, VuVec const&, float, bool)
NuVector<SpawnGadgetDropInSequence::PropAnimData>::PushBack()
SpawnGadgetDropInSequence::FindBuilderLevel(StreamingLevel*) const
SpawnGadgetDropInSequence::IsInteresting(Entity*) const
non-virtual thunk to SpawnGadgetDropInSequence::IsInteresting(Entity*) const
NuVector<SpawnGadgetDropInSequence::PropAnimData>::Reserve(unsigned int, bool)
NuVector<StreamingLevel*>::Reserve(unsigned int, bool)
FindGizmoByReferenceName(ComplexGizmo&, char const*, EdClass const*)
SpawnGizmoDropInSequence::SpawnGizmoDropInSequence(DropInPropDetectionPhantom*)
SpawnGizmoDropInSequence::~SpawnGizmoDropInSequence()
non-virtual thunk to SpawnGizmoDropInSequence::~SpawnGizmoDropInSequence()
SpawnGizmoDropInSequence::~SpawnGizmoDropInSequence()
non-virtual thunk to SpawnGizmoDropInSequence::~SpawnGizmoDropInSequence()
SpawnGizmoDropInSequence::IsType(HashedKey const&) const
SpawnGizmoDropInSequence::GetDropInPoint(MechCharacter&, VuVec&, unsigned short&) const
SpawnGizmoDropInSequence::FindPropAnimData(ComplexGizmo&) const
SpawnGizmoDropInSequence::PropAnimData::GetDropInPoint(ComplexGizmo&, DynoScene*, VuVec const&, VuVec const&, float&, VuVec&, unsigned short&, bool) const
SpawnGizmoDropInSequence::GetCameraStartOffset() const
SpawnGizmoDropInSequence::GetActionId() const
SpawnGizmoDropInSequence::GetSpawnFocusTime() const
SpawnGizmoDropInSequence::GetSpawnFocusHoldTime() const
SpawnGizmoDropInSequence::GetAnimateCutBlendTime() const
SpawnGizmoDropInSequence::GetMiniCutDuration() const
SpawnGizmoDropInSequence::GetCharacterFadeInTime() const
SpawnGizmoDropInSequence::OnUpdate(float)
SpawnGizmoDropInSequence::OnStateChanged(MechCharacter&)
SpawnGizmoDropInSequence::AddGizmoPropAnim(char const*, char const*, char const*, float, float, float, float, float, VuVec const&, VuVec const&, float, SpawnGizmoDropInSequence::GizmoDropInType)
NuVector<SpawnGizmoDropInSequence::PropAnimData>::PushBack()
SpawnGizmoDropInSequence::FindBuilderLevel(StreamingLevel*) const
SpawnGizmoDropInSequence::IsInteresting(Entity*) const
non-virtual thunk to SpawnGizmoDropInSequence::IsInteresting(Entity*) const
NuVector<SpawnGizmoDropInSequence::PropAnimData>::Reserve(unsigned int, bool)
SpawnLocatorDropInSequence::SpawnLocatorDropInSequence(char const*, char const*, char const*, char const*)
SpawnLocatorDropInSequence::~SpawnLocatorDropInSequence()
SpawnLocatorDropInSequence::~SpawnLocatorDropInSequence()
SpawnLocatorDropInSequence::CalculatePriority(MechCharacter&, float)
SpawnLocatorDropInSequence::IsType(HashedKey const&) const
SpawnLocatorDropInSequence::OnLevelLoad(StreamingLevel&)
SpawnLocatorDropInSequence::GetDropInPoint(MechCharacter&, VuVec&, unsigned short&) const
SpawnLocatorDropInSequence::GetAIConvexLocator() const
SpawnLocatorDropInSequence::GetMiniCutCameraPos() const
SpawnLocatorDropInSequence::GetCameraStartOffset() const
SpawnLocatorDropInSequence::GetCameraEndOffset() const
SpawnLocatorDropInSequence::GetMiniCutCameraStartPos() const
SpawnLocatorDropInSequence::GetMiniCutCameraEndPos() const
TrafficDropInSequence::TrafficDropInSequence()
TrafficDropInSequence::~TrafficDropInSequence()
TrafficDropInSequence::~TrafficDropInSequence()
TrafficDropInSequence::IsSequenceAllowed(MechCharacter&) const
TrafficDropInSequence::IsType(HashedKey const&) const
TrafficDropInSequence::CalculatePriority(MechCharacter&, float)
TrafficDropInSequence::Start(MechCharacter&)
TrafficDropInSequence::AllowMiniCut(MechCharacter&) const
DRCEmu::OnEnterLevel(LegoLevelContainer&)
DRCEmu::OnExitLevel(LegoLevelContainer&)
DRCEmu::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
DRCEmu::~DRCEmu()
nuhspecial_s::~nuhspecial_s()
NuVector<short>::~NuVector()
PickNextPhase(STATUSPACKET*)
VfxHandle::~VfxHandle()
LegoCityMenus::GetUnlockedCheatIndex()
LegoCityMenus::SetUnlockedCheatIndex(int)
LegoCityMenus::SetCurrentUnlock(char const*, char const*, bool)
LegoCityMenus::Unlock_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::Unlock_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::SetCurrentStoryCharUnlock(UnlockDisguiseContext*)
LegoCityMenus::StoryChar_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::StoryChar_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::StoryChar_AddAdditionalUnlockScreen(int)
LegoCityMenus::QueueStatusPhaseRequest(LegoCityMenus::StatusPhaseRequest&)
LegoCityMenus::StoryChar_AcknowledgeAdditionalUnlockScreen()
LegoCityMenus::GoldBrick_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::RedBrick_Skip(STATUS_STAGE*, STATUSPACKET*)
LegoCityMenus::RedBrick_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::RedBrick_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::GoldBrick_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::SetSuperCounterFinal()
LegoCityMenus::SetSuperCounterStart(nuhspecial_s, char const*, int const&, int const&, bool const&, char const*, bool const&, int, bool, int)
LegoCityMenus::SetSuperCounterStart(nuhspecial_s, char const*, char const*, bool const&, char const*, bool const&, int, bool, int)
LegoCityMenus::GetSuperCounterCharID()
LegoCityMenus::ShouldSuperCounterAwardGoldBrick()
LegoCityMenus::SuperCounter_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::SuperCounter_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::Coins_Skip(STATUS_STAGE*, STATUSPACKET*)
LegoCityMenus::Coins_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::Coins_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::BnBBricks_Skip(STATUS_STAGE*, STATUSPACKET*)
LegoCityMenus::BnBBricks_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::SetDrawPlayerBricks(bool, bool)
LegoCityMenus::BnBBricks_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::TrueHero_Skip(STATUS_STAGE*, STATUSPACKET*)
LegoCityMenus::TrueHero_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::TrueHero_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::LevelComplete_Skip(STATUS_STAGE*, STATUSPACKET*)
LegoCityMenus::LevelComplete_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::LevelComplete_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::Prompt_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::Prompt_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::Shields_Skip(STATUS_STAGE*, STATUSPACKET*)
LegoCityMenus::Shields_Update(STATUS_STAGE*, STATUSPACKET*, float)
Status_DrawHappyTokens(STATUSPACKET*, float, float, float, int, unsigned int, unsigned int, float, float)
Status_DrawHappyTokens_Clunking(STATUSPACKET*, float, unsigned int, unsigned int, unsigned int, float, float, float, int, float, float, float)
FindNthOnBit(unsigned int, unsigned int)
LegoCityMenus::Shields_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::CharsUnlocked_Skip(STATUS_STAGE*, STATUSPACKET*)
LegoCityMenus::CharsUnlocked_Update(STATUS_STAGE*, STATUSPACKET*, float)
LegoCityMenus::CharsUnlocked_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LegoCityMenus::LegoCityMenus()
LegoCityMenus::Init()
LegoCityMenus::OnEnterLevel(LegoLevelContainer&)
LegoCityMenus::OnExitLevel(LegoLevelContainer&)
LegoCityMenus::ProcessStatusPhaseQueue()
LegoCityMenus::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoCityMenus::AddStatusScreenRequest(int, int)
LegoCityMenus::ShowRequestedStatusScreens()
LegoCityMenus::AddStatusScreens(WORLDINFO*, STATUSPACKET*)
LegoCityMenus::SetPlayerBricksFadeTime(float)
LegoCityMenus::ShouldDrawPlayerBricks()
LegoCityMenus::GetPlayerBricksFadeTime()
LegoCityMenus::InitStatusScreen(WORLDINFO*, STATUSPACKET*)
LegoCityMenus::IsUnlockUIActive()
Kestrel_ShouldForceDebounceMenuInputs()
LegoCityMenus::~LegoCityMenus()
LegoCityMenus::~LegoCityMenus()
LegoCityMenus::StatusPhaseRequest::operator=(LegoCityMenus::StatusPhaseRequest const&)
SlidingListSlot::SlidingListSlot(SlidingList&)
SlidingListSlot::~SlidingListSlot()
SlidingListSlot::~SlidingListSlot()
SlidingListSlot::GetAnchorOffset() const
SlidingListSlot::GetItemIndex() const
SlidingListSlot::IsActive() const
SlidingListSlot::GetOwner() const
SlidingListSlot::GetPresence() const
SlidingList::GetWindow() const
SlidingList::Window::GetMaxOffset() const
SlidingList::Window::GetMinOffset() const
SlidingListSlot::GetNormalisedAnchorOffset() const
SlidingListSlot::GetAnchorProximity(bool) const
SlidingListSlot::UpdateOffset(float)
SlidingList::GetNumSlots() const
SlidingListSlot::Refresh(bool)
SlidingListSlot::RefreshTransforms()
SlidingListSlot::RefreshItemContent(int, int)
SlidingList::GetSlidePosition() const
SlidingList::Window::IsWraparound() const
SlidingList::ConstrainItemIndex(int) const
SlidingList::GetListSize() const
SlidingList::Window::Window()
SlidingList::Window::GetSize() const
SlidingList::Window::GetAnchorInset() const
SlidingList::Window::IsConstrained() const
SlidingList::Window::GetNumRequiredSlots() const
SlidingList::Window::Configure(int, int, bool, bool)
SlidingList::SlidingList()
SlidingList::~SlidingList()
SlidingList::DestroySlots()
SlidingList::~SlidingList()
SlidingList::ConfigureWindow(int, int, bool, bool)
SlidingList::AllocateSlots(int)
SlidingList::RebuildSlotOffsets(bool)
SlidingList::GetSlotAtIndex(int) const
SlidingList::GetNearestSlot() const
SlidingList::SetListSize(int, bool)
SlidingList::ConstrainPosition(float) const
SlidingList::RefreshAll()
SlidingList::SetSlidePosition(float)
SlidingList::GetShortestDistanceToPosition(float) const
SlidingList::GetVirtualSlidePosition() const
SlidingList::IsItemWithinWindow(int, bool) const
SlidingList::GetNearestItemIndex() const
SlidingList::GetDistanceToPosition(float, int) const
SlidingList::IsItemIndexValid(int) const
SlidingListController::ControlVector::ControlVector()
SlidingListController::ControlVector::Start(float, bool)
SlidingListController::ControlVector::SetValue(float)
SlidingListController::ControlVector::Release()
SlidingListController::ControlVector::GetStartPosition() const
SlidingListController::ControlVector::GetValue() const
SlidingListController::ControlVector::IsHeld() const
SlidingListController::ControlVector::GetAdjustedSlidePosition() const
SlidingListController::ControlVector::Update(float)
SlidingListController::ControlVector::Reset()
SlidingListController::SlidingListController()
SlidingListController::~SlidingListController()
SlidingListController::~SlidingListController()
SlidingListController::SetTargetList(SlidingList*)
SlidingListController::GetTargetList() const
SlidingListController::SetPositionForList(float)
SlidingListController::Motion::HasTarget() const
SlidingListController::SetFocusIndex(int, bool, int)
SlidingListController::ApplySlidePosition(float, float)
SlidingListController::Motion::SetSpeed(float)
SlidingListController::ApplySpeed(float, float)
SlidingListController::SetFollowMode(SlidingListController::eFollowMode)
SlidingListController::GetFollowMode() const
SlidingListController::Update(float)
SlidingListController::UpdateControlVector(float)
SlidingListController::Motion::IsActive() const
SlidingListController::StopMotion()
SlidingListController::Motion::Clear()
SlidingListController::SetUpdateFocusWithUntargettedMotion(bool)
SlidingListController::StartControlVector(bool)
SlidingListController::SetControlVector(float)
SlidingListController::ReleaseControlVector()
SlidingListController::Motion::StartForSpeed(float, float)
SlidingListController::Motion::GetSpeed() const
SlidingListController::GetFocusIndex() const
SlidingListController::SetFocusIndexRelative(int, bool)
SlidingListController::SetSlideTarget(float, bool, int)
SlidingListController::Motion::GetTargetPosition() const
SlidingListController::Motion::StartForTarget(float, float)
SlidingListController::SnapToSlideTarget()
SlidingListController::IsActive() const
SlidingListController::GetControlVector()
SlidingListController::SlideMotionStarted(SlidingListController::Motion const&, SlidingListController::eMotionCause)
SlidingListController::SetSlideDuration(float)
SlidingListController::UpdateMotion(float, SlidingListController::Motion&, float)
SlidingListController::Motion::GetElapsedProportionalTime(float, bool) const
SlidingListController::Motion::GetInterpolatedTargetPosition(float) const
SlidingListController::Motion::ApplySlidePosition(float, float)
SlidingListController::Motion::ApplySpeed(float, float)
SlidingListController::Motion::Motion()
SlidingListController::Motion::GetDirection() const
SlidingListController::Motion::GetElapsedTime() const
SlidingListController::Motion::GetStartPosition() const
SlidingListController::Motion::SetTargetPosition(float)
SlidingListController::Motion::ClearTargetPosition()
SlidingListController::Motion::GetDistanceAtCurrentSpeed(float) const
SlidingListController::Motion::Stop()
NuVector<SlidingListSlot*>::Reserve(unsigned int, bool)
BasicList::BasicList()
BasicList::~BasicList()
BasicList::~BasicList()
BasicList::SetBounds(float, float, float, float, int)
BasicList::SetBounds(RectangleF const&, int)
BasicList::GetNumVisibleRows() const
BasicList::GetRowHeight() const
BasicList::GetBounds() const
BasicList::GetController()
BasicList::Update(float)
BasicList::GetCurrentPage()
BasicList::Render()
BasicList::Page::GetOpacity() const
BasicList::Slot::GetBounds() const
BasicList::Slot::GetOpacity() const
BasicList::RefreshSlotContent(SlidingListSlot*, int, int)
BasicList::RefreshSlotTransforms(SlidingListSlot*)
BasicList::CreateSlotInstance(int)
BasicList::SetPage(BasicList::Page*, bool)
BasicList::GetPageStackSize()
BasicList::PushPage(BasicList::Page*, bool)
BasicList::Page::SetSelectedItemIndex(int)
BasicList::RefreshCurrentPage()
BasicList::PopPage()
BasicList::NotifyCurrentPage(int)
BasicList::Page::GetSelectedItemIndex() const
BasicList::GetPageAtStackPosition(int)
BasicList::PopAllPages()
BasicList::Slot::Slot(SlidingList&)
BasicList::Slot::~Slot()
BasicList::Slot::~Slot()
BasicList::Page::Page()
BasicList::Page::~Page()
BasicList::Page::~Page()
BasicList::Page::GetOwnerList() const
BasicList::Page::SetOpacity(float)
BasicList::Page::AboutToRefresh()
NuVector<BasicList::Page*>::Reserve(unsigned int, bool)
MenuControlledView::MenuControlledView()
MenuControlledView::~MenuControlledView()
MenuControlledView::~MenuControlledView()
MenuControlledView::GetCurrentViewStackPosition()
MenuControlledView::SetActive(bool)
MenuControlledView::PopRequested()
MenuControlledView::IsActive() const
MenuControlledView::NotifyViewContainer(int)
MenuControlledView::GetParentViewContainer()
MenuViewContainer::MenuViewContainer()
MenuViewContainer::~MenuViewContainer()
MenuViewContainer::~MenuViewContainer()
MenuViewContainer::OnShow()
MenuViewContainer::PushView(MenuControlledView*)
MenuViewContainer::OnHide()
MenuViewContainer::PopAllViews()
MenuViewContainer::Enter(MENU*)
MenuViewContainer::Exit(MENU*)
MenuViewContainer::Unpaused()
MenuViewContainer::Update(MENU*)
MenuViewContainer::PopView()
MenuViewContainer::GetActiveView()
MenuViewContainer::Render(MENU*)
MenuViewContainer::AttachView(MenuControlledView*)
MenuViewContainer::PopViewInternal(bool)
MenuViewContainer::GetViewStackSize() const
MenuViewContainer::StackChanged(int, int)
MenuViewContainer::HandleViewNotification(int, MenuControlledView*)
MenuViewContainer::ReserveViewVectors(int, int)
NuVector<MenuControlledView*>::Reserve(unsigned int, bool)
MenuControlledView::RenderView()
MenuControlledView::OnMenuEnter()
BasicRenderHelpers::Render2DRectangle(RectangleF const&, NuColour const&, float)
BasicRenderHelpers::Render2DRectangle(float, float, float, float, NuColour const&, float)
BasicRenderHelpers::RenderText(float, float, float, float, char const*, NuColour const&, float, bool)
BasicRenderHelpers::RenderText(RectangleF const&, char const*, NuColour const&, float, bool)
BasicRenderHelpers::GetTextFieldLabelHeight()
BasicRenderHelpers::RenderTextFieldWithin(float, float, float, float, char const*, char const*, NuColour const&, NuColour const&, NuColour const&, float, bool)
BasicRenderHelpers::Render2DRectangleInset(RectangleF const&, float, float, NuColour const&, float)
BasicRenderHelpers::RenderListHighlight(RectangleF const&, NuColour const&, float)
BasicRenderHelpers::RenderProgress(RectangleF const&, NuColour const&, NuColour const&, float, float)
BasicListInputRepeater::BasicListInputRepeater()
BasicListInputRepeater::~BasicListInputRepeater()
BasicListInputRepeater::UpdateBasicMenuControls(MENU*, float, bool*)
BasicListMenuContainer::BasicListMenuContainer()
BasicListMenuContainer::~BasicListMenuContainer()
BasicListMenuContainer::~BasicListMenuContainer()
BasicListMenuContainer::OnShow()
BasicListMenuContainer::StackChanged(int, int)
BasicListMenuContainer::OnUpdate(float)
BasicListMenuContainer::GetViewBounds(RectangleF&, float)
BasicListMenuContainer::GetCurrentBlendedStackPosition()
BasicListMenuContainer::BlendingStack()
BasicListMenuView::BasicListMenuView()
BasicListMenuView::SetPanelColour(NuColour const&)
BasicListMenuView::~BasicListMenuView()
non-virtual thunk to BasicListMenuView::~BasicListMenuView()
BasicListMenuView::~BasicListMenuView()
non-virtual thunk to BasicListMenuView::~BasicListMenuView()
BasicListMenuView::OnMenuEnter()
BasicListMenuView::Reset()
BasicListMenuView::OnMenuExit()
BasicListMenuView::ActiveStatusChanged(bool)
BasicListMenuView::UpdateViewControls(MENU*, float)
BasicListMenuView::IsDataReady()
BasicListMenuView::ResetContent()
BasicListMenuView::UpdateInfoText()
BasicListMenuView::FinishedAcquiringContent()
BasicListMenuView::UpdateView(float)
BasicListMenuView::GetContainer()
BasicListMenuView::UpdateBounds(float)
BasicListMenuView::SetHeading(char const*)
BasicListMenuView::RenderView()
BasicListMenuView::RenderListBackground(RectangleF const&, float)
non-virtual thunk to BasicListMenuView::RenderListBackground(RectangleF const&, float)
BasicListMenuView::AcquireContent()
FlashScreen::FlashScreen()
FlashScreen::~FlashScreen()
FlashScreen::SetRenderForPipe(int, bool)
FlashScreen::SetRenderForAllPipes(bool)
FlashScreen::ShouldRenderForPipe(int)
FlashScreen::SetViewportSize(int, int)
FlashScreen::GetViewportWidth()
FlashScreen::GetViewportHeight()
FlashAspectRatioManager::FlashAspectRatioManager()
FlashAspectRatioManager::~FlashAspectRatioManager()
FlashAspectRatioManager::InitFromSystem(FlashSystem&)
FlashAspectRatioManager::FindAnimsForAspect(FlashSystem&, eFlashAspectRatio, CSListHeader<FlashAspectRatioManager::AspectRatioAnimListLink>&)
FlashScene_FindAnim(FlashScene*, char const*)
FlashAspectRatioManager::AddAnimToList(CSListHeader<FlashAspectRatioManager::AspectRatioAnimListLink>&, FlashAnim*)
FlashAspectRatioManager::SetAspectRatio(eFlashAspectRatio)
FlashAspectRatioManager::ResetAspectRatio(FlashSystem&)
FlashSystem_ResetAllScenes(FlashSystem*)
FlashAspectRatioManager::GetCurrentAspectRatio() const
FlashAspectRatioManager::ApplyAspectRatioAnim(FlashAnim*)
SetDefaultSystem(FlashSystem*)
FlashSystem_GetCurrentThreadSystemID()
GetDefaultSystem()
FlashScene_SetScreenIndex(FlashSystem*, FlashScene*, int)
FlashScene_GetScreenIndex(FlashScene*)
FlashScene_ElementContainsPoint(FlashScreen*, FlashElement*, float, float)
FlashSystemDebug_GetTextureLoadCount(FlashSystem*)
FlashSystem_CountScenes(FlashSystem*, bool)
FlashSystemDebug_GetSceneCount(FlashSystem*)
FlashSystemDebug_GetAnimsCount(FlashSystem*)
FlashSystemDebug_GetDefaultAnimCount(FlashSystem*)
FlashSystemDebug_GetElementCount(FlashSystem*)
FlashSystem_AddLoadedTexture(FlashSystem*, char*, NuSmartPtr<NuMtl, true>)
FlashSystem_FindLoadedTexture(FlashSystem*, NuSmartPtr<NuTexture, true>)
FlashSystem_FindLoadedTexture(FlashSystem*, char*)
FlashSystem_DestroyLoadedTextures(FlashSystem*)
FlashSystem_SetDefaultSystem(FlashSystem*)
FlashSystem_InitDefaultScreens(FlashSystem*)
FlashSystem_GetScreen(FlashSystem*, int)
FlashSystem_Create()
FlashSystem_Destroy(FlashSystem*)
FlashSystem_Init(FlashSystem*, int)
FlashAnimLoad::~FlashAnimLoad()
FlashSystem_Shutdown(FlashSystem*)
FlashSystem_UnloadScene(FlashSystem*, FlashScene*)
FlashSystem_SetWorkingScreenIndex(FlashSystem*, int)
FlashSystem_SetWorkingScreen(FlashSystem*, FlashScreen*)
FlashSystem_NormaliseScreenCoordsForCurrentContext(float&, float&)
FlashSystem_UsageSort(FlashSystem*)
FlashSystem_DepthSortScenes(FlashSystem*)
FlashSystem_FindScene(FlashSystem*, char const*)
FlashSystem_ResetScene(FlashSystem*, FlashScene*)
FlashSystem_GetSceneAtIndex(FlashSystem*, int)
FlashSystem_ClearLoadCache()
FlashSceneLoadCache::Clear()
FlashSystem_GetAvailableSceneForLoad(FlashSystem*)
FlashSceneLoadCache::SceneItem::SceneItem()
FlashSceneLoadCache::SceneItem::~SceneItem()
FlashElementLoad::~FlashElementLoad()
FlashSceneLoadCache::SceneItem::DestroyAnimLoadObjects()
FlashSceneLoadCache::SceneItem::CreateAnimLoadObjects(int)
FlashSceneLoadCache::SceneItem::LoadFromFile(FlashSystem*, char const*)
FlashSceneLoadCache::SceneItem::PopulateScene(FlashSystem*, FlashScene*, FlashElement*)
FlashScene_EnableElement(FlashElement*, bool, bool)
FlashSceneLoadCache::SceneItem::IsForFile(char const*)
FlashSceneLoadCache::FlashSceneLoadCache()
FlashSceneLoadCache::~FlashSceneLoadCache()
FlashSceneLoadCache::FindExistingSceneItem(char const*)
FlashSceneLoadCache::CreateAndLoadSceneItem(FlashSystem*, char const*)
FlashSceneLoadCache::LoadScene(FlashSystem*, FlashScene*, char const*, FlashElement*)
FlashSystem_GetPlatformShortName(eFlashPlatform)
FlashSystem_GetCurrentPlatformShortName()
FlashSystem_LoadScene(FlashSystem*, char const*, FlashElement*)
FlashSystem_GetNumScenes(FlashSystem*)
FlashSystem_SetAnimTargetListDirty(FlashSystem*)
FlashSystem_SetAnimTargetListDirty(FlashAnim*)
FlashSystem_ApplyAspectRatio(FlashSystem*, eFlashAspectRatio)
FlashSystem_ApplyAspectScale(FlashSystem*, float)
FlashSystem_ResetAspectToDefault(FlashSystem*)
FlashSystem_LoadAspectRatioAnims(FlashSystem*)
FlashSystem_GetAspectRatio(FlashSystem*)
FlashSystem_SetRenderAspectScale(FlashSystem*)
FlashSystem_SetFitToScreen(FlashSystem*, bool)
FlashSystem_FindAllAnims(FlashSystem*, char const*, FlashAnim**, unsigned int)
FlashScene_SetRegion(FlashScene*, FlashRenderRegion*)
FlashScene_GetSceneRegion(FlashScene*)
FlashSystem_Render(FlashSystem*)
FlashSystem_DebugUpdate()
FlashSystem_AnimUpdateSortScenes(FlashSystem&)
FlashSystem_ValidateAnimUpdateList(FlashSystem&)
UpdateLoadedAnims(FlashSystem&, float)
FlashSystem_UpdateGlobals(float)
FlashSystem_SetGlobalTime(float)
FlashSystem_GetGlobalTime()
FlashSystem_Update(FlashSystem*, float)
FlashScene_GetGraph(FlashScene*)
FlashScene_GetSystem(FlashScene*)
FlashScene_GetAttachElement(FlashScene*)
_Z21FlashElement_FindAnimP12FlashElementPKc_0
FlashScene_EnableElement(FlashScene*, char const*, bool, bool)
FlashScene_PlayAnim(FlashScene*, char const*)
FlashScene_SetAnimUpdate(FlashScene*, bool)
FlashScene_PlayAllAnim(FlashScene*)
FlashScene_StopAllAnim(FlashScene*)
FlashSystem_ScaleDefaultAnim(FlashSystem*, FlashAnim*, float)
FlashSystem_ScaleDefaultAnim(FlashSystem*, FlashScene*, FlashElement*, float)
FlashSystem_ScaleDefaultAnim(FlashSystem*, char const*, float)
FlashSystem_AddDefaultAnim(FlashSystem*, FlashElement*)
FlashSystem_RemoveDefaultAnim(FlashAnim*)
FlashScene_GetAnimCount(FlashScene*)
FlashScene_GetAnimWithIndex(FlashScene*, unsigned int)
FlashSystem_GetFont()
FlashElement_FindAnim(FlashElement*, char const*)
FlashScene_FindElement(FlashScene*, char const*)
FlashAnim_Init(FlashAnim*, FlashAnimLoad*, FlashSystem*, FlashScene*, FlashElement*, bool)
Bezier_CalculateDataSet(float*, unsigned int, NUVEC2 const*)
FlashAnimDefault_CreateCollection(FlashSystem*, FlashAnimLoad*, unsigned int)
FlashAnimDefault_DestroyCollection(FlashAnim*, unsigned int)
FlashAnimDefault_GetFromIndex(FlashAnim*, unsigned int)
FlashAnimDefault_AddTarget(FlashAnim*, FlashElement*)
FlashAnimDefault_RemoveTarget(FlashAnim*)
FlashAnimDefault_HasTarget(FlashAnim*)
FlashAnim_Create(FlashAnimLoad*, FlashSystem*, FlashScene*, FlashElement*)
FlashAnim_Destroy(FlashAnim*)
FlashAnim_GetName(FlashAnim*)
FlashAnim_GetTarget(FlashAnim const*, int)
FlashAnim_GetTargetCount(FlashAnim const*)
FlashAnim_GetTimeLeft(FlashAnim*)
FlashAnim_GetPercentComplete(FlashAnim*)
FlashAnim_GetLength(FlashAnim*)
FlashAnim_Play(FlashAnim*, bool)
FlashAnim_Stop(FlashAnim*)
FlashAnim_SetTime(FlashAnim*, float)
FlashAnim_SetPosition(FlashAnim*, float)
FlashAnim_ForcePosition(FlashAnim*, float)
FlashAnim_Update(FlashAnim*, float)
FlashAnim_ResetToOrigin(FlashAnim*)
FlashAnim_GetStatus(FlashAnim*)
FlashAnim_ScaleLength(FlashAnim*, float)
FlashAnim_ReverseRewind(FlashAnim*)
FlashAnim_Rewind(FlashAnim*)
Bezier_InternalCalculate(NUVEC4 const*, float)
Bezier_Calculate(NUVEC2 const*, float)
Bezier_CalculateYValue(float const*, float const*, unsigned int, float)
FlashGraph_Create(FlashGraphLoad const*, char const*)
FlashGraph_AllocRenderStack(FlashGraph*)
FlashGraph_Destroy(FlashGraph*, FlashSystem*)
FlashGraph_Render(FlashGraph*, NUMTX*)
FlashGraph_FindElement(FlashGraph*, char const*)
FlashGraph_GetRootElement(FlashGraph*)
FlashGraph_SetOpacity(FlashGraph*, float)
FlashGraph_GetOpacity(FlashGraph*)
FlashGraph_SetDepth(FlashGraph*, float, bool, FlashSystem*)
FlashGraph_GetDepth(FlashGraph*)
FlashGraph_UpdateGraph(FlashGraph*)
FlashGraph_ResetRenderStack(FlashGraph*)
FlashElement_SetRenderingSceneViewport(int, int)
FlashElement_GetRenderingSceneViewport(int*, int*)
FlashElement_NormaliseScreenCoords(float&, float&)
FlashBespoke::FlashBespoke()
FlashBespoke::~FlashBespoke()
FlashBespoke::DetachFromFlashElement()
FlashBespoke::~FlashBespoke()
FlashElement_DetachBespoke(FlashElement*, FlashBespoke*)
FlashBespoke::GetAttachedFlashElement()
FlashElement_ApplySafeZone(FlashElement_RenderQuad&)
Element_CalculateWorldSpaceRect(FlashElement*, FlashElement_RenderQuad&)
FlashElement_IsOnScreen(FlashElement*)
Placeholder_NuScissorSet(float, float, float, float)
Element_SetClipElementOnChildren(FlashElement&, FlashElement&)
FlashElement_ForceRenderToFit(bool)
FlashElement_IsForceRenderingToFit()
FlashElement_CharScreenSize(FlashElement const*, unsigned short const*, unsigned short const*, FlashElementRenderViewport&)
FlashElement_TextScreenSizeW(FlashElement const*, unsigned short const*, FlashElementRenderViewport&)
FlashElement_TextScreenSize(FlashElement const*)
FlashElement_TextScreenSize(FlashElement const*, char const*, FlashElementRenderViewport&)
FlashElement_TextScreenSize(FlashElement const*, FlashElementRenderViewport&)
FlashElement_GetNormalisedTextScreenScale(FlashElement const*, VUFNT*, FlashElementRenderViewport&, float&, float&)
FlashElement_CharSceneSize(FlashElement const*, FlashSystem*, unsigned short const*, unsigned short const*)
FlashElement_TextSceneSize(FlashElement const*)
FlashElement_TextSceneSize(FlashElement const*, FlashSystem*)
FlashElement_TextSceneSize(FlashElement const*, FlashSystem*, char const*)
FlashElement_Create(FlashElementLoad*, char const*, FlashElement*)
FlashElement_Enable(FlashElement*, bool, bool)
FlashElement_SetString(FlashElement*, char const*)
FlashElement_Destroy(FlashElement*, FlashSystem*)
FlashElement_EnableElement(FlashElement*, bool)
FlashElement_EnableParents(FlashElement*, bool, bool)
FlashElement_IsEnabled(FlashElement*)
FlashElement_EnableAllChildren(FlashElement*, bool)
FlashElement_SetScaleToSafeZone(FlashElement*, bool, bool)
FlashElement_GetScaleToSafeZone(FlashElement*)
FlashElement_UpdateMatrix(FlashElement*)
FlashElement_UpdateRecursive(FlashRenderStack*, FlashElement*, NUMTX const*, bool, float, float)
FlashElement_UpdateRecursiveOLD(FlashElement*, NUMTX const*, bool, float)
FlashElement_SetRenderAspectScale(float)
FlashElement_DebugRender(FlashElement*, FlashElement_RenderQuad&)
FlashElement_RenderTexture(FlashElement*, float)
FlashElement_GetScreenTranslation(FlashElement*, FlashElement_RenderQuad&, bool)
FlashElement_RenderString(FlashElement*)
FlashElement_GetStringScreenTranslation(FlashElement*, FlashElement_RenderQuad&, bool)
FlashElement_CountRenderElements(int*, FlashElement*)
FlashElement_CountRenderElements(FlashElement*)
FlashElement_RenderRecursiveOLD(FlashElement*, NUMTX const*, float, float)
FlashElement_RenderFlushOLD()
FlashElement_RenderFlush(FlashRenderStack*)
FlashElement_Find(FlashElement const*, char const*, bool)
FlashElement_GetAttachedFlash(FlashElement const*)
FlashElement_FindSceneElement(FlashElement const*, FlashElement const*)
FlashElement_EnableParentsFull(FlashElement*, FlashElement*)
FlashElement_GetRootElementFrom(FlashElement*)
FlashElement_FindSceneElementContaining(FlashElement const*, FlashElement const*)
FlashElement_ResetToBase(FlashElement*, bool)
FlashElement_Reset(FlashElement*, bool)
FlashElement_ClearStrings(FlashElement*, bool)
FlashElement_FindWithPrefix(FlashElement*, char const*, FlashElement**, unsigned int, bool)
FlashElement_GetNext(FlashElement*)
FlashElement_GetFirstChild(FlashElement*)
FlashElement_GetChildCount(FlashElement*)
FlashElement_SetVisibility(FlashElement*, bool)
FlashElement_SetHideNonRecursive(FlashElement*, bool)
FlashElement_SetOpacity(FlashElement*, float)
FlashElement_SetColour(FlashElement*, NuColour const&, bool)
FlashElement_SetRotationZ(FlashElement*, float)
FlashElement_SetScale(FlashElement*, NUVEC2 const*)
FlashElement_SetScaleX(FlashElement*, float)
FlashElement_SetScaleY(FlashElement*, float)
FlashElement_SetTranslation(FlashElement*, NUVEC2 const*)
FlashElement_SetTranslationX(FlashElement*, float)
FlashElement_SetTranslationY(FlashElement*, float)
FlashElement_SetWidth(FlashElement*, float)
FlashElement_SetHeight(FlashElement*, float)
FlashElement_SetTransformOrigin(FlashElement*, NUVEC2 const*)
FlashElement_SetTransformOriginX(FlashElement*, float)
FlashElement_SetTransformOriginY(FlashElement*, float)
FlashElement_SetBaseOpacity(FlashElement*, float)
FlashElement_SetBaseRotationZ(FlashElement*, float)
FlashElement_SetBaseScale(FlashElement*, NUVEC2 const*)
FlashElement_SetBaseScaleX(FlashElement*, float)
FlashElement_SetBaseScaleY(FlashElement*, float)
FlashElement_SetBaseTranslation(FlashElement*, NUVEC2 const*)
FlashElement_SetBaseTranslationX(FlashElement*, float)
FlashElement_SetBaseTranslationY(FlashElement*, float)
FlashElement_FlipAxis(FlashElement*, bool)
FlashElement_SetClampToRegion(FlashElement*, bool, bool)
FlashElement_SetTextScale(FlashElement*, float)
FlashElement_ForceVisibility(FlashElement*, bool)
FlashElement_SetAllowVisibility(FlashElement*, bool)
FlashElement_StopForcingVisibility(FlashElement*)
FlashElement_IsForcingVisibility(FlashElement*)
FlashElement_SetUV(FlashElement*, NUVEC2 const*, NUVEC2 const*)
FlashElement_SetCullIfOffScreen(FlashElement*, bool, bool)
FlashElement_CullIfOffScreen(FlashElement*)
FlashElement_GetScale(FlashElement*)
FlashElement_GetTranslation(FlashElement*)
FlashElement_GetRotationZ(FlashElement*)
FlashElement_GetOpacity(FlashElement*)
FlashElement_GetColour(FlashElement*)
FlashElement_IsVisible(FlashElement*, bool)
FlashElement_GetTransformOrigin(FlashElement*)
FlashElement_GetStartTextScale(FlashElement*)
FlashElement_GetBaseScale(FlashElement*)
FlashElement_GetBaseTranslation(FlashElement*)
FlashElement_GetBaseRotationZ(FlashElement*)
FlashElement_GetBaseOpacity(FlashElement*)
FlashElement_GetParentElement(FlashElement*)
FlashElement_IsTransformDirty(FlashElement*)
FlashElement_GetUV(FlashElement*)
FlashElement_GetAbsoluteTranslationToCentre(FlashElement*)
FlashElement_GetWorldMatrix(FlashElement*)
FlashElement_GetObjectMatrix(FlashElement*)
FlashElement_GetWorldOpacity(FlashElement*)
FlashElement_AttachObject(FlashElement*, fnOBJECT*)
FlashElement_AttachText(FlashElement*, fnFONT*, char const*, NuColour, NuColour)
FlashElement_SetTextJustification(FlashElement*, unsigned char, unsigned char)
FlashElement_SetFontTint(FlashElement*, NuColour)
FlashElement_SetFontIconTint(FlashElement*, NuColour)
FlashElement_SetStringLocalisedFromName(FlashElement*, bool, bool)
FlashElement_SetStringLocalised(FlashElement*, char const*, bool)
FlashElement_SetButtonPromptString(FlashElement*, char const*, bool, int)
FlashElement_SetStringPlayerID(FlashElement*, int)
FlashElement_SetStringDecoded(FlashElement*, char const*, bool, bool)
FlashElement_SetAlignment(FlashElement*, int)
FlashElement_ReplaceTexture(FlashElement*, NuSmartPtr<NuTexture, true>, bool, bool, FlashSystem*)
FlashElement_ReplaceMaterial(FlashElement*, NuSmartPtr<NuMtl, true>, bool)
FlashElement_ReplaceTexture(FlashElement*, char const*, NuSmartPtr<NuTexture, true>, bool, bool, FlashSystem*)
FlashElement_ReplaceMaterial(FlashElement*, char const*, NuSmartPtr<NuMtl, true>, bool)
FlashElement_GetMaterial(FlashElement*)
FlashElement_GetString(FlashElement*)
FlashElement_ReplaceTexture(FlashElement*, char const*, bool)
FlashElement_ReplaceTexture(FlashElement*, char const*, char const*, bool)
FlashElement_ReplaceTexture(FlashElement*, fnCACHEITEM*, bool, bool)
FlashElement_AttachFlash(FlashElement*, FlashScene*)
FlashElement_DetachFlash(FlashElement*)
FlashElement_ReleaseTexture(FlashElement*)
FlashElement_ReplaceTextureTemporary(FlashElement*, fnCACHEITEM*, bool)
FlashElement_ReplaceTextureRestore(FlashElement*, fnCACHEITEM*, bool)
FlashElement_GetWidth(FlashElement*)
FlashElement_GetHeight(FlashElement*)
FlashElement_IsContainer(FlashElement*)
FlashElement_HasFont(FlashElement*)
FlashElement_GetFont(FlashElement*)
FlashElement_HasObject(FlashElement*)
FlashElement_GetName(FlashElement*)
FlashElement_IsClampedToRegion(FlashElement*)
FlashElement_AttachBespoke(FlashElement*, FlashBespoke*)
FlashElement_DetachBespoke(FlashBespoke*)
FlashElement_GetBespoke(FlashElement*)
FlashElement_GetAspect()
FlashElement_FindNthType(FlashElement*, FLASHELEMENTTYPE, unsigned int, bool, bool)
FlashBespoke::FlashElementUpdate(FlashElement*)
NuVector<FlashElement*>::Reserve(unsigned int, bool)
FlashContext::FlashContext()
FlashContext::~FlashContext()
FlashContext::Release()
FlashContext::UpdateProcessTypeOnly(float, FlashContext::eProcessType)
FlashContext::IsPaused() const
FlashContext::RenderWithPriority(ClassManager::eRenderingPriority const&)
FlashContext::RenderFlashTarget(FlashContext::FlashRenderTarget&, ClassManager::eRenderingPriority const&)
FlashContext::RenderTextureToTarget(FlashContext::FlashRenderTarget&, ClassManager::eRenderingPriority const&)
FlashContext::RenderImpostorToScreen(float, float, float, float, float, NUPRIMSCALEMODE)
FlashContext::InitFlashSystems()
FlashContext::ShutDownFlashSystems()
FlashContext::SetRenderPipeCallbackFn(void (*)(void*), void*)
FlashContext::FindNamed(char const*)
FlashContext::CreateItemFromType(int)
FlashContext::AssignToPipe(int, NURENDERSTAGE, FlashContext::eProcessType)
FlashContext::InitContext(NURENDERSTAGE, FlashContext::eProcessType)
FlashContext::AddRenderTarget(int&)
FlashContext::InitRenderTarget(int, int)
FlashContext::CopyRenderTarget(int, int&)
FlashContext::SetRenderTargetSpecial(int, LegoSpecial*)
FlashContext::GetRenderTarget(int)
FlashContext::SetRenderTargetMaterial(int, NuSmartPtr<NuMtl, true>)
FlashContext::GetRenderTarget(int) const
FlashContext::InitImpostor(int, int, int)
FlashContext::RenderImpostor_CallbackFn(void*, NURENDERSTAGE)
FlashContext::RenderPipe_CallbackFn(void*)
FlashContext::SetRenderTargetScreen(int, int, int)
FlashContext::GetRenderTargetScreen(int, int&, int&) const
FlashContext::LoadAspectAnims()
FlashContext::SetAspectScale(float)
FlashContext::GetAspect()
FlashContext::SetAsPaused(bool)
FlashContextSystem::ScopedContext::ScopedContext(int, int)
FlashContextSystem::SetCurrentContext(int, int)
FlashContextSystem::ScopedContext::~ScopedContext()
FlashContextSystem::FlashContextSystem()
FlashContextSystem::~FlashContextSystem()
FlashContextSystem::ReleaseContexts()
FlashContextSystem::~FlashContextSystem()
FlashContextSystem::Init()
FlashContextSystem::OnInitPostConfig()
FlashContextSystem::ShutDown()
FlashContextSystem::ProcessLevelOnly(LegoLevelContainer&, float)
FlashContextSystem::UpdateContexts(FlashContext::eProcessType, float)
FlashContextSystem::AddManagersForLevel(LegoLevelContainer&)
FlashContextContainer::RegisterProcessing()
FlashContextSystem::RemoveManagersForLevel(LegoLevelContainer&)
FlashContextSystem::GetHelper()
FlashContextSystem::AddContext(int, NURENDERSTAGE, FlashContext::eProcessType, int&)
FlashContextSystem::AddContext(int, NURENDERSTAGE, FlashContext::eProcessType, bool, int&)
FlashContextSystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
FlashContextSystem::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
FlashContextSystem::EventNotify(Event&, NuEventData&)
FlashContextSystem::UpdateContextAspect(int)
FlashContextSystem::Render()
FlashContextSystem::AddRenderTargetToContext(FlashContext&, int&)
FlashContextSystem::ParseCommandLine(int, char**)
FlashContextContainer::FlashContextContainer()
FlashContextContainer::~FlashContextContainer()
FlashContextContainer::~FlashContextContainer()
FlashContextContainer::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
FlashContextHelper::~FlashContextHelper()
CSListHeader<FlashFileList>::~CSListHeader()
FlashFileList::FlashFileList()
FlashFileList::~FlashFileList()
FlashLoader::LoadFlashFileLists()
FlashLoader::LoadList(char const*, CSListHeader<FlashFileList>&)
FlashLoader::Kill()
FlashLoader::KillList(CSListHeader<FlashFileList>&)
CSListHeader<FlashFileList>::Clear()
GetNextStringLength(NuFile*)
GetNextStringFromFile(NuFile*)
SetMainFrameToFixed()
LCUITargets::SetUITargetMainFrameState(int)
LCUITargets::Valid3DFlashTarget::Valid3DFlashTarget()
LCUITargets::Valid3DFlashTarget::Valid3DFlashTarget(LCUITargets::eValidTargetType)
LCUITargets::Valid3DFlashTarget::~Valid3DFlashTarget()
LCUITargets::Valid3DFlashTarget::~Valid3DFlashTarget()
LCUITargets::Valid3DFlashTarget::HasStartupFlashSceneLoadBeenRequested()
LCUITargets::Valid3DFlashTarget::SetStartupFlashSceneLoadRequested(bool)
LCUITargets::Valid3DFlashTarget::Clear()
LCUITargets::Valid3DFlashTarget::Update(LegoLevelContainer*)
LCUITargets::BG_AcknowledgeSceneLoadedDynamically(void*)
LCUITargets::Valid3DFlashTarget::SwitchToBgLoadedScene()
LCUITargets::BG_LoadFlashScene(void*)
LCUITargets::UITarget::UITarget()
LCUITargets::UITarget::~UITarget()
LCUITargets::FlashTargetMainFrame::MainFrameDigit::~MainFrameDigit()
LCUITargets::FlashTargetMainFrame::MainFrameDigit::SetElement(FlashScene*, FlashElement*, char)
LCUITargets::FlashTargetMainFrame::MainFrameDigit::SetDigit(char)
LCUITargets::FlashTargetMainFrame::GetTextureId(int)
LCUITargets::FlashTargetMainFrame::FlashTargetMainFrame()
LCUITargets::FlashTargetMainFrame::MainframeShouldBeActive()
LCUITargets::FlashTargetMainFrame::MainframeShouldAwaitSync()
LCUITargets::FlashTargetMainFrame::Clear()
LCUITargets::FlashTargetMainFrame::OnEnterLevel(LegoLevelContainer&)
LCUITargets::FlashTargetMainFrame::SetupCodeButtons()
LCUITargets::FlashTargetMainFrame::SetInitialFlashFile()
LCUITargets::FlashTargetMainFrame::FindAnim(FlashGraph*, char const*, char const*)
LCUITargets::FlashTargetMainFrame::InitTimeDigits()
LCUITargets::FlashTargetMainFrame::InitPercentageDigits()
LCUITargets::FlashTargetMainFrame::EventNotify(Event&, NuEventData&)
non-virtual thunk to LCUITargets::FlashTargetMainFrame::EventNotify(Event&, NuEventData&)
LCUITargets::FlashTargetMainFrame::Update(LegoLevelContainer*)
LCUITargets::FlashTargetMainFrame::SetupAnimsPhase2()
LCUITargets::FlashTargetMainFrame::SetupAnimsPhase3()
LCUITargets::FlashTargetMainFrame::UpdatePercentage()
LCUITargets::FlashTargetMainFrame::UpdateGameTime()
LCUITargets::LCUITargets()
LCUITargets::~LCUITargets()
LCUITargets::Release()
LCUITargets::~LCUITargets()
LCUITargets::IsEnabled()
LCUITargets::SetEnabled(bool)
LCUITargets::Init()
LCUITargets::InitUITargetSystem()
LCUITargets::SwitchToBgLoadedFlashFile(char const*)
LCUITargets::GetTypeFromName(char const*)
LCUITargets::UpdateUITargets(LegoLevelContainer*)
LCUITargets::OnInitPostConfig()
LCUITargets::AddManagersForLevel(LegoLevelContainer&)
LCUITargetsContainer::RegisterProcessing()
LCUITargetsContainer::RegisterRendering()
LCUITargets::OnEnterLevel(LegoLevelContainer&)
LCUITargets::OnExitLevel(LegoLevelContainer&)
LCUITargets::RemoveManagersForLevel(LegoLevelContainer&)
LCUITargets::ShutDown()
LCUITargets::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LCUITargets::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LCUITargets::GetTypeFromFile(char const*, bool*)
LCUITargets::RenderLevelOnly(LegoLevelContainer*)
LCUITargets::RenderTarget(int)
LCUITargets::AddScene(LCUITargets::eValidTargetType, int&)
LCUITargets::GetValid3DFlashTargetFromType(LCUITargets::eValidTargetType)
LCUITargets::BG_LoadScene(void*)
LCUITargets::BG_AcknowledgeSceneLoaded(void*)
LCUITargets::RemoveScene(int)
LCUITargets::GetFirstTarget()
LCUITargets::GetUITargetSize(int, NUVEC2&)
LCUITargets::GetNameFromFile(char const*)
LCUITargets::GetFileFromType(LCUITargets::eValidTargetType)
LCUITargets::LoadFlashScene(LCUITargets::BgLoadRequest&)
LCUITargets::LoadScene(LCUITargets::LoadRequest&)
LCUITargets::AcknowledgeSceneLoaded(LCUITargets::LoadRequest&)
LCUITargets::AcknowledgeSceneLoadedDynamically(LCUITargets::BgLoadRequest&)
LCUITargets::EventNotify(Event&, NuEventData&)
LCUITargets::UpdateLevelOnly(LegoLevelContainer&, float)
LCUITargets::ShouldAddManagersForLevel(MechLevelContainer&)
LCUITargetsContainer::LCUITargetsContainer(UIContext&)
LCUITargetsContainer::~LCUITargetsContainer()
LCUITargetsContainer::~LCUITargetsContainer()
LCUITargetsContainer::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LCUITargetsContainer::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LCUITargets::Valid3DFlashTarget::SetInitialFlashFile()
LCUITargets::Valid3DFlashTarget::OnEnterLevel(LegoLevelContainer&)
LCUITargets::FlashTargetMainFrame::~FlashTargetMainFrame()
LCUITargets::FlashTargetMainFrame::~FlashTargetMainFrame()
non-virtual thunk to LCUITargets::FlashTargetMainFrame::~FlashTargetMainFrame()
non-virtual thunk to LCUITargets::FlashTargetMainFrame::~FlashTargetMainFrame()
LCUITargetsHelper::~LCUITargetsHelper()
LCUITargets::TargetLoadedEventData::~TargetLoadedEventData()
HudState::~HudState()
HudWindow::HudWindow(unsigned int, unsigned int, unsigned int, FlashElement*)
HudWindow::HudWindow(HudControlLoad<1, 0, 0> const&, unsigned int, unsigned int)
HudWindow::ShowWindow(bool)
HudWindow::SetCurrentScreen(HudState_WindowScreen&)
HudWindow::ControlInit()
HudWindow::ControlUpdate(float)
HudWindow::Restart()
HudState_WindowDefault::OnEnter(HudControl*)
HudState_WindowDefault::Update(HudControl*, LegoLevelContainer*, float)
HudState_WindowDefault::OnExit(HudControl*)
HudState_WindowScreen::RegisterAnimation(HudWindow*, unsigned int, char const*, unsigned char, unsigned int, bool)
HudControl::~HudControl()
HudWindow::~HudWindow()
HudControl::ControlRestart()
HudState_WindowDefault::~HudState_WindowDefault()
HudModesManager::Init()
HudModesManager::Release()
HudModesManager::ChangeHudMode_InGame(HudModesManager::eHudModesInGame)
HudModesManager::ChangeHudMode_Players(HudModesManager::eHudModesPlayers)
HudModesManager::AddToModeChange_InGame(HudModesManager::eHudModesInGame, HudMode&)
HudModesManager::AddToModeChange(Event*, unsigned int, unsigned int, HudMode&)
HudModesManager::ChangeHudMode(Event*, unsigned int, unsigned int, unsigned int&)
HudModesManager::AddToModeChange_Players(HudModesManager::eHudModesPlayers, HudMode&)
HudModesManager::HudModeEventListener::EventNotify(Event&, NuEventData&)
HudModesManager::HudModeEventListener::~HudModeEventListener()
HudModesManager::HudModeEventListener::~HudModeEventListener()
HudModesManager::HudModeEventData::~HudModeEventData()
HudRender_CentredCounter::HudRender_CentredCounter(FlashElement*, FlashElement*, FlashElement*, FlashElement*, int, bool, NUVEC*, void (*)(HudCommon::FlashToPanel_RenderQuad const&, NUVEC2 const&, NuColour&, nuhspecial_s*, NUVEC const&), HudRender_CentredCounter::CounterAlignment)
HudRender_CentredCounter::HudRender_CentredCounter(HudElement*, FlashElement*, FlashElement*, FlashElement*, int, bool, NUVEC*)
HudRender_CentredCounter::Update(HudControl*, float)
HudRender_CentredCounter::Render(HudControl*, LegoLevelContainer*)
HudRender_CentredCounter::SetElementScaleL(float)
HudRender_CentredCounter::SetElementScaleR(float)
HudRender_CentredCounter::~HudRender_CentredCounter()
HudRender_CentredCounter::~HudRender_CentredCounter()
HudTextureManager::HudTextureManager()
HudTextureManager::IsTextureIDValid(FlashElement*)
HudTextureManager::RequestToLoadTexture(char const*, void (*)(bool, NuSmartPtr<NuTexture, true>, int, void*), int, void*)
HudTextureManager::IsTextureLoaded(char const*, NuSmartPtr<NuTexture, true>&)
HudTextureManager::IsTextureRequested(char const*)
HudTextureManager::GetLastInQueue()
HudTextureManager::PushTextureSlotIntoQueue(int)
HudTextureManager::BG_LoadTexture(void*)
HudTextureManager::BG_AcknowledgeTextureLoaded(void*)
HudTextureManager::PostRequests()
HudTextureManager::IsTextureLoaded(NuSmartPtr<NuTexture, true> const&)
HudTextureManager::ReleaseTexture(NuSmartPtr<NuTexture, true> const&)
HudTextureManager::ReleaseTextureBySlot(int)
HudTextureManager::ReleaseElementTexture(FlashElement*)
HudTextureManager::ReleaseAllTextures()
HudTextureManager::InvalidateTextureRequestByIndex(int)
HudTextureManager::PopTextureSlotFromQueue(int)
HudTextureManager::LoadTexture(HudTextureManager::LoadRequest&)
HudTextureManager::AcknowledgeTextureLoad(HudTextureManager::LoadRequest&)
HudTextureManager::DebugRender(int)
HudTextureManager::ReleaseTextureEventData::~ReleaseTextureEventData()
HudState_IconArrowDefault::OnEnter(HudControl*)
HudState_IconArrowDefault::Update(HudControl*, LegoLevelContainer*, float)
HudState_IconArrowDefault::OnExit(HudControl*)
ValidateCharAsPlayer(MechCharacter*)
HudObjectIconArrow::ValidateIDAsPlayer(int)
HudObjectIconArrow::HudObjectIconArrow(HudControlLoad<1, 0, 1> const&, MechCharacter*, int)
ShapeFn_Linear(float)
HudObjectIconArrow::~HudObjectIconArrow()
HudObjectIconArrow::~HudObjectIconArrow()
HudObjectIconArrow::SetTarget(MechCharacter const*)
HudObjectIconArrow::ControlInit()
HudObjectIconArrow::ControlRestart()
HudObjectIconArrow::ControlUpdate(float)
HudObjectIconArrow::CreateAndAttach(MechCharacter*)
HudObjectIconArrow::Detach(MechCharacter*)
HudObjectIconArrow::IsAttached(MechCharacter*)
HudObjectIconArrow::Detach()
HudObjectIconArrow::SetAnimating(bool)
HudObjectIconArrow::FadeIn()
HudObjectIconArrow::IsFadedIn() const
HudObjectIconArrow::FadeOut()
HudObjectIconArrow::IsFadedOut() const
HudState_IconArrowDefault::~HudState_IconArrowDefault()
HudState_ProgressBarDefault::OnEnter(HudControl*)
HudState_ProgressBarDefault::Update(HudControl*, LegoLevelContainer*, float)
HudState_ProgressBarDefault::OnExit(HudControl*)
HudProgressBar::HudProgressBar(FlashElement*)
HudProgressBar::HudProgressBar(FlashElement*, HudControlLoad<0, 1, 1> const&)
HudProgressBar::~HudProgressBar()
HudProgressBar::~HudProgressBar()
HudProgressBar::Clear()
HudProgressBar::Restart()
HudProgressBar::SetModeVisibility(HudProgressBar::eIconMode, bool)
HudProgressBar::AttachToObject(MechCharacter*, int, bool)
HudProgressBar::AttachToObject(MechObjectInterface*, int, bool, MechCharacter*)
HudProgressBar::SetTargetPosition(VuVec&)
HudProgressBar::SetIconMode(HudProgressBar::eIconMode)
HudProgressBar::SetIconPosition(float, float)
HudProgressBar::GetElementNameForMode(HudProgressBar::eIconMode)
HudProgressBar::SetIconTranslationX(float)
HudProgressBar::GetIconMode()
HudProgressBar::SetColourMode(HudProgressBar::eColourMode)
HudProgressBar::SetAssociatedPlayer(unsigned int)
HudProgressBar::ControlInit()
HudProgressBar::ControlUpdate(float)
HudState_ProgressBarDefault::~HudState_ProgressBarDefault()
HudMenuGrid::HudMenuGrid()
HudMenuGrid::~HudMenuGrid()
HudMenuGrid::SetEnabled(bool)
HudMenuGrid::IsEnabled()
HudMenuGrid::Update(LegoLevelContainer*, float)
HudMenuGrid::Restart()
HudMenuGrid::UpdateGridWithTarget(MechCharacter*)
HudMenuGrid::HighlightItem(unsigned int)
HudMenuGrid::TargetSelectedItem()
HudMenuGrid::TargetCancelled()
HudMenuGrid::Render(LegoLevelContainer*)
HudMenuGrid::ResetToSize(unsigned int, unsigned int)
HudMenuGrid::AddItem(AHudMenuItem*, unsigned int)
HudMenuGrid::AddItem(AHudMenuItem*)
HudMenuGrid::AddItem(AHudMenuItem*, unsigned int, unsigned int)
HudMenuGrid::SelectItem(AHudMenuItem*)
HudMenuGrid::IsItemSelected(AHudMenuItem const*) const
HudMenuGrid::SetGridPosition(unsigned int, unsigned int)
HudMenuGrid::Restart(int)
HudMenuGrid::GetItemIDFromPos(unsigned int, unsigned int) const
HudMenuGrid::GetItemID(AHudMenuItem*) const
HudMenuGrid::GetItemGridPos(unsigned int, unsigned int&, unsigned int&) const
HudTimer::HudTimer(unsigned int, FlashScene*)
HudTimer::~HudTimer()
HudTimer::~HudTimer()
HudTimer::Clone()
HudTimer::DeleteClone(UIControl*)
HudTimer::UpdateLevelOnly(LegoLevelContainer*, float)
HudTimer::AttachTo(MechCharacter*)
HudTimer::AttachTo(MechObjectInterface*, MechCharacter*)
HudTimer::CreateAndAttach(MechCharacter*)
HudTimer::CreateAndAttach(MechObjectInterface*, MechCharacter*)
HudTimer::Detach(MechCharacter*)
HudTimer::Detach(MechObjectInterface*)
HudTimer::IsAttached(MechObjectInterface*)
HudTimer::IsAttached(MechCharacter*)
HudTimer::ChangeIconTo(HudTimer::eTimerIconTypes)
HudTimer::GetIconType()
UIControl::Load(NuFile*)
UIControl::Init()
UIControl::Update(float)
UIControl::Render()
UIControl::Restart()
HudButtonMashUp::HudButtonMashUp(unsigned int, FlashScene*)
HudButtonMashUp::~HudButtonMashUp()
HudButtonMashUp::~HudButtonMashUp()
HudButtonMashUp::Clone()
HudButtonMashUp::DeleteClone(UIControl*)
HudButtonMashUp::UpdateLevelOnly(LegoLevelContainer*, float)
HudButtonMashUp::AttachTo(MechCharacter*, HudProgressBar::eColourMode)
HudButtonMashUp::SetIncrementSpeed(float)
HudButtonMashUp::SetMinProgress(float, float)
HudButtonMashUp::SetTargetPosition(VuVec&)
HudButtonMashUp::SetAssociatedPlayer(unsigned int)
HudButtonMashUp::HighlightFinish(float, float)
HudButtonMashUp::SetIconMode(HudProgressBar::eIconMode)
HudButtonMashUp::SetMoveIconWithIndicator(bool)
HudButtonMashUp::SetProgressBarYScale(float)
HudButtonMashUp::ShowPlayerIndicator(bool)
HudButtonMashUp::SetProgress(float, float, int)
HudButtonMashUp::CreateAndAttach(MechCharacter*, HudProgressBar::eColourMode)
HudButtonMashUp::Detach(MechCharacter*)
HudButtonMashUp::IsAttached(MechCharacter*)
HudButtonMashUp::SetUseNeutralBar(bool)
HudButtonMashUp::Release()
HudAnimatingIcon::HudAnimatingIcon(FlashElement*, int)
HudAnimatingIcon::~HudAnimatingIcon()
HudAnimatingIcon::~HudAnimatingIcon()
HudAnimatingIcon::AttachTo(MechCharacter*)
HudAnimatingIcon::PlayAnimation()
HudAnimatingIcon::StopAnimation()
HudAnimatingIcon::ControlInit()
HudAnimatingIcon::ChangeIconTo(int)
HudState_AnimatingIconDefault::OnEnter(HudControl*)
HudState_AnimatingIconDefault::~HudState_AnimatingIconDefault()
HudControl::ControlUpdate(float)
CitySideMissions::MissionScreen::MissionScreen(int)
CitySideMissions::MissionScreen::Update()
CitySideMissions::MissionScreen::UpdateState(CitySideMissions::MissionScreen::eState)
CitySideMissions::MissionScreen::SetNewState(CitySideMissions::MissionScreen::eState)
CitySideMissions::MissionScreen::Reset()
CitySideMissions::MissionScreen::InitFromElement(FlashElement*)
CitySideMissions::MissionScreen::Show()
CitySideMissions::MissionScreen::Hide(bool)
CitySideMissions::MissionScreen::IsFullyActive() const
CitySideMissions::MissionScreen::IsShowing() const
CitySideMissions::MissionScreen::GetRootElement()
CitySideMissions::MissionScreen::SetEnabled(bool)
CitySideMissions::StartScreen::StartScreen(int)
CitySideMissions::StartScreen::~StartScreen()
CitySideMissions::StartScreen::~StartScreen()
CitySideMissions::StartScreen::InitFromElement(FlashElement*)
CitySideMissions::StartScreen::EnableRoot(bool)
CitySideMissions::StartScreen::Update()
CitySideMissions::StartScreen::Clear()
CitySideMissions::StartScreen::Show()
CitySideMissions::StartScreen::Hide(bool)
CitySideMissions::StartScreen::SetTitle(char const*)
CitySideMissions::StartScreen::SetDescription(char const*)
CitySideMissions::StartScreen::SetPromptText(char const*)
CitySideMissions::StartScreen::SetStatsMode(CitySideMissions::StartScreen::eStatsMode)
CitySideMissions::StartScreen::SetStatsModeCompleted(bool)
CitySideMissions::StartScreen::SetIconTexture(NuSmartPtr<NuTexture, true>)
CitySideMissions::ExitScreen::ExitScreen(int)
CitySideMissions::ExitScreen::~ExitScreen()
CitySideMissions::ExitScreen::~ExitScreen()
CitySideMissions::ExitScreen::InitFromElement(FlashElement*)
CitySideMissions::ExitScreen::EnableRoot(bool)
CitySideMissions::ExitScreen::Update()
CitySideMissions::ExitScreen::Show()
CitySideMissions::ExitScreen::Hide(bool)
CitySideMissions::ExitScreen::SetTitle(char const*)
CitySideMissions::ExitScreen::SetPromptText(char const*)
CitySideMissions::CountDownText::CountDownText()
CitySideMissions::CountDownText::~CountDownText()
CitySideMissions::CountDownText::InitFromScene(FlashScene*)
CitySideMissions::CountDownText::Update()
CitySideMissions::CountDownText::Stop()
CitySideMissions::CountDownText::Play()
CitySideMissions::CountDownText::IsShowing()
CitySideMissions::HUDHandler::HUDHandler(int)
CitySideMissions::HUDHandler::Init()
CitySideMissions::HUDHandler::Update()
CitySideMissions::HUDHandler::EnableCountDownText(bool)
CitySideMissions::HUDHandler::EnableExitScreen(bool)
CitySideMissions::HUDHandler::EnableStartScreen(bool)
CitySideMissions::HUDHandler::Clear()
CitySideMissions::HUDHandler::GetStartScreen()
CitySideMissions::HUDHandler::GetExitScreen()
CitySideMissions::HUDHandler::GetCountDownText()
HUDSummaryScreen::HUDSummaryScreen(int)
HUDSummaryScreen::~HUDSummaryScreen()
HUDSummaryScreen::~HUDSummaryScreen()
HUDSummaryScreen::Init()
HUDSummaryScreen::Reset()
HUDSummaryScreen::EventNotify(Event&, NuEventData&)
HUDSummaryScreen::ChangePage(HUDSummaryScreen::ePage)
HUDSummaryScreen::Show(char const*, int)
HUDSummaryScreen::SetDoor(char const*)
HUDSummaryScreen::GoThroughDoor()
HUDSummaryScreen::Update(float)
HUDSummaryScreen::ShowSelectPrompt(bool, bool)
HUDSummaryScreen::ShowBackPrompt(bool, bool)
HUDSummaryScreen::DisableInputTriggers(bool)
HUDSummaryScreen::EnableDescription(bool)
HUDSummaryScreen::SetTitle(char const*)
HUDSummaryScreen::SetIconTextureID(NuSmartPtr<NuTexture, true>)
HUDSummaryScreen::SetConfirmText(char const*)
HUDSummaryScreen::EnableStatsGroup(bool)
HUDSummaryScreen::SetDescription(char const*)
HUDSummaryScreen::Hide()
HUDSummaryScreen::CanShow() const
SummarySelectionScriptEvent::Fire(NuEventData const&)
SummaryCancelScriptEvent::Fire(NuEventData const&)
CitySideMissions::MissionScreen::~MissionScreen()
CitySideMissions::MissionScreen::~MissionScreen()
SummarySelectionScriptEvent::~SummarySelectionScriptEvent()
SummaryCancelScriptEvent::~SummaryCancelScriptEvent()
HUDSummaryScreen::EventData::~EventData()
HudTimerText::HudTimerText()
HudTimerText::~HudTimerText()
HudTimerText::InitFromFlash(FlashElement*, FlashScene*)
HudTimerText::Reset()
HudTimerText::Update(float)
HudTimerText::UpdateState(HudTimerText::eState)
HudTimerText::SetNewState(HudTimerText::eState)
HudTimerText::IsShowing()
HudTimerText::SetTime(float)
HudTimerText::Hide(bool)
HudTimerText::SetEnabled(bool)
HudTimerText::IsHiding()
HudTimerText::Show()
HudTimerText::ShouldAnimateFromCentre(bool)
HudTimerText::WillAnimateFromCentre()
HudTimerText::ShouldPauseDuringMinicuts(bool)
HudTimerText::WillPauseDuringMinicuts()
HudTimerText::SetAutoAnimateEnabled(bool)
HudTimerText::Animate(bool)
HudTimerText::PlayWarning(bool)
HudTimerText::Highlight()
HudTimerText::StopTimer()
HudIcon::HudIcon()
HudIcon::~HudIcon()
HudIcon::~HudIcon()
HudIcon::SetEnabled(bool)
HudIcon::IsEnabled()
HudIcon::InitFromElement(FlashElement*)
HudIcon::SetNewState(HudIcon::eState)
HudIcon::Update(float)
HudIcon::Reset()
HudIcon::SetActive(bool, bool)
HudIcon::IsShown() const
HudIcon::GetState() const
HudIcon::UpdateChild(float)
HudIcon::InitChildFromElement(FlashElement*, FlashScene*)
HudIcon::SetNewChildState(HudIcon::eState)
HudIcon::CanSetToState(HudIcon::eState)
HudIcon::ChildReset()
UIMenuTransition::UIMenuTransition(UIMenuTransitionHandler&)
UIMenuTransitionHandler::AddToPermanentList(UIMenuTransition&)
UIMenuTransition::~UIMenuTransition()
UIMenuTransition::~UIMenuTransition()
UIMenuTransition::Update()
UIMenuTransition::IsInTransition()
UIMenuTransition::IsPaused()
UIMenuTransition::GetTimeLeft() const
UIMenuTransition::GetHashedTargetName() const
UIMenuTransition::GetHashedSourceName() const
UIMenuTransition::OnTrigger(UIMenuTransition::eDirection)
UIMenuTransition::OnComplete(UIMenuTransition::eDirection)
UIMenuTransition::Pause()
UIMenuTransition::UnPause()
UIMenuTransition::SetHashedTargetName(HashedKey const&)
UIMenuTransition::SetHashedSourceName(HashedKey const&)
UIMenuTransition::SetAnimation(FlashAnim*)
UIMenuTransitionHandler::UIMenuTransitionHandler()
UIMenuTransitionHandler::~UIMenuTransitionHandler()
UIMenuTransitionHandler::Release()
UIMenuTransitionHandler::~UIMenuTransitionHandler()
UIMenuTransitionHandler::Init()
UIMenuTransitionHandler::ResetToStart()
UIMenuTransitionHandler::GoToStart()
UIMenuTransitionHandler::UnPause()
UIMenuTransitionHandler::Update()
UIMenuTransitionHandler::GetCurrentTransition()
UIMenuTransitionHandler::Pause()
UIMenuTransitionHandler::IsPaused()
UIMenuTransitionHandler::ClearAllocations()
UIMenuTransitionHandler::GoForwards(UIMenuTransition&)
UIMenuTransitionHandler::GoBackwards()
UIMenuTransitionHandler::GoBackwardsToPage(UIMenuTransition&)
NuVector<UIMenuTransition*>::Reserve(unsigned int, bool)
UIMenuTransitionHandler::GetStartingTransition()
UIMenuTransitionHandler::FindTransitionFor(HashedKey const&, HashedKey const&)
UIMenuTransitionHandler::IsPageAlreadyVisited(HashedKey const&)
UIMenuTransitionHandler::EventNotify(Event&, NuEventData&)
UIMenuCollection::UIMenuCollection()
UIMenuCollection::~UIMenuCollection()
UIMenuCollection::InitFromScene(FlashScene*)
UIMenuCollection::Update(float)
UIMenuCollection::ClearAllocations()
UIMenuCollection::Release()
UIMenuCollection::ShowFirstPage()
UIMenuTransition::TransitionEventData::~TransitionEventData()
UIMenuPage::UIMenuPage()
UIMenuPage::~UIMenuPage()
UIMenuPage::CreateBtnGroupFromContainerRecursive(FlashElement*)
UIMenuPage::IsValidBtnGroupElement(FlashElement&)
UIMenuPage::CreateButtonGroupFromElement(FlashElement&)
UIMenuPage::InitFromElement(FlashElement&)
UIMenuPage::IsPageUsed() const
UIMenuPage::Reset()
UIMenuPage::Release()
UIMenuPage::SetPageActive(bool)
UIMenuPage::GetPageNameHash() const
UIMenuPage::GetPageName() const
UIMenuPage::GetPageElement() const
UIMenuPage::GetPageElement()
UIMenuPage::GetPageTitleElement() const
UIMenuPage::GetPageTitleElement()
UIMenuPage::GetPageSubTitleElement() const
UIMenuPage::GetPageSubTitleElement()
UIMenuPage::SetTitleText(char const*)
UIMenuPage::SetSubTitleText(char const*)
UIMenuPage::IsPageActive() const
UIMenuPage::GetButtonGroupCount() const
UIMenuPage::GetButtonGroup(unsigned int)
UIMenuPage::GetCurrentButtonGroup()
UIMenuPage::GetFreeButtonGroup()
UIMenuPageTransition::UIMenuPageTransition(UIMenuTransitionHandler&, FlashAnim&, HashedKey const&, UIMenuPage&)
UIMenuPageTransition::UIMenuPageTransition(UIMenuTransitionHandler&, FlashAnim&, UIMenuPage&, HashedKey const&)
UIMenuPageTransition::UIMenuPageTransition(UIMenuTransitionHandler&, FlashAnim&, UIMenuPage&, UIMenuPage&)
UIMenuPageTransition::OnTrigger(UIMenuTransition::eDirection)
UIMenuPageTransition::OnComplete(UIMenuTransition::eDirection)
UIMenuPageTransition::GetPage(UIMenuTransition::eDirection) const
UIMenuPageTransition::GetPage(UIMenuTransition::eDirection)
UIMenuPageManager::UIMenuPageManager(UIMenuTransitionHandler&)
UIMenuPageManager::InitFromScene(FlashScene*)
UIMenuPageManager::SetNewState(UIMenuPageManager::eState)
UIMenuPageManager::AddPagesFromAnim(FlashScene*, FlashAnim*)
UIMenuPageManager::IsValidAnim(FlashAnim*)
UIMenuPageManager::CreatePageTransitionFromAnim(FlashScene&, FlashAnim&)
UIMenuPageManager::AddPagesFromPageTransition(UIMenuPageTransition&)
UIMenuPageManager::Reset()
UIMenuPageManager::Release()
UIMenuPageManager::GetCurrentState() const
UIMenuPageManager::GetCurrentPage()
UIMenuPageManager::FindPageHashedAs(HashedKey const&)
UIMenuPageManager::FindPageForElement(FlashElement&)
UIMenuPageManager::EventNotify(Event&, NuEventData&)
UIMenuPageManager::RefreshCurrentPage()
UIMenuPageManager::OnSelectPageLink(UIMenuButton&)
UIMenuPageManager::CreatePageFromElement(FlashElement&)
UIMenuPageManager::AddPageToList(UIMenuPage&)
UIMenuPageTransition::~UIMenuPageTransition()
UIMenuPageManager::~UIMenuPageManager()
UIMenuPageManager::~UIMenuPageManager()
UIMenuPageManager::PageStateChangeEventData::~PageStateChangeEventData()
UIMenuButtonGroup::UIMenuButtonGroup()
UIMenuButtonGroup::~UIMenuButtonGroup()
UIMenuButtonGroup::Release()
UIMenuButtonGroup::IsUsed()
UIMenuButtonGroup::CreateButtonFromContainerRecursive(FlashElement*)
UIMenuButtonGroup::CreateButtonFromElement(FlashElement&)
UIMenuButtonGroup::InitFromElement(FlashElement&)
UIMenuButtonGroup::SetButtonIDsFromType(UIMenuButtonGroup::eType)
UIMenuButtonGroup::Reset()
UIMenuButtonGroup::SetType(UIMenuButtonGroup::eType)
UIMenuButtonGroup::GetType() const
UIMenuButtonGroup::GetButtonCount() const
UIMenuButtonGroup::GetButton(HashedKey const&)
UIMenuButtonGroup::GetButton(unsigned int)
UIMenuButtonGroup::GetButtonGroupElement()
UIMenuButtonGroup::SetIndexedButtonIDs()
UIMenuButtonGroup::SetNamedButtonIDs()
UIMenuButtonGroup::GetFreeButton()
UIMenuButtonGroup::GetTypeFromElement(FlashElement&)
UIMenuButton::UIMenuButton()
UIMenuButton::~UIMenuButton()
UIMenuButton::Release()
UIMenuButton::~UIMenuButton()
UIMenuButton::Reset()
UIMenuButton::SetActive(bool)
UIMenuButton::SetNewState(UIMenuButton::eState)
UIMenuButton::ClearElementList()
UIMenuButton::Render(LegoLevelContainer*)
UIMenuButton::Highlight(bool)
UIMenuButton::Select()
UIMenuButton::IsSelected() const
UIMenuButton::IsActive() const
UIMenuButton::GetButtonScene()
UIMenuButton::GetButtonElement()
UIMenuButton::GetElementWithName(HashedKey const&) const
UIMenuButton::GetButtonName() const
UIMenuButton::GetButtonID() const
UIMenuButton::GetState() const
UIMenuButton::GetInteractionType() const
UIMenuButton::GetDisplayType() const
UIMenuButton::GetTitleText() const
UIMenuButton::SetTitleText(char const*)
UIMenuButton::SetButtonName(char const*)
UIMenuButton::SetButtonID(unsigned int)
UIMenuButton::InitFromElement(FlashElement&)
UIMenuButton::AttachElementsForDisplayType()
UIMenuButton::SetInteractionType(UIMenuButton::eInteractionType)
UIMenuButton::SetDisplayType(UIMenuButton::eDisplayType)
UIMenuButton::SetSelectable(bool)
UIMenuButton::SetSelectPromptText(char const*)
UIMenuButton::SetVisible(bool)
UIMenuButton::AddElement(FlashElement&)
UIMenuButton::DisplayTypeLoader::LoadDefault(UIMenuButton&)
UIMenuButton::DisplayTypeLoader::LoadStats(UIMenuButton&)
UIMenuButton::DisplayTypeLoader::LoadCounter(UIMenuButton&)
UIMenuButton::GetInteractionTypeForElement(FlashElement&)
UIMenuButton::GetDisplayTypeForElement(FlashElement&)
UIMenuButton::DisplayTypeLoader::LoadStatsRecursive(FlashElement*, UIMenuButton&)
UIMenuButton::SelectEventData::~SelectEventData()
LegoCityFrontEnd::AutoSaveIcon::AutoSaveIcon()
LegoCityFrontEnd::AutoSaveIcon::InitFromElement(FlashElement*)
LegoCityFrontEnd::AutoSaveIcon::Reset()
LegoCityFrontEnd::AutoSaveIcon::Show()
LegoCityFrontEnd::AutoSaveIcon::Hide(bool)
LegoCityFrontEnd::LegoCityFrontEnd()
LegoCityFrontEnd::SetEnabled(bool)
LegoCityFrontEnd::~LegoCityFrontEnd()
LegoCityFrontEnd::~LegoCityFrontEnd()
LegoCityFrontEnd::SwitchOffGUI2()
LegoCityFrontEnd::HideCommonGUI2Pages(bool)
LegoCityFrontEnd::IsEnabled()
LegoCityFrontEnd::Reset()
LegoCityFrontEnd::ClearAllocations()
LegoCityFrontEnd::InitFromContext(UIContext&)
LC_FrontEndPageData::Init()
LegoCityFrontEnd::Update(LegoLevelContainer*, float)
LC_FrontEndPageData::UpdatePageData(UIMenuPage&)
LegoCityFrontEnd::UpdateUserNameText()
LegoCityFrontEnd::HideAutoSaveIcon(bool)
LegoCityFrontEnd::Release()
LegoCityFrontEnd::SetCanUsePlayerInput(bool)
LegoCityFrontEnd::CanUsePlayerInput()
LegoCityFrontEnd::CanUsePlayerInput() const
LegoCityFrontEnd::DisablePageInput()
LC_FrontEndPageData::UpdatePromptVisibility()
LegoCityFrontEnd::EnablePageInput(UIMenuPage&, bool)
LegoCityFrontEnd::GetHighlightIndex(char const*)
LC_FrontEndPageData::OnPageEnabled(UIMenuPage&)
LegoCityFrontEnd::ExitFrontEnd()
LegoCityFrontEnd::SetNextScreen(APIFlowScreen::Tag)
LegoCityFrontEnd::EventNotify(Event&, NuEventData&)
LegoCityFrontEnd::OnReceivePageEvent(UIMenuPageManager&, UIMenuPageManager::eState)
LegoCityFrontEnd::LoadNextPage(HashedKey const&)
LC_FrontEndPageData::GetMenuBtnIDFromGUI2BtnName(char const*, char const*)
LC_FrontEndPageData::LoadPageData(UIMenuPage&)
LegoCityFrontEnd::UnloadCurrentPage()
LC_FrontEndPageData::UnloadPageData(UIMenuPage&)
LegoCityFrontEnd::SetCurrentScreen(APIFlowScreen::Tag)
LegoCityFrontEnd::InitAutoSaveIconFromPage(UIMenuPage const&)
LegoCityFrontEnd::ShowAutoSaveIcon()
UIMenuPageDataHandlers::UIMenuPageDataHandlers(UIMenuCollection&)
UIMenuPageDataHandlers::LoadPage(UIMenuPage&)
UIMenuPageDataHandlers::SplashPageData::LoadPage(UIMenuPage&)
UIMenuPageDataHandlers::MainMenuPageData::LoadPage(UIMenuPage&)
UIMenuPageDataHandlers::OptionsPageData::LoadPage(UIMenuPage&)
UIMenuPageDataHandlers::SaveSlotsPageData::LoadPage(UIMenuPage&, UIMenuPageDataHandlers::SaveSlotsPageData::eMode)
UIMenuPageDataHandlers::GenericPageData::LoadPage(UIMenuPage&, UIMenuPageDataHandlers::GenericPageData::eMode, bool)
UIMenuPageDataHandlers::LanguageSelectPageData::LoadPage(UIMenuPage&)
UIMenuPageDataHandlers::ShowControlsPageData::LoadPage(UIMenuPage&)
UIMenuPageDataHandlers::GenericPageData::LoadPage(UIMenuPage&)
UIMenuPageDataHandlers::UpdatePage(UIMenuPage&)
UIMenuPageDataHandlers::GenericPageData::UpdatePage(UIMenuPage&)
UIMenuPageDataHandlers::UnloadPage(UIMenuPage&)
UIMenuPageDataHandlers::MainMenuPageData::UnloadPage(UIMenuPage&)
UIMenuPageDataHandlers::OnPageEnabled(UIMenuPage&)
UIMenuPageDataHandlers::SplashPageData::UpdateTitles(UIMenuPage&)
UIMenuPageDataHandlers::MainMenuPageData::UpdateTitles(UIMenuPage&)
UIMenuPageDataHandlers::OptionsPageData::UpdateTitles(UIMenuPage&)
UIMenuPageDataHandlers::OptionsPageData::UpdateMusic(UIMenuPage&)
UIMenuPageDataHandlers::OptionsPageData::UpdateVolume(UIMenuPage&)
UIMenuPageDataHandlers::OptionsPageData::UpdateSubtitles(UIMenuPage&)
UIMenuPageDataHandlers::OptionsPageData::OptionsPageData(UIMenuPageManager&)
UIMenuPageDataHandlers::OptionsPageData::EventNotify(Event&, NuEventData&)
UIMenuPageDataHandlers::SaveSlotsPageData::UpdateSlotText(UIMenuPage&, unsigned int)
NuDynamicStringT<false>::Format(char const*, ...)
UIMenuPageDataHandlers::ShowControlsPageData::UpdateControllerImage(UIMenuPage&)
UIMenuPageDataHandlers::ShowControlsPageData::UpdateControllerText(UIMenuPage&, FlashElement&)
UIMenuPageDataHandlers::LanguageSelectPageData::UpdateTitles(UIMenuPage&)
UIMenuPageDataHandlers::UIMenuGUI2OverridePanel::UIMenuGUI2OverridePanel(FlashElement&, GUI2Panel&)
UIMenuPageDataHandlers::UIMenuGUI2OverridePanel::UpdateImageFromGUI2()
UIMenuPageDataHandlers::UIMenuGUI2OverrideText::UIMenuGUI2OverrideText(FlashElement&, GUI2Text&)
UIMenuPageDataHandlers::UIMenuGUI2OverrideText::UpdateTextFromGUI2()
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenuEntry::UIMenuGUI2OverrideMenuEntry(UIMenuButton&, GUI2MenuEntry&, char const*, bool)
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenuEntry::StoreMenuButtonDefaults()
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenuEntry::AddGUI2Overrides(GUI2Object*)
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenuEntry::UpdateButtonFromGUI2()
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenuEntry::~UIMenuGUI2OverrideMenuEntry()
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenuEntry::RestoreMenuButtonDefaults()
LC_FrontEndPageData::GetMenuBtnNameFromGUI2BtnName(char const*, char const*)
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenuEntry::AddGUI2TextOverride(GUI2Text&)
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenuEntry::AddGUI2PanelOverride(GUI2Panel&)
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenu::UIMenuGUI2OverrideMenu(UIMenuButtonGroup&, GUI2Menu&, char const*)
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenu::AddGUI2OverrideMenuEntries()
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenu::UpdateButtonGroupFromGUI2()
UIMenuPageDataHandlers::UIMenuGUI2OverrideMenu::~UIMenuGUI2OverrideMenu()
LC_FrontEndPageData::GetGUI2BtnNameFromMenuBtnName(char const*, char const*, unsigned int, char*)
UIMenuPageDataHandlers::GenericPageData::UpdateTitles(UIMenuPage&)
LC_FrontEndPageData::LC_FrontEndPageData(UIMenuCollection&)
LC_FrontEndPageData::~LC_FrontEndPageData()
LC_FrontEndPageData::UpdatePromptText()
LC_FrontEndPageData::SetPromptVisible(LC_FrontEndPageData::ePromptID, bool)
UIMenuPageDataHandlers::OptionsPageData::~OptionsPageData()
NuVector<UIMenuPageDataHandlers::UIMenuGUI2OverrideText*>::Reserve(unsigned int, bool)
NuVector<UIMenuPageDataHandlers::UIMenuGUI2OverridePanel*>::Reserve(unsigned int, bool)
NuVector<UIMenuPageDataHandlers::UIMenuGUI2OverrideMenuEntry*>::Reserve(unsigned int, bool)
UIOverlay_Window::Init()
UIOverlay::Init()
UIOverlay_Window::Release()
UIOverlay::Release()
UIOverlay_Window::Clear()
UIOverlay::Clear()
UIOverlay_Window::Restart()
UIOverlay::Restart()
UIOverlay_Window::UpdateLevelOnly(LegoLevelContainer*, float)
UIOverlay::UpdateLevelOnly(LegoLevelContainer*, float)
UIOverlay_Window::RenderLevelOnly(LegoLevelContainer*)
UIOverlay_Window::UIOverlay_Window(unsigned int)
UIOverlay::UIOverlay(UIOverlays::eOverlayType)
WindowScreenState_WindowOverlay::OnEnter(HudControl*)
WindowScreenState_WindowOverlay::Update(HudControl*, LegoLevelContainer*, float)
WindowScreenState_WindowOverlay::OnExit(HudControl*)
UIOverlaysManager::AddOverlayInstance(UIOverlay*)
UIOverlaysManager::RemoveOverlay(UIOverlay*)
UIOverlay::~UIOverlay()
UIOverlay::Load(NuFile*)
UIItemLoader<UIOverlay, UIControl>::Load(NuFile*)
UIItemLoader<UIOverlay, UIControl>::Init()
UIItemLoader<UIOverlay, UIControl>::Release()
UIItemLoader<UIOverlay, UIControl>::Clear()
UIOverlay::CreateRootElement()
UIItemLoader<UIOverlay, UIControl>::Restart()
UIOverlay::RenderLevelOnly(LegoLevelContainer*)
UIOverlay::Update(float)
UIItemLoader<UIOverlay, UIControl>::Update(float)
UIOverlay::Render()
UIItemLoader<UIOverlay, UIControl>::Render()
UIOverlay::FindNamedItem(char const*)
UIOverlay::SetText(char const*)
UIOverlay::FindSceneElement(char const*)
UIOverlay::SetDepth(float)
UIOverlay::GetFlashSystem() const
UIOverlays::CreateFromType(int)
UIOverlay::SetEnabled(bool)
UIOverlaysManager::PushOverlay(UIOverlay*)
UIOverlaysManager::GetLastOverlay()
UIOverlaysManager::HasOverlay(UIOverlay const*)
UIOverlaysManager::PopOverlay()
UIOverlaysManager::RemoveOverlay(unsigned int)
UIOverlaysManager::ClearAllActive()
UIOverlaysManager::InitAll()
UIOverlaysManager::ReleaseAll()
UIOverlaysManager::DebugTestAll()
UIOverlaysManager::Update(float)
UIOverlaysManager::ClearRemoveList()
UIOverlaysManager::UpdateLevelOnly(LegoLevelContainer*, float)
UIOverlaysManager::Render()
UIOverlaysManager::RenderLevelOnly(LegoLevelContainer*)
WindowScreenState_WindowOverlay::~WindowScreenState_WindowOverlay()
UIOverlay::~UIOverlay()
UIOverlay_Window::~UIOverlay_Window()
UIItemLoader<UIOverlay, UIControl>::CreateItemFromType(int)
UIOverlay::EnablementChanged()
UIOverlay_Window::HudWindow_Overlay::~HudWindow_Overlay()
UIItemLoader<UIOverlay, UIControl>::~UIItemLoader()
UIItemLoader<UIOverlay, UIControl>::~UIItemLoader()
UIItemLoader<UIOverlay, UIControl>::Unload()
UIControl::UIControl(eUIControlType)
UIControl::~UIControl()
UIControl::~UIControl()
UIControl::Clone()
UIControl::DeleteClone(UIControl*)
UIControl::UpdateLevelOnly(LegoLevelContainer*, float)
UIControl::RenderLevelOnly(LegoLevelContainer*)
UIControl::Release()
UIControl::Clear()
UIContextContainer_Core::UIContextContainer_Core(UIContext&)
UIContextContainer_Core::~UIContextContainer_Core()
UIContextContainer_Core::~UIContextContainer_Core()
UIContextContainer_Core::Unload()
UIContextContainer_Core::GetTextureManager()
UIContextContainer_Core::Clear()
UIContext::UIContext(int const&)
UIContext::SetContainerHandler(UIContainerHandler&)
UIContext::~UIContext()
non-virtual thunk to UIContext::~UIContext()
UIContext::~UIContext()
non-virtual thunk to UIContext::~UIContext()
UIContext::FindNamed(char const*)
UIContext::CreateItemFromType(int)
UIContext::Init()
UIItemLoader<UIContext, UIOverlay>::Init()
UIContext::Restart()
UIContext::Clear()
UIContext::GetFlashContext()
UIContext::Release()
UIItemLoader<UIContext, UIOverlay>::Release()
UIContext::Update(float)
UIItemLoader<UIContext, UIOverlay>::Update(float)
UIContext::UpdateLevelOnly(LegoLevelContainer*, float)
UIContext::Render()
UIItemLoader<UIContext, UIOverlay>::Render()
UIContext::RenderLevelOnly(LegoLevelContainer*)
UIContext::GetOverlays()
UIContext::GetTextureManager()
UIContext::GetTextureManager(LegoLevelContainer*)
UIContext::Get(unsigned int)
UIContext::GetFrom(FlashContext&)
UIContext::GetCurrent()
UIContextManager::SetAsCurrentContext(int)
UIContextManager::FinishUsingContext()
UIContextManager::UIContextManager(UIContext&)
UIContextManager::~UIContextManager()
UIContextManager::GetFlashSystem(int)
UIContext::AddManagersForLevel(LegoLevelContainer&)
UIContext::RemoveManagersForLevel(LegoLevelContainer&)
UIContext::OnEnterLevel(LegoLevelContainer&)
UIContext::OnExitLevel(LegoLevelContainer&)
UIContext::EventNotify(Event&, NuEventData&)
non-virtual thunk to UIContext::EventNotify(Event&, NuEventData&)
UIItemLoader<UIContext, UIOverlay>::Load(NuFile*)
UIItemLoader<UIContext, UIOverlay>::~UIItemLoader()
UIItemLoader<UIContext, UIOverlay>::~UIItemLoader()
UIItemLoader<UIContext, UIOverlay>::Clear()
UIItemLoader<UIContext, UIOverlay>::Restart()
UIItemLoader<UIContext, UIOverlay>::CreateItemFromType(int)
UIItemLoader<UIContext, UIOverlay>::Unload()
UIContainerHandlerDefault<UIContextContainer_Default>::~UIContainerHandlerDefault()
UIContainerHandlerDefault<UIContextContainer_Default>::~UIContainerHandlerDefault()
UIContainerHandlerDefault<UIContextContainer_Default>::CreateContainerForLevel(LegoLevelContainer*, UIContext&)
UIContainerHandlerDefault<UIContextContainer_Default>::GetContainerForLevel(LegoLevelContainer*)
UIContextContainer<UIContextContainer_Default>::~UIContextContainer()
UIContextContainer_Default::~UIContextContainer_Default()
UIContextContainer<UIContextContainer_Default>::RegisterProcessing()
UIContextContainer<UIContextContainer_Default>::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
UIContextContainer<UIContextContainer_Default>::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
non-virtual thunk to UIContextContainer_Default::~UIContextContainer_Default()
non-virtual thunk to UIContextContainer_Default::~UIContextContainer_Default()
non-virtual thunk to UIContextContainer<UIContextContainer_Default>::RegisterProcessing()
non-virtual thunk to UIContextContainer<UIContextContainer_Default>::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
non-virtual thunk to UIContextContainer<UIContextContainer_Default>::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
UIStatsBar::UIStatsBar()
UIStatsBar::~UIStatsBar()
UIStatsBar::InitFromElement(FlashElement*, FlashScene*)
UIStatsBar::Reset()
UIStatsBar::HideAllStats()
UIStatsBar::ShowAllStats()
UIStatsBar::ShowStat(UIStatsBar::eStatType)
UIStatsBar::HideStat(UIStatsBar::eStatType)
UIStatsBar::UpdateStatIconVisibility(UIStatsBar::eStatType, bool, bool)
UIStatsBar::SetStatValue(UIStatsBar::eStatType, unsigned int, unsigned int)
UIStatsBar::SetStatValue(UIStatsBar::eStatType, int, int)
UIStatsBar::SetStatValue(UIStatsBar::eStatType, float, float)
UIStatsBar::GetStatTextElement(UIStatsBar::eStatType)
UIStatsBar::GetIconElementFromStatType(UIStatsBar::eStatType, bool)
UIStatsBar::SetStatsFromArea(UIStatsBar&, int, bool)
UIStatsBar::SetStatsFromCurrentArea(UIStatsBar&, unsigned int)
UIStatsBar::SetStatsFromDistrict(UIStatsBar&, eDistrictID)
UIStatsBar::SetStatsFromCurrentDistrict(UIStatsBar&, unsigned int)
UIButtonPromptElement::UIButtonPromptElement(unsigned int)
UIButtonPromptElement::AttachToPlayer(unsigned int)
UIButtonPromptElement::~UIButtonPromptElement()
UIButtonPromptElement::ClearElementString()
UIButtonPromptElement::~UIButtonPromptElement()
UIButtonPromptElement::InitFromElement(FlashElement*)
UIButtonPromptElement::RefreshElementString()
UIButtonPromptElement::SetButtonPromptString(char const*, bool)
UIButtonPromptElement::EventNotify(Event&, NuEventData&)
UIButtonPromptElement::GetElement() const
HudCommon::GetPanelRenderQuad(FlashElement*, HudCommon::FlashToPanel_RenderQuad&, bool)
HudCommon::Calculate2DFrom3D(MechCharacter*, VuVec const&, VuVec&)
HudCommon::FlashToPanelCoordinates(float, float, float&, float&)
HudCommon::FlashToPanelCoordinatesX(float, float&)
HudCommon::PanelToFlashCoordinates(float, float, float&, float&)
HudCommon::CalculateScreenPos(bool, bool, float, MechCharacter*, VuVec const&, VuVec&)
HudCommon::FlashToPanelCoordinatesY(float, float&)
HudAnimation::HudAnimation(char const*, unsigned char, HudElement*, bool)
HudAnimation::Play()
HudAnimation::HudAnimation(char const*, unsigned char, FlashScene*)
HudAnimation::HudAnimation(char const*, unsigned char)
HudAnimation::HudAnimation(HudElement*, unsigned char, FlashSystem*)
HudAnimation::HudAnimation(HudAnimation&, unsigned char)
HudAnimation::Stop() const
HudAnimation::ReverseRewind() const
HudAnimation::Rewind() const
HudAnimation::IsPlaying() const
HudAnimation::Update(float) const
HudAnimation::IsAnimation(char const*)
HudElementManager::AddLayer(FlashScene*, bool)
HudElementManager::RemoveLayer(FlashScene*)
HudElementManager::RemoveLayer(HudSceneLayer*)
HudElementManager::UpdateHudElement(HudElement*, float, bool)
HudElementManager::RequestToDisableElement(HudElement*, bool)
HudElementManager::EnableHudElement(HudElement*, bool)
HudElementManager::DisableHudElement(HudElement*, bool)
HudElementManager::Update(float)
HudElementManager::ClearAllLayers()
HudElementManager::ClearLayer(HudSceneLayer*)
HudElementManager::ResetAllLayers()
HudElementManager::ResetLayer(HudSceneLayer*)
HudElementManager::ReleaseAllLayers()
HudElementManager::AllocateLayerHudElement(HudSceneLayer*)
HudElementManager::CreateHudElement(char const*, char const*, char const*, HudElement*, FlashScene*, FlashSystem*)
HudElementManager::IsHudElementDestroying(HudElement const*)
HudElementManager::CreateHudElementAnimations(HudElement*, char const*, char const*, HudElement*, FlashSystem*)
HudElementManager::CreateHudElementGroup(char const*, char const*)
HudElementManager::SetDisableAnimation(HudElement*, HudAnimation*)
HudElementManager::SetDisableAnimation(HudElement*, char const*, HudElement*)
HudElementManager::SetEnableAnimation(HudElement*, HudAnimation*)
HudElementManager::SetEnableAnimation(HudElement*, char const*, HudElement*)
HudElementManager::SetVisibility(HudElement*, bool)
HudElementManager::SetChildVisibility(HudElement*, char const*, bool)
HudElementManager::FindSceneElement(HudElement const*, char const*)
HudElementManager::ValidateNewStateRequest(HudElement*, unsigned int, unsigned int&)
HudElementManager::RequestToEnableElement(HudElement*, float, bool, bool)
HudElementManager::ReplayEnabling(HudElement*)
HudElementManager::IsHudElementEnabled(HudElement const*)
HudElementManager::GetRemainingLife(HudElement const*)
HudElementManager::IsHudElementDisabled(HudElement const*)
HudElementManager::IsHudElementActive(HudElement const*)
HudElementManager::ReleaseLayer(HudSceneLayer*)
HudElementManager::ReleaseHudElement(HudSceneLayer*, int)
HudElementManager::RemoveHudElement(HudElement*)
HudElementManager::GetFlashElement(HudElement*)
HudElementManager::FindSceneElement(char const*)
HudElementManager::GetBestTextID(char const*, float, float)
HudElementManager::HudElementEventData::~HudElementEventData()
HudControl::HudControl(unsigned int, unsigned int, unsigned int, unsigned int)
HudControl::Reset()
HudControl::Init()
HudControl::Release()
HudControl::Clear()
HudControl::UnregisterElement(unsigned int)
HudControl::UpdateLevelOnly(LegoLevelContainer*, float)
HudControl::RenderLevelOnly(LegoLevelContainer*)
HudControl::AttachToObject(int, int, MechCharacter*, int, bool)
HudControl::SetRenderTechnique(HudRenderTechnique*, unsigned int)
HudControl::EventNotify(Event&, NuEventData&)
HudControl::OnDestroyHudElement(HudElement const*)
HudControl::OnDestroyControl()
HudControl::IsActive()
HudControl::ElementsDisabled()
HudControl::GetText(unsigned int)
HudControl::SetText(char const*, unsigned int, unsigned char, float)
HudControl::SetTextElement(unsigned int, char const*, unsigned char, float)
HudControl::SetText(int, unsigned int, unsigned char, float)
HudControl::SetCounterText(unsigned int, unsigned int, unsigned int, float)
HudControl::SetNumberText(unsigned int, unsigned int, float)
HudControl::SetNumberText(unsigned int, unsigned long, float)
HudControl::GetChild(unsigned int)
HudControl::FreeText(unsigned int, unsigned char)
HudControl::RegisterElement(unsigned int, char const*, char const*, char const*, HudElement*)
HudControl::RegisterChild(unsigned int, HudElement const*, char const*)
HudControl::RegisterAnimation(unsigned int, HudAnimation*)
HudControl::ShowElement(unsigned int, bool, float)
HudControl::GetChild(unsigned int) const
HudControl::GetAnimation(unsigned int)
HudControl::GetAnimation(unsigned int) const
HudControl::SetCurrentState(HudState&)
HudControl::Restart()
HudState_Empty::Update(HudControl*, LegoLevelContainer*, float)
HudState_Empty::OnExit(HudControl*)
HudControl::~HudControl()
HudControl::ControlInit()
HudState_Empty::OnEnter(HudControl*)
HudState_Empty::~HudState_Empty()
HudRender_GameObjectIcon::HudRender_GameObjectIcon(VuVec const&, int, FlashElement*, HudRender_GameObjectIcon::AttachmentPosition)
HudRender_GameObjectIcon::SetTargetPosition(VuVec const&)
HudRender_GameObjectIcon::HudRender_GameObjectIcon(MechObjectInterface*, HudElement*, HudRender_GameObjectIcon::AttachmentPosition)
HudRender_GameObjectIcon::HudRender_GameObjectIcon(MechObjectInterface*, FlashElement*, HudRender_GameObjectIcon::AttachmentPosition)
HudRender_GameObjectIcon::HudRender_GameObjectIcon(MechCharacter*, HudElement*, HudRender_GameObjectIcon::AttachmentPosition)
HudRender_GameObjectIcon::HudRender_GameObjectIcon(MechCharacter*, FlashElement*, HudRender_GameObjectIcon::AttachmentPosition)
HudRender_GameObjectIcon::~HudRender_GameObjectIcon()
HudRender_GameObjectIcon::~HudRender_GameObjectIcon()
HudRender_GameObjectIcon::Update(HudControl*, float)
HudRender_GameObjectIcon::HasValidTarget()
HudRender_GameObjectIcon::SetIconRenderPos(NUVEC&)
HudRender_GameObjectIcon::Render(HudControl*, LegoLevelContainer*)
HudRender_GameObjectIcon::ValidateFlashScreenPos(NUVEC2&, FlashElement*) const
HudRender_GameObjectIcon::ValidatePanelScreenPos(NUVEC&, FlashElement*) const
HudRender_GameObjectIcon::Callback_GameMsgDraw(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
RenderRotateFlat(HudCommon::FlashToPanel_RenderQuad const&, NUVEC2 const&, NuColour&, nuhspecial_s*, NUVEC const&)
RenderRotateFlatWithColour(HudCommon::FlashToPanel_RenderQuad const&, NUVEC2 const&, NuColour&, nuhspecial_s*, NUVEC const&)
RenderRotate3D(HudCommon::FlashToPanel_RenderQuad const&, NUVEC2 const&, NuColour&, nuhspecial_s*, NUVEC const&)
RenderFlatWithColour(HudCommon::FlashToPanel_RenderQuad const&, NUVEC2 const&, NuColour&, nuhspecial_s*, NUVEC const&)
HudRender_Special::HudRender_Special(FlashElement*, FlashElement*, int, void (*)(HudCommon::FlashToPanel_RenderQuad const&, NUVEC2 const&, NuColour&, nuhspecial_s*, NUVEC const&), bool, NUVEC*)
HudRender_Special::HudRender_Special(HudElement*, FlashElement*, int, void (*)(HudCommon::FlashToPanel_RenderQuad const&, NUVEC2 const&, NuColour&, nuhspecial_s*, NUVEC const&), bool, NUVEC*)
HudRender_Special::Update(HudControl*, float)
HudRender_Special::Render(HudControl*, LegoLevelContainer*)
HudRender_Special::CalculateSpecialToPanelTransform(LegoLevelContainer&)
HudRender_Special::DebugRender()
HudRenderTechnique::~HudRenderTechnique()
HudRender_Special::~HudRender_Special()
HudMenuRadial::HudMenuRadial(int, unsigned int, CHOOSER_ENTRY*, CHOOSER_ITEM*)
HudMenuRadial::Resize(unsigned int)
HudMenuRadial::HudMenuRadial(int)
HudMenuRadial::~HudMenuRadial()
HudMenuRadial::SetEnabled(bool)
HudMenuRadial::Update(LegoLevelContainer*, float)
HudMenuRadial::Restart()
HudMenuRadial::HighlightItem(unsigned int)
HudMenuRadial::Render(LegoLevelContainer*)
HudMenuRadial::AddItem(AHudMenuItem*)
HudMenuRadial::SelectItem(AHudMenuItem*)
HudMenuRadial::IsItemSelected(AHudMenuItem const*) const
HudMenuItem::HudMenuItem(char*, NUVEC&)
HudMenuItem::~HudMenuItem()
HudMenuItem::~HudMenuItem()
HudMenuItem::Render(LegoLevelContainer*)
HudMenuItem::Highlight(bool)
HudMenuItem::Select()
HudMenuItem::IsSelected() const
HudMenuItem::IsActive() const
HudMoveToTarget::HudMoveToTarget(FlashElement*, FlashElement*, float)
HudMoveToTarget::SetDirection(bool)
HudMoveToTarget::Update(float)
HudMoveToTarget::SetSourcePos(NUVEC2 const&)
HudMoveToTarget::GetAbsoluteTopLeftPosition(NUVEC2&, FlashElement*)
HudEventListener::Init()
HudEventListener::EventNotify(Event&, NuEventData&)
LegoCityHud::Exit()
MiniCutAnimManager::MiniCutAnimManager()
MiniCutAnimManager::Reset()
MiniCutAnimManager::InitFromContext(FlashContext&)
MiniCutAnimManager::RefreshList(FlashContext&)
MiniCutAnimManager::PlayMinicutAnims(MiniCutAnimManager::eAnimListID)
MiniCutAnimManager::GetLastPlayedAnimList()
PauseMenuAnimManager::PauseMenuAnimManager()
PauseMenuAnimManager::Reset()
PauseMenuAnimManager::InitFromContext(FlashContext&)
PauseMenuAnimManager::RefreshList(FlashContext&)
PauseMenuAnimManager::PlayPauseAnims(PauseMenuAnimManager::eAnimListID)
PauseMenuAnimManager::GetLastPlayedAnimList()
HudTextureManager::~HudTextureManager()
HudMode::~HudMode()
LegoCityHud::Init()
LegoCityHud::LoadMainScene()
HudModesManager::Get()
LegoCityHud::ClearHud(LegoLevelContainer&)
LegoCityHud::PopOverlay()
LegoCityHud::SetEnabled(bool)
LegoCityHud::UnloadMainScene()
LegoCityHud::IsEnabled()
LegoCityHud::Update(float)
LegoCityHud::PlayerFadeInProgress(int)
LegoCityHud::UpdateLevelOnly(LegoLevelContainer*, float)
LegoCityHud::UpdateHudMode()
LegoCityHud::GetTrueHeroBarMaximum(LegoLevelContainer*)
LegoCityHud::RestartHud(LegoLevelContainer*)
LegoCityHud::UpdatePlayerHudSuppression()
LegoCityHud::SwitchPlayerMode(short)
LegoCityHud::SuppressForPlayer(int)
LegoCityHud::RemoveOverlay(LegoCityHudOverlay*)
LegoCityHud::IsPaused()
LegoCityHud::SetCameraFor2D()
LegoCityHud::Render()
LegoCityHud::RenderLevelOnly(LegoLevelContainer*)
LegoCityHud::AddManagersForLevel(LegoLevelContainer&)
LegoCityHud::RemoveManagersForLevel(LegoLevelContainer&)
LegoCityHud::ActivateLevel(LegoLevelContainer&)
LegoCityHud::OnDestroyingLevel(LegoLevelContainer&)
LegoCityHud::ReleaseLevelOnly(LegoLevelContainer&)
LegoCityHud::DrawAstroFilter()
LegoCityHud::LoadScene(char const*)
LegoCityHud::UnloadScene(FlashScene*)
LegoCityHud::HasOverlay(LegoCityHudOverlay const*)
LegoCityHud::PushOverlay(LegoCityHudOverlay*)
LegoCityHud::RemoveOverlay(unsigned int)
LegoCityHud::AddPlayerHud(LegoCityHudPlayer*)
LegoCityHud::ActivateTrueHeroBar(bool)
LegoCityHud::SetAlwaysDrawTrueHeroBarWhenDone(bool)
LegoCityHud::IsTrueHeroBarActivated()
LegoCityHud::SetTrueHeroBarMaximum(unsigned long)
LegoCityHud::SetText(int, unsigned int, unsigned char, float)
LegoCityHud::SetText(char*, unsigned int, unsigned char, float)
LegoCityHud::SetDebugText(unsigned int, char const*, unsigned char, float)
LegoCityHud::FreeText(unsigned int, unsigned char)
LegoCityHud::SuppressedForPlayer(int)
LegoCityHud::RenderStudCounters()
LegoCityHud::GetHUDTextureManager()
LegoCityHud::GetHUDTextureManagerGlobal()
HudEventListener::~HudEventListener()
Mode_TrueHeroBar::OnEnter()
Mode_TrueHeroBar::OnExit()
Mode_TrueHeroBar::~Mode_TrueHeroBar()
Mode_DefaultHUDMode::OnEnter()
Mode_DefaultHUDMode::OnExit()
Mode_DefaultHUDMode::~Mode_DefaultHUDMode()
UIContainerHandlerDefault<HUD_UIContextContainer>::~UIContainerHandlerDefault()
UIContainerHandlerDefault<HUD_UIContextContainer>::~UIContainerHandlerDefault()
UIContainerHandlerDefault<HUD_UIContextContainer>::CreateContainerForLevel(LegoLevelContainer*, UIContext&)
UIContainerHandlerDefault<HUD_UIContextContainer>::GetContainerForLevel(LegoLevelContainer*)
UIContextContainer<HUD_UIContextContainer>::~UIContextContainer()
HUD_UIContextContainer::~HUD_UIContextContainer()
UIContextContainer<HUD_UIContextContainer>::RegisterProcessing()
UIContextContainer<HUD_UIContextContainer>::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
UIContextContainer<HUD_UIContextContainer>::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
non-virtual thunk to HUD_UIContextContainer::~HUD_UIContextContainer()
non-virtual thunk to HUD_UIContextContainer::~HUD_UIContextContainer()
non-virtual thunk to UIContextContainer<HUD_UIContextContainer>::RegisterProcessing()
non-virtual thunk to UIContextContainer<HUD_UIContextContainer>::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
non-virtual thunk to UIContextContainer<HUD_UIContextContainer>::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoCityHudOverlay::~LegoCityHudOverlay()
HudDialogueBox::HudDialogueBox()
HudDialogueBox::~HudDialogueBox()
HudDialogueBox::~HudDialogueBox()
HudDialogueBox::SetDialogue(char const*, char const*, float, float)
HudDialogueBox::ControlInit()
HudDialogueBox::ControlUpdate(float)
HudState_DialogueBoxDefault::OnEnter(HudControl*)
HudState_DialogueBoxDefault::Update(HudControl*, LegoLevelContainer*, float)
HudState_DialogueBoxDefault::OnExit(HudControl*)
LegoCityHudDialogue::Init()
LegoCityHudDialogue::Release()
LegoCityHudDialogue::Clear()
LegoCityHudDialogue::Restart()
LegoCityHudDialogue::UpdateLevelOnly(LegoLevelContainer*, float)
LegoCityHudDialogue::RenderLevelOnly(LegoLevelContainer*)
LegoCityHudDialogue::~LegoCityHudDialogue()
HudState_DialogueBoxDefault::~HudState_DialogueBoxDefault()
HudState_PlayerDefault::~HudState_PlayerDefault()
HudPlayer::HudPlayer(unsigned int)
HudPlayer::~HudPlayer()
HudPlayer::~HudPlayer()
HudPlayer::ControlInit()
HudPlayer::ControlUpdate(float)
HudPlayer::Clear()
HudPlayer::GetCharWheelElement()
HudPlayer::SetBnBLastCollectedTint(NuColour)
HudPlayer::HighlightBnBCounter()
HudPlayer::ShowBnBCounter(WORLDINFO*, bool)
HudPlayer::ShowBnBCounter(WORLDINFO*, bool, float)
HudPlayer::GetBnBBrickScale()
HudPlayer::GetBnBCurrentPanelY()
HudPlayer::SetHeartsDisplayMode(HudPlayer::eHeartsDisplayMode)
HudPlayer_DrawBrickMsg(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
HudPlayer::CollectBnBBrick(NUVEC const&, int, NUCOLOUR3 const&)
HudPlayer::AddToBnBCounter_CallBack(GAMEMESSAGE*)
HudPlayer::ReduceBrickCount(unsigned long)
HudPlayer::ExtraPanelInfoFn_HudPlayer(WORLDINFO&, float*)
HudState_PlayerDefault::OnEnter(HudControl*)
HudState_PlayerDefault::Update(HudControl*, LegoLevelContainer*, float)
HudState_PlayerDefault::OnExit(HudControl*)
HudState_PlayerDefault::RegisterDefaultElements(HudPlayer&)
HudState_PlayerOne::OnEnter(HudControl*)
HudState_PlayerOne::OnExit(HudControl*)
HudState_PlayerTwo::OnEnter(HudControl*)
HudState_PlayerTwo::OnExit(HudControl*)
HudState_PlayerCustom::OnEnter(HudControl*)
LegoCityHudPlayer::LegoCityHudPlayer()
LegoCityHudPlayer::SetEnabled(bool)
LegoCityHudPlayer::~LegoCityHudPlayer()
LegoCityHudPlayer::~LegoCityHudPlayer()
LegoCityHudPlayer::Init()
LegoCityHudPlayer::Release()
LegoCityHudPlayer::HideAllHelpScreens(bool)
HUDScreenManager::HideAllScreens(bool)
LegoCityHudPlayer::ReleaseLevelOnly()
LegoCityHudPlayer::SetCharacterNameVisibility(bool)
LegoCityHudPlayer::SetGoalIconsVisibility(bool)
LegoCityHudPlayer::Clear()
LegoCityHudPlayer::EndCall()
CharacterSelectInputController::ResetLastSelection()
LegoCityHudPlayer::Restart()
HUDScreenManager::Init()
HUDScreenManager::Reset()
LegoCityHudPlayer::HelpScreens::InitFromScene(FlashScene*)
LegoCityHudPlayer::PlayingCharacterDisguiseChanged(MechCharacter const*, int)
LegoCityHudPlayer::HighlightCharName()
LegoCityHudPlayer::CanShowCharacterToggle()
LegoCityHudPlayer::UpdateLevelOnly(LegoLevelContainer*, float)
CharacterSelectInputController::CheckInputForPlayer(MechCharacter*)
CharacterSelectInputController::SetAsUsingLastInput(bool)
LegoCityHudPlayer::UpdatePanelElements(bool, float)
HUDScreenManager::Update(float)
LegoCityHudPlayer::ChangeCharacterID(MechCharacter*)
LegoCityHudPlayer::PhoneCall()
LegoCityHudPlayer::HandleInActiveGridCell()
LegoCityHudPlayer::RenderLevelOnly(LegoLevelContainer*)
ConvertFlashCoordstoPanelCoords(FlashElement_RenderQuad&, float&, float&)
LegoCityHudPlayer::HelpScreens::IsShowingAnyScreen()
LegoCityHudPlayer::UpdateHiddenIcon()
LegoCityHudPlayer::ChangeCharacterIDToIndex(int)
LegoCityHudPlayer::ChangeCharacterID(short)
LegoCityHudPlayer::GetClassName(int, short)
LegoCityHudPlayer::SetPortraitEnabled(bool)
LegoCityHudPlayer::SetVehicleHudEnabled(bool)
LegoCityHudPlayer::SetMapEnabled(bool)
LegoCityHudPlayer::StopTimer()
LegoCityHudPlayer::PauseTimerDuringMinicuts(bool)
LegoCityHudPlayer::SetTime(float)
LegoCityHudPlayer::RadioCall()
LegoCityHudPlayer::SetTotalStudCountEnabled(int)
LegoCityHudPlayer::SetHeartsDisplayMode(HudPlayer::eHeartsDisplayMode)
LegoCityHudPlayer::SetHintText(char const*, unsigned int, unsigned char, float)
LegoCityHudPlayer::ShowHelpScreen(LegoCityHudPlayer::eHelpScreenIDs, bool, bool)
LegoCityHudPlayer::HelpScreens::ShowScreen(LegoCityHudPlayer::eHelpScreenIDs)
LegoCityHudPlayer::HelpScreens::HideScreen(LegoCityHudPlayer::eHelpScreenIDs, bool)
LegoCityHudPlayer::HelpScreens::HideAllScreens(bool)
LegoCityHudPlayer::ShowTimer(bool)
LegoCityHudPlayer::SetTimer(float, int, ScriptTimer*)
LegoCityHudPlayer::SetTimer(float, int)
LegoCityHudPlayer::GetTime() const
LegoCityHudPlayer::GetTimeElapsed() const
LegoCityHudPlayer::HighlightTimer()
LegoCityHudPlayer::HideStats(bool)
LegoCityHudPlayer::ShowStats()
LegoCityHudPlayer::GetPanelAlpha()
LegoCityHudPlayer::IncrementBrickMultiplier()
CharacterSelectInputController::Init()
CharacterSelectInputController::CharacterSelectInputController()
HUDPlayer_SaveLoad::HUDPlayer_SaveLoad(char const*)
HUDPlayer_SaveLoad::~HUDPlayer_SaveLoad()
HUDPlayer_SaveLoad::~HUDPlayer_SaveLoad()
HUDPlayer_SaveLoad::GetTotalSizeInBytes()
HUDPlayer_SaveLoad::Reset()
HUDPlayer_SaveLoad::ApplyToGameData()
HUDPlayer_SaveLoad::SaveSaveGame(EdStream&, int)
HUDPlayer_SaveLoad::FillInFromGameData()
HUDPlayer_SaveLoad::LoadSaveGame(EdStream&, int, int)
LegoCityHudPlayer::HelpScreens::GetShownHelpScreens()
LegoCityHudPlayer::HelpScreens::SetShownHelpScreens(char)
HUDPlayer_SaveLoad::InitNewGame()
LegoCityHudPlayer::HelpScreens::HelpScreens()
LegoCityHudPlayer::HelpScreens::Reset()
LegoCityHudPlayer::HelpScreens::HasScreenBeenShown(LegoCityHudPlayer::eHelpScreenIDs)
LegoCityHudPlayer::HelpScreens::SetScreenShowing(LegoCityHudPlayer::eHelpScreenIDs, bool)
LegoCityHudPlayer::HelpScreens::SetScreenShown(LegoCityHudPlayer::eHelpScreenIDs)
LegoCityHudPlayer::HelpScreens::IsShowingScreen(LegoCityHudPlayer::eHelpScreenIDs)
HUDScreenManager::HUDScreenManager(int)
HUDScreenManager::CanShowScreen() const
HUDScreenManager::CanPauseGame() const
HUDScreenManager::ShowExitScreen()
HUDScreenManager::ShowRetryScreen()
HUDScreenManager::NotifyScreenClosed(bool, bool)
HUDScreenManager::Enable(bool)
HUDScreenManager::HideRetryScreen(bool)
HUDScreenManager::GetExitScreen()
HUDScreenManager::HideExitScreen(bool)
HUDScreenManager::IsShowingScreen() const
HUDScreenManager::GetExitScreen() const
HUDScreenManager::GetSideMissionsHUD()
HUDScreenManager::EventNotify(Event&, NuEventData&)
FlowMissionUI::ScriptHandler::InitForScripting()
FlowMissionUI::SAction_FlowUI_ShowRetryScreen::Exec(ScriptContext&)
FlowMissionUI::RetryScriptEvent::Fire(NuEventData const&)
FlowMissionUI::ExitScriptEvent::Fire(NuEventData const&)
FlowMissionUI::RetryScriptEvent::~RetryScriptEvent()
FlowMissionUI::ExitScriptEvent::~ExitScriptEvent()
HudState_PlayerDefault::~HudState_PlayerDefault()
HudState_PlayerOne::Update(HudControl*, LegoLevelContainer*, float)
HudState_PlayerOne::~HudState_PlayerOne()
HudState_PlayerTwo::Update(HudControl*, LegoLevelContainer*, float)
HudState_PlayerTwo::~HudState_PlayerTwo()
HudState_PlayerCustom::Update(HudControl*, LegoLevelContainer*, float)
HudState_PlayerCustom::OnExit(HudControl*)
HudState_PlayerCustom::~HudState_PlayerCustom()
HUDScreenManager::~HUDScreenManager()
FlowMissionUI::SAction_FlowUI_ShowRetryScreen::~SAction_FlowUI_ShowRetryScreen()
FlowMissionUI::SAction_FlowUI_ShowRetryScreen::GetName() const
FlowMissionUI::SAction_FlowUI_ShowRetryScreen::GetInputs(SCmdParams&) const
FlowMissionUI::SAction_FlowUI_ShowRetryScreen::GetOutputs(SCmdParams&) const
Mode_CentreHearts::OnEnter()
Mode_CentreHearts::OnExit()
Mode_CentreHearts::~Mode_CentreHearts()
Mode_TotalStudsCount<(eStudCounterDrawMode)2>::OnEnter()
Mode_TotalStudsCount<(eStudCounterDrawMode)2>::OnExit()
Mode_TotalStudsCount<(eStudCounterDrawMode)2>::~Mode_TotalStudsCount()
Mode_TotalStudsCount<(eStudCounterDrawMode)0>::OnEnter()
Mode_TotalStudsCount<(eStudCounterDrawMode)0>::OnExit()
Mode_TotalStudsCount<(eStudCounterDrawMode)0>::~Mode_TotalStudsCount()
Mode_TotalStudsCount<(eStudCounterDrawMode)1>::OnEnter()
Mode_TotalStudsCount<(eStudCounterDrawMode)1>::OnExit()
Mode_TotalStudsCount<(eStudCounterDrawMode)1>::~Mode_TotalStudsCount()
GenericEventCreator<SummarySelectionScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<SummaryCancelScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<FlowMissionUI::RetryScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<FlowMissionUI::ExitScriptEvent>::Create(ScriptContext&, ScriptScope&)
LegoCityHudPortrait::LegoCityHudPortrait(LegoCityHudPortraitLoad const&)
LegoCityHudPortrait::Clear()
LegoCityHudPortrait::HighlightPortrait(bool)
LegoCityHudPortrait::Restart()
LegoCityHudPortrait::ControlInit()
LegoCityHudPortrait::ControlUpdate(float)
LegoCityHudPortrait::SetMoveToTarget(FlashElement*, float)
LegoCityHudPortrait::GetCharacterBorderColour(eCharClass) const
LegoCityHudPortrait::SetBorderColour(NuColour const&)
LegoCityHudPortrait::SetCharacterBorder(eCharClass)
LegoCityHudPortrait::SetCharacter(LevelContainer const&, short, eCharClass)
LegoCityHudPortrait::RenderImpostorCallback(void*, NURENDERSTAGE)
LegoCityHudPortrait::Render()
LegoCityHudPortrait::RenderToTexture()
LegoCityHudPortrait::IsMinifig() const
LegoCityHudPortrait::GetCameraOffsetFromGCData(VuMtx&) const
LegoCityHudPortrait::GetCameraMatrix(VuMtx&, float) const
HudState_PortraitDefault::OnEnter(HudControl*)
HudState_PortraitDefault::Update(HudControl*, LegoLevelContainer*, float)
HudState_PortraitDefault::OnExit(HudControl*)
HudState_PortraitStatic::OnEnter(HudControl*)
HudState_PortraitStatic::Update(HudControl*, LegoLevelContainer*, float)
HudState_PortraitStatic::OnExit(HudControl*)
HudRender_PortraitDefault::Render(HudControl*, LegoLevelContainer*)
LegoCityHudPortrait::~LegoCityHudPortrait()
LegoCityHudPortrait::~LegoCityHudPortrait()
HudState_PortraitDefault::~HudState_PortraitDefault()
HudState_PortraitStatic::~HudState_PortraitStatic()
HudRender_PortraitDefault::~HudRender_PortraitDefault()
HudRender_PortraitDefault::Update(HudControl*, float)
LegoCityHudVehicle::LegoCityHudVehicle(unsigned int, HUDScreenManager&)
LegoCityHudVehicle::Reset()
LegoCityHudVehicle::~LegoCityHudVehicle()
LegoCityHudVehicle::Release()
FlowMissionUI::CriticalVehicleUIHandler::~CriticalVehicleUIHandler()
LegoCityHudVehicle::~LegoCityHudVehicle()
LegoCityHudVehicle::Init(FlashScene*)
LegoCityHudVehicle::VehicleBoostIcon::InitFromElement(FlashElement*, FlashScene*)
LegoCityHudVehicle::LoadingIcon::InitFromElement(FlashElement*)
LegoCityHudVehicle::MultiplierIcon::InitPulse(FlashElement*)
LegoCityHudVehicle::VehicleBoostIcon::Reset()
LegoCityHudVehicle::LoadingIcon::SetActive(bool, bool)
LegoCityHudVehicle::AttachToVehicle(MechWeakPtr<MechVehicle, 8>)
LegoCityHudVehicle::UpdateVehicleLogo()
LegoCityHudVehicle::UpdateMultiplierTimer(float, bool)
LegoCityHudVehicle::IsShowingFinalLayer()
LegoCityHudVehicle::MultiplierIcon::SetLayerCount(unsigned int, unsigned int, bool)
LegoCityHudVehicle::MultiplierIcon::Highlight(bool)
LegoCityHudVehicle::MultiplierIcon::TriggerFail(unsigned int)
LegoCityHudVehicle::StoreCurrentMultiplier()
LegoCityHudVehicle::UpdateLevelOnly(float)
LegoCityHudVehicle::AttachToPlayerVehicle(unsigned int)
LegoCityHudVehicle::VehicleBoostIcon::IsEnabled()
LegoCityHudVehicle::UpdateBoostIconState(float)
LegoCityHudVehicle::VehicleBoostIcon::Update(float)
LegoCityHudVehicle::UpdateBoostNegativeSound(float)
FlowMissionUI::CriticalVehicleUIHandler::Update(float)
LegoCityHudVehicle::UpdateBoostIconIncrements(float, bool)
LegoCityHudVehicle::VehicleHasBoost(MechWeakPtr<MechVehicle, 8>)
LegoCityHudVehicle::VehicleBoostIcon::SetBoostPercentLeft(float)
LegoCityHudVehicle::VehicleBoostIcon::ToggleBoostFlame(bool)
LegoCityHudVehicle::SetBoostIconState(LegoCityHudVehicle::eBoostIconState)
LegoCityHudVehicle::VehicleBoostIcon::Drain(float)
LegoCityHudVehicle::SetBoostStateToDefault()
LegoCityHudVehicle::VehicleBoostIcon::SetEnabled(bool)
LegoCityHudVehicle::VehicleBoostIcon::SetBoostFull(bool)
LegoCityHudVehicle::VehicleBoostIcon::SetBoostAvailable(bool, bool)
LegoCityHudVehicle::UpdateLoadIcon(float)
LegoCityHudVehicle::LoadingIcon::Update()
LegoCityHudVehicle::RenderLevelOnly()
LegoCityHudVehicle::RenderImpostorCallback(void*, NURENDERSTAGE)
LegoCityHudVehicle::RenderToTexture()
LegoCityHudVehicle::LoadBoostIcon()
LegoCityHudVehicle::EventNotify(Event&, NuEventData&)
LegoCityHudVehicle::SetEnabled(bool)
LegoCityHudVehicle::SetMultiplierUI(unsigned int, unsigned int)
LegoCityHudVehicle::IsPlayerInVehicle(MechCharacter*, MechWeakPtr<MechVehicle, 8>)
FlowMissionUI::CriticalVehicleUIHandler::SetUsingVehicle(bool)
LegoCityHudVehicle::CanEnableForVehicle(MechWeakPtr<MechVehicle, 8>)
LegoCityHudVehicle::IsShowingBoostIcon()
LegoCityHudVehicle::IncrementMultiplierUI(bool, bool, bool)
LegoCityHudVehicle::IsShowingAllSegments()
LegoCityHudVehicle::MultiplierIcon::HideMultiplier(bool)
LegoCityHudVehicle::MultiplierIcon::ShowMultiplier(unsigned int)
LegoCityHudVehicle::UnregisterElement(HudElement*&)
FlowMissionUI::CriticalVehicleUIHandler::AttachToVehicle(MechWeakPtr<MechVehicle, 8>)
LegoCityHudVehicle::GetMultiplierLayerCount()
LegoCityHudVehicle::VehicleBoostIcon::VehicleBoostIcon()
ValueFader<NuColour>::Update(float)
LegoCityHudVehicle::LoadingIcon::LoadingIcon()
LegoCityHudVehicle::LoadingIcon::~LoadingIcon()
LegoCityHudVehicle::LoadingIcon::SetEnabled(bool)
LegoCityHudVehicle::LoadingIcon::IsEnabled()
LegoCityHudVehicle::LoadingIcon::SetNewState(LegoCityHudVehicle::LoadingIcon::eState)
LegoCityHudVehicle::LoadingIcon::Reset()
LegoCityHudVehicle::MultiplierIcon::MultiplierIcon()
LegoCityHudVehicle::MultiplierIcon::~MultiplierIcon()
LegoCityHudVehicle::MultiplierIcon::~MultiplierIcon()
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::FailAllSegments()
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::HideMultiplier(bool)
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::SetLayerCount(unsigned int)
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::HighlightAllSegments(bool)
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::ShowMultiplier()
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::ResetAllSegments()
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::SetSegmentCount(unsigned int, bool)
LegoCityHudVehicle::MultiplierIcon::InitChildFromElement(FlashElement*, FlashScene*)
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::InitFromElement(FlashElement*, FlashScene*)
LegoCityHudVehicle::MultiplierIcon::SetNewChildState(HudIcon::eState)
LegoCityHudVehicle::MultiplierIcon::Hide(bool)
LegoCityHudVehicle::MultiplierIcon::ChildReset()
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::Reset()
LegoCityHudVehicle::MultiplierIcon::Segment::Segment()
LegoCityHudVehicle::MultiplierIcon::Segment::InitFromElement(FlashElement*, unsigned int)
LegoCityHudVehicle::MultiplierIcon::Segment::Reset()
LegoCityHudVehicle::MultiplierIcon::Segment::HideLayerAnim(unsigned int)
LegoCityHudVehicle::MultiplierIcon::Segment::Show(bool)
LegoCityHudVehicle::MultiplierIcon::Segment::IsShowing() const
LegoCityHudVehicle::MultiplierIcon::Segment::SetLayer(unsigned int)
LegoCityHudVehicle::MultiplierIcon::Segment::ShowLayerAnim(unsigned int)
LegoCityHudVehicle::MultiplierIcon::Segment::PlayFailed()
LegoCityHudVehicle::MultiplierIcon::Segment::Highlight(bool)
LegoCityHudVehicle::MultiplierIcon::Segment::ExtraHighlight(bool)
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::SegmentLayer()
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::~SegmentLayer()
LegoCityHudVehicle::MultiplierIcon::MultiplierText::Show(unsigned int)
LegoCityHudVehicle::MultiplierIcon::MultiplierText::Highlight(bool)
LegoCityHudVehicle::MultiplierIcon::MultiplierText::Hide(unsigned int, bool)
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::ShowSegment(unsigned int)
LegoCityHudVehicle::MultiplierIcon::SegmentLayer::HideSegment(unsigned int)
LegoCityHudVehicle::MultiplierIcon::MultiplierText::InitFromElement(FlashElement*)
LegoCityHudVehicle::MultiplierIcon::MultiplierText::Reset()
LegoCityHudVehicle::MultiplierIcon::MultiplierText::MultiplierText()
LegoCityHudVehicle::MultiplierIcon::MultiplierText::ResetLayerOnAnims()
LegoCityHudVehicle::MultiplierIcon::MultiplierText::ResetLayerOffAnims()
LegoCityHudVehicle::MultiplierIcon::MultiplierText::ShowLayerAnim(unsigned int, bool)
FlowMissionUI::CriticalVehicleUIHandler::CriticalVehicleUIHandler(HUDScreenManager&, int)
FlowMissionUI::CriticalVehicleUIHandler::LockPlayerInVehicle(bool)
FlowMissionUI::CriticalVehicleUIHandler::HasValidVehicle()
FlowMissionUI::CriticalVehicleUIHandler::IsPlayerInVehicle(MechCharacter*, MechWeakPtr<MechVehicle, 8>)
FlowMissionUI::CriticalVehicleUIHandler::Init()
FlowMissionUI::CriticalVehicleUIHandler::CheckToDisplayPrompt()
FlowMissionUI::CriticalVehicleUIHandler::ShowExitPrompt()
FlowMissionUI::CriticalVehicleUIHandler::EventNotify(Event&, NuEventData&)
FlowMissionUI::CriticalVehicleUIHandler::~CriticalVehicleUIHandler()
LegoCityHudOverlayManager::Init()
LegoCityHudOverlayManager::ReleaseAll()
LegoCityHudOverlay::LegoCityHudOverlay()
LegoCityHudOverlay::SetEnabled(bool)
InitHudOverlays()
ReleaseHudOverlays()
LegoCityHudOverlay::~LegoCityHudOverlay()
LegoCityHudMission::~LegoCityHudMission()
LegoCityHudMission::ShowMapUnlockScreen(bool)
LegoCityHudMission::RemoveMapUnlockScreen()
LegoCityHudMission::LegoCityHudMission()
LegoCityHudMission::Init()
LegoCityHudMission::Release()
LegoCityHudMission::Clear()
LegoCityHudMission::Restart()
LegoCityHudMission::UpdateLevelOnly(LegoLevelContainer*, float)
LegoCityHudMission::ShowPrompt(char const*, HudMission_Globals::PromptRequest*)
LegoCityHudMission::RenderLevelOnly(LegoLevelContainer*)
LegoCityHudMission::LoadPromptResources(char const*)
LegoCityHudMission::ConvertTypeStringToFileName(char const*, char*, unsigned char&)
LegoCityHudMission::ShowPrompt(unsigned char, char const*, char const*, char const*, char const*)
LegoCityHudMission::OnTextureLoaded(bool, NuSmartPtr<NuTexture, true>, int, void*)
LegoCityHudMission::ShowPrompt(char const*, char const*, char const*, char const*)
LegoCityHudMission::HidePrompt()
LegoCityHudMission::StartMission(unsigned char)
LegoCityHudMission::EndMission(char const*, bool)
LegoCityHudMission::IsMissionHudActive()
LegoCityHudMission::GetTypeFromString(char const*, unsigned char&)
LegoCityHudMission::LoadStartScreenIcons()
LegoCityHudMission::BG_LoadTexture(void*)
LegoCityHudMission::BG_AcknowledgeTextureLoaded(void*)
HudRender_TrueHeroBar::Render(HudControl*, LegoLevelContainer*)
HudRender_TrueHeroBar::Update(HudControl*, float)
HudRender_AlphaMask::Update(HudControl*, float)
HudRender_AlphaMask::Render(HudControl*, LegoLevelContainer*)
HudRender_AlphaMask::SetMask()
HudRender_AlphaMask::RenderImpostorCallback(void*, NURENDERSTAGE)
HudRender_AlphaMask::RenderToTexture()
HudRender_AlphaMask::Release()
HudRender_TrueHeroBar::~HudRender_TrueHeroBar()
HudRender_AlphaMask::~HudRender_AlphaMask()
HudRender_AlphaMask::~HudRender_AlphaMask()
LegoCityHudMission::~LegoCityHudMission()
LegoCityHudMapUnlock::LegoCityHudMapUnlock()
LegoCityHudMapUnlock::ControlInit()
HudState_HudMapUnlockDefault::OnEnter(HudControl*)
HudState_HudMapUnlockDefault::Update(HudControl*, LegoLevelContainer*, float)
HudState_HudMapUnlockDefault::OnExit(HudControl*)
LegoCityHudMapUnlock::~LegoCityHudMapUnlock()
LegoCityHudMapUnlock::ControlUpdate(float)
HudState_HudMapUnlockDefault::~HudState_HudMapUnlockDefault()
LegoCityHudCommDevice::~LegoCityHudCommDevice()
LegoCityHudCommDevice::LegoCityHudCommDevice()
LegoCityHudCommDevice::ControlInit()
LegoCityHudCommDevice::ControlUpdate(float)
LegoCityHudCommDevice::EndCall()
LegoCityHudCommDevice::RequestCall(LegoCityHudCommDevice::CommDeviceState, GameObject*, char const*, float, float)
LegoCityHudCommDevice::MakeCall()
HudState_CommDeviceDefault::OnEnter(HudControl*)
HudState_CommDeviceDefault::Update(HudControl*, LegoLevelContainer*, float)
LegoCityHudCommDevice::~LegoCityHudCommDevice()
HudState_CommDeviceDefault::OnExit(HudControl*)
HudState_CommDeviceDefault::~HudState_CommDeviceDefault()
LegoCityHudCharacterSelect::GetTargetClass()
HudCharacterWheel::HudCharacterWheel(unsigned int)
HudCharacterWheel::~HudCharacterWheel()
HudCharacterWheel::~HudCharacterWheel()
HudCharacterWheel::ActivateItem(unsigned int, bool)
HudCharacterWheel::HighlightItem(unsigned int, bool)
HudCharacterWheel::SelectItem(unsigned int)
HudCharacterWheel::UpdateCharacterIconTexture(int)
HudCharacterWheel::ControlInit()
HudCharacterWheel::ControlUpdate(float)
HudCharacterWheel::GetSlotGroupElement(unsigned int)
HudState_HudCharacterWheelDefault::OnEnter(HudControl*)
HudState_HudCharacterWheelDefault::Update(HudControl*, LegoLevelContainer*, float)
HudState_HudCharacterWheelDefault::OnExit(HudControl*)
LegoCityHudCharacterSelect::LegoCityHudCharacterSelect()
LegoCityHudCharacterSelect::~LegoCityHudCharacterSelect()
LegoCityHudCharacterSelect::~LegoCityHudCharacterSelect()
LegoCityHudCharacterSelect::Init()
LegoCityHudCharacterSelect::Release()
LegoCityHudCharacterSelect::Clear()
LegoCityHudCharacterSelect::Restart()
LegoCityHudCharacterSelect::IsOverlayAllowed(MechCharacter*)
LegoCityHudCharacterSelect::UpdateLevelOnly(LegoLevelContainer*, float)
LegoCityHudCharacterSelect::RenderLevelOnly(LegoLevelContainer*)
LegoCityHudCharacterSelect::GetHighlightedItem() const
LegoCityHudCharacterSelect::GetSelectedCharacter() const
LegoCityHudCharacterSelect::SelectCurrentCharacter()
LegoCityHudCharacterSelect::SelectCharacter(unsigned int)
LegoCityHudCharacterSelect::GetPanelRenderQuad(int, HudCommon::FlashToPanel_RenderQuad&) const
LegoCityHudCharacterSelect::MakeCharacterVisible(int)
LegoCityHudCharacterSelect::UpdateCharacterIconTexture(int)
LegoCityHudCharacterSelect::SetForceOpen(bool, int)
HudState_HudCharacterWheelDefault::~HudState_HudCharacterWheelDefault()
AHudMenuItem::~AHudMenuItem()
HudMenuItemChar::~HudMenuItemChar()
HudMenuItemChar::Render(LegoLevelContainer*)
HudMenuItemChar::Highlight(bool)
HudMenuItemChar::Select()
HudMenuItemChar::IsSelected() const
HudMenuItemChar::IsActive() const
LegoCityInGameCharGrid::Draw()
LegoCityInGameCharGrid::DrawGridCollection()
LegoCityInGameCharGrid::MoveToCharInGrid(int, int)
LegoCityInGameCharGrid::PlayerSelectedChar(int)
LegoCityInGameCharGrid::PlayerCancelled(int)
LegoCityInGameCharGrid::FreePlayCollection()
LegoCityMenuCharacterGrids::CreateInGameGrid(LegoLevelContainer&, int, eCHARLOADER)
LegoCityMenuCharacterGrids::MoveToCharInGrid(int, int)
LegoCityHudCharacterGrid::LegoCityHudCharacterGrid()
LegoCityHudCharacterGrid::~LegoCityHudCharacterGrid()
LegoCityHudCharacterGrid::~LegoCityHudCharacterGrid()
LegoCityHudCharacterGrid::Init()
LegoCityHudCharacterGrid::Release()
LegoCityHudCharacterGrid::Clear()
LegoCityHudCharacterGrid::Restart()
LegoCityHudCharacterGrid::UpdateLevelOnly(LegoLevelContainer*, float)
LegoCityHudCharacterGrid::RenderLevelOnly(LegoLevelContainer*)
LegoCityHudCharacterGrid::SetSelected(int)
LegoCityMenuCharacterGrids::~LegoCityMenuCharacterGrids()
LegoCityMenuCharacterGrids::FreePlayUseInGameCharGrid(MechCharacter*)
LegoCityInGameCharGrid::~LegoCityInGameCharGrid()
LegoCityHudTheyLive::~LegoCityHudTheyLive()
LegoCityHudTheyLive::LegoCityHudTheyLive()
LegoCityHudTheyLive::Init()
LegoCityHudTheyLive::Release()
LegoCityHudTheyLive::Clear()
LegoCityHudTheyLive::Restart()
LegoCityHudTheyLive::UpdateLevelOnly(LegoLevelContainer*, float)
LegoCityHudTheyLive::RenderLevelOnly(LegoLevelContainer*)
LegoCityHudTheyLive::EventNotify(Event&, NuEventData&)
non-virtual thunk to LegoCityHudTheyLive::EventNotify(Event&, NuEventData&)
LegoCityHudTheyLive::~LegoCityHudTheyLive()
non-virtual thunk to LegoCityHudTheyLive::~LegoCityHudTheyLive()
non-virtual thunk to LegoCityHudTheyLive::~LegoCityHudTheyLive()
HudParryIcons::HudParryIcons(unsigned int, FlashScene*)
HudParryIcons::~HudParryIcons()
HudParryIcons::~HudParryIcons()
HudParryIcons::Clone()
HudParryIcons::DeleteClone(UIControl*)
HudParryIcons::AttachTo(MechCharacter*)
HudParryIcons::CreateAndAttach(MechCharacter*, bool)
LegoCityHudObjectIcons::AttachObjectIcon(MechCharacter*, eUIControlType, int&)
HudParryIcons::PlaySFX(LevelContainer const&)
HudParryIcons::Detach(MechCharacter*)
HudParryIcons::IsAttached(MechCharacter*)
LegoCityHudObjectIcons::GetObjectIcon(MechCharacter*)
LegoCityHudObjectIcons::DetachIconFromObject(MechCharacter*)
HudParryIcons::UpdateLevelOnly(LegoLevelContainer*, float)
HudParryIcons::SetButtonIcon(HudParryIcons::eDefaultIconTypes)
HudParryIcons::SetUsed(bool)
HudParryIcons::GetAnimatingIcon()
HudParryIcons::Release()
LegoCityHudObjectIcons::LegoCityHudObjectIcons()
LegoCityHudObjectIcons::~LegoCityHudObjectIcons()
LegoCityHudObjectIcons::Init()
LegoCityHudObjectIcons::GetControlTypeFromIconType(LegoCityHudObjectIcons::eObjectIconType)
LegoCityHudObjectIcons::Clear()
LegoCityHudObjectIcons::Release()
LegoCityHudObjectIcons::ReleaseIcon(int)
LegoCityHudObjectIcons::DetachIcon(int)
LegoCityHudObjectIcons::Restart()
LegoCityHudObjectIcons::UpdateLevelOnly(LegoLevelContainer*, float)
LegoCityHudObjectIcons::DebugTest()
LegoCityHudObjectIcons::RenderLevelOnly(LegoLevelContainer*)
LegoCityHudObjectIcons::GetIconType(UIControl*)
LegoCityHudObjectIcons::GetIconType(UIControl*) const
LegoCityHudObjectIcons::AttachObjectIconByName(MechCharacter*, char const*, int&)
LegoCityHudObjectIcons::AttachObjectIconByName(MechObjectInterface*, char const*, int&)
LegoCityHudObjectIcons::AttachObjectIcon(MechObjectInterface*, eUIControlType, int&)
LegoCityHudObjectIcons::GetIconTypeFromControlType(eUIControlType)
LegoCityHudObjectIcons::AttachObjectIcon(UIControl*, MechObjectInterface*, LegoCityHudObjectIcons::eObjectIconType, int&)
LegoCityHudObjectIcons::DetachIconFromObject(MechObjectInterface*)
LegoCityHudObjectIcons::GetObjectIcon(MechObjectInterface*)
LegoCityHudObjectIcons::GetObjectIcon(MechCharacter*) const
LegoCityHudObjectIcons::GetObjectIcon(MechObjectInterface*) const
LegoCityHudObjectIcons::IsClone(LegoCityHudObjectIcons::eObjectIconType, int)
LegoCityHudObjectIcons::DetachIcon(UIControl*)
WindowScreenState_BricksBuy::OnEnter(HudControl*)
WindowScreenState_BricksBuy::Update(HudControl*, LegoLevelContainer*, float)
WindowScreenState_BricksBuy::OnExit(HudControl*)
LegoCityHudBricksBuyScreen::~LegoCityHudBricksBuyScreen()
LegoCityHudBricksBuyScreen::Init()
LegoCityHudBricksBuyScreen::Release()
LegoCityHudBricksBuyScreen::Clear()
LegoCityHudBricksBuyScreen::IsAnimatingBrickCounter()
LegoCityHudBricksBuyScreen::RemovePlayerBricks(int)
LegoCityHudBricksBuyScreen::LegoCityHudBricksBuyScreen()
LegoCityHudBricksBuyScreen::Restart()
LegoCityHudBricksBuyScreen::SetObjectName(char const*)
LegoCityHudBricksBuyScreen::SetPromptTexture()
LegoCityHudBricksBuyScreen::ShowPromptToBuy(bool)
LegoCityHudBricksBuyScreen::UpdateLevelOnly(LegoLevelContainer*, float)
LegoCityHudBricksBuyScreen::RenderLevelOnly(LegoLevelContainer*)
LegoCityHudBricksBuyScreen::GetTypeFromString(char const*)
LegoCityHudBricksBuyScreen::ConvertTypeStringToFileName(char const*, char*, unsigned char&)
LegoCityHudBricksBuyScreen::LoadResources(char const*)
LegoCityHudBricksBuyScreen::OnTextureLoaded(bool, NuSmartPtr<NuTexture, true>, int, void*)
LegoCityHudBricksBuyScreen::SetObjectCost(unsigned long)
LegoCityHudBricksBuyScreen::SetPromptText(char const*, int, float)
LegoCityHudBricksBuyScreen::NotifyNotEnoughBricks(LegoLevelContainer&)
LegoCityHudBricksBuyScreen::AddBrickCount_MsgBeginFn(GAMEMESSAGE*)
LegoCityHudBricksBuyScreen::AddBrickCount_MsgEndFn(GAMEMESSAGE*)
BuyScreen_DrawBrickMsg(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoCityHudBricksBuyScreen::AddBrickCountMessages(unsigned int, int, int, VuVec const&, VuVec const&)
LegoCityHudBricksBuyScreen::ResetPromptTexture()
LegoCityHudBricksBuyScreen::~LegoCityHudBricksBuyScreen()
WindowScreenState_BricksBuy::~WindowScreenState_BricksBuy()
HudMenuItemVehicle::Update(LegoLevelContainer*, float)
HudMenuItemVehicle::Highlight(bool)
HudMenuItemVehicle::Clear()
HudVehicleDropGrid::HudVehicleDropGrid()
HudVehicleDropGrid::~HudVehicleDropGrid()
HudVehicleDropGrid::~HudVehicleDropGrid()
HudVehicleDropGrid::ActivateItem(unsigned int, bool)
HudVehicleDropGrid::SetMainIcon(NuSmartPtr<NuTexture, true>)
HudVehicleDropGrid::HighlightItem(unsigned int, bool, char const*)
HudVehicleDropGrid::SelectItem(unsigned int)
HudVehicleDropGrid::ControlInit()
HudVehicleDropGrid::ControlUpdate(float)
HudVehicleDropGrid::SetVehicleItem(FlashElement*, char const*, NuSmartPtr<NuTexture, true>)
HudVehicleDropGrid::SetPromptText(char const*, bool)
HudState_VehicleDropGridDefault::OnEnter(HudControl*)
HudState_VehicleDropGridDefault::Update(HudControl*, LegoLevelContainer*, float)
HudState_VehicleDropGridDefault::OnExit(HudControl*)
LegoCityHudVehicleDropMenu::LegoCityHudVehicleDropMenu()
LegoCityHudVehicleDropMenu::~LegoCityHudVehicleDropMenu()
LegoCityHudVehicleDropMenu::~LegoCityHudVehicleDropMenu()
LegoCityHudVehicleDropMenu::Init()
LegoCityHudVehicleDropMenu::Release()
LegoCityHudVehicleDropMenu::Clear()
LegoCityHudVehicleDropMenu::Restart()
LegoCityHudVehicleDropMenu::IsOverlayAllowed(MechCharacter*)
LegoCityHudVehicleDropMenu::GetItemName(unsigned int)
LegoCityHudVehicleDropMenu::GetVehicleTexID(unsigned int) const
LegoCityHudVehicleDropMenu::UpdateLevelOnly(LegoLevelContainer*, float)
LegoCityHudVehicleDropMenu::RepopulateGrid(LegoCityHudVehicleDropMenu::eMenuState)
LegoCityHudVehicleDropMenu::GetVehicleTexID(unsigned int, unsigned int) const
LegoCityHudVehicleDropMenu::SelectCurrentItem()
LegoCityHudVehicleDropMenu::RenderLevelOnly(LegoLevelContainer*)
LegoCityHudVehicleDropMenu::GetHighlightedItem() const
LegoCityHudVehicleDropMenu::GetVehicleName(unsigned int) const
LegoCityHudVehicleDropMenu::GetVehicleName(unsigned int, unsigned int) const
LegoCityHudVehicleDropMenu::GetSelectedVehicleType() const
LegoCityHudVehicleDropMenu::GetSelectedVehicle() const
LegoCityHudVehicleDropMenu::ConvertToVehicleCharacterID(unsigned int, unsigned int)
LegoCityHudVehicleDropMenu::SelectVehicleType(unsigned int)
LegoCityHudVehicleDropMenu::SelectVehicle(unsigned int)
HudMenuItemVehicle::~HudMenuItemVehicle()
HudMenuItemVehicle::Render(LegoLevelContainer*)
HudMenuItemVehicle::Select()
HudMenuItemVehicle::IsSelected() const
HudMenuItemVehicle::IsActive() const
HudState_VehicleDropGridDefault::~HudState_VehicleDropGridDefault()
HudMissionPlay::HudMissionPlay(unsigned int)
HudMissionPlay::ControlInit()
HudMissionPlay::ControlUpdate(float)
HudMissionPlay::SetMissionCounter(unsigned int, unsigned int, float, bool)
HudMissionPlay::SetMissionCounterBar(unsigned int, unsigned int, float)
HudMissionPlay::SetMessage(char const*, float)
HudMissionPlay::SetMessageFromID(int, float)
HudMissionPlay::SetHelpText(char const*, float)
HudMissionPlay::SetHelpTextFromID(int, float)
HudMissionPlay::SetDebugMessage(char const*, float)
HudMissionPlay::SetDebugHelpText(char const*, float)
HudState_MissionPlayDefault::OnEnter(HudControl*)
HudState_MissionPlayDefault::Update(HudControl*, LegoLevelContainer*, float)
HudState_MissionPlayDefault::OnExit(HudControl*)
HudMissionStart::CreateRequest(char const*, char const*, char const*)
HudMissionStart::DestroyRequest(HudMission_Globals::PromptRequest*)
HudMissionStart::HudMissionStart(unsigned int, HudMissionStats const*, NuSmartPtr<NuTexture, true>, HudMission_Globals::PromptRequest&)
HudMissionStart::~HudMissionStart()
HudMissionStart::~HudMissionStart()
HudMissionStart::ResetTexture()
HudMissionStart::SetTrueHeroBar(unsigned long, unsigned long)
HudMissionStart::ControlInit()
HudMissionStart::ControlUpdate(float)
HudState_MissionStart::OnEnter(HudControl*)
HudState_MissionStart::Update(HudControl*, LegoLevelContainer*, float)
HudState_MissionStart::OnExit(HudControl*)
HudState_MissionPlayDefault::~HudState_MissionPlayDefault()
HudMissionPlay::~HudMissionPlay()
HudState_MissionStart::~HudState_MissionStart()
HudMissionEnd::ControlInit()
HudMissionEnd::ControlUpdate(float)
HudMissionEnd::ResetCurrentScreen()
HudMissionEnd::Clear()
HudState_MissionEnd_ShowBackground::OnEnter(HudControl*)
HudState_MissionEnd_ShowBackground::Update(HudControl*, LegoLevelContainer*, float)
HudState_MissionEnd_ShowBackground::OnExit(HudControl*)
HudState_MissionEnd_Open::OnEnter(HudControl*)
HudState_MissionEnd_Open::Update(HudControl*, LegoLevelContainer*, float)
HudState_MissionEnd_Open::OnExit(HudControl*)
HudState_MissionEnd_ScreenDisplay::OnEnter(HudControl*)
HudState_MissionEnd_ScreenDisplay::Update(HudControl*, LegoLevelContainer*, float)
HudState_MissionEnd_ScreenDisplay::OnExit(HudControl*)
HudMissionEnd_ScreenComplete::OnScreenEnter(HudControl*)
HudMissionEnd_ScreenComplete::ScreenUpdate(HudControl*, float)
HudMissionEnd_ScreenHero::OnScreenEnter(HudControl*)
HudMissionEnd_ScreenHero::ScreenUpdate(HudControl*, float)
HudMissionEnd_ScreenHero::OnScreenExit(HudControl*)
HudMissionEnd_ScreenStuds::OnScreenEnter(HudControl*)
HudMissionEnd_ScreenStuds::ScreenUpdate(HudControl*, float)
HudMissionEnd_ScreenStuds::OnScreenExit(HudControl*)
HudMissionEnd_ScreenGoldBricks::OnScreenEnter(HudControl*)
HudMissionEnd_ScreenGoldBricks::ScreenUpdate(HudControl*, float)
HudMissionEnd_ScreenGoldBricks::OnScreenExit(HudControl*)
HudMissionEnd_ScreenVehicle::OnScreenEnter(HudControl*)
HudMissionEnd_ScreenGoldPlates::OnScreenEnter(HudControl*)
HudMissionEnd_ScreenGoldPlates::AddPlate(HudMissionEnd*, unsigned int)
HudMissionEnd_ScreenGoldPlates::ScreenUpdate(HudControl*, float)
HudMissionEnd_ScreenGoldPlates::OnScreenExit(HudControl*)
HudMissionEnd_ScreenRedBricks::OnScreenEnter(HudControl*)
HudMissionEnd_ScreenRedBricks::ScreenUpdate(HudControl*, float)
HudMissionEnd_ScreenRedBricks::OnScreenExit(HudControl*)
HudMissionEnd_ScreenPosition::OnScreenEnter(HudControl*)
HudMissionEnd_ScreenPosition::ScreenUpdate(HudControl*, float)
HudMissionEnd_ScreenPosition::OnScreenExit(HudControl*)
HudMissionEnd_ScreenCharacter::OnScreenEnter(HudControl*)
HudMissionEnd_ScreenMapUnlock::OnScreenEnter(HudControl*)
HudState_MissionEnd_Close::OnEnter(HudControl*)
HudState_MissionEnd_Close::Update(HudControl*, LegoLevelContainer*, float)
HudState_MissionEnd_Close::OnExit(HudControl*)
HudMissionEnd::~HudMissionEnd()
HudState_MissionEnd_ShowBackground::~HudState_MissionEnd_ShowBackground()
HudState_MissionEnd_ScreenDisplay::~HudState_MissionEnd_ScreenDisplay()
HudState_MissionEnd_ScreenDisplay::OnScreenEnter(HudControl*)
HudState_MissionEnd_ScreenDisplay::ScreenUpdate(HudControl*, float)
HudState_MissionEnd_ScreenDisplay::OnScreenExit(HudControl*)
HudMissionEnd_ScreenComplete::~HudMissionEnd_ScreenComplete()
HudMissionEnd_ScreenHero::~HudMissionEnd_ScreenHero()
HudMissionEnd_ScreenStuds::~HudMissionEnd_ScreenStuds()
HudMissionEnd_ScreenGoldBricks::~HudMissionEnd_ScreenGoldBricks()
HudMissionEnd_ScreenVehicle::~HudMissionEnd_ScreenVehicle()
HudMissionEnd_ScreenGoldPlates::~HudMissionEnd_ScreenGoldPlates()
HudMissionEnd_ScreenRedBricks::~HudMissionEnd_ScreenRedBricks()
HudMissionEnd_ScreenPosition::~HudMissionEnd_ScreenPosition()
HudMissionEnd_ScreenCharacter::~HudMissionEnd_ScreenCharacter()
HudMissionEnd_ScreenMapUnlock::~HudMissionEnd_ScreenMapUnlock()
HudState_MissionEnd_Open::~HudState_MissionEnd_Open()
HudState_MissionEnd_Close::~HudState_MissionEnd_Close()
SafeCrackHud::~SafeCrackHud()
ButtonMashHud::~ButtonMashHud()
SafeCrackAudio::SafeCrackAudio()
SafeCrackAudio::~SafeCrackAudio()
SafeCrackAudio::Release()
SafeCrackAudio::Update(LevelContainer*, float, SafeCrackHud::eSafeCrackMode)
SafeCrackAudio::Init()
SafeCrackAudio::Pause(bool)
SafeCrackAudio::TriggerNext()
SafeCrackHud::SafeCrackHud()
SafeCrackHud::Init()
SafeCrackHud::Release()
SafeCrackHud::Clear()
SafeCrackHud::Restart()
SafeCrackHud::SetMode(SafeCrackHud::eSafeCrackMode)
SafeCrackHud::TurnDial(int)
SafeCrackHud::UpdateLevelOnly(LegoLevelContainer*, float)
SafeCrackHud::RenderLevelOnly(LegoLevelContainer*)
SafeCrackHud::SetTime(float)
ButtonMashHud::ButtonMashHud()
ButtonMashHud::Init()
ButtonMashHud::Release()
ButtonMashHud::Clear()
ButtonMashHud::SetTarget(MechObjectInterface*)
ButtonMashHud::Restart()
ButtonMashHud::SetButton(ButtonMashHud::eButtonMashButton)
ButtonMashHud::UpdateLevelOnly(LegoLevelContainer*, float)
ButtonMashHud::RenderLevelOnly(LegoLevelContainer*)
ButtonMashHud::HideButton()
ButtonMashHud::ShowButton()
ButtonMashHud::SetTargetPos(VuVec const&)
SafeCrackHud::~SafeCrackHud()
ButtonMashHud::~ButtonMashHud()
AlphaMaskedMaterial::Render(AlphaMaskedMaterialData*, float&, float&, float&, float&)
AlphaMaskedMaterial::Destroy(AlphaMaskedMaterialData*)
AlphaMaskedMaterial::Reset(AlphaMaskedMaterialData&)
AlphaMaskedMaterial::Create(NuSmartPtr<NuTexture, true>, float, float, bool, bool)
AlphaMaskedMaterial::RenderMask(AlphaMaskedMaterialData*)
AlphaMaskedMaterial::SetAlphaRef(AlphaMaskedMaterialData&, unsigned int)
AlphaMaskedMaterial::SetRenderCallbackFunction(AlphaMaskedMaterialData&, void (*)(void*, NURENDERSTAGE), void*)
AlphaMaskedMaterial::FlipTextureMask(AlphaMaskedMaterialData&, bool)
AlphaMaskedMaterial::GetRenderedTexID()
AlphaMaskedMaterial::HasRendered(AlphaMaskedMaterialData const*)
DRCTouch::DRCTouch()
DRCTouch::DRCTouch(DRCTouch const&)
DRCTouch::operator=(DRCTouch const&)
DRCTouch::UpdateFromPad(NUPAD*, float)
DRCTouch::IsDown() const
DRCTouch::IsWithinRectangle(int, int, int, int) const
DRCTouch::IsWithinRadiusOf(int, int, float) const
DRCTouch::IsWithinFlashSceneElement(FlashScene*, FlashElement*) const
DRCTouch::IsWithinFlashSceneElementNorm(FlashScene*, FlashElement*) const
DRCTouch::SetInteraction(void*)
DRCTouch::AttemptInteractionWith(void*)
DRCTouch::CanInteractWith(void*)
DRCTouch::IsInteracting() const
DRCTouch::GetInteraction() const
DRCTouch::IsHeld()
DRCTouch::HeldInPlaceForAtLeast(float)
DRCTouch::Tapped()
DRCTouch::HasMoved() const
DRCTouch::GetTimeSinceReleased()
DRCTouch::GetXOffsetFromStart() const
DRCTouch::GetYOffsetFromStart() const
DRCTouch::GetTimeSincePressed()
TouchTarget::TouchTarget()
TouchTarget::~TouchTarget()
TouchTarget::~TouchTarget()
TouchTarget::FindTargetForTouch(DRCTouch const&)
TouchTarget::MayContainChildTargets() const
TouchTarget::IsChildTouchEnabled() const
TouchTarget::IsTouchEnabled() const
TouchTarget::FindChildTouchTarget(DRCTouch const&)
TouchTarget::OnPress(DRCTouch const&)
TouchTarget::OnRelease(DRCTouch const&)
TouchTarget::OnTap(DRCTouch const&, int)
TouchTarget::OnTapSeriesEnd(DRCTouch const&, int)
TouchTarget::OnHold(DRCTouch const&)
TouchTarget::OnHoldRelease(DRCTouch const&)
TouchTarget::OnDrag(DRCTouch const&)
TouchTarget::SetTouchEnabled(bool, bool)
TouchTarget::SetTouchFlag(int, bool)
TouchTarget::SetMayContainChildren(bool)
TouchTarget::SetTouchFlag(int)
TouchTarget::ClearTouchFlag(int)
TouchTarget::IsTouchFlagSet(int)
TouchTarget::ContainsTarget(TouchTarget const&)
TouchTargetList::TouchTargetList()
TouchTargetList::~TouchTargetList()
TouchTargetList::AddTarget(TouchTarget*)
TouchTargetList::GetTargetAtIndex(int) const
TouchTargetList::GetNumTargets() const
TouchTargetList::Clear()
TouchTargetList::FindTargetForTouch(DRCTouch const&)
TouchTargetList::ContainsTarget(TouchTarget const&)
TouchTargetLayer::TouchTargetLayer()
TouchTargetLayer::~TouchTargetLayer()
TouchTargetLayer::~TouchTargetLayer()
TouchTargetLayer::HitTest(DRCTouch const&)
TouchTargetLayer::GetChildTargetList()
TouchTargetLayer::FindChildTouchTarget(DRCTouch const&)
TouchTargetLayer::ContainsTarget(TouchTarget const&)
DRCTouchTrigger::TouchEventData::TouchEventData(DRCTouch const&, int)
DRCTouchTrigger::DRCTouchTrigger()
DRCTouchTrigger::~DRCTouchTrigger()
DRCTouchTrigger::ClearAllocations()
DRCTouchTrigger::~DRCTouchTrigger()
DRCTouchTrigger::SetTouchTargetList(TouchTargetList*)
DRCTouchTrigger::GetTouchTargetList() const
DRCTouchTrigger::SetMinHoldTime(float)
DRCTouchTrigger::Update(NUPAD*, float)
DRCTouchTrigger::Update(DRCTouch&, float)
DRCTouchTrigger::OnHold(DRCTouch&)
DRCTouchTrigger::OnPress(DRCTouch&)
DRCTouchTrigger::OnDrag(DRCTouch&)
DRCTouchTrigger::OnRelease(DRCTouch&)
DRCTouchTrigger::OnTap(DRCTouch&, int)
DRCTouchTrigger::OnHoldRelease(DRCTouch&)
DRCTouchTrigger::OnTapSeriesEnd(DRCTouch&, int)
DRCTouchTrigger::EventNotify(Event&, NuEventData&)
DRCTouchTrigger::ClearCurrentTarget()
DRCTouchTrigger::FindTarget(DRCTouch const&)
DRCTouchTrigger::TargetChanged(TouchTarget*)
DRCTouchTrigger::Clear()
DRCTouchTrigger::TouchEventData::~TouchEventData()
TouchTarget::TargetData::~TargetData()
NuVector<TouchTarget*>::Reserve(unsigned int, bool)
LegoCityGameIconRenderer::IconData::IconData()
LegoCityGameIconRenderer::IconData::SetFadeUpTime(float)
LegoCityGameIconRenderer::IconData::SetFadeUpTimeFrom(LegoCityGameIconRenderer::IconData const&)
LegoCityGameIconRenderer::IconData::GetGreatestFadeUpTime()
LegoCityGameIconRenderer::IconData::GetFadeUpTimeVar(int)
LegoCity_OverHeadIcon_DrawIcon(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoCity_OverHeadIcon_DrawIcon_OffScreen(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoCity_OverHeadIcon_DrawIcon_AnimateScale(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoCity_OverHeadIcon_DrawIcon_AnimateOffScreen(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoCityGameIconRenderer::CalculateIconPosForVehicle(MechVehicle&, float, float&, NUVEC&)
LegoCityGameIconRenderer::CalculateIconPosForCharacter(MechCharacter&, float, float&, NUVEC&)
LegoCityGameIconRenderer::QueryFading(GAMEMESSAGE*, LegoCityGameIconRenderer::IconData&, float, int)
LegoCityGameIconRenderer::GetCurrentRenderPriority(int)
LegoCityGameIconRenderer::ResetRenderPriorities()
LegoCityGameIconRenderer::ResetRenderPriority(int)
LegoCityGameIconRenderer::RaiseRenderPriority(LegoCityGameIconRenderer::eIconPriority, int)
LegoCityGameIconRenderer::AddGameIcon(LegoCityGameIconRenderer::IconData&)
LegoCityGameIconRenderer::UpdateIconPriority(MechCharacter*)
LegoCityGameIcon::LegoCityGameIcon()
LegoCityGameIcon::Reset()
LegoCityGameIcon::CheckIsEnabled()
LegoCityGameIcon::SetEnabled(bool)
LegoCityGameIcon::Process()
LegoCityGameIcon::AddIconMessage()
LegoCityGameIcon::SetNewType(LegoCityGameIcon::eType, void*, bool)
LegoCityGameIcon::ForceOff(bool)
LegoCityGameIcon::IsShowing()
LegoCityGameIcon::FadeIn(float)
LegoCityGameIcon::FadeOut(float)
LegoCityGameIcon::SetIconTarget(Gizmo*, nuhspecial_s*, bool, float)
LegoCityGameIcon::SetIcon(NUVEC const&, nuhspecial_s*, bool)
LegoCityGameIcon::SetIconTarget(VuVec const*, nuhspecial_s*, bool, float)
LegoCityGameIcon::SetIconTarget(ApiCharacter*, nuhspecial_s*, bool, float)
LegoCityGameIcon::SetIconTarget(ApiVehicle*, nuhspecial_s*, bool, float)
LegoCityGameIcon::SetIconTarget(AIConvexLocator*, nuhspecial_s*, bool, float)
LegoCityGameIcon::EventNotify(Event&, NuEventData&)
LegoCityGameIcon::GetIconPos()
LegoCityGameIcon::GetIconTarget(Gizmo*&)
LegoCityGameIcon::GetIconTarget(ApiCharacter*&)
LegoCityGameIcon::GetIconTarget(ApiVehicle*&)
LegoCityGameIcon::GetIconTarget(AIConvexLocator*&)
LegoCityGameIcon::GetIconTarget(NUVEC*&)
LegoCityGameIcon::GetIconTarget(MechVehicle*&)
LegoCityGameIcon::~LegoCityGameIcon()
FastTravelUI::TravelLock::TravelLock(bool)
FastTravelUI::TravelLock::Enter()
FastTravelUI::TravelLock::~TravelLock()
FastTravelUI::TravelLock::Exit()
FastTravelUI::FastTravelUI(int)
FastTravelUI::~FastTravelUI()
FastTravelUI::~FastTravelUI()
FastTravelUI::Reset()
FastTravelUI::Lock(WORLDINFO&, char const*)
FastTravelUI::Unlock(WORLDINFO&, char const*)
FastTravelUI::ShowMap()
FastTravelUI::GetFastTravelIndexFromName(char const*) const
FastTravelUI::Activate(WORLDINFO&, GizSwitch&, FastTravelUI::eMode)
FastTravelUI::CanActivate() const
FastTravelLockAddOn::GetFrom(GizSwitch&)
FastTravelUI::Deactivate(WORLDINFO&)
FastTravelUI::IsActivated(int)
FastTravelUI::HasSelectedDoor()
FastTravelUI::GoThroughDoor(bool, GizmoDoor*)
FastTravelUI::OnSelectFastTravel()
FastTravelUI::Update()
FastTravelUI::EventNotify(Event&, NuEventData&)
FastTravelUI::PlayerTeleported(MechCharacter*)
FastTravelUI::ClearNotifyingFlag()
FastTravelUI::IsLocked()
FastTravelUI::UnlockTriggerPin(WORLDINFO&, char const*)
FastTravelLock_Player::GetOrCreateFor(MechCharacter*)
FastTravelLock_Player::SetFinished(bool)
FastTravelUI::OnSelectDriveTrain(GizSwitch*)
FastTravelUI::GetSwitch()
FastTravelUI::GetOwnerCharacter()
FastTravelUI::IsSelectedDoor(GizmoDoor*)
FastTravelUI::PlayTriggerSFXForMode(FastTravelUI::eMode)
LegacyFastTravelScriptEvent::Fire(NuEventData const&)
FastTravelScriptEvent::Validate()
FastTravelScriptEvent::Fire(NuEventData const&)
SAction_DoFastTravelDoor::Exec(ScriptContext&)
SAction_LockFastTravel::Exec(ScriptContext&)
FastTravelLockAddOn::GetFrom(ScriptContext&)
FastTravelLockAddOn::AddTo(ScriptContext&)
FastTravelLockAddOn::FastTravelLockAddOn(HashedKey const&)
FastTravelLockAddOn::~FastTravelLockAddOn()
non-virtual thunk to FastTravelLockAddOn::~FastTravelLockAddOn()
FastTravelLockAddOn::~FastTravelLockAddOn()
non-virtual thunk to FastTravelLockAddOn::~FastTravelLockAddOn()
FastTravelLockAddOn::OnAdded()
FastTravelLockAddOn::OnRemoved()
FastTravelLockAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to FastTravelLockAddOn::OnHook(unsigned char, HookArgs*)
FastTravelLock_Player::FastTravelLock_Player(HashedKey const&)
FastTravelLock_Player::~FastTravelLock_Player()
non-virtual thunk to FastTravelLock_Player::~FastTravelLock_Player()
non-virtual thunk to FastTravelLock_Player::~FastTravelLock_Player()
FastTravelLock_Player::~FastTravelLock_Player()
non-virtual thunk to FastTravelLock_Player::~FastTravelLock_Player()
non-virtual thunk to FastTravelLock_Player::~FastTravelLock_Player()
FastTravelLock_Player::OnAdded()
FastTravelLock_Player::OnRemoved()
FastTravelLock_Player::OnHook(unsigned char, HookArgs*)
FastTravelLock_Player::UpdateFreedomCheck(float)
FastTravelLock_Player::IsPlayerFinished()
non-virtual thunk to FastTravelLock_Player::OnHook(unsigned char, HookArgs*)
FastTravelLock_Player::EventNotify(Event&, NuEventData&)
non-virtual thunk to FastTravelLock_Player::EventNotify(Event&, NuEventData&)
FastTravelLock_Player::SetWaitingToTeleport()
FastTravelLock_Player::IsPlayerFreeFromFastTravel()
SAction_FastTravelStationScript::Exec(ScriptContext&)
LegacyFastTravelScriptEvent::~LegacyFastTravelScriptEvent()
FastTravelScriptEvent::~FastTravelScriptEvent()
SAction_DoFastTravelDoor::~SAction_DoFastTravelDoor()
SAction_DoFastTravelDoor::GetName() const
SAction_DoFastTravelDoor::GetInputs(SCmdParams&) const
SAction_DoFastTravelDoor::GetOutputs(SCmdParams&) const
SAction_LockFastTravel::~SAction_LockFastTravel()
SAction_LockFastTravel::GetName() const
SAction_LockFastTravel::GetInputs(SCmdParams&) const
SAction_LockFastTravel::GetOutputs(SCmdParams&) const
SAction_FastTravelStationScript::~SAction_FastTravelStationScript()
SAction_FastTravelStationScript::GetName() const
SAction_FastTravelStationScript::GetInputs(SCmdParams&) const
SAction_FastTravelStationScript::GetOutputs(SCmdParams&) const
FastTravelUI::FastTravelEventData::~FastTravelEventData()
SuperBuildTargetAchieved::SuperBuildTargetAchieved()
SuperBuildTargetAchieved::~SuperBuildTargetAchieved()
SuperBuildTargetAchieved::InitFromFlash(FlashScene*)
SuperBuildTargetAchieved::Update(float)
SuperBuildTargetAchieved::StartWaiting()
CityPDA_PlayGoWarning::CityPDA_PlayGoWarning(int)
CityPDA_PlayGoWarning::~CityPDA_PlayGoWarning()
CityPDA_PlayGoWarning::~CityPDA_PlayGoWarning()
CityPDA_PlayGoWarning::Prepare(FlashScene*)
CityPDA_PlayGoWarning::AddTouchTargets(TouchTargetList&)
CityPDA_PlayGoWarning::UpdateProgress(float)
CityPDA_PlayGoWarning::Update(float)
CityPDA_PlayGoWarning::EventNotify(Event&, NuEventData&)
CityPDA_PlayGoWarning::Show()
CSListHeader<UIOverlay_MapLink>::~CSListHeader()
UIOverlay_Map::UIOverlay_Map()
UIOverlay_Map::~UIOverlay_Map()
UIOverlay_Map::~UIOverlay_Map()
UIOverlay_Map::Init()
UIOverlay_Map::Load(NuFile*)
UIOverlay_Map::Release()
UIOverlay_Map::Clear()
UIOverlay_Map::Restart()
UIOverlay_Map::Update(float)
UIOverlay_Map::Render()
UIOverlay_Map::AddMapRenderFn(void (*)(void*), void*)
UIOverlay_Map::RemoveMapRenderFn(int)
UIOverlay_Maps::GetPlayerMap(int)
UIMap::Range::Range(float, float)
UIMap::Range::ClampInput(float)
UIMap::Range::Set(float, float)
UIMap::UIMap(int)
UIMap::~UIMap()
non-virtual thunk to UIMap::~UIMap()
UIMap::~UIMap()
non-virtual thunk to UIMap::~UIMap()
UIMap::SetFlashElement(FlashElement*)
UIMap::SetMapSize(float, float)
UIMap::GetFlashElement()
UIMap::SetMapPos(float, float)
UIMap::OffsetFromPanPosition(VuVec&, VuVec&, float&)
UIMap::ClampFlashPos(float&, float&)
UIMap::RefreshFocusCentre()
UIMap::ClampMapPos(float&, float&)
UIMap::SetOffsetFromOrigin(float, float)
UIMap::PanPositionFromOffset(VuVec&, VuVec&, float&)
UIMap::SetOpacity(float)
UIMap::GetWidth() const
UIMap::GetHeight() const
UIMap::GetTilesElement() const
UIMap::UpdateTransforms()
UIMap::UpdateOffsetRange()
UIMap::GetFlashPosFromMapPosition(VuVec*, float, float) const
UIMap::RefreshScreenRatio()
UIMap::UpdateScalePositionRotation()
UIMap::CalculateMapToScreenScale()
UIMap::Update(float)
UIMap::GetMapPosition(float&, float&)
UIMap::DebugManipulation()
UIMap::GetMapPositionFromScreen(int, int, float&, float&) const
UIMap::LoadForLevel(LegoLevelContainer&)
UIMap::InitWithParams(FlashScene*, FlashElement*, UIMapStateParameters&)
UIMap::SetPlaceholderPoliceStationMap(bool)
UIMap::IsUsingRubbishPlaceholderPoliceStationMap()
UIMap::RefreshWhetherOrNotWeAreToUseTheRubbishPlaceholderPoliceStationMap()
UIMap::Restart()
UIMap::GetCurrentMapRenderPosition(float&, float&) const
UIMap::GetCurrentMapRenderRotation(float&) const
UIMap::GetCurrentMapRenderScale(float&) const
UIMap::AddExternalRender(MapRenderAttachment&)
UIMap::RemoveExternalRenderer(MapRenderAttachment*)
UIMap::HasMovedFocusThisFrame()
UIMap::Render()
UIMap::OnEnterLevel(LegoLevelContainer&)
UIMap::OnExitLevel(LegoLevelContainer&)
UIMap::GetWorldPositionFromScreen(int, int, VuVec&) const
UIMap::GetWorldPositionFromMap(float, float, VuVec&) const
UIMap::GetWorldPositionFromMap(float, float, NUVEC&) const
UIMap::GetMapPositionFromWorld(NUVEC const&, float&, float&) const
UIMap::GetMapPositionFromWorld(VuVec const&, float&, float&) const
UIMap::GetMapUnitScale(float&, float&)
UIMap::GetRenderPosFromMapPosition(float, float, float&, float&) const
UIMap::GetRenderPosFromWorldPosition(VuVec const&, VuVec&) const
UIMap::GetManipulator()
UIMap::EnableRotateAroundPoint(bool)
UIMap::RemoveMapRotation()
UIMapPin::IconType::IconType()
UIMapPin::IconType::IconType(int)
UIMapPin::IconType::IconType(char const*)
UIMapPin::GetIconTypeFromName(char const*)
UIMapPin::IconType::IconType(UIMapPin::IconType const&)
UIMapPin::IconType::operator=(UIMapPin::IconType const&)
UIMapPin::IconType::GetId() const
UIMapPin::UIMapPin(int, UIMapPinHandler*)
UIMapPin::~UIMapPin()
UIMapPin::~UIMapPin()
UIMapPin::SetMapPosition(float, float)
UIMapPin::SetWorldPositionY(float)
UIMapPin::GetMapX()
UIMapPin::GetMapY()
UIMapPin::SetScreenPosition(float, float)
UIMapPin::RefreshScreenPosition(UIMap&)
UIMapPin::SetEnabled(bool, bool)
UIMapPin::GetSourceObject()
UIMapPin::Highlight()
UIMapPin::StopHighlighting()
UIMapPin::ShowShield(bool)
UIMapPin::SelectPin(unsigned int)
UIMapPin::DoubleClickPin()
UIMapPin::GetDistanceFrom(float, float)
UIMapPin::GetScreenDistanceFrom(float, float)
UIMapPin::GetRotation() const
UIMapPin::GetScale() const
UIMapPin::SetRotation(float)
UIMapPin::SetScale(float)
UIMapPin::SetIconType(UIMapPin::IconType const&)
UIMapPin::GetCurrentIconType() const
UIMapPin::RenderEdgeMarker()
UIMapPin::Render(bool, float)
UIMapPin::ClampToMiniMap(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
UIMapPin::ClampToMainMap(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
UIMapPin::UpdateMiniMapClamp(float)
UIMapPin::UpdateMainMapClamp(float)
UIMapPin::Update(float)
UIMapPin::IsLocked()
UIMapPin::GetIconTypeFromNameID(unsigned int)
UIMapPin::GetIconWithNameID(int)
UIMapPin::ClearIconTypes()
UIMapPin::LoadIconTypesNew(char const*)
UIMapPin::GenerateTypeNameIDFromString(char const*)
UIMapPin::LoadIconTypesFromSceneNew(MapPinDataManager&)
UIMapPin::GetSourceObject() const
UIMapPin::IsLinkedToObject()
UIMapPin::IsSelectable()
UIMapPin::CanFocusOnSelection() const
UIMapPin::SetCanFocusOnSelection(bool)
UIMapPin::HitTest(DRCTouch const&)
UIMapPin::OnTapSeriesEnd(DRCTouch const&, int)
UIMapPin::OnTapSeriesEnd(int)
UIMapPin::OnHold(DRCTouch const&)
UIMapPin::OnHold()
UIMapPin::OnHoldRelease(DRCTouch const&)
UIMapPin::OnHoldRelease()
UIMapPin::SetAsHolding(bool)
UIMapPin::SetSelectable(bool)
UIMapPin::OnUnlinkSource()
UIMapPinHandler::UIMapPinHandler(UIMap&, int)
UIMapPinHandler::~UIMapPinHandler()
UIMapPinHandler::GetMap()
non-virtual thunk to UIMapPinHandler::~UIMapPinHandler()
non-virtual thunk to UIMapPinHandler::~UIMapPinHandler()
UIMapPinHandler::~UIMapPinHandler()
non-virtual thunk to UIMapPinHandler::~UIMapPinHandler()
non-virtual thunk to UIMapPinHandler::~UIMapPinHandler()
UIMapPinHandler::Init()
UIMapPinHandler::HookUpPins()
UIMapPinHandler::Exit()
UIMapPinHandler::Render(UIMap const&)
UIMapPinHandler::RenderMiniMapEdgePins(UIMap const&)
UIMapPinHandler::CreatePins()
UIMapPinHandler::EventNotify(Event&, NuEventData&)
UIMapPinHandler::MakePinInactive(UIMapPin*)
UIMapPinHandler::MakePinActive(UIMapPin*)
non-virtual thunk to UIMapPinHandler::EventNotify(Event&, NuEventData&)
UIMapPinHandler::Update(float)
UIMapPinHandler::SetGlobalPinScale(float)
UIMapPinHandler::DeactivateAll()
UIMapPinHandler::GetAvailablePin()
UIMapPinHandler::FindPinNearestMapAbsolute(float, float, float)
UIMapPinHandler::FindPinNearestMapPos(float, float, int)
UIMapPinHandler::FindPinNearestScreenPos(float, float, int)
UIMapPinObject::UIMapPinObject(UIMapPinObjectInterface&)
UIMapPinObject::~UIMapPinObject()
UIMapPinObject::~UIMapPinObject()
UIMapPinObject::UpdatePin(UIMap&, UIMapPin*)
UIMapPinObject::SetVisible(bool)
UIMapPinObject::GetPin()
UIMapPinObject::SetEnabled(bool, bool)
UIMapPinObject::GetPin() const
UIMapPinObject::GetInterface() const
UIMapPinObject::GetInterface()
UIMapPinObject::GetData() const
UIMapPinObject::SetData(MapPinData const&)
UIMapPinObject::IsValid() const
UIMapPinObjectInterface::Pairing::Pairing()
UIMapPinObjectInterface::Pairing::~Pairing()
UIMapPinObjectInterface::Pairing::GetPin() const
UIMapPinObjectInterface::Pairing::GetObject() const
UIMapPinObjectInterface::Pairing::IsValid() const
UIMapPinObjectInterface::Pairing::IsLinked() const
UIMapPinObjectInterface::Pairing::Clear()
UIMapPinObjectInterface::UIMapPinObjectInterface(HashedNameParam const&, UIMapPinHandler*)
NuVector<HashedKey>::Reserve(unsigned int, bool)
NameHashedPinInterface::~NameHashedPinInterface()
UIMapPinObjectInterface::~UIMapPinObjectInterface()
UIMapPinObjectInterface::GetAvailablePinObject()
UIMapPinObjectInterface::GetAvailablePin()
UIMapPinObjectInterface::ReleasePin(UIMapPin*, bool)
UIMapPinObjectInterface::UnlinkObjectAndPin(UIMapPinObject*, UIMapPin*, bool)
UIMapPinObjectInterface::ReleaseAll()
UIMapPinObjectInterface::StealObject(UIMapPinObjectInterface::Pairing&)
UIMapPinObjectInterface::CanSaveObject(UIMapPinObject&)
UIMapPinObjectInterface::GetAvailablePairing(UIMapPinObjectInterface::Pairing&, bool)
UIMapPinObjectInterface::LinkPair(UIMapPinObjectInterface::Pairing const&, bool)
UIMapPinObjectInterface::LinkObjectAndPin(UIMapPinObject*, UIMapPin*, bool)
UIMapPinObjectInterface::StartUsingObject(UIMapPinObject*)
UIMapPinObjectInterface::StopUsingObject(UIMapPinObject*)
UIMapPinObjectInterface::ShowAllPinsForLayer(unsigned int)
UIMapPinObjectInterface::HideAllPinsForLayer(unsigned int)
UIMapPinObjectInterface::ShowAllPinsWithIconTypeName(unsigned int)
UIMapPinObjectInterface::HideAllPinsWithIconTypeName(unsigned int)
UIMapPinObjectInterface::CanShowPinsMenu() const
UIMapPinObjectInterface::ShouldAddtoLayer(unsigned int) const
UIMapPinObjectInterface::GetPinHandler()
UIMapPinObjectInterface::GetMap()
UIMapPinObjectInterface::GetObjectsInUse()
UIMapPinObjectInterface::GetPinData(unsigned int) const
UIMapPinObjectInterface::AddObjectToPool(UIMapPinObject*)
UIMapPinObjectInterface::GetInterfaceNameID() const
UIMapPinObjectInterface::GetAttachedLayerList() const
UIMapPinObjectInterface::LoadFromType(LegoLevelContainer&, MapPinDataType const&)
UIMapPinObjectInterface::LoadPinObject(LegoLevelContainer&, MapPinData const&, bool)
UIMapPinObjectInterface::RemovePinObject(LegoLevelContainer&, MapPinData const&)
UIMapPinObjectInterface::SetObjPinData(UIMapPinObject&, unsigned int)
NameHashedPinInterface::NameHashedPinInterface(HashedNameParam const&, UIMapPinHandler*)
NameHashedPinInterface::~NameHashedPinInterface()
NameHashedPinInterface::AddHashedPin(HashedNameParam const&, bool)
NameHashedPinInterface::FindHashedPin(HashedNameParam const&)
NameHashedMapPinObject::GetNameHash() const
NameHashedPinInterface::RemoveHashedPin(HashedNameParam const&)
NameHashedPinInterface::ShowHashedPin(HashedNameParam const&)
NameHashedPinInterface::HideHashedPin(HashedNameParam const&)
NameHashedMapPinObject::NameHashedMapPinObject(UIMapPinObjectInterface&)
NameHashedMapPinObject::~NameHashedMapPinObject()
NameHashedMapPinObject::UpdatePin(UIMap&, UIMapPin*)
MapPinShowRequestEventData::~MapPinShowRequestEventData()
MapPinEventData::~MapPinEventData()
MapPinSelectEventData::~MapPinSelectEventData()
MapPinTypeChangeEventData::~MapPinTypeChangeEventData()
MapRenderAttachment::~MapRenderAttachment()
MapRenderAttachment::~MapRenderAttachment()
UIMapPinObjectInterface::PinObjectEventData::~PinObjectEventData()
SpecialPinObject::SpecialPinObject(UIMapPinObjectInterface&)
SpecialPinObject::~SpecialPinObject()
SpecialPinObject::~SpecialPinObject()
SpecialPinObject::UpdatePin(UIMap&, UIMapPin*)
SpecialPinObject::GetID()
SpecialPinObject::GetNameIDFromIndex(unsigned int)
SpecialPinInterface::SpecialPinInterface(UIMapPinHandler*)
SpecialPinInterface::~SpecialPinInterface()
SpecialPinInterface::~SpecialPinInterface()
SpecialPinInterface::FindPinForID(int)
SpecialPinInterface::LinkAllPins()
SpecialPinInterface::LinkSpecialPin(int)
SpecialPinInterface::SetShouldBeVisible(SpecialPinObject::eID, bool)
SpecialPinInterface::CanSaveObject(UIMapPinObject&)
SpecialPinInterface::LoadPinObject(LegoLevelContainer&, MapPinData const&, bool)
SpecialPinInterface::ShouldAddtoLayer(unsigned int) const
SpecialPinInterface::ShowAllPinsForLayer(unsigned int)
SpecialPinInterface::HideAllPinsForLayer(unsigned int)
CharacterPinInterface::CharacterPinInterface(UIMapPinHandler*, int)
CharacterPinInterface::~CharacterPinInterface()
CharacterPinInterface::~CharacterPinInterface()
CharacterPinInterface::AddCharacterPin(ApiCharacter*, bool, UIMapPin::IconType const&)
CharacterPinInterface::FindCharacterPin(ApiCharacter*)
CharacterPinObject::SetShouldRotate(bool)
CharacterPinObject::GetCharacter()
CharacterPinInterface::RemoveCharacterPin(ApiCharacter*)
CharacterPinInterface::CanSaveObject(UIMapPinObject&)
CharacterPinInterface::LoadPinObject(LegoLevelContainer&, MapPinData const&, bool)
CharacterPinObject::CharacterPinObject(UIMapPinObjectInterface&)
CharacterPinObject::~CharacterPinObject()
CharacterPinObject::~CharacterPinObject()
CharacterPinObject::ShouldRotate()
CharacterPinObject::UpdatePin(UIMap&, UIMapPin*)
SAction_UI_Map_SetCharacterActive::Exec(ScriptContext&)
VehiclePinInterface::VehiclePinInterface(UIMapPinHandler*, int)
VehiclePinInterface::~VehiclePinInterface()
VehiclePinInterface::~VehiclePinInterface()
VehiclePinInterface::AddVehiclePin(ApiVehicle*, bool, HashedNameParam const&)
VehiclePinInterface::FindVehiclePin(ApiVehicle*)
VehiclePinObject::SetShouldRotate(bool)
VehiclePinObject::GetVehicle()
VehiclePinInterface::RemoveVehiclePin(ApiVehicle*)
VehiclePinInterface::CanSaveObject(UIMapPinObject&)
VehiclePinInterface::LoadPinObject(LegoLevelContainer&, MapPinData const&, bool)
VehiclePinObject::VehiclePinObject(UIMapPinObjectInterface&)
VehiclePinObject::~VehiclePinObject()
VehiclePinObject::~VehiclePinObject()
VehiclePinObject::ShouldRotate()
VehiclePinObject::UpdatePin(UIMap&, UIMapPin*)
SAction_UI_Map_SetVehicleActive::Exec(ScriptContext&)
LocatorPinObject::LocatorPinObject(UIMapPinObjectInterface&)
LocatorPinObject::~LocatorPinObject()
LocatorPinObject::~LocatorPinObject()
LocatorPinInterface::LocatorPinInterface(HashedNameParam const&, UIMapPinHandler*, int)
LocatorPinInterface::~LocatorPinInterface()
LocatorPinInterface::~LocatorPinInterface()
LocatorPinInterface::AddLocatorPin(AIConvexLocator&, bool)
LocatorPinInterface::GetIconNameFromLocator(AIConvexLocator&, char*, int)
LocatorPinInterface::FindLocatorPin(AIConvexLocator&)
LocatorPinInterface::RemoveLocatorPin(AIConvexLocator&)
LocatorPinInterface::LoadPinObject(LegoLevelContainer&, MapPinData const&, bool)
FastTravelPinInterface::ActivatePins(bool)
FastTravelPinInterface::FastTravelPinInterface(UIMapPinHandler*, int)
FastTravelPinInterface::~FastTravelPinInterface()
non-virtual thunk to FastTravelPinInterface::~FastTravelPinInterface()
FastTravelPinInterface::~FastTravelPinInterface()
non-virtual thunk to FastTravelPinInterface::~FastTravelPinInterface()
AreaTriggeredPinObject::AreaTriggeredPinObject(UIMapPinObjectInterface&)
AreaTriggeredPinObject::~AreaTriggeredPinObject()
AreaTriggeredPinObject::~AreaTriggeredPinObject()
AreaTriggeredPinObject::UpdatePin(UIMap&, UIMapPin*)
AreaTriggeredPinObject::SetTriggerArea(PinTriggerArea const&)
AreaTriggeredPinObject::GetTriggerArea() const
AreaTriggeredPinObject::SetAreaName(HashedKey const&)
AreaTriggeredPinObject::GetAreaName() const
AreaTriggeredPinInterface::AreaTriggeredPinInterface(UIMapPinHandler*, int)
AreaTriggeredPinInterface::~AreaTriggeredPinInterface()
AreaTriggeredPinInterface::~AreaTriggeredPinInterface()
AreaTriggeredPinInterface::LoadPinObject(LegoLevelContainer&, MapPinData const&, bool)
AreaTriggeredPinInterface::AddAreaTriggeredPin(AreaTriggeredPinInterface::eDefaultPinTypes, HashedKey const&, PinTriggerArea const&, bool)
AreaTriggeredPinInterface::AddAreaTriggeredPin(HashedKey const&, HashedKey const&, PinTriggerArea const&, bool)
AreaTriggeredPinInterface::FindAreaTriggeredPin(HashedKey const&)
AreaTriggeredPinInterface::FindAreaTriggeredPin(VuVec const&)
AreaTriggeredPinInterface::FindAreaTriggeredPin(PinTriggerArea const&)
AreaTriggeredPinInterface::RemoveAreaTriggeredPin(VuVec const&)
AreaTriggeredPinInterface::RemoveAreaTriggeredPin(PinTriggerArea const&)
AreaTriggeredPinInterface::RemoveAreaTriggeredPin(HashedKey const&)
UIMapPinInterfaceList::UIMapPinInterfaceList(UIMapPinHandler&)
UIMapPinInterfaceList::PinInterfaceList::PinInterfaceList(UIMapPinHandler&)
UIMapPinInterfaceList::AddInterfacesToBaseList()
UIMapPinInterfaceList::~UIMapPinInterfaceList()
UIMapPinInterfaceList::Init()
UIMapPinInterfaceList::LoadPinType(LegoLevelContainer&, MapPinDataType const&)
UIMapPinInterfaceList::GetInterfaceFromNameID(unsigned int)
UIMapPinInterfaceList::AddPinObject(LegoLevelContainer&, MapPinData const&, bool)
UIMapPinInterfaceList::RemovePinObject(LegoLevelContainer&, MapPinData const&)
UIMapPinInterfaceList::ReleaseAll()
UIMapPinInterfaceList::GetCount()
UIMapPinInterfaceList::GetInterfaceIndexFromNameID(unsigned int) const
UIMapPinInterfaceList::GetInterfaceFromIndex(unsigned int)
UIMapPinInterfaceList::GetInterfaceFromIndex(unsigned int) const
UIMapPinInterfaceList::GetInterfaceFromNameID(unsigned int) const
UIMapPinInterfaceList::GetInterfaceList()
UIMapPinInterfaceList::GetInterfaceList() const
UIMapPinInterfaceList::AddToBaseList(UIMapPinObjectInterface&)
SAction_UI_Map_SetCharacterActive::~SAction_UI_Map_SetCharacterActive()
SAction_UI_Map_SetCharacterActive::GetName() const
SAction_UI_Map_SetCharacterActive::GetInputs(SCmdParams&) const
SAction_UI_Map_SetCharacterActive::GetOutputs(SCmdParams&) const
SAction_UI_Map_SetVehicleActive::~SAction_UI_Map_SetVehicleActive()
SAction_UI_Map_SetVehicleActive::GetName() const
SAction_UI_Map_SetVehicleActive::GetInputs(SCmdParams&) const
SAction_UI_Map_SetVehicleActive::GetOutputs(SCmdParams&) const
UIMapPinLayer::UIMapPinLayer()
NuVector<UIMapPinLayer::InterfaceObjectCount>::Reserve(unsigned int, bool)
UIMapPinLayer::~UIMapPinLayer()
UIMapPinLayer::Release()
UIMapPinLayer::IsActivated()
UIMapPinLayer::IsShowing()
UIMapPinLayer::ActivateLayer()
UIMapPinLayer::DeactivateLayer()
UIMapPinLayer::HideAll()
UIMapPinLayer::ShowAll()
UIMapPinLayer::GetNameID() const
UIMapPinLayer::SetNameID(HashedKey const&)
UIMapPinLayer::AddToLayer(UIMapPinObject&)
UIMapPinLayer::FindPinInterface(UIMapPinObjectInterface*, unsigned int&)
UIMapPinLayer::RemoveFromLayer(UIMapPinObject&)
UIMapPinManager::UIMapPinManager(MapPinDataManager const&, UIMap&, int)
UIMapPinManager::~UIMapPinManager()
UIMapPinManager::~UIMapPinManager()
UIMapPinManager::SetLayerNameID(unsigned int, HashedKey const&)
UIMapPinManager::InitForLevel(LegoLevelContainer&)
UIMapPinManager::GetLayerIDFromNameID(HashedKey const&)
UIMapPinManager::ActivateDefaultLayersOnly()
UIMapPinManager::ActivateCustomLayersOnly()
UIMapPinManager::Update(float)
UIMapPinManager::Release()
UIMapPinManager::DeactivateDefaultLayersOnly()
UIMapPinManager::DeactivateCustomLayersOnly()
UIMapPinManager::ShowAllActivatedLayers()
UIMapPinManager::HideAllLayers()
UIMapPinManager::ShowLayer(UIMapPinManager::eLayerID)
UIMapPinManager::HideLayer(UIMapPinManager::eLayerID)
UIMapPinManager::GetPinsSaveData() const
UIMapPinManager::ActivateLayerByID(UIMapPinManager::eLayerID)
UIMapPinManager::ActivateLayer(HashedKey const&)
UIMapPinManager::DeactivateLayerByID(UIMapPinManager::eLayerID)
UIMapPinManager::DeactivateLayer(HashedKey const&)
UIMapPinManager::IsLayerIDValid(UIMapPinManager::eLayerID)
UIMapPinManager::GetPinInterface(unsigned int)
UIMapPinManager::GetPinInterface(unsigned int) const
UIMapPinManager::GetPinInterfaceList()
UIMapPinManager::GetPinInterfaceList() const
UIMapPinManager::GetLocatorPinsForPin(unsigned int, char const*)
UIMapPinManager::GetInterfaceForPin(unsigned int, char const*)
UIMapPinManager::CanAddPin(unsigned int, char const*, bool)
UIMapPinManager::CanRemovePin(unsigned int, char const*, bool)
UIMapPinManager::GetPinHandler() const
UIMapPinManager::GetPinHandler()
UIMapPinManager::EventNotify(Event&, NuEventData&)
UIMapPinManager::AddInterfaceToLayer(UIMapPinObjectInterface&, UIMapPinManager::eLayerID)
SAction_UI_Map_ShowPinsLayer::Exec(ScriptContext&)
SAction_UI_Map_ShowPinsLayer::~SAction_UI_Map_ShowPinsLayer()
SAction_UI_Map_ShowPinsLayer::GetName() const
SAction_UI_Map_ShowPinsLayer::GetInputs(SCmdParams&) const
SAction_UI_Map_ShowPinsLayer::GetOutputs(SCmdParams&) const
MapPinDataType::MapPinDataType()
MapPinDataType::~MapPinDataType()
MapPinDataType::SetAsLoaded()
MapPinDataType::IsLoaded()
MapPinDataType::GetProperties() const
MapPinDataType::GetNameID() const
MapPinData::MapPinData(bool)
MapPinData::~MapPinData()
MapPinData::IsValid() const
MapPinData::GetStoredIndex() const
MapPinData::SetAsLoadedFromType(MapPinDataType const&, unsigned int)
MapPinData::IsLoaded()
MapPinData::GetPinType() const
MapPinData::GetNameID() const
MapPinData::GetName() const
MapPinData::GetAreaName() const
MapPinData::GetProperties() const
MapPinDataTypeParser::ParseFromFile(char const*, MapPinDataType (&) [40])
MapPinDataTypeParser::GetConfigkeywords()
MapPinDataTypeParser::Parse_PINTYPE_BEGIN(nufpar_s*)
MapPinDataTypeParser::Parse_name(nufpar_s*)
MapPinDataTypeParser::Parse_layerName(nufpar_s*)
MapPinDataTypeParser::Parse_iconTypeID(nufpar_s*)
MapPinDataTypeParser::Parse_menuLayoutType(nufpar_s*)
MapPinDataTypeParser::Parse_menuTitle(nufpar_s*)
MapPinDataTypeParser::Parse_menuDescription(nufpar_s*)
MapPinDataTypeParser::Parse_PINTYPE_END(nufpar_s*)
MapPinDataParser::ParseFromFile(char const*, MapPinDataManager&, MapPinData (&) [350])
MapPinDataParser::GetConfigkeywords()
MapPinDataParser::Parse_PINDATA_BEGIN(nufpar_s*)
MapPinDataParser::Parse_pinType(nufpar_s*)
MapPinDataManager::FindPinTypeWithID(HashedKey const&) const
MapPinDataParser::Parse_pinName(nufpar_s*)
MapPinDataParser::Parse_areaName(nufpar_s*)
MapPinDataParser::Parse_iconTypeName(nufpar_s*)
MapPinDataParser::Parse_reference(nufpar_s*)
MapPinDataParser::Parse_menuTitle(nufpar_s*)
MapPinDataParser::Parse_menuDescription(nufpar_s*)
MapPinDataParser::Parse_startEnabled(nufpar_s*)
MapPinDataParser::Parse_PINDATA_END(nufpar_s*)
MapPinDataManager::MapPinDataManager()
MapPinDataManager::FindPinWithID(HashedKey const&) const
MapPinDataManager::FindPinIndexWithID(HashedKey const&) const
MapPinDataManager::FindPinTypeIndexWithID(HashedKey const&) const
MapPinDataManager::LoadFromDirectory(char const*)
MapPinDataManager::LoadTypesFromFile(char const*, MapPinDataType (&) [40])
MapPinDataManager::LoadObjectsFromFile(char const*, MapPinData (&) [350])
MapPinDataManager::GetTypeList() const
MapPinDataManager::GetTypeCount() const
MapPinDataManager::GetDataList() const
MapPinDataManager::GetDataCount() const
MapPinDataManager::GetSaveData() const
MapPinDataManager::PinTypesLoadedEventData::~PinTypesLoadedEventData()
MapPinDataManager::PinDataLoadedEventData::~PinDataLoadedEventData()
UIMapRenderManager::MapRenderComponents::LoadForLevel(LegoLevelContainer&)
UIMapRenderManager::MapRenderComponents::InitFromScene(FlashScene*)
UIMapRenderManager::MapRenderComponents::Restart(LevelContainer&)
UIMapRenderManager::MapRenderComponents::Update(float)
UIMapRenderManager::MapRenderComponents::Render()
UIMapRenderManager::MapRenderComponents::OnEnterLevel(LegoLevelContainer&)
UIMapRenderManager::MapRenderComponents::OnExitLevel(LegoLevelContainer&)
UIMapRenderManager::MapRenderComponents::SetActiveTileSet(HashedKey&, float)
UIMapRenderManager::MapRenderComponents::GetActiveTileSet() const
UIMapRenderManager::MapRenderComponents::GetTileSetElement()
UIMapRenderManager::MapRenderComponents::EventNotify(Event&, NuEventData&)
UIMapRenderManager::UIMapRenderManager(UIMap const&)
UIMapRenderManager::~UIMapRenderManager()
UIMapRenderManager::LoadForLevel(LegoLevelContainer&)
UIMapRenderManager::InitFromScene(FlashScene*)
UIMapRenderManager::Restart(LevelContainer&)
UIMapRenderManager::Update(float)
UIMapRenderManager::Render()
UIMapRenderManager::OnEnterLevel(LegoLevelContainer&)
UIMapRenderManager::OnExitLevel(LegoLevelContainer&)
UIMapRenderManager::AddExternalRender(MapRenderAttachment&)
UIMapRenderManager::RemoveExternalRenderer(MapRenderAttachment*)
UIMapRenderManager::SetActiveTileSet(HashedKey&, float)
UIMapRenderManager::SetDefaultFadeTime(float)
UIMapRenderManager::SetDefaultLoadRadius(unsigned int)
UIMapRenderManager::GetActiveTileSetElement()
UIMapRenderManager::MapRenderComponents::~MapRenderComponents()
UIMapRenderManager::MapRenderComponents::~MapRenderComponents()
MapTileSetTilesParser::LoadData(char const*, MapTileSet::MapTilesData&)
MapTileSetTilesParser::Parse_MAPTILE_BEGIN(nufpar_s*)
MapTileSetTilesParser::Parse_mapTile_Name(nufpar_s*)
MapTileSetTilesParser::Parse_maptile_Type(nufpar_s*)
MapTileSet::GetTileTypeFromName(char const*)
MapTileSetTilesParser::Parse_maptile_TopLeftX(nufpar_s*)
MapTileSetTilesParser::Parse_maptile_TopLeftY(nufpar_s*)
MapTileSetTilesParser::Parse_maptile_BottomRightX(nufpar_s*)
MapTileSetTilesParser::Parse_maptile_BottomRightY(nufpar_s*)
MapTileSetTilesParser::Parse_maptile_SizeX(nufpar_s*)
MapTileSetTilesParser::Parse_maptile_SizeY(nufpar_s*)
MapTileSetTilesParser::Parse_maptile_TilingSizeX(nufpar_s*)
MapTileSetTilesParser::Parse_maptile_TilingSizeY(nufpar_s*)
MapTileSetTilesParser::Parse_MAPTILE_END(nufpar_s*)
MapTileSet::IsMapTileSetDataValid(MapTileSetData const&)
MapTileSet::MapTileSet()
MapTileSet::~MapTileSet()
MapTileSet::LoadTilesFromData(MapTileSetData const&, MapTileSetTextureManager&)
MapTileSetTextureManager::LoadTexture(char const*, bool)
MapTileSet::NormaliseToSize(float, float)
MapTileSet::UnloadTiles()
MapTileSet::GetTileWithIndex(unsigned int) const
MapTileSet::GetTileList() const
MapTileSet::GetTileSetID() const
MapTileSet::GetTileSetTileCount() const
MapTileSetDataParser::LoadData(char const*, MapTileSetData (&) [4])
MapTileSetDataParser::Parse_tileSet_Directory(nufpar_s*)
MapTileSetDataParser::Parse_tileSet_SizeX(nufpar_s*)
MapTileSetDataParser::Parse_tileSet_SizeY(nufpar_s*)
MapTileSetManager::MapTileSetManager()
MapTileSetManager::~MapTileSetManager()
MapTileSetManager::Release()
MapTileSetManager::LoadForLevel(LegoLevelContainer&)
MapTileSetTextureManager::SetCanLoadTextures(bool)
NuDynamicStringT<false>::Append(char const*)
MapTileSetManager::AddTileSetFromData(MapTileSetData const&)
MapTileSetManager::SetMapElement(FlashElement*)
MapTileSetManager::OnEnterLevel(LegoLevelContainer&)
MapTileSetManager::OnExitLevel(LegoLevelContainer&)
MapTileSetManager::GetTileSet(HashedKey const&) const
MapTileSetManager::GetTileSetCount() const
MapTileSetManager::RemoveAllTileSets()
MapTileSetTextureManager::MapTileSetTextureManager()
MapTileSetTextureManager::~MapTileSetTextureManager()
MapTileSetTextureManager::ReleaseTextures()
MapTileSetTextureManager::AddMaterial(NuSmartPtr<NuMtl, true>)
MapTileSetTextureManager::CanLoadTextures()
gdv_ClampMinXCallback(dvDebugVarBase const*, void*)
gdv_ClampMaxXCallback(dvDebugVarBase const*, void*)
gdv_ClampMinYCallback(dvDebugVarBase const*, void*)
gdv_ClampMaxYCallback(dvDebugVarBase const*, void*)
UIMapManipulator::UIMapManipulator(UIMap&, int)
UIMapManipulator::~UIMapManipulator()
non-virtual thunk to UIMapManipulator::~UIMapManipulator()
UIMapManipulator::~UIMapManipulator()
non-virtual thunk to UIMapManipulator::~UIMapManipulator()
UIMapManipulator::SetEnabled(bool)
UIMapManipulator::GetParams()
UIMapManipulator::SetManipulationEnabled(bool)
UIMapManipulator::IsManipulationEnabled()
UIMapManipulator::Init(MapManipulateStateParameters&)
UIMapManipulator::ClampZoom(float)
UIMapManipulator::SetFocusViewport(RectangleF const&, float)
UIMapManipulator::SetZoomLevel(int, float, bool)
ShapeFn_EaseInOut(float)
UIMapManipulator::Restart()
UIMapManipulator::SetPanningEnabled(bool, bool)
GetMapInputFromPadInput(float)
UIMapManipulator::UpdateControls(float, bool)
UIMapManipulator::IsAutoDemonstrating()
UIMapManipulator::ChangeZoom(float)
UIMapManipulator::DemonstrateLocation(float, float, float)
UIMapManipulator::DemonstrateLocation(float, float, float, float)
UIMapManipulator::SetZoom(float, float, int)
UIMapManipulator::AutoDemonstrateLocation(float, float, float, float, float, bool)
UIMapManipulator::PanToTargetClampedToSpeed(float, float, float, float)
UIMapManipulator::GetAutoDemonstrateReturnPos() const
UIMapManipulator::SetAutoDemonstrateReturnPos(VuVec const&)
UIMapManipulator::PanToTargetChange(float, float)
UIMapManipulator::NotifyZoomStarted()
UIMapManipulator::NotifyZoomFinished()
UIMapManipulator::DemonstrateArea(float, float, float, float, int, float)
UIMapManipulator::DemonstrateAreaContaining(NUVEC2*, int, int, float)
UIMapManipulator::DemonstrateAreaContaining(VuVec*, int, int, float)
UIMapManipulator::SetZoomingEnabled(bool)
UIMapManipulator::IsZoomingEnabled()
UIMapManipulator::AdjustZoomLevel(int)
UIMapManipulator::GetNextZoomLevel(int)
UIMapManipulator::GetTargetZoom()
UIMapManipulator::GetZoomAtZoomLevel(int)
UIMapManipulator::SetZoomOffset(float)
UIMapManipulator::GetZoomOffset()
UIMapManipulator::SetMinimumZoomLevel(int, float)
UIMapManipulator::ScaleValueFromZoomAmount(float)
UIMapManipulator::GetZoomNormalised()
UIMapManipulator::AtMaxZoom()
UIMapManipulator::AtMinZoom()
UIMapManipulator::GetZoomEvent()
UIMapManipulator::ZoomAmountFromScaleValue(float)
UIMapManipulator::UpdateZoom(float)
ValueFader<VuVec>::Update(float)
ValueFader<RectangleF>::Update(float)
ValueFader<float>::Update(float)
UIMapManipulator::EventNotify(Event&, NuEventData&)
UIMapManipulator::SetFocusViewport(float, float, float, float, float)
UIMapManipulator::SetHitBoxElement(FlashElement*)
UIMapManipulator::HitTest(DRCTouch const&)
non-virtual thunk to UIMapManipulator::HitTest(DRCTouch const&)
UIMapManipulator::OnPress(DRCTouch const&)
non-virtual thunk to UIMapManipulator::OnPress(DRCTouch const&)
UIMapManipulator::NotifyPanStarted()
UIMapManipulator::OnDrag(DRCTouch const&)
non-virtual thunk to UIMapManipulator::OnDrag(DRCTouch const&)
UIMapManipulator::OnTapSeriesEnd(DRCTouch const&, int)
non-virtual thunk to UIMapManipulator::OnTapSeriesEnd(DRCTouch const&, int)
UIMapManipulator::OnHold(DRCTouch const&)
non-virtual thunk to UIMapManipulator::OnHold(DRCTouch const&)
UIMapManipulator::OnRelease(DRCTouch const&)
non-virtual thunk to UIMapManipulator::OnRelease(DRCTouch const&)
UIMapManipulator::Update(float)
UIMapManipulator::CanAutoSizeMapForLevel()
UIMapManipulator::AutoSizeMapForLevel()
UIMapManipulator::SetCanAutoSizeMapForLevel(bool)
UIMapManipulator::IsDemonstrating()
UIMapManipulator::QueueAutoDemoRequest(UIMapManipulator::AutoDemoRequest&)
UIMapManipulator::ProcessAutoDemoQueue()
UIMapManipulator::SetMapRotation(float, float, float)
UIMapManipulator::IsPanningEnabled()
UIMapManipulator::IsDragging()
UIMapManipulator::GetTouchTrigger()
UIMapManipulator::GetMapRotationDamping()
UIMapManipulator::SetMapRotationDamping(float)
UIMapManipulator::SetMapRotationDampingMode(UIMap_Common::eDampenMode)
UIMapManipulator::GetZoom()
MapFogArea::MapFogArea()
MapFogArea::Reset()
MapFogArea::~MapFogArea()
MapFogArea::IsUsed() const
MapFogArea::SetAsUsed(bool)
MapFogArea::GetNameKey() const
MapFogArea::LinkDistrictsWithFlash(CityDistrictGroup const&, FlashScene*)
MapFogArea::LinkWithElementNamed(FlashScene*, char const*)
MapFogArea::SetUnlocked(bool, bool)
MapFogArea::DebugRender(UIMap const&) const
MapFogArea::Update(float)
MapFogArea::SetAlphaForAllElements(float)
MapFogArea::SetNewState(MapFogArea::eState)
MapFogArea::HasUnlockID(char)
MapFogArea::SetEnabledForAllElements(bool)
MapFogRenderer::MapFogRenderer(UIMap const&)
MapFogRenderer::~MapFogRenderer()
MapFogRenderer::Release()
MapFogRenderer::~MapFogRenderer()
MapFogRenderer::InitFromElement(FlashElement*)
MapFogRenderer::RemoveFogAreaByIndex(unsigned int)
MapFogRenderer::InitForLevel()
MapFogRenderer::AddFogArea(MapFogArea const&)
MapFogRenderer::FindIndexForFogArea(MapFogArea const&)
MapFogRenderer::FindNextFreeIndex()
MapFogRenderer::RemoveFogArea(MapFogArea const&)
MapFogRenderer::FlashElementUpdate(FlashElement*)
MapFogRenderer::FlashElementRender(FlashElement*, float)
MapFogManager::MapFogManager(UIMap const&)
MapFogManager::Reset()
MapFogManager::~MapFogManager()
MapFogManager::Release()
MapFogManager::~MapFogManager()
MapFogManager::Init()
MapFogManager::InitFromScene(FlashScene*)
MapFogManager::Update(float)
MapFogManager::SetupFogAreas(CityDistrictGroup const (&) [23])
MapFogManager::GetNextFreeFogArea()
MapFogManager::UnlockArea(HashedKey)
MapFogManager::SetFogAreaForRendering(MapFogArea const&)
MapFogManager::EventNotify(Event&, NuEventData&)
MapFogArea::EventData::~EventData()
MapSingleTextureRenderer::MapSingleTextureRenderer()
MapSingleTextureRenderer::~MapSingleTextureRenderer()
MapSingleTextureRenderer::SetTile(MapTileSet::MapTile const&)
MapSingleTextureRenderer::Render(UIMap const&)
MapTiledTextureRenderer::MapTiledTextureRenderer()
MapTiledTextureRenderer::~MapTiledTextureRenderer()
MapTiledTextureRenderer::SetTile(MapTileSet::MapTile const&)
MapTiledTextureRenderer::Render(UIMap const&)
MapRenderer::MapRenderer(UIMap const&)
MapRenderer::~MapRenderer()
MapRenderer::~MapRenderer()
MapRenderer::SetActiveTileSet(MapTileSet const&)
MapRenderer::RemoveAllMapRenderers()
MapRenderer::AddMapRenderersFromTileSet(MapTileSet const&)
MapRenderer::UnloadTileSet()
MapRenderer::SetMapElement(FlashElement*)
MapRenderer::FlashElementRender(FlashElement*, float)
MapRenderer::AddExternalRender(MapRenderAttachment&)
MapRenderer::GetActiveTileSet() const
MapRenderer::GetFreeSingleRenderer()
MapRenderer::GetFreeTiledRenderer()
MapRenderer::RemoveExternalRenderer(MapRenderAttachment*)
MapRenderer::FlashElementUpdate(FlashElement*)
MapRenderer::TileSetChangeEventData::~TileSetChangeEventData()
CSListHeader<UIPlayerMapLink>::~CSListHeader()
UIPlayerMapCommonParameters::UIPlayerMapCommonParameters()
UIPlayerMap::LoadSettings(char const*, nufpcomjmp_s*)
UIPlayerMap::UIPlayerMap(int)
UIPlayerMap::FlashMap::SetOwner(UIPlayerMap&)
UIPlayerMap::~UIPlayerMap()
UIPlayerMap::~UIPlayerMap()
UIPlayerMap::Init_Internal()
UIPlayerMap::FlashMap::GetUIOverlay()
MapItems::GetPinHandler()
MapItems::GetMapClampingHandler()
UIPlayerMap::Exit_Internal()
UIPlayerMap::IsShowing(unsigned short)
UIPlayerMap::FocusOnPlayer(bool)
UIPlayerMap::MapHandler::SetState(UIPlayerMap::MapHandler::eState)
UIPlayerMap::SetVisible(bool)
UIPlayerMap::Show(unsigned short, bool)
UIPlayerMap::DisableInputTriggers(MechCharacter*, bool)
UIPlayerMap::FlashMap::Show()
UIPlayerMap::MapHandler::Show()
UIPlayerMap::MapHandler::SetPlayerRotationEnabled(bool)
UIPlayerMap::Update(float)
UIPlayerMap::MapHandler::Hide()
UIPlayerMap::FlashMap::Hide()
UIPlayerMap::IsEnabled()
UIPlayerMap::MapHandler::SetAttachMode(UIPlayerMap::MapHandler::eAttachMode)
UIPlayerMap::MapHandler::UpdateMapForPlayers(float)
MapItems::GetAreaHandler()
MapItems::GetPinsManager()
UIPlayerMap::DebugTest()
UIPlayerMap::Render()
UIPlayerMap::SetFocusViewport(RectangleF&)
UIPlayerMap::RefreshPinLayersState()
UIPlayerMap::MapHandler::SetAttachModeEnabled(bool)
UIPlayerMap::EventNotify(Event&, NuEventData&)
UIPlayerMap::AddMapRenderFn(void (*)(void*), void*)
UIPlayerMap::RemoveMapRenderFn(int)
UIPlayerMap::SetZoomMode(UIPlayerMap::eZoomMode)
UIPlayerMap::PrepareSpecialPins()
MapItems::GetSpecialPins()
UIPlayerMap::MapHandler::GetPlayerPinHandler(unsigned int)
UIPlayerMap::MapHandler::PlayerPinHandler::SetPlayerPin(UIMapPin&, unsigned int)
UIPlayerMap::OnLevelLoad(LegoLevelContainer&)
UIPlayerMap::LoadForLevel(LegoLevelContainer&)
UIPlayerMap::SetCommonParams(UIPlayerMapCommonParameters const&)
UIPlayerMap::OnEnterLevel(LegoLevelContainer&)
UIPlayerMap::CreateStuff(LegoLevelContainer&)
UIPlayerMaps::AddMap(UIPlayerMap*)
UIPlayerMap::SetEnabled(bool)
UIPlayerMap::OnExitLevel(LegoLevelContainer&)
UIPlayerMaps::RemoveMap(UIPlayerMap*)
UIPlayerMap::DestroyStuff(LegoLevelContainer&)
MapItems::GetLocatorPins()
MapItems::GetCharacterPins()
UIPlayerMap::LoadCommonParamsFromFile(char const*, UIPlayerMapCommonParameters&)
UIPlayerMaps::GetPlayerMap(int)
UIPlayerMap::FlashMap::FlashMap(unsigned int)
UIPlayerMap::FlashMap::IsShowing()
MapItems::GetPinAtTarget(VuVec const&, UIMapPin*, float&, float&)
MapItems::GetPinAtWorldPos(VuVec const&, UIMapPin*, float&, float&)
MapItems::SetPinIcon(UIMapPin*, UIMapPin::IconType const&)
MapItems::MapItems(UIMap&, int)
MapItems::GetVehiclePins()
UIPlayerMap::MapHandler::MapHandler(UIMap&, UIPlayerMapCommonParameters const&, int)
UIPlayerMap::MapHandler::UpdateState(float)
UIPlayerMap::MapHandler::SetNewState(UIPlayerMap::MapHandler::eState)
UIPlayerMap::MapHandler::SetNewAttachMode(UIPlayerMap::MapHandler::eAttachMode)
UIPlayerMap::MapHandler::IsAttachModeEnabled()
UIPlayerMap::MapHandler::ForcePlayerFocus(unsigned int)
UIPlayerMap::MapHandler::PlayerPinHandler::UpdatePlayerPinToPlayer(UIMap&, bool, bool, float)
UIPlayerMap::MapHandler::PlayerPinHandler::ShowPlayerPin(bool)
UIPlayerMap::MapHandler::PlayerPinHandler::GetPin()
UIPlayerMap::MapHandler::PlayerPinHandler::LockPin()
UIPlayerMap::MapHandler::PlayerPinHandler::UnlockPin()
UIPlayerMap::MapHandler::PlayerInVehicleUpdate(ApiVehicle&, float)
UIPlayerMap::MapHandler::PlayerOnFootUpdate(MechCharacter&, float)
UIPlayerMap::MapHandler::UpdateMapRotation(float)
UIPlayerMap::MapHandler::PlayerPinHandler::UpdatePlayerPinToObject(UIMap&, MechCharacter&, ApiVehicle*, bool, float)
UIPlayerMap::MapHandler::IsPlayerRotationEnabled()
UIPlayerMap::MapHandler::PlayerPinHandler::PlayerPinHandler()
UIPlayerMap::MapHandler::PlayerPinHandler::HighlightPlayerPin(bool)
UIPlayerMap::ZoomModeEventData::~ZoomModeEventData()
UIPlayerMaps::ListModifiedEventData::~ListModifiedEventData()
CityPDAPermData::CityPDAPermData()
CityPDAPermData::~CityPDAPermData()
CityPDAPermData::Load()
CityPDAPermData::Clear()
CityPDAPermData::Fixup()
CityPDAPermData::GetGenericCharacterInfoTable() const
CityPDAPermData::GetCollectableInfoTable() const
CityPDAPermData::GetScannableIconTypes() const
CityPDAPermData::GetSpecificCharacterInfoTable() const
CityPDAPermData::GetContextMenuLayoutManager(int) const
CityPDAPermData::GetMapPinDataManager() const
CityPDAPermData::GetCommonMapParams() const
CityPDAPermData::GetFastTravelUI(int) const
CityPDASaveData::CityPDASaveData()
CityPDASaveData::~CityPDASaveData()
CityPDASaveData::SavePinData(MapPinDataManager::SaveData const&)
CityPDAState::CityPDAState()
CityPDAState::Update(float)
CityPDAState::Render()
CityPDAState::OnEnter()
CityPDAState::RenderState()
CityPDAState::UpdateState(float)
CityPDAState::OnExit()
CityPDAState_Level::OnEnter()
CityPDAState_Level::RenderState()
CityPDASystem::bodge_GetActiveManager()
CityPDAState_Level::UpdateState(float)
CityPDAState_Level::OnExit()
CityPDASystem::CityPDASystem()
CityPDASystem::~CityPDASystem()
CityPDAState::~CityPDAState()
CityPDASystem::~CityPDASystem()
CityPDASystem::GetPlayerForIndex(int)
CityPDASystem::Init()
CityPDASystem::InitUIContext(UIContext*, int&)
CityPDASystem::ConfigureDrc()
CityPDASystem::CityPDA_Shell::Load()
CityPDASystem::RenderFunction_Hud(void*)
CityPDASystem::ShutDown()
CityPDASystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CityPDASystem::OnInitPostConfig()
CityPDASystem::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
CityPDASystem::ProcessLevelOnly(LegoLevelContainer&, float)
CityPDASystem::RenderLevelOnly(LegoLevelContainer&)
CityPDASystem::OnEnterLevel(LegoLevelContainer&)
CityPDASystem::OnExitLevel(LegoLevelContainer&)
CityPDASystem::SetCurrentState(CityPDAState*)
CityPDASystem::SetNextState(CityPDAState*)
CityPDASystem::GetLoginSyncState()
CityPDASystem::GetMapMenuOverlay(int)
CityPDASystem::GetCommunicator()
CityPDASystem::IsLoginActive()
CityPDASystem::StartLogin()
CityPDASystem::GetDefaultPostEffects()
CityPDASystem::PlaySFX(char const*)
CityPDASystem::CommonInputSuppressorCheck(int)
CityPDASystem::ProcessFullScreenP2Hack(LevelContainer&)
CityPDASystem::Config::Config()
CityPDASystem::ParseCommandLine(int, char**)
CityPDASystem::GetStateManager()
CityPDASystem::EventNotify(Event&, NuEventData&)
CityPDASystem::GetHelper()
CityPDASystem::AddManagersForLevel(LegoLevelContainer&)
CityPDASystem::RemoveManagersForLevel(LegoLevelContainer&)
CityPDASystem::GetPermData() const
CityPDASystem::FixupPermData()
CityPDASystem::GetSaveData()
CityPDASystem::GetCurrentState()
CityPDASystem::SetBusyScreenActive(bool, bool)
CityPDASystem::IsBusyScreenActive() const
CityPDASystem::IsBusyScreenFullyActive()
CityPDASystem::ShouldAddManagersForLevel(MechLevelContainer&)
CityPDAState::~CityPDAState()
CityPDAState_Level::~CityPDAState_Level()
PDAContextMenuLayoutManager::~PDAContextMenuLayoutManager()
MapPinDataManager::~MapPinDataManager()
PDAContextMenuLayout::~PDAContextMenuLayout()
CityPDAManagerHelper::~CityPDAManagerHelper()
CityPDASystem::CityPDA_Shell::~CityPDA_Shell()
CityPDASystem::CityPDA_Shell::~CityPDA_Shell()
CityPDASystem::CityPDA_Shell::EventNotify(Event&, NuEventData&)
CityPDASystem::ScanTransitionEventData::~ScanTransitionEventData()
UIContainerHandlerDefault<PDA_UIContextContainer>::~UIContainerHandlerDefault()
UIContainerHandlerDefault<PDA_UIContextContainer>::~UIContainerHandlerDefault()
UIContainerHandlerDefault<PDA_UIContextContainer>::CreateContainerForLevel(LegoLevelContainer*, UIContext&)
UIContainerHandlerDefault<PDA_UIContextContainer>::GetContainerForLevel(LegoLevelContainer*)
UIContextContainer<PDA_UIContextContainer>::~UIContextContainer()
PDA_UIContextContainer::~PDA_UIContextContainer()
UIContextContainer<PDA_UIContextContainer>::RegisterProcessing()
UIContextContainer<PDA_UIContextContainer>::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
UIContextContainer<PDA_UIContextContainer>::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
non-virtual thunk to PDA_UIContextContainer::~PDA_UIContextContainer()
non-virtual thunk to PDA_UIContextContainer::~PDA_UIContextContainer()
non-virtual thunk to UIContextContainer<PDA_UIContextContainer>::RegisterProcessing()
non-virtual thunk to UIContextContainer<PDA_UIContextContainer>::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
non-virtual thunk to UIContextContainer<PDA_UIContextContainer>::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
RenderMaterialToFlashSceneElementUV(NuSmartPtr<NuMtl, true>, float, float, float, float, FlashScene*, FlashElement*)
RenderMaterialToFlashSceneElement(NuSmartPtr<NuMtl, true>, FlashScene*, FlashElement*)
FloatRange::FloatRange()
FloatRange::FloatRange(float, float)
FloatRange::Set(float, float)
FloatRange::NormaliseValue(float, int)
FloatRange::InterpolateValue(float) const
FloatRange::GetRandomValue() const
FloatRange::ContainsNonInclusive(float) const
FloatRange::ContainsInclusive(float) const
FloatRange::GetShortestWrappedDistanceBetween(float, float) const
FloatRange::Size() const
FloatRange::GetMin() const
FloatRange::GetMax() const
FloatRange::SetMin(float)
FloatRange::SetMax(float)
CountdownTimer::CountdownTimer()
CountdownTimer::~CountdownTimer()
CountdownTimer::Start(float)
CountdownTimer::Stop(bool)
CountdownTimer::Pause()
CountdownTimer::Continue()
CountdownTimer::Update(float)
CountdownTimer::GetProgress() const
CountdownTimer::GetElapsed() const
CountdownTimer::Finished() const
CountdownTimer::CheckCountdown(float)
CountdownTimer::IsRunning() const
FmvClip::FmvClip()
FmvClip::~FmvClip()
FmvClip::Load(bool)
FmvClip::DoLoadBg(void*)
FmvClip::DoLoadInternal()
FmvClip::SetFilename(char const*)
FmvClip::Unload()
FmvClip::Start()
FmvClip::IsReady()
FmvClip::Update()
FmvClip::Reset()
FmvClip::Finished()
FmvClip::Render(float, float, float, float)
FmvClip::GetMaterial()
FmvClip::RenderToFlashSceneElement(FlashScene*, FlashElement*)
SoundASR::SoundASR()
SoundASR::~SoundASR()
SoundASR::~SoundASR()
SoundASR::Init(LevelContainer*, char const*, char const*, char const*)
SoundASR::GetCurrentStage() const
SoundASR::SetInput(bool)
SoundASR::SetStage(SoundASR::eStage)
SoundASR::PlaySample(SoundASR::eStage)
SoundASR::Cut()
SoundASR::GetInput() const
SoundASR::SetVolume(float)
SoundASR::GetVolume() const
SoundASR::IsPlaying() const
SoundASR::XFadeSamples(float)
UpdateProgressForOverallDuration(float*, float, float, int)
SoundASR::Update(float)
SoundASR::OnSoundHandleStopped(NuSoundHandle&)
SoundASR::OnSoundHandleDestroyed(NuSoundHandle&)
SoundInOut::SoundInOut()
SoundInOut::~SoundInOut()
SoundInOut::~SoundInOut()
SoundInOut::Init(LevelContainer*, char const*, char const*)
SoundInOut::GetCurrentStage() const
SoundInOut::SetInput(bool)
SoundInOut::SetStage(SoundInOut::eStage)
SoundInOut::PlaySample(SoundInOut::eStage)
SoundInOut::Cut()
SoundInOut::GetInput() const
SoundInOut::SetVolume(float)
SoundInOut::GetVolume() const
SoundInOut::IsPlaying() const
SoundInOut::Update(float)
SoundInOut::OnSoundHandleStopped(NuSoundHandle&)
SoundInOut::OnSoundHandleDestroyed(NuSoundHandle&)
MaskedFmvClip::MaskedFmvClip()
MaskedFmvClip::~MaskedFmvClip()
MaskedFmvClip::SetMaskTextureFromFlashElement(FlashElement*)
MaskedFmvClip::GetClip()
MaskedFmvClip::Load()
MaskedFmvClip::Refresh()
MaskedFmvClip::RenderImpostorCallback(void*, NURENDERSTAGE)
MaskedFmvClip::RenderForMask()
MaskedFmvClip::RenderReplacingFlashElement(FlashElement*, int)
MaskedFmvClip::Render()
MaskedFmvClip::RenderToFlashElement(FlashScene*, FlashElement*)
FlashTextureReplacer::FlashTextureReplacer()
FlashTextureReplacer::~FlashTextureReplacer()
FlashTextureReplacer::Reset()
FlashTextureReplacer::AssignFlashElement(FlashElement*, FlashScene*)
FlashTextureReplacer::GetFlashElement()
FlashTextureReplacer::SetTextureID(NuSmartPtr<NuTexture, true>, bool, bool)
FlashTextureReplacer::GetOriginalTextureId() const
NuList<PDAButton*>::~NuList()
PDAButton::PDAButton()
PDAButton::SetCriticalAnim(PDAButton::eButtonAnim, bool)
PDAButton::~PDAButton()
PDAButton::~PDAButton()
PDAButton::AnyHeld()
PDAButton::RebuildAnimList()
PDAButton::GetButtonScene()
PDAButton::AssignFlash(FlashScene*, FlashElement*)
PDAButton::SetEnabledInternal(bool)
PDAButton::GetAttachedFlashElement()
PDAButton::GetRootElement()
PDAButton::AssignFlash(FlashScene*, char const*)
PDAButton::ButtonClicked()
PDAButton::NotifyClickEnd(int)
PDAButton::NotifyClicked()
PDAButton::IsUsable()
PDAButton::HitTest(DRCTouch const&)
PDAButton::OnPress(DRCTouch const&)
PDAButton::CanBeClicked()
PDAButton::StopFlashing()
PDAButton::IsToggle()
PDAButton::GetToggleState()
PDAButton::StopAllAnims()
PDAButton::PlayAnim(PDAButton::eButtonAnim, bool)
PDAButton::OnTapSeriesEnd(DRCTouch const&, int)
PDAButton::OnRelease(DRCTouch const&)
PDAButton::SetToggleState(bool)
PDAButton::OnDrag(DRCTouch const&)
PDAButton::IsIdle()
PDAButton::IsFlashing()
PDAButton::NeedToRefreshState()
PDAButton::RefreshIdleState()
PDAButton::HasAnimFinished(PDAButton::eButtonAnim)
PDAButton::CheckCriticalAnims()
PDAButton::UpdateButtonState(float)
PDAButton::TriggerFlash()
PDAButton::Update(float)
PDAButton::FlashEventData::FlashEventData(PDAButton::FlashEventData::Type, PDAButton::FlashData const&)
PDAButton::FlashData::FlashData()
PDAButton::Flash(int, float)
PDAButton::StopFlashingInternal()
PDAButton::StopAnim(PDAButton::eButtonAnim)
PDAButton::IsEnabled()
PDAButton::SetEnabled(bool, bool)
PDAButton::SetLocked(bool)
PDAButton::SetUsable(bool)
PDAButton::TriggerStateRefresh()
PDAButton::SetClickingTogglesState(bool)
PDAButton::OverrideAnim(PDAButton::eButtonAnim, char const*)
PDAButton::GetAnim(PDAButton::eButtonAnim)
PDAButton::HasAnim(PDAButton::eButtonAnim)
PDAButton::ClearCriticalAnims()
PDAButton::SetCancelClickOnSwipeRule(bool)
PDAButton::GetSweepProximity()
PDAButton::SetSweepProximity(float)
PDAScreen::PDAScreen()
PDAScreen::~PDAScreen()
PDAScreen::~PDAScreen()
PDAScreen::LoadScene(char const*, int)
PDAScreen::Unload(int)
PDAScreen::ShutdownAnims()
PDAScreen::InitAnims(int)
PDAScreen::ResetScene(int)
PDAScreen::PrepareAnim(int, char const*)
PDAScreen::PrepareAnim(FlashScene*, int, char const*)
PDAScreen::GetAnim(int)
PDAScreen::PlayAnim(int, bool)
PDAScreen::LoopAnim(int)
PDAScreen::AnimFinished(int)
PDAScreen::SetEnabled(bool)
PDAScreen::IsEnabled()
PDAScreen::FindElement(char const*)
PDAScreen::UpdateScene()
ReadNextNumber(char const*&, int)
StringDatabaseLabel::StringDatabaseLabel()
StringDatabaseLabel::StringDatabaseLabel(StringDatabaseLabel&)
StringDatabaseLabel::StringDatabaseLabel(char const*, bool)
StringDatabaseLabel::operator=(char const*)
StringDatabaseLabel::GetDatabaseString() const
UIStateManager::UIStateManager()
UIStateManager::Update(float)
UIStateManager::GetNextState()
UIStateManager::SetCurrentState(UIState*)
UIStateManager::SetNextState(UIState*)
UIStateManager::GetCurrentState()
UIStateManager::Render()
FlashSplitScreenHUD::LayoutInfo::LayoutInfo()
FlashSplitScreenHUD::LayoutInfo::SetFullScreen()
FlashSplitScreenHUD::LayoutInfo::SetOffScreen(int)
FlashSplitScreenHUD::LayoutInfo::IsOffScreen() const
FlashSplitScreenHUD::LayoutCalculator::LayoutCalculator()
FlashSplitScreenHUD::LayoutCalculator::~LayoutCalculator()
FlashSplitScreenHUD::LayoutCalculator::UpdateLayouts()
FlashSplitScreenHUD::LayoutCalculator::GetSegmentAssignments(cSplitScreenSegmentInterfaceMgr&)
FlashSplitScreenHUD::LayoutCalculator::GetFullScreenPlayerIndex(cSplitScreenSegmentInterfaceMgr&)
FlashSplitScreenHUD::LayoutCalculator::GetSplitSegment(int) const
FlashSplitScreenHUD::LayoutCalculator::GetLayoutForPlayer(int) const
FlashSplitScreenHUD::LayoutCalculator::IsLayoutVisible(int) const
FlashSplitScreenHUD::FlashSplitScreenHUD()
FlashSplitScreenHUD::~FlashSplitScreenHUD()
FlashSplitScreenHUD::SetPlayerIndex(int)
FlashSplitScreenHUD::GetPlayerIndex() const
FlashSplitScreenHUD::InitFromScene(FlashScene*, char const*, bool)
FlashSplitScreenHUD::SetLayout(FlashSplitScreenHUD::LayoutInfo const&)
FlashSplitScreenHUD::GetLayout() const
PlayerMenuAddOn::PlayerMenuAddOn()
PlayerMenuAddOn::~PlayerMenuAddOn()
non-virtual thunk to PlayerMenuAddOn::~PlayerMenuAddOn()
non-virtual thunk to PlayerMenuAddOn::~PlayerMenuAddOn()
PlayerMenuAddOn::~PlayerMenuAddOn()
non-virtual thunk to PlayerMenuAddOn::~PlayerMenuAddOn()
non-virtual thunk to PlayerMenuAddOn::~PlayerMenuAddOn()
PlayerMenuAddOn::OnAdded()
PlayerMenuAddOn::SetLockedMovement(bool)
PlayerMenuAddOn::OnRemoved()
PlayerMenuAddOn::OnHook(unsigned char, HookArgs*)
PlayerMenuAddOn::UpdateFakeDPadInput()
non-virtual thunk to PlayerMenuAddOn::OnHook(unsigned char, HookArgs*)
PlayerMenuAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to PlayerMenuAddOn::EventNotify(Event&, NuEventData&)
PlayerMenuAddOn::GetOrCreateFor(MechCharacter*)
PlayerMenuAddOn::DestroyFor(MechCharacter*)
NuSoundHandle::Callback::OnSoundHandleTouched(NuSoundHandle&)
NuSoundHandle::Callback::OnSoundHandleReassigned(NuSoundHandle&, NuSoundHandle&)
PDAButton::FlashEventData::~FlashEventData()
NuListFind<PDAButton*, NuListNode<PDAButton*> >::Remove(NuListNode<PDAButton*>*, NuListNode<PDAButton*>*, PDAButton* const&)
CityPDA_Login::CityPDA_Login()
CityPDA_Login::~CityPDA_Login()
CityPDA_Login::~CityPDA_Login()
CityPDA_Login::Load()
CityPDA_Login::Show()
CityPDA_Login::Update(float)
CityPDA_Login::Reset()
CityPDA_Login::Fixup()
CityPDA_Login::HasBeenSynchronised()
CityPDA_Login::HasBeenAcquired()
CityPDA_Login::Render()
CityPDA_Login::GetSyncState()
CityPDA_SatNav::CityPDA_SatNav()
CityPDA_SatNav::~CityPDA_SatNav()
CityPDA_SatNav::~CityPDA_SatNav()
CityPDA_SatNav::PrepareRouteForDisplay()
CityPDA_SatNav::ClearRoute()
CityPDA_SatNav::SetRouteVisible(bool)
CityPDA_SatNav::Update(DRCTouch&, float)
CityPDA_SatNav::Reset()
CityPDA_SatNav::SetEnabled(bool)
CityPDA_SatNav::EventNotify(Event&, NuEventData&)
CityPDA_SatNav::Render()
CityPDA_SatNav::Prepare(FlashScene*, FlashScene*)
CityPDA_SatNav::ShowAccessButton(bool)
CityPDA_SatNav::GetAccessButton()
CityPDA_SatNav::IsAccessButtonVisible()
GroupCornerHub::GroupCornerHub(int)
GroupCornerHub::~GroupCornerHub()
GroupCornerHub::Init(FlashScene*, FlashElement*)
GroupCornerHub::EnterLevel(LegoLevelContainer&)
GroupCornerHub::ExitLevel(LegoLevelContainer&)
GroupCornerHub::DoTransition(int, bool)
GroupCornerHub::IsTransitionOn(int)
GroupCornerHub::IsTransitionOff(int)
GroupCornerHub::HideAllElements()
GroupCornerHub::EnableTransitionGroup(int, bool, bool)
GroupCornerHub::Update(float)
GroupCornerHub::UpdateState(float, int)
GroupCornerHub::SkipTransition(int)
GroupCornerHub::ShiftButtons(bool)
GroupCornerHub::UnlockButton(ePDAButtonGroup)
GroupCornerHub::DoVideoCallWipe(bool)
GroupCornerHub::ShowCaller()
CityPDA_VideoPhone::CityPDA_VideoPhone(int)
CityPDA_VideoPhone::~CityPDA_VideoPhone()
CityPDA_VideoPhone::EnterLevel(LegoLevelContainer&)
CityPDA_VideoPhone::RenderImpostorCallback(void*, NURENDERSTAGE)
CityPDA_VideoPhone::ExitLevel(LegoLevelContainer&)
CityPDA_VideoPhone::ShowVideoScreen(unsigned short, bool)
CityPDA_VideoPhone::IsPlayerActive()
CityPDA_VideoPhone::GetPDAButton_Camera()
CityPDA_VideoPhone::GetPDAButton_Scanner()
CityPDA_VideoPhone::GetPDAButton_VideoCall()
CityPDA_VideoPhone::GetPadInput_Camera()
CityPDA_VideoPhone::GetPadInput_Scanner()
CityPDA_VideoPhone::GetPadInput_VideoCall()
CityPDA_VideoPhone::GetMiniMapScreenPos(NUVEC*)
CityPDA_VideoPhone::ShouldRenderClampedPins()
CityPDA_VideoPhone::IsShowing()
CityPDA_VideoPhone::IsCallerNameOn()
CityPDA_VideoPhone::IsCallerNameOff()
CityPDA_VideoPhone::IsVideoCallActive()
CityPDA_VideoPhone::NeedMapRender()
CityPDA_VideoPhone::ShouldPDAClusterBeVisible(CityPDAManager&)
CityPDA_VideoPhone::ShouldPDAVideoBeVisible(CityPDAManager&)
CityPDA_VideoPhone::Update(float)
CityPDA_VideoPhone::LoadCharacterRequestFinished()
CityPDA_VideoPhone::Render()
CityPDA_VideoPhone::Prepare()
CityPDA_VideoPhone::RenderCallerToTexture()
CityPDA_VideoPhone::RenderMapToTexture()
CityPDA_VideoPhone::LoadCharacterRequest(char const*, char const*)
CityPDA_VideoPhone::LoadCharacterRequest(int, char const*)
CityPDA_VideoPhone::SetCharacterAction(char const*)
CityPDA_VideoPhone::SetCharacterAction(int)
CityPDA_VideoCallControl::CityPDA_VideoCallControl(int)
CityPDA_VideoCallControl::GetPDAButton()
CityPDA_VideoCallControl::MissedCallDetector::Reset()
CityPDA_VideoCallControl::~CityPDA_VideoCallControl()
CityPDA_VideoCallControl::~CityPDA_VideoCallControl()
CityPDA_VideoCallControl::Prepare(FlashScene*)
CityPDA_VideoCallControl::RefreshButtonAvailability()
CityPDA_VideoCallControl::GetCommunicator()
CityPDA_VideoCallControl::SetUsable(bool)
CityPDA_VideoCallControl::IsShowing()
CityPDA_VideoCallControl::Update(float)
CityPDA_VideoCallControl::MissedCallDetector::Update()
CityPDA_VideoCallControl::PlayRingtoneSfx()
CityPDA_VideoCallControl::PlayRingtoneRumble()
CityPDA_VideoCallControl::StartIncomingCall()
CityPDA_VideoCallControl::PulseIncomingCall(int)
CityPDA_VideoCallControl::MissedCallDetector::IncomingCallStopped()
CityPDA_VideoCallControl::StopIncomingCall()
CityPDA_VideoCallControl::EventNotify(Event&, NuEventData&)
CityPDA_VideoCallControl::MissedCallDetector::PhoneOpened()
CityPDA_VideoCallControl::MissedCallDetector::MissedCallDetector()
CityPDA_VideoCallControl::MissedCallDetector::~MissedCallDetector()
CityPDA_VideoCallControl::MissedCallDetector::WasMissed() const
CityPDA_VideoCallControl::WasCallMissed()
CityPDA_ObjectiveBar::CityPDA_ObjectiveBar()
CityPDA_ObjectiveBar::~CityPDA_ObjectiveBar()
CityPDA_ObjectiveBar::Prepare(FlashElement*)
CityPDA_ObjectiveBar::Reset()
CityPDA_ObjectiveBar::SetEnabled(bool)
CityPDA_ObjectiveBar::IsEnabled()
CityPDA_ObjectiveBar::SetOpen(bool)
CityPDA_ObjectiveBar::IsClosed()
CityPDA_ObjectiveControl::CityPDA_ObjectiveControl(int)
CityPDA_ObjectiveControl::~CityPDA_ObjectiveControl()
CityPDA_ObjectiveControl::~CityPDA_ObjectiveControl()
CityPDA_ObjectiveControl::Prepare(FlashScene*)
CityPDA_ObjectiveControl::RefreshButtonAvailability()
CityPDA_ObjectiveControl::Show(bool)
CityPDA_ObjectiveControl::SetUsable(bool)
CityPDA_ObjectiveControl::Update(float)
CityPDA_ObjectiveControl::ReceiveObjective()
CityPDA_ObjectiveControl::Open()
CityPDA_ObjectiveControl::Close()
CityPDA_ObjectiveControl::GetText(NuDynamicStringT<false>&)
CityPDA_ObjectiveControl::SetTextFromObjective()
CityPDA_ObjectiveControl::GetDefaultTextColour(NuColour&)
CityPDA_ObjectiveControl::SetTextColour(NuColour const&)
CityPDA_ObjectiveControl::SetText(char const*, bool, bool)
CityPDA_ObjectiveControl::LockText(bool)
CityPDA_ObjectiveControl::GetButton()
CityPDA_ObjectiveControl::EventNotify(Event&, NuEventData&)
CityPDA_Popup::CityPDA_Popup()
CityPDA_Popup::~CityPDA_Popup()
CityPDA_Popup::~CityPDA_Popup()
CityPDA_Popup::Prepare(FlashScene*)
CityPDA_Popup::Update(DRCTouch&, float)
CityPDA_Popup::SetShowing(bool)
CityPDA_Popup::IsShowing()
CityPDA_Popup::EventNotify(Event&, NuEventData&)
CityPDA_MapOverlay::CityPDA_MapOverlay()
CityPDA_MapOverlay::~CityPDA_MapOverlay()
CityPDA_MapOverlay::~CityPDA_MapOverlay()
CityPDA_MapOverlay::Init()
CityPDA_MapOverlay::Load(NuFile*)
CityPDA_MapOverlay::Release()
CityPDA_MapOverlay::Clear()
CityPDA_MapOverlay::Restart()
CityPDA_MapOverlay::Update(float)
CityPDA_MapOverlay::Render()
CityPDA_MapOverlay::EventNotify(Event&, NuEventData&)
CityPDA_MapOverlay::EnablementChanged()
UIMapElementClampingHandler::UIMapElementClampingHandler()
UIMapElementClampingHandler::Init(int)
UIMapElementClampingHandler::FixUpTypes()
UIMapElementClampingHandler::Release()
UIMapElementClampingHandler::DeFixUpTypes()
UIMapElementClampingHandler::AddMainMapClampableType(UIMapPin::IconType)
UIMapElementClampingHandler::RemoveMainMapClampableType(UIMapPin::IconType)
UIMapElementClampingHandler::IsMainMapClampableType(UIMapPin::IconType) const
UIMapElementClampingHandler::AddMiniMapClampableType(UIMapPin::IconType)
UIMapElementClampingHandler::RemoveMiniMapClampableType(UIMapPin::IconType)
UIMapElementClampingHandler::IsMiniMapClampableType(UIMapPin::IconType) const
UIMapElementClampingHandler::EventNotify(Event&, NuEventData&)
UIMapArea::UIMapArea()
UIMapArea::~UIMapArea()
UIMapArea::SetID(unsigned int)
UIMapArea::GetID() const
UIMapArea::SetMapPosition(float, float)
UIMapArea::SetRadius(float)
UIMapArea::SetActive(bool)
UIMapArea::IsActive() const
UIMapArea::UpdateDrawCoords(UIMap&)
UIMapArea::Render(float, float)
UIMapAreaHandler::UIMapAreaHandler(UIMap&)
UIMapAreaHandler::~UIMapAreaHandler()
UIMapAreaHandler::~UIMapAreaHandler()
UIMapAreaHandler::Restart()
UIMapAreaHandler::StopUsingArea(UIMapArea*)
UIMapAreaHandler::FlashElementUpdate(FlashElement*)
UIMapAreaHandler::GetMap()
UIMapAreaHandler::FlashElementRender(FlashElement*, float)
UIMapAreaHandler::Update(float)
UIMapAreaHandler::AddArea(HashedNameParam const&, float, float, float)
UIMapAreaHandler::GetAvailableArea()
UIMapAreaHandler::StartUsingArea(UIMapArea*)
UIMapAreaHandler::FindArea(HashedNameParam const&)
UIMapAreaHandler::RemoveArea(HashedNameParam const&)
SAction_UI_Map_ShowArea::Exec(ScriptContext&)
SAction_UI_Map_HideArea::Exec(ScriptContext&)
CityPDA_WaypointControl::CityPDA_WaypointControl(UIMap&, int)
CityPDA_WaypointControl::~CityPDA_WaypointControl()
CityPDA_WaypointControl::~CityPDA_WaypointControl()
CityPDA_WaypointControl::InitOnce()
CityPDA_WaypointControl::MapRenderFn_WaypointControl(void*)
CityPDA_WaypointControl::Restart()
CityPDA_WaypointControl::Update(float)
CityPDA_WaypointControl::UpdateState()
CityPDA_WaypointControl::Render()
CityPDA_WaypointControl::PlayerSetWaypointToFocusPos(bool)
CityPDA_WaypointControl::PlayerSetWaypointToWorldPos(VuVec const&, bool)
CityPDA_WaypointControl::PlayerSetWaypointToScreenPos(int, int, bool)
CityPDA_WaypointControl::PlayerSetWaypointToMapPos(float, float, float, bool)
CityPDA_WaypointControl::IsWaypointSet()
CityPDA_WaypointControl::IsWaypointSetByPlayer()
CityPDA_WaypointControl::IsWaypointSetByPlayerAtLocator(AIConvexLocator&)
CityPDA_WaypointControl::EventNotify(Event&, NuEventData&)
CityPDA_WaypointControl::IsManualWaypointsEnabled()
CityPDA_WaypointControl::SetNewState(CityPDA_WaypointControl::eState)
CityPDA_WaypointControl::SetManualWaypointsEnabled(bool)
CityPDA_WaypointControl::SetScriptAllowsWaypoints(bool)
CityPDA_WaypointControl::Show(bool)
CityPDA_WaypointControl::IsShowing()
SAction_UI_Map_HasPlayerSetWaypoint::GetInputs(SCmdParams&) const
SAction_UI_Map_HasPlayerSetWaypoint::Exec(ScriptContext&)
SAction_UI_Map_AllowPlayerToSetWaypoints::Exec(ScriptContext&)
CityPDA_CompassControl::CityPDA_CompassControl(UIMap&)
CityPDA_CompassControl::~CityPDA_CompassControl()
CityPDA_CompassControl::InitFromScene(FlashScene*)
CityPDA_CompassControl::Update(float)
CityPDA_CompassControl::Show()
CityPDA_CompassControl::Hide()
CityPDA_CompassControl::GetCompassScene()
CityPDA_CompassControl::GetCompassElement()
CityPDA_CompassControl::GetAngleToNorth()
CityPDA_ZoomControls::CityPDA_ZoomControls(UIMap&, int)
CityPDA_ZoomControls::~CityPDA_ZoomControls()
CityPDA_ZoomControls::~CityPDA_ZoomControls()
CityPDA_ZoomControls::Update(float)
CityPDA_LevelStatsControl::GetInfoScreen()
CityPDA_LevelStatsControl::InfoScreen::IsVisible() const
CityPDA_ZoomControls::EventNotify(Event&, NuEventData&)
CityPDA_ZoomControls::RefreshButtonAvailability()
CityPDA_ZoomControls::SetVisible(bool)
CityPDA_ZoomControls::SetUsable(bool)
CityPDA_ZoomControls::Prepare(LegoLevelContainer&, FlashScene*)
CityPDA_MagGlassControls::CityPDA_MagGlassControls(int, UIMap&)
CityPDA_MagGlassControls::~CityPDA_MagGlassControls()
CityPDA_MagGlassControls::~CityPDA_MagGlassControls()
CityPDA_MagGlassControls::Update(float)
CityPDA_MagGlassControls::ShowButton(int, bool)
CityPDA_MagGlassControls::Show(bool)
CityPDA_MagGlassControls::Prepare(FlashScene*)
CityPDA_ScrollControl::CityPDA_ScrollControl(UIMap&)
CityPDA_ScrollControl::~CityPDA_ScrollControl()
CityPDA_ScrollControl::~CityPDA_ScrollControl()
CityPDA_ScrollControl::Show(bool)
CityPDA_ScrollControl::RefreshButtonAvailability()
CityPDA_ScrollControl::Update(float)
CityPDA_ScrollControl::EventNotify(Event&, NuEventData&)
CityPDA_ScrollControl::SetUsable(bool)
CityPDA_ScrollControl::Prepare(FlashScene*)
CityPDA_ScannerControl::CityPDA_ScannerControl(int)
CityPDA_ScannerControl::~CityPDA_ScannerControl()
CityPDA_ScannerControl::~CityPDA_ScannerControl()
CityPDA_ScannerControl::Show(bool)
CityPDA_ScannerControl::RefreshButtonAvailability()
Helper_IsOnVehicle(MechCharacter*)
CityPDA_ScannerControl::PlayerCanScan(MechCharacter*)
CityPDA_ScannerControl::Update(float)
CityPDA_ScannerControl::GetButton_Camera()
CityPDA_ScannerControl::GetButton_Scanner()
CityPDA_ScannerControl::Reset()
CityPDA_ScannerControl::EventNotify(Event&, NuEventData&)
CityPDA_ScannerControl::SetUsable(bool)
CityPDA_ScannerControl::SetFlashing(bool, int)
CityPDA_ScannerControl::GetButtonForScanMode(int)
CityPDA_ScannerControl::Prepare(FlashScene*)
CityPDA_LevelStatsControl::InfoScreenButton::InfoScreenButton()
CityPDA_LevelStatsControl::InfoScreenButton::SetOwner(CityPDA_LevelStatsControl::InfoScreen&)
CityPDA_LevelStatsControl::InfoScreenButton::InitFromFlash(FlashElement*, FlashScene*, int)
CityPDA_LevelStatsControl::InfoScreenButton::Reset()
CityPDA_LevelStatsControl::InfoScreenButton::SetAsLocked(bool)
CityPDA_LevelStatsControl::InfoScreenButton::HitTest(DRCTouch const&)
CityPDA_LevelStatsControl::InfoScreen::GetScene() const
CityPDA_LevelStatsControl::InfoScreenButton::OnPress(DRCTouch const&)
CityPDA_LevelStatsControl::InfoScreen::SetCurrentSelection(int)
CityPDA_LevelStatsControl::InfoScreenButton::OnRelease(DRCTouch const&)
CityPDA_LevelStatsControl::InfoScreen::InfoScreen(int)
CityPDA_LevelStatsControl::InfoScreen::~InfoScreen()
CityPDA_LevelStatsControl::InfoScreen::~InfoScreen()
CityPDA_LevelStatsControl::InfoScreen::GetSuperCounterNameFromStatName(HashedKey const&)
CityPDA_LevelStatsControl::InfoScreen::InitFromFlash(FlashElement*, FlashScene*)
CityPDA_LevelStatsControl::InfoScreen::Reset()
CityPDA_LevelStatsControl::InfoScreen::SetEnabled(bool)
CityPDA_LevelStatsControl::InfoScreen::SetShoulderPrompts()
CityPDA_LevelStatsControl::InfoScreen::Update()
CityPDA_LevelStatsControl::InfoScreen::Show()
CityPDA_LevelStatsControl::InfoScreen::DoIconPulse()
CityPDA_LevelStatsControl::InfoScreen::HighlightLeft()
CityPDA_LevelStatsControl::InfoScreen::HighlightRight()
CityPDA_LevelStatsControl::InfoScreen::Hide(bool)
CityPDA_LevelStatsControl::InfoScreen::Select(int)
CityPDA_LevelStatsControl::InfoScreen::GetStatIndexFromSuperCounterName(HashedKey const&) const
CityPDA_LevelStatsControl::InfoScreen::GetStatIndexFromSuperCounterID(int) const
CityPDA_LevelStatsControl::InfoScreen::GetNameFromStatIndex(int) const
CityPDA_LevelStatsControl::InfoScreen::GetStatIndexFromName(HashedKey const&) const
CityPDA_LevelStatsControl::InfoScreen::SetStatValue(int, int, int)
CityPDA_LevelStatsControl::InfoScreen::HitTest(DRCTouch const&)
CityPDA_LevelStatsControl::InfoScreen::GetStatTextureID(int) const
CityPDA_LevelStatsControl::InfoScreen::GetStatElement(int) const
CityPDA_LevelStatsControl::InfoScreen::GetStatTextElement(int) const
CityPDA_LevelStatsControl::InfoScreen::GetStatIconElement(int) const
CityPDA_LevelStatsControl::InfoScreen::GetLockedElement(int) const
CityPDA_LevelStatsControl::InfoScreen::IsStatIconEnabled(int) const
CityPDA_LevelStatsControl::InfoScreen::GetStatButton(int)
CityPDA_LevelStatsControl::InfoScreen::GetStatButton(int) const
CityPDA_LevelStatsControl::StatLockController::StatLockController(CityPDA_LevelStatsControl::InfoScreen&)
CityPDA_LevelStatsControl::StatLockController::SetupLockIDsForStats()
CityPDA_LevelStatsControl::StatLockController::GetUnlockCriterionFromStatIndex(int)
CityPDA_LevelStatsControl::StatLockController::Reset()
CityPDA_LevelStatsControl::StatLockController::UpdateLockedState()
CityPDA_LevelStatsControl::StatLockController::SetStatUnlocked(int, bool, bool)
CityPDA_LevelStatsControl::StatLockController::IsStatUnlocked(int)
CityPDA_LevelStatsControl::CityPDA_LevelStatsControl(int)
CityPDA_LevelStatsControl::~CityPDA_LevelStatsControl()
CityPDA_LevelStatsControl::~CityPDA_LevelStatsControl()
CityPDA_LevelStatsControl::InitFromFlash(FlashElement*, FlashScene*, bool)
CityPDA_LevelStatsControl::UpdateStats()
CityPDA_LevelStatsControl::SetStatsMode(CityPDA_LevelStatsControl::eStatsMode)
CityPDA_LevelStatsControl::Reset()
CityPDA_LevelStatsControl::Hide(bool)
CityPDA_LevelStatsControl::SetShoulderPrompts()
CityPDA_LevelStatsControl::ShowBackButton(bool)
CityPDA_LevelStatsControl::ShowInfoButton(bool)
CityPDA_LevelStatsControl::KillBackButton()
CityPDA_LevelStatsControl::KillInfoButton()
CityPDA_LevelStatsControl::Update(float)
CityPDA_LevelStatsControl::Show()
CityPDA_LevelStatsControl::HighlightButton(bool)
CityPDA_LevelStatsControl::SetCurrentDistrict(eDistrictID)
CityPDA_LevelStatsControl::IsVisible()
CityPDA_LevelStatsControl::SetUsable(bool)
CityPDA_LevelStatsControl::GetButton()
CityPDA_LevelStatsControl::EventNotify(Event&, NuEventData&)
CityPDA_SuperCounterInfoBox::CityPDA_SuperCounterInfoBox(CityPDA_LevelStatsControl::InfoScreen const&)
CityPDA_SuperCounterInfoBox::~CityPDA_SuperCounterInfoBox()
CityPDA_SuperCounterInfoBox::InitFromFlash(FlashElement*, FlashScene*)
CityPDA_SuperCounterInfoBox::SetEnabled(bool)
CityPDA_SuperCounterInfoBox::Update(float)
CityPDA_SuperCounterInfoBox::Hide(bool)
CityPDA_SuperCounterInfoBox::Reset()
CityPDA_SuperCounterInfoBox::Show(float)
CityPDA_SuperCounterInfoBox::SetCounterValue(int, int, int)
MapOverlayRenderer::MapOverlayRenderer(LevelContainer&)
MapOverlayRenderer::~MapOverlayRenderer()
MapOverlayRenderer::~MapOverlayRenderer()
MapOverlayRenderer::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MapOverlayRenderer::Register()
MapOverlayRenderer::Unregister()
UIMapElementClampingHandler::~UIMapElementClampingHandler()
SAction_UI_Map_HasPlayerSetWaypoint::~SAction_UI_Map_HasPlayerSetWaypoint()
SAction_UI_Map_HasPlayerSetWaypoint::GetName() const
SAction_UI_Map_HasPlayerSetWaypoint::GetOutputs(SCmdParams&) const
SAction_UI_Map_AllowPlayerToSetWaypoints::~SAction_UI_Map_AllowPlayerToSetWaypoints()
SAction_UI_Map_AllowPlayerToSetWaypoints::GetName() const
SAction_UI_Map_AllowPlayerToSetWaypoints::GetInputs(SCmdParams&) const
SAction_UI_Map_AllowPlayerToSetWaypoints::GetOutputs(SCmdParams&) const
SAction_UI_Map_ShowArea::~SAction_UI_Map_ShowArea()
SAction_UI_Map_ShowArea::GetName() const
SAction_UI_Map_ShowArea::GetInputs(SCmdParams&) const
SAction_UI_Map_ShowArea::GetOutputs(SCmdParams&) const
SAction_UI_Map_HideArea::~SAction_UI_Map_HideArea()
SAction_UI_Map_HideArea::GetName() const
SAction_UI_Map_HideArea::GetInputs(SCmdParams&) const
SAction_UI_Map_HideArea::GetOutputs(SCmdParams&) const
CityPDA_LevelStatsControl::InfoScreenButton::~InfoScreenButton()
MapOverlayRenderer::GetManagerName() const
CityPDA_Sequencer::SequenceEventData::SequenceEventData(CityPDA_Sequencer*, CityPDA_Sequencer::SequenceEventData::eType)
CityPDA_Sequencer::CityPDA_Sequencer(CityPDA_Mutex*)
CityPDA_Sequencer::~CityPDA_Sequencer()
CityPDA_Sequencer::~CityPDA_Sequencer()
CityPDA_Sequencer::IsRunning() const
CityPDA_Sequencer::GetActiveSequence() const
CityPDA_Sequencer::SetActiveSequence(Job*)
CityPDA_Sequencer::SetActiveSequenceInternal(Job*)
CityPDA_Sequencer::SequenceStarted()
CityPDA_Sequencer::dispatchEvent(CityPDA_Sequencer::SequenceEventData::eType)
CityPDA_Sequencer::SequenceEnded()
CityPDA_Sequencer::MapRenderFn_SequenceIndicator(void*)
CityPDA_Sequencer::Render()
CityPDA_Sequencer::RunSequence(Job*)
CityPDA_Sequencer::EventNotify(Event&, NuEventData&)
CityPDA_Sequencer::IsInContainer(LevelContainer&)
CityPDA_Sequencer::GetMap(int)
CityPDA_Sequencer::InitScriptActions()
CityPDA_SequenceScriptAction::CityPDA_SequenceScriptAction()
CityPDA_SequenceScriptAction::~CityPDA_SequenceScriptAction()
CityPDA_SequenceScriptAction::GetSequencer(ScriptContext&)
CityPDA_SequenceScriptAction::ShouldExecute(ScriptContext&, bool)
CityPDA_SequenceScriptAction::Exec(ScriptContext&)
SAction_PDADemo_IsRunning::Exec(ScriptContext&)
SAction_PDADemo_Run::Exec(ScriptContext&)
SAction_PDADemo_ShowMapLocation::Exec(ScriptContext&)
SAction_PDADemo_IsRunning::~SAction_PDADemo_IsRunning()
SAction_PDADemo_IsRunning::GetName() const
CityPDA_SequenceScriptAction::GetInputs(SCmdParams&) const
SAction_PDADemo_IsRunning::GetOutputs(SCmdParams&) const
CityPDA_SequenceScriptAction::~CityPDA_SequenceScriptAction()
SAction_PDADemo_Run::~SAction_PDADemo_Run()
SAction_PDADemo_Run::GetName() const
SAction_PDADemo_Run::GetInputs(SCmdParams&) const
CityPDA_SequenceScriptAction::GetOutputs(SCmdParams&) const
SAction_PDADemo_ShowMapLocation::~SAction_PDADemo_ShowMapLocation()
SAction_PDADemo_ShowMapLocation::GetName() const
SAction_PDADemo_ShowMapLocation::GetInputs(SCmdParams&) const
CityPDA_Sequencer::SequenceEventData::~SequenceEventData()
HashedNameParam::HashedNameParam(char const*)
HashedNameParam::HashedNameParam(unsigned int)
HashedNameParam::HashedNameParam(HashedNameParam const&)
HashedNameParam::operator=(HashedNameParam const&)
FlashElement_PauseScenes(FlashElement*, bool)
FlashScene_SetPausedRecursive(FlashScene*, bool)
ScanBusyScreen::ScanBusyScreen()
ScanBusyScreen::~ScanBusyScreen()
ScanBusyScreen::Init(int)
ScanBusyScreen::Update()
CityPDAManager::GetSplitLayout(int)
ScanBusyScreen::SetActive(bool, bool)
ScanBusyScreen::IsActive() const
ScanBusyScreen::IsFullyActive() const
ScanBusyScreen::SetPaused(bool)
CityPDAMapRenderer::CityPDAMapRenderer(CityPDAManager&, int)
CityPDAMapRenderer::UpdateCamera(NuCamera&)
CityPDAMapRenderer::RenderHUD()
CityPDAManager::ShouldRenderMap(int)
CityPDAPlayerManager::CityPDAPlayerManager(CityPDAManager&, int)
CityPDAModule::AttachManager(CityPDAManager*)
CityPDAPlayerManager::~CityPDAPlayerManager()
CityPDAModule::DetachManager()
CityPDAPlayerManager::GetLegoLevelContainer()
CityPDAPlayerManager::GetRenderSlot()
CityPDAPlayerManager::GetRenderTarget()
CityPDAPlayerManager::DetachRenderSlot()
CityPDAPlayerManager::AutoAttachMapIfFreeSlot()
CityPDAPlayerManager::AttachRenderer(CustomRenderer*)
CityPDAPlayerManager::OnEnterLevel(LegoLevelContainer&)
CityPDAPlayerManager::OnExitLevel(LegoLevelContainer&)
CityPDAPlayerManager::OnLevelLoad(LegoLevelContainer&)
CityPDAPlayerManager::OnLevelUnload(LegoLevelContainer&)
CityPDAPlayerManager::GetFor(MechCharacter*)
CityPDAPlayerManager::GetFor(int)
CityPDAPlayerManager::SetBusyScreenActive(bool, bool)
CityPDAPlayerManager::IsBusyScreenActive() const
CityPDAPlayerManager::IsBusyScreenFullyActive()
CityPDAPlayerManager::SuppressOpenMapInput()
CityPDAPlayerManager::AllowOpenMap(MechCharacter*)
CityPDAPlayerManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CityPDAPlayerManager::UpdateScannedDataMarker()
CityPDAPlayerManager::AcceptingInput()
CityPDAPlayerManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
CityPDAPlayerManager::RenderDRC(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
CityPDAPlayerManager::RenderFunction_Hud_Hook()
CityPDAPlayerManager::OnDropOut()
CityPDAPlayerManager::OnPauseEvent(bool)
CityPDAManager::CityPDAManager(UIContext&)
CityPDAManager::~CityPDAManager()
CityPDAManager::~CityPDAManager()
CityPDAManager::RenderFunction_Hud_Hook()
CityPDAManager::RegisterProcessing()
CityPDAManager::RegisterRendering()
CityPDAManager::OnLevelLoad()
CityPDAManager::OnLevelUnload()
CityPDAManager::OnEnterLevel(LegoLevelContainer&)
CityPDAManager::bodge_RegisterAsActive()
ClassManagerAccessor<MapOverlayRenderer>::GetFromCreate(ILevelContainer const&)
ClassManagerAccessor<DRCRenderer>::GetFromCreate(ILevelContainer const&)
DRCRenderer::Register()
CityPDAManager::OnExitLevel(LegoLevelContainer&)
DRCRenderer::Unregister()
CityPDAManager::bodge_UnregisterAsActive()
CityPDAManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CityPDAManager::ShouldRenderMapOverlays(int)
CityPDAManager::ShouldRenderPDA(int)
CityPDAManager::GetSplitCalculator()
CityPDAManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
CityPDAManager::RenderDRC(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
CityPDAManager::EventNotify(Event&, NuEventData&)
CityPDAManager::GetPDAIndexFromChar(MechCharacter*)
CityPDAManager::SetScannerTakeOverScreen(int)
CityPDAManager::IsScannerTakingOverScreen()
CityPDAManager::ShouldUseFullScreenP2Hack()
CityPDAModule::CityPDAModule()
CityPDAModule::~CityPDAModule()
CityPDAModule::GetManager() const
CityPDA_MutexProcess::CityPDA_MutexProcess(CityPDA_Mutex*)
CityPDA_MutexProcess::~CityPDA_MutexProcess()
CityPDA_MutexProcess::ReleasePDAMutex()
CityPDA_MutexProcess::GetPlayerIdx() const
CityPDA_MutexProcess::CanBeUsed()
CityPDA_Mutex::GetActiveProcess()
CityPDA_MutexProcess::LockPDAMutex()
CityPDA_Mutex::SetActiveProcess(CityPDA_MutexProcess*)
CityPDA_MutexProcess::GetPDAMutex()
CityPDA_MutexProcess::GetManager() const
CityPDA_MutexProcess::GetPlayerManager() const
CityPDA_Mutex::MutexEventData::MutexEventData(CityPDA_MutexProcess*, bool)
CityPDA_Mutex::CityPDA_Mutex(int)
CityPDA_Mutex::IsInUse()
CityPDA_Mutex::DispatchEvent(CityPDA_MutexProcess*, bool)
DRCRenderer::DRCRenderer(LevelContainer&)
DRCRenderer::~DRCRenderer()
DRCRenderer::~DRCRenderer()
DRCRenderer::CommitClearScissorHack()
DRCRenderer::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
Kestrel_ShowMap(int)
Kestrel_CanShowMap(int)
CityPDAMapRenderer::~CityPDAMapRenderer()
DRCRenderer::GetManagerName() const
CityPDA_Mutex::MutexEventData::~MutexEventData()
CityPDA_Communicator::CityPDA_Communicator(int)
CityPDA_Communicator::~CityPDA_Communicator()
CityPDA_Communicator::~CityPDA_Communicator()
CityPDA_Communicator::GetCallState()
CityPDA_Communicator::EventNotify(Event&, NuEventData&)
CityPDA_Communicator::GetNextCallSequence()
CityPDA_Communicator::DispatchBoolEvent(Event&, bool)
CityPDA_Communicator::IsInContainer(LevelContainer&)
CityPDA_Communicator::SetNextCallSequence(Job*, bool)
CityPDA_Communicator::IsValidCallSequence(Job*)
CityPDA_Communicator::ClearNextCallSequence()
CityPDA_Communicator::AbortCall()
CityPDA_Communicator::SetPlayerUsePDA(bool)
CityPDA_Communicator::GetActiveCallSequence()
CityPDA_Communicator::IsIdle()
CityPDA_Communicator::BeginCall()
CityPDA_Communicator::RenderFunction_Hud_Hook()
CityPDA_Communicator::EnterLevel(LegoLevelContainer&)
CityPDA_Communicator::ExitLevel(LegoLevelContainer&)
CityPDA_Communicator::Update(float)
CityPDA_Communicator::UpdateCallState()
CityPDA_Communicator::GetVideoPhone()
CityPDA_Communicator::Restart()
CityPDA_Communicator::OpenPhone()
CityPDA_Communicator::MakePlayerTakeCall()
CityPDA_Communicator::ClosePhone()
CityPDA_Communicator::MakePlayerFinishCall()
CityPDA_Communicator::IsCallerOn()
CityPDA_Communicator::IsCallerOff()
CityPDA_Communicator::HasActiveCallFinished()
CityPDA_Communicator::CanPlayerTakeCall()
CityPDA_Communicator::IsPlayerTakingCall()
CityPDA_Communicator::ShouldPlayerUsePDA()
CityPDA_Communicator::InitScriptActions()
CityPDA_CommunicatorScriptAction::CityPDA_CommunicatorScriptAction()
CityPDA_CommunicatorScriptAction::~CityPDA_CommunicatorScriptAction()
CityPDA_CommunicatorScriptAction::GetCommunicator(ScriptContext&, int)
CityPDA_CommunicatorScriptAction::GetCommunicator(ScriptContext&, MechCharacter*)
CityPDA_CommunicatorScriptAction::Exec(ScriptContext&)
SAction_PDAComm_ClearCall::Exec(ScriptContext&)
SAction_PDAComm_SetCall::Exec(ScriptContext&)
SAction_PDAComm_SetCallAuto::SAction_PDAComm_SetCallAuto(bool)
SAction_PDAComm_SetCallAuto::Exec(ScriptContext&)
SAction_PDAComm_SetUsePDA::Exec(ScriptContext&)
SAction_PDAComm_MapCanShowDuringMiniCut::Exec(ScriptContext&)
SAction_PDAComm_CanTakeCall::Exec(ScriptContext&)
SAction_PDAComm_IsBusy::Exec(ScriptContext&)
SAction_PDAComm_SetVideoCallCharacter::Exec(ScriptContext&)
SAction_PDAComm_SetVideoCallAction::Exec(ScriptContext&)
SAction_PDAMutex_IsBusy::Exec(ScriptContext&)
SAction_PlayerMissedVideoCall::Exec(ScriptContext&)
CityPDA_Communicator::PDACallContext::PDACallContext(MechCharacter&)
CityPDA_Communicator::PDACallContext::~PDACallContext()
CityPDA_Communicator::PDACallContext::~PDACallContext()
CityPDA_Communicator::PDACallContext::AllowEnter(int, MechContext*)
CityPDA_Communicator::PDACallContext::AllowLeave(int, MechContext*)
CityPDA_Communicator::PDACallContext::OnEnter(LevelContainer*)
CityPDA_Communicator::PDACallContext::OnProcess(LevelContainer*, float)
CityPDA_Communicator::PDACallContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
CityPDA_Communicator::PDACallContext::TimeToLeave()
CityPDA_Communicator::PDACallContext::OnLeave()
CityPDA_Communicator::InitOnce()
MechContext* MechContextConstructor<CityPDA_Communicator::PDACallContext>(MechCharacter&)
SAction_PDAComm_SetVideoCallCharacter::~SAction_PDAComm_SetVideoCallCharacter()
SAction_PDAComm_SetVideoCallCharacter::GetName() const
SAction_PDAComm_SetVideoCallCharacter::GetInputs(SCmdParams&) const
SAction_PDAComm_SetVideoCallCharacter::GetOutputs(SCmdParams&) const
SAction_PDAComm_SetVideoCallAction::~SAction_PDAComm_SetVideoCallAction()
SAction_PDAComm_SetVideoCallAction::GetName() const
SAction_PDAComm_SetVideoCallAction::GetInputs(SCmdParams&) const
SAction_PDAComm_SetVideoCallAction::GetOutputs(SCmdParams&) const
CityPDA_CommunicatorScriptAction::~CityPDA_CommunicatorScriptAction()
SAction_PDAComm_ClearCall::~SAction_PDAComm_ClearCall()
SAction_PDAComm_ClearCall::GetName() const
CityPDA_CommunicatorScriptAction::GetInputs(SCmdParams&) const
CityPDA_CommunicatorScriptAction::GetOutputs(SCmdParams&) const
SAction_PDAComm_SetCall::~SAction_PDAComm_SetCall()
SAction_PDAComm_SetCall::GetName() const
SAction_PDAComm_SetCall::GetInputs(SCmdParams&) const
SAction_PDAComm_SetCall::GetOutputs(SCmdParams&) const
SAction_PDAComm_SetUsePDA::~SAction_PDAComm_SetUsePDA()
SAction_PDAComm_SetUsePDA::GetName() const
SAction_PDAComm_SetUsePDA::GetInputs(SCmdParams&) const
SAction_PDAComm_SetUsePDA::GetOutputs(SCmdParams&) const
SAction_PDAComm_MapCanShowDuringMiniCut::~SAction_PDAComm_MapCanShowDuringMiniCut()
SAction_PDAComm_MapCanShowDuringMiniCut::GetName() const
SAction_PDAComm_MapCanShowDuringMiniCut::GetInputs(SCmdParams&) const
SAction_PDAComm_MapCanShowDuringMiniCut::GetOutputs(SCmdParams&) const
SAction_PDAComm_CanTakeCall::~SAction_PDAComm_CanTakeCall()
SAction_PDAComm_CanTakeCall::GetName() const
SAction_PDAComm_CanTakeCall::GetInputs(SCmdParams&) const
SAction_PDAComm_CanTakeCall::GetOutputs(SCmdParams&) const
SAction_PDAComm_IsBusy::~SAction_PDAComm_IsBusy()
SAction_PDAComm_IsBusy::GetName() const
SAction_PDAComm_IsBusy::GetInputs(SCmdParams&) const
SAction_PDAComm_IsBusy::GetOutputs(SCmdParams&) const
SAction_PDAMutex_IsBusy::~SAction_PDAMutex_IsBusy()
SAction_PDAMutex_IsBusy::GetName() const
SAction_PDAMutex_IsBusy::GetInputs(SCmdParams&) const
SAction_PDAMutex_IsBusy::GetOutputs(SCmdParams&) const
SAction_PlayerMissedVideoCall::~SAction_PlayerMissedVideoCall()
SAction_PlayerMissedVideoCall::GetName() const
SAction_PlayerMissedVideoCall::GetInputs(SCmdParams&) const
SAction_PlayerMissedVideoCall::GetOutputs(SCmdParams&) const
SAction_PDAComm_SetCallAuto::~SAction_PDAComm_SetCallAuto()
SAction_PDAComm_SetCallAuto::GetName() const
SAction_PDAComm_SetCallAuto::GetInputs(SCmdParams&) const
SAction_PDAComm_SetCallAuto::GetOutputs(SCmdParams&) const
LegoContextHandlerBase<CityPDA_Communicator::PDACallContext>::GetInstanceId() const
BoolEventData<CityPDA_Communicator>::~BoolEventData()
LegoContextHandlerBase<CityPDA_Communicator::PDACallContext>::~LegoContextHandlerBase()
CityPDA_PinsMenu::GetMainPinsMenuScene(int)
CityPDA_PinsMenu::CityPDA_PinsMenu(int, PDAContextMenuLayoutManager const&)
CityPDA_PinsMenu::~CityPDA_PinsMenu()
CityPDA_PinsMenu::Release()
PDAContextMenu::~PDAContextMenu()
non-virtual thunk to CityPDA_PinsMenu::~CityPDA_PinsMenu()
CityPDA_PinsMenu::~CityPDA_PinsMenu()
non-virtual thunk to CityPDA_PinsMenu::~CityPDA_PinsMenu()
CityPDA_PinsMenu::Init()
PDAContextMenu::Init()
CityPDA_PinsMenu::Reset()
CityPDA_PinsMenu::Hide()
CityPDA_PinsMenu::Update(float)
PDAContextMenu::Update(float)
CityPDA_PinsMenu::UpdateState(CityPDA_PinsMenu::eState)
CityPDA_PinsMenu::IsShowing()
CityPDA_PinsMenu::IsHiding()
CityPDA_PinsMenu::Show(UIMapPin&, bool, bool)
PDAContextMenuLayoutManager::GetLayoutForPin(UIMapPin const&) const
CityPDA_PinsMenu::SetState(CityPDA_PinsMenu::eState)
PDAContextMenu::Reset(bool)
PDAContextMenu::SetCanAddSelectButton(bool)
PDAContextMenuLayout::ApplyTo(PDAContextMenu&) const
PDAContextMenu::SetPinObject(UIMapPinObject&)
PDAContextMenuLayoutManager::GetPinData(UIMapPin const&) const
PDAContextMenu::SetPinData(MapPinData const*)
PDAContextMenu::Show()
PDAContextMenu::AutoSelect(UIMapPinObject&)
CityPDA_PinsMenu::EventNotify(Event&, NuEventData&)
PDAContextMenu::GetPinObject() const
non-virtual thunk to CityPDA_PinsMenu::EventNotify(Event&, NuEventData&)
PDAContextMenuLayoutManager::ResetAllLayouts()
PDAContextMenu::Hide()
PDAContextMenuInfoScreen::PDAContextMenuInfoScreen(int)
PDAContextMenuInfoScreen::Reset()
PDAContextMenuInfoScreen::FlashData::Reset()
PDAContextMenuInfoScreen::ShowSelectPrompt(bool)
PDAContextMenuInfoScreen::FlashData::ShowSelectPrompt(bool)
PDAContextMenuInfoScreen::ShowCancelPrompt(bool)
PDAContextMenuInfoScreen::FlashData::ShowCancelPrompt(bool)
PDAContextMenuInfoScreen::SetTitle(char const*)
PDAContextMenuInfoScreen::FlashData::GetElement(PDAContextMenuInfoScreen::eElementID)
PDAContextMenuInfoScreen::SetDescription(char const*)
PDAContextMenuInfoScreen::SetIconTexture(NuSmartPtr<NuTexture, true>)
PDAContextMenuInfoScreen::SetDescriptionIconTexture(NuSmartPtr<NuTexture, true>)
PDAContextMenuInfoScreen::GetStatsBar()
PDAContextMenuInfoScreen::GetFlashData() const
PDAContextMenuInfoScreen::GetFlashData()
PDAContextMenuInfoScreen::HitTest(DRCTouch const&)
PDAContextMenuInfoScreen::FlashData::GetScene()
PDAContextMenuInfoScreen::SetFlashData(PDAContextMenuInfoScreen::FlashData*)
PDAContextMenuInfoScreen::Show(UIMapPinObject*)
PDAContextMenuInfoScreen::FlashData::GetButton(PDAContextMenuInfoScreen::eButtonID)
PDAContextMenuInfoScreen::FlashData::GetAnim(PDAContextMenuInfoScreen::eAnimationID)
PDAContextMenuInfoScreen::Hide()
PDAContextMenuInfoScreen::Update(float)
PDAContextMenuInfoScreen::FlashData::FlashData()
PDAContextMenuInfoScreen::FlashData::~FlashData()
PDAContextMenuInfoScreen::FlashData::InitFromElement(FlashElement*, FlashScene*)
NuDynamicStringT<false>::operator+=(char const*)
PDAContextMenuInfoScreen::FlashData::SetNameID(HashedKey const&)
PDAContextMenuInfoScreen::FlashData::SetTriggerAnimation(char const*)
NuDynamicStringT<false>::~NuDynamicStringT()
PDAContextMenuInfoScreen::FlashData::GetNameID() const
PDAContextMenuInfoScreen::FlashData::operator=(PDAContextMenuInfoScreen::FlashData const&)
PDAContextMenuButton::GetTypeFromNameID(HashedKey const&)
PDAContextMenuButton::PDAContextMenuButton()
PDAContextMenuButton::Reset()
PDAContextMenuButton::FlashData::Reset()
PDAContextMenuButton::SetEnabled(bool)
PDAContextMenuButton::FlashData::SetEnabled(bool)
PDAContextMenuButton::IsEnabled()
PDAContextMenuButton::FlashData::GetElement(PDAContextMenuButton::eElementID)
PDAContextMenuButton::Show()
PDAContextMenuButton::PlayAnim(PDAContextMenuButton::eAnimationID)
PDAContextMenuButton::Hide()
PDAContextMenuButton::Update(float)
PDAContextMenuButton::HitTest(DRCTouch const&)
PDAContextMenuButton::FlashData::GetScene()
PDAContextMenuButton::OnPress(DRCTouch const&)
PDAContextMenuButton::CanBeSelected()
PDAContextMenuButton::StopAnim(PDAContextMenuButton::eAnimationID, bool)
PDAContextMenuButton::OnRelease(DRCTouch const&)
PDAContextMenuButton::NotifySelected()
PDAContextMenuButton::SetDescription(StringDatabaseLabel const&)
PDAContextMenuButton::GetProperties() const
OnTriggerDoorChange_PinsMenu(char const*)
PDAContextMenuButton::DoSelectAction()
PDAContextMenuButton::SetFlashData(PDAContextMenuButton::FlashData*)
PDAContextMenuButton::FlashData::GetAnim(PDAContextMenuButton::eAnimationID)
PDAContextMenuButton::FlashData::FlashData()
PDAContextMenuButton::FlashData::InitFromElement(FlashElement*, FlashScene*)
PDAContextMenu::PDAContextMenu(int)
PDAContextMenu::GetOwnerPlayer()
PDAContextMenu::SetState(PDAContextMenu::eState)
PDAContextMenuConfirmBox::Reset()
PDAContextMenu::ExitMenu(PDAContextMenu::eExitMode)
PDAContextMenu::UpdateState(PDAContextMenu::eState)
PDAContextMenu::HitTest(DRCTouch const&)
PDAContextMenu::OnRelease(DRCTouch const&)
PDAContextMenu::GetMenuInfoScreen()
PDAContextMenu::GetMenuButton(unsigned int) const
PDAContextMenu::GetMenuButton(unsigned int)
PDAContextMenu::GetConfirmBox()
PDAContextMenu::CanAddSelectButton()
PDAContextMenu::AddButton(int, PDAContextMenuButton::Properties const&, StringDatabaseLabel const&)
PDAContextMenu::AddConfirmBox(PDAContextMenuConfirmBox::Properties const&)
PDAContextMenu::EventNotify(Event&, NuEventData&)
non-virtual thunk to PDAContextMenu::EventNotify(Event&, NuEventData&)
PDAContextMenuConfirmBox::Hide()
PDAContextMenuConfirmBox::Show()
PDAContextMenuLayout_ParserConfig::GetConfigkeywords()
PDAContextMenuLayout_ParserConfig::Parse_Name(nufpar_s*)
PDAContextMenuLayout_ParserConfig::Parse_ButtonText(nufpar_s*)
PDAContextMenuLayout::SetButtonText(StringDatabaseLabel const&, unsigned int)
PDAContextMenuLayout_ParserConfig::Parse_Title(nufpar_s*)
PDAContextMenuLayout::SetTitleText(StringDatabaseLabel const&)
PDAContextMenuLayout_ParserConfig::Parse_Description(nufpar_s*)
PDAContextMenuLayout::SetDescriptionText(StringDatabaseLabel const&)
PDAContextMenuLayout_ParserConfig::Parse_AddButton(nufpar_s*)
PDAContextMenuLayoutManager::FindButtonData(char const*)
PDAContextMenuLayoutManager::AddButtonData(char const*)
PDAContextMenuLayout_ParserConfig::Parse_AddButtonWithType(nufpar_s*)
PDAContextMenuLayout::AddButtonToLayout(HashedKey const&)
PDAContextMenuLayout_ParserConfig::Parse_InfoScreenElement(nufpar_s*)
PDAContextMenuLayoutManager::FindInfoScreenData(char const*)
PDAContextMenuLayoutManager::AddInfoScreenData(char const*)
PDAContextMenuLayout_ParserConfig::Parse_InfoScreenTrigger(nufpar_s*)
PDAContextMenuLayoutManager::AddInfoScreenData(PDAContextMenuInfoScreen::FlashData const&)
PDAContextMenuLayout_ParserConfig::Parse_ConfirmBoxElement(nufpar_s*)
PDAContextMenuLayoutManager::FindConfirmBoxData(char const*)
PDAContextMenuLayoutManager::AddConfirmBoxData(char const*)
PDAContextMenuLayout_ParserConfig::Parse_ConfirmBoxText(nufpar_s*)
PDAContextMenuLayout::SetConfirmBoxDescriptionText(StringDatabaseLabel const&)
PDAContextMenuLayout::PDAContextMenuLayout()
PDAContextMenuConfirmBox::SetFlashData(PDAContextMenuConfirmBox::FlashData*)
PDAContextMenuLayout::GetNameID() const
PDAContextMenuLayout::GetProperties() const
PDAContextMenuLayout::SetToLoad(PDAContextMenuLayout*)
PDAContextMenuLayoutManager_ParserConfig::GetConfigkeywords()
PDAContextMenuLayoutManager_ParserConfig::PK_StartLayout(nufpar_s*)
PDAContextMenuLayoutManager::StartLoadingNext()
PDAContextMenuLayoutManager_ParserConfig::PK_EndLayout(nufpar_s*)
PDAContextMenuLayoutManager::FinishLoadingCurrent()
PDAContextMenuLayoutManager::PDAContextMenuLayoutManager(MapPinDataManager const&, int)
PDAContextMenuLayoutManager::LoadLayoutTypes(char const*)
PDAContextMenuLayoutManager::AddDefaultData()
PDAContextMenuConfirmBox::FlashData::Reset()
PDAContextMenuLayoutManager::AddButtonDataFromElement(FlashElement*)
PDAContextMenuConfirmBox::FlashData::InitFromElement(FlashElement*, FlashScene*)
PDAContextMenuConfirmBox::FlashData::GetElement(PDAContextMenuConfirmBox::eElementID)
PDAContextMenuConfirmBox::PDAContextMenuConfirmBox()
PDAContextMenuConfirmBox::FlashData::SetEnabled(bool)
PDAContextMenuConfirmBox::SetState(PDAContextMenuConfirmBox::eState)
PDAContextMenuConfirmBox::ExitMenu(PDAContextMenuConfirmBox::eExitMode)
PDAContextMenuConfirmBox::IsShowing()
PDAContextMenuConfirmBox::HitTest(DRCTouch const&)
PDAContextMenuConfirmBox::FlashData::GetScene()
PDAContextMenuConfirmBox::EventNotify(Event&, NuEventData&)
PDAContextMenuConfirmBox::PlayAnim(PDAContextMenuConfirmBox::eAnimationID)
non-virtual thunk to PDAContextMenuConfirmBox::EventNotify(Event&, NuEventData&)
PDAContextMenuConfirmBox::GetProperties() const
PDAContextMenuConfirmBox::StopAnim(PDAContextMenuConfirmBox::eAnimationID, bool)
PDAContextMenuConfirmBox::SetDescriptionText(StringDatabaseLabel const&)
PDAContextMenuConfirmBox::FlashData::GetAnim(PDAContextMenuConfirmBox::eAnimationID)
PDAContextMenuConfirmBox::FlashData::FlashData()
PDAContextMenu::~PDAContextMenu()
non-virtual thunk to PDAContextMenu::~PDAContextMenu()
non-virtual thunk to PDAContextMenu::~PDAContextMenu()
PDAContextMenuInfoScreen::~PDAContextMenuInfoScreen()
PDAContextMenuInfoScreen::~PDAContextMenuInfoScreen()
PDAContextMenuButton::~PDAContextMenuButton()
PDAContextMenuButton::~PDAContextMenuButton()
PDAContextMenuConfirmBox::~PDAContextMenuConfirmBox()
PDAContextMenuConfirmBox::~PDAContextMenuConfirmBox()
non-virtual thunk to PDAContextMenuConfirmBox::~PDAContextMenuConfirmBox()
non-virtual thunk to PDAContextMenuConfirmBox::~PDAContextMenuConfirmBox()
CityPDA_PinsMenu::PinsMenuEventData::~PinsMenuEventData()
PDAContextMenuButton::ButtonEventData::~ButtonEventData()
PDAContextMenu::MenuEventData::~MenuEventData()
PDAContextMenu::MenuExitData::~MenuExitData()
StudCountDown::StudCountDown()
StudCountDown::~StudCountDown()
StudCountDown::IsCounting()
StudCountDown::Update(float)
CityPDA_CharacterShopHudInterface::PlaySample(eShopSounds, NuSoundHandle*)
CityPDA_CharacterShop::CityPDA_CharacterShop(CityPDA_Mutex*)
CityPDA_CharacterShop::~CityPDA_CharacterShop()
CityPDA_CharacterShopHudInterface::DetachUI()
CityPDA_CharacterShop::IsPreLevelSelectActive()
CityPDA_CharacterShopHudInterface::IsPreLevelSelectEnabled()
CityPDA_CharacterShop::SetCurrentSwitch(GizSwitch*)
CityPDA_CharacterShop::GetCurrentSwitch()
CityPDA_CharacterShop::Render(LegoLevelContainer&, LevelView*, ClassManager::eRenderingPriority)
CityPDA_CharacterShopHudInterface::Render(LegoLevelContainer&, LevelView*, ClassManager::eRenderingPriority)
CityPDA_CharacterShop::Update(float)
CityPDA_CharacterShopHudInterface::Update(float)
CityPDA_CharacterShop::OnLevelUnload(LegoLevelContainer&)
CityPDA_CharacterShop::OnLevelLoad(LegoLevelContainer&)
CityPDA_CharacterShop::OnEnterLevel(LegoLevelContainer&)
CityPDA_CharacterShopHudInterface::AttachUI(LegoLevelContainer&)
CityPDA_CharacterShop::OnExitLevel(LegoLevelContainer&)
CityPDA_CharacterShop::UpdateListener(VuMtx*, VuVec*)
CityPDA_CharacterShop::IsActive()
CityPDA_CharacterShop::IsFromPinsMenu()
CityPDA_CharacterShop::IsFromHotspot()
CityPDA_CharacterShop::GetSelectedId()
CityPDA_CharacterShop::SetSelectedId(int)
CityPDA_CharacterShop::SetColourIndex(char)
CityPDA_CharacterShop::GetColourIndex()
CityPDA_CharacterShop::ShouldExitIntoLevel()
CityPDA_CharacterShop::SetDesignatedLevelDoor(char const*)
CityPDA_CharacterShop::DisguiseChanged()
CityPDA_CharacterShop::SetActive(bool, eShopMode, eVehicleDropPoint, bool, bool, bool)
CityPDA_CharacterShopHudInterface::SetEnabled(bool, eShopMode, eVehicleDropPoint, bool)
CityPDA_CharacterShop::GetTouchTargetLayer()
CityPDA_CharacterShop::RenderFunction_Hud_Hook()
CityPDA_CharacterShopHudInterface::RenderFunction_Hud_Hook()
CityPDA_CharacterShop::IsPauseAllowed()
CityPDA_CharacterShopHudInterface::CityPDA_CharacterShopHudInterface(int)
CityPDA_CharacterShopHudInterface::~CityPDA_CharacterShopHudInterface()
CityPDA_CharacterShopHudInterface::ClearStringAssignments()
non-virtual thunk to CityPDA_CharacterShopHudInterface::~CityPDA_CharacterShopHudInterface()
non-virtual thunk to CityPDA_CharacterShopHudInterface::~CityPDA_CharacterShopHudInterface()
CityPDA_CharacterShopHudInterface::~CityPDA_CharacterShopHudInterface()
non-virtual thunk to CityPDA_CharacterShopHudInterface::~CityPDA_CharacterShopHudInterface()
non-virtual thunk to CityPDA_CharacterShopHudInterface::~CityPDA_CharacterShopHudInterface()
CityPDA_CharacterShopHudInterface::SetLocalizedTextString(FlashElement*, char const*)
CityPDA_CharacterShopHudInterface::HitTest(DRCTouch const&)
non-virtual thunk to CityPDA_CharacterShopHudInterface::HitTest(DRCTouch const&)
CityPDA_CharacterShopHudInterface::IsAborting()
CityPDA_CharacterShopHudInterface::Abort()
CityPDA_CharacterShopHudInterface::IsEnabled()
CityPDA_CharacterShopHudInterface::EventNotify(Event&, NuEventData&)
CityPDA_CharacterShopHudInterface::PreLevelSelectChanged(bool)
non-virtual thunk to CityPDA_CharacterShopHudInterface::PreLevelSelectChanged(bool)
CityPDA_CharacterShopHudInterface::IsBackPressed(MechCharacter*)
CityPDA_CharacterShopHudInterface::PlaySample(eShopSounds)
CityPDA_CharacterShopHudInterface::IsSelectPressed(MechCharacter*)
CityPDA_CharacterShopHudInterface::IsUpPressed(MechCharacter*)
CityPDA_CharacterShopHudInterface::IsDownPressed(MechCharacter*)
CityPDA_CharacterShopHudInterface::DisguiseFocusChanged(int, bool)
non-virtual thunk to CityPDA_CharacterShopHudInterface::DisguiseFocusChanged(int, bool)
CityPDA_CharacterShopHudInterface::RequestPlayCutscene(int, int, int)
non-virtual thunk to CityPDA_CharacterShopHudInterface::RequestPlayCutscene(int, int, int)
CityPDA_CharacterShopHudInterface::CategoryFocusIndexChanged(short)
non-virtual thunk to CityPDA_CharacterShopHudInterface::CategoryFocusIndexChanged(short)
CityPDA_CharacterShopHudInterface::CharacterLoaded()
non-virtual thunk to CityPDA_CharacterShopHudInterface::CharacterLoaded()
CityPDA_CharacterShopHudInterface::UpdateSelectButton()
non-virtual thunk to CityPDA_CharacterShopHudInterface::UpdateSelectButton()
CityPDA_CharacterShopHudInterface::VehicleColourSelected(char)
non-virtual thunk to CityPDA_CharacterShopHudInterface::VehicleColourSelected(char)
CityPDA_CharacterShopHudInterface::CharacterClassSelected(short, char, PDAButton*)
non-virtual thunk to CityPDA_CharacterShopHudInterface::CharacterClassSelected(short, char, PDAButton*)
CityPDA_CharacterShopHudInterface::CategorySelected(short, short, PDAButton*, int)
non-virtual thunk to CityPDA_CharacterShopHudInterface::CategorySelected(short, short, PDAButton*, int)
CityPDA_CharacterShopHudInterface::CollectableBought(short)
non-virtual thunk to CityPDA_CharacterShopHudInterface::CollectableBought(short)
CityPDA_CharacterShopHudInterface::DiguiseSelected(short, char)
non-virtual thunk to CityPDA_CharacterShopHudInterface::DiguiseSelected(short, char)
CityPDA_CharacterShopHudInterface::BrickSelected(int, bool, bool, bool)
non-virtual thunk to CityPDA_CharacterShopHudInterface::BrickSelected(int, bool, bool, bool)
CityPDA_CharacterShopHudInterface::CharacterSelected(short, int, int, bool, bool)
non-virtual thunk to CityPDA_CharacterShopHudInterface::CharacterSelected(short, int, int, bool, bool)
CityPDA_CharacterShopHudInterface::GetSelectedIndex()
CityPDA_CharacterShopHudInterface::GetShopState()
non-virtual thunk to CityPDA_CharacterShopHudInterface::GetShopState()
BoolEventData<CityPDA_CharacterShop>::~BoolEventData()
GridInputControl::GridInputControl()
GridInputControl::~GridInputControl()
GridInputControl::Reset()
GridInputControl::Update(MechCharacter*, float)
GridInputControl::GetPlayerInputDirection(MechCharacter*)
GridInputControl::GetOutputDirection() const
CarouselInputControl::CarouselInputControl()
CarouselInputControl::~CarouselInputControl()
CarouselInputControl::Reset()
CarouselInputControl::Update(MechCharacter*, float)
CarouselInputControl::GetTapDirection() const
CarouselInputControl::GetHoldDirection() const
GridLayoutInfo::GridLayoutInfo()
GridLayoutInfo::Init(FlashElement*, FlashElement*, FlashElement*, FlashElement*)
GridLayoutInfo::GetColumnPosition(int) const
GridLayoutInfo::GetCellPosition(int, int) const
PDACharcaterButton::PDACharcaterButton()
PDACharcaterButton::~PDACharcaterButton()
PDACharcaterButton::~PDACharcaterButton()
PDACharcaterButton::AssignFlash(FlashScene*, FlashElement*)
PDACharcaterButton::GetFlashGraph()
PDACharcaterButton::GetIconElement()
PDACharcaterButton::InitTextureReplacers()
PDACharcaterButton::HitTest(DRCTouch const&)
PDACharcaterButton::SetContainerObject(IShopPDAButtonContainer*)
PDACharcaterButton::NotifyClickEnd(int)
PDACharcaterButton::OnPress(DRCTouch const&)
PDACharcaterButton::GetMasterCollectionIndex()
PDACharcaterButton::OnRelease(DRCTouch const&)
PDACharcaterButton::OnTap(DRCTouch const&, int)
PDACharcaterButton::OnTapSeriesEnd(DRCTouch const&, int)
PDACharcaterButton::OnHold(DRCTouch const&)
PDACharcaterButton::OnHoldRelease(DRCTouch const&)
PDACharcaterButton::OnDrag(DRCTouch const&)
CityPDA_ShopUISettings::GetSweepProximity()
PDACharcaterButton::SetId(short)
PDACharcaterButton::GetId()
PDACharcaterButton::IsVisible()
PDACharcaterButton::SetVisible(bool)
PDACharcaterButton::SetMasterCollectionIndex(int)
PDACharcaterButton::GetCharacterCollectionIndex()
PDACharcaterButton::SetCharacterCollectionIndex(short)
PDACharcaterButton::ShowQuestionMark(bool)
PDACharcaterButton::ShowFilmReel(bool)
PDACharcaterButton::GetColumnIndex()
PDACharcaterButton::GetRowIndex()
PDACharcaterButton::Hide(bool)
PDACharcaterButton::Show(bool)
PDACharcaterButton::SetHighlightVisible(bool)
PDACharcaterButton::SetHighlightActive(bool)
PDACharcaterButton::SetFavIconOn()
PDACharcaterButton::SetFavIconOff()
PDACharcaterButton::SetNewIconOn()
PDACharcaterButton::SetNewIconOff()
PDACharcaterWheelButton::PDACharcaterWheelButton()
PDACharcaterWheelButton::~PDACharcaterWheelButton()
PDACharcaterWheelButton::OnPress(DRCTouch const&)
PDACharcaterWheelButton::Unselect()
PDACharcaterWheelButton::OnDrag(DRCTouch const&)
PDACharcaterWheelButton::SetSelected()
PDACharcaterWheelButton::HideBorder(bool)
PDACharcaterWheelButton::ShowBorder(bool)
PDACharcaterWheelButton::AssignFlash(FlashScene*, FlashElement*)
PDACharcaterWheelButton::PlayFlashingAnim()
PDACharcaterWheelButton::IsFlahsingAnimAtEnd()
PDACharcaterWheelButton::HitTest(DRCTouch const&)
PDAPurchaseButton::PDAPurchaseButton()
PDAPurchaseButton::~PDAPurchaseButton()
PDAPurchaseButton::~PDAPurchaseButton()
PDAPurchaseButton::NotifyClickEnd(int)
PDAPurchaseButton::OnPress(DRCTouch const&)
PDAPurchaseButton::OnRelease(DRCTouch const&)
PDAPurchaseButton::OnTap(DRCTouch const&, int)
PDAPurchaseButton::OnTapSeriesEnd(DRCTouch const&, int)
PDAPurchaseButton::OnHold(DRCTouch const&)
PDAPurchaseButton::OnHoldRelease(DRCTouch const&)
PDAPurchaseButton::OnDrag(DRCTouch const&)
ShopObjectViewer::ShopObjectViewer(int)
ShopObjectViewer::~ShopObjectViewer()
ShopObjectViewer::ReleaseRefs()
ShopObjectViewer::~ShopObjectViewer()
ShopObjectViewer::IsInUse() const
ShopObjectViewer::CanOverrideColour(short)
ShopObjectViewer::CanOverrideColour()
ShopObjectViewer::ApplyColourToModel(char)
ShopObjectViewer::SetColourIndex(char)
ShopObjectViewer::AttachUI(FlashScene*, IShopUICallback*)
ShopObjectViewer::HideLoadingAnimtions()
ShopObjectViewer::ApplyAnimation(CharInst*, ShopObjectViewer::eCharacterAnims)
ShopObjectViewer::ResetRotations()
ShopObjectViewer::SetLevelContainer(LegoLevelContainer*)
ShopObjectViewer::SetDisplayBrickObject(bool)
ShopObjectViewer::SetBrickObject(int, eShopMode)
ShopObjectViewer::IsCharacterVisible()
ShopObjectViewer::SetCharacterAnimation()
ShopObjectViewer::PostLoadCharacterSetup()
ShopObjectViewer::CalculateModelViewVolume()
ShopObjectViewer::IsCharacterLoaded()
ShopObjectViewer::SetHidden(bool)
ShopObjectViewer::IsHidden() const
ShopObjectViewer::LocalizeVehicleTextures(CharInst*)
ShopObjectViewer::LoadCharacter(short, short, bool, eShopMode)
ShopObjectViewer::LoadTrailer(short)
ShopObjectViewer::GetLocatorMtx(CharInst*, int, VuMtx&)
ShopObjectViewer::CalcTrailerTransform(CharInst*, CharInst*, VuMtx&)
ShopObjectViewer::SetActiveArea(int, int, int, int)
ShopObjectViewer::HitTest(DRCTouch const&)
ShopObjectViewer::OnTap(DRCTouch const&, int)
ShopObjectViewer::OnPress(DRCTouch const&)
ShopObjectViewer::OnRelease(DRCTouch const&)
ShopObjectViewer::OnDrag(DRCTouch const&)
ShopObjectViewer::UpdatePlayerRotations(float)
ShopObjectViewer::AutoRotateObject(float)
ShopObjectViewer::SetEnabled(bool)
ShopObjectViewer::IsInLoadingSequence()
ShopObjectViewer::SetDisplayObject(bool)
ShopObjectViewer::UpdateRightPadRotation(float)
ShopObjectViewer::Indicator::Indicator()
ShopObjectViewer::Indicator::Update(ShopObjectViewer&, float)
ShopObjectViewer::Indicator::SetActive(bool)
ShopObjectViewer::Update(float)
ShopObjectViewer::Draw_Quad(HudCommon::FlashToPanel_RenderQuad&)
ShopObjectViewer::Draw_ModelOBB(VuMtx&)
ShopObjectViewer::GetViewVolumeLongestExtent()
ShopObjectViewer::Render()
ShopObjectViewer::RenderVehicle()
CityPDA_ShopUISettings::CityPDA_ShopUISettings()
CityPDA_ShopUISettings::~CityPDA_ShopUISettings()
non-virtual thunk to CityPDA_ShopUISettings::~CityPDA_ShopUISettings()
CityPDA_ShopUISettings::~CityPDA_ShopUISettings()
non-virtual thunk to CityPDA_ShopUISettings::~CityPDA_ShopUISettings()
CityPDA_ShopUISettings::AttachUI(LegoLevelContainer&, FlashScene*)
CityPDA_ShopUISettings::EventNotify(Event&, NuEventData&)
CityPDA_ShopUISettings::Update(float)
CityPDA_ShopUISettings::Show()
CityPDA_ShopUISettings::Hide()
CityPDA_ShopUISettings::GetMotionSpeedLimit()
CityPDA_ShopUISettings::IsEnabled()
CityPDA_DisguiseBoothCharacterWheel::CityPDA_DisguiseBoothCharacterWheel(int)
CityPDA_DisguiseBoothCharacterWheel::~CityPDA_DisguiseBoothCharacterWheel()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::~CityPDA_DisguiseBoothCharacterWheel()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::~CityPDA_DisguiseBoothCharacterWheel()
CityPDA_DisguiseBoothCharacterWheel::~CityPDA_DisguiseBoothCharacterWheel()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::~CityPDA_DisguiseBoothCharacterWheel()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::~CityPDA_DisguiseBoothCharacterWheel()
CityPDA_DisguiseBoothCharacterWheel::CreateCharacterClassButton(FlashScene*, FlashElement*, int)
CityPDA_DisguiseBoothCharacterWheel::AttachUI(LegoLevelContainer&, FlashScene*, IShopUICallback*)
CityPDA_DisguiseBoothCharacterWheel::EventNotify(Event&, NuEventData&)
CityPDA_DisguiseBoothCharacterWheel::SetEnabled(bool)
CityPDA_DisguiseBoothCharacterWheel::IsInTransitionState()
CityPDA_DisguiseBoothCharacterWheel::Update(float)
CityPDA_DisguiseBoothCharacterWheel::RefreshCharacterName()
CityPDA_DisguiseBoothCharacterWheel::Render()
CityPDA_DisguiseBoothCharacterWheel::UpdateCharacterIcon(PDACharcaterWheelButton*, int)
CityPDA_DisguiseBoothCharacterWheel::UpdateCharacterIcons()
CityPDA_DisguiseBoothCharacterWheel::DisguiseSelected(short, char)
CityPDA_DisguiseBoothCharacterWheel::CommitSelectedDisguises()
CityPDA_DisguiseBoothCharacterWheel::Show(bool, eShopMode, bool)
CityPDA_DisguiseBoothCharacterWheel::Hide(bool)
CityPDA_DisguiseBoothCharacterWheel::IsEnabled()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::IsEnabled()
CityPDA_DisguiseBoothCharacterWheel::IsLockedForInput()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::IsLockedForInput()
CityPDA_DisguiseBoothCharacterWheel::GetFocusIndex()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::GetFocusIndex()
CityPDA_DisguiseBoothCharacterWheel::GetSelectedButton()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::GetSelectedButton()
CityPDA_DisguiseBoothCharacterWheel::SetSelectedButton(PDAButton*)
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::SetSelectedButton(PDAButton*)
CityPDA_ShopPreLevelSelection::CityPDA_ShopPreLevelSelection()
CityPDA_ShopPreLevelSelection::~CityPDA_ShopPreLevelSelection()
non-virtual thunk to CityPDA_ShopPreLevelSelection::~CityPDA_ShopPreLevelSelection()
CityPDA_ShopPreLevelSelection::~CityPDA_ShopPreLevelSelection()
non-virtual thunk to CityPDA_ShopPreLevelSelection::~CityPDA_ShopPreLevelSelection()
CityPDA_ShopPreLevelSelection::AttachUI(LegoLevelContainer&, FlashScene*, IShopUICallback*)
CityPDA_ShopPreLevelSelection::EventNotify(Event&, NuEventData&)
CityPDA_ShopPreLevelSelection::ChangeMenuSelection(int, bool)
CityPDA_ShopPreLevelSelection::Update(float)
CityPDA_ShopPreLevelSelection::Show(eShopMode)
CityPDA_ShopPreLevelSelection::Hide(bool)
CityPDA_ShopPreLevelSelection::OnSelect()
CityPDA_ShopPreLevelSelection::OnDPadUp()
CityPDA_ShopPreLevelSelection::OnDPadDown()
CityPDA_ShopPreLevelReady::CityPDA_ShopPreLevelReady(int)
CityPDA_ShopPreLevelReady::~CityPDA_ShopPreLevelReady()
non-virtual thunk to CityPDA_ShopPreLevelReady::~CityPDA_ShopPreLevelReady()
CityPDA_ShopPreLevelReady::~CityPDA_ShopPreLevelReady()
non-virtual thunk to CityPDA_ShopPreLevelReady::~CityPDA_ShopPreLevelReady()
CityPDA_ShopPreLevelReady::AttachUI(LegoLevelContainer&, FlashScene*, IShopUICallback*)
CityPDA_ShopPreLevelReady::EventNotify(Event&, NuEventData&)
CityPDA_ShopPreLevelReady::Update(float)
CityPDA_ShopPreLevelReady::Show()
CityPDA_ShopPreLevelReady::Hide(bool)
CityPDA_ShopUICategory::CityPDA_ShopUICategory(int)
CityPDA_ShopUICategory::~CityPDA_ShopUICategory()
non-virtual thunk to CityPDA_ShopUICategory::~CityPDA_ShopUICategory()
non-virtual thunk to CityPDA_ShopUICategory::~CityPDA_ShopUICategory()
CityPDA_ShopUICategory::~CityPDA_ShopUICategory()
non-virtual thunk to CityPDA_ShopUICategory::~CityPDA_ShopUICategory()
non-virtual thunk to CityPDA_ShopUICategory::~CityPDA_ShopUICategory()
CityPDA_ShopUICategory::AttachUI(LegoLevelContainer&, FlashScene*, IShopUICallback*)
CityPDA_ShopUICategory::CreateCategoryButton(FlashScene*, FlashElement*, int)
CityPDA_ShopUICategory::CalculateCollectedStatistics(eShopMode)
CityPDA_ShopUICategory::GetButtonForCategoryId(short)
CityPDA_ShopUICategory::EventNotify(Event&, NuEventData&)
CityPDA_ShopUICategory::UpdateSweepProximity()
CityPDA_ShopUICategory::UpdateFocusedNameLabel()
CityPDA_ShopUICategory::SetEnabled(bool)
CityPDA_ShopUICategory::Update(float)
CityPDA_ShopUICategory::UpdateCollectedStatistics()
CityPDA_ShopUICategory::Render()
CityPDA_ShopUICategory::UpdateLockedStatus()
CityPDA_ShopUICategory::UpdateUserData()
CityPDA_ShopUICategory::Show(bool, eShopMode, eVehicleDropPoint, int, bool, bool)
CityPDA_ShopUICategory::Hide(bool, bool)
CityPDA_ShopUICategory::IsInTransitionState()
CityPDA_ShopUICategory::IsEnabled()
non-virtual thunk to CityPDA_ShopUICategory::IsEnabled()
CityPDA_ShopUICategory::IsLockedForInput()
non-virtual thunk to CityPDA_ShopUICategory::IsLockedForInput()
CityPDA_ShopUICategory::GetFocusIndex()
non-virtual thunk to CityPDA_ShopUICategory::GetFocusIndex()
CityPDA_ShopUICategory::GetSelectedButton()
non-virtual thunk to CityPDA_ShopUICategory::GetSelectedButton()
CityPDA_ShopUICategory::GetSelectedBrickButton()
non-virtual thunk to CityPDA_ShopUICategory::GetSelectedBrickButton()
CityPDA_ShopUICategory::SetSelectedButton(PDAButton*)
non-virtual thunk to CityPDA_ShopUICategory::SetSelectedButton(PDAButton*)
CityPDA_ShopUIBricks::CityPDA_ShopUIBricks(int)
CityPDA_ShopUIBricks::~CityPDA_ShopUIBricks()
non-virtual thunk to CityPDA_ShopUIBricks::~CityPDA_ShopUIBricks()
non-virtual thunk to CityPDA_ShopUIBricks::~CityPDA_ShopUIBricks()
CityPDA_ShopUIBricks::~CityPDA_ShopUIBricks()
non-virtual thunk to CityPDA_ShopUIBricks::~CityPDA_ShopUIBricks()
non-virtual thunk to CityPDA_ShopUIBricks::~CityPDA_ShopUIBricks()
CityPDA_ShopUIBricks::IsLockedForInput()
non-virtual thunk to CityPDA_ShopUIBricks::IsLockedForInput()
CityPDA_ShopUIBricks::IsBrickBoardLockedForInput()
non-virtual thunk to CityPDA_ShopUIBricks::IsBrickBoardLockedForInput()
CityPDA_ShopUIBricks::IsEnabled()
non-virtual thunk to CityPDA_ShopUIBricks::IsEnabled()
CityPDA_ShopUIBricks::GetFocusIndex()
non-virtual thunk to CityPDA_ShopUIBricks::GetFocusIndex()
CityPDA_ShopUIBricks::GetSelectedButton()
non-virtual thunk to CityPDA_ShopUIBricks::GetSelectedButton()
CityPDA_ShopUIBricks::GetSelectedBrickButton()
non-virtual thunk to CityPDA_ShopUIBricks::GetSelectedBrickButton()
CityPDA_ShopUIBricks::GetSelectedBrickIndex()
CityPDA_ShopUIBricks::SetSelectedButton(PDAButton*)
non-virtual thunk to CityPDA_ShopUIBricks::SetSelectedButton(PDAButton*)
CityPDA_ShopUIBricks::AttachUI(LegoLevelContainer&, FlashScene*, IShopUICallback*, ShopObjectViewer*)
CityPDA_ShopUIBricks::CreateBrickButton(FlashScene*, FlashElement*, int, int)
CityPDA_ShopUIBricks::BrickButtonClicked(PDABrickButton*, CityPDA_ShopEventData*)
CityPDA_ShopUIBricks::EventNotify(Event&, NuEventData&)
CityPDA_ShopUIBricks::CanAffordGoldBrick(int)
CityPDA_ShopUIBricks::CanAffordRedBrick(int)
CityPDA_ShopUIBricks::UpdatedBrickAffordability()
CityPDA_ShopUIBricks::GetBrickButtonAt(int, int)
CityPDA_ShopUIBricks::BuyBrick()
CityPDA_ShopUIBricks::RefreshCheatTicks()
CityPDA_ShopUIBricks::GetButtonFromIndex(int)
CityPDA_ShopUIBricks::Render()
CityPDA_ShopUIBricks::IsInTransitionState()
CityPDA_ShopUIBricks::SetEnabled(bool)
CityPDA_ShopUIBricks::Update(float)
CityPDA_ShopUIBricks::AutoSelectButton()
CityPDA_ShopUIBricks::SelectNextInDirection(int)
CityPDA_ShopUIBricks::GetSelectedIndex()
non-virtual thunk to CityPDA_ShopUIBricks::GetSelectedIndex()
CityPDA_ShopUIBricks::GetNextHighlightBrick(unsigned char)
CityPDA_ShopUIBricks::Show(eShopMode)
CityPDA_ShopUIBricks::Hide(bool)
ShopVehicleLogo::ShopVehicleLogo()
ShopVehicleLogo::~ShopVehicleLogo()
ShopVehicleLogo::Clear()
ShopVehicleLogo::AttachUI(FlashScene*)
ShopVehicleLogo::SetTargetTexture(NuSmartPtr<NuTexture, true> const&)
ShopVehicleLogo::UpdateVisibility()
ShopVehicleLogo::Update(float)
ShopVehicleLogo::RefreshFrom(CharInst const*)
ShopModelSpinPrompt::ShopModelSpinPrompt()
ShopModelSpinPrompt::~ShopModelSpinPrompt()
ShopModelSpinPrompt::Reset()
ShopModelSpinPrompt::AttachUI(FlashScene*)
ShopModelSpinPrompt::Update(float)
ShopModelSpinPrompt::SetEnabled(bool)
CityPDA_ShopUICharacter::CityPDA_ShopUICharacter(int)
CityPDA_ShopUICharacter::~CityPDA_ShopUICharacter()
non-virtual thunk to CityPDA_ShopUICharacter::~CityPDA_ShopUICharacter()
non-virtual thunk to CityPDA_ShopUICharacter::~CityPDA_ShopUICharacter()
CityPDA_ShopUICharacter::~CityPDA_ShopUICharacter()
non-virtual thunk to CityPDA_ShopUICharacter::~CityPDA_ShopUICharacter()
non-virtual thunk to CityPDA_ShopUICharacter::~CityPDA_ShopUICharacter()
CityPDA_ShopUICharacter::SetSelectedCategoryId(short)
CityPDA_ShopUICharacter::GetSelectedMasterCollectionIndex()
CityPDA_ShopUICharacter::GetCharacterButtonAt(int, int)
CityPDA_ShopUICharacter::AttachUI(LegoLevelContainer&, FlashScene*, IShopUICallback*, ShopObjectViewer*)
CityPDA_ShopUICharacter::CreateCharacterButton(FlashScene*, FlashElement*, int, int)
CityPDA_ShopUICharacter::CreateColourBrickButton(FlashScene*, FlashElement*, int, int)
CityPDA_ShopUICharacter::UpdateButtonColumnSelection(bool, PDACharcaterButton*)
CityPDA_ShopUICharacter::GetPDAButtonFromCharId(short)
CityPDA_ShopUICharacter::UpdateVehicleLogo(CharInst*)
CityPDA_ShopUICharacter::SetDisguise()
CityPDA_ShopUICharacter::PlayCutscene()
CityPDA_ShopUICharacter::BuyCharacter()
CityPDA_ShopUICharacter::RequestBuySilhouetteVisible(bool, bool)
CityPDA_ShopUICharacter::HideArrowButtons()
CityPDA_ShopUICharacter::EventNotify(Event&, NuEventData&)
CityPDA_ShopUICharacter::CharacterButtonClicked(int, int, PDACharcaterButton*, CityPDA_ShopEventData*)
CityPDA_ShopUICharacter::UpdateBrickSelectonInBoard(bool, PDAButton*, bool)
CityPDA_ShopUICharacter::HideNewItemAvailable(short)
CityPDA_ShopUICharacter::UpdateCharacterSelectonInBoard(bool, PDAButton*, bool)
CityPDA_ShopUICharacter::HighlightSelectedCharacter(PDAButton*)
CityPDA_ShopUICharacter::GetPlayerChar()
CityPDA_ShopUICharacter::UpdateSweepProximity()
CityPDA_ShopUICharacter::SetPreSelectedCharacter(int*, short)
CityPDA_ShopUICharacter::GetButtonForCharacterCollectionIndex(short)
CityPDA_ShopUICharacter::GetCategoryCount()
CityPDA_ShopUICharacter::GetMasterIndexForBrickIndex(short)
CityPDA_ShopUICharacter::GetCharacterButtonForMasterCollectionIndex(short)
CityPDA_ShopUICharacter::GetNextHighlightCharacter(unsigned char)
CityPDA_ShopUICharacter::SetEnabled(bool)
CityPDA_ShopUICharacter::UpdateBuySilhouetteVisibility(bool)
CityPDA_ShopUICharacter::SetBuySilhouetteAllowed(bool)
CityPDA_ShopUICharacter::SetBuySilhouetteVisibleInternal(bool, bool)
CityPDA_ShopUICharacter::IsPushingLimits(int, int, int)
CityPDA_ShopUICharacter::Update(float)
CityPDA_ShopUICharacter::IsLockedForInput()
non-virtual thunk to CityPDA_ShopUICharacter::IsLockedForInput()
CityPDA_ShopUICharacter::GetFocusIndex()
non-virtual thunk to CityPDA_ShopUICharacter::GetFocusIndex()
CityPDA_ShopUICharacter::GetSelectedButton()
non-virtual thunk to CityPDA_ShopUICharacter::GetSelectedButton()
CityPDA_ShopUICharacter::GetSelectedBrickButton()
non-virtual thunk to CityPDA_ShopUICharacter::GetSelectedBrickButton()
CityPDA_ShopUICharacter::SetSelectedButton(PDAButton*)
non-virtual thunk to CityPDA_ShopUICharacter::SetSelectedButton(PDAButton*)
CityPDA_ShopUICharacter::IsBrickBoardLockedForInput()
non-virtual thunk to CityPDA_ShopUICharacter::IsBrickBoardLockedForInput()
CityPDA_ShopUICharacter::Render()
CityPDA_ShopUICharacter::ShowColourBricks()
CityPDA_ShopUICharacter::HideColourBricks()
CityPDA_ShopUICharacter::SetVehicleSelectTitle()
CityPDA_ShopUICharacter::SetVehicleColourSelectTitle()
CityPDA_ShopUICharacter::Show(bool, eShopMode, short, short)
CityPDA_ShopUICharacter::Hide(bool)
CityPDA_ShopUICharacter::IsInTransitionState()
CityPDA_ShopUICharacter::IsEnabled()
non-virtual thunk to CityPDA_ShopUICharacter::IsEnabled()
CityPDA_DisguiseBoothCharacterWheel::IsBrickBoardLockedForInput()
CityPDA_DisguiseBoothCharacterWheel::GetSelectedBrickButton()
CityPDA_DisguiseBoothCharacterWheel::GetSelectedIndex()
CityPDA_DisguiseBoothCharacterWheel::GetShopMode()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::GetSelectedBrickButton()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::IsBrickBoardLockedForInput()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::GetSelectedIndex()
non-virtual thunk to CityPDA_DisguiseBoothCharacterWheel::GetShopMode()
CityPDA_ShopUICategory::IsBrickBoardLockedForInput()
CityPDA_ShopUICategory::GetSelectedIndex()
CityPDA_ShopUICategory::GetShopMode()
non-virtual thunk to CityPDA_ShopUICategory::IsBrickBoardLockedForInput()
non-virtual thunk to CityPDA_ShopUICategory::GetSelectedIndex()
non-virtual thunk to CityPDA_ShopUICategory::GetShopMode()
CityPDA_ShopUIBricks::GetShopMode()
non-virtual thunk to CityPDA_ShopUIBricks::GetShopMode()
CityPDA_ShopUICharacter::GetSelectedIndex()
CityPDA_ShopUICharacter::GetShopMode()
non-virtual thunk to CityPDA_ShopUICharacter::GetSelectedIndex()
non-virtual thunk to CityPDA_ShopUICharacter::GetShopMode()
CityPDA_ShopEventData::~CityPDA_ShopEventData()
NuEventData::~NuEventData()
LegoCityCharacters::DisguiseChangedEventData::~DisguiseChangedEventData()
CutsceneSeedInfo::VisualInfo::VisualInfo(CutsceneSeedInfo::VisualInfo const&)
CMList<char const*>::Append(char const* const&, CMList<char const*>::ListLink*)
CutsceneSeedInfo::VisualInfo::~VisualInfo()
CategoryItemSlot::CategoryItemSlot(SlidingList&, PDAButton*)
CategoryItemSlot::~CategoryItemSlot()
CategoryItemSlot::~CategoryItemSlot()
CategoryItemSlot::GetPos() const
CategoryItemSlot::SetPos(float)
CategoryItemSlot::GetOpacity() const
CategoryItemSlot::SetOpacity(float)
CategoryItemSlot::GetScale() const
CategoryItemSlot::SetScale(float, float)
CategoryItemSlot::SetScale(float)
CategoryItemSlot::SetPDAButtonsPtr(PDAButton*)
CategoryItemSlot::GetPDAButtonPtr()
CategoryItemSlot::Render(bool)
CategorySlidingListController::CategorySlidingListController()
CategorySlidingListController::UpdateMotion(float, SlidingListController::Motion&, float)
CategoryList::CategoryList(PDAShopButton**, FlashElement*, int)
CategoryList::~CategoryList()
non-virtual thunk to CategoryList::~CategoryList()
CategoryList::~CategoryList()
non-virtual thunk to CategoryList::~CategoryList()
CategoryList::HitTest(DRCTouch const&)
non-virtual thunk to CategoryList::HitTest(DRCTouch const&)
CategoryList::OnPress(DRCTouch const&)
non-virtual thunk to CategoryList::OnPress(DRCTouch const&)
CategoryList::OnRelease(DRCTouch const&)
non-virtual thunk to CategoryList::OnRelease(DRCTouch const&)
CategoryList::OnDrag(DRCTouch const&)
non-virtual thunk to CategoryList::OnDrag(DRCTouch const&)
CategoryList::UpdateSlotContent(CategoryItemSlot*)
CategoryList::GetUnlockedItemCount(int)
CategoryList::RefreshSlotContent(SlidingListSlot*, int, int)
CategoryList::GetCollectedItemCount(PDAShopButton*)
CategoryList::GetUnlockedItemCount(PDAShopButton*)
CategoryList::GetCollectedItemCount(int)
CategoryList::UpdateLockedStatus()
CategoryList::RefreshSlotTransforms(SlidingListSlot*)
CategoryList::CreateSlotInstance(int)
CategoryList::SetEnabled(bool)
CategoryList::ReloadCategoryList(eShopMode, eVehicleDropPoint, int, bool)
CategoryList::SetFocusIndex(int)
CategoryList::Update(int, float, float)
CategoryList::Render()
CategoryList::GetItemSlotForItemIndex(int)
CategoryList::GetFocusIndex()
CharacterItemSlot::CharacterItemSlot(SlidingList&)
CharacterItemSlot::~CharacterItemSlot()
CharacterItemSlot::~CharacterItemSlot()
CharacterItemSlot::GetPos() const
CharacterItemSlot::SetPos(float)
CharacterItemSlot::GetOpacity() const
CharacterItemSlot::SetOpacity(float)
CharacterItemSlot::SetSlotColumnIndex(int)
CharacterItemSlot::GetSlotColumnIndex()
CharacterItemSlot::GetIconScale() const
CharacterItemSlot::SetIconScale(float, float)
CharacterItemSlot::SetIconScale(float)
CharacterItemSlot::SetPDAButtonsColPtr(PDAButton**)
CharacterItemSlot::Render(bool)
CharacterSlidingListController::CharacterSlidingListController()
CharacterSlidingListController::UpdateMotion(float, SlidingListController::Motion&, float)
CharacterList::CharacterList(FlashScene*, FlashElement*, CityPDA_ShopUICharacter*)
CharacterList::~CharacterList()
non-virtual thunk to CharacterList::~CharacterList()
CharacterList::~CharacterList()
non-virtual thunk to CharacterList::~CharacterList()
CharacterList::ReloadCharacterList(int, eShopMode, short)
CharacterList::EmptyCharacterBoard()
CharacterList::GetListState()
CharacterList::IsEnabled()
CharacterList::SetEnabled(bool)
CharacterList::HitTest(DRCTouch const&)
non-virtual thunk to CharacterList::HitTest(DRCTouch const&)
CharacterList::SetFocus(int)
CharacterList::OnPress(DRCTouch const&)
non-virtual thunk to CharacterList::OnPress(DRCTouch const&)
CharacterList::OnRelease(DRCTouch const&)
non-virtual thunk to CharacterList::OnRelease(DRCTouch const&)
CharacterList::OnDrag(DRCTouch const&)
non-virtual thunk to CharacterList::OnDrag(DRCTouch const&)
CharacterList::SetSelectedCategoryId(short)
CharacterList::GetMasterCollectionIndexForVehicle(short)
CharacterList::GetMasterCollectionIndexForCharacter(short)
CharacterList::GetUnlockedVehicleCount()
CharacterList::GetUnlockedCharacterCount()
CharacterList::UpdateAffordAbillity()
CharacterList::UpdateSlotContent(CharacterItemSlot*, int, int, int)
CharacterList::NewRefreshSlotContent(SlidingListSlot*, int, int)
CharacterList::RefreshSlotContent(SlidingListSlot*, int, int)
CharacterList::DecreaseFocusIndex()
CharacterList::IncreaseFocusIndex()
CharacterList::RefreshSlotTransforms(SlidingListSlot*)
CharacterList::CreateSlotInstance(int)
CharacterList::SetFocusIndex(int, bool, int)
CharacterList::SetSlideTarget(float, bool, int)
CharacterList::RefreshAll()
CharacterList::ListControllerActive()
CharacterList::Update(float)
CharacterList::Render()
CategorySlidingListController::~CategorySlidingListController()
CharacterSlidingListController::~CharacterSlidingListController()
CityPDA_TrainDriver::CityPDA_TrainDriver(int)
CityPDA_TrainDriver::~CityPDA_TrainDriver()
CityPDA_TrainDriver::~CityPDA_TrainDriver()
CityPDA_TrainDriver::Prepare(FlashScene*)
CityPDA_TrainDriver::AddTouchTargets(TouchTargetList&)
CityPDA_TrainDriver::Reset()
CityPDA_TrainDriver::EventNotify(Event&, NuEventData&)
CityPDA_TrainDriver::ResetItem(int)
CityPDA_TrainDriver::SelectItem(int)
CityPDA_TrainDriver::HighlightItem(int, bool)
CityPDA_TrainDriver::Update(float)
CityPDA_TrainDriver::Show(bool)
CityPDA_TrainDriver::CanShow() const
CityPDA_TrainDriver::Activate(GizSwitch*)
ColourBrickItemSlot::ColourBrickItemSlot(SlidingList&, int)
ColourBrickItemSlot::~ColourBrickItemSlot()
ColourBrickItemSlot::~ColourBrickItemSlot()
ColourBrickItemSlot::GetPos() const
ColourBrickItemSlot::SetPos(float)
ColourBrickItemSlot::GetOpacity() const
ColourBrickItemSlot::SetOpacity(float)
ColourBrickItemSlot::GetScale() const
ColourBrickItemSlot::SetScale(float, float)
ColourBrickItemSlot::SetScale(float)
ColourBrickItemSlot::Render(bool)
ColourBrickItemSlot::GetSlotColumnIndex()
ColourBrickItemSlot::SetSlotColumnIndex(int)
ColourBrickSlidingListController::ColourBrickSlidingListController()
ColourBrickSlidingListController::UpdateMotion(float, SlidingListController::Motion&, float)
ColourBrickList::ColourBrickList(FlashElement*, CityPDA_ShopUICharacter*)
ColourBrickList::~ColourBrickList()
non-virtual thunk to ColourBrickList::~ColourBrickList()
ColourBrickList::~ColourBrickList()
non-virtual thunk to ColourBrickList::~ColourBrickList()
ColourBrickList::HitTest(DRCTouch const&)
non-virtual thunk to ColourBrickList::HitTest(DRCTouch const&)
ColourBrickList::OnPress(DRCTouch const&)
non-virtual thunk to ColourBrickList::OnPress(DRCTouch const&)
ColourBrickList::OnRelease(DRCTouch const&)
non-virtual thunk to ColourBrickList::OnRelease(DRCTouch const&)
ColourBrickList::OnDrag(DRCTouch const&)
non-virtual thunk to ColourBrickList::OnDrag(DRCTouch const&)
ColourBrickList::RefreshSlotContent(SlidingListSlot*, int, int)
ColourBrickList::RefreshSlotTransforms(SlidingListSlot*)
ColourBrickList::CreateSlotInstance(int)
ColourBrickList::SetEnabled(bool)
ColourBrickList::IsEnabled()
ColourBrickList::GetListState()
ColourBrickList::Update(float)
ColourBrickList::Render()
ColourBrickList::SetSlideTarget(float, bool, int)
ColourBrickList::GetFocusIndex()
ColourBrickList::SetFocusIndex(int)
ColourBrickList::ListControllerActive()
ColourBrickList::DecreaseFocusIndex()
ColourBrickList::IncreaseFocusIndex()
ColourBrickSlidingListController::~ColourBrickSlidingListController()
PDABrickButton::PDABrickButton(FlashElement*, FlashElement*)
PDABrickButton::~PDABrickButton()
PDABrickButton::~PDABrickButton()
PDABrickButton::AssignFlash(FlashScene*, FlashElement*)
PDABrickButton::SetHighlightVisible(bool)
PDABrickButton::HitTest(DRCTouch const&)
PDABrickButton::SetContainerObject(IShopPDAButtonContainer*)
PDABrickButton::NotifyClickEnd(int)
PDABrickButton::OnPress(DRCTouch const&)
PDABrickButton::OnRelease(DRCTouch const&)
PDABrickButton::OnTap(DRCTouch const&, int)
PDABrickButton::OnTapSeriesEnd(DRCTouch const&, int)
PDABrickButton::OnHold(DRCTouch const&)
PDABrickButton::OnHoldRelease(DRCTouch const&)
PDABrickButton::OnDrag(DRCTouch const&)
PDABrickButton::SetTickActive(bool, bool)
PDABrickButton::SetIndex(int)
PDABrickButton::GetIndex()
PDABrickButton::SetBorderColour(unsigned int)
PDABrickButton::SetIconColour(unsigned int)
PDABrickButton::SetHighlightActive(bool)
PDABrickButton::UpdateSelectionAnims()
PDABrickButton::SetSelectionAnims(bool, bool)
PDABrickButton::GetColumnIndex()
PDABrickButton::GetRowIndex()
PDABrickButton::EvaluateSelection()
PDABrickButton::SetLocked(bool)
PDABrickButton::SetAvailableSized(bool)
PDABrickButton::SetPurchased()
PDABrickButton::SetAffordable(bool)
PDABrickButton::SetVisible(bool)
PDABrickButton::IsVisible()
BrickItemSlot::BrickItemSlot(SlidingList&, int)
BrickItemSlot::~BrickItemSlot()
BrickItemSlot::~BrickItemSlot()
BrickItemSlot::GetPos() const
BrickItemSlot::SetPos(float)
BrickItemSlot::GetOpacity() const
BrickItemSlot::SetOpacity(float)
BrickItemSlot::GetScale() const
BrickItemSlot::SetScale(float, float)
BrickItemSlot::SetScale(float)
BrickItemSlot::Render(CityPDA_ShopUIBricks&, bool)
BrickItemSlot::GetSlotColumnIndex()
BrickItemSlot::SetSlotColumnIndex(int)
BrickSlidingListController::BrickSlidingListController()
BrickSlidingListController::UpdateMotion(float, SlidingListController::Motion&, float)
BrickList::BrickList(CityPDA_ShopUIBricks&, FlashElement*)
BrickList::~BrickList()
non-virtual thunk to BrickList::~BrickList()
BrickList::~BrickList()
non-virtual thunk to BrickList::~BrickList()
BrickList::HitTest(DRCTouch const&)
non-virtual thunk to BrickList::HitTest(DRCTouch const&)
BrickList::OnPress(DRCTouch const&)
non-virtual thunk to BrickList::OnPress(DRCTouch const&)
BrickList::OnRelease(DRCTouch const&)
non-virtual thunk to BrickList::OnRelease(DRCTouch const&)
BrickList::OnDrag(DRCTouch const&)
non-virtual thunk to BrickList::OnDrag(DRCTouch const&)
BrickList::ReloadBrickList(int, eShopMode)
BrickList::EmptyBoard()
BrickList::RefreshSlotContent(SlidingListSlot*, int, int)
BrickList::UpdateSlotContent(BrickItemSlot*, int, int, int)
BrickList::RefreshSlotTransforms(SlidingListSlot*)
BrickList::CreateSlotInstance(int)
BrickList::SetEnabled(bool)
BrickList::IsEnabled()
BrickList::GetListState()
BrickList::Update(float)
BrickList::Render()
BrickList::SetSlideTarget(float, bool, int)
BrickList::RefreshAll()
BrickList::GetFocusIndex()
BrickList::SetFocusIndex(int)
BrickList::ListControllerActive()
BrickList::DecreaseFocusIndex()
BrickList::IncreaseFocusIndex()
BrickSlidingListController::~BrickSlidingListController()
CityPDA_StatsBar::CityPDA_StatsBar(UIMap&, int)
CityPDA_StatsBar::~CityPDA_StatsBar()
CityPDA_StatsBar::InitFromElement(FlashScene*, FlashElement*)
CityPDA_StatsBar::Update()
CityPDA_StatsBar::Show()
CityPDA_StatsBar::Hide()
CityPDA_StatsBar::UpdateStatsForPlayer(int)
CityPDA_StatsBar::UpdateAreaPositionTo(int)
CityPDA_StatsBar::GetMapCurrentDistrict()
CityPDA_StatsBar::UpdateAreaPositionTo(VuVec const&)
CityPDA_StatsBar::ClearData()
CityPDA_StatsBar::SetStatsMode(CityPDA_StatsBar::eStatsMode)
CityPDA_StatsBar::GetMapCurrentPosition(VuVec&)
CityPDA_StatsBar::GetDistrictShowing()
CityPDA_MapMenu::CityPDA_MapMenu(UIPlayerMap&, int)
CityPDA_MapMenu::~CityPDA_MapMenu()
CityPDA_MapMenu::DestroyStuff()
non-virtual thunk to CityPDA_MapMenu::~CityPDA_MapMenu()
CityPDA_MapMenu::~CityPDA_MapMenu()
non-virtual thunk to CityPDA_MapMenu::~CityPDA_MapMenu()
CityPDA_MapMenu::ShowMainMap(bool, CityPDA_MapMenu::eMode, bool, bool)
CityPDA_MapMenu::ShowTitleScreen(bool, char const*, NuSmartPtr<NuTexture, true>)
CityPDA_MapMenu::ShowNavigation(bool)
CityPDA_MapMenu::ShowButtons(bool)
CityPDA_MapMenu::ShowLevelStats(bool)
CityPDA_MapMenu::SetShoulderPrompts()
CityPDA_MapMenu::ShowLevelStatsBackButton(bool)
CityPDA_MapMenu::ShowLevelStatsInfoButton(bool)
CityPDA_MapMenu::KillLevelStatsInfoButton()
CityPDA_MapMenu::KillLevelStatsBackButton()
CityPDA_MapMenu::ShowStatsBar(bool)
CityPDA_MapMenu::ShowObjectiveBar(bool, bool)
CityPDA_MapMenu::Init_Internal()
CityPDA_MapMenu::LoadFocusRect(int, char const*)
CityPDA_MapMenu::FlashMenu::GetUIOverlay()
CityPDA_MapMenuHint::Hide(bool)
CityPDA_MapMenu::HideTitleScreenInstant()
CityPDA_MapMenu::GetLevelStatsControl()
CityPDA_MapMenu::GetSuperCounterInfo()
CityPDA_MapMenu::CreateStuff(LegoLevelContainer&)
CityPDA_BusyIcon::InitFromElement(FlashElement*)
CityPDA_MapMenuHint::InitFromElement(FlashElement*)
CityPDA_BusyIcon::Hide(bool)
CityPDA_MapMenu::OnEnterLevel(LegoLevelContainer&)
CityPDA_MapMenu::OnExitLevel()
CityPDA_MapMenu::Update(float)
CityPDA_MapMenuHint::Update(UIMap const&)
CityPDA_BusyIcon::Update()
CityPDA_MapMenu::SuppressWorldRendering()
CityPDA_MapMenu::Render()
CityPDA_MapMenu::SetFocusArea(int)
CityPDA_MapMenu::EventNotify(Event&, NuEventData&)
CityPDA_MapMenu::SetButtonsEnabled(bool)
CityPDA_MapMenu::FlashMenu::FlashMenu(int)
CityPDA_MapMenuHint::CityPDA_MapMenuHint()
CityPDA_MapMenuHint::SetWorldPosition(UIMap const&, VuVec const&)
CityPDA_MapMenuHint::Show()
CityPDA_MapMenuHint::SetPositionPercent(VuVec const&)
CityPDA_MapMenuHint::SetPosition(VuVec const&)
CityPDA_MapMenuHint::SetAngleDegrees(float)
SAction_UI_Map_ShowHintArrow::Exec(ScriptContext&)
DoTransform(ScriptContext&, int, int)
SAction_UI_Map_TransformHintArrow::Exec(ScriptContext&)
SAction_UI_Map_TransformHintArrow_PlayerSpecific::Exec(ScriptContext&)
SAction_UI_Map_TransformHintArrow::GetInputs(SCmdParams&) const
SAction_UI_Map_TransformHintArrow_PlayerSpecific::GetInputs(SCmdParams&) const
SAction_UI_Timer_SetLoudTick::GetInputs(SCmdParams&) const
SAction_UI_Timer_SetLoudTick::Exec(ScriptContext&)
CityPDA_BusyIcon::CityPDA_BusyIcon()
CityPDA_BusyIcon::SetEnabled(bool)
CityPDA_BusyIcon::Show()
CityPDA_BusyIcon::IsShowing()
SAction_UI_PDA_ShowBusyIcon::Exec(ScriptContext&)
SAction_UI_PDA_DisablePlayerInput::Exec(ScriptContext&)
SAction_UI_PlayerUsingFastTravel::Exec(ScriptContext&)
SAction_UI_Map_StartTutorial::Exec(ScriptContext&)
SAction_UI_Map_EndTutorial::Exec(ScriptContext&)
SAction_UI_Map_EnableControls::Exec(ScriptContext&)
SAction_UI_Map_DisableControls::Exec(ScriptContext&)
SAction_UI_Map_Show::Exec(ScriptContext&)
SAction_UI_Map_ShowForFastTravelTutorial::Exec(ScriptContext&)
SAction_UI_Map_Hide::Exec(ScriptContext&)
SAction_UI_Map_IsActive::Exec(ScriptContext&)
SAction_UI_Map_TransformHintArrow::~SAction_UI_Map_TransformHintArrow()
SAction_UI_Map_TransformHintArrow::GetName() const
SAction_UI_Map_TransformHintArrow::GetOutputs(SCmdParams&) const
SAction_UI_Map_TransformHintArrow_PlayerSpecific::~SAction_UI_Map_TransformHintArrow_PlayerSpecific()
SAction_UI_Map_TransformHintArrow_PlayerSpecific::GetName() const
SAction_UI_Map_TransformHintArrow_PlayerSpecific::GetOutputs(SCmdParams&) const
SAction_UI_Timer_SetLoudTick::~SAction_UI_Timer_SetLoudTick()
SAction_UI_Timer_SetLoudTick::GetName() const
SAction_UI_Timer_SetLoudTick::GetOutputs(SCmdParams&) const
SAction_UI_Map_ShowHintArrow::~SAction_UI_Map_ShowHintArrow()
SAction_UI_Map_ShowHintArrow::GetName() const
SAction_UI_Map_ShowHintArrow::GetInputs(SCmdParams&) const
SAction_UI_Map_ShowHintArrow::GetOutputs(SCmdParams&) const
SAction_UI_PDA_ShowBusyIcon::~SAction_UI_PDA_ShowBusyIcon()
SAction_UI_PDA_ShowBusyIcon::GetName() const
SAction_UI_PDA_ShowBusyIcon::GetInputs(SCmdParams&) const
SAction_UI_PDA_ShowBusyIcon::GetOutputs(SCmdParams&) const
SAction_UI_PDA_DisablePlayerInput::~SAction_UI_PDA_DisablePlayerInput()
SAction_UI_PDA_DisablePlayerInput::GetName() const
SAction_UI_PDA_DisablePlayerInput::GetInputs(SCmdParams&) const
SAction_UI_PDA_DisablePlayerInput::GetOutputs(SCmdParams&) const
SAction_UI_PlayerUsingFastTravel::~SAction_UI_PlayerUsingFastTravel()
SAction_UI_PlayerUsingFastTravel::GetName() const
SAction_UI_PlayerUsingFastTravel::GetInputs(SCmdParams&) const
SAction_UI_PlayerUsingFastTravel::GetOutputs(SCmdParams&) const
SAction_UI_Map_StartTutorial::~SAction_UI_Map_StartTutorial()
SAction_UI_Map_StartTutorial::GetName() const
SAction_UI_Map_StartTutorial::GetInputs(SCmdParams&) const
SAction_UI_Map_StartTutorial::GetOutputs(SCmdParams&) const
SAction_UI_Map_EndTutorial::~SAction_UI_Map_EndTutorial()
SAction_UI_Map_EndTutorial::GetName() const
SAction_UI_Map_EndTutorial::GetInputs(SCmdParams&) const
SAction_UI_Map_EndTutorial::GetOutputs(SCmdParams&) const
SAction_UI_Map_EnableControls::~SAction_UI_Map_EnableControls()
SAction_UI_Map_EnableControls::GetName() const
SAction_UI_Map_EnableControls::GetInputs(SCmdParams&) const
SAction_UI_Map_EnableControls::GetOutputs(SCmdParams&) const
SAction_UI_Map_DisableControls::~SAction_UI_Map_DisableControls()
SAction_UI_Map_DisableControls::GetName() const
SAction_UI_Map_DisableControls::GetInputs(SCmdParams&) const
SAction_UI_Map_DisableControls::GetOutputs(SCmdParams&) const
SAction_UI_Map_Show::~SAction_UI_Map_Show()
SAction_UI_Map_Show::GetName() const
SAction_UI_Map_Show::GetInputs(SCmdParams&) const
SAction_UI_Map_Show::GetOutputs(SCmdParams&) const
SAction_UI_Map_ShowForFastTravelTutorial::~SAction_UI_Map_ShowForFastTravelTutorial()
SAction_UI_Map_ShowForFastTravelTutorial::GetName() const
SAction_UI_Map_ShowForFastTravelTutorial::GetInputs(SCmdParams&) const
SAction_UI_Map_ShowForFastTravelTutorial::GetOutputs(SCmdParams&) const
SAction_UI_Map_Hide::~SAction_UI_Map_Hide()
SAction_UI_Map_Hide::GetName() const
SAction_UI_Map_Hide::GetInputs(SCmdParams&) const
SAction_UI_Map_Hide::GetOutputs(SCmdParams&) const
SAction_UI_Map_IsActive::~SAction_UI_Map_IsActive()
SAction_UI_Map_IsActive::GetName() const
SAction_UI_Map_IsActive::GetInputs(SCmdParams&) const
SAction_UI_Map_IsActive::GetOutputs(SCmdParams&) const
DummyRenderInterceptor::~DummyRenderInterceptor()
DummyRenderInterceptor::OnInterceptedRender(NURENDERSTAGE, RenderCallbackProxy&)
CityPDA_PinsMenuModes::CityPDA_PinsMenuModes(int)
CityPDA_PinsMenuModes::~CityPDA_PinsMenuModes()
CityPDA_PinsMenuModes::~CityPDA_PinsMenuModes()
CityPDA_PinsMenuModes::Init()
CityPDA_PinsMenuModes::Reset()
CityPDA_PinsMenuModes::EventNotify(Event&, NuEventData&)
CityPDA_PinsMenuModes::GetMenuModeFromPinType(UIMapPinObject const&)
CityPDA_PinsMenuModes::OnEnterMode(CityPDA_PinsMenuModes::eMode, PDAContextMenu&, UIMapPinObject const&)
CodeBreakerButton::CodeBreakerButton()
CodeBreakerButton::~CodeBreakerButton()
CodeBreakerButton::~CodeBreakerButton()
CodeBreakerButton::GetcodeLetter()
CodeBreakerButton::SetCodeLetterIndex(int)
CodeBreakerButton::UpdateCodeLetter()
CodeBreakerButton::SetCodeLetter(char)
CodeBreakerButton::SetNextLetter()
CityPDA_CodeBreakerInterface::IsInMissionCodeMode()
CodeBreakerButton::SetEnabled(bool)
CodeBreakerButton::AdvanceCodeLetter(bool)
CodeBreakerButton::AssignFlash(FlashScene*, int, CityPDA_CodeBreakerInterface*)
CodeBreakerButton::OnPress(DRCTouch const&)
CodeBreakerButton::OnRelease(DRCTouch const&)
CodeBreakerButton::OnTap(DRCTouch const&, int)
CodeBreakerButton::OnTapSeriesEnd(DRCTouch const&, int)
CodeBreakerButton::OnHold(DRCTouch const&)
CodeBreakerButton::OnHoldRelease(DRCTouch const&)
CodeBreakerButton::OnDrag(DRCTouch const&)
CodeBreakerButton::NotifyClickEnd(int)
CodeBreakerButton::HitTest(DRCTouch const&)
CodeBreakerButton::SetSelected(bool)
CityPDA_CodeBreaker::CityPDA_CodeBreaker(CityPDA_Mutex*)
CityPDA_CodeBreaker::~CityPDA_CodeBreaker()
CityPDA_CodeBreakerInterface::DetachUI()
CityPDA_CodeBreaker::Render(LegoLevelContainer&, LevelView*, ClassManager::eRenderingPriority)
CityPDA_CodeBreakerInterface::Render(LegoLevelContainer&, LevelView*, ClassManager::eRenderingPriority)
CityPDA_CodeBreaker::Update(float)
CityPDA_CodeBreakerInterface::Update(float)
CityPDA_CodeBreaker::OnEnterLevel(LegoLevelContainer&)
CityPDA_CodeBreakerInterface::AttachUI(LegoLevelContainer&)
CityPDA_CodeBreaker::OnExitLevel(LegoLevelContainer&)
CityPDA_CodeBreaker::IsActive()
CityPDA_CodeBreaker::SetActive(bool, bool)
CityPDA_CodeBreakerInterface::SetEnabled(bool, bool)
CityPDA_CodeBreaker::GetTouchTargetLayer()
CityPDA_CodeBreakerInterface::CityPDA_CodeBreakerInterface()
CityPDA_CodeBreakerInterface::~CityPDA_CodeBreakerInterface()
CityPDA_CodeBreakerInterface::ClearStringAssignments()
non-virtual thunk to CityPDA_CodeBreakerInterface::~CityPDA_CodeBreakerInterface()
CityPDA_CodeBreakerInterface::~CityPDA_CodeBreakerInterface()
non-virtual thunk to CityPDA_CodeBreakerInterface::~CityPDA_CodeBreakerInterface()
CityPDA_CodeBreakerInterface::IsEnabled()
CityPDA_CodeBreakerInterface::EnterMissionCode(char const*)
CityPDA_CodeBreakerInterface::EnterGoldBrickCode(char*)
CityPDA_CodeBreakerInterface::TestMissionCode(void*)
CityPDA_CodeBreakerInterface::EventNotify(Event&, NuEventData&)
CityPDA_CodeBreakerInterface::OnEnterLevel(LegoLevelContainer&)
CityPDA_CodeBreakerInterface::OnExitLevel(LegoLevelContainer&)
CityPDA_CodeBreakerInterface::HitTest(DRCTouch const&)
non-virtual thunk to CityPDA_CodeBreakerInterface::HitTest(DRCTouch const&)
ExtrasCodeHandler_BeginBgCheck(char const*)
ExtrasCodeHandler_AcknowledgeBgUnlock(int)
CodeEventData::~CodeEventData()
PDAShopPlayButton::PDAShopPlayButton()
PDAShopPlayButton::~PDAShopPlayButton()
PDAShopPlayButton::~PDAShopPlayButton()
PDAShopPlayButton::OnPress(DRCTouch const&)
PDAShopPlayButton::OnRelease(DRCTouch const&)
PDAShopPlayButton::OnDrag(DRCTouch const&)
PDAShopPlayButton::OnTap(DRCTouch const&, int)
PDAShopPlayButton::OnHold(DRCTouch const&)
PDAShopPlayButton::NotifyClickEnd(int)
PDAShopPlayButton::HitTest(DRCTouch const&)
PDAShopPlayButton::SetEnabled(bool)
PDAShopPlayButton::AssignFlash(FlashScene*)
PDAShopPlayButton::IsEnabled()
PDAShopControlButton::PDAShopControlButton(unsigned int)
PDAShopButton::PDAShopButton()
PDAShopButton::~PDAShopButton()
PDAShopControlButton::~PDAShopControlButton()
PDAShopControlButton::~PDAShopControlButton()
PDAShopControlButton::OnRelease(DRCTouch const&)
PDAShopButton::OnRelease(DRCTouch const&)
PDAShopControlButton::OnPress(DRCTouch const&)
PDAShopButton::OnPress(DRCTouch const&)
PDAShopControlButton::OnDrag(DRCTouch const&)
PDAShopButton::OnDrag(DRCTouch const&)
PDAShopControlButton::SetUsable(bool)
PDAShopControlButton::AssignFlash(FlashScene*, FlashElement*)
PDAShopButton::InitTextureReplacers(char const*)
PDAShopControlButton::SetPrompt(PDAShopControlButton::eButtonID)
PDAShopControlButton::SetPromptText(char const*)
PDAShopControlButton::SetText(char const*)
PDAShopControlButton::SetPulseOn()
PDAShopControlButton::SetPulseOff()
PDAShopControlButton::ClearString()
PDAShopButton::~PDAShopButton()
PDAShopButton::HitTest(DRCTouch const&)
PDAShopButton::GetId()
PDAShopButton::OnTap(DRCTouch const&, int)
PDAShopButton::OnTapSeriesEnd(DRCTouch const&, int)
PDAShopButton::OnHold(DRCTouch const&)
PDAShopButton::OnHoldRelease(DRCTouch const&)
PDAShopButton::NotifyClickEnd(int)
PDAShopButton::SetId(short)
PDAShopButton::GetMasterCollectionIndex()
PDAShopButton::SetMasterCollectionIndex(int)
PDAShopButton::GetIconElement()
PDAShopButton::SetContainerObject(IShopPDAButtonContainer*)
PDAShopButton::SetCommonTexture(int)
PDAShopArrowButton::PDAShopArrowButton()
PDAShopArrowButton::~PDAShopArrowButton()
PDAShopArrowButton::~PDAShopArrowButton()
PDAShopArrowButton::OnHoldRelease(DRCTouch const&)
PDAShopArrowButton::OnPress(DRCTouch const&)
PDAShopArrowButton::OnRelease(DRCTouch const&)
PDAShopArrowButton::OnDrag(DRCTouch const&)
PDAShopArrowButton::OnTap(DRCTouch const&, int)
PDAShopArrowButton::OnHold(DRCTouch const&)
PDAShopArrowButton::NotifyClickEnd(int)
PDAShopArrowButton::HitTest(DRCTouch const&)
PDAShopArrowButton::Update(float)
PDAShopArrowButton::SetEnabled(bool, bool)
PDAShopArrowButton::AssignFlash(FlashScene*)
PDAShopArrowButton::SetHitBox(FlashElement*)
PDAShopArrowButton::IsEnabled()
PDAShopArrowButton::SetVisible(bool)
CityPDAPhoto_Resize(void*, int, int, int, void*, int, int, int)
CityPDA_RenderFlashElement(FlashElement*, float)
CityPDA_SaveGamePhotosHeader::Reset()
CityPDA_Thumbnail::AttachUI(FlashScene*, int)
CityPDA_Thumbnail::DetachUI()
CityPDA_ThumbnailSlot::CityPDA_ThumbnailSlot(SlidingList&, int)
CityPDA_ThumbnailSlot::~CityPDA_ThumbnailSlot()
CityPDA_ThumbnailSlot::~CityPDA_ThumbnailSlot()
CityPDA_MainPhoto::CityPDA_MainPhoto(FlashGraph*, CityPDA_PhotoResourceHandler&)
CityPDA_MainPhoto::~CityPDA_MainPhoto()
CityPDA_PhotoResourceHandler::RequestResourceDeletion(CityPDA_PhotoResourceHandler::PhotoResourceData&)
CityPDA_MainPhoto::Update(float, LegoGamePad*)
CityPDA_MainPhoto::StartDelete()
CityPDA_MainPhoto::StopDelete()
CityPDA_MainPhoto::isDeleting()
CityPDA_MainPhoto::Render()
CityPDA_MainPhoto::RenderMainScreen()
CityPDA_MainPhoto::setNextPhoto(int, NuSmartPtr<NuTexture, true>)
CityPDA_ThumbnailList::CityPDA_ThumbnailList(FlashScene*, CityPDA_PhotoResourceHandler&)
CityPDA_ThumbnailList::~CityPDA_ThumbnailList()
CityPDA_ThumbnailList::~CityPDA_ThumbnailList()
CityPDA_ThumbnailList::CreateSlotInstance(int)
CityPDA_ThumbnailList::Refresh()
CityPDA_ThumbnailList::RefreshSlotContent(SlidingListSlot*, int, int)
CityPDA_ThumbnailList::RefreshSlotTransforms(SlidingListSlot*)
CityPDA_ThumbnailList::Update(float)
CityPDA_ThumbnailList::Render(float)
CityPDA_ThumbnailList::AnimateOn()
CityPDA_ThumbnailList::AnimateOff()
CityPDA_ThumbnailList::isVisible()
CityPDA_ThumbnailController::CityPDA_ThumbnailController(FlashScene*, CityPDA_PhotoResourceHandler&)
CityPDA_Button::myAttachUI(FlashScene*, char const*, char const*, char const*, char const*)
CityPDA_ThumbnailController::~CityPDA_ThumbnailController()
non-virtual thunk to CityPDA_ThumbnailController::~CityPDA_ThumbnailController()
CityPDA_ThumbnailController::~CityPDA_ThumbnailController()
non-virtual thunk to CityPDA_ThumbnailController::~CityPDA_ThumbnailController()
CityPDA_ThumbnailController::UpdateInput(float, LegoGamePad*)
CityPDA_Button::Update(float)
CityPDA_Button::IsClicked() const
CityPDA_Button::SetEnabled(bool)
CityPDA_ThumbnailController::Render()
CityPDA_ThumbnailController::Refresh()
CityPDA_ThumbnailController::HitTest(DRCTouch const&)
non-virtual thunk to CityPDA_ThumbnailController::HitTest(DRCTouch const&)
CityPDA_ThumbnailController::OnPress(DRCTouch const&)
non-virtual thunk to CityPDA_ThumbnailController::OnPress(DRCTouch const&)
CityPDA_ThumbnailController::OnRelease(DRCTouch const&)
non-virtual thunk to CityPDA_ThumbnailController::OnRelease(DRCTouch const&)
CityPDA_ThumbnailController::OnDrag(DRCTouch const&)
non-virtual thunk to CityPDA_ThumbnailController::OnDrag(DRCTouch const&)
CityPDA_ThumbnailController::GetSelectedPhoto()
CityPDA_ThumbnailController::GetSelectedThumbnailTid()
CityPDA_Button::CityPDA_Button(unsigned int, int)
CityPDA_Button::OnTap(DRCTouch const&, int)
CityPDA_PhotoAlbum::CityPDA_PhotoAlbum()
CityPDA_PhotoAlbum::~CityPDA_PhotoAlbum()
CityPDA_PhotoAlbum::~CityPDA_PhotoAlbum()
CityPDA_PhotoAlbum::load()
CityPDA_PhotoAlbum::unload()
CityPDA_PhotoAlbum::unloadLevel()
CityPDA_PhotoResourceHandler::ForceImmediateClear()
CityPDA_PhotoAlbum::start(CityPDA_Scanner*)
CityPDA_PhotoAlbum::stop()
CityPDA_PhotoAlbum::startAddPhoto(LegoCityPhotograph*, bool)
CityPDA_PhotoAlbum::enterState(CityPDA_PhotoAlbum::eState)
CityPDA_PhotoAlbum::savePhoto(int)
CityPDA_PhotoAlbum::startAlbum()
CityPDA_PhotoAlbum::clearMessage()
CityPDA_PhotoAlbum::showMessage(char const*, bool)
CityPDA_PhotoAlbum::showBusyIcon()
CityPDA_PhotoAlbum::hideBusyIcon()
CityPDA_PhotoAlbum::updateLevel(float)
CityPDA_PhotoResourceHandler::Update()
CityPDA_PhotoAlbum::updateCameraIcon(float, bool)
CityPDA_PhotoAlbum::updateProcessor(float)
CityPDA_PhotoAlbum::render(ClassManager::eRenderingPriority)
CityPDA_PhotoAlbum::renderMainScreen()
CityPDA_PhotoAlbum::renderCameraIcon(char const*)
CityPDA_PhotoAlbum::paused()
CityPDA_PhotoAlbum::GetSaveFileSize(int)
CityPDA_PhotoAlbum::EventNotify(Event&, NuEventData&)
CityPDA_PhotoResourceHandler::CityPDA_PhotoResourceHandler()
CityPDA_PhotoResourceHandler::~CityPDA_PhotoResourceHandler()
CityPDA_PhotoResourceHandler::DeleteAllRequests()
CityPDA_PhotoResourceHandler::DeleteResource(CityPDA_PhotoResourceHandler::PhotoResourceData&)
NuVector<CityPDA_PhotoResourceHandler::DeletionRequest>::Clear()
CityPDA_Button::~CityPDA_Button()
CityPDA_Button::AttachUI(FlashScene*)
NuVector<CityPDA_PhotoResourceHandler::DeletionRequest>::Reserve(unsigned int, bool)
CityPDA_ShopCutscenes::CityPDA_ShopCutscenes()
CityPDA_ShopCutscenes::~CityPDA_ShopCutscenes()
CityPDA_ShopCutscenes::Play(int)
CityPDA_ShopCutscenes::SetLevelContainer(LegoLevelContainer*)
CityPDA_ShopCutscenes::GetNoOfCutscenes()
CityPDA_ShopCutscenes::IsCutsceneUnlocked(int)
CityPDA_ShopCutscenes::GetCutsceneSeedAtIndex(int)
CityPDA_ShopCutscenes::GetCutsceneHandleAtIndex(int)
CityPDA_ShopCutscenes::InitTexturesForCutscene(sCutsceneTextures*)
CityPDA_ShopCutscenes::InitCutscenes()
CityPDA_ShopHintsSaveLoad::CityPDA_ShopHintsSaveLoad(char const*)
CityPDA_ShopHintsSaveLoad::~CityPDA_ShopHintsSaveLoad()
CityPDA_ShopHintsSaveLoad::~CityPDA_ShopHintsSaveLoad()
CityPDA_ShopHintsSaveLoad::GetTotalSizeInBytes()
CityPDA_ShopHintsSaveLoad::Reset()
CityPDA_ShopHintsSaveLoad::SaveSaveGame(EdStream&, int)
CityPDA_ShopHintsSaveLoad::FillInFromGameData()
CityPDA_ShopHintsSaveLoad::LoadSaveGame(EdStream&, int, int)
CityPDA_ShopHintsSaveLoad::InitNewGame()
PDAShopHintButton::PDAShopHintButton()
PDAShopHintButton::~PDAShopHintButton()
PDAShopHintButton::~PDAShopHintButton()
PDAShopHintButton::OnPress(DRCTouch const&)
PDAShopHintButton::OnRelease(DRCTouch const&)
PDAShopHintButton::OnDrag(DRCTouch const&)
PDAShopHintButton::OnTap(DRCTouch const&, int)
PDAShopHintButton::OnHold(DRCTouch const&)
PDAShopHintButton::NotifyClickEnd(int)
PDAShopHintButton::HitTest(DRCTouch const&)
PDAShopHintButton::SetEnabled(bool)
PDAShopHintButton::AssignFlash(FlashScene*)
PDAShopHintButton::IsEnabled()
CityPDA_ShopHints::CityPDA_ShopHints(int)
CityPDA_ShopHints::~CityPDA_ShopHints()
non-virtual thunk to CityPDA_ShopHints::~CityPDA_ShopHints()
CityPDA_ShopHints::~CityPDA_ShopHints()
non-virtual thunk to CityPDA_ShopHints::~CityPDA_ShopHints()
CityPDA_ShopHints::OnExitLevel()
CityPDA_ShopHints::AttachUI()
CityPDA_ShopHints::EventNotify(Event&, NuEventData&)
CityPDA_ShopHints::Hide()
non-virtual thunk to CityPDA_ShopHints::EventNotify(Event&, NuEventData&)
CityPDA_ShopHints::Update(float)
CityPDA_ShopHints::IsEnabled()
CityPDA_ShopHints::Show(eShopMode, eShopStates, bool, bool)
CityPDA_ShopHints::IsAnimating()
ShopModeEventData::~ShopModeEventData()
SAction_ShowLiftMenu::Exec(ScriptContext&)
CityPDA_LiftControl::Show(bool, int)
SAction_GetLiftButtonPressed::Exec(ScriptContext&)
CityPDA_LiftControl::GetSelectedFloor()
CityPDA_LiftControl::CityPDA_LiftControl(UIMap&, int)
CityPDA_LiftControl::~CityPDA_LiftControl()
CityPDA_LiftControl::~CityPDA_LiftControl()
CityPDA_LiftControl::Update(float)
CityPDA_LiftControl::HighlightFloor(int, bool)
CityPDA_LiftControl::CanShow() const
CityPDA_LiftControl::AddTouchTargets(TouchTargetList&)
CityPDA_LiftControl::Reset()
CityPDA_LiftControl::EventNotify(Event&, NuEventData&)
CityPDA_LiftControl::Prepare(FlashScene*)
SAction_ShowLiftMenu::~SAction_ShowLiftMenu()
SAction_ShowLiftMenu::GetName() const
SAction_ShowLiftMenu::GetInputs(SCmdParams&) const
SAction_ShowLiftMenu::GetOutputs(SCmdParams&) const
SAction_GetLiftButtonPressed::~SAction_GetLiftButtonPressed()
SAction_GetLiftButtonPressed::GetName() const
SAction_GetLiftButtonPressed::GetInputs(SCmdParams&) const
SAction_GetLiftButtonPressed::GetOutputs(SCmdParams&) const
CityPDA_Scanner_PadInput::CityPDA_Scanner_PadInput()
CityPDA_Scanner_PadInput::~CityPDA_Scanner_PadInput()
CityPDA_Scanner_PadInput::~CityPDA_Scanner_PadInput()
CityPDA_Scanner_PadInput::Reset(CityPDA_ScannerCore::CameraController&)
CityPDA_Scanner_PadInput::Update(CityPDA_ScannerCore::CameraController&, float)
CityPDA_Scanner_PadInput::IncrementAngleClamped(int, float)
CityPDA_Scanner_PadInput::IncrementAngleLooping(int, float)
CityPDA_ScannerCore::CameraController::InputSource::UpdateActivating(bool, float)
CityPDA_Scanner::CityPDA_Scanner(CityPDA_Mutex*)
CityPDA_Scanner::CreateInputControls()
CityPDA_Scanner::SetInputType(CityPDA_Scanner::eInput)
CityPDA_Scanner::~CityPDA_Scanner()
CityPDA_Scanner::DestroyInputControls()
CityPDA_Scanner::Release()
CityPDA_Scanner::InitOnce()
CityPDA_Scanner::SetDefaultFOVZoomRange(float, float)
CityPDA_Scanner::Init()
CityPDA_Scanner::CreateEnvironments()
CityPDA_Scanner::CreateProcessors()
CityPDA_Scanner::InitProcessors()
CityPDA_Scanner::GetLevelContainer()
CityPDA_Scanner::GetSceneCamera()
CityPDA_Scanner::SetActive(bool)
CityPDA_Scanner::ReleaseProcessors()
CityPDA_Scanner::DestroyProcessors()
CityPDA_Scanner::DestroyEnvironments()
CityPDA_Scanner::GetModeProcessor(CityPDA_Scanner::eMode) const
CityPDA_Scanner::FindModeProcessorWithId(int) const
CityPDA_Scanner::GetScanModeWithId(int) const
CityPDA_Scanner::GetState() const
CityPDA_Scanner::IsEnvironmentVisible() const
CityPDA_Scanner::SetScanMode(CityPDA_Scanner::eMode)
CityPDA_Scanner::IsActive() const
CityPDA_Scanner::GetScanMode() const
CityPDA_Scanner::GetInputType()
CityPDA_Scanner::GetMasterHud()
CityPDA_Scanner::RenderHud()
CityPDA_Scanner::GetActiveProcessor()
CityPDA_Scanner::BeginInitialising()
CityPDA_Scanner::BeginClosing()
CityPDA_Scanner::GetEnvironment()
CityPDA_Scanner::Hack_IsScanning()
CityPDA_Scanner::IsBeingDestroyed()
CityPDA_Scanner::SetWaitForConversation()
CityPDA_Scanner::SafeToAbort()
CityPDA_Scanner::RefreshSceneCamera()
CityPDA_Scanner::GetCameraController()
CityPDA_Scanner::UpdateInitialising(float)
CityPDA_Scanner::FinishInitialising()
CityPDA_Scanner::RenderInitialising()
CityPDA_Scanner::RegisterRenderingThings()
CityPDA_Scanner::FinishClosing()
CityPDA_Scanner::UpdateClosing(float)
CityPDA_Scanner::UnregisterRenderingThings()
CityPDA_Scanner::AccessButtonPressed(CityPDA_Scanner::eMode)
CityPDA_Scanner::IsPlayerAtLinkedSwitch()
CityPDA_Scanner::IsValidProcessor(int)
CityPDA_Scanner::ProcessorModeControlJobChanged(CityPDA_ScannerMode*)
CityPDA_Scanner::CreateProcessor(CityPDA_Scanner::eMode)
CityPDA_Scanner::CreateInputControl(CityPDA_Scanner::eInput)
CityPDA_Scanner::CreateEnvironment(CityPDA_ScannerMode::eWorld)
CityPDA_Scanner::PlayerHasMoved()
CityPDA_Scanner::UpdateCameraPipe(float)
CityPDA_Scanner::Update(float)
CityPDA_Scanner::GetSceneView()
CityPDA_Scanner::GetLocalScannableStatus()
CityPDA_Scanner::ShowBPrompt()
CityPDA_Scanner::IsPlayerInScanContext(MechCharacter*)
CityPDA_Scanner::Render(LevelView*, ClassManager::eRenderingPriority)
CityPDA_Scanner::GetFromActiveJobScriptContext(ScriptContext&)
CityPDA_Scanner::GetFromScriptContext(ScriptContext&, int)
CityPDA_Scanner::GetFromScriptContext(ScriptContext&, MechCharacter*)
CityPDA_Scanner::GetSwitchLinker()
CityPDA_Scanner::GetSourceControlSwitch()
BoolEventData<CityPDA_Scanner>::~BoolEventData()
CityPDA_ScannerCore::SceneCamera::SceneCamera()
CityPDA_ScannerCore::SceneCamera::~SceneCamera()
CityPDA_ScannerCore::SceneCamera::SetZoomRange(float, float)
CityPDA_ScannerCore::SceneCamera::SetZoomLevel(float)
CityPDA_ScannerCore::SceneCamera::GetZoomLevel() const
CityPDA_ScannerCore::SceneCamera::SetLevelContainer(LevelContainer*)
CityPDA_ScannerCore::SceneCamera::SetNuCamera(NuCamera const&)
CityPDA_ScannerCore::SceneCamera::SetNuCamera(NuCamera*, LevelContainer*)
CityPDA_ScannerCore::SceneCamera::GetNuCamera() const
CityPDA_ScannerCore::SceneCamera::GetLevelContainer() const
CityPDA_ScannerCore::SceneCamera::SetLookMatrix(VuMtx const&)
CityPDA_ScannerCore::SceneCamera::RefreshTargetCamera()
CityPDA_ScannerCore::SceneCamera::SetViewAspectRatio(float)
CityPDA_ScannerCore::SceneCamera::GetLookMatrix() const
CityPDA_ScannerCore::SceneCamera::GetPosition() const
CityPDA_ScannerCore::SceneCamera::GetDistanceToTarget(VuVec const&) const
CityPDA_ScannerCore::SceneCamera::GetHeading() const
CityPDA_ScannerCore::SceneCamera::RefreshTargetCamera(NuCamera&)
CityPDA_ScannerCore::SceneCamera::RequestMechCamera(int)
ClassManagerAccessor<MechCameraManager>::GetFromCreate(ILevelContainer const&)
CityPDA_ScannerCore::SceneCamera::SceneToNormalisedScreen(VuVec const&, VuVec&) const
CityPDA_ScannerCore::SceneCamera::IsPointBehind(VuVec const&) const
CityPDA_ScannerCore::SceneCamera::GetYFov() const
CityPDA_ScannerCore::SceneCamera::GetXFov() const
CityPDA_ScannerCore::SceneCamera::FocusTest::FocusTest(CityPDA_ScannerCore::SceneCamera const&, float)
CityPDA_ScannerCore::SceneCamera::FocusTest::~FocusTest()
CityPDA_ScannerCore::SceneCamera::FocusTest::CheckSphere(VuVec const&, float, float*)
CityPDA_ScannerCore::SceneView::SceneView()
CityPDA_ScannerCore::SceneView::~SceneView()
CityPDA_ScannerCore::SceneView::SetSize(float, float)
CityPDA_ScannerCore::SceneView::ConvertFromNormalisedScreenPos(float&, float&, bool) const
CityPDA_ScannerCore::SceneView::ScreenOffsetToAngularOffset(float&, float&, CityPDA_ScannerCore::SceneCamera const&) const
CityPDA_ScannerCore::SceneView::SetAbsScreenOffset(float)
CityPDA_ScannerCore::Placement::Placement()
CityPDA_ScannerCore::Placement::Placement(CityPDA_ScannerCore::Placement const&)
CityPDA_ScannerCore::Placement::Placement(VuVec const&, VuVec const&)
CityPDA_ScannerCore::Placement::CalculateFromPlayerCamera(int)
CityPDA_ScannerCore::Placement::SetPosition(VuVec const&)
CityPDA_ScannerCore::Placement::SetFocus(VuVec const&)
CityPDA_ScannerCore::Placement::GetPlayerCameraPlacement(int)
CityPDA_ScannerCore::Placement::FromYawAndPitch(VuVec const&, float, float)
CityPDA_ScannerCore::Placement::FromYawAndPitchAbovePlayer(int, float, float, float)
CityPDA_ScannerCore::Placement::GenerateMatrix(VuMtx&, bool)
CityPDA_ScannerCore::Placement::GetPosition() const
CityPDA_ScannerCore::Placement::GetFocus() const
CityPDA_ScannerCore::Placement::EnsureValid()
CityPDA_ScannerCore::CameraController::InputSource::InputSource(bool)
CityPDA_ScannerCore::CameraController::InputSource::~InputSource()
CityPDA_ScannerCore::CameraController::InputSource::~InputSource()
CityPDA_ScannerCore::CameraController::InputSource::SetPlayerIndex(int)
CityPDA_ScannerCore::CameraController::InputSource::GetPlayerIdx() const
CityPDA_ScannerCore::CameraController::InputSource::IgnoreBasePitch() const
CityPDA_ScannerCore::CameraController::InputSource::MarkAsActive()
CityPDA_ScannerCore::CameraController::InputSource::IsPadValid(LegoGamePad*)
CityPDA_ScannerCore::CameraController::FauxRecoil::FauxRecoil()
CityPDA_ScannerCore::CameraController::FauxRecoil::Trigger()
CityPDA_ScannerCore::CameraController::FauxRecoil::Update(float)
CityPDA_ScannerCore::CameraController::CameraController()
CityPDA_ScannerCore::CameraController::RefreshBaseMatrix()
CityPDA_ScannerCore::CameraController::~CameraController()
CityPDA_ScannerCore::CameraController::SetTargetCamera(CityPDA_ScannerCore::SceneCamera*)
CityPDA_ScannerCore::CameraController::GetTargetCamera()
CityPDA_ScannerCore::CameraController::Reset()
CityPDA_ScannerCore::CameraController::SetUserZoomLevel(float)
CityPDA_ScannerCore::CameraController::Update(float)
CityPDA_ScannerCore::CameraController::UpdateInput(float)
CityPDA_ScannerCore::CameraController::UpdateLookOverride(float)
CityPDA_ScannerCore::CameraController::SetInput(CityPDA_ScannerCore::CameraController::InputSource*)
CityPDA_ScannerCore::CameraController::GetInput() const
CityPDA_ScannerCore::CameraController::ApplyToSceneCamera()
CityPDA_ScannerCore::CameraController::GetLookDirDeltaMagnitude() const
CityPDA_ScannerCore::CameraController::IsInputActive() const
CityPDA_ScannerCore::CameraController::GetUserZoomLevel() const
CityPDA_ScannerCore::CameraController::SetUserZoomSpeed(float)
CityPDA_ScannerCore::CameraController::IncrementUserZoomLevel(float, float)
CityPDA_ScannerCore::CameraController::SetAugmentedZoomLevel(float)
CityPDA_ScannerCore::CameraController::GetAugmentedZoomLevel()
CityPDA_ScannerCore::CameraController::SetPlacement(CityPDA_ScannerCore::Placement const&)
CityPDA_ScannerCore::CameraController::GetPlacement() const
CityPDA_ScannerCore::CameraController::SetOverrideLookPosition(VuVec const&)
CityPDA_ScannerCore::CameraController::ClearOverrideLookPosition()
CityPDA_ScannerCore::CameraController::SetLookAdjustmentMatrix(VuMtx const&)
CityPDA_ScannerCore::CameraController::GetLookAdjustmentMatrix() const
CityPDA_ScannerCore::CameraController::RefreshOverrideMatrix()
CityPDA_ScannerCore::CameraController::LookOverride::UpdateWeight(float)
CityPDA_ScannerCore::CameraController::TriggerRecoil()
CityPDA_ScannerCore::CameraController::LookOverride::LookOverride()
CityPDA_ScannerCore::SceneFocusSubject::Request::Request(int)
CityPDA_ScannerCore::SceneFocusSubject::Request::~Request()
CityPDA_ScannerCore::SceneFocusSubject::Request::~Request()
CityPDA_ScannerCore::SceneFocusSubject::Request::GetType() const
CityPDA_ScannerCore::SceneFocusSubject::Request::SetId(int)
CityPDA_ScannerCore::SceneFocusSubject::Request::GetId() const
CityPDA_ScannerCore::SceneFocusSubject::Request::SetLockable(bool)
CityPDA_ScannerCore::SceneFocusSubject::Request::IsLockable() const
CityPDA_ScannerCore::SceneFocusSubject::Request::AttemptRender(CityPDA_ScannerCore::SceneFocusSensor const*)
CityPDA_ScannerCore::SceneFocusSubject::SceneFocusSubject()
CityPDA_ScannerCore::SceneFocusSubject::~SceneFocusSubject()
CityPDA_ScannerCore::SceneFocusSubject::~SceneFocusSubject()
CityPDA_ScannerCore::SceneFocusSubject::SetSubjectPosition(VuVec const&, CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_ScannerCore::SceneFocusSensor::GetSceneCamera() const
CityPDA_ScannerCore::SceneFocusSensor::SceneToNormalisedScreen(VuVec const&, VuVec&)
CityPDA_ScannerCore::SceneFocusSubject::RefreshAndRate(FocusSensor*, bool)
CityPDA_ScannerCore::SceneFocusSubject::CheckForRetention(CityPDA_ScannerCore::SceneFocusSensor*) const
CityPDA_ScannerCore::SceneFocusSubject::GetDistance() const
CityPDA_ScannerCore::SceneFocusSensor::IsSubjectOfInterest()
CityPDA_ScannerCore::SceneFocusSubject::GetSubjectPosition() const
CityPDA_ScannerCore::SceneFocusSubject::GetScreenPosition() const
CityPDA_ScannerCore::SceneFocusSubject::GetLockingZoomLevel(CityPDA_ScannerCore::SceneFocusSensor*) const
CityPDA_ScannerCore::SceneFocusSensor::SceneFocusSensor()
CityPDA_ScannerCore::SceneFocusSensor::~SceneFocusSensor()
CityPDA_ScannerCore::SceneFocusSensor::ClearRequestList()
CityPDA_ScannerCore::SceneFocusSensor::~SceneFocusSensor()
CityPDA_ScannerCore::SceneFocusSensor::Init(CityPDA_ScannerCore::SceneFocusScanner*, int)
CityPDA_ScannerCore::SceneFocusSensor::GetType() const
CityPDA_ScannerCore::SceneFocusSensor::CreateRequest(int, ScriptVariable*)
CityPDA_ScannerCore::SceneFocusSensor::DestroyRequest(CityPDA_ScannerCore::SceneFocusSubject::Request*)
CityPDA_ScannerCore::SceneFocusSensor::AddRequest(int, ScriptVariable*, bool)
CityPDA_ScannerCore::SceneFocusSensor::RemoveRequest(int)
CityPDA_ScannerCore::SceneFocusSensor::FindRequestForCurrentSubject()
CityPDA_ScannerCore::SceneFocusSensor::GetFirstRequest() const
CityPDA_ScannerCore::SceneFocusSensor::FindLockableRequest(int*) const
CityPDA_ScannerCore::SceneFocusSensor::SetCurrentSubjectLockable(bool)
CityPDA_ScannerCore::SceneFocusSensor::IsCurrentSubjectLockable() const
CityPDA_ScannerCore::SceneFocusSensor::SetEnabled(bool)
CityPDA_ScannerCore::SceneFocusSensor::IsEnabled() const
CityPDA_ScannerCore::SceneFocusScanner::GetSceneCamera()
CityPDA_ScannerCore::SceneFocusSensor::GetParentScanner()
CityPDA_ScannerCore::SceneFocusScanner::IsCurrentSubjectOfInterest(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_ScannerCore::SceneFocusSensor::RefreshCurrentSubjectInfo(FocusSubject*, bool)
CityPDA_ScannerCore::SceneFocusSensor::RenderRequests()
CityPDA_ScannerCore::SceneFocusSensor::RenderFocus(ClassManager::eRenderingPriority)
CityPDA_ScannerCore::SceneFocusScanner::SceneFocusScanner(CityPDA_ScannerCore::SceneCamera&)
CityPDA_ScannerCore::SceneFocusScanner::~SceneFocusScanner()
CityPDA_ScannerCore::SceneFocusScanner::~SceneFocusScanner()
CityPDA_ScannerCore::SceneFocusScanner::RegisterSensor(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_ScannerCore::SceneFocusScanner::UnregisterSensor(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_ScannerCore::SceneFocusScanner::UnregisterAllSensors()
CityPDA_ScannerCore::SceneFocusScanner::Reset()
CityPDA_ScannerCore::SceneFocusScanner::FindSensor(int)
CityPDA_ScannerCore::SceneFocusScanner::UpdateFocusAndRefresh(float, bool)
CityPDA_ScannerCore::SceneFocusScanner::GetCurrentFocusSource()
CityPDA_ScannerCore::SceneFocusScanner::SetInterestForCurrentSubject(bool)
CityPDA_ScannerCore::SceneFocusScanner::RenderRequests()
CityPDA_ScannerCore::SceneFocusScanner::AddSubjectRequest(int, int, ScriptVariable*, bool)
CityPDA_ScannerCore::SceneFocusScanner::RemoveSubjectRequest(int, int)
CityPDA_ScannerCore::SceneFocusScanner::FindRequestForDominantSubject()
CityPDA_ScannerCore::SceneFocusScanner::FindLockableRequest(int)
CityPDA_ScannerCore::SceneFocusScanner::ProcessSensors(FocusSensorProxy::Sweep&)
CityPDA_ScannerCore::SceneFocusScanner::IsCurrentSubjectOfInterest()
CityPDA_ScannerCore::SceneFocusScanner::SceneToNormalisedScreen(VuVec const&, VuVec&)
ScanSceneElementRenderer::ScanSceneElementRenderer()
ScanSceneElementRenderer::~ScanSceneElementRenderer()
ScanSceneElementRenderer::~ScanSceneElementRenderer()
ScanSceneElementRenderer::Shutdown()
ScanSceneElementRenderer::IsActive() const
ScanSceneElementRenderer::RemoveRequest(int)
ScanSceneElementRenderer::AddRequest(int)
ScanSceneElementRenderer::IsPlayerActive(int) const
ScanSceneElementRenderer::ConfigureScannerLightState(NuLightState&)
ScanSceneElementRenderer::ScanRenderBinding::ScanRenderBinding()
CityPDA_ScannerPlayerContext::CityPDA_ScannerPlayerContext(MechCharacter&)
CityPDA_ScannerPlayerContext::OnProcess(LevelContainer*, float)
CityPDA_ScannerPlayerContext::OnEnter(LevelContainer*)
CityPDA_ScannerPlayerContext::OnLeave(int)
CityPDA_ScannerPlayerContext::InitFlags()
ScannerLock::ScannerLock()
ScannerLock::~ScannerLock()
ScannerLock::Reset(bool)
ScannerLock::Update(float, bool)
ScannerLock::Update(float, bool, float)
ScannerLock::GetChargeCompletion() const
ScannerLock::IsCharging() const
ScannerLock::GetFilteredCharge()
ScannerLock::IsComplete() const
ScannerLock::SetChargeTime(float)
ScannerLock::SetDischargeTime(float)
CityPDA_ScannerMode::CityPDA_ScannerMode(CityPDA_Scanner&, int)
CityPDA_ScannerMode::~CityPDA_ScannerMode()
CityPDA_ScannerMode::~CityPDA_ScannerMode()
CityPDA_ScannerMode::Init(CityPDA_ScannerHudInterface&)
CityPDA_ScannerMode::Release()
CityPDA_ScannerMode::SetNewSubjectsAllowed(bool)
CityPDA_ScannerMode::AreNewSubjectsAllowed() const
CityPDA_ScannerMode::GetScanDevice()
CityPDA_ScannerMode::GetMasterHud()
CityPDA_ScannerMode::GetIdHash() const
CityPDA_ScannerMode::UpdateProcessor(float)
CityPDA_ScannerMode::NotifyControlJobOfTarget(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_ScannerMode::HasActiveControlJob()
CityPDA_ScannerMode::NotifyControlJobOfTarget(char const*, int, int)
CityPDA_ScannerMode::NotifyControlJobOfTarget(CityPDA_ScannerCore::SceneFocusSubject::Request*)
CityPDA_ScannerMode::SubjectAcquired(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_ScannerMode::NotifyControlJob(char const*, bool)
CityPDA_ScannerMode::GetControlJobContext()
CityPDA_ScannerMode::FindControlJobScope(ScriptContext*, char const*, int)
CityPDA_ScannerMode::SubjectLost()
CityPDA_ScannerMode::SetControlJob(Job*)
CityPDA_ScannerMode::HasControlJobStopped()
CityPDA_ScannerMode::ShouldStopWithControlJob()
CityPDA_ScannerMode::GetControlJob() const
CityPDA_ScannerMode::Start()
CityPDA_ScannerMode::Update(float)
CityPDA_ScannerMode::RenderFocusedSensor(ClassManager::eRenderingPriority)
CityPDA_ScannerMode::Stop()
CityPDA_ScannerMode::OnStart()
CityPDA_ScannerMode::AugmentCameraZoom(float)
CityPDA_ScannerMode::RegisterRenderingThings(LevelContainer*, bool)
CityPDA_ScannerMode::UnregisterRenderingThings(LevelContainer*, bool)
CityPDA_ScannerMode::PreDRCRender()
CityPDA_ScannerMode::PostDRCRender()
CityPDA_ScannerMode::OnStop()
CityPDA_ScannerMode::GetScanWorld()
CityPDA_ScannerMode::Render(ClassManager::eRenderingPriority)
CityPDA_ScannerMode::CanLockOn(bool)
CityPDA_ScannerMode::InitOnce()
MechContext* MechContextConstructor<CityPDA_ScannerPlayerContext>(MechCharacter&)
CityPDA_ScannerMode::GetPlayerContext()
CityPDA_ScannerMode::IsCloseButtonPressed()
CityPDA_ScannerMode::IsActionButtonHeld()
CityPDA_ScannerMode::WasActionButtonPressed()
CityPDA_ScannerMode::SceneToNormalisedScreen(VuVec const&, VuVec&)
CityPDA_ScannerPlayerContext::~CityPDA_ScannerPlayerContext()
LegoContextHandlerBase<CityPDA_ScannerPlayerContext>::GetInstanceId() const
CityPDA_ScannerMode::RenderMainScreen()
CityPDA_ScannerMode::ShutdownFinished()
CityPDA_ScannerMode::ReturnedToMap()
CityPDA_ScannerMode::overridePDAPause(bool)
CityPDA_ScannerMode::IsUnpauseAllowed()
SVarScalar<unsigned int>::~SVarScalar()
SVarHash::~SVarHash()
SVarScalar<unsigned int>::AsFloat() const
SVarScalar<unsigned int>::AsInt() const
SVarScalar<unsigned int>::AsBool() const
SVarScalar<unsigned int>::AsText() const
SVarScalar<unsigned int>::Equals(ScriptVariable const*)
SVarScalar<unsigned int>::Set(ScriptVariable const*)
SVarScalar<unsigned int>::~SVarScalar()
LegoContextHandlerBase<CityPDA_ScannerPlayerContext>::~LegoContextHandlerBase()
CityPDA_TextElement::CityPDA_TextElement()
CityPDA_TextElement::~CityPDA_TextElement()
CityPDA_TextElement::AttachUI(FlashScene*, char const*, char const*, char const*, char const*)
CityPDA_TextElement::SetVisible(bool, float)
CityPDA_TextElement::IsVisible() const
CityPDA_TextElement::Update(float)
CityPDA_TextElement::Reset()
CityPDA_TextElement::SetText(char const*, bool)
CityPDA_TextElement::GetText() const
CityPDA_ScannerReticle::CityPDA_ScannerReticle()
CityPDA_ScannerReticle::~CityPDA_ScannerReticle()
CityPDA_ScannerReticle::~CityPDA_ScannerReticle()
CityPDA_ScannerReticle::Reset()
CityPDA_ScannerReticle::LockButton::Reset()
CityPDA_ScannerReticle::ResetToCentre()
CityPDA_ScannerReticle::AttachUI(FlashScene*, FlashElement*)
CityPDA_ScannerReticle::LockButton::Attach(FlashScene*)
CityPDA_ScannerReticle::SetFocused(bool, bool)
CityPDA_ScannerReticle::ForceFocusValue(float)
CityPDA_ScannerReticle::GetFocusValue() const
CityPDA_ScannerReticle::IsFocused()
CityPDA_ScannerReticle::SetLockAllowed(bool)
CityPDA_ScannerReticle::SetTargetPosition(float, float)
CityPDA_ScannerReticle::UpdateReticlePosition(float, float)
CityPDA_ScannerReticle::GetCurrentPosition() const
CityPDA_ScannerReticle::SetPromptHint(CityPDA_ScannerReticle::LockButton::HintAnim)
CityPDA_ScannerReticle::LockButton::SetHintToUse(CityPDA_ScannerReticle::LockButton::HintAnim, bool)
CityPDA_ScannerReticle::IsReadyToLock() const
CityPDA_ScannerReticle::PlayPromptHint()
CityPDA_ScannerReticle::LockButton::PlayHint()
CityPDA_ScannerReticle::ShowButtonPrompt(bool, CityPDA_ScannerReticle::LockButton::HintAnim)
CityPDA_ScannerReticle::LockButton::Show(bool)
CityPDA_ScannerReticle::SetPromptSuppressed(bool)
CityPDA_ScannerReticle::SetLockCompletion(float)
CityPDA_ScannerReticle::GetLockCompletion() const
CityPDA_ScannerReticle::SetFocusDuration(float)
CityPDA_ScannerReticle::SetOpacity(float)
CityPDA_ScannerReticle::UpdateFocus(float)
CityPDA_ScannerReticle::UpdateFocusStage(float)
CityPDA_ScannerReticle::UpdateLockStage(float)
CityPDA_ScannerReticle::Update(float)
CityPDA_ScannerReticle::ShouldReleaseLatch()
CityPDA_ScannerReticle::OnLockLatch()
CityPDA_ScannerReticle::LockButton::LockButton()
CityPDA_ScannerReticle::LockButton::ClearHint()
CityPDA_ScannerReticle::LockButton::PlayHintInternal(CityPDA_ScannerReticle::LockButton::HintAnim)
CityPDA_ScannerChargeMeter::CityPDA_ScannerChargeMeter()
CityPDA_ScannerChargeMeter::~CityPDA_ScannerChargeMeter()
CityPDA_ScannerChargeMeter::AttachUI(FlashScene*)
CityPDA_ScannerChargeMeter::Reset()
CityPDA_ScannerChargeMeter::SetEnabled(bool)
CityPDA_ScannerChargeMeter::IsEnabled() const
CityPDA_ScannerChargeMeter::SetChargeValue(float)
CityPDA_ScannerChargeMeter::Update()
CityPDA_ScannerChargeMeter::SetPosition(float, float)
CityPDA_ScannerChargeMeter::SetMasterReticle(CityPDA_ScannerReticle*)
CityPDA_ScannerChargeMeter::SetChargeLinked(bool)
CityPDA_ScannerHudInterface::TargetAcquired::TargetAcquired()
CityPDA_ScannerHudInterface::TargetAcquired::Reset()
CityPDA_ScannerHudInterface::TargetAcquired::Attach(FlashScene*)
CityPDA_ScannerHudInterface::TargetAcquired::Show()
CityPDA_ScannerHudInterface::TargetAcquired::IsShowing()
CityPDA_ScannerHudInterface::TargetAcquired::IsFinished()
CityPDA_ScanButtonBase::CityPDA_ScanButtonBase()
CityPDA_ScanButtonBase::~CityPDA_ScanButtonBase()
CityPDA_ScanButtonBase::~CityPDA_ScanButtonBase()
CityPDA_ScanButtonBase::Update(float)
CityPDA_ScanButtonBase::HitTest(DRCTouch const&)
CityPDA_ScanButtonBase::SetText(char const*, bool)
CityPDA_ScanButtonBase::SetButtonIcon(FlashScene*, NuSmartPtr<NuTexture, true> const&)
CityPDA_ScannerHudInterface::ActionButton::ActionButton()
CityPDA_ScannerHudInterface::ActionButton::~ActionButton()
CityPDA_ScannerHudInterface::ActionButton::AttachUI(FlashScene*)
CityPDA_ScannerHudInterface::ActionButton::SetText(char const*, bool)
CityPDA_ScannerHudInterface::ActionButton::Update(int, float)
CityPDA_ScannerHudInterface::ActionButton::SetFlag(int, bool)
CityPDA_ScannerHudInterface::ActionButton::OnPress(DRCTouch const&)
CityPDA_ScannerHudInterface::ActionButton::OnRelease(DRCTouch const&)
CityPDA_ScannerHudInterface::ActionButton::IsHeld() const
CityPDA_ScannerHudInterface::ActionButton::WasPressed() const
CityPDA_ScannerHudInterface::ActionButton::SetEnabled(bool)
CityPDA_ScannerHudInterface::ActionButton::SetRButtonAllowed(bool)
CityPDA_ScannerHudInterface::ActionButton::IsRButtonAllowed()
CityPDA_ScannerHudInterface::ActionButton::IsEnabled() const
CityPDA_ScannerHudInterface::ActionButton::IsSet(int)
CityPDA_ScannerHudInterface::ActionButton::Reset()
CityPDA_ScannerHudInterface::CloseButton::CloseButton()
CityPDA_ScannerHudInterface::CloseButton::~CloseButton()
CityPDA_ScannerHudInterface::CloseButton::AttachUI(FlashScene*)
CityPDA_ScannerHudInterface::CloseButton::SetText(char const*, bool)
CityPDA_ScannerHudInterface::CloseButton::Update(int, float)
CityPDA_ScannerHudInterface::CloseButton::SetEnabled(bool)
CityPDA_ScannerHudInterface::CloseButton::OnTap(DRCTouch const&, int)
CityPDA_ScannerHudInterface::CloseButton::Reset()
CityPDA_ScannerHudInterface::CloseButton::IsPressed() const
CityPDA_ScannerHudInterface::CityPDA_ScannerHudInterface(int)
CityPDA_ScannerHudInterface::~CityPDA_ScannerHudInterface()
CityPDA_ScannerHudInterface::~CityPDA_ScannerHudInterface()
CityPDA_ScannerHudInterface::AttachUI()
CityPDA_ScannerHudInterface::GetPlayerIndex() const
CityPDA_ScannerHudInterface::DetachUI()
CityPDA_ScannerHudInterface::SetEnabled(bool)
CityPDA_ScannerHudInterface::DisableAllLayers()
CityPDA_ScannerHudInterface::GetModeLayerElement(char const*)
CityPDA_ScannerHudInterface::GetMasterScene() const
CityPDA_ScannerHudInterface::GetCommonScene() const
CityPDA_ScannerHudInterface::EnableModeLayerElement(char const*)
CityPDA_ScannerHudInterface::GetSplit()
CityPDA_ScannerHudInterface::GetFlashContextID() const
CityPDA_ScannerHudInterface::Reset()
CityPDA_ScannerHudInterface::SetAssignedReticle(CityPDA_ScannerReticle*)
CityPDA_ScannerHudInterface::SetZoomLevel(float)
CityPDA_ScannerHudInterface::UpdateSplitLayout()
CityPDA_ScannerHudInterface::Update(float)
CityPDA_ScannerHudInterface::GetActionButton()
CityPDA_ScannerHudInterface::UpdateExtraHint()
CityPDA_ScannerHudInterface::Render()
CityPDA_ScannerHudInterface::FocusLost()
CityPDA_ScannerHudInterface::ResetSubjectInfo()
CityPDA_ScannerHudInterface::ClearSubjectHint()
CityPDA_ScannerHudInterface::GetTitle()
CityPDA_ScannerHudInterface::GetChargeMeter()
CityPDA_ScannerHudInterface::GetAssignedReticle() const
CityPDA_ScannerHudInterface::GetCloseButton()
CityPDA_ScannerHudInterface::ShowSubjectHint(char const*, bool)
CityPDA_ScannerHudInterface::ClearExtraHint()
CityPDA_ScannerHudInterface::ShowExtraHint(char const*, float, bool)
CityPDA_ScannerHudInterface::IsHintVisible() const
CityPDA_ScannerReticle::OnAttach(FlashScene*, FlashElement*)
CityPDA_ScannerEnvironment::CityPDA_ScannerEnvironment(CityPDA_Scanner&)
CityPDA_ScannerEnvironment::~CityPDA_ScannerEnvironment()
CityPDA_ScannerEnvironment::~CityPDA_ScannerEnvironment()
CityPDA_ScannerEnvironment::GetPlayerIdx() const
CityPDA_ScannerEnvironment::PrepareToEnter()
CityPDA_ScannerEnvironment::ReadyToShow(bool)
CityPDA_ScannerEnvironment::PrepareToExit()
CityPDA_ScannerEnvironment::ReadyToLeave(bool)
CityPDA_ScannerEnvironment::GetOwner()
CityPDA_ScannerEnvironment::IsVisible() const
CityPDA_ScannerEnvironment::RenderMainScreen()
CityPDA_ScannerEnvironment::Update(float)
CityPDA_ScannerEnvironment::UpdateCameraPipe(float)
CityPDA_ScannerEnvironment::DRCRenderStart(LevelView*, ClassManager::eRenderingPriority)
CityPDA_ScannerEnvironment::DRCRenderFinish(LevelView*, ClassManager::eRenderingPriority)
ExcelntParser::ExcelntParser(char const*, char const*)
ExcelntCounter::~ExcelntCounter()
ExcelntParser::~ExcelntParser()
ExcelntParser::ParseFile(char const*)
ExcelntParser::ParseInternal()
ExcelntParser::GetNextWord()
ExcelntParser::GetNumItemsFound() const
ExcelntCounter::ExcelntCounter(char const*, char const*)
ExcelntCounter::~ExcelntCounter()
ExcelntCounter::CountItemsInFile(char const*)
ExcelntCounter::BeginItem(DynamicString const&)
ExcelntCounter::ProcessItemField(DynamicString const&)
ExcelntCounter::EndItem(DynamicString const&)
PhysicalScanArrow::PhysicalScanArrow()
PhysicalScanArrow::~PhysicalScanArrow()
PhysicalScanArrow::AttachUI(FlashScene*)
PhysicalScanArrow::SetVisible(bool)
PhysicalScanArrow::Reset()
PhysicalScanArrow::StopAllAnims()
PhysicalScanArrow::IsVisible() const
PhysicalScanArrow::SetDirection(float)
PhysicalScanArrow::UpdateDirection(float)
PhysicalScanArrow::EnterState(PhysicalScanArrow::eState)
PhysicalScanArrow::Update(float)
PhysicalScanArrow::SetTargetScreenPosition(float, float)
PhysicalScanArrow::SetTarget(VuVec const&, CityPDA_ScannerCore::SceneCamera const&)
PhysicalScanArrow::GetIdleTimer() const
CityPDA_Scanner_PhysicalMode::CityPDA_Scanner_PhysicalMode(CityPDA_Scanner&)
CityPDA_Scanner_PhysicalMode::~CityPDA_Scanner_PhysicalMode()
CityPDA_Scanner_PhysicalMode::~CityPDA_Scanner_PhysicalMode()
CityPDA_Scanner_PhysicalMode::RegisterRenderingThings(LevelContainer*, bool)
CityPDA_Scanner_PhysicalMode::UnregisterRenderingThings(LevelContainer*, bool)
CityPDA_Scanner_PhysicalMode::ShutdownFinished()
CityPDA_Scanner_PhysicalMode::GetCharInfoInterface()
CityPDA_Scanner_PhysicalMode::ShowArrow(bool)
CityPDA_Scanner_PhysicalMode::RefreshMainTargetInfo()
CityPDA_Scanner_PhysicalMode::UpdateArrowDirection()
CityPDA_Scanner_PhysicalMode::OnStart()
CityPDA_Scanner_PhysicalMode::UpdateProcessor(float)
CityPDA_Scanner_PhysicalMode::SubjectLocked(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_Scanner_PhysicalMode::AugmentCameraZoom(float)
CityPDA_Scanner_PhysicalMode::SubjectAcquired(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_Scanner_PhysicalMode::SetCharacterColour(ApiCharacter*, CharacterFocusSubjectRenderer::eColourId, float)
CityPDA_Scanner_PhysicalMode::SubjectLost()
CityPDA_Scanner_PhysicalMode::GetCharacterFocusSubjectRendererSharedData()
CityPDA_ScannerCore::TypedSceneFocusSensor<KrawlieFocusSubject>::~TypedSceneFocusSensor()
CityPDA_ScannerCore::TypedSceneFocusSensor<KrawlieFocusSubject>::CreateSubjectBuffer()
CityPDA_DataScannerReticle::CityPDA_DataScannerReticle()
CityPDA_DataScannerReticle::~CityPDA_DataScannerReticle()
CityPDA_DataScannerReticle::~CityPDA_DataScannerReticle()
CityPDA_DataScannerReticle::OnAttach(FlashScene*, FlashElement*)
CityPDA_DataScannerReticle::Update(float)
Icon2DConfig::IsValid() const
CityPDA_DataScannerReticle::RequestNextIconInternal()
DynamicIcon::IsValid() const
Icon2DConfig::operator==(Icon2DConfig const&) const
CityPDA_DataScannerReticle::ShowRequestedIconInternal()
Icon2DConfig::operator!=(Icon2DConfig const&) const
CityPDA_DataScannerReticle::HideIconInternal()
DynamicIcon::Clear()
CityPDA_DataScannerReticle::GetCurrentIcon() const
CityPDA_DataScannerReticle::IsChangingIcon() const
CityPDA_DataScannerReticle::IsIconShowing() const
CityPDA_DataScannerReticle::ShowIcon(Icon2DConfig const&)
Icon2DConfig::operator=(Icon2DConfig const&)
CityPDA_DataScannerReticle::HideIcon()
Icon2DConfig::Clear()
CityPDA_DataScannerReticle::OnLockLatch()
CityPDA_DataScannerReticle::ShouldReleaseLatch()
Icon2DConfig::GetIconTextureName(char*, int) const
DynamicIcon::SetTextureName(char const*, char const*)
DynamicIcon::GetCurrentTextureId() const
Icon2DConfig::ShouldUseBorder() const
Icon2DConfig::GetBorderColour() const
Icon2DConfig::Icon2DConfig()
Icon2DConfig::~Icon2DConfig()
Icon2DConfig::Icon2DConfig(Icon2DConfig::eSource, int, unsigned int)
Icon2DConfig::GetSourceType() const
Icon2DConfig::GetSourceID() const
DynamicIcon::DynamicIcon()
DynamicIcon::~DynamicIcon()
DynamicIcon::IsLoading() const
DynamicIcon::Update()
DynamicIcon::NotifyReady()
CityPDA_Scanner_DataMode::CityPDA_Scanner_DataMode(CityPDA_Scanner&)
CityPDA_Scanner_DataMode::~CityPDA_Scanner_DataMode()
CityPDA_Scanner_DataMode::~CityPDA_Scanner_DataMode()
CityPDA_Scanner_DataMode::RegisterRenderingThings(LevelContainer*, bool)
CityPDA_Scanner_DataMode::UnregisterRenderingThings(LevelContainer*, bool)
CityPDA_Scanner_DataMode::ShutdownFinished()
CityPDA_Scanner_DataMode::ReturnedToMap()
CityPDA_Scanner_DataMode::GetScannableDataStatus()
CityPDA_Scanner_DataMode::GetCollectableInfoInterface()
CityPDA_Scanner_DataMode::OnStart()
CityPDA_Scanner_DataMode::UpdateProcessor(float)
CityPDA_Scanner_DataMode::SubjectLocked(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_Scanner_DataMode::AugmentCameraZoom(float)
CityPDA_Scanner_DataMode::SubjectAcquired(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_Scanner_DataMode::SetLockedTarget(LocalScannable*)
CityPDA_Scanner_DataMode::SubjectLost()
BoolEventData<DynamicIcon>::~BoolEventData()
PlayerDeactivateAddOn::PlayerDeactivateAddOn()
PlayerDeactivateAddOn::~PlayerDeactivateAddOn()
non-virtual thunk to PlayerDeactivateAddOn::~PlayerDeactivateAddOn()
PlayerDeactivateAddOn::~PlayerDeactivateAddOn()
non-virtual thunk to PlayerDeactivateAddOn::~PlayerDeactivateAddOn()
PlayerDeactivateAddOn::OnAdded()
PlayerDeactivateAddOn::OnRemoved()
PlayerDeactivateAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to PlayerDeactivateAddOn::OnHook(unsigned char, HookArgs*)
PlayerDeactivateAddOn::Persist()
Scanner::CameraFrameRequirements::CameraFrameRequirements()
Scanner::CameraFrameRequirements::Clear()
Scanner::CameraFrameRequirements::~CameraFrameRequirements()
Scanner::CameraFrameRequirements::SetZoomRange(float, float)
Scanner::CameraFrameRequirements::IsValid() const
Scanner::CameraFrameRequirements::CheckForCamera(CityPDA_ScannerCore::SceneCamera&)
Scanner::CameraFrameRequirements::CheckFocusForCamera(CityPDA_ScannerCore::SceneCamera const&)
Scanner::CameraFrameRequirements::CheckZoomForCamera(CityPDA_ScannerCore::SceneCamera const&)
Scanner::CameraFrameRequirements::SetFocusPosition(VuVec const&)
Scanner::CameraFrameRequirements::SetFocusRadius(float)
CalculateBox(VuVec&, VuVec&, float, float, float, float)
SAction_PDAScan_ClearPhotoTarget::Exec(ScriptContext&)
CityPDA_Scanner_CameraMode::GetFrameRequirements()
SAction_PDAScan_SetPhotoTarget_Locator::Exec(ScriptContext&)
SAction_PDAScan_SetPhotoTarget_PosRad::Exec(ScriptContext&)
SAction_PDAScan_SetPhotoTarget_LocatorRadius::Exec(ScriptContext&)
SAction_PDAScan_SetPhotoZoomRange::Exec(ScriptContext&)
CityPDA_Scanner_CameraMode::PhotoModeStuff::PhotoModeStuff()
CityPDA_Scanner_CameraMode::PhotoModeStuff::Init(CityPDA_ScannerHudInterface&)
CityPDA_Scanner_CameraMode::PhotoModeStuff::Start()
CityPDA_Scanner_CameraMode::PhotoModeStuff::End()
CityPDA_Scanner_CameraMode::PhotoModeStuff::Update(CityPDA_Scanner_CameraMode&, float)
CityPDA_Scanner_CameraMode::PhotoModeStuff::IsUserMoving(CityPDA_Scanner&)
CityPDA_Scanner_CameraMode::PhotoModeStuff::ApplyVisibility(CityPDA_Scanner_CameraMode&)
CityPDA_Scanner_CameraMode::CityPDA_Scanner_CameraMode(CityPDA_Scanner&)
CityPDA_Scanner_CameraMode::~CityPDA_Scanner_CameraMode()
CityPDA_Scanner_CameraMode::~CityPDA_Scanner_CameraMode()
CityPDA_Scanner_CameraMode::RegisterRenderingThings(LevelContainer*, bool)
CityPDA_Scanner_CameraMode::UnregisterRenderingThings(LevelContainer*, bool)
CityPDA_Scanner_CameraMode::ShutdownFinished()
CityPDA_Scanner_CameraMode::OnStart()
CityPDA_Scanner_CameraMode::EnterState(CityPDA_Scanner_CameraMode::eState, bool)
CityPDA_Scanner_CameraMode::OnStop()
CityPDA_Scanner_CameraMode::UpdateTakeoverScreen()
CityPDA_Scanner_CameraMode::UpdateProcessor(float)
CityPDA_Scanner_CameraMode::UpdateFraming(float)
CityPDA_Scanner_CameraMode::TakePhoto()
CityPDA_Scanner_CameraMode::UpdateTakingPhoto(float)
CityPDA_Scanner_CameraMode::Render(ClassManager::eRenderingPriority)
CityPDA_Scanner_CameraMode::GetScanWorld()
SAction_PDAScan_ClearPhotoTarget::~SAction_PDAScan_ClearPhotoTarget()
SAction_PDAScan_ClearPhotoTarget::GetName() const
SAction_PDAScan_ClearPhotoTarget::GetInputs(SCmdParams&) const
SAction_PDAScan_ClearPhotoTarget::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetPhotoTarget_Locator::~SAction_PDAScan_SetPhotoTarget_Locator()
SAction_PDAScan_SetPhotoTarget_Locator::GetName() const
SAction_PDAScan_SetPhotoTarget_Locator::GetInputs(SCmdParams&) const
SAction_PDAScan_SetPhotoTarget_Locator::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetPhotoTarget_PosRad::~SAction_PDAScan_SetPhotoTarget_PosRad()
SAction_PDAScan_SetPhotoTarget_PosRad::GetName() const
SAction_PDAScan_SetPhotoTarget_PosRad::GetInputs(SCmdParams&) const
SAction_PDAScan_SetPhotoTarget_PosRad::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetPhotoTarget_LocatorRadius::~SAction_PDAScan_SetPhotoTarget_LocatorRadius()
SAction_PDAScan_SetPhotoTarget_LocatorRadius::GetName() const
SAction_PDAScan_SetPhotoTarget_LocatorRadius::GetInputs(SCmdParams&) const
SAction_PDAScan_SetPhotoTarget_LocatorRadius::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetPhotoZoomRange::~SAction_PDAScan_SetPhotoZoomRange()
SAction_PDAScan_SetPhotoZoomRange::GetName() const
SAction_PDAScan_SetPhotoZoomRange::GetInputs(SCmdParams&) const
SAction_PDAScan_SetPhotoZoomRange::GetOutputs(SCmdParams&) const
AudioScanTarget::ProximityParameters::Refresh()
AudioScanTarget::InitOnce()
ScannableConversation::ScannableConversation(char const*, char const*, bool, VuVec const&, int, JobValue*)
ScannableConversation::~ScannableConversation()
ScannableConversation::GetConversation()
ScannableConversation::SetProximityValue(float)
ScannableConversation::GetProximityValue() const
ScannableConversation::GetId() const
ScannableConversation::GetPosition() const
ScannableConversation::CanBeDetected() const
ScannableConversation::SetFound(bool)
ScannableConversation::HasBeenFound() const
ScannableConversation::WaitingToLoad() const
ScannableConversation::IsDetectedBy(CityPDA_ScannerCore::SceneCamera&) const
ScannableConversation::Update()
ScannableConversationScene::ScannableConversationScene(LevelContainer*)
ScannableConversationScene::~ScannableConversationScene()
ScannableConversationScene::Clear()
ScannableConversationScene::AddConversation(ScannableConversation*)
ScannableConversationScene::MarkAsChanged()
ScannableConversationScene::RemoveConversation(ScannableConversation*)
ScannableConversationScene::FindConversation(HashedNameParam const&) const
ScannableConversationScene::GetNumConversations() const
ScannableConversationScene::GetConversationAt(int) const
ScannableConversationScene::GetFirstConversation() const
ScannableConversationScene::AcquireLocalConversations(CityPDA_ScannerCore::SceneCamera&)
ScannableConversationScene::GetNearestConversation() const
ScannableConversationScene::Update(float)
ScannableConversationScene::ClearChangeFlag()
ScannableConversationScene::GetChangeFlag()
ScannableConversationScene::GetCombinedVolume() const
ScannableConversationScene::WaitingForConversations()
AudioScanTarget::Pulse::Pulse(FlashElement*, FlashAnim*)
AudioScanTarget::Pulse::Play(float)
AudioScanTarget::Pulse::Reset()
AudioScanTarget::Pulse::GetAvailability() const
AudioScanTarget::Centre::Centre()
AudioScanTarget::Centre::Attach(FlashElement*)
AudioScanTarget::Centre::SetOpacity(float)
AudioScanTarget::Centre::Update(float)
AudioScanTarget::Centre::IsAttached()
AudioScanTarget::AudioScanTarget(FlashElement*, int)
AudioScanTarget::GatherPulses()
AudioScanTarget::~AudioScanTarget()
AudioScanTarget::DestroyPulses()
AudioScanTarget::~AudioScanTarget()
AudioScanTarget::Update(CityPDA_ScannerCore::SceneCamera&, CityPDA_ScannerCore::SceneView&, float)
AudioScanTarget::SetScreenPosition(float, float)
AudioScanTarget::SetPulseOpacity(float)
AudioScanTarget::UpdatePlayingPulses(float)
AudioScanTarget::IsPlaying()
AudioScanTarget::PlayPulse()
AudioScanTarget::UpdateLocal(CityPDA_ScannerCore::SceneCamera&, CityPDA_ScannerCore::SceneView&, float)
AudioScanTarget::GetType() const
AudioScanTarget::GetScreenCentreOffset() const
AudioScanTarget::GetScreenCentreOffsetMagnitude() const
AudioScanTarget::GetAngularOffset() const
AudioScanTarget::GetNormalisedAngularMagnitude() const
AudioScanTarget::SetAssignedConversation(ScannableConversation*)
AudioScanTarget::SetFocused(bool)
AudioScanTarget::GetAssignedConversation()
AudioScanTarget::Reset()
AudioScanTarget::GetNextPulse()
AudioScanTarget::IsFocused() const
AudioScanTarget::ShouldShowOnSeekOTron() const
AudioScanTarget::GetFreePulse()
AudioScan_SeekOTron::Segment::Segment(FlashElement*)
AudioScan_SeekOTron::Segment::~Segment()
AudioScan_SeekOTron::Segment::Reset()
AudioScan_SeekOTron::Segment::SetOpacity(float)
AudioScan_SeekOTron::Segment::ApplyStrength(float)
AudioScan_SeekOTron::Segment::Ping()
AudioScan_SeekOTron::Ping::Ping()
AudioScan_SeekOTron::Ping::~Ping()
AudioScan_SeekOTron::Ping::AddTarget(AudioScanTarget*)
AudioScan_SeekOTron::Ping::GetResult(int) const
AudioScan_SeekOTron::Ping::GetNumResults() const
AudioScan_SeekOTron::AudioScan_SeekOTron()
AudioScan_SeekOTron::~AudioScan_SeekOTron()
AudioScan_SeekOTron::SetSegmentMode(AudioScan_SeekOTron::eSegmentMode)
AudioScan_SeekOTron::ParseFlashElement(FlashElement*)
AudioScan_SeekOTron::ResetSegments()
AudioScan_SeekOTron::HandlePing(AudioScan_SeekOTron::Ping const&)
AudioScan_SeekOTron::ApplyPingStrengthBlended(AudioScan_SeekOTron::Segment*, AudioScan_SeekOTron::Segment*, float, float, float, float)
ConversationFocusSubject::ConversationFocusSubject()
ConversationFocusSubject::AcquireWithSensor(FocusSensor*, float)
ConversationSceneFocusSensor::DetectConversation()
ConversationFocusSubject::AcquireSubjectPosition(VuVec&, bool)
ConversationFocusSubject::GetScannableConversation() const
ConversationFocusSubject::GetScannableConversation()
ConversationFocusSubject::RefersToSameSubjectAs(FocusSubject*) const
ConversationFocusSubject::Request::Request(int, int)
ConversationFocusSubject::Request::IsForSubject(CityPDA_ScannerCore::SceneFocusSubject const*)
ConversationFocusSubject::Request::AttemptRender(CityPDA_ScannerCore::SceneFocusSensor const*)
ConversationFocusSubject::Request::GetConversationId() const
ConversationSceneFocusSensor::ConversationSceneFocusSensor()
ConversationSceneFocusSensor::~ConversationSceneFocusSensor()
ConversationSceneFocusSensor::~ConversationSceneFocusSensor()
ConversationSceneFocusSensor::SetScene(ScannableConversationScene*, ScannableConversationHud*)
ConversationSceneFocusSensor::CreateRequest(int, ScriptVariable*)
ConversationSceneFocusSensor::FindRequestFor(ScannableConversation*)
ConversationSceneFocusSensor::GetConversationScene() const
ConversationSceneFocusSensor::GetConversationHud() const
ScannableConversationHud::FindTargetForScannableConversation(ScannableConversation*)
ConversationSceneFocusSensor::GetFocusedScannableConversation()
ConversationSceneFocusSensor::GetFocusedConversation()
SoundTargetTypes::SpeechBubble::SpeechBubble()
SoundTargetTypes::SpeechBubble::~SpeechBubble()
SoundTargetTypes::SpeechBubble::Attach(FlashElement*)
SoundTargetTypes::SpeechBubble::Reset()
SoundTargetTypes::SpeechBubble::SetEnabled(bool)
SoundTargetTypes::SpeechBubble::SetEllipsisVisible(bool)
SoundTargetTypes::SpeechBubble::SetPlaying(bool)
SoundTargetTypes::SpeechBubble::Update(float)
SoundTargetTypes::SpeechBubble::IsPlaying()
SoundTargetTypes::NormalConvTarget::NormalConvTarget(FlashElement*)
SoundTargetTypes::NormalConvTarget::~NormalConvTarget()
SoundTargetTypes::NormalConvTarget::~NormalConvTarget()
SoundTargetTypes::NormalConvTarget::SetPlayIconVisible(bool)
SoundTargetTypes::NormalConvTarget::TargetFound()
SoundTargetTypes::NormalConvTarget::StartedPlaying()
SoundTargetTypes::NormalConvTarget::StoppedPlaying()
SoundTargetTypes::NormalConvTarget::Reset()
SoundTargetTypes::NormalConvTarget::UpdateLocal(CityPDA_ScannerCore::SceneCamera&, CityPDA_ScannerCore::SceneView&, float)
SoundTargetTypes::EncryptedConvTarget::EncryptedConvTarget(FlashElement*)
SoundTargetTypes::EncryptedConvTarget::~EncryptedConvTarget()
SoundTargetTypes::EncryptedConvTarget::~EncryptedConvTarget()
SoundTargetTypes::EncryptedConvTarget::Reset()
SoundTargetTypes::EncryptedConvTarget::TargetFound()
SoundTargetTypes::EncryptedConvTarget::SetEncryptSymbolVisible(bool)
SoundTargetTypes::EncryptedConvTarget::StartedPlaying()
SoundTargetTypes::EncryptedConvTarget::StoppedPlaying()
SoundTargetTypes::EncryptedConvTarget::UpdateLocal(CityPDA_ScannerCore::SceneCamera&, CityPDA_ScannerCore::SceneView&, float)
ScannableConversationHud::ScannableConversationHud()
ScannableConversationHud::~ScannableConversationHud()
ScannableConversationHud::ParseSoundPoolElement(FlashElement*)
ScannableConversationHud::CreateSoundTarget(FlashElement*)
ScannableConversationHud::ParseSeekOTronElement(FlashElement*)
ScannableConversationHud::Reset()
ScannableConversationHud::SetAutoPingEnabled(bool)
ScannableConversationHud::DeactivateAllTargets()
ScannableConversationHud::SetFocusedTarget(AudioScanTarget*)
ScannableConversationHud::HasTriggerableTarget()
ScannableConversationHud::PingSeekOTron()
ScannableConversationHud::Update(CityPDA_ScannerCore::SceneCamera&, CityPDA_ScannerCore::SceneView&, float)
ScannableConversationHud::UpdateAutoPing(float)
ScannableConversationHud::GetAvailableTarget(int)
ScannableConversationHud::ActivateTarget(AudioScanTarget*)
ScannableConversationHud::DeactivateTarget(AudioScanTarget*)
ScannableConversationHud::DeactivateInternal(AudioScanTarget*)
AudioScan_Soundscape::AudioScan_Soundscape()
AudioScan_Soundscape::~AudioScan_Soundscape()
AudioScan_Soundscape::Init(ScannableConversationScene*, LevelContainer*)
AudioScan_Soundscape::Start()
AudioScan_Soundscape::SetBgStaticEnabled(bool)
AudioScan_Soundscape::Stop()
AudioScan_Soundscape::SetTuningEnabled(bool)
AudioScan_Soundscape::Update(float, float)
AudioScan_Soundscape::CalculateNoiseLevel()
AudioScan_Soundscape::CalculateBgStaticLevel(float)
AudioScan_Soundscape::SetNoiseSource(ScannableConversation*)
AudioScan_Soundscape::MuteNoises()
CityPDA_AudioScannerReticle::CityPDA_AudioScannerReticle()
CityPDA_AudioScannerReticle::~CityPDA_AudioScannerReticle()
CityPDA_AudioScannerReticle::~CityPDA_AudioScannerReticle()
CityPDA_AudioScannerReticle::OnAttach(FlashScene*, FlashElement*)
CityPDA_AudioScannerReticle::Update(float)
CityPDA_AudioScannerReticle::OnLockLatch()
CityPDA_AudioScannerReticle::ShouldReleaseLatch()
CityPDA_AudioWaveDisplay::CityPDA_AudioWaveDisplay()
CityPDA_AudioWaveDisplay::~CityPDA_AudioWaveDisplay()
CityPDA_AudioWaveDisplay::Reset()
CityPDA_AudioWaveDisplay::AttachUI(FlashScene*)
CityPDA_AudioWaveDisplay::Update(float)
CityPDA_AudioWaveDisplay::SetEnabled(bool)
CityPDA_Scanner_AudioMode::CityPDA_Scanner_AudioMode(CityPDA_Scanner&)
CityPDA_Scanner_AudioMode::~CityPDA_Scanner_AudioMode()
CityPDA_Scanner_AudioMode::~CityPDA_Scanner_AudioMode()
CityPDA_Scanner_AudioMode::OnStart()
CityPDA_Scanner_AudioMode::OnStop()
CityPDA_Scanner_AudioMode::UpdateProcessor(float)
CityPDA_Scanner_AudioMode::RebuildConversationHud()
CityPDA_Scanner_AudioMode::SubjectLocked(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_Scanner_AudioMode::Render(ClassManager::eRenderingPriority)
CityPDA_Scanner_AudioMode::GetTypeForConversation(ScannableConversation*)
CityPDA_Scanner_AudioMode::GetConversationScene()
CityPDA_Scanner_AudioMode::AugmentCameraZoom(float)
CityPDA_Scanner_AudioMode::SubjectAcquired(CityPDA_ScannerCore::SceneFocusSensor*)
CityPDA_Scanner_AudioMode::SubjectLost()
SAction_PDAScan_AddAudioConversation::GetInputs(SCmdParams&) const
SAction_PDAScan_AddAudioConversation::Exec(ScriptContext&)
SAction_PDAScan_AddAudioConversation::~SAction_PDAScan_AddAudioConversation()
SAction_PDAScan_AddAudioConversation::GetName() const
SAction_PDAScan_AddAudioConversation::GetOutputs(SCmdParams&) const
AudioScanTarget::TargetFound()
AudioScanTarget::StartedPlaying()
AudioScanTarget::StoppedPlaying()
ConversationFocusSubject::~ConversationFocusSubject()
ConversationFocusSubject::~ConversationFocusSubject()
ConversationFocusSubject::Request::~Request()
CityPDA_ScannerCore::TypedSceneFocusSensor<ConversationFocusSubject>::CreateSubjectBuffer()
NuVector<AudioScanTarget::Pulse*>::Reserve(unsigned int, bool)
CityPDA_Scanner_AlbumMode::CityPDA_Scanner_AlbumMode(CityPDA_Scanner&)
CityPDA_Scanner_AlbumMode::~CityPDA_Scanner_AlbumMode()
CityPDA_Scanner_AlbumMode::~CityPDA_Scanner_AlbumMode()
CityPDA_Scanner_AlbumMode::RegisterRenderingThings(LevelContainer*, bool)
CityPDA_Scanner_AlbumMode::UnregisterRenderingThings(LevelContainer*, bool)
CityPDA_Scanner_AlbumMode::ShutdownFinished()
CityPDA_Scanner_AlbumMode::OnStart()
CityPDA_Scanner_AlbumMode::UpdateProcessor(float)
CityPDA_Scanner_AlbumMode::Render(ClassManager::eRenderingPriority)
CityPDA_Scanner_AlbumMode::RenderMainScreen()
CityPDA_Scanner_AlbumMode::GetScanWorld()
CityPDA_Scanner_AlbumMode::overridePDAPause(bool)
CityPDA_Scanner_AlbumMode::IsUnpauseAllowed()
CityPDA_Scanner_SnapshotMode::CityPDA_Scanner_SnapshotMode(CityPDA_Scanner&)
CityPDA_Scanner_SnapshotMode::~CityPDA_Scanner_SnapshotMode()
CityPDA_Scanner_SnapshotMode::~CityPDA_Scanner_SnapshotMode()
CityPDA_Scanner_SnapshotMode::RegisterRenderingThings(LevelContainer*, bool)
CityPDA_Scanner_SnapshotMode::UnregisterRenderingThings(LevelContainer*, bool)
CityPDA_Scanner_SnapshotMode::ShutdownFinished()
CityPDA_Scanner_SnapshotMode::TakePhoto()
CityPDA_Scanner_SnapshotMode::EnterState(CityPDA_Scanner_SnapshotMode::eState, bool)
CityPDA_Scanner_SnapshotMode::OnStart()
CityPDA_Scanner_SnapshotMode::UpdateProcessor(float)
CityPDA_Scanner_SnapshotMode::overridePDAPause(bool)
CityPDA_Scanner_SnapshotMode::IsUnpauseAllowed()
CityPDA_Scanner_SnapshotMode::Render(ClassManager::eRenderingPriority)
CityPDA_Scanner_SnapshotMode::RenderMainScreen()
CityPDA_Scanner_SnapshotMode::GetScanWorld()
RenderCallbackProxy::RenderCallbackProxy()
RenderCallbackProxy::~RenderCallbackProxy()
RenderCallbackProxy::GetRenderStage() const
RenderCallbackProxy::GetTargetRenderData() const
RenderCallbackProxy::Reset()
RenderCallbackProxy::CallTargetFunction()
RenderCallbackProxy::CallTargetFunction(void*)
RenderCallbackProxy::OnRender(void*)
RenderCallbackProxy::WrapExistingCallbackFor(NuRenderPipe&, NURENDERSTAGE)
RenderCallbackProxy::RenderCallbackFn(void*)
RenderInterceptor::RenderInterceptor(int)
RenderInterceptor::InitProxies(int)
RenderInterceptor::~RenderInterceptor()
RenderInterceptor::ClearProxies()
RenderInterceptor::~RenderInterceptor()
RenderInterceptor::ResetRenderInterception()
RenderInterceptor::InterceptRenderFor(NuRenderPipe&, NURENDERSTAGE)
RenderInterceptor::InFirstInterceptThisFrame() const
NuVector<RenderInterceptor::Proxy>::Reserve(unsigned int, bool)
RenderInterceptor::Proxy::Proxy()
RenderInterceptor::Proxy::OnRender(void*)
CityPDA_Scanner_DRCEnvironment::LevelEnabler::LevelEnabler()
CityPDA_Scanner_DRCEnvironment::LevelEnabler::AddLevelRequest()
CityPDA_Scanner_DRCEnvironment::LevelEnabler::RemoveLevelRequest()
CityPDA_Scanner_DRCEnvironment::LevelEnabler::Clear()
CityPDA_Scanner_DRCEnvironment::LevelEnabler::IsLevelReady()
CityPDA_Scanner_DRCEnvironment::LevelEnabler::OnAdded()
CityPDA_Scanner_DRCEnvironment::LevelEnabler::FindDRCLevel(StreamingLevel*)
CityPDA_Scanner_DRCEnvironment::LevelEnabler::OnRemoved()
CityPDA_Scanner_DRCEnvironment::LevelEnabler::GetOrCreate(LevelContainer&)
ScannerLevelView::ScannerLevelView(int)
ScannerLevelView::GetFrom(ManagerRenderData*)
ScannerLevelView::GetPlayerIdx() const
CityPDA_Scanner_DRCEnvironment::CityPDA_Scanner_DRCEnvironment(CityPDA_Scanner&)
CityPDA_Scanner_DRCEnvironment::~CityPDA_Scanner_DRCEnvironment()
non-virtual thunk to CityPDA_Scanner_DRCEnvironment::~CityPDA_Scanner_DRCEnvironment()
CityPDA_Scanner_DRCEnvironment::~CityPDA_Scanner_DRCEnvironment()
non-virtual thunk to CityPDA_Scanner_DRCEnvironment::~CityPDA_Scanner_DRCEnvironment()
CityPDA_Scanner_DRCEnvironment::GetTargetGamePipeIndex()
CityPDA_Scanner_DRCEnvironment::GetGamePipe(int)
CityPDA_Scanner_DRCEnvironment::GetTargetPipe()
CityPDA_Scanner_DRCEnvironment::GetGamePipeScanEffect(int)
GamePipeDRCEffect::GamePipeDRCEffect()
GamePipeDRCEffect::~GamePipeDRCEffect()
GamePipeDRCEffect::Reset()
GamePipeDRCEffect::Init(int)
GamePipeDRCEffect::UpdateEffectParams()
GamePipeDRCEffect::SetActive(bool)
CityPDA_Scanner_DRCEnvironment::UpdateDRCEffect()
CityPDA_Scanner_DRCEnvironment::SetDRCEffectsActive(bool)
CityPDA_Scanner_DRCEnvironment::PrepareToEnter()
CityPDA_Scanner_DRCEnvironment::GetLevelEnabler()
CityPDA_Scanner_DRCEnvironment::ReadyToShow(bool)
CityPDA_Scanner_DRCEnvironment::PrepareToExit()
CityPDA_Scanner_DRCEnvironment::ReadyToLeave(bool)
CityPDA_Scanner_DRCEnvironment::Update(float)
CityPDA_Scanner_DRCEnvironment::UpdateCameraPipe(float)
CityPDA_Scanner_DRCEnvironment::PrepareLevelViewFrom(LevelView const&)
CityPDA_Scanner_DRCEnvironment::OnInterceptedRender(NURENDERSTAGE, RenderCallbackProxy&)
non-virtual thunk to CityPDA_Scanner_DRCEnvironment::OnInterceptedRender(NURENDERSTAGE, RenderCallbackProxy&)
CityPDA_Scanner_DRCEnvironment::DRCRenderStart(LevelView*, ClassManager::eRenderingPriority)
CityPDA_Scanner_DRCEnvironment::DRCRenderFinish(LevelView*, ClassManager::eRenderingPriority)
RenderCallbackProxy::~RenderCallbackProxy()
RenderInterceptor::Proxy::~Proxy()
CityPDA_Scanner_DRCEnvironment::LevelEnabler::~LevelEnabler()
non-virtual thunk to CityPDA_Scanner_DRCEnvironment::LevelEnabler::~LevelEnabler()
non-virtual thunk to CityPDA_Scanner_DRCEnvironment::LevelEnabler::~LevelEnabler()
ScannerLevelView::~ScannerLevelView()
LevelView::GetNuCamera() const
LevelView::SetNuCamera(NuCamera const&)
CityPDA_Scanner_RealityEnvironment::CityPDA_Scanner_RealityEnvironment(CityPDA_Scanner&)
CityPDA_Scanner_RealityEnvironment::~CityPDA_Scanner_RealityEnvironment()
CityPDA_Scanner_RealityEnvironment::SetMainViewOnDRC(bool)
CityPDA_Scanner_RealityEnvironment::~CityPDA_Scanner_RealityEnvironment()
CityPDA_Scanner_RealityEnvironment::HideMainScreen()
CityPDA_Scanner_RealityEnvironment::IsMainScreenHidden()
CityPDA_Scanner_RealityEnvironment::ShowMainScreen()
CityPDA_Scanner_RealityEnvironment::PrepareToEnter()
CityPDA_Scanner_RealityEnvironment::Update(float)
CityPDA_Scanner_RealityEnvironment::ReadyToShow(bool)
CityPDA_Scanner_RealityEnvironment::PrepareToExit()
CityPDA_Scanner_RealityEnvironment::ReadyToLeave(bool)
CityPDA_Scanner_RealityEnvironment::RenderMainScreen()
CityPDA_Scanner_PhotoEnvironment::CityPDA_Scanner_PhotoEnvironment(CityPDA_Scanner&)
CityPDA_Scanner_PhotoEnvironment::~CityPDA_Scanner_PhotoEnvironment()
CityPDA_Scanner_PhotoEnvironment::~CityPDA_Scanner_PhotoEnvironment()
CityPDA_Scanner_PhotoEnvironment::PrepareToEnter()
CityPDA_Scanner_PhotoEnvironment::Update(float)
CityPDA_Scanner_PhotoEnvironment::ReadyToShow(bool)
CityPDA_Scanner_PhotoEnvironment::PrepareToExit()
CityPDA_Scanner_PhotoEnvironment::ReadyToLeave(bool)
CityPDA_Scanner_PhotoEnvironment::RenderMainScreen()
FocusSubject::FocusSubject()
FocusSubject::~FocusSubject()
FocusSubject::~FocusSubject()
FocusSubject::Reset()
FocusSubject::IsValid() const
FocusSubject::GetRating() const
FocusSensor::FocusSensor()
FocusSensor::~FocusSensor()
FocusSensor::~FocusSensor()
FocusSensor::InitialiseBuffers()
FocusSensor::UpdateFocus(float)
FocusSensor::ProcessSubjectBuffers(float)
FocusSensor::SwapSubjectBuffers()
FocusSensor::RefreshSubjectInfo(bool)
FocusSensor::UpdateCurrentFocusOnly(float)
FocusSensor::ProcessCurrentSubjectBufferOnly(float)
FocusSensor::RefreshSubject(FocusSubject*, bool)
FocusSensor::SubjectIdentityHasChanged() const
FocusSensor::ResetFocus()
FocusSensor::GetCurrentSubject() const
FocusSensor::GetCurrentSubject()
FocusSensor::RefreshCurrentSubjectInfo(FocusSubject*, bool)
FocusSensor::HasValidSubject() const
FocusSensor::GetElapsedFocusTime() const
FocusSensor::MarkSubjectIdentityAsChanged()
FocusSensor::GetSubjectRating() const
FocusSensor::SetAutoRetentionEnabled(bool)
FocusSensor::IsAutoRetentionEnabled() const
FocusSensor::SetAutoRefreshEnabled(bool)
FocusSensor::IsAutoRefreshEnabled() const
FocusSensorProxy::Sweep::Sweep(float)
FocusSensorProxy::Sweep::~Sweep()
FocusSensorProxy::Sweep::ProcessSensor(FocusSensor*, bool)
FocusSensorProxy::Sweep::GetResult() const
FocusSensorProxy::Sweep::GetTimeDelta() const
FocusSensorProxy::SensorSubject::SensorSubject()
FocusSensorProxy::SensorSubject::~SensorSubject()
FocusSensorProxy::SensorSubject::AcquireWithSensor(FocusSensor*, float)
FocusSensorProxy::GetDominantSensor()
FocusSensorProxy::SensorSubject::RefreshAndRate(FocusSensor*, bool)
FocusSensorProxy::SensorSubject::RefersToSameSubjectAs(FocusSubject*) const
FocusSensorProxy::SensorSubject::GetResultSensor() const
FocusSensorProxy::FocusSensorProxy()
FocusSensorProxy::~FocusSensorProxy()
FocusSensorProxy::UpdateCurrentFocusOnly(float)
FocusSensorProxy::CreateSubjectBuffer()
FocusSensorProxy::GetDominantSubject()
CityPDA_ScannerAddon::CityPDA_ScannerAddon(CityPDA_Scanner*)
CityPDA_ScannerAddon::~CityPDA_ScannerAddon()
non-virtual thunk to CityPDA_ScannerAddon::~CityPDA_ScannerAddon()
CityPDA_ScannerAddon::~CityPDA_ScannerAddon()
non-virtual thunk to CityPDA_ScannerAddon::~CityPDA_ScannerAddon()
CityPDA_ScannerAddon::SetItemOut(bool, bool)
CityPDA_ScannerAddon::SetTriggersDisabled(bool)
CityPDA_ScannerAddon::IsItemAway()
CityPDA_ScannerAddon::IsItemOut()
CityPDA_ScannerAddon::OnAdded()
CityPDA_ScannerAddon::UpdateState(float)
CityPDA_ScannerAddon::OnRemoved()
CityPDA_ScannerAddon::ShouldAbortScan(MechCharacter&)
CityPDA_ScannerAddon::CanAbortScan(MechCharacter&)
CityPDA_ScannerAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CityPDA_ScannerAddon::OnHook(unsigned char, HookArgs*)
ChaseCameraUpdateVelocity::~ChaseCameraUpdateVelocity()
ChaseCameraUpdateVelocity::~ChaseCameraUpdateVelocity()
ChaseCameraUpdateVelocity::update(ChaseCamera*, ChaseCameraState*)
ChaseCameraUpdateVelocity::updateState(ChaseCamera*, ChaseCameraState*)
ChaseCameraUpdateVelocity::reset(ChaseCamera*, ChaseCameraState*, NUVEC*, NUVEC*)
ChaseCameraUpdateVelocity::inSockReset(ChaseCamera*, ChaseCameraState*, NUVEC*, NUVEC*)
ChaseCameraUpdateVelocity::updateLOS(ChaseCamera*, ChaseCameraState*)
ChaseCameraUpdateVelocity::handleCollision(ChaseCamera*, ChaseCameraState*)
CityPDA_ScannerControlLinker::Link::Link()
CityPDA_ScannerControlLinker::Link::Clear()
CityPDA_ScannerControlLinker::CityPDA_ScannerControlLinker(CityPDA_Scanner*)
CityPDA_ScannerControlLinker::Clear()
CityPDA_ScannerControlLinker::~CityPDA_ScannerControlLinker()
CityPDA_ScannerControlLinker::PreSwitchCheck()
CityPDA_ScannerControlLinker::PostSwitchCheck()
CityPDA_ScannerControlLinker::SetPlayerSwitchProximity(GizSwitch*)
CityPDA_ScannerControlLinker::UnlinkScanner()
CityPDA_ScannerControlLinker::IndexOfLinkForGizmo(Gizmo*)
CityPDA_ScannerControlLinker::LinkScanner(int)
CityPDA_ScannerControlLinker::AddLink(GizSwitch*, Job*, int)
CityPDA_ScannerControlLinker::GetAvailableLinkIndex()
CityPDA_ScannerControlLinker::RemoveLinkForGizmo(GizSwitch*)
CityPDA_ScannerControlLinker::ClearLink(int)
CityPDA_ScannerControlLinker::Update(float)
CityPDA_ScannerControlLinker::IsPlayerAtLinkedSwitch()
CityPDA_ScannerControlLinker::HasPlayerRequestedScanner()
CityPDA_ScannerControlLinker::RequestScannerForPlayer()
CityPDA_ScannerControlLinker::TriggeredFromSwitch(GizSwitch*)
CityPDA_ScannerControlLinker::IsAlreadyScanning(GizSwitch*)
CityPDA_ScannerControlLinker::GetScanModeForSwitch(GizSwitch*)
CityPDA_ScannerControlLinker::GetPlayerProximitySwitch()
CityPDA_ScannerControlLinker::SwitchProximityCheck(MechCharacter*, GizSwitch*)
CityPDA_ScannerControlLinker::GetProcessorForLink(CityPDA_ScannerControlLinker::Link*)
SAction_PDAScan_LinkSwitch::Exec(ScriptContext&)
SAction_PDAScan_GetSwitch::Exec(ScriptContext&)
SAction_PDAScan_SetControlJob::Exec(ScriptContext&)
SAction_PDAScan_AddRequest::Exec(ScriptContext&)
SAction_PDAScan_RemoveRequest::Exec(ScriptContext&)
SAction_PDAScan_Begin::Exec(ScriptContext&)
SAction_PDAScan_SetDefaultZoomFOVRange::Exec(ScriptContext&)
SAction_PDAScan_SetZoomFOVRange::Exec(ScriptContext&)
SAction_PDAScan_SetZoom::Exec(ScriptContext&)
SAction_PDAScan_SetDirection::Exec(ScriptContext&)
SAction_PDAScan_SetCharacterInfo::Exec(ScriptContext&)
SAction_PDAScan_SetHint::Exec(ScriptContext&)
SAction_PDAScan_IsEnvironmentVisible::Exec(ScriptContext&)
CityPDA_ScannerScriptFunctions_Init()
SAction_PDAScan_LinkSwitch::~SAction_PDAScan_LinkSwitch()
SAction_PDAScan_LinkSwitch::GetName() const
SAction_PDAScan_LinkSwitch::GetInputs(SCmdParams&) const
SAction_PDAScan_LinkSwitch::GetOutputs(SCmdParams&) const
SAction_PDAScan_GetSwitch::~SAction_PDAScan_GetSwitch()
SAction_PDAScan_GetSwitch::GetName() const
SAction_PDAScan_GetSwitch::GetInputs(SCmdParams&) const
SAction_PDAScan_GetSwitch::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetControlJob::~SAction_PDAScan_SetControlJob()
SAction_PDAScan_SetControlJob::GetName() const
SAction_PDAScan_SetControlJob::GetInputs(SCmdParams&) const
SAction_PDAScan_SetControlJob::GetOutputs(SCmdParams&) const
SAction_PDAScan_Begin::~SAction_PDAScan_Begin()
SAction_PDAScan_Begin::GetName() const
SAction_PDAScan_Begin::GetInputs(SCmdParams&) const
SAction_PDAScan_Begin::GetOutputs(SCmdParams&) const
SAction_PDAScan_AddRequest::~SAction_PDAScan_AddRequest()
SAction_PDAScan_AddRequest::GetName() const
SAction_PDAScan_AddRequest::GetInputs(SCmdParams&) const
SAction_PDAScan_AddRequest::GetOutputs(SCmdParams&) const
SAction_PDAScan_RemoveRequest::~SAction_PDAScan_RemoveRequest()
SAction_PDAScan_RemoveRequest::GetName() const
SAction_PDAScan_RemoveRequest::GetInputs(SCmdParams&) const
SAction_PDAScan_RemoveRequest::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetDefaultZoomFOVRange::~SAction_PDAScan_SetDefaultZoomFOVRange()
SAction_PDAScan_SetDefaultZoomFOVRange::GetName() const
SAction_PDAScan_SetDefaultZoomFOVRange::GetInputs(SCmdParams&) const
SAction_PDAScan_SetDefaultZoomFOVRange::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetZoomFOVRange::~SAction_PDAScan_SetZoomFOVRange()
SAction_PDAScan_SetZoomFOVRange::GetName() const
SAction_PDAScan_SetZoomFOVRange::GetInputs(SCmdParams&) const
SAction_PDAScan_SetZoomFOVRange::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetZoom::~SAction_PDAScan_SetZoom()
SAction_PDAScan_SetZoom::GetName() const
SAction_PDAScan_SetZoom::GetInputs(SCmdParams&) const
SAction_PDAScan_SetZoom::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetDirection::~SAction_PDAScan_SetDirection()
SAction_PDAScan_SetDirection::GetName() const
SAction_PDAScan_SetDirection::GetInputs(SCmdParams&) const
SAction_PDAScan_SetDirection::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetCharacterInfo::~SAction_PDAScan_SetCharacterInfo()
SAction_PDAScan_SetCharacterInfo::GetName() const
SAction_PDAScan_SetCharacterInfo::GetInputs(SCmdParams&) const
SAction_PDAScan_SetCharacterInfo::GetOutputs(SCmdParams&) const
SAction_PDAScan_SetHint::~SAction_PDAScan_SetHint()
SAction_PDAScan_SetHint::GetName() const
SAction_PDAScan_SetHint::GetInputs(SCmdParams&) const
SAction_PDAScan_SetHint::GetOutputs(SCmdParams&) const
SAction_PDAScan_IsEnvironmentVisible::~SAction_PDAScan_IsEnvironmentVisible()
SAction_PDAScan_IsEnvironmentVisible::GetName() const
SAction_PDAScan_IsEnvironmentVisible::GetInputs(SCmdParams&) const
SAction_PDAScan_IsEnvironmentVisible::GetOutputs(SCmdParams&) const
GenericEventCreator<ScannableObjectiveProgress::CompleteEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<ScannableObjectiveProgress::MapOpenEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<ScannableObjectiveProgress::MapCloseEvent>::Create(ScriptContext&, ScriptScope&)
CharacterFocusSubjectRenderer::SharedData::SharedData()
CharacterFocusSubjectRenderer::SharedData::~SharedData()
CharacterFocusSubjectRenderer::SharedData::GetCharMaterialMap()
CharacterFocusSubjectRenderer::SharedData::CreateCharMaterialMap()
CharacterFocusSubjectRenderer::SharedData::SetColour(CharacterFocusSubjectRenderer::eColourId, float, float, float, bool)
CharacterFocusSubjectRenderer::SharedData::GetColour(CharacterFocusSubjectRenderer::eColourId) const
CharacterFocusSubjectRenderer::SharedData::NeedsColoursRecreating()
CharacterFocusSubjectRenderer::SharedData::RecreateColours()
CharacterFocusSubjectRenderer::SharedData::TempHack_SetTargetChar(ApiCharacter*)
CharacterFocusSubjectRenderer::SharedData::TempHack_IsTargetChar(ApiCharacter*)
CharacterFocusSubjectRenderer::SharedData::AcquireFrom(LevelContainer const*, int)
CharacterFocusSubjectRenderer::CharacterFocusSubjectRenderer(LevelContainer&)
CharacterFocusSubjectRenderer::~CharacterFocusSubjectRenderer()
non-virtual thunk to CharacterFocusSubjectRenderer::~CharacterFocusSubjectRenderer()
CharacterFocusSubjectRenderer::~CharacterFocusSubjectRenderer()
non-virtual thunk to CharacterFocusSubjectRenderer::~CharacterFocusSubjectRenderer()
CharacterFocusSubjectRenderer::AcquireSharedData(int)
CharacterFocusSubjectRenderer::GetPDAManager()
CharacterFocusSubjectRenderer::Register(int)
CharacterFocusSubjectRenderer::Unregister(int)
CharacterFocusSubjectRenderer::RequestActive(LevelContainer*, int, bool)
CharacterFocusSubjectRenderer::ActiveStatusChanged(bool)
non-virtual thunk to CharacterFocusSubjectRenderer::ActiveStatusChanged(bool)
CharacterFocusSubjectRenderer::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
CharacterFocusSubjectRenderer::RenderCharacter(ApiCharacter*, CharMaterialMap*, int)
CharacterFocusSubjectRenderer::GetColourForCharacter(ApiCharacter*, int)
CharacterFocusSubjectRenderer::SetColour(CityPDA_Scanner*, CharacterFocusSubjectRenderer::SharedData*, ApiCharacter*, CharacterFocusSubjectRenderer::eColourId, float)
CharacterFocusSubjectRenderer::GetOpacityForCharacter(ApiCharacter*, int)
KrawlieFocusSubjectRenderer::AcquireSharedData(int)
KrawlieFocusSubjectRenderer::GetPDAManager()
KrawlieFocusSubjectRenderer::ClearSharedData()
KrawlieFocusSubjectRenderer::KrawlieFocusSubjectRenderer(LevelContainer&)
KrawlieFocusSubjectRenderer::~KrawlieFocusSubjectRenderer()
non-virtual thunk to KrawlieFocusSubjectRenderer::~KrawlieFocusSubjectRenderer()
KrawlieFocusSubjectRenderer::~KrawlieFocusSubjectRenderer()
non-virtual thunk to KrawlieFocusSubjectRenderer::~KrawlieFocusSubjectRenderer()
KrawlieFocusSubjectRenderer::Register(int)
KrawlieFocusSubjectRenderer::Unregister(int)
KrawlieFocusSubjectRenderer::RequestActive(LevelContainer*, int, bool)
KrawlieFocusSubjectRenderer::ActiveStatusChanged(bool)
non-virtual thunk to KrawlieFocusSubjectRenderer::ActiveStatusChanged(bool)
KrawlieFocusSubjectRenderer::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
KrawlieFocusSubjectRenderer::RenderPlayArea(MechKrawliePlayArea&)
KrawlieFocusSubjectRenderer::RenderKrawlie(CharacterFocusSubjectRenderer::SharedData*, MechKrawlie*, VuMtx&, int)
CharacterSubjectInfoTable::Entry::Entry(HashedNameParam const&, char const*)
CharacterSubjectInfoTable::Entry::~Entry()
CharacterSubjectInfoTable::Entry::~Entry()
CharacterSubjectInfoTable::Entry::GetId() const
CharacterSubjectInfoTable::Entry::GetName() const
CharacterSubjectInfoTable::Entry::ApplyToHud(CityPDA_ScannerHudInterface*) const
CharacterSubjectInfoTable::CharacterSubjectInfoTable()
CharacterSubjectInfoTable::~CharacterSubjectInfoTable()
CharacterSubjectInfoTable::Clear()
CharacterSubjectInfoTable::GetNumEntries() const
CharacterSubjectInfoTable::GetEntry(int) const
CharacterSubjectInfoTable::FindEntry(int const&) const
CharacterSubjectInfoTable::AddEntry(CharacterSubjectInfoTable::Entry*)
CharacterSubjectInfoTable::LoadFromFile(char const*)
CharacterSubjectInfoTable::Parser::~Parser()
CharacterSubjectInfoInterface::CharacterSubjectInfoInterface()
CharacterSubjectInfoInterface::~CharacterSubjectInfoInterface()
CSListHeader<CharacterSubjectInfoInterface::Assignment>::Clear()
CharacterSubjectInfoInterface::GetSubjectInfoForCharacter(ApiCharacter const*)
CharacterSubjectInfoInterface::FindAssignmentForCharacter(ApiCharacter const*)
CharacterSubjectInfoInterface::FindRecent(void*)
CharacterSubjectInfoInterface::ChooseGenericSubjectInfoForCharacter(ApiCharacter const*)
CharacterSubjectInfoInterface::AddRecent(void*, CharacterSubjectInfoTable::Entry const*)
CharacterSubjectInfoInterface::AssignCharacterInfo(ApiCharacter*, int const&, bool)
CharacterSubjectInfoInterface::ClearAssignments()
CharacterSubjectInfoInterface::ClearInvalidAssignments()
CSListHeader<CharacterSubjectInfoInterface::Assignment>::Delete(CharacterSubjectInfoInterface::Assignment*)
CharacterSubjectInfoInterface::ClearRecentList()
CharacterSubjectInfoInterface::Assignment::Assignment(ApiCharacter*, CharacterSubjectInfoTable::Entry const*)
CharacterSubjectInfoInterface::Assignment::~Assignment()
CharacterFocusSubject::CharacterFocusSubject()
CharacterFocusSubject::AcquireWithSensor(FocusSensor*, float)
CharacterFocusSubject::ShouldIgnoreCharacter(ApiCharacter*, CharacterSceneFocusSensor*)
CharacterSceneFocusSensor::HasRequestForCharacter(ApiCharacter*) const
CharacterFocusSubject::AcquireSubjectPosition(VuVec&, bool)
CharacterFocusSubject::RefersToSameSubjectAs(FocusSubject*) const
CharacterFocusSubject::GetCharacter() const
CharacterFocusSubject::Request::Request(ApiCharacter*, int)
CharacterFocusSubject::Request::IsForSubject(CityPDA_ScannerCore::SceneFocusSubject const*)
CharacterFocusSubject::Request::AttemptRender(CityPDA_ScannerCore::SceneFocusSensor const*)
CharacterFocusSubject::Request::GetCharacter() const
CharacterSceneFocusSensor::CreateRequest(int, ScriptVariable*)
KrawlieFocusSubject::KrawlieFocusSubject()
KrawlieFocusSubject::AcquireWithSensor(FocusSensor*, float)
KrawlieFocusSubject::AcquireSubjectPosition(VuVec&, bool)
KrawlieFocusSubject::RefersToSameSubjectAs(FocusSubject*) const
ScannerVehicleRenderer::ScannerVehicleRenderer(LevelContainer&)
ScannerVehicleRenderer::~ScannerVehicleRenderer()
non-virtual thunk to ScannerVehicleRenderer::~ScannerVehicleRenderer()
ScannerVehicleRenderer::~ScannerVehicleRenderer()
non-virtual thunk to ScannerVehicleRenderer::~ScannerVehicleRenderer()
ScannerVehicleRenderer::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
ScannerVehicleRenderer::ActiveStatusChanged(bool)
non-virtual thunk to ScannerVehicleRenderer::ActiveStatusChanged(bool)
ScannerVehicleRenderer::RequestActive(LevelContainer*, int, bool)
ScannerPartsRenderer::ScannerPartsRenderer(LevelContainer&)
ScannerPartsRenderer::~ScannerPartsRenderer()
non-virtual thunk to ScannerPartsRenderer::~ScannerPartsRenderer()
ScannerPartsRenderer::~ScannerPartsRenderer()
non-virtual thunk to ScannerPartsRenderer::~ScannerPartsRenderer()
ScannerPartsRenderer::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
ScannerPartsRenderer::ActiveStatusChanged(bool)
non-virtual thunk to ScannerPartsRenderer::ActiveStatusChanged(bool)
ScannerPartsRenderer::RequestActive(LevelContainer*, int, bool)
CharacterFocusSubjectRenderer::GetManagerName() const
KrawlieFocusSubjectRenderer::GetManagerName() const
CharacterFocusSubject::~CharacterFocusSubject()
CharacterFocusSubject::~CharacterFocusSubject()
CharacterFocusSubject::Request::~Request()
CharacterFocusSubject::Request::~Request()
CharacterSceneFocusSensor::~CharacterSceneFocusSensor()
CityPDA_ScannerCore::TypedSceneFocusSensor<CharacterFocusSubject>::CreateSubjectBuffer()
KrawlieFocusSubject::~KrawlieFocusSubject()
ScannerVehicleRenderer::GetManagerName() const
ScannerPartsRenderer::GetManagerName() const
CharacterFocusSubjectAddOn::~CharacterFocusSubjectAddOn()
CharacterFocusSubjectAddOn::OnAdded()
CharacterFocusSubjectAddOn::OnRemoved()
CharacterFocusSubjectAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CharacterFocusSubjectAddOn::~CharacterFocusSubjectAddOn()
non-virtual thunk to CharacterFocusSubjectAddOn::~CharacterFocusSubjectAddOn()
non-virtual thunk to CharacterFocusSubjectAddOn::OnHook(unsigned char, HookArgs*)
CharacterSubjectInfoTable::Parser::~Parser()
CharacterSubjectInfoTable::Parser::BeginItem(DynamicString const&)
CharacterSubjectInfoTable::Parser::ProcessItemField(DynamicString const&)
CharacterSubjectInfoTable::Parser::EndItem(DynamicString const&)
TwoLineCharInfoEntry::~TwoLineCharInfoEntry()
TwoLineCharInfoEntry::~TwoLineCharInfoEntry()
TwoLineCharInfoEntry::ApplyToHud(CityPDA_ScannerHudInterface*) const
ClassManagerAccessor<CharacterFocusSubjectRenderer>::GetFromCreate(ILevelContainer const&)
ClassManagerAccessor<KrawlieFocusSubjectRenderer>::GetFromCreate(ILevelContainer const&)
NuVector<CharacterSubjectInfoTable::Entry*>::Reserve(unsigned int, bool)
ClassManagerAccessor<ScannerVehicleRenderer>::GetFromCreate(ILevelContainer const&)
ClassManagerAccessor<ScannerPartsRenderer>::GetFromCreate(ILevelContainer const&)
ScannedDataInfo::ScannedDataInfo()
ScannedDataInfo::~ScannedDataInfo()
ScannedDataInfo::AcquireBeacon(LocalScannable*, LocalScannableDataStatus&)
ScannedDataInfo::AcquireDataFrom(LocalScannable*, LocalScannableDataStatus&)
LocalScannable::GetPosition() const
ScannedDataInfo::Clear()
ScannedDataInfo::GetWorldPosition() const
ScannedDataInfo::IsValid() const
ScannedDataInfo::UpdateBeacon(float)
ScannedDataInfo::GetPinIconType() const
ScannedDataInfo::HasExpired()
ScannedDataInfo::BeaconChanged()
ScannedDataInfo::GetItemDescription() const
ScannedDataInfo::IsDescriptionLocalised() const
ScannedDataInfo::GetItemTitle() const
ScannedDataInfo::GetIconConfig() const
ScannedDataInfo::GetIcon() const
LocalScannableDataStatus::LocalScannableDataStatus(CityPDAManager*)
LocalScannableDataStatus::~LocalScannableDataStatus()
LocalScannableDataStatus::GetPin()
LocalScannableDataStatus::UpdatePinFlash(float)
LocalScannableDataStatus::Update(float)
LocalScannableDataStatus::RestorePin()
LocalScannableDataStatus::GetItem()
LocalScannableDataStatus::Clear()
LocalScannableDataStatus::RecordScannable(LocalScannable*)
LocalScannableDataStatus::HighlightPin()
LocalScannableDataStatus::GetManager()
LocalScannableDataStatus::CheckForInterest() const
ScannableIconTypes::IconTypeInfo::IconTypeInfo()
ScannableIconTypes::IconTypeInfo::~IconTypeInfo()
ScannableIconTypes::IconTypeInfo::NeedsUpgrade() const
ScannableIconTypes::AllocateTypes(int)
ScannableIconTypes::DestroyTypes()
ScannableIconTypes::ScannableIconTypes()
ScannableIconTypes::~ScannableIconTypes()
ScannableIconTypes::GetIconTypeInfo(int) const
ScannableIconTypes::LoadFromFile(char const*)
ScannableIconTypes::GetIconIdForText(char const*) const
ScannableIconTypes::Parser::~Parser()
ScannableIconTypes::GetNumIconTypes() const
ScannableIconTypes::GetTextForIconId(int) const
ScannableIconTypes::GetSpecialNameForIconId(int) const
ScannableIconTypes::GetOverrideTintForIconId(int) const
ScannableIconTypes::HasOverrideTintForIconId(int) const
ScannableIconTypes::Fixup()
ScannableIconTypes::GetCheatIdForRedBrickName(char const*)
ScannableIconTypes::IsUpgradedFor(int)
ScannableIconTypeInterface::ScannableIconTypeInterface(LevelContainer*)
ScannableIconTypeInterface::~ScannableIconTypeInterface()
ScannableIconTypeInterface::GetSpecialForIcon(int) const
LocalScannable::Beacon::Beacon(LocalScannableDataStatus&)
LocalScannable::Beacon::~Beacon()
LocalScannable::Beacon::~Beacon()
LocalScannable::Beacon::GetOwner() const
LocalScannable::Beacon::Update(float, ScannedDataInfo&)
LocalScannable::LocalScannable()
Scannables::Locked::~Locked()
LocalScannable::~LocalScannable()
LocalScannable::SetPosition(VuVec const&)
LocalScannable::GetId() const
LocalScannable::IsDetectedBy(CityPDA_ScannerCore::SceneCamera&) const
LocalScannable::CanBeDetected() const
LocalScannable::SetIconId(int)
LocalScannable::GetIconId() const
LocalScannable::ResetIconId()
LocalScannable::GetDefaultIconId() const
LocalScannable::GetTint() const
LocalScannable::GetDefaultTint() const
LocalScannable::GetIconConfig() const
LocalScannable::GetScanTitleText() const
LocalScannable::GetScanHintText(bool&) const
LocalScannable::GetMapPinIconType() const
LocalScannable::GetSpecial()
LocalScannableScene::GetSpecialForScannable(LocalScannable*) const
LocalScannable::Update(float)
LocalScannable::Render()
LocalScannableScene::GetCommonRotation() const
LocalScannable::SetFound(bool)
LocalScannable::HasBeenFound() const
LocalScannable::OnFocus() const
LocalScannable::CanBeLocked() const
LocalScannable::CreateBeacon(LocalScannableDataStatus&)
Scannables::Locked::Locked(VuVec const&)
Scannables::Locked::~Locked()
Scannables::Locked::GetDefaultIconId() const
Scannables::Locked::CanBeLocked() const
Scannables::Locked::GetDefaultTint() const
Scannables::Locked::GetScanTitleText() const
Scannables::Locked::GetScanHintText(bool&) const
LocalScannableScene::LocalScannableScene(LevelContainer*)
LocalScannableScene::~LocalScannableScene()
LocalScannableScene::Update(float)
LocalScannableScene::AddScannable(LocalScannable*)
LocalScannableScene::RemoveScannable(LocalScannable*)
LocalScannableScene::GetNumScannables() const
LocalScannableScene::GetScannableAt(int) const
LocalScannableScene::GetFirstScannable() const
LocalScannableScene::AcquireLocalScannables(CityPDA_ScannerCore::SceneCamera&)
LocalScannableScene::GenerateHallucinatoryPickups(CityPDA_ScannerCore::SceneCamera&)
LocalScannableScene::Clear()
LocalScannableScene::AcquireScannableSubject(CityPDA_ScannerCore::SceneCamera&) const
LocalScannableScene::FindScannableAtPosition(VuVec const&, float)
LocalScannableFocusSubject::LocalScannableFocusSubject()
LocalScannableFocusSubject::AcquireWithSensor(FocusSensor*, float)
LocalScannableSceneFocusSensor::GetScannableScene() const
LocalScannableFocusSubject::AcquireSubjectPosition(VuVec&, bool)
LocalScannableFocusSubject::RefersToSameSubjectAs(FocusSubject*) const
LocalScannableFocusSubject::GetScannable() const
LocalScannableSceneFocusSensor::LocalScannableSceneFocusSensor()
LocalScannableSceneFocusSensor::SetScannableScene(LocalScannableScene*)
LocalScannableSceneFocusSensor::RefreshCurrentSubjectInfo(FocusSubject*, bool)
LocalScannableFocusSubjectRenderer::LocalScannableFocusSubjectRenderer(LevelContainer&)
LocalScannableFocusSubjectRenderer::~LocalScannableFocusSubjectRenderer()
non-virtual thunk to LocalScannableFocusSubjectRenderer::~LocalScannableFocusSubjectRenderer()
LocalScannableFocusSubjectRenderer::~LocalScannableFocusSubjectRenderer()
non-virtual thunk to LocalScannableFocusSubjectRenderer::~LocalScannableFocusSubjectRenderer()
LocalScannableFocusSubjectRenderer::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LocalScannableFocusSubjectRenderer::GetMaterialMap()
LocalScannableFocusSubjectRenderer::Register(LocalScannableScene*, int)
LocalScannableFocusSubjectRenderer::Unregister(int)
LocalScannableFocusSubjectRenderer::ActiveStatusChanged(bool)
non-virtual thunk to LocalScannableFocusSubjectRenderer::ActiveStatusChanged(bool)
LocalScannableFocusSubjectRenderer::RequestActive(LevelContainer*, int, LocalScannableScene*)
LocalScannableFocusSubjectRenderer::CreateMaterialMap()
LocalScannableFocusSubjectRenderer::GetPDAManager()
Scannables::Locked::GetScannableType() const
LocalScannableFocusSubject::~LocalScannableFocusSubject()
LocalScannableFocusSubject::~LocalScannableFocusSubject()
LocalScannableSceneFocusSensor::~LocalScannableSceneFocusSensor()
CityPDA_ScannerCore::TypedSceneFocusSensor<LocalScannableFocusSubject>::CreateSubjectBuffer()
LocalScannableFocusSubjectRenderer::GetManagerName() const
ScannableIconTypes::Parser::~Parser()
ScannableIconTypes::Parser::BeginItem(DynamicString const&)
ScannableIconTypes::Parser::ProcessItemField(DynamicString const&)
ScannableIconTypes::Parser::EndItem(DynamicString const&)
ClassManagerAccessor<LocalScannableFocusSubjectRenderer>::GetFromCreate(ILevelContainer const&)
ScannableCollectableType::ScannableCollectableType(int, int, char const*, char const*, char const*)
ScannableCollectableType::SetIconTint(char const*)
ScannableCollectableType::GetTint() const
ScannableCollectableType::~ScannableCollectableType()
ScannableCollectableType::Get2DIconTextureName(char*, int, int) const
ScannableCollectableType::GetInfoText(GizmoPickup*) const
ScannableCollectableType::GetInstanceText(GizmoPickup*, bool&) const
ScannableCollectableType::GetIconId() const
ScannableCollectableTypeTable::ScannableCollectableTypeTable()
ScannableCollectableTypeTable::~ScannableCollectableTypeTable()
ScannableCollectableTypeTable::AddEntry(ScannableCollectableType*)
ScannableCollectableTypeTable::FindTypeInfo(int) const
ScannableCollectableTypeTable::LoadFromFile(char const*)
ScannableCollectableTypeTable::Parser::~Parser()
CollectableInfoInterface::CollectableInfoInterface()
CollectableInfoInterface::~CollectableInfoInterface()
CollectableInfoInterface::IsTypeSupported(int) const
CollectableInfoInterface::FindEntry(int) const
ScannableCollectableManager::PickupLock::PickupLock(GizmoPickup*, BasicUnlockCriterion const&)
ScannableCollectableManager::PickupLock::~PickupLock()
ScannableCollectableManager::PickupLock::GetPickup() const
ScannableCollectableManager::PickupLock::GetCriterion() const
ScannableCollectableManager::ScannableCollectableManager(LevelContainer&)
ScannableCollectableSystem::GetHelper()
ScannableCollectableManager::~ScannableCollectableManager()
ScannableCollectableManager::~ScannableCollectableManager()
ScannableCollectableManager::EventNotify(Event&, NuEventData&)
ScannableCollectableManager::FindLockForPickup(GizmoPickup*) const
ScannableCollectableManager::IsPickupLocked(GizmoPickup*)
ScannableCollectableManager::LockPickup(GizmoPickup*, BasicUnlockCriterion const&)
ScannableCollectableManager::UnlockPickup(GizmoPickup*)
ScannableCollectableManager::FlushUnlocks()
ScannableCollectableSystem::ScannableCollectableSystem()
ScannableCollectableSystem::~ScannableCollectableSystem()
ScannableCollectableSystem::~ScannableCollectableSystem()
ScannableCollectableSystem::Init()
ScannableCollectableSystem::ShutDown()
ScannableCollectableSystem::SetPickupLockCriterion(GizmoPickup*, BasicUnlockCriterion const&)
ScannableCollectableSystem::FindManagerFor(GizmoPickup*, bool)
ScannableCollectableSystem::IsPickupLocked(GizmoPickup*)
SAction_PDAScan_LockPickup::Exec(ScriptContext&)
SAction_PDAScan_IsPickupLocked::Exec(ScriptContext&)
Scannables::Collectable::Collectable(GizmoPickup*)
Scannables::Collectable::~Collectable()
Scannables::Collectable::~Collectable()
Scannables::Collectable::GetPickup() const
Scannables::Collectable::OnFocus() const
Scannables::Collectable::GetDefaultIconId() const
Scannables::Collectable::GetDefaultTint() const
Scannables::Collectable::GetIconConfig() const
Scannables::Collectable::GetScanTitleText() const
Scannables::Collectable::GetScanHintText(bool&) const
Scannables::Collectable::CreateBeacon(LocalScannableDataStatus&)
Scannables::CollectableGatherer::CollectableGatherer(LocalScannableScene&, CollectableInfoInterface&, VuVec const&, float)
Scannables::CollectableGatherer::~CollectableGatherer()
Scannables::CollectableGatherer::IsTypeSupported(int)
Scannables::CollectableGatherer::GatherFrom(LevelContainer*)
Scannables::CollectableGatherer::GatherFromList(GizmoCSList*)
Scannables::CollectableGatherer_IsCollected(GizmoPickup*)
SAction_PDAScan_LockPickup::~SAction_PDAScan_LockPickup()
SAction_PDAScan_LockPickup::GetName() const
SAction_PDAScan_LockPickup::GetInputs(SCmdParams&) const
SAction_PDAScan_LockPickup::GetOutputs(SCmdParams&) const
SAction_PDAScan_IsPickupLocked::~SAction_PDAScan_IsPickupLocked()
SAction_PDAScan_IsPickupLocked::GetName() const
SAction_PDAScan_IsPickupLocked::GetInputs(SCmdParams&) const
SAction_PDAScan_IsPickupLocked::GetOutputs(SCmdParams&) const
ScannableCollectableType::ShowFocusHud(CityPDA_ScannerHudInterface&)
ScannableCollectableType::HideFocusHud(CityPDA_ScannerHudInterface&)
Scannables::Collectable::GetScannableType() const
ScannableCollectableTypeTable::Parser::~Parser()
ScannableCollectableTypeTable::Parser::BeginItem(DynamicString const&)
ScannableCollectableTypeTable::Parser::ProcessItemField(DynamicString const&)
ScannableCollectableTypeTable::Parser::EndItem(DynamicString const&)
ScannableCollectableType::~ScannableCollectableType()
CollectableTypes::CharToken::~CharToken()
CollectableTypes::CharToken::Get2DIconTextureName(char*, int, int) const
CollectableTypes::CharToken::GetInfoText(GizmoPickup*) const
CollectableTypes::CharToken::GetInstanceText(GizmoPickup*, bool&) const
ScannableCollectableManagerHelper::~ScannableCollectableManagerHelper()
Scannables::CollectableBeacon::~CollectableBeacon()
Scannables::CollectableBeacon::~CollectableBeacon()
Scannables::CollectableBeacon::Update(float, ScannedDataInfo&)
Scannables::CollectableBeacon::OnHook(unsigned char, HookArgs*)
Scannables::CollectableBeacon::GetLevelContainer() const
non-virtual thunk to Scannables::CollectableBeacon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to Scannables::CollectableBeacon::GetLevelContainer() const
ClassManagerAccessor<ScannableCollectableManager>::GetFromCreate(ILevelContainer const&)
Scannables::Objective::Objective(VuVec const&, ScannableObjectiveInterface&, int)
Scannables::Objective::~Objective()
Scannables::Objective::~Objective()
Scannables::Objective::GetInstanceHandle() const
Scannables::Objective::GetDefaultIconId() const
Scannables::Objective::GetDefaultTint() const
Scannables::Objective::GetIconConfig() const
Scannables::Objective::CreateBeacon(LocalScannableDataStatus&)
Scannables::Objective::GetScanTitleText() const
Scannables::Objective::GetScanHintText(bool&) const
Scannables::ObjectiveGatherer::ObjectiveGatherer(LocalScannableScene&, ScannableObjectiveInterface&, VuVec const&, float)
Scannables::ObjectiveGatherer::~ObjectiveGatherer()
Scannables::ObjectiveGatherer::ProcessObjective(VuVec const&, int)
Scannables::ObjectiveGatherer::GatherFrom(LevelContainer*, bool)
void Scannables::ObjectiveGatherer::ProcessGizmos<ComplexGizmo, ComplexGizmoManager>(LevelContainer*)
void Scannables::ObjectiveGatherer::ProcessGizmos<GizmoCitySimpleProp, GizmoCitySimplePropManager>(LevelContainer*)
void Scannables::ObjectiveGatherer::ProcessGizmos<LegoCityObstacle, GizmoObstacleManager>(LevelContainer*)
void Scannables::ObjectiveGatherer::ProcessGizmos<GizmoSpellIt, GizmoSpellItManager>(LevelContainer*)
void Scannables::ObjectiveGatherer::ProcessGizmos<SuperBuildGizmo, SuperBuildGizmoManager>(LevelContainer*)
LegoCityGizAction_CityObjectiveComplete(Flow*, FlowObject*, char**, int)
LegoCityGizAction_CityObjectiveHide(Flow*, FlowObject*, char**, int)
ScannableObjectiveSystem::RegisterGizActions()
ObjectiveFlowObjectHelper::Initialise()
ObjectiveFlowObjectHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ObjectiveFlowObjectHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ObjectiveFlowObjectHelper::GetParentObject(ClassObject const&)
ObjectiveFlowTarget::ObjectiveFlowTarget()
ObjectiveFlowTarget::SetObjectiveInstanceId(char const*)
ObjectiveFlowObject::ObjectiveFlowObject(short)
ObjectiveFlowObject::Process(Flow*, unsigned char)
ObjectiveFlowObject::CheckOutput(Flow*, unsigned char)
ObjectiveFlowObject::GetNumericalOutput(Flow*, unsigned char)
Scannables::Objective::GetScannableType() const
ObjectiveFlowObjectHelper::~ObjectiveFlowObjectHelper()
ObjectiveFlowObject::~ObjectiveFlowObject()
ObjectiveFlowTarget::~ObjectiveFlowTarget()
Scannables::ObjectiveBeacon::~ObjectiveBeacon()
Scannables::ObjectiveBeacon::~ObjectiveBeacon()
Scannables::ObjectiveBeacon::Update(float, ScannedDataInfo&)
EdRefObjectiveFlowObject::~EdRefObjectiveFlowObject()
EdRefObjectiveFlowObject::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefObjectiveFlowObject::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ShowHint_ShowFlashUI(char const*, bool)
HintTracker::Show(char const*, bool)
ShowHint_HideFlashUI()
HintTracker::Hide()
ShowHint_FlashUIFinishedScrolling()
HintTracker::IsTextScrollerClamped()
HintTracker::GetTickerTapeTextScroller()
TickerTapeTextScroller::IsFinished() const
GameTrackerModel::GameTrackerModel()
GameTrackerModel::~GameTrackerModel()
GameTrackerModel::~GameTrackerModel()
GameTrackerModel::Init()
GameTrackerModel::OnInitPostConfig()
ObjectiveTracker::SetUIOverlay(UIOverlay*)
HintTracker::SetUIOverlay(UIOverlay*)
GameTrackerModel::ShutDown()
GameTrackerModel::ProcessLevelOnly(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ObjectiveTracker::UpdateTarget()
ObjectiveTracker::UpdateUI(float)
HintTracker::UpdateTarget()
HintTracker::UpdateUI(float)
GameTrackerModel::ShouldAddManagersForLevel(MechLevelContainer&)
GameTrackerModel::IsMainLevel(MechLevelContainer&)
GameTrackerModel::AddManagersForLevel(LegoLevelContainer&)
GameTrackerModelContainer::RegisterProcessing()
GameTrackerModel::RemoveManagersForLevel(LegoLevelContainer&)
GameTrackerModel::OnEnterLevel(LegoLevelContainer&)
GameTrackerModel::OnExitLevel(LegoLevelContainer&)
ObjectiveTracker::OnExitLevel()
GameTrackerModel::ParseCommandLine(int, char**)
GameTrackerModel::EventNotify(Event&, NuEventData&)
GameTrackerModelContainer::GameTrackerModelContainer()
GameTrackerModelContainer::~GameTrackerModelContainer()
GameTrackerModelContainer::~GameTrackerModelContainer()
GameTrackerModelContainer::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ObjectiveTracker::ObjectiveHUD::ObjectiveHUD()
ObjectiveTracker::ObjectiveHUD::~ObjectiveHUD()
ObjectiveTracker::ObjectiveHUD::InitFromOverlay(UIOverlay&)
ObjectiveTracker::ObjectiveHUD::Update()
ObjectiveTracker::ObjectiveHUD::SetVisibility(bool)
ObjectiveTracker::ObjectiveHUD::Show()
ObjectiveTracker::ObjectiveHUD::Hide()
ObjectiveTracker::ObjectiveHUD::IsShowing() const
ObjectiveTracker::ObjectiveHUD::SetShowDuringMiniCut(bool)
ObjectiveTracker::ObjectiveHUD::GetElement(ObjectiveTracker::ObjectiveHUD::eElementIDs)
ObjectiveTracker::ObjectiveInfo::ObjectiveInfo()
ObjectiveTracker::ObjectiveInfo::~ObjectiveInfo()
ObjectiveTracker::ObjectiveInfo::GetText() const
ObjectiveTracker::ObjectiveInfo::GetDisplayTime() const
ObjectiveTracker::ObjectiveInfo::IsValid() const
ObjectiveTracker::ObjectiveInfo::Clear()
ObjectiveTracker::ObjectiveInfo::Configure(char const*, float)
ObjectiveTracker::ObjectiveMarker::ObjectiveMarker()
ObjectiveTracker::ObjectiveMarker::~ObjectiveMarker()
ObjectiveTracker::ObjectiveMarker::TurnOff(bool)
ObjectiveTracker::ObjectiveMarker::~ObjectiveMarker()
ObjectiveTracker::ObjectiveMarker::Process()
ObjectiveTracker::ObjectiveMarker::UpdateGameMarkerToTarget()
ObjectiveTracker::ObjectiveMarker::UpdateMarkerPinToTarget(int)
ObjectiveTracker::ObjectiveMarker::EnableInGameMarker(bool)
ObjectiveTracker::ObjectiveMarker::ShowInGameMarker(bool)
ObjectiveTracker::ObjectiveMarker::EnableMapPin(bool)
ObjectiveTracker::ObjectiveMarker::ShowMapPin(int, bool)
ObjectiveTracker::ObjectiveMarker::ResetPin(int, bool)
ObjectiveTracker::ObjectiveMarker::IsShowingGameMarker()
ObjectiveTracker::ObjectiveMarker::IsObjectiveCurrentDestination(int)
ObjectiveTracker::ObjectiveMarker::Show(bool)
ObjectiveTracker::ObjectiveMarker::GetMarkerGameIcon()
ObjectiveTracker::ObjectiveMarker::GetMarkerMapPin(int) const
ObjectiveTracker::ObjectiveMarker::GetObjectiveMarkerSpecial()
ObjectiveTracker::ObjectiveMarker::FadeInGameMarker()
ObjectiveTracker::ObjectiveMarker::FadeOutGameMarker()
ObjectiveTracker::ObjectiveMarker::UpdateMarkersToTarget(bool)
ObjectiveTracker::ObjectiveMarker::EventNotify(Event&, NuEventData&)
ObjectiveTracker::ObjectiveTracker()
ObjectiveTracker::~ObjectiveTracker()
ObjectiveTracker::ClearObjectives()
ObjectiveTracker::~ObjectiveTracker()
TickerTapeTextScroller::SetElement(FlashElement*)
TickerTapeTextScroller::SetScreenSize(float)
ObjectiveTracker::RequestToShowObjectiveHUD()
ObjectiveTracker::ShowObjectiveHUD(bool, unsigned int)
TickerTapeTextScroller::IsTextClamped(bool)
TickerTapeTextScroller::StartScrolling(float, unsigned int, TickerTapeTextScroller::eDirection)
TickerTapeTextScroller::SetScrollPositionToCentre(bool)
TickerTapeTextScroller::Pause(bool)
TickerTapeTextScroller::Update(float)
ObjectiveTracker::SetNewObjective(char const*, float, bool)
TickerTapeTextScroller::SetText(char const*)
TickerTapeTextScroller::IsValid()
TickerTapeTextScroller::Clear()
ObjectiveTracker::HasObjective()
ObjectiveTracker::GetCurrentObjectiveInfo()
ObjectiveTracker::GetObjectiveMarker()
ObjectiveTracker::GetTextScroller()
ObjectiveTracker::EventNotify(Event&, NuEventData&)
HintTracker::HintHUD::HintHUD()
HintTracker::HintHUD::~HintHUD()
HintTracker::HintHUD::InitFromOverlay(UIOverlay&)
HintTracker::HintHUD::Update()
HintTracker::HintHUD::SetVisibility(bool)
PlayHintSoundSample(short const&)
HintTracker::HintHUD::Show(char const*, bool)
HintTracker::HintHUD::Hide()
HintTracker::HintHUD::GetElement(HintTracker::HintHUD::eElementIDs)
HintTracker::HintTracker()
HintTracker::~HintTracker()
HintTracker::~HintTracker()
HintTracker::EventNotify(Event&, NuEventData&)
HintTracker::OnExitLevel()
Score::Score()
Score::Score(int, int)
Score::Score(Score const&)
Score::operator==(Score const&) const
Score::operator!=(Score const&) const
Score::operator=(Score const&)
Score::operator+=(Score const&)
Score::operator+(Score const&)
Score::operator*=(int)
Score::operator*(int)
Score::~Score()
Score::Clear()
Score::SetTotal(int)
Score::SetValue(int)
Score::GetTotal() const
Score::GetValue() const
Score::GetNormalisedValue() const
Score::AddResult(bool, int)
Score::AddSuccess(int)
Score::AddFailure(int)
Score::Add(Score const&)
LegoCity_GetStoryCompletionScore(int)
TickerTapeTextScroller::TickerTapeTextScroller(int const&)
TickerTapeTextScroller::~TickerTapeTextScroller()
TickerTapeTextScroller::FlashHandler::GetElement()
TickerTapeTextScroller::~TickerTapeTextScroller()
TickerTapeTextScroller::FlashHandler::SetElement(FlashElement*)
TickerTapeTextScroller::StopAndReset()
TickerTapeTextScroller::GetElement()
TickerTapeTextScroller::UpdateState(TickerTapeTextScroller::eState, float)
TickerTapeTextScroller::SetSpeed(float)
TickerTapeTextScroller::ResetToStartPos()
TickerTapeTextScroller::StringClamper::SetFinalString(char const*, TickerTapeTextScroller::FlashHandler const&, bool)
TickerTapeTextScroller::SetText(StringDatabaseLabel const&)
TickerTapeTextScroller::GetText() const
TickerTapeTextScroller::StringClamper::GetFinalString() const
TickerTapeTextScroller::CopyStringData(TickerTapeTextScroller const&)
TickerTapeTextScroller::FlashHandler::GetTextSceneSizeUsingElement(char const*) const
TickerTapeTextScroller::GetTickerTapeData()
TickerTapeTextScroller::SetScrollPosition(float, bool, bool)
TickerTapeTextScroller::UpdateScrollPosition(bool)
TickerTapeTextScroller::StringClamper::GetClampedString()
TickerTapeTextScroller::FlashHandler::Hide()
TickerTapeTextScroller::SetNewState(TickerTapeTextScroller::eState)
TickerTapeTextScroller::SetDirection(TickerTapeTextScroller::eDirection)
TickerTapeTextScroller::IsPlaying() const
TickerTapeTextScroller::GetDisplayCount() const
TickerTapeTextScroller::IsFinishedOnce() const
TickerTapeTextScroller::FlashHandler::Show()
TickerTapeTextScroller::UpdateTickerPosition(float)
TickerTapeTextScroller::CheckDisplayCount()
TickerTapeTextScroller::FlashHandler::UpdateElementText(TickerTapeTextScroller::TickerTapeData&)
TickerTapeTextScroller::StringClamper::Clamp(float, float)
TickerTapeTextScroller::FlashHandler::SetPosition(float)
TickerTapeTextScroller::EventNotify(Event&, NuEventData&)
TickerTapeTextScroller::StringClamper::StringClamper()
TickerTapeTextScroller::StringClamper::~StringClamper()
TickerTapeTextScroller::FlashHandler::GetCharSceneSizeUsingElement(unsigned short const*, unsigned short const*) const
TickerTapeTextScroller::FlashHandler::GetIconSizeUsingElement(char const*) const
TickerTapeTextScroller::StringClamper::UpdateBuffer(unsigned int, unsigned int)
TickerTapeTextScroller::StringClamper::GetFinalStringLength()
TickerTapeTextScroller::StringClamper::GetStartPos()
TickerTapeTextScroller::FlashHandler::FlashHandler(int const&)
TickerTapeTextScroller::FlashHandler::~FlashHandler()
QueuedTickerTape::QueuedTickerTape(int const&)
QueuedTickerTape::~QueuedTickerTape()
QueuedTickerTape::~QueuedTickerTape()
QueuedTickerTape::InitFromElement(FlashElement*)
QueuedTickerTape::Update(float)
QueuedTickerTape::Reset()
QueuedTickerTape::Clear()
QueuedTickerTape::AddText(char const*, bool, bool, bool)
QueuedTickerTape::CopyAndSetTextFromScroller(TickerTapeTextScroller const&, bool)
QueuedTickerTape::GetTickerTape() const
QueuedTickerTape::GetTickerTape()
QueuedTickerTape::EventNotify(Event&, NuEventData&)
GameTrackerModelHelper::~GameTrackerModelHelper()
LegoCityGizmos::LegoCityGizmos()
LegoCityGizmos::~LegoCityGizmos()
LegoCityGizmos::~LegoCityGizmos()
LegoCityGizmos::GizmoExtraCreateInstance(Gizmo&, Gizmo&)
LegoCitySpellIts::NotifySpellItFinished(GizmoSpellIt const&) const
LegoCitySpellIts::BuildStageAssembling(GizSpellItItem&)
LegoCitySpellIts::OnEarlyUpdate(GizmoSpellIt&)
LegoCitySpellIts::~LegoCitySpellIts()
LegoGizmoSystemBase<LegoSpellIts>::ShutDown()
LegoGizmoSystemBase<LegoSpellIts>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoSpellIts::AllowPhysicsSlam(Gizmo&) const
LegoSpellIts::WhatToDoWhenCannotUseSpellItOrBuiltIt(MechCharacter&, GizmoSpellIt*)
LegoSpellIts::GameSpecificProximityCheck(MechCharacter&, GizmoSpellIt&)
LegoSpellIts::ShouldDrawTwinkles(GizmoSpellIt const&) const
LegoSpellIts::ShouldDrawGlow(GizmoSpellIt const&) const
LegoSpellIts::IsKinematicHopAllowed() const
LegoSpellIts::GetMaxBuildDuration(GizmoSpellIt const&) const
LegoSpellIts::GetTimeScaleMultiplier(MechCharacter&)
LegoSpellIts::MovePlayer(MechCharacter*)
LegoSpellIts::ShouldAutoBuild(GizmoSpellIt const&) const
non-virtual thunk to LegoSpellIts::AllowPhysicsSlam(Gizmo&) const
LegoCityGizmos::GizmoExtraSaveVersion()
LegoCityGizmos::GizmoExtraSave(Gizmo&)
LegoCityGizmos::GizmoExtraLoad(Gizmo&, int)
LegoGizmos::GizmoAcquireLegoSpecialPriority(Gizmo&)
LegoCityGizmoObject::LegoCityGizmoObject()
LegoCityGizmoObject::~LegoCityGizmoObject()
LegoCityGizmoObject::~LegoCityGizmoObject()
StrongPtr<cLegoCityAISectorNode>::operator new(unsigned long, void*)
StrongPtr<cLegoCityAISectorNode>::operator delete(void*, void*)
StrongPtr<cLegoCityAISectorNode>::operator new(unsigned long)
StrongPtr<cLegoCityAISectorNode>::operator new(unsigned long, unsigned long)
StrongPtr<cLegoCityAISectorNode>::operator new[](unsigned long)
StrongPtr<cLegoCityAISectorNode>::operator new[](unsigned long, unsigned long)
StrongPtr<cLegoCityAISectorNode>::operator delete(void*)
StrongPtr<cLegoCityAISectorNode>::operator delete[](void*)
StrongPtr<cLegoCityAISectorNode>::StrongPtr()
StrongPtr<cLegoCityAISectorNode>::StrongPtr(StrongPtr<cLegoCityAISectorNode> const&)
StrongPtr<cLegoCityAISectorNode>::operator=(StrongPtr<cLegoCityAISectorNode> const&)
StrongPtr<cLegoCityAISectorNode>::releaseRef()
StrongPtr<cLegoCityAISectorNode>::operator=(Null)
StrongPtr<cLegoCityAISectorNode>::~StrongPtr()
StrongPtr<cLegoCityAISectorNode>::operator*() const
StrongPtr<cLegoCityAISectorNode>::operator->() const
StrongPtr<cLegoCityAISectorNode>::get() const
StrongPtr<cLegoCityAISectorNode>::StrongRefCount() const
StrongPtr<cLegoCityAISectorNode>::WeakRefCount() const
StrongPtr<cLegoCityAISectorNode>::IsNull() const
StrongPtr<cLegoCityAISectorNode>::FudgeStrongRefCount()
StrongPtr<cLegoCityAISectorNode>::StrongPtr(cLegoCityAISectorNode*, RefCounts*)
WeakPtr<cLegoCityAISectorNode>::WeakPtr()
WeakPtr<cLegoCityAISectorNode>::WeakPtr(WeakPtr<cLegoCityAISectorNode> const&)
WeakPtr<cLegoCityAISectorNode>::operator=(WeakPtr<cLegoCityAISectorNode> const&)
WeakPtr<cLegoCityAISectorNode>::get() const
WeakPtr<cLegoCityAISectorNode>::releaseRef()
WeakPtr<cLegoCityAISectorNode>::operator=(Null)
WeakPtr<cLegoCityAISectorNode>::~WeakPtr()
WeakPtr<cLegoCityAISectorNode>::operator*() const
WeakPtr<cLegoCityAISectorNode>::operator->() const
WeakPtr<cLegoCityAISectorNode>::StrongRefCount() const
WeakPtr<cLegoCityAISectorNode>::WeakRefCount() const
WeakPtr<cLegoCityAISectorNode>::WeakPtr(cLegoCityAISectorNode*, RefCounts*)
WeakPtr<cLegoCityAISectorNode>::isNull() const
StrongPtr<cAttackManager>::operator new(unsigned long, void*)
StrongPtr<cAttackManager>::operator delete(void*, void*)
StrongPtr<cAttackManager>::operator new(unsigned long)
StrongPtr<cAttackManager>::operator new(unsigned long, unsigned long)
StrongPtr<cAttackManager>::operator new[](unsigned long)
StrongPtr<cAttackManager>::operator new[](unsigned long, unsigned long)
StrongPtr<cAttackManager>::operator delete(void*)
StrongPtr<cAttackManager>::operator delete[](void*)
StrongPtr<cAttackManager>::StrongPtr()
StrongPtr<cAttackManager>::StrongPtr(StrongPtr<cAttackManager> const&)
StrongPtr<cAttackManager>::operator=(StrongPtr<cAttackManager> const&)
StrongPtr<cAttackManager>::releaseRef()
StrongPtr<cAttackManager>::operator=(Null)
StrongPtr<cAttackManager>::~StrongPtr()
StrongPtr<cAttackManager>::operator*() const
StrongPtr<cAttackManager>::operator->() const
StrongPtr<cAttackManager>::get() const
StrongPtr<cAttackManager>::StrongRefCount() const
StrongPtr<cAttackManager>::WeakRefCount() const
StrongPtr<cAttackManager>::IsNull() const
StrongPtr<cAttackManager>::FudgeStrongRefCount()
StrongPtr<cAttackManager>::StrongPtr(cAttackManager*, RefCounts*)
WeakPtr<cAttackManager>::WeakPtr()
WeakPtr<cAttackManager>::WeakPtr(WeakPtr<cAttackManager> const&)
WeakPtr<cAttackManager>::operator=(WeakPtr<cAttackManager> const&)
WeakPtr<cAttackManager>::get() const
WeakPtr<cAttackManager>::releaseRef()
WeakPtr<cAttackManager>::operator=(Null)
WeakPtr<cAttackManager>::~WeakPtr()
WeakPtr<cAttackManager>::operator*() const
WeakPtr<cAttackManager>::operator->() const
WeakPtr<cAttackManager>::StrongRefCount() const
WeakPtr<cAttackManager>::WeakRefCount() const
WeakPtr<cAttackManager>::WeakPtr(cAttackManager*, RefCounts*)
WeakPtr<cAttackManager>::isNull() const
FireExtinguisherAddOn::FireExtinguisherAddOn(MechCharacter*)
FireExtinguisherAddOn::~FireExtinguisherAddOn()
non-virtual thunk to FireExtinguisherAddOn::~FireExtinguisherAddOn()
non-virtual thunk to FireExtinguisherAddOn::~FireExtinguisherAddOn()
FireExtinguisherAddOn::~FireExtinguisherAddOn()
non-virtual thunk to FireExtinguisherAddOn::~FireExtinguisherAddOn()
non-virtual thunk to FireExtinguisherAddOn::~FireExtinguisherAddOn()
FireExtinguisherAddOn::OnAdded()
FireExtinguisherAddOn::OnRemoved()
FireExtinguisherAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to FireExtinguisherAddOn::OnHook(unsigned char, HookArgs*)
FireExtinguisherAddOn::OnBoltDestroyed(Bolt*)
FireExtinguisherAddOn::Process(float)
FireExtinguisherAddOn::ProcessPreRender(float)
FireExtinguisherAddOn::UpdateCharacter(MechCharacter&, float)
FireExtinguisherAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to FireExtinguisherAddOn::EventNotify(Event&, NuEventData&)
FireExtinguisherFirstPointCollector::SetWorldHitData(float, Geom const*, VuVec const&, VuVec const&)
FireExtinguisherFirstPointCollector::~FireExtinguisherFirstPointCollector()
FireExtinguisherAudio::Update(float)
FireExtinguisherAudio::PlayCannonShoot(LevelContainer*, NUVEC const*)
FireExtinguisherAudio::Init()
FireExtinguisherAudio::PlayWaterImpact(LevelContainer*, NUVEC*, bool)
FireExtinguisherAudio::Release()
SlowMoAddon::SlowMoAddon(float, float, char)
SlowMoAddon::~SlowMoAddon()
SlowMoAddon::StopFSEffects()
non-virtual thunk to SlowMoAddon::~SlowMoAddon()
SlowMoAddon::~SlowMoAddon()
non-virtual thunk to SlowMoAddon::~SlowMoAddon()
SlowMoAddon::OnAdded()
SlowMoAddon::StartFSEffect()
SlowMoAddon::OnHook(unsigned char, HookArgs*)
SlowMoAddon::PlaySfx(short, NUVEC const*, NuSoundHandle*)
SlowMoAddon::UpdateFSEffect(float)
non-virtual thunk to SlowMoAddon::OnHook(unsigned char, HookArgs*)
SlowMoAddon::SetSoundOverrideStart(char const*)
SlowMoAddon::SetSoundOverrideLoop(char const*)
SlowMoAddon::SetSoundOverrideEnd(char const*)
SlowMoAddon::Init()
ZiplineAttachmentAddOn::ZiplineAttachmentAddOn()
ZiplineAttachmentAddOn::~ZiplineAttachmentAddOn()
non-virtual thunk to ZiplineAttachmentAddOn::~ZiplineAttachmentAddOn()
non-virtual thunk to ZiplineAttachmentAddOn::~ZiplineAttachmentAddOn()
ZiplineAttachmentAddOn::~ZiplineAttachmentAddOn()
non-virtual thunk to ZiplineAttachmentAddOn::~ZiplineAttachmentAddOn()
non-virtual thunk to ZiplineAttachmentAddOn::~ZiplineAttachmentAddOn()
ZiplineAttachmentAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
ZiplineAttachmentAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to ZiplineAttachmentAddOn::OnHook(unsigned char, HookArgs*)
ZiplineAttachmentAddOn::Singleton()
GizmoIconAddOn::GizmoIconAddOn(float, float, float, bool, nuhspecial_s*)
GizmoIconAddOn::~GizmoIconAddOn()
non-virtual thunk to GizmoIconAddOn::~GizmoIconAddOn()
non-virtual thunk to GizmoIconAddOn::~GizmoIconAddOn()
GizmoIconAddOn::~GizmoIconAddOn()
non-virtual thunk to GizmoIconAddOn::~GizmoIconAddOn()
non-virtual thunk to GizmoIconAddOn::~GizmoIconAddOn()
GizmoIconAddOn_DrawIcon(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
GizmoIconAddOn_DrawIcon_CheckOffScreen(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
GizmoIconAddOn_AddMessage(Gizmo*, float, float, float, bool, nuhspecial_s*)
GizmoIconAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to GizmoIconAddOn::OnHook(unsigned char, HookArgs*)
ExcludeCollisionDetectionAddOn::ExcludeCollisionDetectionAddOn(float)
ExcludeCollisionDetectionAddOn::OnAdded()
ExcludeCollisionDetectionAddOn::OnRemoved()
ExcludeCollisionDetectionAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to ExcludeCollisionDetectionAddOn::OnHook(unsigned char, HookArgs*)
ExcludeCollisionDetectionAddOn::~ExcludeCollisionDetectionAddOn()
non-virtual thunk to ExcludeCollisionDetectionAddOn::~ExcludeCollisionDetectionAddOn()
non-virtual thunk to ExcludeCollisionDetectionAddOn::~ExcludeCollisionDetectionAddOn()
LegoCityShopAddOn::SetUpShops(LegoLevelContainer*)
LegoCityShopAddOn::LegoCityShopAddOn(eShopMode)
LegoCityShopAddOn::~LegoCityShopAddOn()
non-virtual thunk to LegoCityShopAddOn::~LegoCityShopAddOn()
LegoCityShopAddOn::~LegoCityShopAddOn()
non-virtual thunk to LegoCityShopAddOn::~LegoCityShopAddOn()
LegoCityShopAddOn::OnAdded()
LegoCityShopAddOn::OnHook(unsigned char, HookArgs*)
LegoCityShopAddOn::Process(float)
non-virtual thunk to LegoCityShopAddOn::OnHook(unsigned char, HookArgs*)
WardrobeAddOn::SetUpWardrobe(LegoLevelContainer*, bool)
WardrobeAddOn::WardrobeAddOn(eCharClass, int, bool)
WardrobeAddOn::CalculateTokenPanelStartPos(NUVEC*)
WardrobeAddOn::OnAdded()
WardrobeAddOn::OnHook(unsigned char, HookArgs*)
WardrobeAddOn::Process(float)
non-virtual thunk to WardrobeAddOn::OnHook(unsigned char, HookArgs*)
UnlockDisguiseContext::Init()
MechContext* MechContextConstructor<UnlockDisguiseContext>(MechCharacter&)
UnlockDisguiseContext::UnlockDisguiseContext(MechCharacter&)
UnlockDisguiseContext::~UnlockDisguiseContext()
UnlockDisguiseContext::~UnlockDisguiseContext()
UnlockDisguiseContext::SetSpecificCharID(short)
UnlockDisguiseContext::SetSpecificCharID_P2(short)
UnlockDisguiseContext::PushExtraCharUnlock(short const&)
UnlockDisguiseContext::GetLinkedCharUnlocks(NuVector<short>&)
UnlockDisguiseContext::CalculateTokenPanelStartPosAndScale(NUVEC*, float*)
UnlockDisguiseContext::TransformWorldToPanel(VuVec const&, VuVec&, NuCamera const&)
UnlockDisguiseContext::AllowLeave(int, MechContext*)
UnlockDisguiseContext::OnEnter(LevelContainer*)
UnlockDisguiseContext::OnProcess(LevelContainer*, float)
UnlockDisguiseContext::GetTargetCharID()
UnlockDisguiseContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
UnlockDisguiseContext::OnLeave()
WardrobeAddOn::~WardrobeAddOn()
non-virtual thunk to WardrobeAddOn::~WardrobeAddOn()
non-virtual thunk to WardrobeAddOn::~WardrobeAddOn()
LegoContextHandlerBase<UnlockDisguiseContext>::GetInstanceId() const
LegoContextHandlerBase<UnlockDisguiseContext>::~LegoContextHandlerBase()
CodeBreakerAddOn::SetUpCodeBreaker(LegoLevelContainer*)
CodeBreakerAddOn::CodeBreakerAddOn(bool)
CodeBreakerAddOn::~CodeBreakerAddOn()
non-virtual thunk to CodeBreakerAddOn::~CodeBreakerAddOn()
CodeBreakerAddOn::~CodeBreakerAddOn()
non-virtual thunk to CodeBreakerAddOn::~CodeBreakerAddOn()
CodeBreakerAddOn::OnAdded()
CodeBreakerAddOn::OnHook(unsigned char, HookArgs*)
CodeBreakerAddOn::Process(float)
non-virtual thunk to CodeBreakerAddOn::OnHook(unsigned char, HookArgs*)
CrashMatsAddOn::CrashMatsAddOn(Gizmo&)
CrashMatsAddOn::~CrashMatsAddOn()
non-virtual thunk to CrashMatsAddOn::~CrashMatsAddOn()
non-virtual thunk to CrashMatsAddOn::~CrashMatsAddOn()
CrashMatsAddOn::~CrashMatsAddOn()
non-virtual thunk to CrashMatsAddOn::~CrashMatsAddOn()
non-virtual thunk to CrashMatsAddOn::~CrashMatsAddOn()
CrashMatsAddOn::OnAdded()
CrashMatsAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CrashMatsAddOn::OnHook(unsigned char, HookArgs*)
CrashMatsAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to CrashMatsAddOn::EventNotify(Event&, NuEventData&)
MechKrawlieSimpleHookMovingVehicleClose::GetHashedKey()
RoarContext::RoarContext(MechCharacter&)
RoarContext::~RoarContext()
RoarContext::~RoarContext()
RoarContext::OnProcess(LevelContainer*, float)
RoarContext::OnEnter(LevelContainer*)
RoarContext::Init()
MechContext* MechContextConstructor<RoarContext>(MechCharacter&)
StompContext::StompContext(MechCharacter&)
StompContext::~StompContext()
StompContext::~StompContext()
StompContext::DoneImpact()
StompContext::SetRadius(float)
StompContext::SetDuration(float)
StompContext::OnProcess(LevelContainer*, float)
StompContext::OnEnter(LevelContainer*)
StompContext::Init()
MechContext* MechContextConstructor<StompContext>(MechCharacter&)
TRexAddOn::TRexAddOn()
TRexAddOn::InitType()
void* Constructor<TRexAddOn>()
TRexAddOn::OnAdded()
TRexAddOn::OnRemoved()
TRexAddOn::OnHook(unsigned char, HookArgs*)
TRexCollisionListener::Update()
non-virtual thunk to TRexAddOn::OnHook(unsigned char, HookArgs*)
TRexAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to TRexAddOn::EventNotify(Event&, NuEventData&)
TRexAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
TRexCollisionListener::AllowCollision(Entity const*, Entity const*)
TRexCollisionListener::Collision(Character*, Entity*, ContactPoint&)
TRexCollisionListener::Collision(BodyPair*, Array<ContactPoint>&)
cBoltTRexRoarType::cBoltTRexRoarType()
cBoltTRexRoarType::~cBoltTRexRoarType()
cBoltTRexRoarType::~cBoltTRexRoarType()
cBoltTRexRoarType::OnBoltInit(Bolt*)
cBoltTRexRoarType::OnBoltEnd(Bolt*, bool)
cBoltTRexRoarType::OnBoltUpdate(Bolt*)
cBoltTRexRoarType::OnBoltPreHit(Bolt*, NUVEC*)
cBoltTRexRoarType::OnBoltHitGameObject(MechCharacter*, Bolt*)
cBoltTRexRoarType::OnBoltHitGizmo(Bolt*)
TRexCollisionListener::~TRexCollisionListener()
LegoContextHandlerBase<RoarContext>::GetInstanceId() const
LegoContextHandlerBase<StompContext>::GetInstanceId() const
TRexAddOn::~TRexAddOn()
TRexAddOn::~TRexAddOn()
non-virtual thunk to TRexAddOn::~TRexAddOn()
non-virtual thunk to TRexAddOn::~TRexAddOn()
non-virtual thunk to TRexAddOn::~TRexAddOn()
non-virtual thunk to TRexAddOn::~TRexAddOn()
LegoContextHandlerBase<RoarContext>::~LegoContextHandlerBase()
LegoContextHandlerBase<StompContext>::~LegoContextHandlerBase()
FarmerChickenGlideAddOn::FarmerChickenGlideAddOn()
FarmerChickenGlideAddOn::~FarmerChickenGlideAddOn()
non-virtual thunk to FarmerChickenGlideAddOn::~FarmerChickenGlideAddOn()
non-virtual thunk to FarmerChickenGlideAddOn::~FarmerChickenGlideAddOn()
FarmerChickenGlideAddOn::~FarmerChickenGlideAddOn()
non-virtual thunk to FarmerChickenGlideAddOn::~FarmerChickenGlideAddOn()
non-virtual thunk to FarmerChickenGlideAddOn::~FarmerChickenGlideAddOn()
FarmerChickenGlideAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to FarmerChickenGlideAddOn::OnHook(unsigned char, HookArgs*)
FarmerChickenGlideAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
FarmerChickenGlideAddOn::Singleton()
ActAnnounceAddon::ActAnnounceAddon(float, float, char const*, char const*)
ActAnnounceAddon::~ActAnnounceAddon()
non-virtual thunk to ActAnnounceAddon::~ActAnnounceAddon()
ActAnnounceAddon::~ActAnnounceAddon()
non-virtual thunk to ActAnnounceAddon::~ActAnnounceAddon()
ActAnnounceAddon::OnAdded()
ActAnnounceAddon::OnRemoved()
ActAnnounceAddon::OnHook(unsigned char, HookArgs*)
ActAnnounceAddon::Process(float)
non-virtual thunk to ActAnnounceAddon::OnHook(unsigned char, HookArgs*)
ActAnnounceAddon::Render()
ActAnnounceAddon::SetEndType(ActAnnounceAddon::ENDTYPE)
ActAnnounceAddon::GetEndType() const
ActAnnounceAddon::RenderTest()
DropPointCheatAddon::DropPointCheatAddon()
DropPointCheatAddon::~DropPointCheatAddon()
DropPointCheatAddon::SetTriggersDisabled(bool)
non-virtual thunk to DropPointCheatAddon::~DropPointCheatAddon()
DropPointCheatAddon::~DropPointCheatAddon()
non-virtual thunk to DropPointCheatAddon::~DropPointCheatAddon()
DropPointCheatAddon::OnAdded()
DropPointCheatAddon::OnHook(unsigned char, HookArgs*)
DropPointCheatAddon::SpawnVehicle()
non-virtual thunk to DropPointCheatAddon::OnHook(unsigned char, HookArgs*)
DropPointCheatAddon::OnRemoved()
DropPointCheatAddon::DisableInputTriggerBatch(MechCharacter*, int*, int, bool)
DropPointCheatContext::DropPointCheatContext(MechCharacter&)
DropPointCheatContext::~DropPointCheatContext()
DropPointCheatContext::~DropPointCheatContext()
DropPointCheatContext::AllowEnter(int, MechContext*)
DropPointCheatContext::AllowLeave(int, MechContext*)
DropPointCheatContext::OnEnter(LevelContainer*)
DropPointCheatContext::OnProcess(LevelContainer*, float)
DropPointCheatContext::OnLeave()
DropPointCheatContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
DropPointCheatContext::TimeToLeave()
DropPointCheatContext::Init()
MechContext* MechContextConstructor<DropPointCheatContext>(MechCharacter&)
DropPointCheatAddon::OnDestroyEvent(AddOnList::eDestroyEvent)
LegoContextHandlerBase<DropPointCheatContext>::GetInstanceId() const
LegoContextHandlerBase<DropPointCheatContext>::~LegoContextHandlerBase()
SirenHatCheatAddon::SirenHatCheatAddon(char const*)
SirenHatCheatAddon::~SirenHatCheatAddon()
non-virtual thunk to SirenHatCheatAddon::~SirenHatCheatAddon()
SirenHatCheatAddon::~SirenHatCheatAddon()
non-virtual thunk to SirenHatCheatAddon::~SirenHatCheatAddon()
SirenHatCheatAddon::EnableSirenLight(CharInst*)
SirenHatCheatAddon::OnAdded()
SirenHatCheatAddon::OnHook(unsigned char, HookArgs*)
SirenHatCheatAddon::RotateSiren()
non-virtual thunk to SirenHatCheatAddon::OnHook(unsigned char, HookArgs*)
SirenHatCheatAddon::OnRemoved()
SirenHatCheatAddon::OnDestroyEvent(AddOnList::eDestroyEvent)
SirenHatP2CheatAddon::SirenHatP2CheatAddon()
non-virtual thunk to SirenHatP2CheatAddon::~SirenHatP2CheatAddon()
SirenHatP2CheatAddon::~SirenHatP2CheatAddon()
non-virtual thunk to SirenHatP2CheatAddon::~SirenHatP2CheatAddon()
GrappleRopeAddon::GrappleRopeAddon()
GrappleRopeAddon::~GrappleRopeAddon()
non-virtual thunk to GrappleRopeAddon::~GrappleRopeAddon()
non-virtual thunk to GrappleRopeAddon::~GrappleRopeAddon()
GrappleRopeAddon::~GrappleRopeAddon()
non-virtual thunk to GrappleRopeAddon::~GrappleRopeAddon()
non-virtual thunk to GrappleRopeAddon::~GrappleRopeAddon()
GrappleRopeAddon::OnAdded()
GrappleRopeAddon::SetGrapple(GizmoGrapple&)
GrappleRopeAddon::Process(float)
GrappleRopeAddon::SetOtherType(GizmoObstacle*)
GrappleRopeAddon::UpdateDestroyTicker(float)
GrappleRopeAddon::CreateRope()
GrappleRopeAddon::ReturnRope()
GrappleRopeAddon::Render()
GrappleRopeContext::GrappleRopeContext(MechCharacter&)
GrappleRopeContext::OnEnter(LevelContainer*)
GrappleRopeContext::SetAction(int)
GrappleRopeContext::OnProcess(LevelContainer*, float)
GrappleRopeContext::InitFlags()
MechContext::AllowEnter(int, MechContext*)
AddOnHelper::ProcessEvenWhenPaused(float)
AddOnHelper::ResetOnScreen()
AddOnHelper::RenderPanel()
AddOnHelper::RenderPanelLate()
AddOnHelper::PostAnimUpdate(float)
AddOnHelper::CameraOverride(HookArgsCamOverride&)
AddOnHelper::BuildGoalIconList(GoalIconList&)
GrappleRopeContext::~GrappleRopeContext()
MechContext::AllowLeave(int, MechContext*)
VehicleProximityToBlowUp::~VehicleProximityToBlowUp()
non-virtual thunk to VehicleProximityToBlowUp::~VehicleProximityToBlowUp()
non-virtual thunk to VehicleProximityToBlowUp::~VehicleProximityToBlowUp()
VehicleProximityToBlowUp::~VehicleProximityToBlowUp()
non-virtual thunk to VehicleProximityToBlowUp::~VehicleProximityToBlowUp()
non-virtual thunk to VehicleProximityToBlowUp::~VehicleProximityToBlowUp()
VehicleProximityToBlowUp::VehicleProximityToBlowUp()
VehicleProximityToBlowUp::Process(float)
VehicleProximityToBlowUp::OnAdded()
VehicleProximityToBlowUp::OnRemoved()
VehicleProximityToBlowUp::Render()
VehicleProximityToBlowUp::IsInContainer(LevelContainer&)
non-virtual thunk to VehicleProximityToBlowUp::IsInContainer(LevelContainer&)
VehicleProximityToBlowUp::EventNotify(Event&, NuEventData&)
non-virtual thunk to VehicleProximityToBlowUp::EventNotify(Event&, NuEventData&)
VehicleProximityToBlowUp::ParseItem(GameScriptContext&, cParseContextItem&)
void GizActions_CreateAddOn<VehicleProximityToBlowUp>(Flow*, FlowObject*, char**, int)
VehicleProximityToBlowUp::ParseGizAction(Flow*, FlowObject*, char**, int)
VehicleProximityToBlowUp::RegisterGizActions()
VehicleSurfAddOn::VehicleSurfAddOn()
VehicleSurfAddOn::~VehicleSurfAddOn()
non-virtual thunk to VehicleSurfAddOn::~VehicleSurfAddOn()
non-virtual thunk to VehicleSurfAddOn::~VehicleSurfAddOn()
VehicleSurfAddOn::~VehicleSurfAddOn()
non-virtual thunk to VehicleSurfAddOn::~VehicleSurfAddOn()
non-virtual thunk to VehicleSurfAddOn::~VehicleSurfAddOn()
VehicleSurfAddOn::StaticInit()
VehicleSurfAddOn::RegisterAbility()
AbilityAddon<VehicleSurfAddOn>::Register(char const*, MechAbilityRegisterInfo*, AddAbilityAddOnMode)
VehicleSurfAddOn::OnHook(unsigned char, HookArgs*)
VehicleSurfAddOn::OnProcess(float)
non-virtual thunk to VehicleSurfAddOn::OnHook(unsigned char, HookArgs*)
VehicleSurfAddOn::GetLevelContainer() const
non-virtual thunk to VehicleSurfAddOn::GetLevelContainer() const
VehicleSurfAddOn::OnAdded()
VehicleSurfAddOn::OnRemoved()
VehicleSurfAddOn::ParseParamItem(cParseContextItem&)
VehicleSurfAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to VehicleSurfAddOn::EventNotify(Event&, NuEventData&)
VehicleSurfContext::IsValidVehicleType(MechVehicle*)
VehicleSurfContext::IsVehicleTooDamaged(MechVehicle*)
VehicleSurfContext::SetVehicle(MechVehicle&)
VehicleSurfContext::RegisterContext()
VehicleSurfContext::InitActions()
VehicleSurfContext::VehicleSurfContext(MechCharacter&)
VehicleSurfContext::~VehicleSurfContext()
VehicleSurfContext::~VehicleSurfContext()
VehicleSurfContext::OnEnter(LevelContainer*)
VehicleSurfContext::OnProcess(LevelContainer*, float)
VehicleSurfContext::InitFlags()
void* Constructor<VehicleSurfAddOn>()
AddOnInit::AddOnInit(char const*, char const*)
AddOnInit::~AddOnInit()
AddOnInit::AddOnInit(AddOnInit const&)
AddOnInit::~AddOnInit()
CMList<int const>::Append(int const&, CMList<int const>::ListLink*)
MechContext* MechContextConstructor<VehicleSurfContext>(MechCharacter&)
FlyingAbility::FlyingAbility()
FlyingAbility::~FlyingAbility()
non-virtual thunk to FlyingAbility::~FlyingAbility()
non-virtual thunk to FlyingAbility::~FlyingAbility()
FlyingAbility::~FlyingAbility()
non-virtual thunk to FlyingAbility::~FlyingAbility()
non-virtual thunk to FlyingAbility::~FlyingAbility()
FlyingAbility::StaticInit()
FlyingAbility::RegisterAbility()
AbilityAddon<FlyingAbility>::Register(char const*, MechAbilityRegisterInfo*, AddAbilityAddOnMode)
FlyingAbility::OnHook(unsigned char, HookArgs*)
FlyingAbility::OnProcess(float)
non-virtual thunk to FlyingAbility::OnHook(unsigned char, HookArgs*)
FlyingAbility::GetLevelContainer() const
non-virtual thunk to FlyingAbility::GetLevelContainer() const
FlyingAbility::OnAdded()
FlyingAbility::OnRemoved()
FlyingAbility::ParseParamItem(cParseContextItem&)
FlyingAbility::EventNotify(Event&, NuEventData&)
non-virtual thunk to FlyingAbility::EventNotify(Event&, NuEventData&)
FlyingAbility::SetFlying(bool)
void* Constructor<FlyingAbility>()
FallingWithStyle::FallingWithStyle(MechCharacter&)
FallingWithStyle::StaticInit()
FallingWithStyle::CheckForFalling(MechCharacter&)
FallingWithStyle::CanFallWithStyle(MechCharacter&)
FallingWithStyle::CanCurrentlyFallWithStyle(MechCharacter&)
FallingWithStyle::StartFallingWithStyle(MechCharacter&)
FallingWithStyle::OnAdded()
FallingWithStyle::OnHook(unsigned char, HookArgs*)
FallingWithStyle::Process(HookArgs*)
FallingWithStyle::OverrideAnimation()
FallingWithStyle::OverrideMom(HookArgs*)
FallingWithStyle::DrawStreaks(HookArgs*)
non-virtual thunk to FallingWithStyle::OnHook(unsigned char, HookArgs*)
FallingWithStyle::OnRemoved()
FallingWithStyle::~FallingWithStyle()
FallingWithStyle::~FallingWithStyle()
non-virtual thunk to FallingWithStyle::~FallingWithStyle()
non-virtual thunk to FallingWithStyle::~FallingWithStyle()
FlyingBase::FlyingBase(MechCharacter&, HashedKey)
FlyingBase::StaticInit()
FlyingBase::OnAdded()
FlyingBase::PlayVfx(FlyingBase::FlyingVfxTypes, VuMtx&)
FlyingBase::OnHook(unsigned char, HookArgs*)
non-virtual thunk to FlyingBase::OnHook(unsigned char, HookArgs*)
FlyingBase::OnRemoved()
FlyingBase::DrawEffects(bool, bool)
FlyingBase::GetFlyParam()
FlyingBase::ResetFlyParam()
FlyingBase::PlaySfx(FlyingBase::FlyingSfxTypes, float, float)
FlyingBase::StopSfx(FlyingBase::FlyingSfxTypes)
FlyingBase::~FlyingBase()
FlyingBase::~FlyingBase()
FlyingBase::Process(HookArgs*)
FlyingBase::OverrideMom(HookArgs*)
FlyingBase::OverrideGamepadAndYRot(HookArgs*)
FlyingBase::OverrideAnimation()
FlyingBase::SetupCharacterOrientation()
FlyingBase::DrawLandingVFX()
non-virtual thunk to FlyingBase::~FlyingBase()
non-virtual thunk to FlyingBase::~FlyingBase()
FlyingHandlerAddon::FlyingHandlerAddon()
FlyingHandlerAddon::~FlyingHandlerAddon()
non-virtual thunk to FlyingHandlerAddon::~FlyingHandlerAddon()
FlyingHandlerAddon::~FlyingHandlerAddon()
non-virtual thunk to FlyingHandlerAddon::~FlyingHandlerAddon()
FlyingHandlerAddon::OnAdded()
FlyingHandlerAddon::OnHook(unsigned char, HookArgs*)
FlyingHandlerAddon::ProcessMechChar()
FlyingHandlerAddon::ProcessVehicle()
non-virtual thunk to FlyingHandlerAddon::OnHook(unsigned char, HookArgs*)
FlyingHandlerAddon::OnRemoved()
FlyingHandlerAddon::IsFlyingCharacter(MechCharacter&)
FlyingHandlerAddon::IsCurrentlyFlying(MechCharacter&)
FlyingHandlerAddon::IsCurrentlyFlying(MechVehicle&)
FlyingHandlerAddon::CanStartFlying(MechCharacter&, bool)
FlyingHandlerAddon::CanStartFlying(MechVehicle&)
FlyingHandlerAddon::StartFlying(MechCharacter&, bool)
FlyingHandlerAddon::StartFlying(MechVehicle&)
FlyingHandlerAddon::StopFlying(MechCharacter&)
FlyingHandlerAddon::StopFlying(MechVehicle&)
FlyingHandlerAddon::DisableFlying(MechCharacter&)
FlyingHandlerAddon::ModifyRefCount(MechObjectInterface*, int)
FlyingHandlerAddon::DisableFlying(MechVehicle&)
FlyingHandlerAddon::EnableFlying(MechCharacter&)
FlyingHandlerAddon::EnableFlying(MechVehicle&)
FlyingHandlerAddon::AttemptStartFlying(MechCharacter&)
FlyingUtilities::StaticInit()
FlyingInput::StaticInit()
FlyingUtilities::InvertYAxisEnabled(int)
FlyingUtilities::FlyingParams::FlyingParams()
FlyingUtilities::FlyingParams::LevelParams::LevelParams()
FlyingUtilities::FlyingParams::HubParams::HubParams()
HubFlyingCamera::~HubFlyingCamera()
HubFlyingCamera::ChangeCamera(HubFlyingCamera::FlyCameraTactics)
HubFlyingCamera::ProcessCamera(float, HubFlyingCamera::CameraProcessPacket const&)
HubFlyingCamera::CalcFlyingCam(HubFlyingCamera::CameraProcessPacket const&)
HubFlyingCamera::CalcSteepFlyingCam(HubFlyingCamera::CameraProcessPacket const&)
HubFlyingCamera::CalcHelicopterFlyingCam(HubFlyingCamera::CameraProcessPacket const&)
HubFlyingCamera::CalcSlamCam(HubFlyingCamera::CameraProcessPacket const&)
HubFlyingCamera::CalcPlaneFlyingCam(HubFlyingCamera::CameraProcessPacket const&)
HubFlyingCamera::CalcLaserCam(HubFlyingCamera::CameraProcessPacket const&)
HubFlyingCamera::BlendToTarget(HubFlyingCamera::CameraProcessPacket const&)
HubFlyingCamera::StopTerrainIntersection()
HubFlyingCamera::UpdateMechCameraSystem()
HubFlyingCamera::CalcNoseDiveCam(HubFlyingCamera::CameraProcessPacket const&)
HubFlyingCamera::CalcDescentCam(HubFlyingCamera::CameraProcessPacket const&)
HubFlyingCursor::ProcessCursor(VuVec const&, HubFlyingCamera const&)
HubFlyingCursor::RenderCursor(VuVec const&, HubFlyingCamera const&)
FlyingInput::AHeld()
FlyingInput::APressed()
FlyingInput::BHeld()
FlyingInput::BPressed()
HubFlyingInput::~HubFlyingInput()
HubFlyingInput::~HubFlyingInput()
HubFlyingInput::Reset()
HubFlyingInput::CalculateTargetVelocity(float, bool)
LevelFlyingInput::~LevelFlyingInput()
LevelFlyingInput::~LevelFlyingInput()
LevelFlyingInput::Reset()
LevelFlyingInput::CalculateLift(float, bool)
FlyingCaster::Recalculate(float)
FlyingCaster::RecalcFloor(float)
FlyingCaster::RecalcCeiling(float)
HubFlying::HubFlying(MechCharacter&)
HubFlyingCamera::HubFlyingCamera<MechCharacter>(MechCharacter&)
FlyingCaster::FlyingCaster<MechCharacter>(MechCharacter&, FlyingUtilities::FlyingMode)
HubFlying::StaticInit()
HubFlying::~HubFlying()
non-virtual thunk to HubFlying::~HubFlying()
non-virtual thunk to HubFlying::~HubFlying()
HubFlying::~HubFlying()
non-virtual thunk to HubFlying::~HubFlying()
non-virtual thunk to HubFlying::~HubFlying()
HubFlying::CheckForNoseDive()
HubFlying::StartNoseDive(bool)
HubFlying::CheckForDecent()
HubFlying::StartDescent()
HubFlying::OnAdded()
HubFlying::StartFlying()
HubFlying::OnHook(unsigned char, HookArgs*)
HubFlying::RenderHook()
non-virtual thunk to HubFlying::OnHook(unsigned char, HookArgs*)
HubFlying::OnRemoved()
HubFlying::EventNotify(Event&, NuEventData&)
non-virtual thunk to HubFlying::EventNotify(Event&, NuEventData&)
HubFlying::CanStartLaserVision()
HubFlying::StartEndFlying()
HubFlying::Start180Turn()
HubFlying::ForceLift(float)
HubFlying::Process(HookArgs*)
HubFlying::UpdateState(float)
HubFlying::ProcessFlying(float)
HubFlying::ProcessNoseDive(float)
HubFlying::ProcessDescent(float)
HubFlying::ProcessEndFlying(float)
HubFlying::Process180DegTurn(float)
HubFlying::ProcessVFXAndSFX()
HubFlying::CheckForLanding()
HubFlying::ProcessSteeringAids(float)
HubFlying::ProcessTargetCursor()
HubFlying::ProcessSupermansThemetune()
HubFlying::ProcessGamepad(float)
HubFlying::CalculateFlyingVelocity(float)
HubFlying::ProcessSteeringAidAutoLevel(float)
HubFlying::ProcessSteeringAidWallAvoidance()
HubFlying::ProcessWaterSkimmingVFX(float)
HubFlying::OverrideMom(HookArgs*)
HubFlying::OverrideGamepadAndYRot(HookArgs*)
HubFlying::OverrideAnimation()
HubFlying::SetupCharacterOrientation()
HubFlying::DrawLandingVFX()
FlyingInput::~FlyingInput()
FlyingInput::~FlyingInput()
LevelFlying::LevelFlying(MechCharacter&)
LevelFlying::StaticInit()
LevelFlying::~LevelFlying()
non-virtual thunk to LevelFlying::~LevelFlying()
LevelFlying::~LevelFlying()
non-virtual thunk to LevelFlying::~LevelFlying()
LevelFlying::OnAdded()
LevelFlying::StartFlying()
LevelFlying::OnHook(unsigned char, HookArgs*)
non-virtual thunk to LevelFlying::OnHook(unsigned char, HookArgs*)
LevelFlying::OnRemoved()
LevelFlying::StartDescent()
LevelFlying::StartHover()
LevelFlying::Start180Turn()
LevelFlying::SuperStrengthHandleHack(GizmoObstacle*)
LevelFlying::ForceLift(float)
LevelFlying::CheckForDescent()
LevelFlying::CheckForHover()
LevelFlying::CheckFor180Turn()
LevelFlying::CheckContext()
LevelFlying::Process(HookArgs*)
LevelFlying::UpdateState(float)
LevelFlying::ProcessFlying(float)
LevelFlying::ProcessDescent(float)
LevelFlying::ProcessHover(float)
LevelFlying::Process180DegTurn(float)
LevelFlying::ProcessSteeringAids(float)
LevelFlying::IsInHoverCatchRange()
LevelFlying::ProcessPadInput(float)
LevelFlying::ProcessLift(float)
LevelFlying::LevelFlyingRayCast(VuVec const&, VuVec&, FirstPointCollector&)
LevelFlying::ProcessSteeringAidAutoLevel(float)
LevelFlying::ProcessSteeringAidAutoCeiling(float)
LevelFlying::ProcessSteeringAidWallAvoidance(float)
LevelFlying::OverrideMom(HookArgs*)
LevelFlying::OverrideGamepadAndYRot(HookArgs*)
LevelFlying::OverrideAnimation()
LevelFlying::SetupCharacterOrientation()
DropInBreadCrumbsAddOn::RegisterAbility()
AbilityAddon<DropInBreadCrumbsAddOn>::Register(char const*, MechAbilityRegisterInfo*, AddAbilityAddOnMode)
DropInBreadCrumbsAddOn::GetFrom(LevelContainer*)
DropInBreadCrumbsAddOn::GetFrom(MechCharacter*)
DropInBreadCrumbsAddOn::DropInBreadCrumbsAddOn()
DropInBreadCrumbsAddOn::~DropInBreadCrumbsAddOn()
non-virtual thunk to DropInBreadCrumbsAddOn::~DropInBreadCrumbsAddOn()
non-virtual thunk to DropInBreadCrumbsAddOn::~DropInBreadCrumbsAddOn()
DropInBreadCrumbsAddOn::~DropInBreadCrumbsAddOn()
non-virtual thunk to DropInBreadCrumbsAddOn::~DropInBreadCrumbsAddOn()
non-virtual thunk to DropInBreadCrumbsAddOn::~DropInBreadCrumbsAddOn()
DropInBreadCrumbsAddOn::OnHook(unsigned char, HookArgs*)
DropInBreadCrumbsAddOn::OnProcess(float)
non-virtual thunk to DropInBreadCrumbsAddOn::OnHook(unsigned char, HookArgs*)
DropInBreadCrumbsAddOn::OnAdded()
DropInBreadCrumbsAddOn::OnRemoved()
DropInBreadCrumbsAddOn::ParseParamItem(cParseContextItem&)
DropInBreadCrumbsAddOn::EventNotify(Event&, NuEventData&)
DropInBreadCrumbsAddOn::ClearBreadCrumbs()
non-virtual thunk to DropInBreadCrumbsAddOn::EventNotify(Event&, NuEventData&)
DropInBreadCrumbsAddOn::DropBreadCrumb()
DropInBreadCrumbsAddOn::GetTargetCharacter() const
DropInBreadCrumbsAddOn::GetDropInPos(VuVec&) const
DropInBreadCrumbsAddOn::TestAndAdjustDropInPos(VuVec&, bool) const
DropInBreadCrumb::DropInBreadCrumb()
DropInBreadCrumb::~DropInBreadCrumb()
DropInBreadCrumb::~DropInBreadCrumb()
DropInBreadCrumbsAddOn::GetLevelContainer() const
DropInBreadCrumbsAddOn::IsInContainer(LevelContainer&)
non-virtual thunk to DropInBreadCrumbsAddOn::GetLevelContainer() const
non-virtual thunk to DropInBreadCrumbsAddOn::IsInContainer(LevelContainer&)
void* Constructor<DropInBreadCrumbsAddOn>()
DropInSequenceAddOn::RegisterAbility()
AbilityAddon<DropInSequenceAddOn>::Register(char const*, MechAbilityRegisterInfo*, AddAbilityAddOnMode)
DropInSequenceAddOn::DropInSequenceAddOn()
DropInSequenceAddOn::~DropInSequenceAddOn()
non-virtual thunk to DropInSequenceAddOn::~DropInSequenceAddOn()
non-virtual thunk to DropInSequenceAddOn::~DropInSequenceAddOn()
DropInSequenceAddOn::~DropInSequenceAddOn()
non-virtual thunk to DropInSequenceAddOn::~DropInSequenceAddOn()
non-virtual thunk to DropInSequenceAddOn::~DropInSequenceAddOn()
DropInSequenceAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to DropInSequenceAddOn::OnHook(unsigned char, HookArgs*)
DropInSequenceAddOn::OnAdded()
DropInSequenceAddOn::OnRemoved()
DropInSequenceAddOn::ParseParamItem(cParseContextItem&)
DropInSequenceAddOn::EventNotify(Event&, NuEventData&)
DropInSequenceAddOn::AreDropInSequencesAllowed(MechCharacter&) const
non-virtual thunk to DropInSequenceAddOn::EventNotify(Event&, NuEventData&)
DropInSequenceAddOn::GetFrom(LevelContainer*)
DropInSequenceAddOn::IsDropInSequenceActive()
DropInSequenceAddOn::EnableHandler(HashedKey const&, bool)
DropInSequenceHandlerBase::DropInSequenceHandlerBase(float, float)
DropInSequenceHandlerBase::~DropInSequenceHandlerBase()
DropInSequenceHandlerBase::~DropInSequenceHandlerBase()
DropInSequenceHandlerBase::IsSequenceAllowed(MechCharacter&) const
DropInSequenceHandlerBase::IsType(HashedKey const&) const
DropInSequenceHandlerBase::Start(MechCharacter&)
DropInSequenceHandlerBase::Update(float)
DropInSequenceHandlerBase::ActivateMiniCut(float, float, float)
DropInSequenceHandlerBase::DeactivateMiniCut()
DropInSequenceHandlerBase::AddMiniCutPoint(VuVec const&, float, float, VuVec const*)
DropInSequenceHandlerBase::IsMiniCutFinished() const
DropInSequenceHandlerBase::IsMiniCutValid() const
SAction_EnableDropInSequence::Exec(ScriptContext&)
DropInSequenceAddOn::GetLevelContainer() const
DropInSequenceAddOn::IsInContainer(LevelContainer&)
non-virtual thunk to DropInSequenceAddOn::GetLevelContainer() const
non-virtual thunk to DropInSequenceAddOn::IsInContainer(LevelContainer&)
SAction_EnableDropInSequence::~SAction_EnableDropInSequence()
SAction_EnableDropInSequence::GetName() const
SAction_EnableDropInSequence::GetInputs(SCmdParams&) const
SAction_EnableDropInSequence::GetOutputs(SCmdParams&) const
void* Constructor<DropInSequenceAddOn>()
NuVector<DropInSequenceHandlerBase*>::Reserve(unsigned int, bool)
LoadScreenLevelNameAddOn::LoadScreenLevelNameAddOn()
LoadScreenLevelNameAddOn::~LoadScreenLevelNameAddOn()
non-virtual thunk to LoadScreenLevelNameAddOn::~LoadScreenLevelNameAddOn()
non-virtual thunk to LoadScreenLevelNameAddOn::~LoadScreenLevelNameAddOn()
LoadScreenLevelNameAddOn::~LoadScreenLevelNameAddOn()
non-virtual thunk to LoadScreenLevelNameAddOn::~LoadScreenLevelNameAddOn()
non-virtual thunk to LoadScreenLevelNameAddOn::~LoadScreenLevelNameAddOn()
LoadScreenLevelNameAddOn::OnAdded()
LoadScreenLevelNameAddOn::OnRemoved()
LoadScreenLevelNameAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to LoadScreenLevelNameAddOn::OnHook(unsigned char, HookArgs*)
LoadScreenLevelNameAddOn::EventNotify(Event&, NuEventData&)
LoadScreenLevelNameAddOn::CalculateText(AREADATA const*)
non-virtual thunk to LoadScreenLevelNameAddOn::EventNotify(Event&, NuEventData&)
LoadScreenLevelNameAddOn::CalculateCityText()
LoadScreenLevelNameAddOn::RegisterAbility()
AbilityAddon<LoadScreenLevelNameAddOn>::Register(char const*, MechAbilityRegisterInfo*, AddAbilityAddOnMode)
AbilityAddon<LoadScreenLevelNameAddOn>::GetLevelContainer() const
LoadScreenLevelNameAddOn::IsInContainer(LevelContainer&)
non-virtual thunk to AbilityAddon<LoadScreenLevelNameAddOn>::GetLevelContainer() const
non-virtual thunk to LoadScreenLevelNameAddOn::IsInContainer(LevelContainer&)
NuVector<LoadScreenLevelNameAddOn::CityStartDoorDistrictData>::Reserve(unsigned int, bool)
NuVector<LoadScreenLevelNameAddOn::StoryAssignmentData>::Reserve(unsigned int, bool)
void* Constructor<LoadScreenLevelNameAddOn>()
LoadScreenModelAddOnData::LoadScreenModelAddOnData()
LoadScreenModelAddOnData::~LoadScreenModelAddOnData()
LoadScreenModelAddOnData::~LoadScreenModelAddOnData()
LoadScreenModelAddOn::LoadScreenModelAddOn()
LoadScreenModelAddOn::~LoadScreenModelAddOn()
non-virtual thunk to LoadScreenModelAddOn::~LoadScreenModelAddOn()
LoadScreenModelAddOn::~LoadScreenModelAddOn()
non-virtual thunk to LoadScreenModelAddOn::~LoadScreenModelAddOn()
LoadScreenModelAddOn::OnAdded()
LoadScreenModelAddOn::OnRemoved()
LoadScreenModelAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to LoadScreenModelAddOn::OnHook(unsigned char, HookArgs*)
LoadScreenModelAddOn::ParseParamItem(cParseContextItem&)
LoadScreenModelAddOn::RegisterAbility()
AbilityAddon<LoadScreenModelAddOn>::Register(char const*, MechAbilityRegisterInfo*, AddAbilityAddOnMode)
AbilityAddon<LoadScreenModelAddOn>::GetLevelContainer() const
non-virtual thunk to AbilityAddon<LoadScreenModelAddOn>::GetLevelContainer() const
void* Constructor<LoadScreenModelAddOn>()
LoadScreenHintBuddyAddOnData::LoadScreenHintBuddyAddOnData()
LoadScreenHintBuddyAddOnData::~LoadScreenHintBuddyAddOnData()
NuHashMap<int, unsigned int>::~NuHashMap()
LoadScreenHintBuddyAddOnData::~LoadScreenHintBuddyAddOnData()
LoadScreenHintBuddyAddOnData::OnPostParseInit()
LoadScreenHintBuddyAddOnData::BuddyData::LoadIcon()
LoadScreenHintBuddyAddOnData::HintData::GetHint() const
LoadScreenHintBuddyAddOnData::AddBuddy(char const*)
LoadScreenHintBuddyAddOnData::AddHint(char const*)
LoadScreenHintBuddyAddOnData::BuddyData::BuddyData()
LoadScreenHintBuddyAddOnData::BuddyData::~BuddyData()
LoadScreenHintBuddyAddOnData::BuddyData::GetIconTexture() const
LoadScreenHintBuddyAddOnData::HintData::HintData()
LoadScreenHintBuddyAddOnData::HintData::~HintData()
LoadScreenHintBuddyAddOnData::HintData::IsAvailable(int, int, int) const
LoadScreenHintBuddyAddOn::LoadScreenHintBuddyAddOn()
LoadScreenHintBuddyAddOn::~LoadScreenHintBuddyAddOn()
non-virtual thunk to LoadScreenHintBuddyAddOn::~LoadScreenHintBuddyAddOn()
LoadScreenHintBuddyAddOn::~LoadScreenHintBuddyAddOn()
non-virtual thunk to LoadScreenHintBuddyAddOn::~LoadScreenHintBuddyAddOn()
LoadScreenHintBuddyAddOn::OnAdded()
LoadScreenHintBuddyAddOn::OnRemoved()
LoadScreenHintBuddyAddOn::ParseParamItem(cParseContextItem&)
LoadScreenHintBuddyAddOn::ParseBuddy(cParseContextItem&, LoadScreenHintBuddyAddOnData&) const
LoadScreenHintBuddyAddOn::ParseHint(cParseContextItem&, LoadScreenHintBuddyAddOnData&) const
LoadScreenHintBuddyAddOn::OnFinishedParsingParameters()
LoadScreenHintBuddyAddOn::RegisterAbility()
AbilityAddon<LoadScreenHintBuddyAddOn>::Register(char const*, MechAbilityRegisterInfo*, AddAbilityAddOnMode)
LoadScreenHintBuddyAddOn::GetRandomHint(HINT_s*, int, int, int, bool&) const
LoadScreenHintBuddyAddOn::RenderHintBuddy(HINT_s const&, float) const
AbilityAddon<LoadScreenHintBuddyAddOn>::GetLevelContainer() const
non-virtual thunk to AbilityAddon<LoadScreenHintBuddyAddOn>::GetLevelContainer() const
NuVector<LoadScreenHintBuddyAddOnData::BuddyData>::ReSize(unsigned int, bool)
NuVector<LoadScreenHintBuddyAddOnData::BuddyData>::Reserve(unsigned int, bool)
NuVector<LoadScreenHintBuddyAddOnData::HintData>::ReSize(unsigned int, bool)
NuVector<LoadScreenHintBuddyAddOnData::HintData>::Reserve(unsigned int, bool)
void* Constructor<LoadScreenHintBuddyAddOn>()
CityBasicController::CityBasicController()
CityBasicController::~CityBasicController()
non-virtual thunk to CityBasicController::~CityBasicController()
CityBasicController::~CityBasicController()
non-virtual thunk to CityBasicController::~CityBasicController()
CityBasicController::GetInteractFilterMask()
CityBasicController::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
CityBasicController::UpdateKrawlies(float)
MechKrawlieController<MechKrawlieControllerData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<MechKrawlieControllerData>::OnKrawlieDestroyed(MechKrawlie*)
CityKrawlieStandardController::CityKrawlieStandardController()
CityKrawlieStandardController::~CityKrawlieStandardController()
non-virtual thunk to CityKrawlieStandardController::~CityKrawlieStandardController()
CityKrawlieStandardController::~CityKrawlieStandardController()
non-virtual thunk to CityKrawlieStandardController::~CityKrawlieStandardController()
CityKrawlieStandardController::GetInteractFilterMask()
CityKrawlieStandardController::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
CityKrawlieStandardController::HookContextComplete(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlieStandardController::HookOnCreate(MechKrawlieSimpleHook&, MechKrawlie&)
CityKrawlieStandardController::ParseParamItem(cParseContextItem&)
CityKrawlieSpiderController::CityKrawlieSpiderController()
CityKrawlieSpiderController::~CityKrawlieSpiderController()
non-virtual thunk to CityKrawlieSpiderController::~CityKrawlieSpiderController()
CityKrawlieSpiderController::~CityKrawlieSpiderController()
non-virtual thunk to CityKrawlieSpiderController::~CityKrawlieSpiderController()
CityKrawlieSpiderController::GetInteractFilterMask()
CityKrawlieSpiderController::OverrideRenderMtx(MechKrawlie&, VuMtx&)
CityKrawlieSpiderController::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
MechKrawlieController<CityKrawlieSpiderControllerData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<CityKrawlieSpiderControllerData>::OnKrawlieDestroyed(MechKrawlie*)
CityKrawlieWanderController::CityKrawlieWanderController()
CityKrawlieWanderController::Initialise()
CityKrawlieWanderController::SpawnKrawlies()
CityKrawlieWanderController::ProcessSpawning(float)
CityKrawlieWanderController::GetInteractFilterMask()
CityKrawlieWanderController::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
CityKrawlieWanderController::~CityKrawlieWanderController()
MechKrawlieController<CityWanderControllerKrawlieData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<CityWanderControllerKrawlieData>::OnKrawlieDestroyed(MechKrawlie*)
non-virtual thunk to CityKrawlieWanderController::~CityKrawlieWanderController()
non-virtual thunk to CityKrawlieWanderController::~CityKrawlieWanderController()
NuFsign(float)
NuEquiv(float, float)
NuEquivTollerance(float)
NVConvertFloatToHalf(int)
NuFloatToHalf(float)
NuMtxSetZero(NUMTX*)
NuMtxSetIdentity(NUMTX*)
NuMtxSetTranslation(NUMTX*, NUVEC const*)
NuMtxSetTranslationNeg(NUMTX*, NUVEC const*)
NuMtxSetScale(NUMTX*, NUVEC const*)
NuMtxSetRotationXOld(NUMTX*, int)
NuMtxSetRotationXRads(NUMTX*, float)
NuMtxSetRotationYOld(NUMTX*, int)
NuMtxSetRotationYRads(NUMTX*, float)
NuMtxSetRotationZOld(NUMTX*, int)
NuMtxSetRotationZRads(NUMTX*, float)
NuMtxSetRotationAxisOld(NUMTX*, int, NUVEC const*)
NuMtxSetRotationAxisRads(NUMTX*, float, NUVEC const*)
NuMtxTranslate(NUMTX*, NUVEC const*)
NuMtxTranslateNeg(NUMTX*, NUVEC const*)
NuMtxPreTranslate(NUMTX*, NUVEC const*)
NuMtxPreTranslateX(NUMTX*, float)
NuMtxPreTranslateNeg(NUMTX*, NUVEC const*)
NuMtxScale(NUMTX*, NUVEC const*)
NuMtxScaleU(NUMTX*, float)
NuMtxPreScaleU(NUMTX*, float)
NuMtxGetScale(NUMTX const*)
NuMtxPreScale(NUMTX*, NUVEC const*)
NuMtxPreScaleX(NUMTX*, float)
NuMtxPreSkewYX(NUMTX*, float)
NuMtxRotateXOld(NUMTX*, int)
NuMtxRotateXRads(NUMTX*, float)
NuMtxPreRotateXOld(NUMTX*, int)
NuMtxPreRotateXRads(NUMTX*, float)
NuMtxRotateYOld(NUMTX*, int)
NuMtxRotateYRads(NUMTX*, float)
NuMtxPreRotateYOld(NUMTX*, int)
NuMtxPreRotateYRads(NUMTX*, float)
NuMtxPreRotateY180(NUMTX*)
NuMtxRotateZOld(NUMTX*, int)
NuMtxRotateZRads(NUMTX*, float)
NuMtxPreRotateZOld(NUMTX*, int)
NuMtxPreRotateZRads(NUMTX*, float)
NuMtxSetRotateXYZOld(NUMTX*, NUANGVEC const*)
NuMtxSetRotateXYZRads(NUMTX*, NUVEC const*)
NuMtxSetRotateYXZOld(NUMTX*, NUANGVEC const*)
NuMtxSetRotateYXZRads(NUMTX*, NUVEC const*)
NuMtxMul(NUMTX*, NUMTX const*, NUMTX const*)
NuMtxMulH(NUMTX*, NUMTX const*, NUMTX const*)
NuMtxMulR(NUMTX*, NUMTX const*, NUMTX const*)
NuMtxTransposeR(NUMTX*, NUMTX const*)
NuMtxTranspose(NUMTX*, NUMTX const*)
NuMtxInv(NUMTX*, NUMTX const*)
NuMtxInvR(NUMTX*, NUMTX const*)
NuMtxInvRSS(NUMTX*, NUMTX const*)
NuMtxInvTranspose3x3(NUMTX*, NUMTX const*)
NuMtxInvRSSH(NUMTX*, NUMTX const*)
NuMtxInvH(NUMTX*, NUMTX const*)
NuMtxInvHOld(NUMTX*, NUMTX const*)
NuMtxAlignX(NUMTX*, NUVEC const*)
NuMtxAlignY(NUMTX*, NUVEC const*)
NuMtxAlignZ(NUMTX*, NUVEC const*)
NuMtxLookAtX(NUMTX*, NUVEC const*)
NuMtxLookAtY(NUMTX*, NUVEC const*)
NuMtxLookAtZ(NUMTX*, NUVEC const*)
NuMtxInvLookAtX(NUMTX*, NUVEC const*)
NuMtxInvLookAtY(NUMTX*, NUVEC const*)
NuMtxInvLookAtZ(NUMTX*, NUVEC const*)
NuMtxAddR(NUMTX*, NUMTX const*, NUMTX const*)
NuMtxSubR(NUMTX*, NUMTX const*, NUMTX const*)
NuMtxSkewSymmetric(NUMTX*, NUVEC const*)
NuMtxOrth(NUMTX*)
NuMtxGetXAxis(NUMTX const*, NUVEC*)
NuMtxGetYAxis(NUMTX const*, NUVEC*)
NuMtxGetZAxis(NUMTX const*, NUVEC*)
NuMtxGetHandiness(NUMTX const*)
NuMtxNormalise(NUMTX*, NUMTX const*, bool*)
NuMtxGetTranslation(NUMTX const*, NUVEC*)
NuMtxRotateOld(int, float, float, float*, float*)
NuMtxVecToEulerXYZOld(NUVEC const*, NUVEC const*, int*, int*, int*)
NuMtxGetEulerXYZOld(NUMTX const*, int*, int*, int*)
NuMtxRotateRads(float, float, float, float*, float*)
NuMtxVecToEulerXYZRads(NUVEC const*, NUVEC const*, float*, float*, float*)
NuMtxGetEulerXYZRads(NUMTX const*, float*, float*, float*)
NuMtxGetEulerAngVecRads(NUMTX const&, NUVEC&)
NuMtxDet3(NUMTX const*)
NuMtxCompare(NUMTX const*, NUMTX const*)
NuMtxSSE(NUMTX const*, NUMTX const*)
NuMtxTruncate24Bit(NUMTX*, NUMTX const*)
NuMtx24BitCorrection(NUMTX*, NUMTX const*)
NuMtxLookAtD3D(NUMTX*, NUVEC const*, NUVEC const*, NUVEC const*)
NuMtxLookAtInverseD3D(NUMTX*, NUVEC const*, NUVEC const*, NUVEC const*)
NuMtxSetPerspectiveD3D(NUMTX*, float, float, float, float)
NuMtxSetPerspectiveD3DWH(NUMTX*, float, float, float, float)
NuMtxSetPerspectiveBlend(NUMTX*, float, float, float, float)
NuMtxSetFrustumD3D(NUMTX*, float, float, float, float, float, float)
NuMtxSetFrustumBlend(NUMTX*, float, float, float, float, float, float)
NuMtxSetOrthoD3D(NUMTX*, float, float, float, float, float, float)
NuMtxGetOrthoD3D(NUMTX const*, float*, float*, float*, float*, float*, float*)
NuMtxSetOrthoBlend(NUMTX*, float, float, float, float, float, float)
NuMtxGetPerspectiveD3D(NUMTX const*, float*, float*, float*, float*)
NuMtxGetPerspectiveBlend(NUMTX const*, float*, float*, float*, float*)
NuMtxGetFrustumD3D(NUMTX const*, float*, float*, float*, float*, float*, float*)
NuMtxGetFrustumBlend(NUMTX const*, float*, float*, float*, float*, float*, float*)
NuMtxPrint(NUMTX const*)
NuMtxSetRotateXYZVU0(NUMTX*, NUANGVEC const*)
NuMtxPreScaleVU0(NUMTX*, NUVEC const*)
NuMtxMulVU0(NUMTX*, NUMTX const*, NUMTX const*)
NuMtxInvVU0(NUMTX*, NUMTX const*)
NuMtxSetRotationXYVU0(NUMTX*, NUANGVEC const*)
NuVec4MtxTransformVU0(NUVEC4*, NUVEC4 const*, NUMTX const*)
NuQuatFromEulerXYZ(NUQUAT*, int, int, int)
NuQuatFromEulerRadsXYZ(NUQUAT*, float, float, float)
NuQuatFromEulerVecRads(NUQUAT&, NUVEC const&)
NuEulerXYZFromQuat(int*, int*, int*, NUQUAT const*)
NuEulerVecFromQuatRads(NUQUAT const&, NUVEC&)
NuMtxToQuat(NUMTX const*, NUQUAT*)
NuMtxToQuatRH(NUMTX const*, NUQUAT*)
NuQuatToMtx(NUQUAT const*, NUMTX*)
NuQuatAdd(NUQUAT*, NUQUAT const*, NUQUAT const*)
NuQuatSub(NUQUAT*, NUQUAT const*, NUQUAT const*)
NuQuatMul(NUQUAT*, NUQUAT const*, NUQUAT const*)
NuQuatInv(NUQUAT*, NUQUAT const*)
NuQuatScaleAccum(NUQUAT*, NUQUAT const*, float)
NuQuatNormalise(NUQUAT*, NUQUAT const*)
NuQuatMagnitude(NUQUAT const*)
NuQuatHarmonize(NUQUAT const*, NUQUAT*)
NuQuatLerp(NUQUAT*, NUQUAT const*, NUQUAT const*, float)
NuCubicInterpolation(float, float, float, float, float)
NuQuatCubicInt(NUQUAT*, NUQUAT*, NUQUAT*, NUQUAT*, NUQUAT*, float)
NuHermiteInterpolation(float, float, float, float, float)
NuQuatHermiteInt(NUQUAT*, NUQUAT*, NUQUAT*, NUQUAT*, NUQUAT*, float)
NuQuatSlerp(NUQUAT*, NUQUAT const*, NUQUAT const*, float)
NuQuatBlend(NUQUAT*, NUQUAT const*, NUQUAT const*, float, float)
NuQuatSlerpFast(NUQUAT*, NUQUAT const*, NUQUAT const*, float)
NuQuatDot(NUQUAT const*, NUQUAT const*)
NuQuatNeg2(NUQUAT*, NUQUAT*)
VuQuatSlerpFast(_vuq_s*, _vuq_s const*, _vuq_s const*, float)
NuRandSeed(unsigned int)
NuRandGetSeed()
NuRandNextSeed(unsigned int*)
NuRandFloatSeeded(unsigned int*)
NuRandFloat()
NuRandFloatInRange(float, float)
NuRandIntSeeded(unsigned int*)
NuRandInt()
NuRandIntInRange(unsigned int, unsigned int)
NuRandInt(unsigned int, unsigned int)
NuRandSetSeed(nunrand_s*, int)
NuRand(nunrand_s*)
NuFloatRand(nunrand_s*)
NuAngAdd(int, int)
NuAngWrap(int)
NuAngSub(int, int)
NuAng2AltSol(int*, int*, int*, int, int, int)
NuAngWrapRads(float)
NuAngAddRads(float, float)
NuAngSubRads(float, float)
NuAngVecAddRads(NUVEC&, NUVEC const&, NUVEC const&)
NuAngVecSubRads(NUVEC&, NUVEC const&, NUVEC const&)
NuPower2(int)
NuPow(float, float)
NuPowFast(float, float)
NuLog2(float)
NuLog10(float)
NuExp10(float)
NuMiscNextPow2(int)
NuMiscPow2Exp(int)
NuMiscNextPow2Exp(int)
NuSinf(float)
NuASinf(float)
NuCosf(float)
NuACosf(float)
NuSinCos(float, float*, float*)
NuTanf(float)
NuATanf(float)
NuATan2f(float, float)
NuSinOld(int)
NuASinOld(float)
NuVecMtxTransform(NUVEC*, NUVEC const*, NUMTX const*)
NuVecMtxTransformRHLH(NUVEC*, NUVEC const*, NUMTX const*)
NuVecMtxTransformH(NUVEC*, NUVEC const*, NUMTX const*)
NuVecMtxTranslate(NUVEC*, NUVEC const*, NUMTX const*)
NuVecMtxRotate(NUVEC*, NUVEC const*, NUMTX const*)
NuVecMtxRotateValX(NUVEC*, float, NUMTX const*)
NuVecMtxRotateValY(NUVEC*, float, NUMTX const*)
NuVecMtxRotateValZ(NUVEC*, float, NUMTX const*)
NuVecMtxRotateH(NUVEC*, NUVEC const*, NUMTX const*)
NuVecMtxScale(NUVEC*, NUVEC const*, NUMTX const*)
NuVecInvMtxTransform(NUVEC*, NUVEC const*, NUMTX const*)
NuVecInvMtxTranslate(NUVEC*, NUVEC const*, NUMTX const*)
NuVecInvMtxRotate(NUVEC*, NUVEC const*, NUMTX const*)
NuVecInvMtxRotateValX(NUVEC*, float, NUMTX const*)
NuVecInvMtxRotateValY(NUVEC*, float, NUMTX const*)
NuVecInvMtxRotateValZ(NUVEC*, float, NUMTX const*)
NuVecInvMtxScale(NUVEC*, NUVEC const*, NUMTX const*)
NuVecRotateXOld(NUVEC*, NUVEC const*, int)
NuVecRotateXRads(NUVEC*, NUVEC const*, float)
NuVecRotateYOld(NUVEC*, NUVEC const*, int)
NuVecRotateYRads(NUVEC*, NUVEC const*, float)
NuVecRotateZOld(NUVEC*, NUVEC const*, int)
NuVecRotateZRads(NUVEC*, NUVEC const*, float)
NuVecRotateYValZOld(NUVEC*, float, int)
NuVecRotateYValZRads(NUVEC*, float, float)
NuVecRotateYValXOld(NUVEC*, float, int)
NuVecRotateYValXRads(NUVEC*, float, float)
NuVecNeg(NUVEC*, NUVEC const*)
NuVecAdd(NUVEC*, NUVEC const*, NUVEC const*)
NuVecSub(NUVEC*, NUVEC const*, NUVEC const*)
NuVecScale(NUVEC*, NUVEC const*, float)
NuVecAddScale(NUVEC*, NUVEC const*, NUVEC const*, float)
NuVecScaleAccum(NUVEC*, NUVEC const*, float)
NuVecInvScale(NUVEC*, NUVEC const*, float)
NuVecCross(NUVEC*, NUVEC const*, NUVEC const*)
NuVecCrossRel(NUVEC*, NUVEC const*, NUVEC const*, NUVEC const*)
NuVecDot(NUVEC const*, NUVEC const*)
NuVecMag(NUVEC const*)
NuVecMagSqr(NUVEC const*)
NuVecMagXZ(NUVEC const*)
NuVecMax(NUVEC*, NUVEC const*, NUVEC const*)
NuVecMin(NUVEC*, NUVEC const*, NUVEC const*)
NuVecNorm(NUVEC*, NUVEC const*)
NuVecNormEx(NUVEC*, NUVEC const*)
NuVecSurfaceNormal(NUVEC*, NUVEC const*, NUVEC const*, NUVEC const*)
NuVecDist(NUVEC const*, NUVEC const*, NUVEC*)
NuVecDistSqr(NUVEC const*, NUVEC const*, NUVEC*)
NuVecXZDist(NUVEC const*, NUVEC const*, NUVEC*)
NuVecXZDistSqr(NUVEC const*, NUVEC const*, NUVEC*)
NuVecLerp(NUVEC*, NUVEC const*, NUVEC const*, float)
NuLineLineIntersect(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*, float*, float*)
BoundingBoxToLine(NUVEC const*, NUVEC const*, NUMTX const*, NUVEC const*, NUVEC const*, float, NUVEC*)
NuVecCompareTolerance(NUVEC const*, NUVEC const*, float)
NuVec4ScaleXYZVU0(NUVEC4*, NUVEC4 const*, float)
NuVecMagVU0(NUVEC const*)
NuVecToNuHalfVec(NUVEC const*, NUHALFVEC*)
NuHalfVecToNuVec(NUHALFVEC const*, NUVEC*)
NuVec4MtxRotateVU0(NUVEC4*, NUVEC4 const*, NUMTX const*)
NuVecInvMtxTransformVU0(NUVEC*, NUVEC const*, NUMTX const*)
NuVecMtxTransformVU0(NUVEC*, NUVEC const*, NUMTX const*)
NuPlnEqn(NUPLANE*, NUVEC const*, NUVEC const*, NUVEC const*)
NuPlnEqnPn(NUPLANE*, NUVEC const*, NUVEC const*)
NuPlnDist(NUPLANE const*, NUVEC const*)
NuPlnDist2(NUPLANE const*, NUVEC const*, NUVEC const*)
NuPlnLine(NUPLANE const*, NUVEC const*, NUVEC const*, NUVEC*)
NuPlnLine2(NUPLANE const*, NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*, NUVEC*, float*, float*)
NuPtInPoly(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*, NUPLANE const*)
NuPlnLine3(NUPLANE const*, NUVEC const*, NUVEC*, NUVEC*, bool*)
NuPtInPolyYZ(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
NuPtInPolyZY(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
NuPtInPolyXY(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
NuPtInPolyYX(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
NuPtInPolyZX(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
NuPtInPolyXZ(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
NuPlnPlnIntersect(NUPLANE const*, NUPLANE const*, NUVEC*, NUVEC*)
NuLineToPointDistSqrEx(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC*)
NuLineToPointDistSqr(NUVEC const*, NUVEC const*, NUVEC const*)
NuLineToPointDistSqrEx_Bounded(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC*)
NuLineToPointDistSqr_Bounded(NUVEC const*, NUVEC const*, NUVEC const*)
NuInfiniteLineToPointDistSqrEx(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC*)
NuInfiniteLineToPointDistSqr(NUVEC const*, NUVEC const*, NUVEC const*)
NuPointRelToBoundingBox(NUVEC const*, NUVEC const*, NUVEC const*)
NuClipXPlane(NUVEC*, NUVEC const*, NUVEC const*, float const*)
NuClipYPlane(NUVEC*, NUVEC const*, NUVEC const*, float const*)
NuClipZPlane(NUVEC*, NUVEC const*, NUVEC const*, float const*)
NuLineToLineDist(NUVEC*, NUVEC const*, NUVEC*, NUVEC const*)
NuPlnLineVU0(NUPLANE const*, NUVEC const*, NUVEC const*, NUVEC*)
NuVec4Add(NUVEC4*, NUVEC4 const*, NUVEC4 const*)
NuVec4Dot(NUVEC4 const*, NUVEC4 const*)
NuVec4Scale(NUVEC4*, NUVEC4 const*, float)
NuVec4AddScale(NUVEC4*, NUVEC4 const*, NUVEC4 const*, float)
NuVec4Sub(NUVEC4*, NUVEC4 const*, NUVEC4 const*)
NuVec4MtxTransform(NUVEC4*, NUVEC const*, NUMTX const*)
NuVec4MtxTransformH(NUVEC4*, NUVEC4 const*, NUMTX const*)
NuVec4Max(NUVEC4*, NUVEC4 const*, NUVEC4 const*)
NuVec4Min(NUVEC4*, NUVEC4 const*, NUVEC4 const*)
NuVec4Mag(NUVEC4 const*)
NuVec4MagSqr(NUVEC4 const*)
NuVec4Lerp(NUVEC4*, NUVEC4 const*, NUVEC4 const*, float)
NuVec4ToNuHalfVec4(NUVEC4 const*, NUHALFVEC4*)
NuHalfVec4ToNuVec4(NUHALFVEC4 const*, NUVEC4*)
NuVec4CompareTolerance(NUVEC4 const*, NUVEC4 const*, float)
NuCriticalSection::GetCriticalSectionCount()
NuCriticalSection::NuCriticalSection(char const*)
NuCriticalSection::~NuCriticalSection()
NuCriticalSection::Begin(int)
NuCriticalSection::TryBegin()
NuCriticalSection::End()
NuCheckVsnprintfResult(int, int, char const*)
NuToUpper(unsigned char)
NuToLower(unsigned char)
NuStrIStr(char const*, char const*)
NuStrICmp(char const*, char const*)
NuStrICmp_Fast(char const*, char const*)
NuStrCmpWildCard(char const*, char const*)
NuStrICmpWildCard(char const*, char const*)
NuStrFormatSize(char*, unsigned long, unsigned long, bool)
NuStrFormatPtrDiff(char*, unsigned long, long, bool)
NuStrFormatAddress(char*, unsigned long, void const*)
NuStrStripPath(char const*)
NuStrHashDJB2(char const*, unsigned int)
NuStrHashUpperCaseDJB2(char const*, unsigned int)
NuStrHashFNV1(char const*, unsigned int)
NuStrHashUpperCaseFNV1(char const*, unsigned int)
NuTime::NuTime(NuTime::CURRENT_TIME_ENUM)
NuTime::ClassInit()
NuTime::GetTicks(long*)
NuTime::NuTime(float)
NuTime::GetTicksPerSecond(long*)
NuTime::AsSeconds() const
NuTime::AsMicroSeconds() const
NuTime::AsMilliSeconds() const
NuTime::AsScanlines() const
NuTime::operator-(NuTime const&) const
NuTime::operator+(NuTime const&) const
NuTime::GetTicks()
NuTime::GetTicksPerSecond()
NuMemoryManager::GetSmallBinIndex(unsigned long)
NuMemoryManager::GetSmallBinSize(unsigned int)
NuMemoryManager::GetLargeBinIndex(unsigned long)
NuMemoryManager::CountLeadingZeros(unsigned int)
NuMemoryManager::GetLargeBinSlot(unsigned int, unsigned long)
NuMemoryManager::GetFlags()
NuMemoryManager::SetFlags(unsigned int)
NuMemoryManager::VisitManagers(NuMemoryManager::IVisitor*)
NuMemoryManager::NuMemoryManager(NuMemoryManager::IEventHandler*, NuMemoryManager::IErrorHandler*, char const*, char const**, unsigned long)
NuMemoryManager::~NuMemoryManager()
NuMemoryManager::PopContext(NuMemoryManager::PopDebugMode)
NuMemoryManager::ReleaseUnreferencedPages()
NuMemoryManager::GetDebugName() const
NuMemoryManager::GetBlockSizeOverhead() const
NuMemoryManager::SetZombie()
NuMemoryManager::IsZombie() const
NuMemoryManager::AddPage(void*, unsigned long, bool)
NuMemoryManager::BinLink(NuMemoryManager::FreeHeader*)
NuMemoryManager::AddRequestedPage(void*, unsigned long)
NuMemoryManager::AddExternalPage(void*, unsigned long)
NuMemoryManager::ReleaseExternalPage(void*)
NuMemoryManager::BinUnlink(NuMemoryManager::FreeHeader*)
NuMemoryManager::ConvertToUsedBlock(NuMemoryManager::FreeHeader*, unsigned long, unsigned int, char const*, unsigned short, NuBacktrace*)
NuMemoryManager::Bits::GetSize() const
NuMemoryManager::ClearUsedBlock(NuMemoryManager::Header*, unsigned int)
NuMemoryManager::StatsAddFragment(NuMemoryManager::FreeHeader*)
NuMemoryManager::StatsRemoveFragment(NuMemoryManager::FreeHeader*)
NuMemoryManager::BinLinkAfterNode(NuMemoryManager::FreeHeader*, NuMemoryManager::FreeHeader*)
NuMemoryManager::CalculateBlockSize(unsigned long) const
NuMemoryManager::TryGetBlockDebugName(NuMemoryManager::Header*) const
NuMemoryManager::ValidateAllocAlignment(unsigned long, char const*)
NuMemoryManager::ValidateAllocSize(unsigned long, char const*)
NuMemoryManager::_TryBlockAlloc(unsigned long, unsigned long, unsigned int, char const*, unsigned short)
NuMemoryManager::_BlockAlloc(unsigned long, unsigned long, unsigned int, char const*, unsigned short)
NuMemoryManager::CalculateLargestFragmentSize() const
NuMemoryManager::CalculateFreeBytes() const
NuMemoryManager::FormatSize(char*, unsigned long, unsigned long, bool)
NuMemoryManager::GetAllocatedBytes() const
NuMemoryManager::_MultiBlockAlloc(unsigned long, unsigned long, unsigned long, void**, unsigned int, char const*, unsigned short)
NuMemoryManager::ValidateBlockEndTags(NuMemoryManager::Header*, char const*)
NuMemoryManager::_BlockReAlloc(void*, unsigned long, unsigned long, unsigned int, char const*, unsigned short)
NuMemoryManager::ValidateAddress(void const*, char const*)
NuMemoryManager::ValidateBlockIsAllocated(NuMemoryManager::Header*, char const*)
NuMemoryManager::BlockFree(void*, unsigned int)
NuMemoryManager::ValidateBlockFlags(NuMemoryManager::Header*, unsigned int, char const*)
NuMemoryManager::ValidateBlockIsPaged(void const*, char const*)
NuMemoryManager::GetBlockSize(void*)
NuMemoryManager::GetBlockAlignment(void*)
NuMemoryManager::GetBlockDebugContext(void*)
NuMemoryManager::AddBlockDebugFlag(void*, unsigned int)
NuMemoryManager::SetBlockDebugName(void*, char const*)
NuMemoryManager::SetBlockDebugContext(void*, unsigned long)
NuMemoryManager::SetBlockDebugCategory(void*, unsigned short)
NuMemoryManager::ClearBlockDebugContext(void*)
NuMemoryManager::ValidateBlock(void*)
NuMemoryManager::ValidateBlockDeferredContent(NuMemoryManager::Header*, char const*)
NuMemoryManager::IsBlockAllocated(void*) const
NuMemoryManager::PushContext(char const*, bool)
NuMemoryManager::ExtractStringSafe(char*, char const*, unsigned int)
NuMemoryManager::Validate()
NuMemoryManager::StrandBlocksForContext(NuMemoryManager::Context*, unsigned int&, unsigned int&, NuMemoryManager::Header*&, unsigned int&)
NuMemoryManager::Dump(unsigned int, char const*, char*, unsigned int)
NuMemoryManager::GetCurrentContextName() const
NuMemoryManager::GetCurrentContextID() const
NuMemoryManager::GetContextName(unsigned long) const
NuMemoryManager::IsContextPerm(unsigned long) const
NuMemoryManager::FindAndTouchMatchingBlocks(NuMemoryManager::DebugHeader*, unsigned long*, unsigned int)
NuMemoryManager::UnTouchAllBlocks()
NuMemoryManager::DumpBlock(void*, NuSymbolQuery*, NuMemoryManager::Header*, unsigned int, unsigned long, unsigned int, NuMemoryManager::Header**, unsigned int)
NuMemoryManager::CreateSearchGraphForContext(NuMemoryManager::Context*)
NuMemoryManager::FindLargestFragment() const
NuMemoryManager::ReleaseSearchGraph(NuMemoryManager::GraphNode**)
NuMemoryManager::FindDepthFromSearchGraph(NuMemoryManager::GraphNode**, NuMemoryManager::Header*, NuMemoryManager::Header**, unsigned int)
NuMemoryManager::DumpBlocksForContext(void*, NuSymbolQuery*, NuMemoryManager::Context*, unsigned int)
NuMemoryManager::GetFreeBytes() const
NuMemoryManager::GetPagedBytes() const
NuMemoryManager::GetPeakAllocatedBytes() const
NuMemoryManager::ResetPeakAllocatedBytes()
NuMemoryManager::GetCategoryAllocatedBytes(unsigned short) const
NuMemoryManager::GetCategoryCount(unsigned short) const
NuMemoryManager::GetNumFreeFragments() const
NuMemoryManager::SetOverrideCategory(unsigned short)
NuMemoryManager::SetOverrideCategoryBGThread(unsigned short)
NuMemoryManager::GetOverrideCategory() const
NuMemoryManager::GetOverrideCategoryBGThread() const
NuMemoryManager::SetDumpResourcesCallback(void (*)(NuMemoryManager*, void*, NuMemoryManager::IErrorHandler*, char*, unsigned int))
NuMemoryPool::InterlockedAdd(unsigned int volatile*, unsigned int)
NuMemoryPool::InterlockedSub(unsigned int volatile*, unsigned int)
NuMemoryPool::InterlockedPush(NuMemoryPool::FreeBlock volatile**, void*)
NuMemoryPool::InterlockedPop(NuMemoryPool::FreeBlock volatile**)
NuMemoryPool::VisitPools(NuMemoryPool::IVisitor*)
NuMemoryPool::NuMemoryPool(NuMemoryPool::IEventHandler*, unsigned long, char const*)
NuMemoryPool::~NuMemoryPool()
NuMemoryPool::ReleaseUnreferencedPages()
NuMemoryPool::GetDebugName() const
NuMemoryPool::AddPage(void*, unsigned long)
NuMemoryPool::MergeSort(NuMemoryPool::FreeBlock volatile*, unsigned int)
NuMemoryPool::Merge(NuMemoryPool::FreeBlock volatile*, NuMemoryPool::FreeBlock volatile*)
NuMemoryPool::MergeSort(NuMemoryPool::Page*, unsigned int)
NuMemoryPool::Merge(NuMemoryPool::Page*, NuMemoryPool::Page*)
NuMemoryPool::ReleaseUnreferencedPages_OLD()
NuMemoryPool::ReleaseAllPages()
NuMemoryPool::GetPagedBytes()
NuMemoryPool::GetFreeBytes()
NuMemoryPool::GetAllocatedBytes()
NuMemoryPool::GetLargeBlockBytes()
NuMemoryPool::PageAlloc(unsigned long, char const*)
NuMemoryPool::_PoolBlockAlloc(unsigned long, char const*)
NuMemoryPool::PoolBlockFree(void*, unsigned long)
NuMemoryGet()
NuMemory::MemErrorHandler::HandleError(NuMemoryManager*, NuMemoryManager::ErrorCode, char const*)
NuMemory::MemErrorHandler::OpenDump(NuMemoryManager*, char const*, bool)
NuMemory::MemErrorHandler::CloseDump(NuMemoryManager*, void*)
NuMemory::MemErrorHandler::Dump(NuMemoryManager*, void*, char const*)
NuMemory::FixedPoolEventHandler::AllocatePage(NuMemoryPool*, unsigned long, unsigned long, char const*)
NuMemory::FixedPoolEventHandler::ReleasePage(NuMemoryPool*, void*)
NuMemory::GetThreadMem()
NuMemory::FixedPoolEventHandler::ForceReleasePage(NuMemoryPool*, void*)
NuMemory::FixedPoolEventHandler::AllocateLargeBlock(NuMemoryPool*, unsigned long, unsigned long, char const*)
NuMemory::FixedPoolEventHandler::FreeLargeBlock(NuMemoryPool*, void*)
NuMemory::DynamicPoolEventHandler::AllocatePage(NuMemoryPool*, unsigned long, unsigned long, char const*)
NuMemory::DynamicPoolEventHandler::ReleasePage(NuMemoryPool*, void*)
NuMemory::DynamicPoolEventHandler::ForceReleasePage(NuMemoryPool*, void*)
NuMemory::DynamicPoolEventHandler::AllocateLargeBlock(NuMemoryPool*, unsigned long, unsigned long, char const*)
NuMemory::DynamicPoolEventHandler::FreeLargeBlock(NuMemoryPool*, void*)
NuMemory::NuMemory(void**)
NuMemory::InitalizeThreadLocalStorage()
NuMemory::SetSoakTestMode()
NuMemory::SetThreadMem(NuMemoryManager*)
NuMemory::MoveFreeMem2IntoMem1()
NuMemory::CreateMemoryManager(NuMemoryManager::IEventHandler*, char const*)
NuMemory::DestroyMemoryManager(NuMemoryManager*)
NuMemory::CreateFixedMemoryPool(unsigned long, unsigned long, char const*)
NuMemory::CreateMemoryPool(NuMemoryPool::IEventHandler*, unsigned long, char const*)
NuMemory::CreateDynamicMemoryPool(unsigned long, char const*)
NuMemory::DestroyMemoryPool(NuMemoryPool*)
NuConstStringManager::SetCheckByte(NuConstStringManager::Header*)
NuConstStringManager::ValidateCheckByte(NuConstStringManager::Header const*)
NuConstStringManager::NuConstStringManager(unsigned int)
NuConstStringManager::~NuConstStringManager()
NuConstStringManager::DisableSharing()
NuConstStringManager::Alloc(char const*, bool)
NuConstStringManager::Clone(char const*)
NuConstStringManager::Free(char const*)
NuConstStringManager::Validate(char const*)
NuConstStringManager::ValidateAll()
NuInputManager::NuInputManager()
NuInputManager::UpdateAll(float)
NuInputDevice::GetCaps() const
NuInputManager::~NuInputManager()
NuInputManager::GetMaxDevices() const
NuInputDevice::Update(float, bool)
NuInputManager::KillRumbleAll()
NuInputDevice::KillRumble()
NuInputManager::GetDevice(unsigned int)
NuInputManager::GetDevice(unsigned int) const
NuInputManager::GetFirstDeviceByType(NUPADTYPE)
NuInputDevice::GetType() const
NuInputManager::GetFirstDeviceByType(NUPADTYPE) const
NuInputManager::GetHasSwitchedAcceptBack()
NuInputDevice::NuInputDevice(unsigned int)
NuInputDevice::SetDisconnected()
NuInputDevice::Clear()
NuInputDevice::~NuInputDevice()
NuInputDevice::DeadZone(NUPADANALOGVALUE, float)
NuInputDevice::AddTranslator(NuInputDeviceTranslator*)
NuInputDevice::ConvertToEmulatedTouchFromMouse()
NuInputDevice::ProcessTouchData()
NuInputDevice::GetPort() const
NuInputDevice::GetIdentifier_CAFE_SPECIFIC() const
NuInputDevice::GetLastValidType() const
NuInputDevice::GetAttachmentType() const
NuInputDevice::SupportsCaps(unsigned int) const
NuInputDevice::IsConnected() const
NuInputDevice::IsIntercepted() const
NuInputDevice::IsButtonPressed(unsigned int) const
NuInputDevice::GetButtons() const
NuInputDevice::GetAnalogValue(NUPADANALOGVALUE) const
NuInputDevice::GetMotionValue(NUPADMOTIONVALUE) const
NuInputDevice::GetTouchData() const
NuInputDevice::GetMouseData() const
NuInputDevice::SetMotors(float, float)
NuInputDevice::EnableDPD()
NuInputDevice::DisableDPD()
NuInputDevice::HasHeadphonesConnected() const
NuInputDevice::GetVolume() const
NuInputDevice::GetSortKey() const
NuVector<NuInputDevice*>::Reserve(unsigned int, bool)
NuLocaleManager::NuLocaleManager()
NuLocaleManager::SetCurrentLanguageFromConsole(bool*)
NuLocaleManager::GetLanguageFromEnglishName(char const*) const
NuLocaleManager::GetEnglishNameNoSpaces(NuLanguage) const
NuLocaleManager::GetLanguageFromEnglishNameTriple(char const*) const
NuLocaleManager::GetEnglishNameTriple(NuLanguage) const
NuLocaleManager::IsThisTheCurrentLanguage(char const*) const
NuLocaleManager::GetCurrentLanguage() const
NuLocaleManager::GetLanguageFromIsoCode(char const*) const
NuLocaleManager::GetIsoCode(NuLanguage) const
NuLocaleManager::IsPEGICountry_CAFE_SPECIFIC() const
NuLocaleManager::FallbackLangaugePair(NuLanguage, NuLanguage)
NuLocaleManager::SetCurrentLanguageIfAvailable(NuLanguage)
NuLocaleManager::SetLangaugeFallback()
NuLocaleManager::SetCurrentLanguage(NuLanguage)
NuLocaleManager::SetCurrentRegion(NuRegion)
NuLocaleManager::GetCornwallName(NuLanguage) const
NuLocaleManager::GetEnglishName(NuLanguage) const
NuLocaleManager::GetCurrentRegion() const
NuLocaleManager::GetLocalisedName(NuLanguage) const
NuLocaleManager::GetEnglishNameRegion(NuRegion) const
NuLocaleManager::GetRootLanguage(NuLanguage) const
NuApplicationState::NuApplicationState()
NuApplicationState::SetupBuildConfig()
NuApplicationState::~NuApplicationState()
NuApplicationState::BindCommandLine(int, char**)
NuVector<NuString>::Reserve(unsigned int, bool)
NuApplicationState::GetCommandLine() const
NuApplicationState::GetBuildConfigPlatform() const
NuApplicationState::GetAccurevStream() const
NuApplicationState::GetAccurevTransaction() const
NuApplicationState::SetStatus(NUAPPLICATIONSTATUS)
NuApplicationState::GetStatus() const
NuBgProc::Exists()
NuBgProc::Get()
NuBgProc::AllocProcInfo()
NuBgProc::ProcessRequest(NuBgProc::ProcInfo*)
NuBgProc::DoBgThread()
NuBgProc::RecordStart(NuBgProc::ProcInfo*)
NuBgProc::RecordEnd(NuBgProc::ProcInfo*)
NuBgProc::BgThread(void*)
NuBgProc::NuBgProc()
NuBgProc::~NuBgProc()
NuBgProc::SetUseForegroundThread(bool)
NuBgProc::GetDebugMode() const
NuBgProc::IsBgThread() const
NuBgProc::IsIdle() const
NuBgProc::IsDone() const
NuBgProc::AnyHighPriorityTasksWaiting() const
NuBgProc::WaitDone()
NuBgProc::PostRequest(char const*, void (*)(void*), void (*)(void*), void*, long, NuBgProc::Priority, bool)
NuBgProc::BlockProcessingBegin()
NuBgProc::BlockProcessingEnd()
NuBgProc::ClearRequests(long)
NuBgProc::SaveRecords()
NuBgProc::SuspendMain()
NuBgProc::StopRecording()
NuFixedStringT<(unsigned short)1024>::Format(char const*, ...)
NuBgProc::GetDebugHistory(NuBgProc::DebugInfo const**, NuBgProc::DebugInfo const**, int, NuTime, NuBgProc::DebugInfoTotals*) const
NuCore::Initialize()
NuCore::GetApplicationState()
NuCore::GetConstStringManager()
NuCore::GetFixupManager()
NuEventHandler::NuEventHandler()
NuEventHandler::~NuEventHandler()
NuEventHandler::Enable(bool)
NuEventHandler::EventThread_Main(void*)
NuEventHandler::SendEvent(int, char const*, int, char const*)
NuEventHandler::WaitDone(int)
EventSubscriber::CreateMemoryPool()
Event::Event(bool, bool)
Event::Init(bool)
Event::~Event()
Event::UnSubscribeAll()
Event::~Event()
Event::Subscribe(IEventListener&, bool, unsigned int)
Event::SubscribeInternal(EventSubscriber&)
IEventListener::AddSubscribedEvent(Event&, EventSubscriber&)
IEventListener::UnSubscribe(Event&)
Event::UnSubscribe(EventSubscriber&)
Event::Dispatch(LevelContainer*, NuEventData*)
Event::FreeUnusedPages()
Event::CountNoOfSubscribers()
IEventListener::~IEventListener()
IEventListener::UnSubscribeAll()
IEventListener::~IEventListener()
IEventListener::FreeUnusedPages()
IEventListener::IsSubscribedTo(Event&)
MultiFrameEvent::MultiFrameEvent(bool, bool)
MultiFrameEvent::Dispatch(LevelContainer*, NuEventData*)
MultiFrameEventData::Init()
BgProcDispatchEvent::Subscribe(IEventListener&, bool, unsigned int)
BgProcDispatchEvent::Dispatch(LevelContainer*, NuEventData*)
BgProcDispatchEvent::AddPendingSubscribers()
BgProcDispatchEvent::ClearPendingSubscriber(EventSubscriber&)
BgProcDispatchEvent::UnSubscribe(EventSubscriber&)
BgProcDispatchEvent::~BgProcDispatchEvent()
BgProcDispatchEvent::~BgProcDispatchEvent()
Event::operator==(Event const&) const
Event::operator!=(Event const&) const
Event::GetEventClassType() const
MultiFrameEvent::~MultiFrameEvent()
MultiFrameEvent::~MultiFrameEvent()
NuColour::Serialize(NuSerialize&)
NuColour::RGBMEncode() const
NuColour::RGBMDecode() const
NuColour::LogLuvEncode() const
NuColour::LogLuvDecode() const
NuColour::SRGBToLinear() const
NuColour::LinearToSRGB() const
Colours::GetFunRainbowColour()
Colours::GetFunRainbowColour(float)
Colours::GetFunRainbowColour(float, float, int)
Colours::GetSpacedOutColour(int, int)
Colours::GetSpacedOutColourTable(unsigned int*, int)
Colours::GetBlendedColour(unsigned int, unsigned int, float)
NuError::Init()
NuError::Update()
NuError::Shutdown()
NuError::FormatError(char*, int, char const*, int, char const*, bool, std::__va_list)
NuError::CallHandler(char const*, int, int)
NuError::_LogAndPrint(char const*, int, char const*, int, ...)
NuError::_HandleDebugMsgUnformatted(char const*, ...)
NuError::_CallHandlerAndDump(char const*, int, char const*, int, int, ...)
NuError::_LogAndPrintAndCallHandlerAndDump(char const*, int, char const*, int, int, ...)
NuError::_LogAndPrintAndCallHandlerAndDumpV(char const*, int, char const*, int, int, std::__va_list)
NuError::SendEvent(int, char const*, int, char const*)
NuError::_HandleDebugMsgV(char const*, int, char const*, std::__va_list)
NuError::_HandleEventV(char const*, int, char const*, std::__va_list)
NuError::SetDebugMsgFilter(char*)
NuError::LockMsgHandlers(bool)
NuError::SetErrorMsgHandler(void (*)(char const*, int, int))
NuError::SetDebugMsgHandler(void (*)(char const*))
NuError::SetCrashMsgHandler(void (*)(int, char**))
NuError::SetCrashDumpHandler(void (*)(char const*))
NuError::GetCrashMsgHandler()
NuError::GetCrashDumpHandler()
NuError::EnableSkippableErrorAutoSkip()
NuError::EnableSkippableErrorReporting()
NuError::EnableSilentExit()
NuError::SetLoggingEnabled(bool)
NuError::SetDebugMsgEnabled(bool)
NuError::SetSendEventEnabled(bool)
NuError::AutoSkipSkippableErrors()
NuError::ReportSkippableErrors()
NuError::SilentExit()
NuUniqueObject::~NuUniqueObject()
NuUniqueObject::~NuUniqueObject()
NuUniqueObject::NuUniqueObject()
NuUniqueObject::NuUniqueObject(NuUniqueObject const&)
NuUniqueObject::GetRefCount() const
NuUniqueObject::AddRef()
NuUniqueObject::ReleaseRef()
NuUniqueObject::GetNuUniqueNameHash() const
NuUniqueObject::GetNuUniqueName() const
NuSaveCore::NuSaveCore()
NuSaveCore::InitFileTypes()
NuSaveCore::RegisterFileTypes()
NuSaveCore::RegisterFileType(SaveFileType&)
NuSaveCore::OnUpdate()
NuSaveCore::Init()
NuSaveCore::ThreadFunc(void*)
NuSaveCore::PreThreadTimingFunc(SaveThreadData*)
NuSaveCore::CreateSaveDataComplete(SaveThreadData*)
NuSaveCore::SendFinishedSerialisingEvent(SaveThreadData*)
NuSaveCore::ReadSaveDataComplete(SaveThreadData*)
NuSaveCore::WriteSaveDataComplete(SaveThreadData*)
NuSaveCore::DeleteSaveDataComplete(SaveThreadData*)
NuSaveCore::EnumerateSlotsComplete(SaveThreadData*)
NuSaveCore::SendFinishedEnumeratingEvent(SaveThreadData*)
NuSaveCore::WriteSubSection_ThreadFunc(SaveThreadData*)
NuSaveCore::SendCustomReadFinishedEvent(SaveThreadData*)
NuSaveCore::DebugPrintSaveCoreErrors()
NuSaveCore::CurrentlyNoErrors()
NuSaveCore::GetSaveDataInBuffer()
NuSaveCore::GetSaveDataBufferSize() const
NuSaveCore::GetVersionPointer()
NuSaveCore::GetProgressPointer()
NuSaveCore::GetProgressChecksumPointer()
NuSaveCore::GetDataChecksumPointer()
NuSaveCore::GetCurrentSlot() const
NuSaveCore::SetCurrentSlot(int)
NuSaveCore::HasCurrentSlot() const
NuSaveCore::EnumerateFiles()
NuSaveCore::ClearAllFileExistsCurrentSlot()
NuSaveCore::SetSlotVersion(int, int)
NuSaveCore::GetSlotVersion(int)
NuSaveCore::GetSaveBufferSize() const
NuSaveCore::GetBuildSaveGameVersion()
NuSaveCore::SetNoCurrentSlot()
NuSaveCore::IsSlotValid(int) const
NuSaveCore::IsSlotUsed(int) const
NuSaveCore::IsSlotCorrupt(int) const
NuSaveCore::SetSlotCorrupt(int, bool)
NuSaveCore::ClearAllSlotsCorrupt()
NuSaveCore::NoSavesPresent() const
NuSaveCore::AnySavePresent() const
NuSaveCore::ClearAllSlotsUsed()
NuSaveCore::SetSlotUsed(int, bool)
NuSaveCore::FileExists(int, int)
NuSaveCore::FatalSaveError()
NuSaveCore::SetFatalSaveError()
NuSaveCore::ReadSaveData(int, int, LoadTrigger, SaveQueueInfo*)
NuSaveCore::HasAnyErrors()
NuSaveCore::GetFileTypePtr(int)
NuSaveCore::WriteSaveData(int, int, SaveQueueInfo*)
NuSaveCore::CreateChecksum(void const*, int, unsigned int) const
NuSaveCore::ExternalDeleteUtility()
NuSaveCore::ClearAllErrors()
NuSaveCore::DeleteSubFile(int, int)
NuSaveCore::ShowDeviceSelect(SaveAction)
NuSaveCore::Create(int)
NuSaveCore::WriteSubFileData(int, void*)
NuSaveCore::EnoughRoomToSave() const
NuSaveCore::DeleteAll()
NuSaveCore::ClearOldestAndMostRecentSaveGameSlot()
NuSaveCore::GetMostRecentSaveGameSlot() const
NuSaveCore::GetNextSaveSlot() const
NuSaveCore::EnumerateSlots()
NuSaveCore::DeleteCurrentSlot()
NuSaveCore::InvalidSlot(int)
NuSaveCore::SetError(SaveError, bool)
NuSaveCore::IsReady() const
NuSaveCore::IsBusy() const
NuSaveCore::IsError(SaveError)
NuSaveCore::CalculateBufferSize()
NuSaveCore::FindOldestNewestSaves()
NuSaveCore::AllocateSaveBackBufferMemory()
NuSaveCore::WriteCustomSaveData()
NuSaveCore::ReadCustomSaveData()
NuSaveCore::AllowedToSkipArtificialDelay(SaveThreadData*, NuSaveCore::SaveIconDelay)
NuSaveCore::KillSaveThread()
NuSaveCore::ValidateChecksum(void*, int, unsigned int)
NuSaveCore::CalcCrc32(unsigned char, unsigned int, unsigned int) const
NuSaveCore::ValidTypeID(int)
NuSaveCore::GetOptionsSlotFileType()
NuSaveCore::GetDescription1()
NuSaveCore::GetDescription2()
NuVector<SaveFileType>::~NuVector()
NuSaveCore::GetSaveFileTypes()
NuSaveCore::GetFileName(SaveFileType*, int)
NuSaveCore::FoundMostRecentSaveGame() const
NuSaveCore::UseMostRecentSaveGame()
NuSaveCore::GetProgress(int)
NuSaveCore::SetNextWriteProgress(float)
NuSaveCore::GetSaveDateTime(int)
NuSaveCore::FileTypeFromFileName(char*)
NuSaveCore::FileIndexFromFileName(char*)
NuSaveCore::UISaysWritingInProgress()
NuSaveCore::HurryUp(bool)
NuSaveCore::CheckScePiggyBackRequests()
NuApiEventFinishedSerialisingData::NuApiEventFinishedSerialisingData(int, int, SaveThreadData::Command, bool)
NuApiEventFinishedSerialisingData::GetFileTypeID()
NuApiEventFinishedSerialisingData::GetFileIndex()
NuApiEventFinishedSerialisingData::IsSave()
NuApiEventFinishedSerialisingData::IsLoad()
NuApiEventFinishedSerialisingData::WasDataWritten()
NuApiEventFinishedSerialisingData::IsCreateUberFile()
NuApiEventFinishedSerialisingData::IsUserInitiated()
IsSaveIconVisibleEventData::IsSaveIconVisibleEventData()
SceCheckPiggyBackEventData::SceCheckPiggyBackEventData()
NuSaveCore::~NuSaveCore()
NuSaveCore::~NuSaveCore()
NuSaveCore::PlatformCanSaveLanguageChoice()
NuSaveCore::EnoughRoomToCreateNewSlot() const
NuSaveCore::RoomToSaveFile(int)
NuSaveCore::InvalidSaveDevice() const
NuSaveCore::NeedDeviceSelect() const
NuSaveCore::NeedFileCreate() const
NuSaveCore::UsesExternalSaveUtility() const
NuSaveCore::FileOwnerIsMe() const
NuSaveCore::AllCorrupt() const
NuSaveCore::InitPS()
NuSaveCore::Init_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::ShowDeviceSelect_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::CreateFile_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::DeleteFile_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::DeleteCurrentSlot_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::EnumerateSlots_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::EnumerateFiles_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::EnumerateFiles_NonThreaded_PS()
NuSaveCore::Update_ThreadFunc_PS()
NuSaveCore::DeleteAll_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::ExternalDeleteUtility_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::Custom_ReadSaveData_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::Custom_WriteSaveData_ThreadFunc_PS(SaveThreadData*)
NuSaveCore::StoreMetaDataInFile()
NuSaveCore::ReadChecksumFromElsewhere(SaveThreadData*)
NuSaveCore::WriteNextProgressElsewhere(float)
NuSaveCore::SaveThreadTerminated()
NuSaveCore::SaveThreadStarted()
NuApiEventFinishedSerialisingData::~NuApiEventFinishedSerialisingData()
IsSaveIconVisibleEventData::~IsSaveIconVisibleEventData()
SceCheckPiggyBackEventData::~SceCheckPiggyBackEventData()
NuVector<SaveFileType>::Reserve(unsigned int, bool)
SaveFileType::SaveFileType()
SaveFileType::CreateMainFileType(int, char const*, int, int, int)
SaveFileType::Init(int, char const*, int, int, int, int, int)
SaveFileType::CreateSubFileType(int, char const*, int, int, int, int)
SaveFileType::CreateOptionsSlotFileType(int, char const*, int, int)
SaveFileType::IsValid()
SaveFileType::IsSubFile()
SaveFileType::IsAMainFile()
SaveThreadData::SaveThreadData(SaveThreadData::Command)
SaveQueueInfo::SaveQueueInfo()
SaveQueueInfo::IsFirstRequestOfThisQueue() const
SaveQueueInfo::IsLastRequestOfThisQueue() const
NuStrCpyWC(char*, char const*, char*)
NuStrICmpWC(char const*, char const*, char*)
NuStrCatC(char*, char)
NuStrNCat(char*, char const*, long)
NuStrSpn(char const*, char const*)
NuStrCpy(char*, char const*)
NuStrNCpy(char*, char const*, long)
NuStrChr(char const*, char)
NuStrChr(char*, char)
NuStrRChr(char const*, char)
NuStrRChr(char*, char)
NuStrLenU(unsigned char*)
NuStrFindPosU(unsigned char*, int)
NuStrEndsWith(char const*, char)
NuStrCmp(char const*, char const*)
NuStrNCmp(char const*, char const*, int)
NuStrNICmp(char const*, char const*, int)
NuStrUpr(char*, char const*)
NuStrLwr(char*, char const*)
NuHexStringToI(char const*)
NuToUpperW(unsigned short)
NuToLowerW(unsigned short)
NuStrCatW(unsigned short*, unsigned short const*)
NuStrNCatW(unsigned short*, unsigned short const*, int)
NuStrCpyW(unsigned short*, unsigned short const*)
NuStrNCpyW(unsigned short*, unsigned short const*, int)
NuStrChrW(unsigned short const*, unsigned short)
NuStrRChrW(unsigned short const*, unsigned short)
NuStrLenW(unsigned short const*)
NuStrStrW(unsigned short const*, unsigned short const*)
NuStrIStrW(unsigned short const*, unsigned short const*)
NuStrCmpW(unsigned short const*, unsigned short const*)
NuStrICmpW(unsigned short const*, unsigned short const*)
NuStrNCmpW(unsigned short const*, unsigned short const*, int)
NuStrNICmpW(unsigned short const*, unsigned short const*, int)
NuStrUprW(unsigned short*, unsigned short const*)
NuStrLwrW(unsigned short*, unsigned short const*)
NuVSPrintf(char*, char const*, std::__va_list)
NuSPrintfW(unsigned short*, unsigned short const*, ...)
NuUnicodeToAscii(char*, unsigned short const*)
NuAsciiToUnicode(unsigned short*, char const*)
NuStringTok(char const*, ...)
NuIsAlNum(char)
NuIsAl(char)
NuIToA(int, char*, int)
NuAToF(char const*)
NuAToI(char const*)
NuStrToL(char const*, char**, int)
NuIsAlW(unsigned short)
NuIToAW(int, unsigned short*, int)
NuAToFW(unsigned short const*)
NuAToIW(unsigned short const*)
NuStrToLW(unsigned short const*, unsigned short**, int)
NuStrToLower(char*)
NuStrToUpper(char*)
NuStrReverse(char const*, char*)
NuUnicodeToUTF8(unsigned char*, unsigned short const*)
NuUTF8ToUnicode(unsigned short*, unsigned char const*)
NuUnicodeCharFromUTF8(unsigned short*, char const*)
NuUTF8CharFromUnicode(char*, unsigned short)
GetLineW(unsigned short*, NuFile*)
NuStringTableSetFormat(int)
NuStringTableGetFormat()
NuStringTableLoadCSV(char const*, nuvariptr_u*, nuvariptr_u, char const*, NuLanguage, int)
NuStringTableSetBank(eStringBanks)
NuStringTableGetBank()
NuStringTableSetPlatformFilter(char const*)
NuStringTableSetTypeFilter(char const*)
NuStringTableLoad(char const*, nuvariptr_u*, nuvariptr_u)
NuStringTableUnload()
NuStringTableGetIdByName(char const*)
NuStringTableGetById(int)
NuStringTableGetByName(char const*, char**)
NuStringTableGetStringN(int, char**)
NuStringTableSaveCharacterList(char const*, nuvariptr_u, void*)
NuStringIterateBegin()
NuStringIterateNext()
NuStringIterateEnd()
NuStrFixExtPlatform(char*, char const*, char const*, int, char const*)
NuStrFixExt(char*, char const*, char const*, int)
NuStrGetFilenameNoExt(char*, char const*, int)
NuStrGetPath(char*, char const*, int)
NuStrGetExt(char*, char const*, int)
NuStrSubstituteString(char*, char const*, char const*, char const*)
NuStringFilterLoad(char const*, nuvariptr_u*, nuvariptr_u)
NuStringFilterLoad(char const*)
NuStringContains(unsigned short const*, unsigned short const*)
NuStringFilterBadWordsW(unsigned short*, unsigned short*, unsigned short*)
NuStringFilterBadWords(char*, char*, char*)
MakeUIntFromString(char const*, char)
NuStripSpecialChars(char*, bool)
NuThreadBase::NuThreadBase(NuThreadCreateParameters const&)
NuThreadBase::~NuThreadBase()
NuThreadBase::GetThreadFn() const
NuThreadBase::GetParam() const
NuThreadBase::SetLocalStorage(unsigned int, void*)
NuThreadBase::SetDebugName(char const*)
NuThreadBase::GetDebugName() const
NuThreadBase::GetLocalStorage(unsigned int) const
NuThreadManager::NuThreadManager()
NuThreadManager::CreateThread(void (*)(void*), void*, int, char const*, int, NUTHREADCAFECORE, NUTHREADXBOX360CORE, NUTHREADORBISCORE, NUTHREADDURANGOCORE, NUTHREADNNXCORE)
NuThreadManager::CreateThreadSuspended(void (*)(void*), void*, int, char const*, int, NUTHREADCAFECORE, NUTHREADXBOX360CORE, NUTHREADORBISCORE, NUTHREADDURANGOCORE, NUTHREADNNXCORE)
NuThreadManager::AllocTLS()
NuThreadManager::FreeTLS(int)
NuThreadManager::GetMainThread()
NuThreadManager::GetCurrentThread()
NuThreadManager::IsMainThread() const
NuTimeGetFrameTime()
NuTimeForceFrameTime(float)
NuTimeLockFrameTime(int)
NuTimeDisableMaxFrameTimeClamping(bool)
nninitStartup
AllocateFS(unsigned long)
Allocate(unsigned long, unsigned long, void*)
nnMain
HandleMessageAutoLoop(void*)
NNX_DisablePowerDown()
NNX_EnablePowerDown()
NuInputDevicePS::ClassInitPS()
NuInputDevicePS::GetNumPorts()
NuInputDevicePS::ClassShutdownPS()
NuInputDevicePS::UpdateAllPS(float)
NuInputDevicePS::IsConnectedPS(unsigned int)
NuInputDevicePS::IsInterceptedPS(unsigned int)
NuInputDevicePS::GetTypePS(unsigned int)
NuInputDevicePS::GetAttachmentTypePS(unsigned int)
NuInputDevicePS::GetCapsPS(unsigned int)
NuInputDevicePS::ReadButtonsPS(unsigned int, unsigned int*)
NuInputDevicePS::GetStickDeadZone(unsigned int)
NuInputDevicePS::GetButtonDeadZone(unsigned int)
NuInputDevicePS::ReadAnalogValuesPS(unsigned int, float*)
NuInputDevicePS::ReadMotionValuesPS(unsigned int, float*)
NuInputDevicePS::ReadTouchDataPS(unsigned int, NuInputTouchData*)
NuInputDevicePS::ReadMouseDataPS(unsigned int, NuInputMouseData*)
NuInputDevicePS::SetMotorsPS(unsigned int, float, float)
NuInputDevicePS::EnableDPDPS(unsigned int)
NuInputDevicePS::DisableDPDPS(unsigned int)
NuInputDevicePS::HasHeadphonesConnectedPS(unsigned int)
NuInputDevicePS::GetVolumePS(unsigned int)
NuThread::AddThreadToList()
NuThread::NuThread(NuThreadCreateParameters const&)
NuThread::ThreadMain(void*)
NuThread::SetPriority(NUTHREADPRIORITY)
NuThread::SetDebugName(char const*)
NuThread::Resume()
NuThread::Join()
NuThread::~NuThread()
NuThreadEvent::Signal()
NuThreadEvent::Wait()
NuThreadInitPS()
NuThreadSleep(int)
NuThreadYield()
NuThreadGetCurrentThread()
NuThreadEvent::NuThreadEvent(bool)
NuThreadEvent::~NuThreadEvent()
NuThreadEvent::Reset()
NuMemoryPS::Mem1EventHandler::Mem1EventHandler()
NuMemoryPS::Mem1EventHandler::AllocatePage(NuMemoryManager*, unsigned long, unsigned long)
NuMemoryPS::Mem1EventHandler::ReleasePage(NuMemoryManager*, void*, unsigned long)
NuMemoryPS::Mem2EventHandler::Mem2EventHandler()
NuMemoryPS::Mem2EventHandler::AllocatePage(NuMemoryManager*, unsigned long, unsigned long)
NuMemoryPS::Mem2EventHandler::ReleasePage(NuMemoryManager*, void*, unsigned long)
NuErrorPrintPS(char const*)
NuErrorDumpPS(char const*, int)
NuDebugMsgPrintPS(char const*)
NuLanguageInitPS(NuLanguage*, NuRegion*)
NuLanguageConsoleSelectable(bool*)
NuCrashDumpGetId()
NuCrashDumpGetRoot()
NuCrashDumpGetDir()
NuCrashdumpOpenFile(char const*, unsigned int, nufilemode_e)
NuCrashdumpBegin(char const*)
NuCrashdumpCopyFile(char const*, unsigned int, char const*, void (*)(float))
NuKeyboard(int)
NuKeyboard_db(int)
NuKey_last()
NuKey_current()
NuKeyGet(int*)
NuKeyFlush()
NuBacktrace::NuBacktrace()
NuBacktrace::CaptureBackTrace(unsigned int)
NuFixupManager::NuFixupManager()
NuFixupManager::~NuFixupManager()
NuFixupManager::GetReferenceNext(NuFixupManager::Reference const*) const
NuFixupManager::GetReferenceType(NuFixupManager::Reference const*) const
NuFixupManager::SetReferenceNextBits(NuFixupManager::Reference*, NuFixupManager::Reference const*, NuFixupManager::ReferenceType)
NuFixupManager::MatchByID(NuFixupManager::MetaData const*, NuIdentifier const&, NuIdentifier const&, NuIdentifier const&) const
NuFixupManager::ClassesInRelation(NuIdentifier const&, NuIdentifier const&) const
NuFixupManager::LinkByIDAndSetObjectType(NuIdentifier const&, NuFixupManager::MetaData*)
NuFixupManager::LinkByObject(NuUnknown*, NuFixupManager::MetaData*)
NuFixupManager::UnlinkByID(NuIdentifier const&, NuIdentifier const&, NuIdentifier const&)
NuFixupManager::GetIdMapNext(NuFixupManager::MetaData const*) const
NuFixupManager::UnlinkByObject(NuUnknown*)
NuFixupManager::UnlinkByIDAndDeleteMetaData(NuFixupManager::MetaData*)
NuFixupManager::RegisterObject(NuUnknown*, NuIdentifier const&, NuIdentifier const&, NuIdentifier const&)
NuFixupManager::SetReferenceValue(NuFixupManager::Reference*, NuUnknown*, NuFixupManager::ReferenceCallbacks*)
NuFixupManager::UnregisterObject(NuUnknown*)
NuFixupManager::IsObjectRegistered(NuUnknown*, NuIdentifier*, NuIdentifier*, NuIdentifier*)
NuFixupManager::RegisterReference(NuFixupManager::Reference*, NuIdentifier const&, NuIdentifier const&, NuIdentifier const&, NuFixupManager::ReferenceType, NuFixupManager::ReferenceCallbacks)
NuFixupManager::RegisterReference(NuFixupManager::Reference*, NuFixupManager::Reference*, NuFixupManager::ReferenceType, NuFixupManager::ReferenceCallbacks)
NuFixupManager::GetReferenceValue(NuFixupManager::Reference const*)
NuFixupManager::UnregisterReference(NuFixupManager::Reference*)
NuFixupManager::GetReferenceIDs(NuFixupManager::Reference const*, NuIdentifier&, NuIdentifier&, NuIdentifier&)
NuFixupManager::UpdateObjectID(NuUnknown*, NuIdentifier const&)
NuFixupManager::Search(NuIdentifier const&, NuIdentifier const&, unsigned int, NuFixupManager::ReferenceInfo*, bool)
NuFixupManager::Search(NuIdentifier const&, NuIdentifier const&, NuIdentifier const&, NuFixupManager::ReferenceInfo*, bool)
NuFixupManager::PushContext()
NuFixupManager::PopContext(bool)
NuFixupManager::Validate()
NuFixupManager::SetDuplicateObjectHandler(bool (*)(NuUnknown*, NuIdentifier const&, NuIdentifier const&, NuIdentifier const&))
NuFixupManager::SetClassMappingHandler(bool (*)(NuIdentifier const&, NuIdentifier const&))
NuFixupManager::SetFixupHandlers(void (*)(NuFixupManager::Reference*), void (*)(NuFixupManager::Reference*))
NuApi::~NuApi()
NuTextureDebug::NuTextureDebug()
NuTextureDebug::RegisterImposeParams()
NuTextureFiltering::NuTextureFiltering()
NuTextureFiltering::RegisterImposeParams()
NuRenderThreadSetup::NuRenderThreadSetup()
NuRenderThreadSetup::FrameEnd()
NuRenderThreadSetup::DoZPrePass()
NuStereo3DSetup::NuStereo3DSetup()
NuStereo3DSetup::RegisterImposeParams()
NuStereo3DSetup::TweakProjMtxForStereo(NuMatrixBase&, float, float) const
NuApi::CreateDebugColours()
NuApi::GetDebugColour(int)
NuApi::NuApi()
NuApi::SetVideoAspect(NUVIDEO_ASPECT)
NuApi::RegisterImposeParams()
NuApi::StoreAPISettings()
NuApi::RestoreAPISettings()
NuApi::DebugDraw3D()
NuApi::DebugDraw2D()
NuInitHardwareParams::NuInitHardwareParams()
NuInitHardwareFromParams(NuInitHardwareParams*)
ParseCommandLine()
NuApi::PushContext(char const*, bool)
NuInitHardware(int, ...)
NuPreBakeTmServerAddress()
NuFrameBegin()
NuFrameEndBgLoadPS()
NuCheckGameIsInteractive()
NuCheckInactivity()
NuApi::TerminateHardware()
NuFrameEnd()
NuApi::RebuildDebugShaders()
NuCommandLine(int*, char***)
NuDisableOSMenuFreeze()
NuApi::CameraSet(NuCamera&, int)
NuApi::CameraSet(NuCamera*, int)
NuApi::GetVideoAspect() const
NuApi::DrawBlackQuadAtEndOfFrame(int)
NuBlockUntilGPUIdle()
NuApi::GetConverterPath()
NuApi::NotifyFrontEndStartupSequenceCompleted()
NuApi::PopContext(bool)
NuApi::GetCurrentContextName()
NuApi::GetCurrentContextID()
NuApi::ResetInternalTimers()
NuApi::CatchCodeCull() const
IsGameInteractiveEventData::IsGameInteractiveEventData()
NuApi::TmpDisableCatchCodeCull::TmpDisableCatchCodeCull()
NuApi::TmpDisableCatchCodeCull::~TmpDisableCatchCodeCull()
IsGameInteractiveEventData::~IsGameInteractiveEventData()
NuCounters::NuCounters()
NuCounters::RegisterImposeParams()
NuCounters::FrameEnd()
NuCounters::DebugDraw()
NuCounters::IncrementTextureMemoryCounters(int, NUT_TYPE, unsigned int)
NuCounters::DecrementTextureMemoryCounters(int, NUT_TYPE, unsigned int)
NuCounters::IncrementVertexMemoryCounters(int)
NuCounters::DecrementVertexMemoryCounters(int)
NuCounters::IncrementShaderMemoryCounters(int)
NuCounters::DecrementShaderMemoryCounters(int)
NuFileManager::NuFileManager()
NuFileManager::~NuFileManager()
NuFileManager::Initialise()
NuFileManager::PushHighPriorityMode(bool)
NuFileManager::PopHighPriorityMode()
NuFileManager::GetHighPriorityMode() const
NuFileManager::AddRequest(NuFileRequest*)
NuFileRequest::SetProcessFilterID(int)
NuFileManager::GetProcessFilterID()
NuFileManager::RemoveRequest(NuFileRequest*)
NuFileNotifier::Release(NuFileRequest*)
NuFileManager::Cleanup()
NuFileManager::ClearPakFile()
NuFileManager::ProcessRequest(bool volatile*)
NuFileManager::FindNextRequest()
NuFileManager::LoadRequest(NuFileRequest*, bool volatile*)
NuFileRequest::GetProcessFilterID()
NuFileManager::ProcessAllRequests(bool volatile*)
NuFileManager::FindNextPakFileRequest(NuFileRequest*)
NuTextureFileRequest::ReadFromFile(NuFile*)
NuFileManager::IsLoadedPakFile(NuFileRequest*) const
NuFileManager::LoadRequestPakFile(NuFileRequest*)
NuFileManager::PushProcessFilter()
NuFileManager::IncrementProcessFilterID()
NuFileManager::PopProcessFilter()
NuFileManager::DecrementProcessFilterID()
NuFileManager::SetProcessFilterID(int)
NuFileManager::SetUseProcessFiltering(bool)
NuFileNotifier::NuFileNotifier()
NuFileNotifier::~NuFileNotifier()
NuFileNotifier::~NuFileNotifier()
NuFileNotifier::Reference(NuFileRequest*)
NuFileRequest::NuFileRequest(char const*, NuFileNotifier*, NuMemoryManager*)
NuFileRequest::NuFileRequest(char const*, char const*, NuFileNotifier*, NuMemoryManager*)
NuFileRequest::NuFileRequest(char const*, unsigned int const&, NuFileNotifier*, NuMemoryManager*)
NuAnimFileRequest::~NuAnimFileRequest()
NuFileRequest::~NuFileRequest()
NuFileRequest::GetMemSize() const
NuFileRequest::IsSamePakFile(NuFileRequest*) const
NuFileRequest::ReadFromMem(void*, unsigned int, bool volatile*)
NuFileRequest::AllocateMem(unsigned int)
NuFileRequest::FreeMem(void*)
NuFileRequest::Fixup()
NuGHGFileRequest::NuGHGFileRequest(char const*, NuFileNotifier*)
NuGHGFileRequest::NuGHGFileRequest(char const*, char const*, NuFileNotifier*)
NuGHGFileRequest::~NuGHGFileRequest()
NuGHGFileRequest::~NuGHGFileRequest()
NuGHGFileRequest::Read(bool volatile*)
NuGHGFileRequest::ReadFromMem(void*, unsigned int, bool volatile*)
NuAnimFileRequest::NuAnimFileRequest(char const*, NuCompressMode, bool, NuFileNotifier*)
NuAnimFileRequest::NuAnimFileRequest(char const*, char const*, NuCompressMode, bool, NuFileNotifier*)
NuAnimFileRequest::NuAnimFileRequest(char const*, unsigned int const&, NUFILETYPE, NuCompressMode, bool, NuFileNotifier*)
NuAnimFileRequest::~NuAnimFileRequest()
NuAnimFileRequest::Read(bool volatile*)
void NuSerialize::SerializeLinkToObject<NuKrawlyAnimData>(NuKrawlyAnimData*&)
NuAnimFileRequest::ReadFromMem(void*, unsigned int, bool volatile*)
NuAnimFileRequest::AllocateMem(unsigned int)
NuAnimFileRequest::FreeMem(void*)
NuGSceneFileRequest::NuGSceneFileRequest(char const*, NuFileNotifier*, NuMemoryManager*)
NuGSceneFileRequest::~NuGSceneFileRequest()
NuGSceneFileRequest::~NuGSceneFileRequest()
NuGSceneFileRequest::Read(bool volatile*)
NuTextureFileRequest::NuTextureFileRequest(char const*, NuFileNotifier*)
NuTextureFileRequest::NuTextureFileRequest(char const*, char const*, NuFileNotifier*)
NuTextureFileRequest::~NuTextureFileRequest()
NuTextureFileRequest::~NuTextureFileRequest()
NuTextureFileRequest::Read(bool volatile*)
NuTextureFileRequest::ReadFromMem(void*, unsigned int, bool volatile*)
NuAnimFileRequest::GetMemSize() const
NuGSceneFileRequest::GetMemSize() const
NuInitHardwarePS(unsigned int)
NuTerminateHardwarePS()
NuShutdownHardwarePS()
NuCommandLinePS(int*, char***)
NuFileGlobals::NuFileGlobals()
NuFileGlobals::ScopedAllowFileOpenOnMainThread::ScopedAllowFileOpenOnMainThread()
NuFileGlobals::ScopedAllowFileOpenOnMainThread::~ScopedAllowFileOpenOnMainThread()
NuFileSwapEndianOnWrite(int)
NuFileSwapEndianOnRead(int)
NuFileGetEndianSwapOnRead()
NuFileGetEndianSwapOnWrite()
NuFileInit(NuFileDeviceType)
NuFileShutdown()
NuFileGetCurrentPath(char*)
NuFileGetCurrentDirectory(char*)
NuFileGetCurrentDirectory()
NuFileSetCurrentDirectory(char const*)
NuFileGetCurrentDeviceType()
NuFileFormatName(char*, char*, int)
NuFileOpenSize(NuFile* const&)
NuFileTouch(char const*)
NuFileReadCache::CacheFile(char const*)
NuFileOpen(char const*, nufilemode_e)
NuFileRead(NuFile* const&, void*, int, int)
NuFileClose(NuFile* const&)
NuFileReadCache::FindFile(char const*)
NuMemFileOpen(void*, int, nufilemode_e)
NuFileReadCache::ClearCache()
NuFileReadCache::~NuFileReadCache()
NuFileCacheFile(char const*)
NuFileOpenTrackedFileList()
_Z10NuFileOpenPKc12nufilemode_e_0
NuFileOpenStreaming(char const*, nufilemode_e)
NuMemFileAddr(NuFile* const&)
NuHashFileOpen(nufilemode_e)
NuHashFileHash(NuFile* const&)
NuFileGetPositionInDat(char const*)
NuFileGetPositionOnDisc(char const*)
NuFileGetPositionOnDiscOrDat(char const*)
NuFilePos(NuFile* const&)
NuFileEOF(NuFile* const&)
NuFileSeek(NuFile* const&, long, int)
NuFileGetSortKey(NuFile* const&, NuFileSortKey&)
NuFileExistQuiet(char const*)
NuFileExists(NuString const&)
NuFileExistPatch(char const*)
NuFileSize(char const*)
NuFileRename(char const*, char const*)
NuFileGetInfo(char const*, nufile_info_s*)
NuFileDelete(char const*)
NuFileDirExists(char const*)
NuFileOpenDir(char const*)
NuFileCloseDir(int)
NuFileReadDir(int, nufile_info_s*)
NuFileCreateDir(char const*)
NuFileCreatePath(char const*)
NuFileRemoveDir(char*)
NuFileRemoveDirRecursive(char const*, bool)
NuFileLoadBuffer(char const*, void*, int)
NuFileLoadBufferVP(char const*, nuvariptr_u*, nuvariptr_u*)
NuFileCopyEx(char const*, char const*, void*, int)
NuFileWrite(NuFile* const&, void const*, unsigned long)
NuFileCopy(char const*, char const*)
NuFileReadFloat(NuFile* const&)
NuFileReadInt(NuFile* const&)
NuFileReadUnsignedInt(NuFile* const&)
NuFileReadUnsignedShort(NuFile* const&)
NuFileReadShort(NuFile* const&)
NuFileReadUnsignedChar(NuFile* const&)
NuFileReadChar(NuFile* const&)
NuFileReadLine(NuFile* const&, char*, int)
NuFileReadWChar(NuFile* const&)
NuFilePeekChar(NuFile* const&)
NuFileWriteFloat(NuFile* const&, float)
NuFileWriteInt(NuFile* const&, int)
NuFileWriteUnsignedInt(NuFile* const&, unsigned int)
NuFileWriteShort(NuFile* const&, short)
NuFileWriteUnsignedShort(NuFile* const&, unsigned short)
NuFileWriteChar(NuFile* const&, char)
NuFileWriteUnsignedChar(NuFile* const&, unsigned char)
NuFileWriteString(NuFile* const&, char const*)
NuFileWriteStringV(NuFile* const&, char const*, ...)
NuFileInitAddress(int)
NuFileWriteAddress(NuFile* const&, void*)
NuFileSetAddress(NuFile* const&, void*)
NuFilePatchAddress(NuFile* const&)
NuFileAlign(NuFile* const&, int)
NuFileAlignRead(NuFile* const&, int)
NuFileIsNewer(nufile_info_s const*, nufile_info_s const*)
NuFileTimeIsNewer(NuSystemTime, NuSystemTime)
NuFileCompareCreateTime(void const*, void const*)
NuFileTimeToTimeStamp(NuSystemTime)
NuFileTimeStampIsNewer(unsigned int, unsigned int)
NuHashMap<NuHash, NuFileReadCache::Entry>::~NuHashMap()
NuFile::~NuFile()
NuFile::Init()
NuFile::Closedown()
NuFile::NuFile(char const*, nufilemode_e, NuFile::TYPE)
NuFile::SetFilename(char const*)
NuFile::~NuFile()
NuFile::GetPos()
NuFile::GetSize()
NuFile::GetOpenFileNames(NuFile::TYPE, char*, int, char**, int)
NuFile::GetSortKey(NuFileSortKey&)
NuFileDeviceDat::NuFileDeviceDat()
NuFileDeviceDat::~NuFileDeviceDat()
NuFileDeviceDat::Unmount()
NuFileDeviceDat::~NuFileDeviceDat()
NuFileDeviceDat::CalcPos(NUDATHDR const*, unsigned int, unsigned char) const
NuFileDeviceDat::NameToHash(NUDATHDR*, char const*) const
NuFileDeviceDat::FindHash(NUDATHDR const*, char const*) const
NuFileDeviceDat::FindTree(NUDATHDR const*, char const*) const
NuFileDeviceDat::GetFileInfo(NUDATHDR*, char*, long*, int*) const
NuFileDeviceDat::GetFreeInfo()
NuFileDeviceDat::GetFreeHandleIX(NUDATHDR*, int)
NuFileDeviceDat::OpenDatFileBase(NUDATHDR const*, NUDATOPENFILEINFO*, char const*)
NuFileDeviceDat::FileGetPosition(NuString const&, long&) const
NuFileDeviceDat::FindFile(NuString const&, NUDATFINFO&, NUDATHDR**) const
NuFileDeviceDat::CloseIndividual(NUDATHDR*)
NuFileDeviceDat::EndianSwap(void*, int, int)
NuFileDeviceDat::Mount()
NuFileDeviceDat::OpenBackground(void*)
NuFileDeviceDat::SyncBackground(void*)
NuFileDeviceDat::OpenDLCAsync()
NuFileDeviceDat::OpenDLCBackground(void*)
NuFileDeviceDat::CloseDLCAsync()
NuFileDeviceDat::CloseDLCBackground(void*)
NuFileDeviceDat::OpenIndividual(char const*, int)
NuFileDeviceDat::AddDLCDatHdr(NUDATHDR*)
NuFileDeviceDat::BuildUberFileTable()
NuFileDeviceDat::AddGameDatHdr(NUDATHDR*)
NuFileDeviceDat::OpenIndividualZeusLegacy(char const*, int)
NuFileDeviceDat::FileGetInfo(char const*, nufile_info_s*)
NuFileDeviceDat::FileSize(char const*) const
NuFileDeviceDat::CreateNuFile(char const*, nufilemode_e) const
NuFileDat::Open(NUDATHDR*, NUDATFILEINFO*, NUDATFINFO const&, long, char const*)
NuFileDeviceDat::IsMounted() const
NuFileDeviceDat::IsReady() const
NuFileDat::NuFileDat(char const*, NUDATFILEINFO*)
NuFileDat::~NuFileDat()
NuFileDat::~NuFileDat()
NuFileDat::GetCapabilities() const
NuFileDat::Close()
NuFileDat::Read(void*, unsigned long, int)
NuFileDat::Write(void const*, unsigned long)
NuFileDat::Seek(long, int)
NuFileDat::IsCompressed() const
NuFileDat::GetPos()
NuFileDat::GetSize()
NuFileDeviceDat::GetBlockedByInstallDebugInfo(char*, int, char**, int) const
NuFileDevice::FileRename(char const*, char const*)
NuFileDevice::FileDelete(char const*)
NuFileDevice::FileTouch(char const*)
NuFileDevice::DirOpen(char const*)
NuFileDevice::DirClose(int)
NuFileDevice::DirExists(char const*)
NuFileDevice::DirRead(int, nufile_info_s*)
NuFileDevice::DirCreate(char const*)
NuFileDevice::DirCreatePath(char const*)
NuFileDevice::DirRemove(char const*)
NuFileDevice::DirRemoveRecursive(char const*, bool)
NuFileDevice::GetPositionOnDisc(char const*, long&) const
NuFileDevice::IsDeviceReady()
NuList<NuDynamicStringT<false> >::DeleteNode(NuListNode<NuDynamicStringT<false> >*)
NuVector<NuFileTable*>::Reserve(unsigned int, bool)
NuVector<NuFileTree*>::Reserve(unsigned int, bool)
NuVector<bool>::Reserve(unsigned int, bool)
void NuQuickSortImp<DatPositionInformation>::QuickSortIterative<NuQuickSortDefaultPred<DatPositionInformation>, NuQuickSortDefaultSwap<DatPositionInformation> >(DatPositionInformation*, int, NuQuickSortDefaultPred<DatPositionInformation>, NuQuickSortDefaultSwap<DatPositionInformation>)
NuFileDevice::NuFileDevice()
NuFileDevice::~NuFileDevice()
NuFileDevice::~NuFileDevice()
NuFileDevice::FileOpen(char const*, nufilemode_e) const
NuFileDevice::FileSize(char const*) const
NuFileDevice::FileLoadBuffer(char const*, void*, int) const
NuFileDevice::AllocDirectoryHandle(char const*)
NuFileDevice::FreeDirectoryHandle(int)
NuFileDevice::SetDefaultDevice(NuFileDeviceType)
NuFileDevice::GetDeviceFromPath(char const*)
NuFileDevice::GetDeviceByType(NuFileDeviceType)
NuFileDevice::GetDeviceFromDirectoryHandle(int)
NuFileDevice::GetFirstWritableDevice()
NuFileDevice::AddDevice(NuFileDevice*)
NuFileDevice::ClearPathRules()
NuFileDevice::AddPathRule(NuFileDeviceType, char const*)
NuFileDevice::SetCurrentDir(char const*)
NuFileDevice::FormatName(char*, int, char const*) const
NuFileDevice::SetMountName(char*)
NuFileDevice::SetLabel(char*)
NuFileDevice::Interrogate()
NuFileDevice::QueryInstallProgress()
NuFileDevice::FileGetInfo(char const*, nufile_info_s*)
NuFileUpCase(NuFileDevice const*, char*)
NuFileReldirFix(NuFileDevice const*, char*)
NuFileAppendPath(char*, char const*, char*)
NuFileExtractPath(char*, char const*)
NuFileExtractFilename(char*, char const*)
NuFileExtractFile(char*, char const*)
NuFileExtractExt(char*, char const*)
NuGetCurrPlatform()
NuGetCurrPlatformClass()
NuFileExtPlatformBit(int)
NuFileExtInitEx(PLATFORMS_SUPPORTED, NUPLATFORMCLASS)
NuFileExtInit()
NuFileExtGetInfo(char const*, NuFileExtInfo&)
NuFileExtGetType(char*, int)
NuFileExtConvert(char*, char const*, int, int, NUPLATFORMCLASS)
NuFileExtGetExt(char*, int, int, int, NUPLATFORMCLASS)
NuFileExtRemove(char*, char const*, int)
NuFileSplitDrive(char const*, char*, char*)
NuFileSplit(char const*, char, nuvariptr_u*, nuvariptr_u)
NuFileNormalise(char*, int, char const*)
NuFileMem::NuFileMem(char const*, nufilemode_e)
NuFileMem::~NuFileMem()
NuFileMem::~NuFileMem()
NuFileMem::Open(void*, int, nufilemode_e)
NuFileMem::Close()
NuFileMem::GetAddr()
NuFileMem::Read(void*, unsigned long, int)
NuFileMem::Write(void const*, unsigned long)
NuFileMem::Seek(long, int)
NuFileMem::GetPos()
NuFileMem::GetSize()
NuFileMem::BoundsCheck()
NuFileHash::NuFileHash(char const*, nufilemode_e)
NuFileHash::~NuFileHash()
NuFileHash::~NuFileHash()
NuFileHash::Open(nufilemode_e)
NuFileHash::Close()
NuFileHash::GetHash()
NuFileHash::Read(void*, unsigned long, int)
NuFileHash::Write(void const*, unsigned long)
NuFileHash::Seek(long, int)
NuFileHash::GetPos()
NuFileHash::GetSize()
NuPakFileGetHeaderSize(unsigned int)
NuPakFileCalcFileChecksum(NUPAKFILEHDR*, unsigned int)
NuPakFileCalcEncChecksum(NUPAKFILEHDR*, unsigned int)
NuPakFileIsFileChecksumValid(NUPAKFILEHDR*, unsigned int)
NuPakFileIsEncChecksumValid(NUPAKFILEHDR*, unsigned int)
NuPakFileEncryptData(NUPAKFILEHDR*, unsigned int, unsigned char*, unsigned int)
NuPakFileDecryptData(NUPAKFILEHDR*, unsigned int, unsigned char*, unsigned int)
NUPAKFILEHNDL::NUPAKFILEHNDL(NUPAKFILE*)
NUPAKFILEHNDL::Set(NUPAKFILE*)
NUPAKFILEHNDL::NUPAKFILEHNDL(NUPAKFILEHNDL const&)
NUPAKFILEHNDL::operator=(NUPAKFILEHNDL const&)
NUPAKFILEHNDL::~NUPAKFILEHNDL()
NUPAKFILEHNDL::Clear()
NUPAKFILE::Reference()
NUPAKFILE::Release()
NUPAKFILEHNDL::IsValid() const
NUPAKFILEHNDL::GetFileName() const
NUPAKFILEHNDL::GetNumItems() const
NUPAKFILEHNDL::GetFileSize() const
NUPAKFILEHNDL::FindItem(char const*) const
NUPAKFILEHNDL::FindItem(unsigned int const&) const
NUPAKFILEHNDL::GetItemName(unsigned int) const
NUPAKFILEHNDL::GetItemSize(unsigned int) const
NUPAKFILEHNDL::GetItemData(unsigned int, void const*&, unsigned int&) const
NUPAKFILEHNDL::CopyItemData(unsigned int, void*, unsigned int, unsigned int&) const
NUPAKFILEHNDL::GetItemDataPos(unsigned int)
NUPAKFILEHNDL::Read(void*, unsigned long)
NUPAKFILEHNDL::Seek(long, int)
NUPAKFILEHNDL::GetPos()
NUPAKFILE::LoadStaticPakFile(char const*, nuvariptr_u&, nuvariptr_u, unsigned int, unsigned char*, unsigned int)
NUPAKFILE::LoadStreamingPakFile(char const*, unsigned char*, unsigned int)
NUPAKFILE::NUPAKFILE(char const*)
NUPAKFILE::~NUPAKFILE()
NUPAKFILE::~NUPAKFILE()
NUPAKFILE::FileNameMatches(char const*, char const*)
NUSTATICPAKFILE::NUSTATICPAKFILE(char const*, NUPAKFILEHDR*, NUPAKFILEITEM*, char const**, void const**)
NUSTATICPAKFILE::~NUSTATICPAKFILE()
NUSTATICPAKFILE::~NUSTATICPAKFILE()
NUSTATICPAKFILE::GetNumItems() const
NUSTATICPAKFILE::GetFileSize() const
NUSTATICPAKFILE::FindItem(char const*) const
NUSTATICPAKFILE::FindItem(unsigned int const&) const
NUSTATICPAKFILE::GetItemName(unsigned int) const
NUSTATICPAKFILE::GetItem(unsigned int) const
NUSTATICPAKFILE::GetItemSize(unsigned int) const
NUSTATICPAKFILE::GetItemData(unsigned int, void const*&, unsigned int&) const
NUSTATICPAKFILE::CopyItemData(unsigned int, void*, unsigned int, unsigned int&) const
NUSTATICPAKFILE::GetItemDataPos(unsigned int)
NUSTATICPAKFILE::Read(void*, unsigned long)
NUSTATICPAKFILE::Seek(long, int)
NUSTATICPAKFILE::GetPos()
NUSTATICPAKFILE::GetItem(unsigned int)
NUSTREAMINGPAKFILE::NUSTREAMINGPAKFILE(char const*, NuFile* const&, NUPAKFILEHDR*, NUPAKFILEITEM*, char const**, char*)
NUSTREAMINGPAKFILE::~NUSTREAMINGPAKFILE()
NUSTREAMINGPAKFILE::~NUSTREAMINGPAKFILE()
NUSTREAMINGPAKFILE::GetNumItems() const
NUSTREAMINGPAKFILE::GetFileSize() const
NUSTREAMINGPAKFILE::FindItem(char const*) const
NUSTREAMINGPAKFILE::FindItem(unsigned int const&) const
NUSTREAMINGPAKFILE::GetItemName(unsigned int) const
NUSTREAMINGPAKFILE::GetItem(unsigned int) const
NUSTREAMINGPAKFILE::GetItemSize(unsigned int) const
NUSTREAMINGPAKFILE::GetItemData(unsigned int, void const*&, unsigned int&) const
NUSTREAMINGPAKFILE::CopyItemData(unsigned int, void*, unsigned int, unsigned int&) const
NUSTREAMINGPAKFILE::GetItemDataPos(unsigned int)
NUSTREAMINGPAKFILE::GetItem(unsigned int)
NUSTREAMINGPAKFILE::Read(void*, unsigned long)
NUSTREAMINGPAKFILE::Seek(long, int)
NUSTREAMINGPAKFILE::GetPos()
NuSubPakFile::Open(NUPAKFILEHNDL&, char const*)
NuSubPakFile::NuSubPakFile(char const*, NUPAKFILEHNDL&, unsigned int, unsigned int, unsigned int)
NuSubPakFile::~NuSubPakFile()
NuSubPakFile::~NuSubPakFile()
NuSubPakFile::Close()
NuSubPakFile::Read(void*, unsigned long, int)
NuSubPakFile::Write(void const*, unsigned long)
NuSubPakFile::Seek(long, int)
NuSubPakFile::GetPos()
NuSubPakFile::GetSize()
NuFileStreamBase::~NuFileStreamBase()
NuFileStream::GetBufferSize() const
NuFileStreamBase::SharedData::SharedData(unsigned long, unsigned long)
NuFileStreamBase::ClassInit()
NuFileStreamBase::Open(char const*, bool)
NuFileStreamBase::Open(NuFile*, bool)
NuFileStreamBase::WaitingThreadFn(void*)
NuFileStreamBase::Close()
NuFileStreamBase::Seek(long, int)
NuFileStreamBase::Read(void*, unsigned long, int)
NuFileStreamBase::ThreadFn(void*)
NuFileStreamBase::Write(void const*, unsigned long)
NuFileStreamBase::GetPos()
NuFileStreamBase::GetSize()
NuFileStreamBase::~NuFileStreamBase()
NuFileStream::~NuFileStream()
NuFileStream::GetNumBuffers() const
NuFileAddTestArtifact(char const*)
NuFileTMArtifact::EventData::~EventData()
NuFileTMCheckSendMessages()
NuFileTM::CheckSendMessages()
NuFileDeviceTM::NuFileDeviceTM()
NuFileDeviceTM::~NuFileDeviceTM()
NuFileDeviceTM::~NuFileDeviceTM()
NuFileDeviceTM::ConnectToServer(bool)
NuFileDeviceTM::CreateNuFile(char const*, nufilemode_e) const
NuFileTM::Open(char const*, nufilemode_e)
NuFileDeviceTM::FileOpen(char const*, nufilemode_e) const
NuFileDeviceTM::DirOpen(char const*)
NuFileDeviceTM::DirClose(int)
NuFileDeviceTM::DirRead(int, nufile_info_s*)
NuFileDeviceTM::DirExists(char const*)
NuFileDeviceTM::DirCreate(char const*)
NuFileDeviceTM::DirCreatePath(char const*)
NuFileTM::NuFileTM(char const*, nufilemode_e)
NuFileTM::~NuFileTM()
NuFileTM::~NuFileTM()
NuFileTM::FlushCloseRequests(TMMessage&)
NuFileTM::Close()
NuFileTM::ReadBlock(void*, unsigned long, int)
NuFileTM::Read(void*, unsigned long, int)
NuFileTM::Write(void const*, unsigned long)
NuFileTM::Seek(long, int)
NuFileTM::GetPos()
NuFileTM::GetSize()
NuTMClientSock::NuTMClientSock()
NuTMClientSock::~NuTMClientSock()
NuTMClientSock::~NuTMClientSock()
NuTMClientSock::DisplayCommError()
NuTMClientSock::TMNuDebugMsg(char const*)
NuTMClientSock::TMNuError(char const*, int, int)
NuTMClientSock::TMNuCrash(int, char**)
NuTMClientSock::TMNuCrashDump(char const*)
NuTMClientSock::EarlyDebugRender(char const*, float, float, float, unsigned int)
NuTMClientSock::Connect(char const*, int, int, NuFileDeviceTM*, NuTMClientSock::RequestCallbacks*, bool, int)
NuTMClientSock::ListenerThread(void*)
NuTMClientSock::NetworkTest(NuTCPSocket*)
NuTMClientSock::Reconnect()
NuTMClientSock::Disconnect()
NuTMClientSock::Recv(NuTCPSocket*, int&)
NuTMClientSock::Send(NuTCPSocket*, int)
NuTMClientSock::SendTestData(NuTCPSocket*, char*, int)
NuTMClientSock::RecvTestData(NuTCPSocket*, char*, int)
NuTMClientSock::SendMessage(TMMessage*)
NuTMClientSock::ReceiveMessage(TMMessage*)
NuTMClientSock::SendRecieveMessage(TMMessage*)
NuTMClientSock::Send(NuTCPSocket*, char*, int)
NuTMClientSock::Recv(NuTCPSocket*, char*, int)
NuTMClientSock::SendTTYMessage(char, char const*)
NuTMClientSock::SendError(char, char const*)
NuTMClientSock::EnableTTYHandler(bool)
NuTMClientSock::EnableCompression(bool)
NuFileDeviceTM::FileGetInfo(char const*, nufile_info_s*)
NuTMClientSock::IsConnected()
TargetManagerCallbacks::OnRequest(TMMessage&, NuTCPSocket*)
NuFileTMArtifact::EventData::~EventData()
TMMessage::TMMessage(char*, int)
TMMessage::ReadToken(char const*, int)
TMMessage::WriteToken(char const*)
TMMessage::Read(void*, int)
TMMessage::Write(void const*, int)
TMMessage::Read(char*)
TMMessage::Write(char const*)
TMMessage::Swap16(void*)
TMMessage::Swap32(void*)
TMMessage::Swap64(void*)
NuGetChar(nufpar_s*)
NuUnGetChar(nufpar_s*)
NuGetWChar(nufpar_s*)
NuFParGetLineW(nufpar_s*)
NuFParGetLine(nufpar_s*)
NuFParUnGetWord(nufpar_s*)
NuFParGetWordW(nufpar_s*)
NuFParGetWord(nufpar_s*, SGetWordAdditionalProcessing*)
NuFParGetInt(nufpar_s*)
NuFParGetFloat(nufpar_s*)
NuFParGetOptionalFloat(nufpar_s*, float*)
NuFParGetOptionalFloat2(nufpar_s*, float*)
NuFParGetOptionalInt(nufpar_s*, int*)
NuFParGetIntRDP(nufpar_s*)
NuFParGetFloatRDP(nufpar_s*)
NuFParGetPos(nufpar_s*, nufparpos_s*)
NuFParSetPos(nufpar_s*, nufparpos_s*)
NuFParPushCom(nufpar_s*, nufpcomjmp_s*)
NuFParPushComN(nufpar_s*, nufpcomjmp_s**, int)
NuFParPushComCTX(nufpar_s*, nufpcomjmpctx_s*)
NuFParPushComCTXN(nufpar_s*, nufpcomjmpctx_s**, int)
NuFParPushCom2(nufpar_s*, nufpcomjmp_s*, nufpcomjmp_s*)
NuFParPushComCTX2(nufpar_s*, nufpcomjmpctx_s*, nufpcomjmpctx_s*)
NuFParPopCom(nufpar_s*)
NuFParInterpretWord(nufpar_s*)
NuFParInterpretWordCTX(nufpar_s*, void*)
NuFParSetInterpreterErrorHandler(void (*)(nufpar_s*))
NuFParSuspend(nufpar_s*)
NuFParResume(nufpar_s*)
NuFParInit(int, int)
NuFParClose(nufpar_s*)
NuFParOpen(NuFile* const&)
NuFParDestroy(nufpar_s*)
NuFParCreate(char const*)
NuFParCreateFromPaths(char const*, char const**)
NuFParCreateGivenFH(char*, NuFile*)
NuFParCreateMem(char const*, void const*, int)
NuFileDeviceNNXDVD::NuFileDeviceNNXDVD()
NuFileDeviceNNXDVD::Initialize()
NuFileDeviceNNXDVD::CheckStatus()
NuFileDeviceNNXHOST::NuFileDeviceNNXHOST()
NuFileDeviceNNXHOST::Initialize()
NuPSFileInitDevices()
NuPSFileCheckDevices()
NuFileNNX::Open(char const*, nufilemode_e, char const*, bool, bool)
NuFileNNX::~NuFileNNX()
NuFileNNX::~NuFileNNX()
NuFileNNX::Close()
NuFileNNX::Read(void*, unsigned long, int)
NuFileNNX::Write(void const*, unsigned long)
NuFileNNX::Seek(long, int)
NuFileNNX::GetPos()
NuFileNNX::GetSize()
NuFileDeviceNNXDVD::FormatName(char*, int, char const*) const
NuFileDeviceNNXDVD::FileGetInfo(char const*, nufile_info_s*)
NuFileDeviceNNXDVD::FileDelete(char const*)
NuFileDeviceNNXDVD::FileRename(char const*, char const*)
NuFileDeviceNNXDVD::DirOpen(char const*)
NuFileDeviceNNXDVD::DirClose(int)
NuFileDeviceNNXHOST::FormatName(char*, int, char const*) const
NuFileDeviceNNXHOST::FileGetInfo(char const*, nufile_info_s*)
NuFileDeviceNNXHOST::FileDelete(char const*)
NuFileDeviceNNXHOST::FileRename(char const*, char const*)
NuFileDeviceNNXHOST::DirOpen(char const*)
NuFileDeviceNNXHOST::DirClose(int)
NuFileDeviceNNXHOST::DirRead(int, nufile_info_s*)
NuFileDeviceNNXDVD::~NuFileDeviceNNXDVD()
NuFileDeviceNNXDVD::CreateNuFile(char const*, nufilemode_e) const
NuFileDeviceNNXHOST::~NuFileDeviceNNXHOST()
NuFileDeviceNNXHOST::CreateNuFile(char const*, nufilemode_e) const
NuDatFileDecodeInit()
DecodeManager::DecodeManager()
NuDatFileDecodeClosedown()
DecodeManager::~DecodeManager()
NuDatFileDecodeSync()
NuDatFileDecodeOpenFile(NuFile* const&, long, long, long, char const*)
DecodeManager::OpenFile(NuFile* const&, long, long, long, char const*)
NuDatFileDecodeCloseFile(DecodeFileContext*)
DecodeManager::CloseFile(DecodeFileContext*)
NuDatFileDecodeRead(DecodeFileContext*, char*, int)
DecodeManager::Read(DecodeFileContext*, char*, int)
NuDatFileDecodeGetPos(DecodeFileContext*)
NuDatFileDecodeGetDebugBufferFill(int&, int&)
NuBlockCompressReader::NuBlockCompressReader()
NuBlockCompressReader::~NuBlockCompressReader()
NuBlockCompressReader::~NuBlockCompressReader()
NuBlockCompressReader::Open(NuFile* const&, unsigned int)
NuBlockCompressReader::Close()
NuBlockCompressReader::GetCapabilities() const
NuBlockCompressReader::Write(void const*, unsigned long)
NuBlockCompressReader::Read(void*, unsigned long, int)
NuBlockCompressReader::GetPos()
NuBlockCompressReader::GetSize()
NuBlockCompressReader::Seek(long, int)
NuBlockCompressReader::Flush()
BufferPool<ReadBuffer, 16>::BufferPool()
BufferPool<DecodeBuffer, 18>::BufferPool()
DecodeManager::ReadThreadFn(void*)
DecodeManager::DecodeThreadFn(void*)
ReadBuffer::ReadBuffer()
DecodeBuffer::DecodeBuffer()
NuVector<DecodeFileContext>::Reserve(unsigned int, bool)
DecodeManager::ReadThread()
ReadBuffer::Fill(DecodeFileContext*, void*, int (*)(DecodeFileContext*, char*, int, void*), int (*)(DecodeFileContext*, void*), int (*)(DecodeFileContext*, void*), int (*)(DecodeFileContext*, void*))
DecodeManager::FileReadFn(DecodeFileContext*, char*, int, void*)
DecodeManager::FileRemainsFn(DecodeFileContext*, void*)
DecodeManager::FileSourcePosFn(DecodeFileContext*, void*)
DecodeManager::FileSourceSizeFn(DecodeFileContext*, void*)
BufferSequence<ReadBuffer>::Put(ReadBuffer*)
DecodeManager::DecodeThread()
BufferSequence<ReadBuffer>::Get(int, bool)
DecodeBuffer::Decode(ReadBuffer*, NUPACKMODE, bool)
BufferSequence<DecodeBuffer>::Put(DecodeBuffer*)
BufferPool<ReadBuffer, 16>::~BufferPool()
BufferSequence<DecodeBuffer>::Get(int, bool)
NuRC4File::NuRC4File(char const*)
NuRC4File::~NuRC4File()
NuRC4File::~NuRC4File()
NuRC4File::Open(NuFile* const&, unsigned char const*, unsigned long)
NuRC4File::RC4Init(NuRC4File::RC4Key&, unsigned char const*, unsigned long)
NuRC4File::GetCapabilities() const
NuRC4File::Close()
NuRC4File::Seek(long, int)
NuRC4File::Read(void*, unsigned long, int)
NuRC4File::RC4Crypt(NuRC4File::RC4Key&, unsigned char*, unsigned long)
NuRC4File::Write(void const*, unsigned long)
NuRC4File::GetPos()
NuRC4File::GetSize()
NuRC4File::Flush()
NuDatPreHeader::NuDatPreHeader()
NUDATHDR::NUDATHDR()
NUDATHDR::~NUDATHDR()
NUDATHDR::Serialise(NuString const&)
NUDATHDR::Serialise(NuString const&, NuFile* const&)
NUDATHDR::Serialize(NuSerialize&)
NUDATHDR::GetFileName(unsigned int, NuFixedStringT<(unsigned short)512>&)
NUDATHDR::CreateFileTreeNameIndices()
NuFileTable::Combine(NuVector<NuFileTable*> const&, NuVector<NuFileTree*> const&, NuVector<bool> const&, NuList<NuDynamicStringT<false> >*)
NuFileTable::BuildAcceleratorTable()
NuFileTable::ClearUnusedRuntimeData()
void NuQuickSortNew<HashIndex>::Sort<NuQuickSortNew<HashIndex>::DefaultLessThanCompare>(HashIndex*, unsigned long, NuQuickSortNew<HashIndex>::DefaultLessThanCompare)
void NuQuickSortNew<unsigned int>::Sort<NuQuickSortNew<unsigned int>::DefaultLessThanCompare>(unsigned int*, unsigned long, NuQuickSortNew<unsigned int>::DefaultLessThanCompare)
NuVector<NuPair<unsigned int, unsigned int> >::Reserve(unsigned int, bool)
NuAnimManager::EnableDebugMode()
NuAnimManager::Init()
NuAnimManager::AllocIdToOffset(int)
NuAnimManager::BankFreeSpace(int)
NuAnimManager::BankTableCleanup(int, char*)
NuAnimManager::BankLock(int)
NuAnimManager::BankUnlock(int)
NuAnimManager::BankAlloc(int, bool, bool)
NuAnimManager::BankRelocate(int, char*, unsigned long, char*, char*)
NuAnimManager::BankValidate(NuAnimManager::Bank*, char*)
NuAnimManager::BankFree(int)
NuAnimManager::BankAllocLock(int)
NuAnimManager::BankAllocUnlock(int)
NuAnimManager::AnimRelocate(void*, bool, int)
NuAnimManager::ReadFromFile(char const*, NUFILETYPE, bool)
NuAnimManager::ReadFromFile(NuFile*, NUFILETYPE, unsigned int, bool)
NuAnimManager::ReadFromMemory(void*, unsigned int, NUFILETYPE, bool)
NuAnimManager::Destroy(int)
NuAnimManager::LockANI2(int)
NuAnimManager::LockANI4(int)
NuAnimManager::LockCompressedAnim(int)
NuAnimManager::Unlock(int)
NuAnimManager::CompactOversizedBuffers()
NuAnimManager::GetTotalSize()
NuAnimManager::GetAllocatedSize()
NuAnimManager::GetFreeSize()
NuAni4SwapNUMTX(NUMTX*)
NuAni4Swap16(void*)
NuAni4Swap32(void*)
NuANI4Action::Serialize(NuSerialize&)
NuAlignedBuffer<16>::Serialize(NuSerialize&)
NuANI4Anim::Destroy()
NuAnimData2::DestroyNUANIMDATA2Header(nuanimdata2_s**)
NuANI4Anim::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuANI4Action>(NuVarArray<NuANI4Action>&, char const*)
void NuSerialize::SerializeLinkToObject<NuAnimData2>(NuAnimData2*&)
NuAnimData2::GetNUANIMDATA2Header()
void NuSerialize::_SerializeLegacyNuVarArray<NuANI4Anim>(NuVarArray<NuANI4Anim>&, char const*)
NuANI4ActionRaw::EndianSwap(bool, unsigned long, unsigned long)
NuANI4AnimRaw::EndianSwap(bool, unsigned long, unsigned long, bool, bool, bool)
NuANI4AnimRaw::EndianSwapEarlyLate(bool, unsigned long)
FixUpAn3(ani3_animheader_s**)
NuANI4AnimRaw::Relocate(NuANI4AnimRaw*, void*)
NuANI4AnimRaw::Read(char*, int*, void*, bool)
NuLayerAnim::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<short>(NuVarArray<short>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<unsigned char>(NuVarArray<unsigned char>&, char const*)
NuAnimGetAnimDataSizeANI3(ani3_animheader_s*, bool)
CountNumANI4Chars_OLD(NuANI4AnimRaw_OLD*, bool, int, void*)
AlignUp4()
AlignUp2()
Alloc(unsigned long)
Alloc4(unsigned long)
Alloc2(unsigned long)
RecurseTransLate(NuANI4AnimRaw_OLD*, NuANI4AnimRaw*, bool, void*, void*)
CalculateNewANI4Size(NuANI4AnimRaw_OLD*)
TranslateToNewANI4Format(NuANI4AnimRaw_OLD*, NuANI4AnimRaw**, int, char const*, char const*)
NuVarArray<NuAnimHeader*>::AdjustSize(unsigned int)
NuAnimData2::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuAnimCurve2>(NuVarArray<NuAnimCurve2>&, char const*)
NuAnimCurve2::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<unsigned int>(NuVarArray<unsigned int>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<unsigned short>(NuVarArray<unsigned short>&, char const*)
SetSerializerStage(bool)
NuCutScene::NuCutSceneFileNameToUniformString(char const*, char*)
NuCutSceneRawSwap16(void*)
NuCutSceneRawSwap32(void*)
NuCutSceneRawRigid::EndianSwap(bool, long, long)
NuCutSceneRawRigidSys::EndianSwap(bool, long, long)
NuCutSceneRawCharacter::EndianSwap(bool, long, long)
NuCutSceneRawCharacter::EndianSwapEarlyLate(bool)
NuCutSceneRaw::EndianSwap(bool, long, long)
NuCutSceneRaw::EndianSwapEarlyLate(bool)
NuCutSceneRawCameraSys::EndianSwap(bool, long, long)
NuCutSceneRawLocatorSys::EndianSwap(bool, long, long)
NuCutSceneRawCharExtra::EndianSwap(bool, long, long)
NuCutSceneEndianSwapTextureAnims(TEXANIMHDR_s*, bool, unsigned long, unsigned long)
NuCutSceneRaw::FixupPointers(int, int)
NuCutSceneRaw::CountFixupPointers()
NuCutSceneRawLocatorType::EndianSwap(bool, long, long)
NuCutSceneRawLocator::EndianSwap(bool, long, long)
NuCutSceneRawLocator::EndianSwapEarlyLate(bool)
NuCutSceneRawKrawlyInfo::EndianSwap(bool, long, long)
NuCutSceneRawCharExtra::EndianSwapEarlyLate(bool)
NuCutSceneRawCameraSys::EndianSwapEarlyLate(bool)
NuCutSceneRawSplitCameraControllers::EndianSwap(bool, long, long)
NuCutSceneRawCameraController::EndianSwap(bool, long, long)
NuCutSceneRawCamera::EndianSwap(bool, long, long)
NuCutSceneRawCamera::EndianSwapEarlyLate(bool)
NuCutSceneEndianSwapTexAnimHdr(TEXANIMHDR_s*)
NuCutSceneEndianSwapTexAnimBlock(TEXANIMBLOCK3_s*)
NuCutSceneRaw::NuCutSceneRawReadPtrCount(char*)
NuCutSceneRaw::NuCutSceneRawRead(char*, void*, int)
NuKrawlyAnimData::NuKrawlyAnimData()
NuKrawlyAnimData::~NuKrawlyAnimData()
NuKrawlyAnimData::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<NuKrawlyAnimData::LODData>(NuVector<NuKrawlyAnimData::LODData>&, char const*)
NuKrawlyAnimData::BuildLODMap()
NuKrawlyAnimData::LODExists(unsigned int) const
NuKrawlyAnimData::GetLODData(unsigned int) const
NuKrawlyAnimData::GetVertexBuffer(unsigned int, unsigned int, unsigned int&) const
NuKrawlyAnimData::LODData::GetVertexOffset(unsigned int) const
NuKrawlyAnimData::LODData::GetVertexBuffer(unsigned int) const
NuKrawlyAnimData::EvalBlendData(NURNDRBLENDDATA&, unsigned int, float) const
NuKrawlyAnimData::LODData::EvalBlendData(NURNDRBLENDDATA&, float) const
NuKrawlyAnimData::EvalBlendData(NURNDRBLENDDATA&, unsigned int, int, int, float) const
NuKrawlyAnimData::LODData::EvalBlendData(NURNDRBLENDDATA&, int, int, float) const
CheckVb(NuVertexBuffer*, unsigned int)
NuKrawlyAnimData::EvalBlendData(NURNDRBLENDDATA&, unsigned int, NuKrawlyAnimData const*, float, NuKrawlyAnimData const*, float, float)
NuKrawlyAnimData::EvalBlendData(NURNDRBLENDDATA&, unsigned int, NuKrawlyAnimData const*, int, int, float, NuKrawlyAnimData const*, int, int, float, float)
NuKrawlyAnimData::GetPOIMtx(unsigned int, unsigned int, unsigned int) const
NuKrawlyAnimData::LODData::GetPOIMtx(unsigned int, unsigned int) const
NuKrawlyAnimData::EvalPOIMtx(NuMatrixBase&, unsigned int, float, unsigned int) const
NuKrawlyAnimData::LODData::EvalPOIMtx(NuMatrixBase&, float, unsigned int) const
NuKrawlyAnimData::EvalPOIMtx(NuMatrixBase&, unsigned int, int, int, float, unsigned int) const
NuKrawlyAnimData::LODData::EvalPOIMtx(NuMatrixBase&, int, int, float, unsigned int) const
NuKrawlyAnimData::EvalPOIMtx(NuMatrixBase&, unsigned int, NuKrawlyAnimData const*, float, NuKrawlyAnimData const*, float, float, unsigned int)
NuKrawlyAnimData::EvalPOIMtx(NuMatrixBase&, unsigned int, NuKrawlyAnimData const*, int, int, float, NuKrawlyAnimData const*, int, int, float, float, unsigned int)
NuKrawlyAnimData::FindClosestFrames(unsigned int, float, int&, int&, float&) const
NuKrawlyAnimData::LODData::FindClosestFrames(float, int&, int&, float&) const
NuKrawlyAnimData::LODData::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<NuKrawlyAnimData::FrameData>(NuVector<NuKrawlyAnimData::FrameData>&, char const*)
NuKrawlyAnimData::LODData::GetRootMtx(unsigned int) const
NuKrawlyAnimData::LODData::EvalRootMtx(NuMatrixBase&, float) const
NuKrawlyAnimData::LODData::EvalRootMtx(NuMatrixBase&, int, int, float) const
NuKrawlyAnimData::FrameData::FrameData()
NuKrawlyAnimData::FrameData::~FrameData()
NuKrawlyAnimData::FrameData::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<NuMatrixBase>(NuVector<NuMatrixBase>&, char const*)
void NuSerialize::SerializeLinkToObject<NuVertexBuffer>(NuVertexBuffer*&)
NuVector<NuKrawlyAnimData::LODData>::ReSize(unsigned int, bool)
NuVector<NuKrawlyAnimData::LODData>::Reserve(unsigned int, bool)
NuVector<NuKrawlyAnimData::FrameData>::Reserve(unsigned int, bool)
NuVector<NuKrawlyAnimData::FrameData>::ReSize(unsigned int, bool)
NuVector<NuMatrixBase>::NuVector(NuVector<NuMatrixBase> const&)
NuVector<NuMatrixBase>::Reserve(unsigned int, bool)
NuVector<NuMatrixBase>::operator=(NuVector<NuMatrixBase> const&)
NuPtrBlockRead(NuFile* const&)
NuPtrBlockFixToIndex(void*, bool, void*)
NuPtrBlockFix(void*, bool)
NuPtrBlockRelocate(void*, int)
NuHTTP::Object::Object()
NuHTTP::Request::~Request()
NuHTTP::Object::GetToken(char*, char*, char)
NuHTTP::Object::SendLine(NuBufferedTCPSocket*, char const*, ...)
NuHTTP::Object::ReceiveLine(NuBufferedTCPSocket*, char*)
NuHTTP::Object::ReceiveHeader(NuBufferedTCPSocket*)
NuHTTP::Object::SetContentLength(int)
NuHTTP::Object::ReceiveHeaders(NuBufferedTCPSocket*)
NuHTTP::Object::GetContentLength()
NuHTTP::Request::Request()
NuHTTP::Request::ReceiveRequestLine(NuBufferedTCPSocket*)
NuHTTP::Request::SetType(NuHTTP::RequestType)
NuHTTP::Request::GetType()
NuHTTP::Request::SetPort(int)
NuHTTP::Request::GetPort()
NuHTTP::Request::SetAddress(char const*)
NuHTTP::Request::GetAddress()
NuHTTP::Request::SetPath(char const*)
NuHTTP::Request::GetPath()
NuHTTP::Response::Response()
NuHTTP::Response::ReceiveStatusLine(NuBufferedTCPSocket*)
NuHTTP::Response::GetStatusCode()
NuHTTP::Response::SetStatusCode(NuHTTP::StatusCode)
NuHTTP::Transaction::Transaction()
NuHTTP::Transaction::Transaction(NuBufferedTCPSocket*)
NuHTTP::Transaction::~Transaction()
NuNetID::NuNetID()
NuNetID::Generate(NuNetID&)
NuNetID::ConvertToString(char*)
NuSocket::ClassInit()
NuSocket::ClassShutdown()
NuSocket::GetLocalIPAddress(char*)
NuSocket::GetLocalNetworkAddress(unsigned char*)
NuSocket::NuSocket(NuSocket::Mode)
NuSocket::CreateSocket()
NuSocket::NuSocket(NuSocket::Mode, int, unsigned int)
NuSocket::~NuSocket()
NuSocket::Close()
NuSocket::SetBlocking(bool)
NuSocket::SetNoDelay(bool)
NuSocket::SetReUseAddress()
NuSocket::Bind(int)
NuSocket::Listen(int)
NuSocket::Accept(unsigned int&)
NuSocket::Connect(char const*, int)
NuSocket::Send(void const*, int)
NuSocket::SendTo(char*, int, void*, int)
NuSocket::Broadcast(int, void*, int)
NuSocket::Receive(void*, int)
NuSocket::ReceiveFrom(void*, int, char*, int*)
NuBufferedTCPSocket::NuBufferedTCPSocket()
NuBufferedTCPSocket::NuBufferedTCPSocket(NuSocket::Mode, int, unsigned int)
NuBufferedTCPSocket::~NuBufferedTCPSocket()
NuBufferedTCPSocket::Flush()
NuBufferedTCPSocket::Receive(void*, int)
NuBufferedTCPSocket::Send(void const*, int)
NuHTTPClient::Send(NuHTTP::Transaction&, char const*, ...)
NuHTTPClient::ReceiveContent(NuHTTP::Transaction&, void*, int)
NuRenderObject::NuRenderObject()
NuRenderObject::NuRenderObject(nuhspecial_s const&)
NuRenderObject::RestoreLightingState()
NuRenderObject::Extend()
NuRenderObject::~NuRenderObject()
NuRenderObject::ClearLightingState(bool)
NuRenderObject::~NuRenderObject()
NuRenderObject::GetSpecial() const
NuRenderObject::SetFarClip(float)
NuRenderObject::GetFarClip() const
NuRenderObject::SetAlpha(float)
NuRenderObject::GetAlpha() const
NuRenderObject::SetInstanceCastShadow(bool)
NuRenderObject::GetInstanceCastShadow() const
NuRenderObject::SetDepthSqrOverride(float)
NuRenderObject::GetAlbedoTint() const
NuRenderObject::SetAlbedoTint(NUCOLOUR3 const&)
NuRenderObject::GetBounds(NuVector3Base&, NuVector3Base&) const
NuRenderObject::Render(unsigned int, unsigned int, float)
NuRenderObject::UpdateLastRenderFrame()
NuRenderObject::DebugRender(unsigned int)
NuRenderObject::AddTextureOverride(NuShaderDesc::TextureSlot::T, int, NuSmartPtr<NuTexture, true> const*)
NuRenderObject::RemoveTextureOverrides(NuShaderDesc::TextureSlot::T)
NuRenderObject::SetUVOverrides(int, NuUVOverrides const*)
NuRenderObject::ClearUVOverrides()
NuRenderObject::SetMaterialOverrides(int, NuSmartPtr<NuMtl, true>*)
NuRenderObject::ClearMaterialOverrides()
NuRenderObject::SetLightingGlow(NuColour const&)
NuRenderObject::SetEdgeHighlightEnabled(bool, float)
NuRenderObject::SetAnimTime(float)
NuRenderObject::GetPerPixelFade()
NuRenderObject::SetPerPixelFade(NuPerPixelFadePacket*)
NuRenderObject::SetVertexControlledTint(NuColour const&)
NuRenderObject::GetVertexControlledTint() const
NuRenderObject::GetLastRenderFrame() const
SetProceduralAnimationFn(void (*)(nuanimbuff_s*, NuSmartPtr<NuScene, true>, int, NUJOINTANIM_s*))
NuAnimBuffProceduralAnimation(nuanimbuff_s*, NuSmartPtr<NuScene, true>, int, NUJOINTANIM_s*)
NuAnimBuffCreate(int, nuvariptr_u*, nuvariptr_u)
NuAnimBuffInit(int)
NuAnimBuffCreateScratch(nuanimbuff_s*)
NuAnimBuffDestroyScratch(nuanimbuff_s*)
NuAnimBuffEvaluateCallback(void (*)(NUMTX*, void*, NUQUAT*), void**, int*)
NuAnimSetUseQuatsFlag(char)
NuAnimGetUseQuatsFlag()
NuAnimPushSetUseQuatsFlag(char)
NuAnimPopUseQuatsFlag()
NuAnimGetAnimLOD(nuanimdata2_s*, int, NuSmartPtr<NuScene, true> const&)
NuAnimNumNodes(nuanimdata2_s*)
NuAnimEndFrame_(nuanimdata2_s*)
GetBSAnimPtr(void*)
GetBSAnimWeightCountPtr(bsanimadpcminfo_s*)
GetBSAnimLayerPtr(bsanimadpcminfo_s*)
NuAnimEndFrame(nuanimdata2_s*)
NuSpecialGetAnimEndFrame(nuhspecial_s*)
findrange(NuSmartPtr<NuScene, true>, int)
NuAnimData2CalcMatrix(nuanimdata_s*, int, float, NUMTX*, float*)
NuAnimCurve2SetApplyToMatrix_3(ani3_animheader_s*, int, float, NUMTX*, float*, float*)
ANI_EvaluateMinimumJoints(unsigned char*, NuSmartPtr<NuScene, true> const&, NUMTX*, NUMTX*, ani3_animheader_s*, float, nuanimbuff_s*)
ANI_SimpleAni3PlayerV4Joint(ani3_animheader_s const*, float, nuanimbuff_s*, int, int, unsigned char*, NuSmartPtr<NuScene, true> const&)
NuAnimBuffEvaluate_3(NUMTX*, nuanimbuff_s*, NuSmartPtr<NuScene, true> const&, NUMTX*, void (*)(NUMTX*, void*, NUVEC*, NUVEC*, NUVEC*, float), NUVEC*, void*, unsigned char*, int, _vuq_s*)
NuAnimBuffEvaluate_3_QuatBNoScale(NUMTX*, nuanimbuff_s*, NuSmartPtr<NuScene, true> const&, NUMTX*, void (*)(NUMTX*, void*, NUVEC*, NUVEC*, NUVEC*, float), NUVEC*, void*, unsigned char*, int, _vuq_s*)
NuAnimBuffEvaluate_3b(NUMTX*, nuanimbuff_s*, NuSmartPtr<NuScene, true>, NUMTX*, void (*)(NUMTX*, void*, NUVEC*, NUVEC*, NUVEC*, float), NUVEC*, void*, unsigned char*, int)
NuAnimBuffAccumulate_3(nuanimbuff_s*, ani3_animheader_s const*, float, int, float, int, NuSmartPtr<NuScene, true> const&, nujoint_s*, unsigned char*, int)
ANI_SimpleAni3PlayerV4Joint_Blend(ani3_animheader_s const*, float, nuanimbuff_s*, float, int, int, nujoint_s*, unsigned char*)
NuAnimBuffInitFromBindPose(nuanimbuff_s&, NuSmartPtr<NuScene, true> const&)
ANI_SimpleAni3PlayerV4Joint_EulerQuatOld(ani3_animheader_s const*, float, nuanimbuff_s*, int, int, unsigned char*, NuSmartPtr<NuScene, true>)
ANI_SimpleAni3PlayerV4Joint_EulerQuat(ani3_animheader_s const*, float, nuanimbuff_s*, int, int, unsigned char const*, NuSmartPtr<NuScene, true>)
NuAccumulateAni3(NuSmartPtr<NuScene, true> const&, ani3_animheader_s const&, float, float, int, unsigned char*, NuVector<NuTransform>&, NuVector<NuVector3Base>&, unsigned char&)
ANI_SimpleAni3PlayerV4Joint_Blend_Quat3(ani3_animheader_s*, float, nuanimbuff_s*, float, int, int, NUVEC*)
ANI_SimpleAni3PlayerV4Joint_Blend_EulerQuat(ani3_animheader_s const*, float, nuanimbuff_s*, float, int, int, nujoint_s*, unsigned char*)
ANI_Ani3ExtractAllNodeCurves(ani3_animheader_s*, float, float*, int, signed char*)
NuAnimCurveExtractAllNodeCurves_3(ani3_animheader_s*, int, float, signed char*, float*)
NuAnimCurveSetApplyBlendToJoint2(nuanimcurveset_s*, nuanimtime_s*, nuanimcurveset_s*, nuanimtime_s*, float, NUJOINTDATA_s*, NUVEC*, NUVEC*, NUMTX*, NUJOINTANIM_s*)
NuAnimCurve2SetApplyToJointTransLoc(nuanimcurve2_s*, char*, char, nuanimtime_s*, NUJOINTDATA_s*, NUVEC*, NUVEC*, NUMTX*, NUJOINTANIM_s*, NUVEC*, NUVEC*)
NuAnimCurve2SetApplyToJoint(nuanimcurve2_s*, char*, char, nuanimtime_s*, NUJOINTDATA_s*, NUVEC*, NUVEC*, NUMTX*, NUJOINTANIM_s*)
StateAnimEvaluate2(NuStateAnim*, unsigned char*, unsigned char*, float)
StateAnimEvaluate(NUSTATEANIM_s*, short*, unsigned char*, float, void*)
NuVarArray<unsigned char>::AdjustSize(unsigned int)
NuVarArray<float>::AdjustSize(unsigned int)
NuVarArray<NUMTX>::AdjustSize(unsigned int)
buildBitCountTable()
NuAnimInit(int)
NuAnimData2LoadBuffFromPAK(char*, int)
NuAnimData2Fixup(int, NUANIMDATAHDR_s**)
NuAnimDataFixPtrs(nuanimdata_s*, int)
EndianSwapNUSTATEANIM(NUSTATEANIM_s*, bool, bool, unsigned long, unsigned long)
ANI4EndianSwapEarlyLate(ani3_animheader_s*, bool, bool, unsigned long, bool, bool, int)
ANI4EndianSwapEarlyLate(ani3_animheader_s*, bool, unsigned long, bool, int)
CutSceneEndianSwapAn3Data(ani3_animheader_s*, bool, bool, unsigned long, unsigned long, bool, bool, bool)
EndianSwapAn3Data(ani3_animheader_s*, bool, bool, unsigned long, unsigned long, bool, bool, bool, bool, int)
EndianSwapAn3(ani3_animheader_s*, int)
NuAnimData2EndianFixup(NUANIMDATAHDR_s&)
NuAnimData2SetFileSize(nuanimdata2_s*, int)
NuAnimData2FixPtrs(NUANIMDATAHDR_s&)
NuAnimCurveCalcVal2(nuanimcurve_s*, nuanimtime_s*)
NuAnimCurveSetApplyToMatrix(nuanimcurveset_s*, nuanimtime_s*, NUMTX*)
NuAnimCurve2CalcValEx(nuanimcurve2_s*, nuanimtime_s*, NUANIMKEYTYPES_e)
NuAnimData2Relocate(NUANIMDATAHDR_s**, nuvariptr_u*)
NuAnimData2GetFileSize(nuanimdata2_s*)
NuAnimData2FixPtrs(nuanimdata2_s*, int, int, int, bool, int)
NuAnimData2EndianFixup(nuanimdata2_s*, int, bool, int)
NuAnimDataCalcTime(nuanimdata_s*, float, nuanimtime_s*)
NuAnimData2CalcTime(nuanimdata2_s*, float, nuanimtime_s*)
NuAnimDataFindVersion(char*)
NuAnimData2LoadBuffEx(char*, nuvariptr_u*, nuvariptr_u, NUANIMDATAHDR_s**)
NuAnimData2LoadBuff(char*, nuvariptr_u*, nuvariptr_u)
NuAnimCurveIsConstant(nuanimcurve_s*)
NuCamera::NuCamera()
NuCamera::~NuCamera()
NuCamera::Copy(NuCamera&) const
NuCamera::ClipTestPoints(NuVector3Base const*, int, NuMatrixBase const*) const
NuMatrixBase::Mul44(NuMatrixBase const&) const
NuCamera::ClipTestPointsInline(NuVector3Base const*, int, NuMatrixBase const*, NuMatrixBase const*)
NuCamera::ClipTestDisc(NuVector3Base const&, float, float*) const
NuCamera::IsClippingDisabled()
NuCamera::ClipTestSphere(NuVector3Base const&, float, float) const
NuCamera::ClipTestSphereInline(NuVector3Base const&, float, NuMatrixBase const*, float)
NuCamera::CalcRay(float, float, VuVec*, VuVec*) const
NuCamera::CalcRay(float, float, NUVEC*, NUVEC*) const
NuCamera::ClipTestExtentsGeneric(NUVEC const*, NUVEC const*, float*, float, NUMTX const*, int) const
NuCamera::ClipTestExtentsGeneric(VuVec const*, VuVec const*, float*, float, VuMtx const*, int) const
NuCamera::ClipTestExtentsGeneric(VuVec const&, VuVec const&, float*, float, VuMtx const*, int) const
NuCamera::ClipTestExtents(NuVector3Base const&, NuVector3Base&, NuMatrixBase const&, float) const
NuCamera::ClipTestExtentsInline(NuVector3Base const&, NuVector3Base const&, NuMatrixBase const&, float, bool*, float*) const
NuCameraClipTestExtents(NUVEC const*, NUVEC const*, NUMTX const*, float, int, bool*)
NuCamera::BuildClipPlanes()
NuCamera::BuildCameraSpaceClipPlanes(NuVector3Base const&, NuVector3Base const&) const
NuCamera::BuildCameraSpaceNearFarAuxClipPlanes(float, float) const
NuCamera::BuildWorldSpaceClipPlanes(NuVector3Base const&, NuVector3Base const&) const
NuCamera::BuildWorldSpaceNearFarAuxClipPlanes(float, float) const
NuCamera::CalcFaceOnMtx(NUMTX*, NUVEC const*) const
NuCamera::CalcFaceYMtx(NUMTX*, NUVEC const*) const
NuCamera::CalcFaceOnDebris(NUMTX*) const
NuCamera::CalculateMatrices()
NuCamera::GenerateProjectionVuMtx(VuMtx*, float, float, float, float, float, float, float, float)
NuCamera::Update(bool)
NuCamera::TransformPointsLocalToCamera(VuVec*, VuVec const*, VuMtx const*, int) const
ClipLineAgainstPlanes(NuVector4Base const&, NuVector4Base const&, NuMatrixBase const&, NuVector4Base&)
NuClipLineAbsoluteToScreenInternal(NuVector3Base const&, NuVector3Base const&, NuVector3Base&, NuVector3Base&)
NuCamera::NuClipLineAbsoluteToScreen(NuVector3Base const&, NuVector3Base const&, NuVector3Base&, NuVector3Base&) const
NuCamera::NuClipLineAbsoluteToScreen(VuVec const&, VuVec const&, VuVec*, VuVec*) const
NuCamera::ClipLineWorldWithCameraInternal(NuVector3Base const&, NuVector3Base const&, NuVector3Base&, NuVector3Base&) const
NuCamera::ClipLineWorldWithCamera(NuVector3Base const&, NuVector3Base const&, NuVector3Base&, NuVector3Base&) const
NuCamera::ClipLineWorldWithCamera(VuVec const&, VuVec const&, VuVec*, VuVec*) const
NuCamera::TransformPointsLocalToScreen(VuVec*, VuVec const*, VuMtx const*, int) const
void TransformPointsLocalToScreenInternal<true, _vuv_s, _vum_s>(_vuv_s*, _vuv_s const*, _vum_s const*, int, _vum_s const*)
NuCamera::TransformPointsLocalToScreen(VuVec*, VuVec const*, VuMtx const&, int) const
NuCamera::TransformPointsLocalToScreen(NUVEC*, NUVEC const*, NUMTX const*, int) const
NuCamera::Serialize(NuSerialize&)
NuCamera::GetEffectiveDistanceWithFoVSqr(NuVector3Base const&) const
NuCamera::SetAdditionalClipPlane(int, NuVector4Base const&)
NuCamera::GetAdditionalClipPlane(int) const
NuCamera::GetNearClipPlane() const
NuCamera::DisableAdditionalClipPlane(int)
NuCamera::SetScreenSpaceClipPlane(int, float, float, float, float)
NuCamera::HasValidMatrices() const
NuCamera::RegisterImposeParams()
NuCamera::CalculateNearPlaneItersection(NuVector4Base&, NuVector3Base&, NuVector3Base&) const
NuCamera::ClipTestExtentsAxisAlignedInline(NuVector3Base const&, NuVector3Base const&, NuMatrixBase const*, float&, float)
NuCamera::GetMinViewZ(NuVector3Base const&, NuVector3Base const&, NuMatrixBase const&) const
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)12> [10], true, true, false, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)12> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)13>, true, true, false, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)13> >::~NuShaderDataGeneric()
NuDrawBounds(NuVector3Base const&, NuVector3Base const&, NUMTX*, NUCOLOUR3 const&)
NuDisplayListSetInstSurfGeom(void*)
NuRenderListManagerGet()
NuRenderListManager::NuRenderListManager()
NuDisplayListInit()
NuRenderListManager::FrameEnd()
NuRenderListManager::FrameBegin()
NuRenderListManager::BeginCriticalSection()
NuRenderListManager::EndCriticalSection()
NuRenderListManager::PushRenderScene()
NuRenderListManager::DrawLists(NuRenderContext*, int, bool)
NuRenderListManager::DrawDefaultLists(NuRenderContext*, int, bool, bool, bool, bool, bool)
NuRenderListManager::DrawOrderedList(NuRenderContext*, int)
NuRenderListManager::DrawDebugList(NuRenderContext*, int)
NuRenderListManager::RegisterScene(NuScene*)
NuRenderListManager::UnregisterScene(NuScene*)
NuRenderListManager::ShouldMaterialWriteToZPrePassThisStage(NuMtl const*, bool, bool) const
CalculateClipAlpha(float, float const*, float const*)
CalculateClipAlpha(float, float, float)
NuRenderListManager::PushClipObject(NuClipObject const*, NuDisplayScene const&, float, float, bool, bool, bool, bool, bool, NuDynamicLight**, unsigned int, NuBitVector<32u, unsigned int>*)
NuDisplayListGetRenderStageForMtl(NuMtl const*, bool)
NuRenderListManager::PushInstances(NuDisplayScene&, unsigned short, unsigned short, unsigned int, unsigned int, NuDynamicLight**, unsigned int, bool, float)
NuDisplayListAnimateMtls(float, float)
NuRenderListManager::PushScene(NuSmartPtr<NuScene, true> const&)
ResetInstanceTextureOverrides()
UpdateAnimatedInstanceTextures(nuhspecial_s*, float)
NuDisplayListRndrSpecial(nuhspecial_s*, NuMatrixBase const&, int, NUMTX*, DEFORMERWEIGHTSARRAY*, NuMatrixBase*, NUMTX*, float)
NuRenderListManager::PushSpecial(NuScene const*, NuSpecialObject const*, NuMatrixBase const&, NuMatrixBase const*, float, float, bool, bool, bool, DEFORMERWEIGHTSARRAY const*, NuMatrixBase const*, NuMatrixBase const*)
DisplayListCreateGeomTransformPS(NuMatrixBase const&, void*, void*, bool)
NuDisplayListDepthOnlyModeCallback(NuRenderContext*, void const*)
NuDisplayListCameraCallback(NuRenderContext*, void const*)
NuRenderContextGen::SetCameraData(NuMatrixBase const&, NuMatrixBase const&)
NuDisplayListKonstCallback(NuRenderContext*, void const*)
NuDisplayListOverrideTIDCallback(NuRenderContext*, void const*)
NuDisplayListOverrideUVCallback(NuRenderContext*, void const*)
NuDisplayListWireframeCallback(NuRenderContext*, void const*)
NuDisplayListFastBlendCallback(NuRenderContext*, void const*)
NuDisplayListLightsCallback(NuRenderContext*, void const*)
NuDisplayListMtxLoadCallback(NuRenderContext*, void const*)
NuDisplayListTransformRefCallback(NuRenderContext*, void const*)
NuDisplayListShadowTransformRefCallback(NuRenderContext*, void const*)
NuDisplayListFaceonTransformCallback(NuRenderContext*, void const*)
NuDisplayListUnitMtxLoadCallback(NuRenderContext*, void const*)
NuDisplayListSkinMtxCallback(NuRenderContext*, void const*)
MeshDrawPS(NuRenderContext*, NuRenderMesh const*, unsigned int, void**)
NuDisplayListMeshRenderCallback(NuRenderContext*, void const*)
NuDisplayListInstancedMeshRenderCallback(NuRenderContext*, void const*)
NuDisplayListMeshRenderCallbackEx(NuRenderContext*, void const*)
NuDisplayListMeshRenderCallbackDWA(NuRenderContext*, void const*)
NuDisplayListMeshRenderCallbackPTL(NuRenderContext*, void const*)
NuDisplayListMeshRender2DCallback(NuRenderContext*, void const*)
NuDisplayListLightmapVertCallback(NuRenderContext*, void const*)
NuDisplayListLightmapCallback(NuRenderContext*, void const*)
NuDisplayListPerPixelFade(NuRenderContext*, void const*)
NuDisplayListDeferredLightsCallback(NuRenderContext*, void const*)
NuDisplayListResetDepth()
NuDisplayListSetDepthSqrd(float)
NuDisplayListBeginSubmissionOrderedList(bool)
NuDisplayListEndSubmissionOrderedList()
NuDisplayListBeginDebugList()
NuDisplayListEndDebugList()
NuValidateMtlTableForClipObject(NuSmartPtr<NuMtl, true> const*, int, NuClipObject const*, char const*, NuDisplayScene*, bool)
NuValidateMtlTableForSpecial(NuSmartPtr<NuMtl, true> const*, int, nuhspecial_s const*, bool)
NuValidateMtlTableForScene(NuSmartPtr<NuMtl, true> const*, int, NuSmartPtr<NuScene, true> const&, bool)
NuRenderListManager::CalculateSpecialIndexCount_DEBUG(NuScene const*, NuSpecialObject const*, float)
NuRenderListManager::CreateFaceonMesh(NuFaceOnDisplayItem*, NUMTX*, NuMatrixBase const&)
NuWaterSpeed(float)
NuDisplayListInstSurfGeomCallback(NuRenderContext*, void const*)
NuLightPacket::~NuLightPacket()
NuVarArray<NuRenderMeshVbArrayItem>::operator[](unsigned int)
NuVarArray<NuFaceOnInstance>::AdjustSize(unsigned int)
NuRenderList::NuRenderList()
NuRenderList::~NuRenderList()
NuRenderList::Reset()
NuRenderList::PushBack()
NuRenderList::Size() const
NuRenderList::Copy(NuRenderList&)
NuRenderList::Sort(NuRenderList&)
NuRenderList::QSort()
NuRenderList::VirtualQSort()
NuRenderList::VirtualShortSort(unsigned int, unsigned int)
NuRenderList::VirtualSwap(unsigned int, unsigned int)
NuRenderList::OverrideState(unsigned int, void*)
NuRenderList::ReportItemError(NuRenderList::Items*, unsigned int, NuRenderList::ItemType)
NuRenderList::Render(NuRenderContext*)
NuGfxMemGet()
NuGfxMemBlock::SetInUse(bool)
NuGfxMemBlock::GetInUse() const
NuGfxMemBlock::SetSize(unsigned long)
NuGfxMemBlock::GetSize() const
NuGfxMemBlock::SetMemory(char*)
NuGfxMemBlock::GetMemory()
NuGfxMemBlock::SetUserMemory(char*, unsigned long, unsigned long)
NuGfxMemBlock::GetUserMemory()
NuGfxMemBlock::GetUserMemorySize() const
NuGfxMemBlock::GetUserMemoryAlign() const
NuGfxMemBlock::SetRelocateFn(int (*)(int, char*, unsigned long, char*, char*))
NuGfxMemBlock::SetRelocateData(char*)
NuGfxMemBlock::GetRelocateFn() const
NuGfxMemBlock::GetRelocateData()
NuGfxMemBlock::SetNext(NuGfxMemBlock*)
NuGfxMemBlock::GetNext()
NuGfxMemBlock::SetPrev(NuGfxMemBlock*)
NuGfxMemBlock::GetPrev()
NuGfxMemBlock::SetAllocFlags(unsigned short)
NuGfxMemBlock::GetAllocFlags() const
NuGfxMemBlock::RemoveFromList()
NuGfxMemBlock::InsertAfter(NuGfxMemBlock*)
NuGfxMemBlock::InsertBefore(NuGfxMemBlock*)
NuGfxMemBlock::SetNextFree(NuGfxMemBlock*)
NuGfxMemBlock::GetNextFree()
NuGfxMemBlock::SetPrevFree(NuGfxMemBlock*)
NuGfxMemBlock::GetPrevFree()
NuGfxMemBlock::RemoveFromFreeList()
NuGfxMemBlock::InsertAfterFree(NuGfxMemBlock*)
NuGfxMemBlock::ValidateAgainstPageSize(unsigned long)
NuGfxMemBlock::SetLocked(bool, unsigned int, long)
NuGfxMemBlock::GetIsLocked() const
NuGfxMemBlock::IsRelocatable() const
NuGfxMemBlock::SetUsage(NUGFXMEMUSAGE)
NuGfxMemBlock::GetUsage() const
NuGfxMemBlock::SetDiscipline(NuDiscipline)
NuGfxMemBlock::GetDiscipline() const
NuGfxMemBlock::ValidateBlock()
NuGfxMemBlock::SetLastRelocateFrameCount(unsigned int)
NuGfxMemBlock::GetLastRelocateFrameCount() const
NuGfxMemBlockManager::NuGfxMemBlockManager()
NuGfxMemBlockManager::AllocBlock()
NuGfxMemBlockManager::FreeBlock(NuGfxMemBlock*)
NuGfxMemBlockManager::BlockToIndex(NuGfxMemBlock*)
NuGfxMemBlockManager::IndexToBlock(unsigned int)
NuGfxMemBuffer::FixupAllocSizeAndAlign(unsigned long&, unsigned long&)
NuGfxMemBuffer::CalculateTotalMemFree()
NuGfxMemBuffer::GetFreeBlock(unsigned long)
NuGfxMemBuffer::GetLeftmostFreeBlock(unsigned long)
NuGfxMemBuffer::GetLargestFreeBlock(unsigned long)
NuGfxMemBuffer::NuGfxMemBuffer(char const*, unsigned long, unsigned short, unsigned long, nuvariptr_u*, nuvariptr_u, NuGfxMemBlockManager*)
NuGfxMemBuffer::GetSize()
NuGfxMemBuffer::GetAllocFlags()
NuGfxMemBuffer::Validate()
NuGfxMemBuffer::CanAlloc(unsigned long, unsigned long)
NuGfxMemBuffer::Alloc(unsigned long, unsigned long, NUGFXMEMUSAGE, NuDiscipline, unsigned short)
NuGfxMemBuffer::Resize(NuGfxMemBlock*, unsigned long)
NuGfxMemBuffer::Free(NuGfxMemBlock*, bool)
NuGfxMemBuffer::Defragment(bool, bool)
NuGfxMemBuffer::FreePending()
NuGfxMemBuffer::CrossDefragment(NuGfxMemBuffer*, bool)
NuGfxMemBuffer::AccumulateUsageStats(unsigned long*, unsigned int*, unsigned int*)
NuGfxMemBuffer::AccumulateDisciplineStats(unsigned long*, unsigned int*, unsigned int*)
NuGfxMemBuffer::DebugDraw(float, unsigned long, unsigned int*, NuCriticalSection&, float, float)
NuGfxMemBuffer::DebugDrawDiscipline(float, unsigned long, NuCriticalSection&, float, float)
NuGfxMem::NuGfxMem(NuGfxMemInitParams&)
NuGfxMem::GetTotalPoolSize()
NuGfxMem::GetUsedSize()
NuGfxMem::GlobalLock(bool)
NuGfxMem::GlobalUnlock()
NuGfxMem::PoolLock(int, NUGFXMEMUSAGE)
NuGfxMem::PoolUnlock(int, NUGFXMEMUSAGE)
NuGfxMem::PoolTryLockAll(NUGFXMEMUSAGE)
NuGfxMem::PoolUnlockAll(NUGFXMEMUSAGE)
NuGfxMem::SetWasBlockedOnOutOfMemory(int)
NuGfxMem::Free(unsigned int)
NuGfxMem::Resize(unsigned int, unsigned long)
NuGfxMem::GetBlockPtr(unsigned int)
NuGfxMem::Lock(unsigned int, unsigned int, NUGFXMEMUSAGE)
NuGfxMem::Unlock(unsigned int, long, NUGFXMEMUSAGE)
NuGfxMem::EnableRelocation(unsigned int, int (*)(int, char*, unsigned long, char*, char*), void*)
NuGfxMem::DisableDefrag()
NuGfxMem::IsDebugDrawDisciplineEnabled()
NuGfxMem::RequestAudioDefrag()
NuGfxMem::Defragment()
NuGfxMem::FullAudioDefrag()
NuGfxMem::DebugDraw()
NuGfxMem::DebugDrawDiscipline()
NuGfxMem::GetUsageStats(unsigned long*, unsigned int*, unsigned int*)
NuGfxMem::GetDisciplineStats(unsigned long*, unsigned int*, unsigned int*)
NuGfxMem::IsBlockedOnOutOfMemory()
NuGfxMem::DecrementWasBlockedOnOutOfMemory()
NuGfxMem::GetWasBlockedOnOutOfMemory()
NuGfxMem::EnableHighSpeedDefragment()
NuSceneManagerGet()
NuSceneManager::NuSceneManager()
NuSceneManager::FixupSceneResource(NuResourceHeader const*, NuSmartPtr<NuResourceBase, true> const&, NuVector<NuSmartPtr<NuResourceBase, true> > const&, NuResourceLoadStats const&)
NuSceneManager::UnloadResource(NuResourceBase*)
NuSceneManager::FixupCharacterResource(NuResourceHeader const*, NuSmartPtr<NuResourceBase, true> const&, NuVector<NuSmartPtr<NuResourceBase, true> > const&, NuResourceLoadStats const&)
NuSceneManager::FixupIrradiance(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupBlendShapeIds(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupDisciplines(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupSplines(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupDisplayScene(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupInstances(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupClipObjects(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupSpecialObjects(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupMeshes(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupMaterials(NuSmartPtr<NuScene, true> const&) const
IsLowResScene(char const*)
NuSceneManager::FixupExternalSceneReferences(NuSmartPtr<NuResourceBase, true> const&, NuSmartPtr<NuScene, true> const&, NuVector<NuSmartPtr<NuResourceBase, true> > const&) const
NuVertexDesc::GenerateHash() const
NuSceneManager::FixupDisplayListMaterialReferences(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupDisplaySceneMiscData(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupGfxPadData(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::RelocateGfxPadData(int, char*, unsigned long, char*, char*)
NuSceneManager::FixupReferencedInstances(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupCharacterData(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupAnimData(NuSmartPtr<NuScene, true> const&) const
NuVarArray<NuAnimHeader>::operator[](unsigned int)
NuSceneManager::FixupShadowData(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupStencilFaces(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::RegisterObjects(NuScene*)
NuSceneManager::UnregisterObjects(NuScene*)
NuSceneManager::SetDefaultPlaybackRate(float)
NuSceneManager::GetPlaybackRate(NuSmartPtr<NuScene, true> const&)
NuSceneManager::UpdateScene(NuSmartPtr<NuScene, true> const&, float)
NuSceneManager::FixupTID(NuSmartPtr<NuScene, true> const&, NuSmartPtr<NuTextureSet, true> const&, NuSmartPtr<NuTexture, true>&) const
NuSceneManager::FixupTIDsPS(NuSmartPtr<NuScene, true> const&, NuSmartPtr<NuTextureSet, true> const&) const
NuSceneManager::FixupTIDs(NuSmartPtr<NuScene, true> const&, NuSmartPtr<NuTextureSet, true> const&) const
NuSceneManager::FixupTextures(NuSmartPtr<NuScene, true> const&, NuResourceHeader const*, NuSmartPtr<NuTextureSet, true> const&) const
NuResourceHeader::Find(NuResourceId, NuResourceReference&) const
NuSceneManager::FixupTextureAnimations(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupPortals(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupInstanceAnimationData(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupOccluders(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupBlendShapeAnims(NuSmartPtr<NuScene, true> const&) const
NuVarArray<NuBlendShapeAnim>::operator[](unsigned int)
NuSceneManager::FixupWorldBounds(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupShadowCasterFlags(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupTexAnimTIDs(NuSmartPtr<NuScene, true> const&, NuSmartPtr<NuTextureSet, true> const&) const
NuSceneManager::FixupTripWire(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupClipItems(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::FixupRequireLightStateFlag(NuSmartPtr<NuScene, true> const&) const
NuSceneManager::UnFixupSceneResource(NuScene*)
NuSceneManager::LoadScene(NuString const&, bool volatile*)
NuSceneManager::LoadCharacter(NuString const&, bool volatile*)
NuSceneManager::DrawScene(NuSmartPtr<NuScene, true> const&)
NuSceneManager::HGobjStoreClippingOverride()
NuSceneManager::HGobjRestoreClippingOverride()
NuSceneManager::CameraClipHGobj(NuSmartPtr<NuScene, true> const&, NUMTX const*, NuMatrixBase const*, NUVEC*, NUVEC*, NUMTX const*)
NuSceneManager::HGobjRndrMtxDwa(NuSmartPtr<NuScene, true> const&, NUMTX*, float, int, short*, NuMatrixBase const*, DEFORMERWEIGHTSARRAY*, int, NUMTX*, NuMatrixBase*, NuVector3Base*, NuVector3Base*, short*, NUVEC*, NUVEC*, NUMTX*, bool)
NuMatrixBase::Mul34Array(NuMatrixBase*, NuMatrixBase const*, NuMatrixBase const*, unsigned int)
NuSceneManager::HGobjRndrMtxDwaNoClippingOrLightingForKrawlies(NuSmartPtr<NuScene, true> const&, NUMTX*, bool, float, int, short*, NuMatrixBase const*, DEFORMERWEIGHTSARRAY*, int, NUMTX*, NuMatrixBase*, NuVector3Base*, NuVector3Base*, short*, NUVEC*, NUVEC*, NUMTX*, float*, bool)
NuSceneManager::HGobjRndr(NuSmartPtr<NuScene, true> const&, NUMTX*, int, short*)
NuSceneManager::HGobjForceShadowsOnCharacters(int)
NuSceneManager::IsSceneBeingRendered(NuScene const*)
NuSceneManager::IsSceneBeingRendered(NuSmartPtr<NuScene, true> const&)
NuSceneManager::PushContext()
NuSceneManager::PopContext(bool)
NuSceneManager::FrameEnd()
NuSceneManager::SetStoredHgobjMinMax(NuVector3Base&, NuVector3Base&)
NuHGobjGetLod(NuScene*, NUMTX*, int*, float*)
NuVarArray<NuWiiRenderMesh*>::AdjustSize(unsigned int)
NuVarArray<short>::AdjustSize(unsigned int)
NuVarArray<NuOccluder>::AdjustSize(unsigned int)
NuVarArray<NuInstAnim>::AdjustSize(unsigned int)
NuVarArray<NuLayer_SpecialFlags>::AdjustSize(unsigned int)
NuVarArray<NuTransformMtx>::AdjustSize(unsigned int)
NuVector<NuSceneInstance>::Reserve(unsigned int, bool)
NuVector<NUVEC4>::Reserve(unsigned int, bool)
NuVarArray<NuJointData>::AdjustSize(unsigned int)
NuVarArray<NuPointOfInterest>::AdjustSize(unsigned int)
NuVarArray<int>::AdjustSize(unsigned int)
NuVarArray<unsigned short>::AdjustSize(unsigned int)
NuVarArray<NuCurveAnimBlock3>::AdjustSize(unsigned int)
NuVarArray<NuBlendShapeLocator>::AdjustSize(unsigned int)
void NuQuickSortImp<unsigned int>::QuickSortIterative<ClipItemSortFunctor, ClipItemSortFunctor>(unsigned int*, int, ClipItemSortFunctor, ClipItemSortFunctor)
int NuQuickSortImp<unsigned int>::partition<ClipItemSortFunctor, ClipItemSortFunctor>(unsigned int*, int, int, ClipItemSortFunctor, ClipItemSortFunctor)
NuHGobjPOIIndexToId(NuSmartPtr<NuScene, true> const&, int)
NuHGobjGetPOIIndex(NuSmartPtr<NuScene, true> const&, char*)
NuHGobjGetPOIId(NuSmartPtr<NuScene, true> const&, char*)
NuHGobjGetJointNameIndex(NuSmartPtr<NuScene, true> const&, unsigned char)
NuHGobjJointIndexToId(NuSmartPtr<NuScene, true> const&, int)
NuHGobjGetJointIndex(NuSmartPtr<NuScene, true> const&, char const*)
NuHGobjGetLods(NuSmartPtr<NuScene, true>, NuSmartPtr<NuScene, true>*)
NuHGobjGetJointId(NuSmartPtr<NuScene, true> const&, char*)
NuHGobjFindSpecialObjectLayerId(NuSmartPtr<NuScene, true> const&, NuSpecialObject const&)
NuHGobjFindSpecialLayerId(nuhspecial_s const&)
NuHGobjFindJointSpecialLayers(NuSmartPtr<NuScene, true> const&, int)
NuHGobjEval(NuSmartPtr<NuScene, true> const&, int, NUJOINTANIM_s*, NUMTX*)
NuHGobjEvalAnim(NuSmartPtr<NuScene, true> const&, nuanimdata_s*, float, int, NUJOINTANIM_s*, NUMTX*)
NuHGobjEvalAnim2(NuSmartPtr<NuScene, true> const&, nuanimdata2_s const*, float, int, NUJOINTANIM_s*, NUMTX*, unsigned char*)
NuHGobjEvalAnim2Root(NuSmartPtr<NuScene, true> const&, nuanimdata2_s const*, float, int, NUJOINTANIM_s*, NUMTX*, void (*)(NUMTX*, void*, NUVEC*, NUVEC*, NUVEC*, float), void*, unsigned char*)
NuHGobjGetJointEvaluationFilter(NuSmartPtr<NuScene, true> const&, unsigned char**, int*)
NuHGobjEvalAnim2Root_3(NuSmartPtr<NuScene, true> const&, ani3_animheader_s const*, float, int, NUJOINTANIM_s*, NUMTX*, void (*)(NUMTX*, void*, NUVEC*, NUVEC*, NUVEC*, float), void*, unsigned char*)
NuHGobjEvalNMatrices(NuSmartPtr<NuScene, true> const&, nuanimdata2_s*, float, NUMTX*, int)
NuRndrCacheBlendShapeWeights(float*, int)
NuHGobjEvalBlendShapeWeights(bsanimadpcminfo_s*, ani3_animheader_s*, float, float*, int, float)
NuHGobjEvalAnimBlend2(NuSmartPtr<NuScene, true> const&, nuanimdata2_s*, float, nuanimdata2_s*, float, float, int, NUJOINTANIM_s*, NUMTX*, unsigned char*)
NuHGobjEvalAnimBlend2Root(NuSmartPtr<NuScene, true> const&, nuanimdata2_s*, float, nuanimdata2_s*, float, float, int, NUJOINTANIM_s*, NUMTX*, void (*)(NUMTX*, void*, NUVEC*, NUVEC*, NUVEC*, float), void*, unsigned char*)
NuHGobjEvalAnimBlend2Root_3(NuSmartPtr<NuScene, true> const&, ani3_animheader_s*, float, ani3_animheader_s*, float, float, int, NUJOINTANIM_s*, NUMTX*, void (*)(NUMTX*, void*, NUVEC*, NUVEC*, NUVEC*, float), void*, unsigned char*)
CSListHeader<NuImpostor>::~CSListHeader()
NuLegacyPool<NuImpostor, 16>::~NuLegacyPool()
NuImpostorSystem::NuImpostorSystem()
NuImpostorSystem::Init()
NuImpostorSystem::RecreateTexture()
NuImpostorSystem::NuImpostorSystemSetGameLodCallBack(void (*)())
NuImpostorSystem::NuImpostorSystemSetCutSceneLodCallBack(void (*)())
NuImpostorSystem::NuImpostorSystemLodAndPack()
NuImpostorSystem::PackImpostors()
NuImpostorSystem::DeferTheResize()
NuImpostorSystem::Resize(int, int)
NuImpostor::Reset(NUIMPOSTORTYPE, int, int)
NuImpostor::Init()
NuImpostor::MaintainResolution(bool)
NuImpostor::AlwaysRender(bool)
NuImpostorSystem::CreateImpostor(NUIMPOSTORTYPE, int, int)
NuLegacyPool<NuImpostor, 16>::Alloc()
NuImpostorSystem::DestroyImpostor(NuImpostor*)
NuImpostorSystem::SetRenderPipe(int)
NuImpostorSystem::GetRenderPipe()
NuImpostorSystem::GetImpostorMtl2D()
NuImpostorSystem::GetImpostorMtl3D()
NuImpostor::ComputeProjectedWidthAndHeight(NuCamera const*, VuMtx*, VuVec*, int, int, VuVec const*)
NuImpostor::GetRequiredTextureRegionInTexels()
NuImpostor::SetTextureRegionUV(NuRect<int>, float, float)
NuImpostor::GetUVScaleAndOffset(float&, float&, float&, float&)
NuImpostor::UpdateLOD(VuMtx*, VuVec*, NuCamera const*, VuVec const*)
NuImpostorSystem::RenderImpostorTextures(NURENDERSTAGE)
NuImpostor::RenderImpostorTexture(NURENDERSTAGE)
NuImpostor::NuImpostor()
NuImpostor::~NuImpostor()
NuImpostor::SetClipTolerance(float)
NuImpostor::SetMaterial(NuSmartPtr<NuMtl, true> const&)
NuImpostor::SetTransform(NUMTX*)
NuImpostor::SetWidthHeight(float, float, float, float)
NuImpostor::GetWidthHeight(int&, int&)
NuImpostor::SetRenderCallback(void (*)(void*, NURENDERSTAGE), void*)
NuImpostor::SetRenderedThisFrame()
NuImpostor::RenderQuad2D(float, float, float, float, float, NUPRIMSCALEMODE, float)
NuImpostor::RenderPrim2DBegin()
NuImpostor::DrawQuad2D(float, float, float, float, float, NUPRIMSCALEMODE, float, NuSmartPtr<NuMtl, true> const&)
NuImpostor::RenderPrim2DEnd()
NuImpostor::RenderQuad3D(float)
NuImpostor::RenderCircle3D(VuMtx&, float, bool, bool)
NuImpostor::RenderCircle2D(float, float, float, float, float)
NuImpostor::ComputeLOD(VuMtx&, VuVec*, NuCamera const*, VuVec const*)
NuImpostor::ComputeSourceRegion(VuMtx&, VuVec*, NuCamera const*)
NuImpostor::RenderQuad3D(VuMtx&, VuVec*, float, bool, bool)
NuImpostor::RenderSpecial(VuMtx&, nuhspecial_s*, bool)
NuImpostorSystem::FrameBegin()
NuImpostorSystem::FrameEnd()
NuImpostorSystem::AfterFramebufferResize()
LinearToNativeColourSpace(NuColour const&)
LinearToNativeColourSpace(NuVector3Base const&)
SRGBToNativeColourSpace(NuVector3Base const&)
NuLightState::~NuLightState()
NuLightState::SetFromAmbientLight(NuVector3Base const&)
NuLightState::SetFromRTLLights(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base const&)
NuLightState::EvaluateAverageColourSRGB(bool) const
NuLightState::EvaluateAverageColour(bool) const
NuLightState::AddGlow(NuVector3Base const&)
NuLightState::Blend(NuLightState const&, NuLightState const&, float, NuLightState&)
NuSHQuad3Efficient::Blend(NuSHQuad3Efficient const&, NuSHQuad3Efficient const&, NuScalarBase const&, NuSHQuad3Efficient&)
NuLightBinding::NuLightBinding(NuLightState&, NuLightBinding::EPriority)
NuIrradianceLighting::BindLighting(NuLightState*, NuLightBinding::EPriority)
NuLightBinding::NuLightBinding(NuLightState&, NuVector3Base const&, bool, NuLightBinding::EPriority, NuVector3Base*, bool, bool, NuRenderPipe*, float)
NuIrradianceLighting::GetLighting(NuVector3Base const&, NuLightState&, NuVector3Base const*, bool, bool, NuRenderPipe const*, float) const
NuLightBinding::~NuLightBinding()
NuLightModifier::NuLightModifier(NuLightBinding::EPriority, NuVector3Base const&)
NuLightState::operator=(NuLightState const&)
NuLightModifier::~NuLightModifier()
NuIrradianceLighting::NuIrradianceLighting()
NuIrradianceLighting::~NuIrradianceLighting()
NuIrradianceLighting::RegisterImposeParams()
NuIrradianceLighting::Initialise()
NuIrradianceLighting::FrameEnd()
NuIrradianceLighting::ReBindLighting()
NuIrradianceLighting::SetOverrideCubemap(NuSmartPtr<NuTexture, true> const&)
NuIrradianceLighting::RegisterReflectionZone(NuReflectionZone*)
NuAdjustDeferredLightByLSV(NuVector3Base const&, NuColour const&)
NuIrradianceLighting::UpdateFrameCount()
NuGCutSceneSetTGAFrameStep(float)
NuGCutSceneGetTGAFrameStep()
NuGCutSceneGetBaseFrameNumber()
NuGCutSceneGetLastOutPuttedFrameTime()
NuMovieGrabSetRecordInterrupted()
NuMovieGrabSetInfo(char const*, char const*, float, float, float, int, int, int, int, int, int, char*, int, bool, float, bool, int, int, int, bool)
NuMovieGrabSetOutputResolution(int, int)
GenerateOffsetFrameNumber(char*)
GenerateOneBasedFrameNumber(char*)
ClearAVIFrameValues()
NuMovieGrabEnd()
NuMovieGrabInit()
NuMovieGrabSetStartFrame(int)
NuMovieGrabSetEndFrame(int)
NuMovieGrabSetStartFrameTemp(int)
NuMovieGrabSetEndFrameTemp(int)
NuMovieGrabGetStartFrameCfg()
NuMovieGrabGetEndFrameCfg()
NuMovieGrabSetStartTime(float)
NuMovieGrabSetEndTime(float)
NuMovieGrabSetStartTimeTemp(float)
NuMovieGrabSetEndTimeTemp(float)
NuMovieGrabGetStartTimeCfg()
NuMovieGrabGetEndTimeCfg()
NuMovieGrabGetStartFrameTemp()
NuMovieGrabGetEndFrameTemp()
NuMovieGrabIsFrameInRenderRange()
WriteTGAColourImage(char*, numoviegrabinfo_s&, int, int, int)
NuMovieGrabFrame()
NuMovieGrabActivate(int)
NuMovieGrabGetEnabled()
NuMovieGrabGetInitialised()
NuMovieGrabMjpegActivate(int)
NuMaterialManagerGet()
NuMaterialManager::NuMaterialManager()
NuMaterialManager::InitEx()
CreateTextureSamplerState(NuMtl const*, int)
NuMaterialManager::UpdateMaterialTextures(NuMtl*)
NuShaderTextures<(NuShaderTextureGroup::T)3>::ReleaseMarked()
NuMaterialManager::UpdateMaterial(NuMtl*)
NuMaterialManager::UpdateShaderData(NuMtl*)
NuMtlUpdate3DShaders(NuMtl*)
NuSelectDebrisShaderProgram(NuMtl const*)
NuMaterialManager::UnloadMaterialResource(NuResourceBase*)
NuMaterialManager::CloneMaterial(NuSmartPtr<NuMtl, true> const&)
NuMaterialManager::FindMaterial(char const*)
NuMaterialManager::UpdateAll(unsigned int, bool)
NuMaterialManager::ReCompileAllShaders()
NuMaterialManager::AddMaterial(NuMtl*)
NuMaterialManager::CreateMaterialInternal(int, int, int, char const*)
NuMaterialManager::CreateMaterial(char const*)
NuMaterialManager::CreateMaterialEx(char const*, int)
NuMaterialManager::CreateMaterial3D(char const*)
NuMaterialManager::CreateMaterialDynamic(char const*, int, int, int)
NuMaterialManager::CreateMaterialEx3D(char const*, int)
NuMtlAnimateSetSpeedScale(float)
NuMtlAnimate(float, float)
NuMtlSetCurrentRenderPlane(int)
NuMtlAnimateSetMask(int)
NuMtlAnimateGetMask()
NuMaterialManager::FrameEnd()
NuMaterialManager::PushContext()
NuMaterialManager::PopContext(bool)
NuMtlSetLayerOpacityPS(NuSmartPtr<NuMtl, true> const&, int, float)
NuMtlSetRefractiveIndexPS(NuSmartPtr<NuMtl, true> const&, float)
NuMaterialManager::SelectDebrisShaderProgram(NuMtl const*) const
NuMtlSetUVOffsetPS(NuMtl*, unsigned int, float, float)
NuMtlGetUVMatrixPS(NuMtl*, unsigned int, NuUVOverrides::mat3x2*)
NuMtlGetUVOffsetPS(NuMtl*, unsigned int, float*, float*)
NuMtlSetUOffsetPS(NuMtl*, unsigned int, float)
NuMtlSetVOffsetPS(NuMtl*, unsigned int, float)
NuMtlGetTextureLayerAlpha(NuSmartPtr<NuMtl, true> const&, unsigned int)
NuMtlSetTextureLayerAlpha(NuSmartPtr<NuMtl, true> const&, unsigned int, float)
NuMtlRuntimeData::NuMtlRuntimeData()
NuMtlRuntimeData::~NuMtlRuntimeData()
NuShaderTextures<(NuShaderTextureGroup::T)3>::Release()
OcclusionManager::OcclusionManager()
OcclusionManager::~OcclusionManager()
OcclusionManager::Init(unsigned int)
OccluderSet::Init(unsigned int)
OcclusionManager::SetEnabled(bool)
OcclusionManager::BeginFrame()
OccluderSet::Clear()
OcclusionManager::EndFrame()
OcclusionManager::OnCameraSet()
OccluderSet::OnCameraSet()
OcclusionManager::AddOccluder(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
OccluderSet::AddOccluder(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
OcclusionManager::AddOccluder(NUVEC const*, float)
OcclusionManager::AddOccluder(NUVEC const*, NUVEC const*, NUMTX const*)
OcclusionManager::IsOccludedSphere(NUVEC const*, float)
OccluderSet::PrepareForQueries(NUMTX const*, NUMTX const*)
OccluderSet::IsOccludedSphere(NUVEC const*, float)
OcclusionManager::IsOccludedOBB(NUVEC const*, NUVEC const*, NUMTX const*)
OccluderSet::IsOccludedOBB(NUVEC const*, NUVEC const*, NUMTX const*)
OcclusionManager::RenderZPass() const
OccluderSet::RenderOccluders(bool) const
OcclusionManager::RenderStats() const
OccluderSet::OccluderSet()
OccluderSet::~OccluderSet()
OccluderSet::SortByDepth(void const*, void const*)
NuOcclusionManagerInit(unsigned int)
NuOcclusionManagerIsInitialised()
NuOcclusionManagerIsEnabled()
NuOcclusionManagerSetEnabled(int)
NuOcclusionManagerSetOccluderDotProductThreshold(float)
NuOcclusionManagerSetOccluderScreenSpaceThreshold(float)
NuOcclusionManagerBeginFrame()
NuOcclusionManagerEndFrame()
NuOcclusionManagerOnCameraSet()
NuOcclusionManagerAddOccluderQuad(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
NuOcclusionManagerAddOccluderSphere(NUVEC const*, float)
NuOcclusionManagerAddOccluderOBB(NUVEC const*, NUVEC const*, NUMTX const*)
NuOcclusionManagerIsOccludedSphere(NUVEC const*, float)
NuOcclusionManagerIsOccludedOBB(NUVEC const*, NUVEC const*, NUMTX const*)
NuOcclusionManagerRenderZPass()
NuOcclusionManagerRenderStats()
NuPerfOverrideSetParams(NuPerfOverridePlayerContext*, NuPerfOverrideParamBase**, int, bool)
NuPerfOverrideGetPlayer1Context()
NuPerfOverrideSetOverrideAreas(NuPerfOverrideAreaBase**, int)
NuPerfOverrideSetCameraPos(NuPerfOverridePlayerContext*, NUVEC const&)
NuPerfOverrideUpdate(NuPerfOverridePlayerContext*)
NUFRUSTRUM::ClipTestBox(NuVector3Base const&, NuVector3Base const&) const
NuPortalEnabled(int)
NuPortalIsEnabled()
NuPortalInit()
NuPortalSetActive(NuSmartPtr<NuScene, true> const&, int, int)
NuPortalSetActiveDirect(NuPortal*, int)
NuPortalResetActive(NuSmartPtr<NuScene, true> const&)
NuPortalMaxDepth(NuSmartPtr<NuScene, true> const&, int)
NuFrustrumAllocate()
NuFrustrumCopy(NUFRUSTRUM*)
NuRoomContainsPoint(NuRoom*, NUVEC const*)
NuRoomContainsPointExternal(NuRoom*, NUVEC const*)
NuPortalNumRooms(NuSmartPtr<NuScene, true> const&)
NuPortalWhichRoomOld(NuRoomPortals*, NUVEC const*)
NuPortalWhichRoom(NuRoomPortals*, NUVEC const*)
NUFRUSTRUM::ClipTestSphere(NuVector3Base const&, float)
NUFRUSTRUM::BuildFrustrum(NuCamera const&, NUVEC*, NUVEC*, short)
checkPortalVisibility(NuPortal*, NUFRUSTRUM*, NuRoomPortals*, short, short)
computePortalExtents(NuCamera const&, NuPortal*, NUVEC*, NUVEC*)
intesectBoxes(NUVEC*, NUVEC*, NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*)
clipPortal(NuCamera const&, NuPortal*, NuRoom*, int, NUFRUSTRUM*, NUFRUSTRUM**)
createPortalFrustrum(NuCamera const&, NuPortal*, int)
NuPortalRoomClipTest(NuSmartPtr<NuScene, true> const&, short)
NuPortalClipTest(NuSmartPtr<NuScene, true> const&, NUVEC*, float, short)
roomRecursive(NuCamera const&, NuRoomPortals*, NUFRUSTRUM*, short, short, int)
NuPortalEnableDebugDraw(int)
NuPortalSetOverride(NUVEC*)
NUFRUSTRUM::Render(int, NuVector4Base*, NuVector3Base*)
NUFRUSTRUM::ClipTestPoints(NuVector3Base const*, int, NuMatrixBase const*)
NuPortalVisibility(NuSmartPtr<NuScene, true> const&)
NuPortalWhichRoom(NuSmartPtr<NuScene, true> const&, NUVEC const*)
NuConvexHull::NuConvexHull(int)
NuVarArray<NuPortal>::AdjustSize(unsigned int)
NuVarArray<NuRoom>::AdjustSize(unsigned int)
FrustrumSortPredicate(NUFRUSTRUM const*, NUFRUSTRUM const*)
NuPortalResults::NuPortalResults()
NuPortalResults::Reset()
NuPortalResults::~NuPortalResults()
NuPortalResults::ComputeVisibility(NuCamera const*, NuRoomPortals*)
NuPortalResults::ClearRoomVisibility()
NuPortalResults::SetRoomVisibility(int, bool)
NuPortalResults::ClipTestScene(NuSmartPtr<NuScene, true> const&, unsigned char*, int) const
NuPortalResults::ClipTestSphere(NUVEC*, float, VuMtx const*) const
NuPortalResults::ClipTestPoints(NuVector3Base const*, int, NuMatrixBase const*) const
NuPortalResults::GetRoomVisibility(int) const
NuPortalResults::SamePortalSet(NuPortalResults const&) const
NuPortalResults::Accumulate(NuPortalResults&)
NuPortalResults::ClipTestRoom(int) const
NuVarArray<NuRoomInst>::operator[](unsigned int)
void NuQuickSortImp<NUFRUSTRUM*>::QuickSortIterative<bool (*)(NUFRUSTRUM const*, NUFRUSTRUM const*), NuQuickSortDefaultSwap<NUFRUSTRUM*> >(NUFRUSTRUM**, int, bool (*)(NUFRUSTRUM const*, NUFRUSTRUM const*), NuQuickSortDefaultSwap<NUFRUSTRUM*>)
NuPostEffectGetName(NU_POSTEFFECT)
NuPostEffectMask::NumEnabled() const
NuPostEffectParam::NuPostEffectParam()
NuEngineParameters::NuEngineParameters()
NuEngineParameters::Reset()
NuEngineParameters::Zero()
NuEngineParameters::RegisterImposeParams()
NuEngineParameters::GetWiiDarkLevel() const
NuGodRayParameters::NuGodRayParameters()
NuGodRayParameters::Reset()
NuGodRayParameters::Zero()
NuGodRayParameters::RegisterImposeParams()
NuBloomParameters::NuBloomParameters()
NuBloomParameters::Reset()
NuBloomParameters::Zero()
NuBloomParameters::RegisterImposeParams()
NuRandomLinear::NuRandomLinear()
NuRandomLinear::Update(float)
NuRingEffectParams::PersistentVariables::PersistentVariables()
NuRingEffectParams::NuRingEffectParams()
NuRingEffectParams::Reset()
NuRingEffectParams::Zero()
NuRingEffectParams::RegisterImposeParams()
NuRingEffectParams::AnimateFrame(NuRingEffectParams::PersistentVariables&, int, bool, float, int)
NuRingEffectParams::AnimateSubFrames(NuRingEffectParams::PersistentVariables&, int, int, int&, float&)
NuFogParams::NuFogParams()
NuFogParams::Reset()
NuFogParams::Zero()
NuFogParams::RegisterImposeParams()
NuExpHeightFogParams::NuExpHeightFogParams()
NuExpHeightFogParams::Reset()
NuExpHeightFogParams::Zero()
NuExpHeightFogParams::RegisterImposeParams()
NUDOFPARAMETERS::NUDOFPARAMETERS()
NUDOFPARAMETERS::Reset()
NUDOFPARAMETERS::Zero()
NUDOFPARAMETERS::RegisterImposeParams()
NUMOTIONBLURPARAMETERS::NUMOTIONBLURPARAMETERS()
NUMOTIONBLURPARAMETERS::Reset()
NUMOTIONBLURPARAMETERS::Zero()
NUMOTIONBLURPARAMETERS::RegisterImposeParams()
NUACCUMULATIONMOTIONBLURPARAMETERS::NUACCUMULATIONMOTIONBLURPARAMETERS()
NUACCUMULATIONMOTIONBLURPARAMETERS::Reset()
NUACCUMULATIONMOTIONBLURPARAMETERS::Zero()
NUACCUMULATIONMOTIONBLURPARAMETERS::RegisterImposeParams()
NUSPEEDBLURPARAMETERS::NUSPEEDBLURPARAMETERS()
NUSPEEDBLURPARAMETERS::Reset()
NUSPEEDBLURPARAMETERS::Zero()
NUSPEEDBLURPARAMETERS::RegisterImposeParams()
NUPROCESSCOLOURPARAMETERS::NUPROCESSCOLOURPARAMETERS()
NUPROCESSCOLOURPARAMETERS::Reset()
NUPROCESSCOLOURPARAMETERS::Zero()
NUPROCESSCOLOURPARAMETERS::RegisterImposeParams()
NUEXPOSURECONTROLPARAMETERS::NUEXPOSURECONTROLPARAMETERS()
NUEXPOSURECONTROLPARAMETERS::Reset()
NUEXPOSURECONTROLPARAMETERS::Zero()
NUEXPOSURECONTROLPARAMETERS::RegisterImposeParams()
NUSSAOPARAMETERS::NUSSAOPARAMETERS()
NUSSAOPARAMETERS::Reset()
NUSSAOPARAMETERS::Zero()
NUSSAOPARAMETERS::RegisterImposeParams()
NULENSFILTERPARAMETERS::NULENSFILTERPARAMETERS()
NULENSFILTERPARAMETERS::Reset()
NULENSFILTERPARAMETERS::Zero()
NULENSFILTERPARAMETERS::RegisterImposeParams()
NuVignetteParams::NuVignetteParams()
NuVignetteParams::Reset()
NuVignetteParams::Zero()
NuVignetteParams::RegisterImposeParams()
NuWaterDistortionParameters::NuWaterDistortionParameters()
NuWaterDistortionParameters::Reset()
NuWaterDistortionParameters::Zero()
NuWaterDistortionParameters::RegisterImposeParams()
NuScreenSpaceReflectionParameters::NuScreenSpaceReflectionParameters()
NuScreenSpaceReflectionParameters::Reset()
NuScreenSpaceReflectionParameters::Zero()
NuScreenSpaceReflectionParameters::RegisterImposeParams()
NuRainParameters::NuRainParameters()
NuRainParameters::Reset()
NuRainParameters::Zero()
NuRainParameters::RegisterImposeParams()
NuEdgeHiliteParameters::NuEdgeHiliteParameters()
NuEdgeHiliteParameters::Reset()
NuEdgeHiliteParameters::Zero()
NuEdgeHiliteParameters::RegisterImposeParams()
NuLiveReflectionZoneParameters::NuLiveReflectionZoneParameters()
NuLiveReflectionZoneParameters::Reset()
NuLiveReflectionZoneParameters::Zero()
NuLiveReflectionZoneParameters::RegisterImposeParams()
NuToonParameters::NuToonParameters()
NuToonParameters::Reset()
NuToonParameters::Zero()
NuToonParameters::RegisterImposeParams()
NuPostEffectParameters::NuPostEffectParameters()
NuPostEffectParameters::Reset()
NuPostEffectParameters::EnableAll()
NuPostEffectParameters::Zero()
NuPostEffectBlendWeights::RegisterImposeParams()
NuPostEffectBlendWeights::SetFromMask(NuPostEffectMask)
NuPostEffectBlend::NuPostEffectBlend()
NuPostEffectBlend::NuPostEffectBlend(NuPostEffectBlend const&)
NuPostEffectParameters::operator=(NuPostEffectParameters const&)
NuPostEffectBlend::~NuPostEffectBlend()
NuPostEffectBlend::~NuPostEffectBlend()
NuPostEffectBlend::GetPostEffectWeights(NuVector3Base const&, NuPostEffectMask const&, NuPostEffectBlendWeights&)
NuPostEffectBlend::RegisterImposeParams()
NuPostEffectBlendZone::NuPostEffectBlendZone()
NuPostEffectBlendZone::NuPostEffectBlendZone(NuPostEffectBlendZone const&)
NuPostEffectBlendZone::GetPostEffectWeights(NuVector3Base const&, NuPostEffectMask const&, NuPostEffectBlendWeights&)
NuPostEffectController::NuPostEffectController()
NuPostEffectController::RegisterImposeParams()
NuPostEffectController::BeginScreenHistogramCapture()
NuPostEffectController::IsScreenHistogramComplete()
NuPostEffectController::GetScreenHistogramResults(float&, float&, float&, float&, float&)
NuPostEffectController::UpdateSimpleScreenHistogram(float, float, float, float, float)
NuPostEffectController::DebugDraw()
NuPostEffectController::Update(NUPAD*)
NuPostEffectController::UpdateParams(NuRenderPipe const*, NuPostEffectParameters&)
NuPostEffectController::SetupMotionBlur(NuRenderPipe const*, NuPostEffectParameters&)
NuPostEffectController::Scale(NuEngineParameters&, NuEngineParameters const&, float)
NuPostEffectController::Scale(NuBloomParameters&, NuBloomParameters const&, float)
NuPostEffectController::Scale(NuGodRayParameters&, NuGodRayParameters const&, float)
NuPostEffectController::Scale(NUDOFPARAMETERS&, NUDOFPARAMETERS const&, float)
NuPostEffectController::Scale(NULENSFILTERPARAMETERS&, NULENSFILTERPARAMETERS const&, float)
NuPostEffectController::Scale(NUACCUMULATIONMOTIONBLURPARAMETERS&, NUACCUMULATIONMOTIONBLURPARAMETERS const&, float)
NuPostEffectController::Scale(NuWaterDistortionParameters&, NuWaterDistortionParameters const&, float)
NuPostEffectController::Scale(NuScreenSpaceReflectionParameters&, NuScreenSpaceReflectionParameters const&, float)
NuPostEffectController::Scale(NuRainParameters&, NuRainParameters const&, float)
NuPostEffectController::Scale(NuEdgeHiliteParameters&, NuEdgeHiliteParameters const&, float)
NuPostEffectController::Scale(NuLiveReflectionZoneParameters&, NuLiveReflectionZoneParameters const&, float)
NuPostEffectController::Scale(NuToonParameters&, NuToonParameters const&, float)
NuPostEffectController::Scale(NUEXPOSURECONTROLPARAMETERS&, NUEXPOSURECONTROLPARAMETERS const&, float)
NuPostEffectController::Scale(NUPROCESSCOLOURPARAMETERS&, NUPROCESSCOLOURPARAMETERS const&, float)
NuPostEffectController::Scale(NUSPEEDBLURPARAMETERS&, NUSPEEDBLURPARAMETERS const&, float)
NuPostEffectController::Scale(NUSSAOPARAMETERS&, NUSSAOPARAMETERS const&, float)
NuPostEffectController::Scale(NuRingEffectParams&, NuRingEffectParams const&, float)
NuPostEffectController::Scale(NuFogParams&, NuFogParams const&, float)
NuPostEffectController::Scale(NuExpHeightFogParams&, NuExpHeightFogParams const&, float)
NuPostEffectController::Scale(NuVignetteParams&, NuVignetteParams const&, float)
NuPostEffectController::Normalize(NuEngineParameters&, float)
NuPostEffectController::Normalize(NuBloomParameters&, float)
NuPostEffectController::Normalize(NuGodRayParameters&, float)
NuPostEffectController::Normalize(NUDOFPARAMETERS&, float)
NuPostEffectController::Normalize(NULENSFILTERPARAMETERS&, float)
NuPostEffectController::Normalize(NUACCUMULATIONMOTIONBLURPARAMETERS&, float)
NuPostEffectController::Normalize(NuWaterDistortionParameters&, float)
NuPostEffectController::Normalize(NuScreenSpaceReflectionParameters&, float)
NuPostEffectController::Normalize(NuRainParameters&, float)
NuPostEffectController::Normalize(NuEdgeHiliteParameters&, float)
NuPostEffectController::Normalize(NuLiveReflectionZoneParameters&, float)
NuPostEffectController::Normalize(NUEXPOSURECONTROLPARAMETERS&, float)
NuPostEffectController::Normalize(NUPROCESSCOLOURPARAMETERS&, float)
NuPostEffectController::Normalize(NUSPEEDBLURPARAMETERS&, float)
NuPostEffectController::Normalize(NUSSAOPARAMETERS&, float)
NuPostEffectController::Normalize(NuRingEffectParams&, float)
NuPostEffectController::Normalize(NuFogParams&, float)
NuPostEffectController::Normalize(NuExpHeightFogParams&, float)
NuPostEffectController::Normalize(NuVignetteParams&, float)
NuPostEffectController::Normalize(NuToonParameters&, float)
NuPostEffectController::Blend(NuPostEffectBlend const&, NuPostEffectMask, NuPostEffectParameters&)
NuPostEffectParameters::NuPostEffectParameters(unsigned int)
NuPostEffectController::Scale(NuPostEffectParameters const&, NuPostEffectBlendWeights const&, NuPostEffectBlendWeights&, NuPostEffectParameters&)
NuPostEffectController::Normalize(NuPostEffectBlendWeights const&, NuPostEffectParameters&)
NuPostEffectController::HasPostEffectBlend(NU_POSTEFFECT) const
NuPostEffectController::ApplyPriorityLayerBlend(NuPostEffectBlendWeights&, NuPostEffectParameters&, NuPostEffectBlendWeights&, NuPostEffectParameters&, NuPostEffectBlendWeights&)
NuPostEffectController::BlendPostEffects(NuRenderPipe const*, NuPostEffectParameters&)
NuPostEffectController::ForceExposure(float, int)
NuPostEffectController::IsAccumMotionBlurActiveThisFrame()
NuPostEffectController::IsAccumMotionBlurActiveLastFrame()
NuPostEffectBlend::IsEditorControlled()
NuPostEffectBlend::GetPostEffectMask()
NuPostEffectBlendZone::~NuPostEffectBlendZone()
NuPostEffectBlendZone::~NuPostEffectBlendZone()
NuPostEffectBlendZone::IsEditorControlled()
NuPostEffectBlendZone::GetPostEffectMask()
non-virtual thunk to NuPostEffectBlendZone::~NuPostEffectBlendZone()
non-virtual thunk to NuPostEffectBlendZone::~NuPostEffectBlendZone()
NuPositionable::GetName() const
NuRndrCurve(_vuv_s*, int, int, float, float, NuSmartPtr<NuMtl, true> const&, unsigned int, float, float)
NuRndrCurve2Clip(_vuv_s*, int, int, float, float, float, NuSmartPtr<NuMtl, true> const&, unsigned int, float, float, float)
NuRndrCurve2(_vuv_s*, int, int, float, float, float, NuSmartPtr<NuMtl, true> const&, unsigned int, float, float, float)
NuRndrCurve3DInternalClip(_vuv_s*, int, _vuv_s*, int, float, float, bool, float, float, float, float, float*, NuSmartPtr<NuMtl, true> const&, NuColour, NuColour*, float, float, bool, bool)
NuRndrCurve(NuCurveParams&)
NuRndrCurve23D(_vuv_s*, int, int, float, float, float, NuSmartPtr<NuMtl, true> const&, unsigned int, float, float, VuVec*, bool)
NuRndrCurve23DShadowOnly(_vuv_s*, int, int, float, float, float, NuSmartPtr<NuMtl, true> const&, unsigned int, float, float, VuVec*)
NuPrim::Init()
NuRndrSolidTri(NUVEC*, NUVEC*, NUVEC*, unsigned int)
NuRndrWireTri(NUVEC*, NUVEC*, NUVEC*, int)
NuRndrWirePrim(NUVEC const*, unsigned int, int, int)
NuRndrLine2di(int, int, int, int, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrLine(float, float, float, float, unsigned int, NuSmartPtr<NuMtl, true> const&, NUPRIMSCALEMODE)
NuRndrRoundedRectangle2d(float, float, float, float, float, float, int, float, float, float, float, NuColour const&, NuSmartPtr<NuMtl, true> const&, NUPRIMSCALEMODE)
NuRndrCircle(float, float, float, float, int, float, float, float, float, unsigned int, NuSmartPtr<NuMtl, true> const&, NUPRIMSCALEMODE)
NuRndrCircle(float, float, float, float, int, float, float, float, float, unsigned int, NuMtl*)
NuRndrCircle3D(VuMtx&, int, float, float, float, float, unsigned int, NuSmartPtr<NuMtl, true> const&, bool)
NuRndrRect(float, float, float, float, float, float, float, float, float, unsigned int, NuSmartPtr<NuMtl, true> const&, bool, NUPRIMSCALEMODE)
NuRndrRect2d(float, float, float, float, float, unsigned int, NuSmartPtr<NuMtl, true> const&, NUPRIMSCALEMODE)
NuRndrRect2di(int, int, int, int, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrRectUV2d(float, float, float, float, float, float, float, float, float, unsigned int, NuSmartPtr<NuMtl, true> const&, NUPRIMSCALEMODE)
NuRndrRectUV2di(int, int, int, int, float, float, float, float, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrLineRect2di(int, int, int, int, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrLineRect(float, float, float, float, unsigned int, NUPRIMSCALEMODE)
NuRndrGradRect2di(int, int, int, int, unsigned int*, NuSmartPtr<NuMtl, true> const&)
NuRndrLine3d(NUVTX_TC1*, NuSmartPtr<NuMtl, true> const&, NUMTX*)
NuRndr3dLine(float, float, float, float, float, float, unsigned int)
NuRndrLine3dDbg(float, float, float, float, float, float, unsigned int)
NuRndrRectUV2diZ(int, int, int, int, float, float, float, float, unsigned int, NuSmartPtr<NuMtl, true> const&, int)
NuRndrLineStrip2di(int*, float*, int, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrTriStrip2di(int*, float*, int, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrRectUV2dNoScale(float, float, float, float, float, float, float, float, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrGradRectUV2di(int, int, int, int, float, float, float, float, unsigned int*, NuSmartPtr<NuMtl, true> const&)
NuRndrGradRect2diZ(int, int, int, int, unsigned int*, NuSmartPtr<NuMtl, true> const&, int)
NuRndrSphereMtx(NUMTX*, unsigned int, int, NuSmartPtr<NuMtl, true> const&)
NuRndrBoundingBox(NUVEC const*, NUVEC const*, NUMTX const*, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrSolidCube(NUMTX*, float, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrSolidBoundingBox(NUVEC*, NUVEC*, NUMTX*, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrSolidBoundingBox(NuVector3Base&, NuVector3Base&, NuMatrixBase&, unsigned int, NuSmartPtr<NuMtl, true> const&)
NuRndrFrustumInternal(NUMTX*, float, float, float, float, unsigned int, VuVec const*, NuSmartPtr<NuMtl, true> const&)
NuRndrCameraFrustum(NUMTX*, float, float, float, float, unsigned int, VuVec const*, NuSmartPtr<NuMtl, true> const&)
NuRndrFrustum(NUMTX*, float, float, float, float, unsigned int, VuVec const*, NuSmartPtr<NuMtl, true> const&)
NuRndrAxisBright(NUMTX*, float, int)
NuRndrAxisArrowsMtx(NUMTX*, float, NuSmartPtr<NuMtl, true> const&)
NuRndrGrid(NUVEC*, NUVEC*, int, int)
NuRndrRect3DXZ(NUMTX*, unsigned int)
NuRndrStrip3d(NUVTX_TC1*, NuSmartPtr<NuMtl, true> const&, NUMTX*, int)
NuRndrTriStrip3dClip(NUVTX_TC1*, int, NUMTX*, NuSmartPtr<NuMtl, true> const&)
NuRndrTri3dClip(NUVTX_TC1*, int, NUMTX*, NuSmartPtr<NuMtl, true> const&)
NuRndrSolidSphere(NuVector3Base const&, float, int, int, NuColour, NuSmartPtr<NuMtl, true> const&)
NuRndrSphereEx(NUVEC*, float, unsigned int, float, int)
NuRndrSphere(NUVEC*, float, unsigned int, float)
NuRndrCrossHair(NUVEC, float, unsigned int)
NuRndrAddBlobShadow(NuVector3Base const&, float, int, int, int, int)
NuRndrRenderBlobShadows(NuSmartPtr<NuMtl, true> const&)
TransformVert(NuVector3Base const&, NuVector3Base const&, NuScalarBase const&, NuScalarBase const&, NuMatrixBase const&, NuSmartPtr<NuMtl, true> const&)
NuRndrPseudoCappedCylinder(NuVector3Base const&, NuVector3Base const&, float, float, float, NuColour const&, NuSmartPtr<NuMtl, true> const&, NuSmartPtr<NuMtl, true> const&)
NuRndrSphereTRS(NUVEC*, NUANGVEC*, NUVEC*, unsigned int, int, NuSmartPtr<NuMtl, true> const&)
NuRndrAxisArrows(NUVEC*, int, float, NuSmartPtr<NuMtl, true> const&)
NuPvsAreQueriesPossibleRightNow()
NuPvsManager::InLevel() const
NuPvsManager::NuPvsManager()
NuPvsManager::~NuPvsManager()
NuPvsPostLoadFixup(NuPvsData*, bool)
NuPvsZoneInitFixup(NuPvsData const*, NuPvsZoneBox*)
NuPvsFindBitIndex(NuPvsData const*, char const*)
NuPvsManager::FindPvsBitIndex(char const*) const
NuPvsGenerateObjectHash(char const*)
NuPvsManager::OnEnterLevel()
NuPvsManager::OnExitLevel()
NuPvsPointInOBB(VuMtx const&, float*, VuVec const&)
NuPvsIsInZone(NuPvsZoneBox const*, NuPvsData const*, int, int, NUVEC const&)
NuPvsGetZoneContainingPoint(int*, NuPvsData const*, int, int, NUVEC const&)
NuPvsManager::Update()
NuPvsGetCellIndicesXZ(int*, int*, NuPvsData const*, NUVEC const&)
NuPvsGetCellVolumeIndexY(int*, NuPvsData const*, int, int, float)
NuPvsUnpackCellVolume(NuPvsCellVolumeUnpacked*, NuPvsData const*, NUVEC const&)
NuPvsSetCameraPos(NUVEC const&)
NuPvsGetCameraPos()
NuPvsSetDebugPos(NUVEC const&)
NuPvsDebugGetCellVolumeStats(NuPvsCellVolumeStats*, NuPvsData const*, NuPvsCellVolumeUnpacked const*)
NuPvsIsVisible(NuPvsData const*, NuPvsCellVolumeUnpacked const*, int)
NuPvsDebugCellVolumeStatsPrint(NuPvsCellVolumeStats const*)
NuPvsBitArrayZero(unsigned char*, unsigned int)
NuPvsBitArrayOne(unsigned char*, unsigned int)
NuPvsBitArraySet(unsigned char*, unsigned int, unsigned int, bool)
NuPvsBitArrayGet(unsigned char*, unsigned int, unsigned int)
NuPvsGetSizeForBits(unsigned int)
NuPvsSerialise(NuArchive&, NuPvsData*, bool)
NuPvsWrite(char const*, NuPvsData*)
NuPvsRead(char const*, NuPvsData*, bool)
NuPvsSetActiveData(NuPvsData*)
NuPvsGetActiveData()
NuPvsFindBitIndex(char const*)
NuPvsIsVisible(unsigned short)
NuPvsIsVisible(NuPvsData const*, NuPvsZoneBox const*, int)
NuPvsIsWaterProxyVisible()
NuPvsGetActiveCellVolume()
NuPvsGetActiveZone()
NuPvsFixupEmptyCells(NuPvsData*)
NuPvsGetCellHeader(NuPvsData const*, int, int)
NuPvsSetZoneBits(NuPvsData*, int, int)
NuPvsAddZoneBitsToZone(NuPvsData*, int, int)
NuPvsSetZoneBitsToZone(NuPvsData*, int, int)
NuPvsAddZoneBitsToCell(NuPvsData*, int, int, int, int)
NuPvsAddCellBitsToZone(NuPvsData*, int, int, int, int)
NuPvsVolumeGetAABB(NUVEC*, NUVEC*, NuPvsData const*, NuPvsCellVolumeUnpacked const*)
NuPvsDebugRender2DGame()
NuPvsDebugRender3DGame()
NuPvsDebugRender3DTool(NuPvsData const*, NUVEC const&)
NuPvsDebugRender2DTool(NuPvsData const*, NUVEC const&)
NuPvsInit()
NuPvsShutdown()
NuPvsOnEnterLevel()
NuPvsOnExitLevel()
NuPvsEnable(bool)
NuPvsUpdate()
NuPvsCameraPosSetThisFrame()
NuPvsUnpack8BitFloatRange(unsigned char, float, float)
NuPvsUnpackCellVolumeAll(NuPvsCellVolumeUnpacked*, int, NuPvsData const*, NUVEC const&)
NuPvsUnpackCellVolume(NuPvsCellVolumeUnpacked*, NuPvsData const*, int, int, int)
NuPvsUnpackCellVolumeByIdx(NuPvsCellVolumeUnpacked*, NuPvsData const*, int, int)
NuPvsGetCentrePosFromCell(NUVEC*, NuPvsData const*, int, int, int)
NuPvsPack8BitFloatRange(float, float, float)
NuPvsDebugRebuildBounds(NuPvsData const*)
NuPvsDebugRebuildHeatMap(NuPvsData const*, int)
NuPvsDebugRebuildHeatMap(NuPvsData const*)
NuPvsRenderHeatMap3D()
NuPvsRenderBounds3D()
NuPvsGetCellIdx(NuPvsData const*, int, int)
NuPvsExpandData(NuPvsData*)
NuPvsAddBitToCell(NuPvsData*, int, int, int, int)
NuPvsAddCellData(NuPvsData*, NuPvsData*, int, int, int, int)
NuPvsReplaceCellData(NuPvsData*, NuPvsData*, int, int, int, int)
NuPvsAddAdjacentCells(NuPvsData*, int, int, int)
NuPvsAddVolume1Into2(NuPvsData*, int, int)
NuQFntSetPrintMode(int)
NuQFntPushPrintMode(int)
NuQFntPopPrintMode()
NuQFntGetPrintMode()
NuQFntDestroy(void*)
NuQFntSetICGap(void*, float)
NuQFntSetSpaceWidth(void*, float)
NuQFntLenScale()
NuQFntHeightScale()
NuQFntSetCoordinateSystem(NUQFNT_CSMODE)
NuQFntPushCoordinateSystem(NUQFNT_CSMODE)
NuQFntPopCoordinateSystem()
NuQFntGetCoordinateSystem()
UnicodeToIndexFast(VUCHARIDX*, int, unsigned short)
NuQFntEncodeUnicodeChar(void const*, unsigned short)
NuQFntEncodeUnicodeString(void*, unsigned short*)
NuQFntUTF8toQCode(void const*, char const*, unsigned short*)
NuQFntPrintLenW(void*, unsigned short*)
NuQFntPrintLenU(void const*, char const*)
NuQFntHeight(void*)
NuQFntBaseline(void*)
NuQFntSetJustifiedTolerances(float, float)
NuQFntPrintJustifiedW(void*, unsigned short*, float, float, float, float, float, float, float, unsigned int, NUMTX*)
NuQFntSetMtxRS(void*, NUMTX const*)
NuQFntSetScaleRS(void*, float, float)
NuQFntSetColourRS(void*, unsigned int)
NuQFntPrintRSW(void*, unsigned short*, int)
NuQFntPrintCharW(VUFNT*, unsigned short*, int)
NuQFntReadPS(VUFNT*, NuSmartPtr<NuTexture, true> const&, int, int)
NuQFntRead(char const*)
NuQFntInit()
NuQFntSet(void*)
NuQFntSetScale(void*, float, float)
NuQFntSetPointSize(void*, float, float)
NuQFntSetScale2d(void*, float, float)
NuQFntRefCharWidth(void*)
NuQFntMove(void*, float, float, float)
NuQFntMoveRS(void*, float, float, float)
NuQFntSetMtx(void*, NUMTX const*)
NuQFntSetItalicMode(bool, float)
NuQFntSetColour(void*, unsigned int)
NuQFntPrintW(void*, unsigned short*)
NuQFntPrintU(void const*, char const*)
NuQFntPrintLenV(void const*, char const*, std::__va_list)
NuQFntPrintV(void const*, char const*, std::__va_list)
NuQFntCreate(NUFNT*, int, int, nuvariptr_u*, nuvariptr_u)
RemapAddr(void*, void*, void*)
NuQFntWrite(char const*, void*)
NuQFntWriteUniversalFont(char const*, void*, char*)
NuQFntDuplicate(void*, int, int)
NuQFntLoadPtr(char const*, char const*, int, int)
NuQFntPrintEx(void*, int, int, int, char const*, ...)
NuQFntSet2d(void*)
NuQFntSetColour2d(void*, unsigned int)
NuQFntSetMtx2d(void*, NUMTX*)
NuQFntMove2d(void*, float, float, float)
NuQFntPrint2dW(void*, unsigned short*)
NuQFntPrint2dU(void*, char const*)
NuQFntPrint3DW(void*, unsigned short*)
NuQFntPrint3DU(void*, char*)
NuQFntSetWidescreenCompensation(float)
NuFntInit(nuvariptr_u*, nuvariptr_u)
NuFntSetFixedWidthNumerals(int)
NuFntToUpper(unsigned char)
NuFntToLower(unsigned char)
NuFntSetPen(unsigned int)
NuFntSave(NUFNT*, int, char*)
NuFntDumpReadable(NUFNT*, char*)
NuFntSet(NUFNT*)
NuFntScale(int, int)
NuFntGetScreenHeight(NUFNT*)
NuFntPointSize(int, int)
NuFntMoveAbs(int, int)
NuFntMoveRel(int, int)
NuFntPos(int*, int*)
NuFntPrintLen(char*, ...)
NuFntPrintChar(char)
NuFntPrint(char*, ...)
NuFntClose()
NuFntPrintEx(int, int, int, char*, ...)
NuFntCreate(char*, int, int, int, char*)
NuFntDestroy(NUFNT*)
NuFntWrite(char*, NUFNT*)
NuFntLoadPtr(char*, nuvariptr_u*, nuvariptr_u*)
void NuSerialize::SerializeLinkToObject<NuFont>(NuFont*&)
NuMap<KernPair, char>::InsertNode(KernPair const&)
NuClass_NuReflectionZoneTintTexture::NuClass_NuReflectionZoneTintTexture()
NuClass_NuReflectionZoneTintTexture::~NuClass_NuReflectionZoneTintTexture()
NuReflectionCapturePoint::~NuReflectionCapturePoint()
NuReflectionCapturePoint::SetTextureID(NuSmartPtr<NuTexture, true> const&, bool)
non-virtual thunk to NuReflectionCapturePoint::~NuReflectionCapturePoint()
NuReflectionCapturePoint::~NuReflectionCapturePoint()
non-virtual thunk to NuReflectionCapturePoint::~NuReflectionCapturePoint()
NuReflectionCapturePoint::GetTextureID() const
NuReflectionZone::NuReflectionZone()
NuReflectionZone::~NuReflectionZone()
NuReflectionZone::~NuReflectionZone()
NuReflectionZone::SetMatrix(NuMatrixBase const&)
NuReflectionZone::SetPosition(NuVector3Base const&)
NuReflectionZone::ActivateThisFrame()
NuReflectionZone::GetTintDesatColour(NuVector3Base const&) const
NuReflectionZone::GetTintDesatColourRelPos(NuVector3Base const&) const
NuReflectionZoneTintTexture::Sample(float, float) const
NuReflectionZoneTintTexture::NuReflectionZoneTintTexture()
NuReflectionZoneTintTexture::~NuReflectionZoneTintTexture()
NuReflectionZoneTintTexture::~NuReflectionZoneTintTexture()
NuReflectionZoneTintTexture::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<unsigned int>(NuVector<unsigned int>&, char const*)
NuReflectionZoneTintTexture::LoadTexture(char const*)
NuReflectionZoneTintTexture::Clear()
NuReflectionCapturePoint::GetRefCount() const
NuReflectionCapturePoint::AddRef()
NuReflectionCapturePoint::ReleaseRef()
NuClass_NuReflectionZoneTintTexture::~NuClass_NuReflectionZoneTintTexture()
NuClass::RequiresLateRegistration() const
NuClass::DoLateRegistration() const
NuClass_NuReflectionZoneTintTexture::CreateObject() const
NuClass_NuReflectionZoneTintTexture::CreateObjectArray(unsigned int) const
NuClass_NuReflectionZoneTintTexture::PlacementNew(void*) const
NuClass_NuReflectionZoneTintTexture::SerializeObjectIn(NuArchive&, void*) const
NuClass_NuReflectionZoneTintTexture::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_NuReflectionZoneTintTexture::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_NuReflectionZoneTintTexture::~NuClass_NuReflectionZoneTintTexture()
non-virtual thunk to NuClass_NuReflectionZoneTintTexture::~NuClass_NuReflectionZoneTintTexture()
ExtractYAxisRotation(NuMatrixBase const&)
NuGrassPatch::NuGrassPatch()
NuGrassPatch::GenerateFixupKey()
NuGrassPatch::~NuGrassPatch()
NuGrassPatch::ReleaseInstancedMesh()
NuGrassPatch::~NuGrassPatch()
NuGrassPatch::GetMaxInstancesPerDrawCall() const
NuGrassPatch::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<bool>(NuVector<bool>&, char const*)
void NuSerialize::_SerializeVector<TreeNode>(NuVector<TreeNode>&, char const*)
NuGrassPatch::PopulateCornerSamples(float const*, unsigned int, unsigned int, unsigned int const*, float*)
NuGrassPatch::PopulateCornerColourSamples(NuColour const*, unsigned int, unsigned int, unsigned int const*, NuColour*)
NuGrassPatch::PostLoadFixup(NuRenderMesh*)
NuGrassPatch::SetInstancedRenderMesh(NuRenderMesh*)
NuGrassPatch::GenerateInstancedRenderMesh(NuRenderMesh*, NuSmartPtr<NuVertexBuffer, false>, NuGrassPatch*)
NuGrassPatch::BuildTree()
NuGrassPatch::BuildTreeRecursive(short, unsigned int, unsigned int, unsigned int, unsigned int)
NuGrassPatch::GetReorderData(unsigned short*)
NuGrassPatch::GetReorderDataRecursive(unsigned short&, unsigned short*, short, unsigned int, unsigned int, unsigned int, unsigned int)
NuGrassPatch::GetClipData()
NuGrassPatch::GetClipDataRecursive(unsigned short&, short, unsigned int, unsigned int, unsigned int, unsigned int)
NuGrassPatch::GenerateInstancingVertexBufferFromGrassPatch(NuGrassPatch*, NuColour*, NuSmartPtr<NuTexture, true> const&)
NuGrassPatch::SampleVariationTexture(float, float, NuColour&, NuSmartPtr<NuTexture, true> const&)
NuGrassPatch::ExtractGrassBoundMeshTextureMtlFromGSC(NuSmartPtr<NuScene, true> const&, NuSmartPtr<NuTexture, true>&, NuVector3Base&, NuVector3Base&, NuVector3Base&, NuSmartPtr<NuMtl, true>&)
NuGrassPatch::GenerateInstancedRenderMeshOnGrassPatchEditorOnly(NuRenderMesh*, NuGrassPatch*, NuColour*, NuSmartPtr<NuTexture, true> const&)
NuGrassPatch::IsValidForShaderRender() const
NuGrassPatch::GetInstanceDataVertexBuffer()
NuGrassPatch::GetFixupKey() const
NuGrassPatch::SetTintTexture(NuSmartPtr<NuTexture, true> const&)
NuGrassPatch::SubmitForShaderRender()
NuGrassPatch::StaticInit()
NuGrassPatch::GetYAxisRotationInRadians() const
NuClass_NuGrassPatch::NuClass_NuGrassPatch()
NuClass_NuGrassPatch::~NuClass_NuGrassPatch()
NuClass_TreeNode::NuClass_TreeNode()
NuClass_TreeNode::~NuClass_TreeNode()
NuClass_NuGrassPatch::~NuClass_NuGrassPatch()
NuClass_NuGrassPatch::CreateObject() const
NuClass_NuGrassPatch::CreateObjectArray(unsigned int) const
NuClass_NuGrassPatch::PlacementNew(void*) const
NuClass_NuGrassPatch::SerializeObjectIn(NuArchive&, void*) const
NuClass_NuGrassPatch::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_NuGrassPatch::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_NuGrassPatch::~NuClass_NuGrassPatch()
non-virtual thunk to NuClass_NuGrassPatch::~NuClass_NuGrassPatch()
NuClass_TreeNode::~NuClass_TreeNode()
NuClass_TreeNode::CreateObject() const
NuClass_TreeNode::CreateObjectArray(unsigned int) const
NuClass_TreeNode::PlacementNew(void*) const
NuClass_TreeNode::SerializeObjectIn(NuArchive&, void*) const
NuClass_TreeNode::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_TreeNode::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_TreeNode::~NuClass_TreeNode()
non-virtual thunk to NuClass_TreeNode::~NuClass_TreeNode()
NuVector<float>::Reserve(unsigned int, bool)
NuVector<TreeNode>::Reserve(unsigned int, bool)
NuEList<NuRenderPipe, DefaultElist>::~NuEList()
NuRenderPipe::SetPipe(int, NuRenderPipe*)
NuRenderPipe::NuRenderPipe(char const*, NURENDERPIPETYPE)
NuRenderPipe::~NuRenderPipe()
NuRenderPipe::ClearBlendedDirectional()
NuRenderPipe::SetLiveReflectionZoneGeneratorPipe(NuRenderPipe*)
NuRenderPipe::ClassInit()
NuRenderPipe::SetRenderTargetTid(NuSmartPtr<NuTexture, true> const&)
NuRenderPipe::SetGlobalViewport(float, float)
NuRenderPipe::SetWallpaper(NuSmartPtr<NuTexture, true> const&)
NuRenderPipe::AddGrassPatch(NuGrassPatch*)
NuRenderPipe::AddLight(NuDynamicLight*)
NuRenderPipe::RemoveLight(NuDynamicLight*)
NuRenderPipe::ResetDynamicLights()
NuRenderPipe::ResetGrassPatches()
NuRenderPipe::RenderAllPS(int)
NuRenderPipe::ApiFrameEndRender()
NuRenderPipe::DrawVignetteEffect()
NuRenderPipe::DrawVignetteEffect(NuPostEffectParameters*)
NuRenderPipe::ClearCameraSetFlag()
NuRenderPipe::BeginFrameReset()
NuRenderPipe::BeginFrame()
NuRenderPipe::ClearBlobShadows()
NuRenderPipe::Render(bool)
NuRenderPipe::SetMain3DCamera(NuCamera const*)
NuRenderPipe::SetCamera(NuCamera const&, float, float, float, float, float, float, float, float)
NuRenderPipe::GetLiveReflectionZoneTID()
NuRenderPipe::GetType() const
NuRenderPipe::GetLastUpdateFrame() const
NuRenderPipe::LiveReflectionZoneRenderFunction(void*)
NuRenderPipe::AddReflectionZonePipes()
NuRenderPipe::GetCamera() const
NuRenderPipe::RemoveReflectionZonePipes()
NuRenderPipe::RenderAll()
NuRenderPipe::NuRndrEndPipe()
NuRenderPipe::NuRndrEndAllPipes()
NuRenderPipe::SetScreenSpaceClipRect(VuVec (&) [4])
NuRenderPipe::SetScreenSpaceZPassRect(VuVec (&) [4])
NuRenderPipe::SetScreenSpaceConvexClipPoly(VuVec*, int)
NuRenderPipe::SetScreenSpaceConvexZPassPoly(VuVec*, int)
NuRenderPipe::SetScreenSpaceClipLine(float, float, float, float, bool)
NuRenderPipe::PrepareClipPlanes()
NuRenderPipe::PrepareDynamicLights(NuCamera const*)
NuRenderPipe::OnRenderThreadSyncDone()
NuRenderPipe::ClipRectanglesAgainstZPassMesh(NuVector3Base*, unsigned int, NURECT*, unsigned int, unsigned int, int, int)
NuRenderPipe::IsInRenderAll()
NuRenderPipe::AliveDuringRenderAll::AliveDuringRenderAll()
NuRenderPipe::AliveDuringRenderAll::~AliveDuringRenderAll()
NuRenderPipe::UpdateCameraLightState()
NuRenderPipe::GetCameraLightState()
NuRenderPipe::GetNumCameras()
NuRenderPipe::GetPortalResults() const
NuRenderPipe::GetCameraPipe(int)
NuRenderPipe::GetCameraDistanceSq(NuVector3Base const&, bool) const
NuRenderPipe::ClosestCamera(NuVector3Base const&, NuVector3Base&, bool)
NuRenderPipe::ClipTestSphereActivePipes(VuVec const&, float, VuMtx const*, float)
NuRenderPipe::ClipTestSphere(VuVec const&, float, VuMtx const*, float) const
NuRenderPipe::ClipTestPointsActivePipes(NuVector3Base const*, int, NuMatrixBase const*)
NuRenderPipe::ClipTestPoints(NuVector3Base const*, int, NuMatrixBase const*) const
NuRenderPipe::ClipTestRoomActivePipes(int)
NuRenderPipe::ClearAllBlendedDirectional()
NuRenderPipe::BlendDirectionalLight(NuCamera const*, bool)
NuDynamicLightRunTime::operator=(NuDynamicLightRunTime const&)
NuRenderPipe::GetFinalViewport(float&, float&, float&, float&) const
NuRenderPipe::ClearPortalInfo()
NuRenderPipe::SetUpdatePvs(bool)
NuRenderPipe::SetImposterViewport(float, float, float, float)
NuRenderPipe::SetRenderFunction(NURENDERSTAGE, void (*)(void*), void*)
NuRenderPipe::GetBackBufferCopyTid(NURENDERSTAGE) const
NuRenderPipe::AddBlobShadow(NUVEC const&, float, float, float)
NuRenderPipe::AddVehicleBlobShadow(NUMTX const&, VuVec const&, float)
NuRenderPipe::GetBlobShadowType(unsigned int) const
NuRenderPipe::GetVehicleBlobShadowMtx(unsigned int) const
NuRenderPipe::GetNumBlobShadows() const
NuRenderPipe::GetBlobShadowPosition(unsigned int) const
NuRenderPipe::GetVehicleBlobShadowSize(unsigned int) const
NuRenderPipe::GetBlobShadowRadius(unsigned int) const
NuRenderPipe::GetBlobShadowVScale(unsigned int) const
NuRenderPipe::GetBlobShadowAlpha(unsigned int) const
NuRndrClear(int, unsigned int, float)
NuRndrInitEx(int)
NuRndrSetRenderTarget(NuSmartPtr<NuTexture, true> const&)
NuRndrBeginScene(char const*)
NuRndrEndScene()
NuRndrStartReflectionRender(int, bool)
NuRndrEndReflectionRender()
NuRndIsReflectionGobj()
NuRndrWasDrawnUnreflectedGobj()
NuRndrMotionBlurRenderSuppressed()
NuRndrSetBlendData(NURNDRBLENDDATA*, int)
NuRndrResetBlendData()
NuRndrSetWind(float, float)
WindShear(NuMatrixBase*, NuMatrixBase const&, int, int, bool)
NuRndrGlobalFrameCount()
NuRndrGlobalFrameCountPause(int)
NuBackbufferCopy(NuSmartPtr<NuTexture, true> const&)
NuBackbufferPostHUDCopy(NuSmartPtr<NuTexture, true> const&)
CalcShadowAlpha(float, float)
NuRndrStateInit()
NuGlobalRenderState::Reset()
NuGlobalRenderState::UpdateCameraState()
NuGlobalRenderState::NuGlobalRenderState()
NuGlobalRenderState::ClearStatePackets()
NuGlobalRenderState::SetCameraFocusPoint(NUVEC const&, int)
NuGlobalRenderState::SetStereoEnabled(bool)
NuGlobalRenderState::GetStereoEnabled() const
NuGlobalRenderState::SetStereo3DEyeSeparationFactor(float)
NuGlobalRenderState::SetStereo3DFocusOverrideDistance(float)
NuGlobalRenderState::SetConstAlphaTint(NuConstAlpha::T, NuConstTint::T, float, NUCOLOUR3*, NuColour*)
NuGlobalRenderState::SetDistanceFadeAlpha(float)
NuGlobalRenderState::SetEdgeHighlightEnabled(bool, float)
NuGlobalRenderState::SetPerPixelFadeData(NuPerPixelFadePacket const*)
NuGlobalRenderState::AddTextureOverride(NuShaderDesc::TextureSlot::T, int, NuSmartPtr<NuTexture, true> const*)
NuGlobalRenderState::RemoveTextureOverrides()
NuGlobalRenderState::SetOverrideUV(float, float, float, float, float)
NuGlobalRenderState::SetOverrideUVMap(int, NuUVOverrides const*)
NuGlobalRenderState::ClearOverrideUV()
NuGlobalRenderState::SetWireframeMode(NuWireframeMode::T)
NuGlobalRenderState::SetSelectedWireframeColour(NUCOLOUR4 const&)
NuGlobalRenderState::SetPlaneReflectionParameters(float, float, float, float)
NuGlobalRenderState::GetPlaneReflectionParameters(float*, float*, float*, float*) const
NuGlobalRenderState::UpdateFastBlendState()
NuGlobalRenderState::SetLighting(NuLightState*)
NuGlobalRenderState::SetAlphaLightingBoundingBox(NUVEC const*, NUVEC const*, NUMTX const*)
NuGlobalRenderState::BuildCameraPacket(NuCameraPacket*&, NuCameraPacket*&)
NuCameraPacket::Setup(NuMatrixBase const&, NuMatrixBase const&, float, float, float, float, float, float, float, float, NUVEC4, NuCameraPacket*)
NuGlobalRenderState::BuildKonstPacket()
NuGlobalRenderState::BuildFastBlendPacket()
NuGlobalRenderState::BuildTIDOverridePacket(NuMtl*)
NuGlobalRenderState::BuildUVOverridePacket(NuMtl*)
NuGlobalRenderState::BuildWireframePacket()
NuGlobalRenderState::BuildLightPacket()
NuLightPacket::Init(NuLightState const*, NuMatrixBase const&)
NuGlobalRenderState::BuildPerPixelFadePacket()
NuGlobalRenderState::BuildAlphaLightingPacket()
NuGlobalRenderState::BuildGlobalStatePackets(unsigned int)
NuSpecialFind(NuSmartPtr<NuScene, true> const&, nuhspecial_s*, char const*, int)
NuSpecialFindMultiWC(NuSmartPtr<NuScene, true> const&, nuhspecial_s*, char (*) [20], char*, int, int)
NuSpecialFindMulti(NuSmartPtr<NuScene, true> const&, nuhspecial_s*, char*, int, int)
NuSpecialGetPos(nuhspecial_s*)
NuSpecialGetMtx(nuhspecial_s*)
NuSpecialSetMtx(nuhspecial_s*, NUMTX*)
NuSpecialGetAppData(nuhspecial_s*)
NuSpecialSetAppData(nuhspecial_s*, void*)
NuSpecialGetName(nuhspecial_s const*)
NuSpecialHasTransformAnim(nuhspecial_s*)
NuSpecialGetSceneExportFileName(nuhspecial_s*)
NuSpecialDrawAt(nuhspecial_s*, NUMTX*, NUMTX*)
NuSpecialDrawAtAlpha(nuhspecial_s*, NUMTX*, float, NUMTX*, float)
NuSpecialConstAlpha(int, float)
NuSpecialDrawSmoothSkin(nuhspecial_s*, NUMTX*, NUMTX*)
NuSpecialDrawSmoothSkinDwa(nuhspecial_s*, NUMTX*, NUMTX*, DEFORMERWEIGHTSARRAY*, NUMTX*, NUMTX*)
NuSpecialExistsFn(nuhspecial_s const*)
NuSpecialMtlMap(int, NuSmartPtr<NuMtl, true>*)
NuSpecialConstAlpha(NuConstAlpha::T, float)
NuSpecialConstTint(int, NUCOLOUR3 const*, NuColour*)
NuSpecialConstTint(NuConstTint::T, NUCOLOUR3 const*, NuColour*)
NuSpecialSetVisibility(nuhspecial_s*, int, bool)
NuSetLayerVisibility(int, bool)
NuGetLayerVisibility(int)
NuSpecialSetLayer(nuhspecial_s*, int)
NuSpecialSetCutSceneControl(nuhspecial_s*, int)
NuSpecialSetCollision(nuhspecial_s*, int)
NuSpecialGetCollision(nuhspecial_s*)
NuSpecialGetVisibilityFn(nuhspecial_s*)
NuSpecialGetCutSceneControl(nuhspecial_s*)
NuSpecialSetNoVisiTest(nuhspecial_s*, int)
NuSpecialGetNoVisiTestFn(nuhspecial_s*)
NuSpecialGetOnScreenFn(nuhspecial_s*)
NuSpecialGetInstanceix(nuhspecial_s*)
NuSpecialNumMtls(nuhspecial_s*)
NuSpecialGetMtl(nuhspecial_s*, int)
NuSpecialGetBounds(nuhspecial_s*, NUVEC*, NUVEC*)
NuSpecialGetRadius(nuhspecial_s*, NUVEC*, float*)
NuSpecialGetOriginRadius(nuhspecial_s*)
NuSpecialGetInstAnim(nuhspecial_s*)
NuSpecialCompare(nuhspecial_s const*, nuhspecial_s const*)
NuSpecialClear(nuhspecial_s*)
NuSpecialSetClipping(int, int)
NuSpecialGetPhysicsFixupFlag(nuhspecial_s*)
NuSpecialSetPhysicsFixupFlag(nuhspecial_s*, bool)
NuSpecialWasExported(nuhspecial_s*)
NuSpecialSetWiiNormalSkinningEnabled(bool)
NuSpecialGetWiiNormalSkinningEnabled()
NuSpecialSetCurrentID(unsigned long, bool)
NuSpecialGetCurrentID()
NuSpecialGetCachedJoints()
NuSpecialSetInstAnimTime(nuhspecial_s*, float)
NuMtlSpecialSetUV(nuhspecial_s*, float, float)
NuRndrSwapStreamBuffers()
NuRndrStreamInit(int)
NuRndrStreamGetTotalSize()
NuRndrStreamGetLastUsed()
NuRndrStreamGetMaxUsed()
NuTexRemapFilename(char const*, char*, int)
NuTexRead(char const*, NuDiscipline, bool, bool)
NuTexFileExists(char const*)
NuTexWaitForLoad()
NuTexCreateFramebufferCopy()
NuTexAnimInit()
NuTexAnimEnvDestroy(nutexanimenv_s*)
NuTexAnimEnvCreate(nuvariptr_u*, NuSmartPtr<NuMtl, true> const&, short*, nutexanimprog_s*)
NuTexAnimEnvCreate(NuSmartPtr<NuMtl, true> const&, short*, nutexanimprog_s*)
NuGScnStartTexAnim(NuSmartPtr<NuScene, true> const&, int, int)
NuGScnStartStopTexAnim(TEXANIMHDR_s*, int, int, int, bool)
NuGScnStopTexAnim(NuSmartPtr<NuScene, true> const&, int, int)
NuGScnPauseTexAnim(NuSmartPtr<NuScene, true> const&, int, int)
NuGScnUnPauseTexAnim(NuSmartPtr<NuScene, true> const&, int, int)
NuGScnSetTexAnimFrame(TEXANIMHDR_s*, int, int, float)
NuGScnFindTexAnimsFromSpecial(NuSmartPtr<NuScene, true> const&, nuhspecial_s*, short*, int, bool, bool)
ResetPlayingTextureAnims(NuSmartPtr<NuScene, true> const&)
UpdateTexAnimBlock(TEXANIMBLOCK3_s*, bool, bool, bool, TEXANIMHDR_s*)
NuSetForceScenePlayBack(bool)
NuHasForceScenePlayBack()
NuSetForceLoopAnim(bool)
NuHasForceLoopAnim()
NuSetForceScenePlayBackFrame(float)
NuGetForceScenePlayBackFrame()
NuGScnAnimateTexAnims(TEXANIMHDR_s*, TEXANIMHDR_s*, float, int)
NuGScnAnimateTexAnims(TEXANIMHDR_s*, float, float)
NuGScnUpdateTexAnimMaterials(TEXANIMHDR_s*)
NuGscnAddTexAnimScene(TEXANIMHDR_s*, NuMtl**)
NuGscnRelocateTexAnimScene(TEXANIMHDR_s*, int)
NuGscnDeleteTexAnimScene(TEXANIMHDR_s*)
NuGScnUpdateAllTexAnims()
NuTexAnimProcess(float)
NuTexAnimSetGlobalClock(float)
NuTexAnimGetGlobalClock()
NuTexAnimSetGlobalClockNoBlur(float)
NuTexAnimGetGlobalClockNoBlur()
NuTexAnimReset(NuSmartPtr<NuScene, true> const&)
BuildTextureAnimStreamBuffer(TEXANIMHDR_s*, float)
BuildAndApplyTextureAnimStreamMapping(NuSmartPtr<NuScene, true> const&, unsigned char*, NuSmartPtr<NuTexture, true>**, NuUVOverrides**)
RemoveTextureAnimStreamMapping()
DeleteTextureAnimStreamBuffer(unsigned char*&)
DeleteTextureAnimStreamMappingBuffers(NuSmartPtr<NuTexture, true>*&, NuUVOverrides*&)
TextureAnimSysFixUp(TEXANIMHDR_s*, NuSmartPtr<NuScene, true> const&)
NuTextureCreateParams::NuTextureCreateParams()
NuTextureManagerGet()
NuTextureManager::NuTextureManager()
NuThreadQueue<NuTextureManager::TexDecodeCommand, 128ul>::NuThreadQueue()
NuTextureManager::LoadTextureResource(NuFile*, NuString const&, bool volatile*, NuDiscipline)
NuTextureManager::UnloadTextureResource(NuResourceBase*)
NuTextureManager::FindTextureResource(NuString const&)
NuTextureManager::LoadTextureSetResourceFooter(NuFile* const&, NuSmartPtr<NuResourceBase, true> const&, NuResourceHeader const*, bool volatile*)
NuTextureManager::NuTexDecodeThreadFn(void*)
NuTextureManager::~NuTextureManager()
NuHardwareTextureBase::NuHardwareTextureBase()
NuHardwareTextureBase::IsMismatched() const
NuHardwareTextureBase::SetMismatched(bool)
NuHardwareTextureBase::IsRenderTarget() const
NuTextureManager::CreateHardwareTexture(NUTEXFORMAT, int, int, int, int, bool, int, NuDiscipline, NuIdentifier const&, NUT_TYPE, char const*, bool, bool)
NuHardwareTextureBase::CanShrink(int)
NuHardwareTextureBase::ResizeRenderTarget(int, int)
NuHardwareTextureBase::Shrink(int, nutexturetype_e)
NuTextureManager::GetTextureLayout(NuHardwareTexture*, int, int, int&, int&, int&, int&, int&, int&)
NuTextureManager::TexDecodeThreadExists()
NuTextureManager::IsTexDecodeThread()
NuTextureManager::ReadTextureSet(char const*, NuSmartPtr<NuScene, true> const&, bool volatile*)
NuTextureManager::CreateTexture(NuTextureCreateParams const&)
NuTextureManager::NuTexReadDDS(NuIdentifier const&, NuIdentifier const&, NuDiscipline, NuFile*, char const*, bool, int, NUT_TYPE, bool, bool)
NuTextureManager::WaitForTextureLoad()
NuThreadQueue<NuTextureManager::TexDecodeCommand, 128ul>::Pop(NuTextureManager::TexDecodeCommand&)
NuTextureManager::EnableAutoShrink(bool)
NuTextureManager::CloneTexture(NuIdentifier const&)
NuTextureManager::FindMatch(NuIdentifier const&)
NuTextureManager::FindTexture(NuIdentifier const&, int, int)
NuTextureManager::FindMatch(NuIdentifier const&, NUTEXFORMAT, int, int, int, bool, bool)
NuTextureManager::DestroyHardwareTexture(NuHardwareTexture*)
NuTextureManager::AssignTid(NuSmartPtr<NuTexture, true>&)
NuTextureManager::ViewTexture()
NuTextureManager::FrameEnd()
NuTextureManager::ComputeMortonOrderPosition(int, int, int, int)
NuTextureManager::ReadBlocksMortonOrder(NuFile* const&, char*, int, int, int, int, int, char*, int)
NuTextureManager::NuTexReadFromMemory(char*, int, NuDiscipline, bool)
NuTextureManager::FreeResources()
NuTextureManager::RestoreResources()
NuTextureManager::PauseForD3DDeviceReset()
NuTextureManager::ResumeAfterD3DDeviceReset()
NuTextureManager::WaitForGPU()
NuTextureManager::FindTextureResourceByChecksum(NuIdentifier const&)
NuTextureManager::CleanUpForDefrag()
NuTextureManager::ResetShrunkTextureCount()
NuTextureManager::GetShrunkTextureCount()
NuTextureManager::ErrorOnShrunkTextures()
NuTextureManager::DumpToFile(NuString const&)
NuTextureManager::SwapHardwareTextures(NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&)
NuHardwareTextureBase::Lock(int, int, int*)
NuHardwareTextureBase::Unlock()
NuHardwareTextureBase::~NuHardwareTextureBase()
NuHardwareTextureBase::~NuHardwareTextureBase()
NuHardwareTextureBase::GetNonNativeBuffer()
NuVector<NuSmartPtr<NuTexture, true> >::Reserve(unsigned int, bool)
NuTexture::NuTexture()
NuTexture::~NuTexture()
NuTexture::~NuTexture()
NuTexture::ReleaseRef()
NuTexture::GetResourceType() const
NuTexture::Serialize(NuSerialize&)
NuTexture::PreSerializeFixup(bool)
NuTexture::PostSerializeFixup(NuSmartPtr<NuClassAbstractInstance, false>, bool)
NuTexture::MipDifference(int, int, int&, bool) const
NuTexture::CalculateTopMipLevel(int, int, int)
NuTexture::FormatAsString(NUTEXFORMAT)
NuTexture::NutTypeAsString(NUT_TYPE)
NuTexture::Lock(int, int, int*)
NuTexture::Unlock()
NuResourceBase::AddContextRef(unsigned int)
NuResourceBase::ReleaseContextRef(unsigned int)
NuTimeBarInit()
NuTimeBarCreateSetEx(nuvariptr_u*, nuvariptr_u, unsigned int*)
NuTimeBarCreateSetEx2(nuvariptr_u*, nuvariptr_u, int)
NuTimeBarCreateSet(unsigned int*)
NuTimeBarDestroySet(int)
NuTimeBarSlotReset(int, int)
_NuTimeBarSlotBegin(int, int, char*)
_NuTimeBarSlotEnd(int, int)
NuTimeBarSlotLastValue(int, int)
NuTimeBarSlotLastValueMicroseconds(int, int)
NuTimeBarSetRender(int)
NuTimeBarSetRenderHorizontal(int)
NuVisiLockCamera(NuCamera const&)
NuVisiUnlockCamera()
NuVisiEvaluate(NuSmartPtr<NuScene, true> const&, unsigned char*)
NuViewportClearHash()
NuViewportGetClippingMtx(NUMTX*)
NuViewportGetSourceTransform(NUMTX*)
NuViewportGetDestinationTransform(NUMTX*)
NuViewportGetHardwareTransform(NUMTX*)
NuViewportGetFinalViewportTransformMtx(NUMTX*)
NuViewportGetFinalScreenTransformMtx(NUMTX*)
NuViewportMakeViewportTransform(float, float, float, float)
NuViewportInvertMtx(NUMTX const&)
NuScissorSet(float, float, float, float)
NuScissorGetClipped(float*, float*, float*, float*)
NuScissorGet(float*, float*, float*, float*)
NuViewportSet(float, float, float, float, float, float, float, float)
NuViewportSetGlobal(float, float, float, float)
NuViewportTmpReplace::NuViewportTmpReplace(float, float, float, float, float, float, float, float)
NuViewportGetSource(float*, float*, float*, float*)
NuViewportGetDestination(float*, float*, float*, float*)
NuViewportTmpReplace::~NuViewportTmpReplace()
NuViewportGlobalTmpReplace::NuViewportGlobalTmpReplace(float, float, float, float, float, float, float, float, float, float, float, float)
NuViewportGetGlobal(float*, float*, float*, float*)
NuViewportGlobalTmpReplace::~NuViewportGlobalTmpReplace()
NuViewportGetClipped(float*, float*, float*, float*)
NuViewportGetClipped(nuviewport_s*)
NuViewportGetGlobal(nuviewport_s*)
NuStateBlockManager::NuStateBlockManager()
NuStateBlockManager::Init()
NuStateBlockManager::BeginFrame()
NuStateBlockManager::GetSamplerState(NuTextureSamplerGen::Filter::T, NuTextureSamplerGen::Address::T)
NuTextureSamplerGen::Create(NuTextureSamplerGen::Filter::T, NuTextureSamplerGen::Address::T, NuTextureSamplerGen::Address::T, NuTextureSamplerGen::Address::T, float, unsigned int, NuColour, bool, float, float)
NuStateBlockManager::GetSamplerState(NuTextureSamplerGen::Filter::T, NuTextureSamplerGen::Address::T, NuTextureSamplerGen::Address::T)
NuStateBlockManager::GetSamplerStateOneMip(bool, NuTextureSamplerGen::Address::T, int)
NuStateBlockManager::CreateCustomSamplerState(NuTextureSamplerGen::Filter::T, NuTextureSamplerGen::Address::T, NuTextureSamplerGen::Address::T, NuTextureSamplerGen::Address::T, float, unsigned int, NuColour, bool, float, float)
NuStateBlockManager::ReleaseCustomSamplerState(NuTextureSampler*)
NuStateBlockManager::Clear()
NuSamplerTexturePair::Setup(NuTexture const*, NuTextureSampler*)
NuSamplerTexturePair::Bind(NuRenderContext*, int, NuShaderScope::T) const
NuSamplerTexturePair::Release()
NuSamplerTexturePair::ReleaseMarked()
NuGammaRampLookup(float, unsigned short*)
NuVideoGenerateGammaTable(unsigned short*, unsigned short*, unsigned short*)
NuVideoGetAspect()
NuVideoGetAspectScale()
NuVideoSetResolution(int, int)
NuVideoSetSwapMode(NUVIDEO_SWAPMODE)
NuVideoGetSwapMode()
NuVideoSetDisplayType(NUVIDEO_DISPLAY_TYPE)
NuVideoSetBrightness(int, int)
NuVideoGetNativeFPS()
NuBgProcDebugDraw::DebugDrawDebugInfo(NuBgProc::DebugInfo const*, float, bool)
NuBgProcDebugDraw::DebugDrawGraph(NuBgProc::DebugInfo const*, NuBgProc::DebugInfo const**, int, int, int)
NuBgProcDebugDraw::DebugDraw()
InitComputeShader()
NuGfxMemInitPS()
NuGfxMemMemProtectPS(char*, unsigned long, unsigned int, bool)
NuGfxMemGpuMemMovePS(char*, char*, unsigned long)
NuVideoSetSwapModePS(NUVIDEO_SWAPMODE)
NuVideoGetAspectPS()
NuVideoSetBrightnessPS()
NuVideoGetRetraceRatePS()
NuVertexFormatPS::ClassInit()
NuVertexFormatPS::BeginFrame()
NuVertexFormatPS::EndFrame()
NuVertexFormatPS::NuVertexFormatPS(NuVertexDesc const&, void const*, unsigned int)
NuVertexFormatPS::Release()
NuVertexFormatPS::MakeCurrent()
NuRenderMesh_ClearBlendCache()
NuRenderMesh_ApplyBlend(NuRenderMesh const*, DEFORMERWEIGHTSARRAY const*, bool)
NuSmartPtr<NuShaderObject, false>::~NuSmartPtr()
NuDeferredFilterGen::NuDeferredFilterGen()
NuDeferredFilterGen::initResources()
NuDeferredFilterGen::destroyResources()
NuDeferredFilterGen::initTextureResources(int, int)
NuDeferredFilterGen::destroyTextureResources()
NuDeferredFilterGen::render(NuRenderContext*, NURENDERTARGETSET)
NuDeferredFilterGen::DownsampleSceneDepthMinMax()
NuDeferredFilterGen::SortAndGroupLights()
NuDeferredFilterGen::RenderRainSetup()
NuDeferredFilterGen::PrepareEdgeHilite(NuRenderContext*)
NuDeferredFilterGen::renderShadowMaps(NuRenderContext*, NuDynamicLightData&)
NuDeferredFilterGen::renderShadowsOnly(NuRenderContext*, NuDynamicLightData&, bool)
NuDeferredFilterGen::RenderRainSplashes(NuRenderContext*, bool)
NuDeferredFilterGen::SetupForwardLight(NuRenderContext*, NuDynamicLightData*)
NuDeferredFilterGen::renderLight(NuRenderContext*, NuDynamicLightData*, bool, bool, NuSmartPtr<NuRenderTarget, false> const&)
NuDeferredFilterGen::RenderNegativeLights(NuRenderContext*)
NuDeferredFilterGen::RenderSSAO(NuRenderContext*)
NuDeferredFilterGen::RenderLitFog(NuRenderContext*)
NuDeferredFilterGen::CompositeEdgeHilite(NuRenderContext*, NuSmartPtr<NuRenderTarget, false>&)
NuDeferredFilterGen::RenderReflections(NuRenderContext*)
NuDeferredFilterGen::RenderBlobShadows(NuRenderContext*)
NuDeferredFilterGen::RenderRain(NuRenderContext*, NuSmartPtr<NuRenderTarget, false> const&)
NuDeferredFilterGen::RenderDebug(NuRenderContext*)
NuDeferredFilterGen::bindShadowMap(NuRenderContext*, unsigned int)
NuDeferredFilterGen::CalculateShadowMapClearRect(NuDynamicLightData&, unsigned int, unsigned int, bool, NUVEC4&)
NuDeferredFilterGen::UpdateShadowMapDirtyRect(NuDynamicLightData&, unsigned int, unsigned int, bool)
NuDeferredFilterGen::ResolveShadowMap(NuRenderContext*, NUVEC4&)
NuDeferredFilterGen::afterFramebufferResize(int, int)
NuDeferredFilterGen::computeSSAOShaderConstants(int)
NuDeferredFilterGen::RenderRainFar(NuRenderContext*)
NuDeferredFilterGen::RenderRainDrops(NuRenderContext*, bool, NuDynamicLightData*, bool, NuSmartPtr<NuRenderTarget, false> const&)
NuDeferredFilterGen::SetupRainSplashes(NuRenderContext*, NuShaderObject*, NUMTX&, NUMTX&, float*, bool, bool)
GenerateRandomNoiseTextureData()
NuDeferredFilterGen::~NuDeferredFilterGen()
NuDeferredFilterGen::~NuDeferredFilterGen()
NuDeferredFilterGen::getFilterEffectMask()
NuDeferredFilterGen::resetAll()
nuapiCameraGet()
NuDynamicLightUseOccluderPixelThreshold()
NuDynamicLightDesc::create()
NuDynamicLight::Reset()
NuDynamicLightDesc::destroy(NuDynamicLight*)
NuDynamicLightDesc::NuDynamicLightDesc()
NuDynamicLightDesc::NuDynamicLightDesc(NuDynamicLightDesc const&)
NuDynamicLightDesc::~NuDynamicLightDesc()
NuDynamicLightDesc::~NuDynamicLightDesc()
NuDynamicLightDesc::Reset()
NuDynamicLightDesc::getLight(int)
NuDynamicLightDesc::GetLightIndex(NuDynamicLight*)
NuDynamicLightDesc::getMaxLightCount()
NuDynamicLight::renderDebug()
NuDynamicLightDesc::UseParallelSplitShadows(float const*, int)
NuDynamicLightDesc::UseCascadeShadows(float const*, int)
NuDynamicLightDesc::SetDynamicCascadeSize(bool, float, float, float)
NuDynamicLightDesc::UsePointCubeShadows()
NuDynamicLight::Update()
NuDynamicLight::UpdateDirectional()
NuDynamicLight::UpdatePoint()
NuDynamicLight::UpdateSpot()
NuDynamicLight::UpdateCameraMatrices()
NuDynamicLight::setShadowRanges(float)
NuDynamicLightDesc::castsShadows() const
NuDynamicLight::UpdateDirectionalPSSM()
NuDynamicLight::UpdateDirectionalCascade()
NuDynamicLight::UpdateDirectionalGrid()
NuDynamicLightRunTime::Reset()
NuDynamicLightDesc::ComputeViewFrustumSlice(NuCamera const*, float, float, VuVec*)
NuDynamicLightRunTime::QuadTree::SubdivideCell(NuDynamicLightRunTime::QuadTreeCell*)
NuDynamicLightRunTime::QuadTree::QuadTree()
NuDynamicLightRunTime::QuadTree::QuadTree(NuDynamicLightRunTime::QuadTree const&)
NuDynamicLightRunTime::QuadTree::operator=(NuDynamicLightRunTime::QuadTree const&)
NuDynamicLightRunTime::QuadTree::~QuadTree()
NuDynamicLightDesc::RemoveCutsceneBoxesFromImposeMenu()
NuDynamicLight::shadowClipTest(VuVec const&, VuVec const&, bool)
NuDynamicLight::shadowClipTestCascadeLight(VuVec const&, VuVec const&, bool)
NuDynamicLight::shadowClipTestParallelSplitLight(VuVec const&, VuVec const&, bool)
NuDynamicLight::shadowClipTestPointLight(VuVec const&, VuVec const&, bool)
NuDynamicLight::shadowClipTestGridLight(VuVec const&, VuVec const&, bool)
NuDynamicLight::renderSetClipTestAABB(NuMatrixBase const&, NuMatrixBase const&, int)
NuDynamicLight::shadowClipTestPointLightCube(VuVec&, VuVec&, VuVec*, bool)
NuDynamicLight::renderSetClipTestCapsule(VuVec const&, float, int)
NuDynamicLightDesc::ValidateShadowRanges()
NuDynamicLightDesc::RequestValidateShadowRangesDuringNextProcess()
NuDynamicLightDesc::NuSpecialClipTestAllShadowLights(NUVEC const*, NUVEC const*, NUMTX const*, bool, bool)
NuDynamicLightDesc::NuSpecialForceShadows(bool)
NuDynamicLightDesc::NuSpecialClearShadowClipTestResults(int, bool)
NuDynamicLightDesc::NuSpecialHaveShadowClipTestResults()
NuDynamicLightDesc::NuSpecialGetShadowClipTestResult(int)
NuDynamicLightDesc::NuSpecialSetShadowClipTestResults(int, NuBitVector<32u, unsigned int> const&)
NuDynamicLightDesc::NuSpecialAnyShadowClipTestResultTrue()
NuDynamicLight::AlphaClipTestObject(NUVEC const*, NUVEC const*, NUMTX const*) const
NuDynamicLightDesc::AlphaClipTestAllLights(NUVEC const*, NUVEC const*, NUMTX const*, unsigned int&)
NuDynamicLight::NuDynamicLight()
NuDynamicLight::NuDynamicLight(NuDynamicLightDesc*)
NuDynamicLight::ResetInstanceData()
NuDynamicLight::~NuDynamicLight()
NuDynamicLight::~NuDynamicLight()
NuDynamicLightRunTime::NuDynamicLightRunTime()
NuDynamicLightRenderSet::NuDynamicLightRenderSet(NuDynamicLight&, unsigned int)
NuDynamicLightRenderSet::ResetStream()
NuDynamicLightRenderSet::IsEmpty() const
NuDynamicLightRenderSet::UpdateOccludersViewSpaceBox()
NuDynamicLightRenderSet::PrepareForRender(NuDynamicLightData&, int)
NuDynamicLightRenderSet::RenderShadowMap(NuRenderContext*, int)
NuDynamicLightDataCreate(NuDynamicLight*, nuvariptr_u*, int, NuPostEffectMask)
NuDynamicLightData::ComputeShadowParameters(NuDynamicLight const&, int, int)
NuDynamicLightData::SetShadowConstants()
NuDynamicLightData::SetShadowMapIndexInLightGroup(int)
NuDynamicLightData::BeginPIXEvent()
CheckScreenSpaceCircleColour(NUCOLOUR3 const&)
NuMainFilterGen::NuMainFilterGen()
NuMainFilterGen::initResources()
NuMainFilterGen::destroyResources()
NuMainFilterGen::initTextureResources(int, int)
NuMainFilterGen::GenerateNoiseTextureData(int, int)
NuMainFilterGen::destroyTextureResources()
NuMainFilterGen::afterFramebufferResize(int, int)
NuMainFilterGen::render(NuRenderContext*, NURENDERTARGETSET)
NuMainFilterGen::FindPostEffectLights(int&, NuMainFilterGen::PostEffectLight*, float&, float&)
NuMainFilterGen::ProcessLightOcclusion(NuRenderContext*, int&, NuMainFilterGen::PostEffectLight*, bool)
NuMainFilterGen::CalculateDepthOfFieldSettings()
NuMainFilterGen::CalculateDepthScaleBias(NuRenderContext*, float, float)
NuMainFilterGen::GenerateColourWithDepthTex(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuRenderTarget, false> const&)
NuMainFilterGen::ProcessDepthOfField(NuRenderContext*, NuSmartPtr<NuRenderTarget, false> const&)
NuMainFilterGen::ProcessBloom(NuRenderContext*, NuSmartPtr<NuRenderTarget, false> const&, float)
NuMainFilterGen::ProcessGodRays(NuRenderContext*, NuSmartPtr<NuRenderTarget, false> const&, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuRenderTarget, false> const&, int, NuMainFilterGen::PostEffectLight*)
NuMainFilterGen::ProcessSpeedBlur(NuRenderContext*, NuSmartPtr<NuRenderTarget, false> const&)
NuMainFilterGen::RetrieveLuminanceQueryResults(NuRenderContext*)
NuMainFilterGen::ExposureControl(float)
NuMainFilterGen::ProcessColourParametersChanged(int&)
NuMainFilterGen::ProcessColourCube(int)
NuMainFilterGen::RenderFullScreenPass(NuRenderContext*, NURENDERTARGETSET, NuSmartPtr<NuShaderObject, false>, NuSmartPtr<NuShaderObject, false>, float, bool)
NuMainFilterGen::ProcessLensFlare(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, int, NuMainFilterGen::PostEffectLight*)
DrawKeyItem(float, float, unsigned int, char const*, bool)
NuMainFilterGen::DrawExposureDebugDisplay()
NuMainFilterGen::ProcessRingEffect(NuRenderContext*, NuSmartPtr<NuRenderTarget, false> const&)
NuMainFilterGen::MaskGodRays(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, NuMainFilterGen::PostEffectLight&)
NuMainFilterGen::RadialBlur(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, bool, bool, NuMainFilterGen::PostEffectLight&, float, float, float, float, float)
NuMainFilterGen::GenerateGammaTextureData(int, int)
NuMainFilterGen::RenderLightEmitterSphere(NuRenderContext*, NuMainFilterGen::PostEffectLight&, int, int)
NuMainFilterGen::~NuMainFilterGen()
NuMainFilterGen::~NuMainFilterGen()
NuMainFilterGen::getFilterEffectMask()
NuPostFilterGen::resetAll()
NuMainFilterGen::RingData::~RingData()
NuMainFilterGen::ColourProcessData::~ColourProcessData()
NuPostEffectInit()
NuPostEffectGetPostFiltersMask()
NuPostEffectSetTextures(char const*, char const*, char const*)
NuPostEffectResetmotionAccumFilter()
NuPostEffectDestroy()
NuPostEffectEnd()
AdvanceMotionAccumVars()
NuPostEffectAccumulationMotionBlurGetJitterMatrix()
NuIsFirstAccumulationFrame()
NuGetAccumulationShutterFraction()
NuGetAccumulationSampleCount()
NuAccumulationMotionBlurIsActive()
NuPostEffectTiming(int*)
NuPostEffectRender(NuRenderContext*, NURENDERTARGETSET, NuPostEffectMask, NuPostEffectParameters&)
NuPostFilterGen::initSharedTextureResources(int, int)
NuPostFilterGen::CreateGrid(float, float, float, float, unsigned int)
NuPostFilterGen::CreateBox()
NuPostFilterGen::CreateSphere()
NuPostFilterGen::CreateCone(int, float, float)
NuPostFilterGen::CreateRainMesh()
NuPostFilterGen::CreateCubemapVisMesh()
NuPostFilterGen::SetZPassMesh(NuVector3Base*, NuVector3Base*, unsigned int)
NuPostFilterGen::SetZCullMesh(NuVector3Base*, NuVector3Base*, unsigned int)
NuPostFilterGen::initSharedResources()
NuPostFilterGen::InitZMaskMeshes()
NuPostFilterGen::destroySharedResources()
NuPostFilterGen::blur7x7MipChain(NuRenderContext*, NuSmartPtr<NuTexture, true>*, NuSmartPtr<NuTexture, true>*, int, float, NuShaderObject*, int)
NuPostFilterGen::blur5x5MipChain(NuRenderContext*, NuSmartPtr<NuTexture, true>*, bool, NuSmartPtr<NuTexture, true>*, bool, int, float, NuShaderObject*, int*)
NuPostFilterGen::blur7x7Separate(NuRenderContext*, NuSmartPtr<NuTexture, true>*, int, NuSmartPtr<NuTexture, true>*, int, NuSmartPtr<NuTexture, true> const&, int, int, bool, float, NuShaderObject*)
NuPostFilterGen::seperableBlur(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, float, float, float, float, bool, float)
NuPostFilterGen::buildMipChain(NuRenderContext*, NuSmartPtr<NuRenderTarget, false>*, NuSmartPtr<NuRenderTarget, false>*, int, int, bool, bool, bool, float*, float*, float*, float*)
NuPostFilterGen::downSample(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, int, NuSmartPtr<NuTexture, true> const&, int, bool, bool, bool, float, float, float, float)
NuPostFilterGen::combineMipMaps(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, int, float*, bool)
NuPostFilterGen::blendTextures(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, int, NuSmartPtr<NuTexture, true> const&, int, NuSmartPtr<NuTexture, true> const&, int, NuShaderDesc::BlendMode::T, float, bool)
NuPostFilterGen::GetSampleOffsets_GaussBlur5x5(int, int, VuVec*, float)
NuPostFilterGen::renderQuad()
NuPostFilterGen::renderQuadGrid()
NuPostFilterGen::renderSeededQuadGrid()
NuPostFilterGen::initResources()
NuPostFilterGen::destroyResources()
NuPostFilterGen::~NuPostFilterGen()
NuPostFilterGen::~NuPostFilterGen()
NuPostFilterGen::initTextureResources(int, int)
NuPostFilterGen::destroyTextureResources()
NuPostFilterGen::afterFramebufferResize(int, int)
NuSetMotionBlurNumSamples(int)
NuGetMotionBlurNumSamples()
NuGetMotionBlurShaderIndex()
NuSetCutsceneMotionBlurCameraExposure(float)
NuSetCutsceneMotionBlurCharacterExposure(float)
NuGetCutsceneMotionBlurCameraExposure()
NuGetCutsceneMotionBlurCharacterExposure()
NuSetMotionBlurCameraExposure(float)
NuSetMotionBlurCharacterExposure(float)
NuGetMotionBlurCameraExposure()
NuGetMotionBlurCharacterExposure()
NuPostMotionBlurFilter::NuPostMotionBlurFilter()
NuPostMotionBlurFilter::initResources()
NuPostMotionBlurFilter::destroyResources()
NuPostMotionBlurFilter::initTextureResources(int, int)
NuPostMotionBlurFilter::destroyTextureResources()
NuPostMotionBlurFilter::afterFramebufferResize(int, int)
NuPostMotionBlurFilter::render(NuRenderContext*, NURENDERTARGETSET)
NuPostMotionBlurFilter::~NuPostMotionBlurFilter()
NuPostMotionBlurFilter::~NuPostMotionBlurFilter()
NuPostMotionBlurFilter::getFilterEffectMask()
NuRenderContextGen::~NuRenderContextGen()
NuRenderContextGen::Init()
NuRenderContextGen::Reset()
NuRenderContextGen::ClearBoundVertexBuffers()
NuRenderContextGen::GetEventName(NuRenderContextGen::Event::T)
NuRenderContextGen::GetEventNameW(NuRenderContextGen::Event::T)
NuRenderContextGen::GetEventHeirarchyLevel(NuRenderContextGen::Event::T)
NuRenderContextGen::GetEventPixelToVertexRatio(NuRenderContextGen::Event::T)
NuRenderContextGen::DoMotionBlurUpdate()
NuRenderContextGen::FlushKTintAlpha()
NuRenderContextGen::FlushEnvRotMatrix()
NuRenderContextGen::GetWasCameraCut(int)
NuRenderContextGen::CameraCutDetected(NuMatrixBase const*)
NuRenderContextGen::UploadMotionBlurState()
NuRenderContextGen::UpdateWaterTable()
NuRenderContextGen::SetFogParams(NuFogPacket*, NUVEC4 const*)
NuRenderContextGen::FlushFogParams()
NuRenderContextGen::SetPerPixelFadeData(NuPerPixelFadePacket*)
NuRenderContextGen::SetCameraData(NuCameraPacket const*)
NuRenderContextGen::BindVertexBuffer(unsigned int, NuVertexBuffer const*, unsigned int, unsigned int, void**)
NuRenderContextGen::SetWireframeModePS(NuWireframeMode::T)
UpdateBrokenShaderRandomColor()
NuRenderTarget::GetRefCount() const
NuEList<NuRenderTarget, DefaultElist>::~NuEList()
NuSmartPtr<NuRenderTarget, false>::~NuSmartPtr()
NuRenderTargetsBase::RefractionUpdateAllowed()
NuTexGetBytesPerPixel(NUTEXFORMAT)
NuRenderTargetsBase::ReAllocateSharedRenderTargets(bool, bool)
NuRenderTargetsBase::CreateSharedRenderTargets(unsigned int, unsigned int, NUTEXFORMAT, bool, bool)
NuRenderTargetsBase::FreeSharedRenderTargets()
NuRenderTargetsBase::ReqestFixedAspectRenderTarget(NUTEXFORMAT, unsigned int, unsigned int, char const*, NURENDERTARGETUSAGE, bool)
NuRenderTargetsBase::CreateQueuedRenderTargets()
NuRenderTargetsBase::GetFixedAspectRenderTarget(NURENDERTARGETUSAGE, NUTEXFORMAT, unsigned int, bool, unsigned int)
NuRenderTargetsBase::GetExclusiveUsageRenderTarget(NURENDERTARGETUSAGE, NUTEXFORMAT, bool)
NuRenderTargetsBase::AcquireRenderTargetSet(NURENDERTARGETSET)
NuRenderTargetsBase::ReserveRenderTarget(NuRenderTarget*, NURENDERTARGETUSAGE)
NuRenderTargetsBase::ReleaseRenderTargetSet(NURENDERTARGETSET)
NuRenderTargetsBase::ReleaseAllGlobalTargets()
NuRenderTargetsBase::ReqestCustomSizeRenderTarget(NUTEXFORMAT, unsigned int, unsigned int, unsigned int, char const*, NURENDERTARGETUSAGE, bool)
NuRenderTargetsBase::CountUnUsedRenderTargetMemoryLastFrame()
NuRenderTargetsBase::CountUnUsedRenderTargetMemory(int)
NuRenderTargetsBase::CountUnUsedRenderTargetMemorySinceLevelChange()
NuRenderTargetsBase::GetCustomSizeRenderTarget(NURENDERTARGETUSAGE, NUTEXFORMAT, unsigned int, unsigned int, unsigned int, bool)
NuRenderTargetsBase::ReleaseRenderTarget(NuRenderTarget*)
NuRenderTargetsBase::EndPipe(int)
NuRenderTargetsBase::RenderDebugRT(NuRenderContext*)
NuRenderTarget::~NuRenderTarget()
NuRenderTarget::~NuRenderTarget()
NuRenderTarget::AddRef()
NuRenderTarget::ReleaseRef()
NuEListSort<NuRenderTarget, NuRenderTarget, DefaultElist>::DefaultLessThanCompare(NuRenderTarget const&, NuRenderTarget const&)
NuRenderTarget* NuEListSort<NuRenderTarget, NuRenderTarget, DefaultElist>::MergeSort<bool (*)(NuRenderTarget const&, NuRenderTarget const&)>(bool (*)(NuRenderTarget const&, NuRenderTarget const&), NuRenderTarget*, unsigned int)
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)19>, true, true, false, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)19> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)24>, true, true, false, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)24> >::~NuShaderDataGeneric()
NuRenderThread::CreatePS()
NuRenderThread::DestroyPS()
NuRenderThreadIsCurrentThread()
NuRenderThreadLock()
NuRenderThreadIsLocked()
NuRenderThreadCurrentThreadHasLock()
NuRenderThreadUnlock()
NuRenderThreadStartRender()
NuRenderThreadDestroy()
NuRenderThread::RenderAll()
NuRenderThreadPipeData::NuRenderThreadPipeData()
NuRenderThreadPipeData::Reset()
NuRenderThreadPipeData::operator=(NuRenderPipe const*)
NuRenderThreadPipeData::ResetViewport() const
NuRenderThread::IsDebugDrawRenderRequired(int, NuRenderThreadPipeData*)
NuRenderThread::ComputeRenderTargetBinding(NuRenderThreadPipeData*, int, NURENDERTARGETSET*, NuPostEffectMask&, NuPostEffectMask&)
NuRenderThread::FindScene(int, int)
NuRenderThread::RenderAllOnce()
NuRenderThread::SortScenes()
NuRenderThread::RenderPipe(int, NuRenderThreadPipeData*)
RenderScenesDebugDisplayLists(NuRenderContext*, int, NuRenderThreadPipeData*)
NuRenderThread::GetRenderStagePostEffectMask(NURENDERSTAGE, NuPostEffectParameters*)
NuRenderThread::UpdateHDR(NuRenderThreadPipeData*)
NuRenderThread::BindRenderTargets(NuRenderContext*, NURENDERTARGETSET)
NuRenderThread::UpdateFramebufferOutputParams(NUTEXFORMAT)
NuRenderThread::SetFog(bool, NuRenderThreadPipeData*)
NuRenderThread::RenderScene(NURNDRSCENEPARAMETERS*, bool, bool, bool)
NuRenderThread::CopyBackBuffer(int, NuSmartPtr<NuTexture, true>&, bool)
NuRenderThread::CopyToRenderTargets(int)
NuRenderThread::GenerateCubeMapMips(int)
NuRenderThread::SetEnableRender(bool)
NuRenderThread::PrepareRender()
NuRenderThread::DoesSceneExistInSceneParametersSafe(int, int)
NuRenderThreadPrepareRender()
NuRenderThreadCreate()
NuRenderThread::SetExponentialHeightFog(bool, NuRenderThreadPipeData const*, NuShaderObject*)
NuRenderThread::GetFramebufferOutputParams()
NuRenderThread::HighDynamicRangeRequired(NuPostEffectMask)
NuRenderThread::ResolveImpostors(NuSmartPtr<NuTexture, true>, NuRenderThreadPipeData*)
NuShaderManagerGen::~NuShaderManagerGen()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)4>, false, true, false, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)4> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)0>, false, true, false, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)0> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)10>, true, true, false, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)10> >::~NuShaderDataGeneric()
NuShaderObject::NuShaderObject()
NuShaderObject::~NuShaderObject()
NuShaderObject::~NuShaderObject()
NuShaderObject::AddRef()
NuShaderObject::ReleaseRef()
NuShaderManagerGen::ReleaseShader(NuShaderObject*, bool)
NuShaderManagerGen::NuShaderManagerGen()
NuShaderManagerGen::Init()
NuShaderManagerGen::WorkerThreadFunc(void*)
NuShaderManagerGen::Reset()
NuShaderManagerGen::GetShader(NuShaderDesc const&, NuVertexDesc const&, NuMtl::Shader::T)
NuShaderManagerGen::LookupCache(NuHash)
NuShaderManagerGen::CreateShaderProgram(NuHash, NuUbershaderBytecodeCache::ShaderByteCode const*, NuVertexDesc const&, NuDiscipline, bool, char const*, char const*)
NuShaderManagerGen::GetShaderAS(NuShaderDesc const&, NuVertexDesc const&, NuSmartPtr<NuShaderObject, false>*, NuMtl::Shader::T)
NuShaderManagerGen::GetShader(NuHash, NuVertexDesc const&)
NuShaderManagerGen::GetCustomShaderExt(void const*, unsigned int, void const*, unsigned int, char const*, char const*, NuVertexDesc const&, NuDiscipline)
NuShaderManagerGen::CreateShaderProgram(NuHash, void const*, unsigned int, bool, void const*, unsigned int, bool, NuVertexDesc const&, NuDiscipline, bool, char const*, char const*)
NuShaderManagerGen::GetCustomShaderVariation(NuSmartPtr<NuShaderObject, false>, NuVertexDesc const&, NuDiscipline)
NuShaderManagerGen::DetermineShaderVariableUsage(NuShaderObject*, void const*, unsigned int, void const*, unsigned int, bool)
NuShaderManagerGen::ParseConstantsCommentLine(char const*, char const*, char const**, int*, char*&)
NuShaderManagerGen::FindShaderGroup(NuShaderObject*)
NuShaderGroup::Init(unsigned long, NuDiscipline)
NuShaderManagerGen::CleanupShaderGroups()
NuShaderGroup::Release()
NuShaderManagerGen::Bind(NuShaderObject*, int)
NuShaderManagerGen::SetBindOverride(NuShaderObject*)
NuShaderManagerGen::ResetShader()
NuShaderManagerGen::ReloadShaders()
NuShaderManagerGen::RecompileCustomShaders()
NuShaderManagerGen::BeginFrame()
NuShaderManagerGen::ClearStates()
NuShaderManagerGen::FlushUbershaderGroup(unsigned int)
NuShaderManagerGen::UploadDX11Constants(NuShaderScope::T, unsigned int, unsigned int, NuShaderConstBuffer**)
NuShaderManagerGen::SetCustomShaderConstants(NuShaderDataCommon*, NuShaderScope::T, unsigned int, unsigned int, unsigned int)
NuShaderManagerGen::UploadDX9Constants(NuShaderScope::T, unsigned int, float const*, unsigned int, bool)
NuShaderManagerGen::Flush()
NuShaderManagerGen::AllocShaderConstBuffer(unsigned int, void const*, bool, bool)
NuShaderManagerGen::MarkForDeletion(NuShaderConstBuffer*, unsigned int)
NuShaderManagerGen::LockConstBuffer(NuShaderConstBuffer*)
NuShaderManagerGen::UnlockConstBuffer(NuShaderConstBuffer*)
NuShaderManagerGen::PauseForD3DDeviceReset()
NuShaderManagerGen::ResumeAfterD3DDeviceReset()
NuShaderManagerGen::ReadShaderSet(char const*)
NuShaderGroup::NuShaderGroup()
NuShaderGroup::~NuShaderGroup()
NuShaderGroup::RelocateGfxMem(int, char*, unsigned long, char*, char*)
NuHashPipe::~NuHashPipe()
NuHashPipe::~NuHashPipe()
NuHashPipe::GetPipeType() const
NuHashPipe::ReadBytes(char*, unsigned int)
NuHashPipe::WriteBytes(char const*, unsigned int)
NuHashPipe::GetPosition() const
NuHashPipe::IsEOS() const
NuHashPipe::Close()
NuVector<NuShaderConstBuffer>::Reserve(unsigned int, bool)
NuToonFilterGen::NuToonFilterGen()
NuToonFilterGen::initResources()
NuToonFilterGen::destroyResources()
NuToonFilterGen::initTextureResources(int, int)
NuToonFilterGen::destroyTextureResources()
NuToonFilterGen::SetTextures(char const*)
NuToonFilterGen::render(NuRenderContext*, NURENDERTARGETSET)
NuToonFilterGen::~NuToonFilterGen()
NuToonFilterGen::~NuToonFilterGen()
NuToonFilterGen::getFilterEffectMask()
NuLockFreeStack<NuPrimContext2D>::~NuLockFreeStack()
NuLockFreeStack<NuPrimContext3D>::~NuLockFreeStack()
NuPrim::InitPS()
NuPrimContext::NuPrimContext()
NuPrimContext::GetRefCount() const
NuPrimContext::AddRef()
NuPrimContext::SafeAllocate(int)
NuPrimContext2D::NuPrimContext2D()
NuPrimContext2D::PushCoordSystem(NUPRIMSCALEMODE)
NuPrimContext2D::PopCoordSystem()
NuPrimContext::FormatCLR(unsigned int) const
NuPrim::Begin2D(NUPRIMTYPE, unsigned int, NuSmartPtr<NuMtl, true> const&, unsigned int)
NuPrim::Begin3D(NUPRIMTYPE, unsigned int, NuSmartPtr<NuMtl, true> const&, NUMTX const*, unsigned int, bool, int*, float)
NuPrim::DrawFromBufferHandle(NuSmartPtr<NuMtl, true> const&, NUMTX*, NuRenderMesh const*, bool, int*)
NuPrim::CreateBuffer(NUPRIMTYPE, unsigned int, unsigned int)
NuPrim::DestroyBuffer(NuRenderMesh*)
NuPrim::Begin3DBuffer(NuSmartPtr<NuMtl, true> const&, NuRenderMesh*)
NuPrimContext2D::ReleaseRef()
NuPrimContext2D::End()
NuPrimContext3D::ReleaseRef()
NuPrimContext3D::End(bool)
NuPrimContext2D::FixUpRectForQuads()
NuPrimContext2D::FixUpRectForTris()
NuPrimContext::~NuPrimContext()
NuPrimContext2D::~NuPrimContext2D()
NuPrimContext3D::~NuPrimContext3D()
NuDeferredFilter::initResources()
NuDeferredFilter::initTextureResources(int, int)
NuDeferredFilter::AllocateShadowmaps()
NuDeferredFilter::destroyTextureResources()
NuDeferredFilter::~NuDeferredFilter()
NuMainFilter::NuMainFilter()
NuMainFilter::initResources()
NuMainFilter::destroyResources()
NuMainFilter::BeginLuminanceQuery(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, int, NuSmartPtr<NuTexture, true> const&)
NuMainFilter::RetrieveLuminanceQueryResultsPS(float&)
NuMainFilter::~NuMainFilter()
NuMovieGrabInitPS()
NuMovieGrabAttachFrameBuffer(numoviegrabinfo_s*)
NuMovieGrabDetachFrameBuffer(numoviegrabinfo_s*)
NuMovieGrabGetFrame(numoviegrabinfo_s*)
NuMovieGrabGetShadowFrame(numoviegrabinfo_s*, bool)
NuMovieGrabGetDepthFrame(numoviegrabinfo_s*, bool)
NuMtlUpdateShaderPS(NuMtl*, int, NuShaderDesc const&)
NuMtlUpdatePS(NuMtl*)
NuMtlInitExPS()
NuDisplayListMaterialCallbackPS(NuRenderContext*, void const*)
NuDisplayListShadowMaterialCallbackPS(NuRenderContext*, void const*)
NuCameraPacket::~NuCameraPacket()
NuPostFilter::initSharedResources(int, int)
NuPostFilter::renderQuad()
NuPostFilter::renderQuadOrZPass()
NuPostFilter::renderQuadGrid()
NuPostFilter::renderSeededQuadGrid()
NuPostFilter::renderBox(bool)
NuPostFilter::renderSphere(bool)
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)17>, false, true, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)17> >::~NuShaderDataGeneric()
NuRenderContext::NuRenderContext()
NuRenderContext::InitPS()
NuRenderContext::BeginEventTimerPS(NuRenderContextGen::Event::T)
NuRenderContext::EndEventTimerPS(NuRenderContextGen::Event::T)
NuRenderContext::BeginEventPS(NuRenderContextGen::Event::T, char const*)
NuRenderContext::EndEventPS(NuRenderContextGen::Event::T)
NuRenderContext::GetEventTimePS(int, NuRenderContextGen::Event::T, unsigned int*)
NuRenderContext::GetEventCountPS(int, NuRenderContextGen::Event::T)
NuRenderContext::SetViewportPS(float, float, float, float, bool)
NuRenderContext::UpdateHardwareViewport(bool)
NuRenderContext::GetViewportPS(float&, float&, float&, float&) const
NuRenderContext::GetViewportInPixelsPS(unsigned int&, unsigned int&, unsigned int&, unsigned int&) const
NuRenderContext::SetScissorRectPS(float, float, float, float)
NuRenderContext::SetScissorRectInPixelsPS(unsigned int, unsigned int, unsigned int, unsigned int)
NuRenderContext::ClearScissorRectPS()
NuRenderContext::SetTrilinearThresholdPS(NuRenderContextGen::TrilinearThreshold::T)
NuRenderContext::BindTexturePS(NuShaderScope::T, unsigned int, NuHardwareTexture const*, NuTextureSampler const*)
NuRenderContext::ResetColorWritesPS()
NuRenderContext::DisableColorWritesPS(bool, bool)
NuRenderContext::SetStencilModePS(NuRenderContextGen::StencilMode::T, unsigned int)
NuRenderContext::SetDepthModeZEqualPS()
NuRenderContext::SetAlphaBlendModePS(int)
NuRenderContext::SetAlphaTestModePS(int, unsigned int)
NuRenderContext::FixupAlphaTestConstants(int, unsigned int)
NuRenderContext::BindFormatPS(NuVertexFormat const*)
NuRenderContext::SetZBiasPS(unsigned int)
NuRenderContext::FlushRenderStatePS()
NuRenderContext::FlushRenderStateLatePS()
NuRenderContext::WaitForLastFrameEventTimersPS()
NuRenderContext::DrawIndexedPrimitivePS(NuIndexBuffer const*, NUMESHPRIMTYPE, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
NuRenderContext::DrawPrimitivePS(NUMESHPRIMTYPE, unsigned int, unsigned int, void**)
NuRenderContext::BindVertexBufferPS(unsigned int, NuVertexBuffer const*, unsigned int, short, unsigned int, void**)
NuRenderContext::SetRenderStatePS(NuRenderContextGen::RenderState::T)
NuRenderContext::SetAlphaTestModeAlwaysPS()
NuRenderTargets::NuRenderTargets()
NuRenderTargets::InitialiseOutputBuffers()
NuRenderTargets::InitialiseRenderBuffers()
NuRenderTargets::Initialise(NUFRAMEBUFFERMULTISAMPLE)
NuRenderTargets::SwapBuffers_NNX()
NuRenderTargets::Shutdown()
NuRenderTargets::SetRenderTargets(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, int, int)
NuRenderTargets::Bind(NuRenderContext*, NURENDERTARGETSET, bool)
NuRenderTargets::Bind(NuRenderContext*, NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, unsigned int, nucubetextureface_e, bool, bool)
NuRenderTargets::BindNext(NuRenderContext*, NURENDERTARGETSET, bool)
NuRenderTargets::Clear(NuRenderContext*, unsigned int, unsigned int, float)
NuRenderTargets::ClearRegion(NuRenderContext*, unsigned int, unsigned int, float, NuVector3Base const*, unsigned int)
NuRenderTargets::SetDepthOnlyRendering(bool)
NuRenderTargets::GetCurrentRenderDimensions(unsigned int&, unsigned int&)
NuRenderTargets::CopySurface(NuSmartPtr<NuTexture, true> const&, NuSmartPtr<NuTexture, true> const&, bool)
NuRenderTargets::UpdateRefractionTexture(NuRenderContext*, bool)
NuRenderTargets::CopyCurrentColorTarget(NuSmartPtr<NuTexture, true> const&, bool, bool, nucubetextureface_e, int)
NuRenderTargets::EndPipe(NuRenderContext*, NuRenderThreadPipeData const*)
NuRenderTargets::EndFrame()
NuRenderTargets::BlockUntilGPUIdle_NNX()
NuRenderTargets::DecompressDepthBuffer(NuRenderContext*)
NuRenderThread::RenderAllBeginPS()
NuRenderThread::RenderAllEndPS()
NuRenderThread::RenderPostEffectsPS(NuRenderContext*, NuRenderThreadPipeData*, NuPostEffectMask, int, NURENDERTARGETSET, NuPostEffectParameters*)
NuRenderThread::RenderScenePS(NURNDRSCENEPARAMETERS*)
NuRenderThread::BeginPipePS(NuRenderThreadPipeData*)
NuRenderThread::EndPipePS(NuRenderThreadPipeData*)
NuRndrSwapScreen()
NuScreenDumpInit()
NuScreenDumpExit()
NuScreenDumpFrame(char const*, int, unsigned int, unsigned int, NUSCREENDUMPFORMAT)
NuScreenDumpFrameToFile(char const*, unsigned int, unsigned int, NUSCREENDUMPFORMAT)
NuScreenDump()
NuScreenDumpGetLastFilename()
IsAstc(NuHardwareTexture*)
GetMipOffset(NuHardwareTexture*, int, int, int*)
NuTextureManager::NuTexToNativePS(NuTexture*)
NuTextureManager::CreateTexturePS(NuHardwareTexture*, int)
NuHardwareTexture::~NuHardwareTexture()
NuHardwareTexture::DestroyPS()
NuHardwareTexture::~NuHardwareTexture()
NuHardwareTexture::FlushCache(int)
NuTextureManager::LockTexturePS(NuHardwareTexture*, int, int, int*)
NuTextureManager::UnlockTexturePS(NuHardwareTexture*)
NuTextureManager::GetTextureLayoutPS(NuHardwareTexture*, int, int, int&, int&, int&, int&, int&, int&, bool)
NuTexInitExPS()
NuShaderManager::DetermineVideoMemoryByteCountPS(NuShaderObject*, void const*, unsigned int, bool, void const*, unsigned int, bool, bool)
NuShaderManager::CreateShaderProgramPS(NuShaderObject*, NuHash, void const*, unsigned int, bool, void const*, unsigned int, bool, NuVertexDesc const&, bool)
NuShaderManager::InitVertexState(NuShaderObject*, NuVertexDesc const&)
NuShaderManager::DeleteShaderProgramPS(NuShaderObject*)
NuShaderManager::BindPS(NuShaderObject*, int)
NuTextureSampler::CreatePS(NuTextureSamplerGen::Filter::T, NuTextureSamplerGen::Address::T, NuTextureSamplerGen::Address::T, NuTextureSamplerGen::Address::T, float, unsigned int, NuColour, bool, float, float)
NuTextureSampler::DestroyPS(NuTextureSampler*)
NuTextureSamplerGen::~NuTextureSamplerGen()
NuTextureSampler::~NuTextureSampler()
NuStateBlockBase::~NuStateBlockBase()
NuExtendedState::NuExtendedState()
NuExtendedState::~NuExtendedState()
NuExtendedState::AddTextureOverride(NuShaderDesc::TextureSlot::T, int, NuSmartPtr<NuTexture, true> const*)
NuExtendedState::RemoveTextureOverrides(NuShaderDesc::TextureSlot::T)
NuExtendedState::SetUVOverrides(int, NuUVOverrides const*)
NuExtendedState::ClearUVOverrides()
NuExtendedState::SetMaterialOverrides(int, NuSmartPtr<NuMtl, true>*)
NuExtendedState::ClearMaterialOverrides()
NuExtendedState::SetPerPixelFade(NuPerPixelFadePacket*)
NuExtendedState::SetState(unsigned int)
NuExtendedState::ClearState(unsigned int)
NuRenderNode::NuRenderNode()
NuRenderNode::SetVisible(bool)
NuRenderNode::~NuRenderNode()
NuRenderNode::SetParent(NuRenderNode*)
NuRenderNode::~NuRenderNode()
NuRenderNode::SetValidPrevMatrix(bool)
NuRenderNode::InvalidatePrevMatrix()
NuRenderNode::SetPrevMatrix(NuMatrixBase const&)
NuRenderNode::SetMatrix(NuMatrixBase const&)
NuDebugDraw::GetSolid()
NuDebugDraw::GetNormal()
NuDebugDraw::GetUseRainbowColours()
NuDebugDraw::RedirectEdDrawCalls()
NuDebugDraw::ShouldDisableDOF()
NuDebugDraw::ShouldDisableMotionBlur()
NuDebugDraw::ScopedAllowRenderInProcessWithoutError::ScopedAllowRenderInProcessWithoutError()
NuDebugDraw::ScopedAllowRenderInProcessWithoutError::~ScopedAllowRenderInProcessWithoutError()
NuDebugDraw::RenderFrameEndWarnings()
NuLgtSetArcMatEx(int, NuSmartPtr<NuMtl, true> const&, float, float, float, float)
NuLgtSetArcMat(NuSmartPtr<NuMtl, true> const&, float, float, float, float)
NuLgtLaser(int, float, float, float, NUVEC*, NUVEC*, int, float, float)
NuLgtLaserDraw(int)
NuLgtArcLaserDraw(int)
NuLgtArcLaserEx(int, NUVEC*, NUVEC*, NUVEC*, float, float, float, float, int, int)
NuLgtArcLaser(int, NUVEC*, NUVEC*, NUVEC*, float, float, float, float, int)
NuLgtAnyLasersOrFlareToDraw()
NuGPUOcclusionQuery::NuGPUOcclusionQuery()
NuGPUOcclusionQuery::~NuGPUOcclusionQuery()
NuGPUOcclusionQuery::Begin()
NuGPUOcclusionQuery::End()
NuGPUOcclusionQuery::GetZPassPixelCount(bool)
NuRain_SortExclusionBoxes(NuRainParameters const&, NUVEC const&)
NuRain_CalculateExclusionFactor(NuRainParameters const&, NUVEC const&, NUVEC const&)
NuRainInit()
NuRainRender_MainThread(NuRainParameters const&, NuMatrixBase const&)
NuRainRender_RenderThread(NuRainParameters const&)
void NuQuickSortImp<NUMTX>::QuickSortIterative<bool (*)(NUMTX const&, NUMTX const&), NuQuickSortDefaultSwap<NUMTX> >(NUMTX*, int, bool (*)(NUMTX const&, NUMTX const&), NuQuickSortDefaultSwap<NUMTX>)
NuGrassPatch::Render(int, NuShaderDesc::DisplayMode::T)
NuGrassPatch::RenderGrassPatches(NuGrassPatch**, unsigned int, NuShaderDesc::DisplayMode::T)
NuVertexFormat::~NuVertexFormat()
NuVertexFormat::BeginCriticalSection()
NuVertexFormat::EndCriticalSection()
NuVertexFormat::Create(NuVertexDesc const&, void const*, unsigned int)
NuVertexDesc::operator==(NuVertexDesc const&) const
NuVertexFormat::NuVertexFormat(NuVertexDesc const&, void const*, unsigned int)
NuVertexFormat::BeginFrame()
NuVertexFormat::EndFrame()
NuVertexFormat::~NuVertexFormat()
NuGPUOcclusionQueryPS::NuGPUOcclusionQueryPS()
NuGPUOcclusionQueryPS::~NuGPUOcclusionQueryPS()
NuGPUOcclusionQueryPS::BeginPS()
NuGPUOcclusionQueryPS::EndPS()
NuGPUOcclusionQueryPS::CollectResultsPS(bool, unsigned int*)
NuLensFilter::NuLensFilter()
NuLensFilter::initResources()
NuLensFilter::destroyResources()
NuLensFilter::initTextureResources(int, int)
NuLensFilter::destroyTextureResources()
NuLensFilter::CalculateDistortion(float&, float&, float)
NuLensFilter::UpdateShader()
NuLensFilter::render(NuRenderContext*, NURENDERTARGETSET)
NuLensFilter::~NuLensFilter()
NuLensFilter::~NuLensFilter()
NuLensFilter::getFilterEffectMask()
NuLensFlare::NuLensFlare()
NuLensFlare::~NuLensFlare()
NuLensFlare::Initialise()
NuLensFlare::SetTextures(char const*, char const*)
NuLensFlare::RenderLensFlare(NuRenderContext*, int, bool, NuVector3Base const&, NuVector4Base const&, float, float, float, NUCOLOUR3 const&, float, float, bool)
NuMotionAccumSetAABoost(bool)
NuMotionAccumGetAABoost()
NuMotionAccumFilter::NuMotionAccumFilter()
NuMotionAccumFilter::initResources()
NuMotionAccumFilter::destroyResources()
NuMotionAccumFilter::initTextureResources(int, int)
NuMotionAccumFilter::destroyTextureResources()
NuMotionAccumFilter::setMotionBlurParameters(int, float, float, int)
NuMotionAccumFilter::AdvanceMotionAccumVars()
NuMotionAccumFilter::render(NuRenderContext*, NURENDERTARGETSET)
NuMotionAccumFilter::Resolve()
NuMotionAccumFilter::GetTiming(int*)
NuMotionAccumFilter::GetSampleCount()
NuMotionAccumFilter::GetShutterFraction()
NuMotionAccumFilter::GetJitterMatrix() const
NuMotionAccumFilter::~NuMotionAccumFilter()
NuMotionAccumFilter::~NuMotionAccumFilter()
NuMotionAccumFilter::getFilterEffectMask()
NuLightmapDataBlock::NuLightmapDataBlock()
NuLightmapDataBlock::NuLightmapDataBlock(unsigned int)
NuLightmapDataBlock::~NuLightmapDataBlock()
NuLightmapDataBlock::Destroy()
NuVarArray<NuLightmapDataBlock::NuLightmapData>::Destroy()
NuLightmapDataBlock::Clear()
NuLightmapDataBlock::GetNumLightmapDataItems() const
NuLightmapDataBlock::GetLightmapData(unsigned int)
NuLightmapDataBlock::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuLightmapDataBlock::NuLightmapData>(NuVarArray<NuLightmapDataBlock::NuLightmapData>&, char const*)
NuLightmapDataBlock::NuLightmapData::NuLightmapData()
NuLightmapDataBlock::NuLightmapData::~NuLightmapData()
NuLightmapDataBlock::NuLightmapData::Serialize(NuSerialize&)
NuVarArray<NuLightmapDataBlock::NuLightmapData>::Clear()
NuAnimHeader::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<float>(NuVarArray<float>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<ANI3_SCALEMIN>(NuVarArray<ANI3_SCALEMIN>&, char const*)
NuSceneInstance::NuSceneInstance()
NuSceneInstance::Serialize(NuSerialize&)
NuDisplayScene::NuDisplayScene()
NuDisplayScene::ClearSpecialSearchHelpers()
NuDisplayScene::~NuDisplayScene()
NuDisplayScene::GetLODFromInstance(unsigned int, NuVector3Base const&, float, int&, float&) const
NuDisplayScene::GetLODFromInstance(NuSceneInstance const&, float, float, int&, float&) const
NuDisplayScene::GetClipObjectFromInstanceLOD(unsigned int, unsigned int) const
NuDisplayScene::GetClipObjectMatrix(unsigned int) const
NuDisplayScene::GetClipObjectLocalExtents(unsigned int, NuVector3Base&, NuVector3Base&) const
NuDisplayScene::GetClipObjectItemData(unsigned int, unsigned int, NuMatrixBase&, NuRenderMesh const*&, NuMtl const*&) const
NuDisplayScene::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<NuDisplayItem>(NuVector<NuDisplayItem>&, char const*)
void NuSerialize::_SerializeVector<NuClipObject>(NuVector<NuClipObject>&, char const*)
void NuSerialize::_SerializeVector<unsigned short>(NuVector<unsigned short>&, char const*)
void NuSerialize::_SerializeVector<float>(NuVector<float>&, char const*)
void NuSerialize::SerializeVectorFromVarArray<float>(NuVector<float>&, NuSerialize&)
void NuSerialize::_SerializeVector<NuSpecialGroupNode>(NuVector<NuSpecialGroupNode>&, char const*)
void NuSerialize::_SerializeVector<NUVEC4>(NuVector<NUVEC4>&, char const*)
void NuSerialize::_SerializeVector<NuSceneInstance>(NuVector<NuSceneInstance>&, char const*)
void NuSerialize::_SerializeVector<NuDynamicStringT<true> >(NuVector<NuDynamicStringT<true> >&, char const*)
void NuSerialize::_SerializeVector<unsigned char>(NuVector<unsigned char>&, char const*)
void NuSerialize::_SerializeVector<char>(NuVector<char>&, char const*)
void NuSerialize::_SerializeVector<NUINSTFADEBOUNDS>(NuVector<NUINSTFADEBOUNDS>&, char const*)
void NuSerialize::_SerializeVector<int>(NuVector<int>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuTransformMtx>(NuVarArray<NuTransformMtx>&, char const*)
void NuSerialize::_SerializeVector<NuFaceOnDisplayItem>(NuVector<NuFaceOnDisplayItem>&, char const*)
void NuSerialize::SerializeVectorFromVarArray<NuFaceOnDisplayItem>(NuVector<NuFaceOnDisplayItem>&, NuSerialize&)
NuDisplayScene::DetermineInstanceGroup(NuSceneInstance const&)
NuDisplayScene::CalculateBounds(unsigned int)
NuDisplayScene::BuildSpecialSearchHelpers()
NuDisplayScene::FindSpecial(char const*)
NuSpecialObject::~NuSpecialObject()
NuSpecialObject::~NuSpecialObject()
NuVector<NuDisplayItem>::Reserve(unsigned int, bool)
NuVector<NuClipObject>::Reserve(unsigned int, bool)
NuVector<unsigned short>::Reserve(unsigned int, bool)
NuVector<NuSpecialGroupNode>::ReSize(unsigned int, bool)
NuVector<NuSpecialGroupNode>::Reserve(unsigned int, bool)
NuVector<NuDynamicStringT<true> >::ReSize(unsigned int, bool)
NuVector<NuDynamicStringT<true> >::Reserve(unsigned int, bool)
NuVector<unsigned char>::Reserve(unsigned int, bool)
NuVector<NUINSTFADEBOUNDS>::Reserve(unsigned int, bool)
NuVector<NuFaceOnDisplayItem>::ReSize(unsigned int, bool)
NuVector<NuFaceOnDisplayItem>::Reserve(unsigned int, bool)
NuVector<NuSmartPtr<NuSpecialObject, true> >::Reserve(unsigned int, bool)
NuSmartPtr<NuSpecialObject, true>::~NuSmartPtr()
NuSpecialObject::Serialize(NuSerialize&)
NuSpecialObject::SelectLOD(float, NuClipObject const**, float*) const
NuShaderDesc::TextureCfg::Serialize(NuSerialize&)
NuShaderDesc::NuShaderDesc()
NuShaderDesc::Reset()
NuShaderDesc::ApplyLevelOfDetail(NuShaderDesc::LevelOfDetail::T)
NuShaderDesc::CalculateDiffuseNormalisationFactor() const
NuShaderDesc::CalculateSpecularNormalisationFactor(float) const
NuShaderDesc::operator=(NuShaderDesc const&)
NuShaderDesc::CopyFrom(NuShaderDesc const&, bool, bool)
NuShaderDesc::Validate(NuString const&) const
NuShaderDesc::OptimizeForNUAPICompilation()
NuShaderDesc::UpdateTextureUVSet(NuShaderDesc::TextureCfg&, bool*, int&)
NuShaderDesc::UndoTextureUVSetMapping(NuShaderDesc::TextureCfg&)
NuShaderDesc::UpdateNumUVSets()
NuShaderDesc::UpdateMaterialTypeSettings()
NuShaderDesc::Serialize(NuSerialize&)
NuShaderDesc::GetDisplayModeString(NuShaderDesc::DisplayMode::T)
NuShaderDesc::GetDisplayModeStringArray()
NuShaderEnum::NuShaderEnum(char const*, int)
NuShaderEnum::AddValueCustom(char const*, int)
NuShaderEnum::AddLastValue(int, NuShaderPreProcessor*)
NuShaderEnum::DefineEnum(NuShaderPreProcessor*)
NuShaderEnum::DefineVariableCustom(char const*, int, NuShaderPreProcessor*)
NuShaderDesc::GeneratePreProcessorDefines(NuShaderPreProcessor*) const
NuShaderDesc::GenerateVertexDesc(char const*, NuVertexDesc*) const
NuShaderMtlDesc::NuShaderMtlDesc()
NuShaderMtlDesc::Reset()
NuShaderMtlDesc::Validate(NuString const&) const
NuShaderMtlDesc::UpdateReflectionSettings()
NuShaderMtlDesc::Optimize(bool)
NuShaderMtlDesc::OptimiseBRDFSettings(bool, bool)
NuShaderMtlDesc::GetTID(NUSHADERTEXINDICES)
NuShaderMtlDesc::GetUVSetIndex(NUSHADERTEXINDICES)
NuShaderMtlDesc::DisableTexturesAndLayers(bool)
NuShaderMtlDesc::DisableLayerTextures(int)
NuShaderMtlDesc::DisableNonLayeredTextures()
NuShaderMtlDesc::CopyLayer(int, NuShaderMtlDesc const&, int)
NuShaderMtlDesc::ApplyLevelOfDetail(NuShaderDesc::LevelOfDetail::T)
NuShaderMtlDesc::ApplyLowResPC()
NuShaderMtlDesc::ForceMaterialTypeParams()
NuShaderMtlDesc::operator=(NuShaderMtlDesc const&)
NuShaderMtlDesc::CopyFrom(NuShaderMtlDesc const&, bool)
NuShaderMtlDesc::operator==(NuShaderMtlDesc const&)
NuShaderMtlDesc::Serialize(NuSerialize&)
NuShaderParams::NuShaderParams()
NuShaderParams::Reset()
NuShaderParams::ApplyLevelOfDetail(NuShaderDesc::LevelOfDetail::T)
NuQuantise(float&, float)
NuQuantise(NuColour&, float)
NuShaderParams::Quantise(float)
NuShaderParams::operator=(NuShaderParams const&)
NuShaderParams::CopyFrom(NuShaderParams const&, bool)
_SerializeTID(NuSerialize&, NuSmartPtr<NuTexture, true>&)
NuShaderParams::Serialize(NuSerialize&)
NuShaderParams::UpdateMaterialTypeSettings(NuShaderDesc::ShaderType::T)
NuShaderParams::Update()
NuShaderParams::CalculateSubstanceParams(float, float&, float&, float&)
NuShaderParams::CalculateGlowFactor() const
NuShaderParams::CalculateWorldDepthBias() const
NuMtlSceneBlock::NuMtlSceneBlock()
NuMtlSceneBlock::~NuMtlSceneBlock()
NuMtlSceneBlock::Init(unsigned int)
NuMtlSceneBlock::GetNextMtl()
NuMtlSceneBlock::GetReferencedMaterialCount()
NuMtlSceneBlock::GetNextReferencedMaterial()
NuMtlSceneBlock::GetReferencedMaterial(unsigned int)
NuMtlSceneBlock::ReplaceMaterial(unsigned int, NuSmartPtr<NuMtl, true> const&)
NuMtlSceneBlock::SetExternallyReferencedScene(NuSmartPtr<NuScene, true> const&)
NuMtlSceneBlock::GetExportedSceneStream()
NuMtlSceneBlock::SetExportedSceneStream(char*)
NuMtlSceneBlock::SetSerializingNuMtlSceneBlock(NuMtlSceneBlock*)
NuMtlSceneBlock::GetSerializingNuMtlSceneBlock()
NuMtlSceneBlock::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<NuReferencedMaterial>(NuVector<NuReferencedMaterial>&, char const*)
NuMtlSceneBlock::SetExternalShaderCache(NuHash const&, int)
NuVector<NuReferencedMaterial>::Reserve(unsigned int, bool)
NuVector<NuReferencedMaterial>::Destruct(unsigned int)
NuVector<NuSmartPtr<NuMtl, true> >::Reserve(unsigned int, bool)
NuReferencedMaterial::operator=(NuReferencedMaterial const&)
NuMtl::GetResourceType() const
NuMtl::PreSerializeFixup(bool)
NuMtl::PostSerializeFixup(NuSmartPtr<NuClassAbstractInstance, false>, bool)
NuMtl::NuMtl()
NuMtl::Reset(bool)
NuMtl::NuMtl(NuMtl const&)
NuMtl::operator=(NuMtl const&)
NuMtl::~NuMtl()
NuMtl::~NuMtl()
NuMtl::ReleaseRef()
NuMtl::ClearShaders()
NuMtlAttrib::Reset()
NuMtl::CopyFrom(NuMtl const*, bool)
NuMtl::operator==(NuMtl const&)
NuMtlCalculateSubstanceFromOldMtl(NuShaderMtlDesc&, int)
NuMtl::Serialize(NuSerialize&)
NuMtlAttrib::Serialize(NuSerialize&)
NuMtl::Update()
NuMtl::DetermineDefaultRenderStage() const
NuMtl::UpdateForGPUVendor()
NuMtl::Validate() const
NuMtl::Optimize()
NuMtl::ForceMaterialTypeParams()
NuMtl::GenerateAdditionalShaderDescs(NuMtl*, NuShaderDesc const&, NuShaderDesc*, NuBitVector<20u, unsigned int>&, NuBitVector<20u, unsigned int>&)
NuMtl::GetName() const
NuMtl::GetOwnerDisciplineName() const
NuMtl::GetSceneName() const
NuMtlAttrib::NuMtlAttrib()
NuMtlAttrib::NuMtlAttrib(int)
NuTexAnimData::NuTexAnimData()
NuTexAnimData::Serialize(NuSerialize&)
NuGetTwoColourFogSupported()
NuMtl::GetVariantClass() const
NuMtl::GetVariant(NUMTLVARIANT)
NuShaderParams::~NuShaderParams()
NuSpline::NuSpline()
NuSpline::~NuSpline()
NuSpline::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NUVEC>(NuVarArray<NUVEC>&, char const*)
NuSpline::Clone(NuSpline*)
NuSpline::GetLength(int) const
NuVarArray<NUVEC>::AdjustSize(unsigned int)
NuTexHdrSceneBlock::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<NuTexGenHdr>(NuVector<NuTexGenHdr>&, char const*)
NuTexHdrSceneBlock::DeleteTextureHeaders()
NuTexHdrSceneBlock::GetTextureHeader(unsigned int)
NuTexHdrSceneBlock::GetTextureHeader(unsigned int) const
NuVector<NuTexGenHdr>::Reserve(unsigned int, bool)
NuSmartPtr<NuTextureSet, true>::~NuSmartPtr()
NuClass_NuTextureSet::~NuClass_NuTextureSet()
NuTextureSet::NuTextureSet()
NuTextureSet::~NuTextureSet()
NuTextureSet::~NuTextureSet()
NuTextureSet::GetResourceType() const
NuTextureSet::Serialize(NuSerialize&)
NuTextureSet::PreSerializeFixup(bool)
NuTextureSet::PostSerializeFixup(NuSmartPtr<NuClassAbstractInstance, false>, bool)
NuTextureSet::SetDateStamp(NuAlignedBuffer<16>&)
NuClass_NuTextureSet::~NuClass_NuTextureSet()
NuClass_NuTextureSet::CreateObject() const
NuClass_NuTextureSet::CreateObjectArray(unsigned int) const
NuClass_NuTextureSet::PlacementNew(void*) const
NuClass_NuTextureSet::SerializeObjectIn(NuArchive&, void*) const
NuClass_NuTextureSet::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_NuTextureSet::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_NuTextureSet::~NuClass_NuTextureSet()
non-virtual thunk to NuClass_NuTextureSet::~NuClass_NuTextureSet()
NuSmartPtr<NuScene, true>::~NuSmartPtr()
NuClass_NuScene::~NuClass_NuScene()
NuScene::NuScene()
NuScene::Reset()
NuScene::GetResourceType() const
NuScene::~NuScene()
NuPortalInfoOld::~NuPortalInfoOld()
NuIrradiance::~NuIrradiance()
NuScene::~NuScene()
NuScene::GetPortalInstances(int)
NuScene::GetRoomPortals(int)
NuScene::SetPortalInstances(NuPortalInstances*)
NuScene::SetRoomPortals(NuRoomPortals*)
NuScene::HasLSVData() const
NuScene::IsLSVEnabled() const
NuScene::SetLSVEnabled(bool)
NuScene::SetPortalData(NuRoomPortals*)
NuScene::Serialize(NuSerialize&)
NuConversionInfo::Serialize(NuSerialize&)
void NuSerialize::SerializeVectorFromVarArray<NuSpline>(NuVector<NuSpline>&, NuSerialize&)
void NuSerialize::_SerializeVector<NuSpline>(NuVector<NuSpline>&, char const*)
void NuSerialize::_SerializeVector<NuVFXLocator>(NuVector<NuVFXLocator>&, char const*)
void NuSerialize::SerializeVectorFromVarArray<short>(NuVector<short>&, NuSerialize&)
void NuSerialize::_SerializeVector<short>(NuVector<short>&, char const*)
void NuSerialize::SerializeVectorFromVarArray<NUVEC4>(NuVector<NUVEC4>&, NuSerialize&)
void NuSerialize::SerializeLinkToObject<NuMtlSceneBlock>(NuMtlSceneBlock*&)
void NuSerialize::SerializeLinkToObject<NuLightmapDataBlock>(NuLightmapDataBlock*&)
void NuSerialize::SerializeLinkToObject<NuCpuSkin>(NuCpuSkin*&)
void NuSerialize::SerializeLinkToObject<NuLightBlock>(NuLightBlock*&)
void NuSerialize::SerializeVectorFromVarArray<NuTexAnim>(NuVector<NuTexAnim>&, NuSerialize&)
void NuSerialize::SerializeVectorFromVarArray<unsigned short>(NuVector<unsigned short>&, NuSerialize&)
void NuSerialize::_SerializeVector<NuTexAnim>(NuVector<NuTexAnim>&, char const*)
void NuSerialize::SerializeLinkToObject<NuAnimSceneBlock>(NuAnimSceneBlock*&)
void NuSerialize::SerializeLinkToObject<NuPortalInstances>(NuPortalInstances*&)
void NuSerialize::SerializeVectorFromVarArray<NuCharacterData>(NuVector<NuCharacterData>&, NuSerialize&)
void NuSerialize::_SerializeVector<NuCharacterData>(NuVector<NuCharacterData>&, char const*)
NuSceneMisc::Serialize(NuSerialize&)
NuMetaData::Serialize(NuSerialize&)
void NuSerialize::SerializeLinkToObject<NuInstSurfGeomData>(NuInstSurfGeomData*&)
NuScene::SetNumGfxPadBytes(unsigned int)
NuScene::SetArtificialPadAmount(int)
NuScene::GetNumGfxPadBytes()
NuScene::GetGfxPadHandle()
NuScene::SetGfxPadHandle(int)
NuScene::PreSerializeFixup(bool)
NuScene::PostSerializeFixup(NuSmartPtr<NuClassAbstractInstance, false>, bool)
NuVFXLocator::Serialize(NuSerialize&)
NUINSTFADEBOUNDS::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuAlignedBuffer<16> >(NuVarArray<NuAlignedBuffer<16> >&, char const*)
NuMetaData::GetTextureName(int) const
NuMetaData::AddTextureName(char const*)
NuVarArray<NuAlignedBuffer<16> >::operator[](unsigned int)
NuMetaData::Init(int)
NuMetaData::NuMetaData()
NuSceneMisc::NuSceneMisc()
NuScene::GetBlendShapeAnimNumFrames(int, int) const
NuScene::FindSpecial(char const*)
NuScene::GetNumLods() const
NuScene::CanRemapLodAnim() const
NuScene::UseSingleAnim() const
NuScene::GetLayerIndex(char*) const
NuScene::POILocalMtxFromIX(unsigned char, NUMTX*, NUMTX*) const
NuScene::OverrideLodDistance(int, float)
NuScene::GetFromLod(int, int*) const
NuScene::GetLodFromDistance(float, int*) const
NuScene::GetBlendShapeNumLocators(int) const
NuScene::GetBlendShapeNumAnims(unsigned int) const
NuScene::GetBlendShapeNumAnims(int, char*) const
NuScene::GetBlendShapeVersion() const
NuScene::GetNumBlendShapeSpecials() const
NuScene::GetBlendShapeLocatorName(int, int) const
NuScene::JointMtx(unsigned char, NUMTX*, NUMTX*, NUMTX*) const
NuScene::POIMtx(unsigned char, NUMTX*, NUMTX*, NUMTX*) const
NuScene::GetBlendShapeSpecialIndex(nuhspecial_s*) const
NuScene::GetBlendShapeBlendData(int, int, float, NURNDRBLENDDATA*, int, NuMatrixBase*, int*, int*)
NuVarArray<NuBlendShapeAnimList>::operator[](unsigned int)
NuScene::GetBlendShapeLocatorIndexFromName(int, char const*) const
NuScene::BlendShapeAnimsGetSpecial(int, nuhspecial_s*) const
NuScene::GetCpuSkin()
NuScene::CpuSkinExists() const
NuScene::GetLayersRigidBones(int, char&, char*) const
NuScene::GetMtlCount() const
NuScene::GetMtl(unsigned int)
NuScene::GetStateAnim(unsigned int) const
NuScene::GetMaterialAnim()
NuScene::GetPOI(unsigned char) const
NuScene::GetPOIName(unsigned char) const
NuScene::FindSpline(char const*)
NuScene::FindAllSplineSub(char const*, NuSpline**, int)
NuScene::FindAllSplineBeg(char const*, NuSpline**, int)
NuScene::FindNextSplineBeg(char const*, NuSpline*)
ConvertAnimHeader(NuAnimHeader*, ani3_animheader_s*, ani3_PointerBlock*)
ConvertAnimHeader(NuAnimHeader*)
NuHGobjGetFromLod(NuScene*, int, int*)
NuHGobjNumLods(NuScene*)
NuHGobjOverrideLodDistance(NuScene*, int, float)
NuHGobjUseSingleAnim(NuSmartPtr<NuScene, true>)
NuHGobjCanRemapLodAnim(NuSmartPtr<NuScene, true>)
NuClass_NuScene::~NuClass_NuScene()
NuClass_NuScene::CreateObject() const
NuClass_NuScene::CreateObjectArray(unsigned int) const
NuClass_NuScene::PlacementNew(void*) const
NuClass_NuScene::SerializeObjectIn(NuArchive&, void*) const
NuClass_NuScene::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_NuScene::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_NuScene::~NuClass_NuScene()
non-virtual thunk to NuClass_NuScene::~NuClass_NuScene()
NuVarArray<NuIrradiancePlane>::~NuVarArray()
NuVarArray<NuIrradianceBox>::~NuVarArray()
NuVarArray<NuAlignedBuffer<16> >::~NuVarArray()
NuVarArray<NuBlendShapeAnim>::~NuVarArray()
NuVector<NuSpline>::Reserve(unsigned int, bool)
NuVector<NuTexAnim>::Reserve(unsigned int, bool)
NuVector<NuCharacterData>::Reserve(unsigned int, bool)
NuCharacterData::NuCharacterData(NuCharacterData const&)
NuVarArray<int>::operator=(NuVarArray<int> const&)
NuShadowData::operator=(NuShadowData const&)
NuVarArray<NuEllipsoid>::operator=(NuVarArray<NuEllipsoid> const&)
NuVarArray<NuCylinder>::operator=(NuVarArray<NuCylinder> const&)
NuVarArray<NUVEC4>::operator=(NuVarArray<NUVEC4> const&)
NuVector<NuVFXLocator>::Reserve(unsigned int, bool)
NuVector<NuVFXLocator>::Destruct(unsigned int)
NuVarArray<NuBlendShapeAnimKey>::AdjustSize(unsigned int)
NuVarArray<NuMatrixBase>::AdjustSize(unsigned int)
NuVarArray<ANI3_SCALEMIN>::AdjustSize(unsigned int)
NuFont::NuFont()
NuFont::~NuFont()
NuFont::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<VuChar>(NuVector<VuChar>&, char const*)
void NuSerialize::_SerializeVector<VuCharIdx>(NuVector<VuCharIdx>&, char const*)
void NuSerialize::SerializeVectorFromVarArray<VuChar>(NuVector<VuChar>&, NuSerialize&)
void NuSerialize::SerializeVectorFromVarArray<VuCharIdx>(NuVector<VuCharIdx>&, NuSerialize&)
void NuSerialize::_SerializeVector<KernPair>(NuVector<KernPair>&, char const*)
void NuSerialize::SerializeVectorFromVarArray<KernPair>(NuVector<KernPair>&, NuSerialize&)
VuChar::VuChar()
VuChar::Serialize(NuSerialize&)
VuCharIdx::VuCharIdx()
VuCharIdx::Serialize(NuSerialize&)
KernPair::Serialize(NuSerialize&)
NuVector<VuChar>::Reserve(unsigned int, bool)
NuVector<VuCharIdx>::Reserve(unsigned int, bool)
NuVector<KernPair>::Reserve(unsigned int, bool)
NuSHQuad3Compressed::ScaleBias::ScaleBias()
NuSHQuad3Compressed::ScaleBias::Calculate(NuSHQuad3 const&, NuSHQuad3 const&)
NuSHQuad3Compressed::ScaleBias::Reset()
NuSHQuad3Compressed::ScaleBias::Serialize(NuSerialize&)
NuSHQuad3Compressed::Uncompress(NuSHQuad3Compressed const&, NuSHQuad3Compressed::ScaleBias const&, NuSHQuad3&)
NuSHQuad3Compressed::Compress(NuSHQuad3 const&, NuSHQuad3Compressed::ScaleBias const&, NuSHQuad3Compressed&)
NuSHQuad3::SetInvalid()
NuSHQuad3::SetFromDirection(NuVector3Base const&, float, float, float)
NuSHQuad3::EvaluateForDirection(NuVector3Base const&) const
NuSHQuad3::EvaluateWithClamping(NuVector3Base const&) const
NuSHQuad3::EvaluateLinearTermsWithClamping(NuVector3Base const&) const
NuSHQuad3::GetMaximumDirection() const
NuSHQuad3::SetFromAmbientColour(float, float, float)
NuSHQuad3::AddAmbientColour(float, float, float)
NuSHQuad3::AddCubeMapFace(int, unsigned int, unsigned int, NuColour*, bool)
NuSHQuad3::ApplyCosineSmoothing()
NuSHQuad3::AsNuSHQuad3Effecient(NuSHQuad3Efficient&) const
NuSHQuad3::ConvolveByClampedCosine()
NuSHQuad3::RemoveHighOrderData()
NuSHQuad3::AddLight(NuVector3Base const&, NUCOLOUR3 const&, NuVector3Base const&)
NuSHQuad3::CalculatePerceptualDifference(NuSHQuad3 const&, float) const
NuSHQuad3::MagnitudeSqrd() const
NuSHQuad3Efficient::Serialize(NuSerialize&)
NuSHQuad3::Product(NuSHQuad3 const&, NuSHQuad3 const&, NuSHQuad3&)
ScaleOutputVec3(NuSerialize&, NuVector3Base&)
ScaleOutputNuMtx(NuSerialize&, NuMatrixBase&)
ScaleOutputFloatSquared(NuSerialize&, float&, bool)
NuLSVNode::InterpolateSampleAtNode(NuVector3Base const&, NuStripedVarArray<NuLSVSampleCompact> const&, NuLSVSampleCompact&) const
NuLSVNode::InterpolateSampleAtNode(NuVector3Base const&, NuStripedVarArray<NuLSVSample> const&, NuLSVSample&) const
NuLSVNode::Serialize(NuSerialize&)
NuLSVNode::operator<(NuLSVNode const&) const
NuLSVNode::operator==(NuLSVNode const&) const
NuLSVOctree::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuLight>(NuVarArray<NuLight>&, char const*)
NuLSVOctree::PreCalculateFlags()
NuLSVOctree::FindNodeAtPoint(NuVector3Base const&, NuVector3Base&, int&) const
NuLSVOctree::FindClosestCompactSampleAtPoint(NuVector3Base const&) const
NuLSVOctree::FindAverageSampleAtPoint(NuVector3Base const&, NuLSVSampleCompact&) const
NuLSVOctree::FindAverageSampleAtPoint(NuVector3Base const&, NuLSVSample&) const
NuLSVOctree::CalculateTreeDepth(NuLSVNode const&) const
NuLSVOctree::CalculateMaxDepth() const
NuLSVOctree::CalculateAverageSampleColour(NuLSVSampleCompact const&, NuVector3Base const&, NuVector3Base&) const
NuLSVOctree::CalculateAverageSampleColour(NuLSVSample const&, NuVector3Base const&, NuVector3Base&) const
GetMinMaxBound(NuVector3Base const&, NuVector3Base const&, NUVEC&, NUVEC&)
NuLSVOctreeBlock::NuLSVOctreeBlock()
NuLSVOctreeBlock::~NuLSVOctreeBlock()
NuLSVOctreeBlock::Clear()
NuLSVOctreeBlock::AddOctreeTiny(NuLSVOctree const&)
NuLSVOctreeBlock::GetNumberOfTrees() const
NuLSVOctreeBlock::GetOctreeTiny(unsigned int) const
NuLSVOctreeBlock::GetOctreeTiny(unsigned int)
NuLSVOctreeBlock::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuLSVOctree>(NuVarArray<NuLSVOctree>&, char const*)
NuStripedVarArray<NuLSVSample>::Serialize(NuSerialize&)
NuStripedVarArrayDataCore::AllocateStripes(void**&, unsigned int, unsigned int, unsigned int)
NuLSVSample::Serialize(NuSerialize&)
NuSHQuad3::Serialize(NuSerialize&)
NuStripedVarArray<NuLSVNode>::Serialize(NuSerialize&)
NuStripedVarArray<NuLSVSampleCompact>::Serialize(NuSerialize&)
NuLSVSampleCompact::Serialize(NuSerialize&)
NuLSVOctree::~NuLSVOctree()
NuStripedVarArray<NuLSVNode>::~NuStripedVarArray()
NuStripedVarArray<NuLSVSampleCompact>::~NuStripedVarArray()
NuStripedVarArray<NuLSVSample>::~NuStripedVarArray()
NuVarArray<NuLSVOctree>::ReSize(unsigned int, unsigned int)
NuLSVOctree::NuLSVOctree(NuLSVOctree const&)
CSListHeader<NuLightBlock>::~CSListHeader()
NuLightDescCommon::NuLightDescCommon()
NuLightDescCommon::Reset()
NuLightDescCommon::~NuLightDescCommon()
NuLightDescCommon::~NuLightDescCommon()
NuLightDescCommon::SetTID(NuSmartPtr<NuTexture, true> const&)
NuLightDescCommon::SetLightDescName(NuString const&)
NuLightDescCommon::GetLightDescName() const
NuLightDescCommon::NuLightDescCommon(NuLightDescCommon const&)
NuLightDescCommon::CopyParamsFrom(NuLightDescCommon const&, bool, bool)
NuLightDescCommon::operator=(NuLightDescCommon const&)
NuLightDescCommon::GetProjectedTexturePath() const
NuLightDescCommon::SetProjectedTexturePath(char const*)
NuLightDescCommon::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<char>(NuVarArray<char>&, char const*)
NuDynamicStringT<true>::operator=(char const*)
NuLightDescCommon::LinearToSRGB(NuScalarBase const&) const
NuLightDescCommon::LinearToSRGB(NuVector3Base const&) const
NuLightDescCommon::SRGBToLinear(NuScalarBase const&) const
NuLightDescCommon::SRGBToLinear(NuVector3Base const&) const
NuLightDescCommon::ConvertColour(NuScalarBase const&, NuLightDescCommon::ColourSpace::T, NuLightDescCommon::ColourSpace::T) const
NuLightDescCommon::ConvertColour(NuVector3Base const&, NuLightDescCommon::ColourSpace::T, NuLightDescCommon::ColourSpace::T) const
NuLightDescCommon::GetLightResult(NuVector3Base const&, NuVector3Base const&, NuLightDescCommon::ColourSpace::T, NuVector3Base&, NuMatrixBase const&) const
NuLightDescCommon::GetLightResult(NuVector3Base const&, NuLightDescCommon::ColourSpace::T, NuScalarBase&, NuVector3Base&, NuVector3Base&, NuMatrixBase const&) const
NuLightDescCommon::GetSpotConeFalloff(NuVector3Base const&, NuLightDescCommon::ColourSpace::T, NuMatrixBase const&) const
NuLightDescCommon::GetVectorToLight(NuVector3Base const&, NuVector3Base&, NuMatrixBase const&) const
NuLightDescCommon::GetFalloffAtRange(NuScalarBase const&, NuLightDescCommon::ColourSpace::T) const
NuLightDescCommon::GenerateShadowSamples(int, NuVector3Base*, NuMatrixBase const&) const
NuLightDescCommon::AsSHFromPosition(NuVector3Base const&, NuSHQuad3&, NuMatrixBase const&) const
NuLightDescNextGen::GetShadowFalloffStart() const
NuLightDescNextGen::GetShadowFalloffRange() const
NuLightDescNextGen::GetShadowFalloffEnd() const
NuLightDescCommon::PreSerializeFixup(unsigned short, bool)
NuLightDescCommon::PostSerializeFixup(NuClassAbstractInstance const*, bool)
NuLight::NuLight()
NuLightDescNextGen::NuLightDescNextGen()
NuLight::Reset()
NuLight::NuLight(NuLight const&)
NuLight::CopyParamsFrom(NuLight const&, bool, bool)
NuLightDescNextGen::CopyParamsFrom(NuLightDescNextGen const&, bool, bool)
NuLightDescNextGen::Reset()
NuLight::Serialize(NuSerialize&)
NuLightDescNextGen::Serialize(NuSerialize&)
NuLightBlock::NuLightBlock()
NuLightBlock::NuLightBlock(unsigned int)
NuLightBlock::Destroy()
NuLightBlock::~NuLightBlock()
NuLightBlock::Clear()
NuLightBlock::AddLight(NuLight const&)
NuLightBlock::SetLightCount(unsigned int)
NuLightBlock::Serialize(NuSerialize&)
NuVarArray<NuLight>::LoadAndSkip(NuSerialize&)
NuLightDescNextGen::~NuLightDescNextGen()
NuLightDescNextGen::~NuLightDescNextGen()
NuLightDescNextGen::NuLightDescNextGen(NuLightDescNextGen const&)
NuLightDescNextGen::operator=(NuLightDescNextGen const&)
NuLightDescNextGen::SetUseCutsceneSettings(bool)
void NuSerialize::_SerializeLegacyNuLegacyPool<VuMtx, 6>(NuLegacyPool<VuMtx, 6>&, char const*)
NuLightDescNextGen::ValidateParameters()
NuLightDescNextGen::GetSoftShadowsFixedSpread() const
NuLightDescNextGen::GetSoftShadowsSpreadRatioSupported()
NuLightDescNextGen::GetSoftShadowsSpreadRatio() const
NuLight::~NuLight()
NuLight::~NuLight()
NuLight::GetName() const
non-virtual thunk to NuLight::~NuLight()
non-virtual thunk to NuLight::~NuLight()
non-virtual thunk to NuLight::GetName() const
NuDDSGetTextureDescription(unsigned char*, NUTEXFORMAT&, int&, int&, int&, int&, bool&)
NuDDSSetTextureDescription(unsigned char*, NUTEXFORMAT, int, int, int, int, nutexturetype_e)
NuDDSGetMipLevel(int, int, int, NUTEXFORMAT, int, bool, int, int, int&, int&, int&)
NuDDSGetSize(unsigned char*)
NuCpuSkin::NuCpuSkin()
NuCpuSkin::~NuCpuSkin()
NuCpuSkin::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuCpuSkinLod>(NuVarArray<NuCpuSkinLod>&, char const*)
NuCpuSkin::GetNumTris(int, int) const
NuCpuSkin::GetNumVerts(int, int) const
NuCpuSkin::GetNumBones(int, int) const
NuCpuSkin::GetTriPtr(int, int, int) const
NuCpuSkin::GetColourArrayPtr(int, int) const
NuCpuSkin::CalcVerts(VuVec*, int, int, NUMTX const*, NUMTX*, NUMTX const*) const
NuVarArray<NuCpuSkinLod>::Clear()
NuCpuSkinLayer::~NuCpuSkinLayer()
void NuSerialize::_SerializeLegacyNuVarArray<NuCpuSkinLayer>(NuVarArray<NuCpuSkinLayer>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuCpuSkinBones>(NuVarArray<NuCpuSkinBones>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NUUSVEC>(NuVarArray<NUUSVEC>&, char const*)
NuIrradiance::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuIrradianceBox>(NuVarArray<NuIrradianceBox>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuIrradiancePlane>(NuVarArray<NuIrradiancePlane>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuIrradiancePlaneLayers>(NuVarArray<NuIrradiancePlaneLayers>&, char const*)
NuAnimSceneBlock::NuAnimSceneBlock()
NuAnimSceneBlock::NuAnimSceneBlock(int)
NuAnimSceneBlock::~NuAnimSceneBlock()
NuAnimSceneBlock::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuInstAnim>(NuVarArray<NuInstAnim>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuStateAnim>(NuVarArray<NuStateAnim>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuAnimHeader>(NuVarArray<NuAnimHeader>&, char const*)
NuAnimHeader::~NuAnimHeader()
NuTexAnim::Serialize(NuSerialize&)
NuTexAnim3Header::~NuTexAnim3Header()
NuTexAnim3Header::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuCurveAnimBlock3>(NuVarArray<NuCurveAnimBlock3>&, char const*)
NuTexAnim3SceneBlock::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuTexAnim3Header>(NuVarArray<NuTexAnim3Header>&, char const*)
NuDisplayItem::Serialize(NuSerialize&)
NuClipObject::NuClipObject()
NuClipObject::~NuClipObject()
NuClipObject::Serialize(NuSerialize&)
NuSpecialGroupNode::Serialize(NuSerialize&)
NuFaceOnDisplayItem::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuFaceOnInstance>(NuVarArray<NuFaceOnInstance>&, char const*)
NuTransformMtx::Serialize(NuSerialize&)
NuInstSurfGeomData::NuInstSurfGeomData()
NuInstSurfGeomData::Reset()
NuInstSurfGeomData::~NuInstSurfGeomData()
NuInstSurfGeomData::Destroy()
NuInstSurfGeomData::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuInstSurfGeomPatch>(NuVarArray<NuInstSurfGeomPatch>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuInstSurfGeomMesh>(NuVarArray<NuInstSurfGeomMesh>&, char const*)
NuInstSurfGeomData::ExpandAndSort(bool)
NuVarArray<NuInstSurfGeomMesh>::operator[](unsigned int)
NuVarArray<NuSurfGeomBlendshape>::operator[](unsigned int)
NuVarArray<NuSurfGeomBlendshape>::PushBack(NuSurfGeomBlendshape const&)
NuVarArray<NuSurfGeomVert>::operator=(NuVarArray<NuSurfGeomVert> const&)
NuVarArray<NuInstSurfGeomPatch>::operator[](unsigned int)
NuInstSurfGeomPatch::NuInstSurfGeomPatch(NuInstSurfGeomPatch const&)
NuVarArray<NuSurfGeomInstance>::operator=(NuVarArray<NuSurfGeomInstance> const&)
NuVarArray<NuSurfGeomTriInst>::operator=(NuVarArray<NuSurfGeomTriInst> const&)
NuVarArray<NuSurfGeomTri>::AdjustSize(unsigned int)
NuVarArray<NUVEC4>::AdjustSize(unsigned int)
NuVarArray<NuSurfGeomVert>::AdjustSize(unsigned int)
NuPortalInfoOld::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuPortal>(NuVarArray<NuPortal>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuRoomOld>(NuVarArray<NuRoomOld>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuVector4Base>(NuVarArray<NuVector4Base>&, char const*)
NuPortalInstances::NuPortalInstances()
NuPortalInstances::~NuPortalInstances()
NuVarArray<NuRoomInst>::~NuVarArray()
NuPortalInstances::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuRoomInst>(NuVarArray<NuRoomInst>&, char const*)
NuBlendShapeCharList::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuBlendShapeAnimList>(NuVarArray<NuBlendShapeAnimList>&, char const*)
NuOccluderList::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuOccluder>(NuVarArray<NuOccluder>&, char const*)
NuShadowData::NuShadowData()
NuShadowData::~NuShadowData()
NuShadowData::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuEllipsoid>(NuVarArray<NuEllipsoid>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuCylinder>(NuVarArray<NuCylinder>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuShadowMesh>(NuVarArray<NuShadowMesh>&, char const*)
NuCharacterData::NuCharacterData()
NuCharacterData::~NuCharacterData()
NuCharacterData::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuJointData>(NuVarArray<NuJointData>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NUMTX>(NuVarArray<NUMTX>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuPointOfInterest>(NuVarArray<NuPointOfInterest>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuLayer_SpecialFlags>(NuVarArray<NuLayer_SpecialFlags>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuLayerData>(NuVarArray<NuLayerData>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuShadowData>(NuVarArray<NuShadowData>&, char const*)
NuTexGenHdr::NuTexGenHdr()
NuTexGenHdr::~NuTexGenHdr()
NuTexGenHdr::Serialize(NuSerialize&)
NuArray<unsigned char, 16>::Serialize(NuSerialize&)
NuIrradianceBox::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuIrradianceBoxSample>(NuVarArray<NuIrradianceBoxSample>&, char const*)
NuVarArray<NuIrradianceBoxSample>::AdjustSize(unsigned int)
NuIrradiancePlane::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuIrradiancePlaneSample>(NuVarArray<NuIrradiancePlaneSample>&, char const*)
NuIrradiancePlaneLayers::Serialize(NuSerialize&)
NuInstAnim::Serialize(NuSerialize&)
NuCurveAnimBlock3::Serialize(NuSerialize&)
NuFaceOnInstance::Serialize(NuSerialize&)
NuSurfGeomBlendshape::NuSurfGeomBlendshape()
NuSurfGeomBlendshape::~NuSurfGeomBlendshape()
NuSurfGeomBlendshape::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NUVEC4>(NuVarArray<NUVEC4>&, char const*)
NuInstSurfGeomPatch::NuInstSurfGeomPatch()
NuInstSurfGeomPatch::~NuInstSurfGeomPatch()
NuInstSurfGeomPatch::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuSurfGeomInstance>(NuVarArray<NuSurfGeomInstance>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuSurfGeomTriInst>(NuVarArray<NuSurfGeomTriInst>&, char const*)
NuVarArray<NuSurfGeomInstance>::AdjustSize(unsigned int)
NuVarArray<NuSurfGeomTriInst>::AdjustSize(unsigned int)
NuInstSurfGeomMesh::NuInstSurfGeomMesh()
NuInstSurfGeomMesh::~NuInstSurfGeomMesh()
NuInstSurfGeomMesh::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuSurfGeomTri>(NuVarArray<NuSurfGeomTri>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuSurfGeomVert>(NuVarArray<NuSurfGeomVert>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuSurfGeomBlendshape>(NuVarArray<NuSurfGeomBlendshape>&, char const*)
NuRoomOld::Serialize(NuSerialize&)
NuPortal::Serialize(NuSerialize&)
NuRoomInst::Serialize(NuSerialize&)
NuBlendShapeAnimList::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuBlendShapeAnim>(NuVarArray<NuBlendShapeAnim>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuBlendShapeLocator>(NuVarArray<NuBlendShapeLocator>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuMatrixBase>(NuVarArray<NuMatrixBase>&, char const*)
NuOccluder::Serialize(NuSerialize&)
NuJointData::Serialize(NuSerialize&)
NuLayerData::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<int>(NuVarArray<int>&, char const*)
NuEllipsoid::Serialize(NuSerialize&)
NuCylinder::Serialize(NuSerialize&)
NuShadowMesh::Serialize(NuSerialize&)
NuIrradianceBoxSample::Serialize(NuSerialize&)
NuIrradiancePlaneSample::Serialize(NuSerialize&)
NuSurfGeomInstance::Serialize(NuSerialize&)
NuSurfGeomTriInst::Serialize(NuSerialize&)
NuSurfGeomVert::Serialize(NuSerialize&)
NuSurfGeomTri::Serialize(NuSerialize&)
NuBlendShapeAnim::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuBlendShapeAnimKey>(NuVarArray<NuBlendShapeAnimKey>&, char const*)
NuBlendShapeAnimKey::Serialize(NuSerialize&)
NuSoundSystem::GetGfxMemorySize()
NuSoundSystem::GetScratchMemorySize()
NuSoundSystem::SetGfxMemorySize(unsigned int)
NuSoundSystem::GetStreamBufferSize()
NuSoundSystem::GetBufferAlignment()
NuSoundSystem::GetDecoderMemorySize()
NuSoundSystem::NuSoundSystem()
NuSoundSystem::~NuSoundSystem()
NuSoundSystem::~NuSoundSystem()
NuSoundSystem::Initialise(int)
NuSoundSystem::_AllocMemory(NuSoundSystem::MemoryDiscipline, unsigned int, unsigned int, char const*)
NuSoundSystem::Disable()
NuSoundSystem::RegisterAudioMemory(void*, unsigned int)
NuSoundSystem::Shutdown()
NuSoundSystem::UnloadAllSamples()
NuSoundSystem::FreeMemory(NuSoundSystem::MemoryDiscipline, unsigned long, unsigned int)
NuSoundSystem::GetFreeMemory(NuSoundSystem::MemoryDiscipline)
NuSoundSystem::ReAllocMemory(NuSoundSystem::MemoryDiscipline, unsigned long, unsigned int)
NuSoundSystem::GetAllocdMemory(NuSoundSystem::MemoryDiscipline)
NuSoundSystem::GetTotalMemory(NuSoundSystem::MemoryDiscipline)
NuSoundSystem::GetPeakAllocdMemory(NuSoundSystem::MemoryDiscipline)
NuSoundSystem::GetLargestMemoryFragment(NuSoundSystem::MemoryDiscipline)
NuSoundSystem::DefragmentSampleMemory()
NuSoundSystem::GenerateHash(char const*)
NuSoundSystem::AddSample(char const*, NuSoundSystem::FileType, NuSoundSource::FeedType)
NuSoundSystem::GetFileExtension(NuSoundSystem::FileType)
NuSoundSystem::GetSample(char const*)
NuSoundSystem::ReleaseSample(NuSoundSample*)
NuSoundSystem::LoadSample(NuSoundSample*, void*, int, NuSoundOutOfMemCallback*)
NuSoundSystem::UnloadSample(NuSoundSample*)
NuSoundSystem::Update(float)
NuSoundSystem::LockListeners()
NuSoundSystem::UnlockListeners()
NuSoundSystem::EventNotify(Event&, NuEventData&)
NuSoundSystem::PauseAllVoices()
NuSoundSystem::ResumeAllVoices()
NuSoundSystem::StopAllVoices()
NuSoundSystem::StopVoices(int)
NuSoundSystem::StopVoices(NuSoundSource const&)
NuSoundSystem::PauseVoices(int)
NuSoundSystem::ResumeVoices(int)
NuSoundSystem::GetOldestVoice(NuSoundSample*, float&)
NuSoundSystem::ReleaseVoice(NuSoundVoice*)
NuSoundSystem::SourceRequiresDecoder(NuSoundSource*)
NuSoundSystem::ReleaseDecoder(NuSoundDecoder*)
NuSoundSystem::CreateEffect(NuSoundEffect::EffectType)
void NuSoundMemory::PushNuListNode<NuSoundEffect*>(NuList<NuSoundEffect*>&, NuSoundEffect* const&)
NuSoundSystem::ReleaseEffect(NuSoundEffect*)
NuSoundSystem::CreateBus(char const*, bool)
NuSoundSystem::GetBus(char const*)
NuSoundSystem::ReleaseBus(NuSoundBus*)
NuSoundSystem::CreateFileLoader(NuSoundSystem::FileType)
NuSoundSystem::ReleaseFileLoader(NuSoundLoader*)
NuSoundSystem::CreateDecoder(NuSoundSource*)
NuSoundSystem::AddRoutingTable(NuSoundRoutingTable*)
NuSoundSystem::GetRoutingTable(char const*)
NuSoundSystem::SetDefaultRoutingTable(NuSoundRoutingTable*)
NuSoundSystem::GetDefaultRoutingTable()
NuSoundSystem::AddListener(NuSoundListener*)
NuSoundSystem::RemoveListener(NuSoundListener*)
NuSoundSystem::FindListener(char const*)
NuSoundSystem::GetListeners()
NuSoundSystem::CreateCrossfadeCurve(unsigned int)
NuSoundSystem::ReleaseCrossfadeCurve(unsigned int)
NuMap<unsigned int, NuSoundSystem::CurveData>::Erase(unsigned int const&)
NuSoundSystem::GetCrossfadeCurve(unsigned int) const
NuSoundSystem::CalculateCrossfadeHeight(NuSoundSystem::CurveData const&, float) const
NuSoundSystem::DetermineFileType(char const*)
NuSoundSystem::DetermineFileType(NUFILETYPE)
NuSoundSystem::GetDefaultFileType(NuSoundSource::FeedType)
NuSoundSystem::FileTypeSupported(NuSoundSystem::FileType)
NuSoundSystem::CheckListenerList(NuEList<NuSoundListener, DefaultElist> const&)
NuSoundSystem::GetNearestHeadListeners(NuEList<NuSoundListener, DefaultElist> const&, NuSoundListener**, float*, VuVec const&)
NuSoundSystem::GetNearestFocusListeners(NuEList<NuSoundListener, DefaultElist> const&, NuSoundListener**, float*, VuVec const&)
NuSoundSystem::AmplitudeTodB(float)
NuSoundSystem::dBToAmplitude(float)
NuSoundSystem::GetOutputChannelConfig()
NuSoundSystem::GetClosestSupportedConfig(int)
NuSoundSystem::GetNumAvailableOutputDevices()
NuSoundSystem::SetLanguageTriple(char const*)
NuSoundSystem::GetLanguageTriple()
NuSoundSystem::SetDefaultLanguageTriple(char const*)
NuSoundSystem::GetDefaultLanguageTriple()
NuSoundSystem::SetMainThreadID(NuThread*)
NuSoundSystem::GetPlatformString()
NuSoundSystem::GetLanguageString(bool)
NuSoundSystem::DumpPlayingVoicesToTTY()
NuSound_GetAllocdSampleMemory()
NuSoundSystem::IsUserPlayingMusic()
NuSoundSystem::PauseUserMusic()
NuSoundSystem::ResumeUserMusic()
NuSoundSystem::TitleHasUserMusicControl()
NuSoundSystem::OnEnterSystemMenu()
NuSoundSystem::OnExitSystemMenu()
NuSoundSystemCallbacks::AllocatePage(NuMemoryManager*, unsigned long, unsigned long)
NuSoundSystemCallbacks::ReleasePage(NuMemoryManager*, void*, unsigned long)
NuSoundSystemCallbacks::OpenDump(NuMemoryManager*, char const*, unsigned long&)
NuSoundSystemCallbacks::CloseDump(NuMemoryManager*, unsigned long)
NuSoundSystemCallbacks::Dump(NuMemoryManager*, unsigned long, char const*)
NuSoundEffect::Initialise()
NuSoundEffect::Shutdown()
NuSoundEffect::Enable()
NuSoundEffect::Disable()
NuSoundEffectAttenuation::~NuSoundEffectAttenuation()
NuSoundEffect::AttachVoice(NuSoundVoice*)
NuSoundEffect::DetachVoice(NuSoundVoice*)
NuSoundEffectAttenuation::ProcessVoice(NuSoundVoice*, float)
NuSoundEffectAttenuation::AttachBus(NuSoundBus*)
NuSoundEffect::DetachBus(NuSoundBus*)
NuSoundEffect::ProcessBus(NuSoundBus*, float)
NuSoundEffect::Process(float)
NuSoundEffectPitch::~NuSoundEffectPitch()
NuSoundEffect::ProcessVoice(NuSoundVoice*, float)
NuSoundEffect::AttachBus(NuSoundBus*)
NuSoundEffectRandomVolume::~NuSoundEffectRandomVolume()
NuSoundEffectRandomPitch::~NuSoundEffectRandomPitch()
NuSoundEffectRepeat::~NuSoundEffectRepeat()
NuSoundEffectRepeat::ProcessVoice(NuSoundVoice*, float)
NuMap<unsigned int, NuSoundSystem::CurveData>::DeleteNodeLinks(NuMapNode<unsigned int, NuSoundSystem::CurveData>*)
NuListFind<NuSoundEffect*, NuListNode<NuSoundEffect*> >::Remove(NuListNode<NuSoundEffect*>*, NuListNode<NuSoundEffect*>*, NuSoundEffect* const&)
NuMap<unsigned int, NuSoundSystem::CurveData>::InsertNode(unsigned int const&)
NuSoundBus::NuSoundBus(char const*, bool)
NuSoundBus::NuSoundBus(char const*, NuSoundBus*)
NuSoundBus::~NuSoundBus()
NuSoundBus::SetOutputBus(NuSoundBus*)
NuSoundBus::GetOutputBus() const
NuSoundBus::GetName() const
NuSoundBus::SetOutputMix(float*)
NuSoundBus::SetOutputMix(float)
NuSoundBus::GetOutputMix(float*)
NuSoundBus::ApplyFinalMix(float*)
NuSoundBus::AddEffect(NuSoundEffect*)
NuSoundBus::RemoveEffect(NuSoundEffect*)
NuSoundCriticalSection::~NuSoundCriticalSection()
NuSoundClock::NuSoundClock()
NuSoundClock::~NuSoundClock()
NuSoundClock::GetTicks() const
NuSoundClock::GetClockFrequency() const
NuSoundClock::AddCallback(NuSoundClock::Callback*)
NuSoundClock::RemoveCallback(NuSoundClock::Callback*)
NuSoundClock::HandleCallbacks()
NuSoundEffect::~NuSoundEffect()
NuSoundEffect::~NuSoundEffect()
NuSoundEffectDoppler::NuSoundEffectDoppler()
NuSoundEffectDoppler::~NuSoundEffectDoppler()
NuSoundEffectDoppler::~NuSoundEffectDoppler()
NuSoundEffectDoppler::SetParameters(float, float, NuEList<NuSoundListener, DefaultElist> const*)
NuSoundEffectDoppler::ProcessVoice(NuSoundVoice*, float)
NuSoundEffectFader::NuSoundEffectFader()
NuSoundEffectFader::~NuSoundEffectFader()
NuSoundEffectFader::~NuSoundEffectFader()
NuSoundEffectFader::Enable()
NuSoundEffectFader::Disable()
NuSoundEffectFader::SetParameters(float, float, NuSoundEffectFader::FinishState)
NuSoundEffectFader::SetCurveParams(NuSoundEffectFader::Curve const&)
NuSoundEffectFader::AttachVoice(NuSoundVoice*)
NuSoundEffectFader::AttachBus(NuSoundBus*)
NuSoundEffectFader::Process(float)
NuSoundEffectFader::ProcessVoice(NuSoundVoice*, float)
NuSoundEffectFader::ProcessBus(NuSoundBus*, float)
NuSoundEffectPitchRamp::NuSoundEffectPitchRamp()
NuSoundEffectPitchRamp::~NuSoundEffectPitchRamp()
NuSoundEffectPitchRamp::~NuSoundEffectPitchRamp()
NuSoundEffectPitchRamp::SetParameters(float, float, NuSoundEffectPitchRamp::FinishState)
NuSoundEffectPitchRamp::AttachVoice(NuSoundVoice*)
NuSoundEffectPitchRamp::Process(float)
NuSoundEffectPitchRamp::ProcessVoice(NuSoundVoice*, float)
NuSoundHandle::NuSoundHandle()
NuSoundHandle::NuSoundHandle(NuSoundHandle&)
NuSoundHandle::operator=(NuSoundHandle&)
NuSoundHandle::~NuSoundHandle()
NuSoundHandle::GetVoice() const
NuSoundHandle::InvalidateVoice()
NuSoundHandle::operator==(NuSoundHandle const&)
NuSoundHandle::SetVoice(NuSoundVoice*)
NuSoundHandle::ResetFrameCount()
NuSoundHandle::Play()
NuSoundHandle::Stop()
NuSoundHandle::Pause()
NuSoundHandle::Resume()
NuSoundHandle::SetVolume(float)
NuSoundHandle::SetPitch(float)
NuSoundHandle::SetPosition(VuVec*)
NuSoundHandle::SetVelocity(VuVec const&)
NuSoundHandle::SetFalloff(float, float, NuSoundSystem::FalloffType)
NuSoundHandle::GetVolume() const
NuSoundHandle::GetPitch() const
NuSoundHandle::GetPosition() const
NuSoundHandle::GetVelocity() const
NuSoundHandle::GetNear() const
NuSoundHandle::GetFar() const
NuSoundHandle::GetFalloffType() const
NuSoundHandle::GetLastAttenuation() const
NuSoundHandle::GetLastDistanceAttenuation() const
NuSoundHandle::GetLastListenerDistance() const
NuSoundHandle::GetSurroundMode() const
NuSoundHandle::GetTotalLengthSeconds() const
NuSoundHandle::GetPlaybackPositionSeconds() const
NuSoundHandle::GetTotalLengthSamples() const
NuSoundHandle::GetPlaybackPositionSamples()
NuSoundHandle::IsLooping() const
NuSoundHandle::GetState() const
NuSoundHandle::AddEffect(NuSoundEffect*)
NuSoundHandle::RemoveEffect(NuSoundEffect*)
NuSoundHandle::GetEffect(NuSoundEffect::EffectType)
NuSoundListener::NuSoundListener()
NuSoundListener::~NuSoundListener()
NuSoundListener::SetHeadMatrix(VuMtx const&)
NuSoundListener::GetHeadMatrix() const
NuSoundListener::SetFocusPosition(VuVec const&)
NuSoundListener::GetFocusPosition() const
NuSoundListener::GetHeadDistance(VuVec const&) const
NuSoundListener::GetAttenuationDistance(VuVec const&) const
NuSoundListener::GetAttenuationPosition(VuVec const&) const
NuSoundListener::SetVelocity(VuVec const&)
NuSoundListener::GetVelocity() const
NuSoundListener::Enable()
NuSoundListener::Disable()
NuSoundListener::IsEnabled() const
NuSoundListener::EnableFocusPosition()
NuSoundListener::DisableFocusPosition()
NuSoundListener::IsFocusPositionEnabled() const
NuSoundListener::SetSensitivity(float)
NuSoundListener::GetSensitivity() const
NuSoundListener::Set2DScreenPosition(VuVec const*)
NuSoundListener::Get2DScreenPosition() const
NuSoundListener::SetOutputDevices(int)
NuSoundListener::GetOutputDevices() const
NuSoundListener::SetName(char const*)
NuSoundListener::GetName() const
NuSoundInitDefaultRoutingTables()
NuSoundRoutingTable::SetMatrix(NuSoundSystem::ChannelConfig, NuSoundSystem::ChannelConfig, NuSoundMixMatrix*)
NuSoundRoutingTable::NuSoundRoutingTable(char const*)
NuSoundRoutingTable::NuSoundRoutingTable(char const*, NuSoundRoutingTable const*)
NuSoundRoutingTable::GetConfig(int)
NuSoundRoutingTable::GetMatrix(NuSoundSystem::ChannelConfig, NuSoundSystem::ChannelConfig) const
NuSoundRoutingTable::GetIndex(NuSoundSystem::ChannelConfig)
NuSoundRoutingTable::GetName() const
NuSoundSample::NuSoundSample(char const*, NuSoundSource::FeedType)
NuSoundSample::~NuSoundSample()
NuSoundSample::Unload()
NuSoundSample::~NuSoundSample()
NuSoundSample::GetSourceBuffer()
NuSoundSample::GetLoadState() const
NuSoundSample::SetLoadState(NuSoundSample::LoadState)
NuSoundSample::GetThreadQueueCount() const
NuSoundSample::AddedToThreadQueue()
NuSoundSample::RemovedFromThreadQueue()
NuSoundSample::GetLastErrorState() const
NuSoundSample::SetLastErrorState(NuSoundSample::ErrorState)
NuSoundSample::Load(void*, int, NuSoundOutOfMemCallback*)
NuSoundSample::RequestBuffer(bool, NuSoundWeakPtr<NuSoundBufferCallback>)
NuSoundSample::Lock()
NuSoundSample::Unlock()
NuSoundSample::IsLocked() const
NuSoundSample::GetResourceCount()
NuSoundSample::Reference()
NuSoundSample::Release()
NuSoundSource::GetName() const
NuSoundSample::OpenStream(bool)
NuSoundSample::CloseStream()
NuSoundSample::IsStreamOpen() const
NuSoundSource::GetNumInitialBuffers() const
NuSoundSource::NuSoundSource(char const*, NuSoundSource::SourceType, NuSoundSource::FeedType)
NuSoundSource::~NuSoundSource()
NuSoundSource::~NuSoundSource()
NuSoundSource::SetStreamDesc(NuSoundStreamDesc*)
NuSoundSource::VoiceReference()
NuSoundSource::VoiceRelease()
NuList<NuSoundStreamer*>::~NuList()
NuSoundStreamingSample::NuSoundStreamingSample(char const*)
NuSoundStreamingSample::~NuSoundStreamingSample()
NuSoundStreamingSample::~NuSoundStreamingSample()
NuSoundStreamingSample::Open(float, bool, bool)
NuSoundStreamingSample::Close()
NuSoundStreamingSample::ReCue(float, bool)
NuSoundStreamingSample::IsStreamOpen() const
NuSoundStreamingSample::Lock()
NuSoundStreamingSample::Unlock()
NuSoundStreamingSample::IsLocked() const
NuSoundStreamingSample::RequestBuffer(bool, NuSoundWeakPtr<NuSoundBufferCallback>)
NuSoundStreamer::RequestFill(NuSoundStreamingSample*, NuSoundBuffer*, bool, NuSoundWeakPtr<NuSoundBufferCallback>)
NuSoundWeakPtr<NuSoundBufferCallback>::~NuSoundWeakPtr()
NuSoundStreamer::NuSoundStreamer()
NuSoundStreamer::ThreadFunc(void*)
NuSoundStreamer::~NuSoundStreamer()
NuSoundStreamer::RequestCue(NuSoundStreamingSample*, bool, float, bool)
NuSoundStreamer::RequestClose(NuSoundStreamingSample*)
NuSoundStreamer::RequestReCue(NuSoundStreamingSample*, bool, float)
NuSoundStreamer::ShutdownThread()
NuSoundStreamer::ShutdownAll()
NuSoundQueue<NuSoundStreamer::StreamEvent, 32>::Pop(bool)
NuSoundWeakPtr<NuSoundBufferCallback>::~NuSoundWeakPtr()
NuSoundWeakPtr<NuSoundBufferCallback>::Clear()
NuSoundWeakPtr<NuSoundBufferCallback>::Set(NuSoundBufferCallback*)
NuListFind<NuSoundStreamer*, NuListNode<NuSoundStreamer*> >::Remove(NuListNode<NuSoundStreamer*>*, NuListNode<NuSoundStreamer*>*, NuSoundStreamer* const&)
NuSoundVoice::NuSoundVoice(NuSoundSource*, bool)
NuSoundVoice::SetState(NuSoundVoice::PlayState)
NuSoundVoice::~NuSoundVoice()
NuSoundVoice::~NuSoundVoice()
NuSoundVoice::GetState() const
NuSoundVoice::Play()
NuSoundVoice::Resume()
NuSoundVoice::Stop(bool)
NuSoundVoice::BeginStopEffects()
NuSoundVoice::CheckStopEffects()
NuSoundVoice::Pause()
NuSoundVoice::RegisterHandle(NuSoundHandle*)
NuSoundVoice::UnregisterHandle(NuSoundHandle*)
NuSoundVoice::SetAutoDelete(bool)
NuSoundVoice::SetListeners(NuEList<NuSoundListener, DefaultElist> const*)
NuSoundVoice::SetPosition(VuVec*)
NuSoundVoice::SetDirection(VuVec*)
NuSoundVoice::SetVelocity(VuVec const&)
NuSoundVoice::SetVolume(float)
NuSoundVoice::SetPitch(float)
NuSoundVoice::SetFalloff(float, float, NuSoundSystem::FalloffType)
NuSoundVoice::SetLowFrequencyMix(float)
NuSoundVoice::SetSurroundMode(NuSoundSystem::SurroundMode)
NuSoundVoice::SetDownmixerType(NuSoundSystem::DownmixType)
NuSoundVoice::SetRoutingTable(NuSoundRoutingTable*)
NuSoundVoice::SetControllerBits(int)
NuSoundVoice::SetOutputBus(NuSoundBus*)
NuSoundVoice::SetCustomSurroundMix(float*)
NuSoundVoice::SetOutputDevices(int)
NuSoundVoice::SetOutputDeviceVolume(int, float)
NuSoundVoice::SetSpeakerFieldAngle(float, float)
NuSoundVoice::SetSpeakerBleedAngle(float)
NuSoundVoice::SetSpeakerBleedNear(float)
NuSoundVoice::SetSpeakerBleedFar(float)
NuSoundVoice::SetPenetration(float)
NuSoundVoice::SetMixUpdate(bool)
NuSoundVoice::SetReverbWetMix(float)
NuSoundVoice::SetStartOffset(float)
NuSoundVoice::GetAutoDelete() const
NuSoundVoice::IsLooping() const
NuSoundVoice::GetPosition() const
NuSoundVoice::GetVelocity() const
NuSoundVoice::GetDirection() const
NuSoundVoice::GetVolume() const
NuSoundVoice::GetPitch() const
NuSoundVoice::GetNear() const
NuSoundVoice::GetFar() const
NuSoundVoice::GetLowFrequencyMix() const
NuSoundVoice::GetFalloffType() const
NuSoundVoice::GetSurroundMode() const
NuSoundVoice::GetDownmixerType() const
NuSoundVoice::GetRoutingTable() const
NuSoundVoice::GetControllerBits() const
NuSoundVoice::GetOutputBus() const
NuSoundVoice::GetOutputDevices() const
NuSoundVoice::GetOutputDeviceVolume(int) const
NuSoundVoice::GetSpeakerFieldAngleMin() const
NuSoundVoice::GetSpeakerFieldAngleMax() const
NuSoundVoice::GetSpeakerBleedAngle() const
NuSoundVoice::GetSpeakerBleedNear() const
NuSoundVoice::GetSpeakerBleedFar() const
NuSoundVoice::GetPenetration() const
NuSoundVoice::GetReverbWetMix() const
NuSoundVoice::GetStartOffset() const
NuSoundVoice::Update(float)
NuSoundVoice::UpdateEffects(float, NuSoundEffect::EffectProcessStage)
NuSoundVoice::UpdateMix(float)
NuSoundVoice::CalculatePositionalMix()
NuSoundVoice::CalculateEffectAttenuation()
NuSoundVoice::CalculateEffectPitchScale()
NuSoundVoice::RemoveEffect(NuSoundEffect*)
NuSoundVoice::AreStopEffectsRunning() const
NuList<NuMechPtr<NuSoundListener, -1> >::Clear()
NuSoundVoice::CalculateFalloffAttenuation(float)
NuSoundVoice::CalculatePositionalCoefficients(float*, VuVec const&, VuMtx const&, float, float)
NuSoundVoice::CalculateFieldAngle(float)
NuSoundVoice::GetEffectiveHeadListener() const
NuSoundVoice::GetEffectiveFocusListener() const
NuSoundVoice::AddEffect(NuSoundEffect*)
NuSoundVoice::GetNumEffects() const
NuSoundVoice::GetPlaybackPositionSeconds()
NuSoundVoice::GetEffect(NuSoundEffect::EffectType)
NuSoundVoice::GetEffects() const
NuSoundVoice::UpdateHardwareVoice(float)
NuSoundWeakPtrObj<NuSoundBufferCallback>::~NuSoundWeakPtrObj()
NuSoundWeakPtrObj<NuSoundBufferCallback>::~NuSoundWeakPtrObj()
NuSoundNNX::NuSoundNNX()
NuSoundNNX::~NuSoundNNX()
NuSoundNNX::~NuSoundNNX()
NuSoundNNX::GetAudioRendererConfig()
NuSoundNNX::GetSubMix()
NuSoundNNX::InitAudioDevice()
NuSoundNNX::RegisterAudioMemory(void*, unsigned int)
NuSoundNNX::ShutdownAudioDevice()
NuSoundNNX::UpdateAudioDevice()
NuSoundNNX::CreateVoice(NuSoundSource*, bool)
NuSoundNNX::ReleaseVoice(NuSoundVoice*)
NuSoundNNX::CreateEffect(NuSoundEffect::EffectType)
NuVoiceNNX::NuVoiceNNX(NuSoundSource*, bool)
NuVoiceNNX::~NuVoiceNNX()
NuVoiceNNX::~NuVoiceNNX()
NuVoiceNNX::CreateHardwareVoice()
NuVoiceNNX::DestroyHardwareVoice()
NuVoiceNNX::StartHardwareVoice()
NuVoiceNNX::StopHardwareVoice()
NuVoiceNNX::PauseHardwareVoice()
NuVoiceNNX::ResumeHardwareVoice()
NuVoiceNNX::UpdateHardwareVoice(float)
NuVoiceNNX::GetPlaybackPositionSamples()
NuVoiceNNX::SubmitBuffer(NuSoundBuffer*)
NuVoiceNNX::ApplyHardwareVoiceMix()
fnBezier_InternalCalculate(f32vec4 const*, float)
fnBezier_CalculateDataSet(float*, unsigned int, f32vec2 const*)
fnBezier_CalculateYValue(float const*, float const*, unsigned int, float)
geLerpShape_Cos_EaseInOutFunc(float)
geLerpShape_Sqr_YankFunc(float)
geLerpShape_Cos_EaseInFunc(float)
geLerpShape_Sin_EaseOutFunc(float)
geLerpShape_Hermite_EaseInOutFunc(float)
geLerpShaper_PointsToBezCode(f32vec4 const*)
geLerpShaper_BezCodeToPoints(unsigned int, f32vec4*)
geLerpShaper_InitShaper(geLERPSHAPER*)
geLerpShaper_RegisterShape(geLERPSHAPE, float (*)(float))
geLerpShaper_DestroyTable(geLERPSHAPER*)
geLerpShaper_CreateTable(geLERPSHAPER*, unsigned short, geLERPSHAPETABLEACCESS)
geLerpShaper_Bezier_Create()
geLerpShaper_Bezier_Destroy(geLERPSHAPERBEZ*)
geLerpShaper_Bezier_Configure(geLERPSHAPERBEZ*, f32vec4 const*, unsigned short)
geLerpShaper_Bezier_Configure(geLERPSHAPERBEZ*, unsigned int, unsigned short)
geLerpShaper_Bezier_ShapeFunc(geLERPSHAPERBEZ*, float)
geLerpShaper_PrecalculateShape(geLERPSHAPE, unsigned short, geLERPSHAPETABLEACCESS)
geLerpShaper_CreateShape(unsigned int, unsigned short)
geLerpShaper_DestroyShape(unsigned short)
geLerpShaper_GetShaped(float, unsigned short)
geLerpShaper_GetShaped(float, unsigned short, bool)
geLerpShaper_GetShapedBiDirectional(float, unsigned short)
geLerpShaper_Exit()
geLerpShaper_Init(unsigned short)
NuSoundLoaderWAV::NuSoundLoaderWAV()
NuSoundLoaderWAV::~NuSoundLoaderWAV()
NuSoundLoaderWAV::~NuSoundLoaderWAV()
NuSoundLoaderWAV::SeekPCMSample(unsigned long)
NuSoundLoaderWAV::SeekTime(double)
NuSoundLoaderWAV::CreateHeader()
NuSoundLoaderWAV::ReadHeader(NuSoundStreamDesc*)
NuSoundLoaderWAV::MakeFourCC(char const*)
NuSoundLoaderWAV::ReadRIFFHeaderChunk(NuFile*, NuSoundStreamDesc*, NuSoundLoaderWAV::ChunkInfo const&, NuSoundLoaderWAV*)
NuSoundLoaderWAV::ReadDataChunk(NuFile*, NuSoundStreamDesc*, NuSoundLoaderWAV::ChunkInfo const&, NuSoundLoaderWAV*)
NuSoundLoaderWAV::FindChunks(NuFile*, NuSoundStreamDesc*, NuSoundLoaderWAV::ChunkReadRequest*, unsigned int)
NuSoundLoaderWAV::EndianFlipWAVHeader(FileHeaderWAV*)
NuSoundLoaderWAV::FindChunk(NuFile*, unsigned int, NuSoundLoaderWAV::ChunkInfo&)
NuSoundHeaderWAV::~NuSoundHeaderWAV()
NuSoundHeaderWAV::GetDecodedDataFormat() const
NuSoundHeaderWAV::GetEncodedLengthBytes() const
NuSoundHeaderWAV::GetLengthSamples() const
NuSoundHeaderWAV::GetLengthSeconds() const
NuSoundHeaderWAV::GetDataOffset() const
NuSoundHeaderWAV::GetNumChannels() const
NuSoundHeaderWAV::GetSampleRate() const
NuSoundHeaderWAV::GetBitsPerChannel() const
NuSoundHeaderWAV::GetBlockSize() const
NuSoundStreamDesc::GetEncodedDataFormat() const
NuSoundStreamDesc::GetDecodedLengthBytes() const
NuSoundStreamDesc::GetStartOffsetSamples() const
NuSoundStreamDesc::GetLoopStart() const
NuSoundStreamDesc::GetLoopEnd() const
NuSoundStreamDesc::GetInterleaveSize() const
NuSoundStreamDesc::~NuSoundStreamDesc()
NuSoundLoaderCBX::NuSoundLoaderCBX()
NuSoundLoaderCBX::CreateHeader()
NuSoundLoaderCBX::ReadHeader(NuSoundStreamDesc*)
NuSoundLoaderCBX::EndianFlipHeader(FileHeaderCBX*)
NuSoundLoaderCBX::~NuSoundLoaderCBX()
NuSoundLoaderCBX::SeekPCMSample(unsigned long)
NuSoundLoaderCBX::SeekTime(double)
NuSoundHeaderCBX::~NuSoundHeaderCBX()
NuSoundHeaderCBX::GetDecodedDataFormat() const
NuSoundHeaderCBX::GetEncodedLengthBytes() const
NuSoundHeaderCBX::GetLengthSamples() const
NuSoundHeaderCBX::GetLengthSeconds() const
NuSoundHeaderCBX::GetDataOffset() const
NuSoundHeaderCBX::GetNumChannels() const
NuSoundHeaderCBX::GetSampleRate() const
NuSoundHeaderCBX::GetBitsPerChannel() const
NuSoundHeaderCBX::GetBlockSize() const
NuSoundHeaderCBX::GetEncodedDataFormat() const
NuSoundHeaderCBX::GetDecodedLengthBytes() const
NuSoundDecoderCBX::NuSoundDecoderCBX(char const*, NuSoundSource*)
NuSoundDecoderCBX::~NuSoundDecoderCBX()
non-virtual thunk to NuSoundDecoderCBX::~NuSoundDecoderCBX()
NuSoundDecoderCBX::~NuSoundDecoderCBX()
non-virtual thunk to NuSoundDecoderCBX::~NuSoundDecoderCBX()
NuSoundDecoderCBX::SubmitBuffer(NuSoundBuffer*)
non-virtual thunk to NuSoundDecoderCBX::SubmitBuffer(NuSoundBuffer*)
NuSoundDecoderCBX::Decode(NuSoundSource&, NuSoundBuffer&, bool)
NuSoundDecoderCBX::Reset()
NuSoundDecoder::GetName() const
NuSoundHeaderADPCMNX::NuSoundHeaderADPCMNX()
NuSoundHeaderADPCMNX::~NuSoundHeaderADPCMNX()
NuSoundHeaderADPCMNX::~NuSoundHeaderADPCMNX()
NuSoundHeaderADPCMNX::ReadADPCMInfo()
NuSoundHeaderADPCMNX::GetInfo()
NuSoundLoaderADPCMNX::NuSoundLoaderADPCMNX()
NuSoundLoaderADPCMNX::~NuSoundLoaderADPCMNX()
NuSoundLoaderADPCMNX::~NuSoundLoaderADPCMNX()
NuSoundLoaderADPCMNX::CreateHeader()
NuSoundLoaderADPCMNX::ReadHeader(NuSoundStreamDesc*)
NuSoundLoaderADPCMNX::SeekPCMSample(unsigned long)
NuSoundLoaderADPCMNX::SeekTime(double)
NuSoundHeaderADPCMNX::GetDecodedDataFormat() const
NuSoundHeaderADPCMNX::GetEncodedLengthBytes() const
NuSoundHeaderADPCMNX::GetLengthSamples() const
NuSoundHeaderADPCMNX::GetLengthSeconds() const
NuSoundHeaderADPCMNX::GetDataOffset() const
NuSoundHeaderADPCMNX::GetNumChannels() const
NuSoundHeaderADPCMNX::GetSampleRate() const
NuSoundHeaderADPCMNX::GetBitsPerChannel() const
NuSoundHeaderADPCMNX::GetBlockSize() const
NuSoundHeaderADPCMNX::GetDecodedLengthBytes() const
NuSoundHeaderOpusNX::GetLengthSamples() const
NuSoundLoaderOpusNX::NuSoundLoaderOpusNX()
NuSoundLoaderOpusNX::~NuSoundLoaderOpusNX()
NuSoundLoaderOpusNX::~NuSoundLoaderOpusNX()
NuSoundLoaderOpusNX::CreateHeader()
NuSoundLoaderOpusNX::ReadHeader(NuSoundStreamDesc*)
NuSoundLoaderOpusNX::SeekPCMSample(unsigned long)
NuSoundLoaderOpusNX::SeekTime(double)
NuSoundHeaderOpusNX::~NuSoundHeaderOpusNX()
NuSoundHeaderOpusNX::GetDecodedDataFormat() const
NuSoundHeaderOpusNX::GetEncodedLengthBytes() const
NuSoundHeaderOpusNX::GetLengthSeconds() const
NuSoundHeaderOpusNX::GetDataOffset() const
NuSoundHeaderOpusNX::GetNumChannels() const
NuSoundHeaderOpusNX::GetSampleRate() const
NuSoundHeaderOpusNX::GetBitsPerChannel() const
NuSoundHeaderOpusNX::GetBlockSize() const
NuSoundHeaderOpusNX::GetEncodedDataFormat() const
NuSoundHeaderOpusNX::GetDecodedLengthBytes() const
NuSoundDecoderOpusNX::InitGlobalMemory()
NuSoundDecoderOpusNX::ReleaseGlobalMemory()
NuSoundDecoderOpusNX::NuSoundDecoderOpusNX(char const*, NuSoundSource*)
NuSoundDecoderOpusNX::~NuSoundDecoderOpusNX()
non-virtual thunk to NuSoundDecoderOpusNX::~NuSoundDecoderOpusNX()
NuSoundDecoderOpusNX::~NuSoundDecoderOpusNX()
non-virtual thunk to NuSoundDecoderOpusNX::~NuSoundDecoderOpusNX()
NuSoundDecoderOpusNX::Decode(NuSoundSource&, NuSoundBuffer&, bool)
NuSoundDecoderOpusNX::FillDecodedBuffer()
NuSoundDecoderOpusNX::FillEncodedBuffer()
NuSoundDecoderOpusNX::Reset()
NuSoundDecoderOpusNX::SubmitBuffer(NuSoundBuffer*)
non-virtual thunk to NuSoundDecoderOpusNX::SubmitBuffer(NuSoundBuffer*)
g_NuSoundDecoderOpusNX_MemoryManagerEventHandler::AllocatePage(NuMemoryManager*, unsigned long, unsigned long)
g_NuSoundDecoderOpusNX_MemoryManagerEventHandler::ReleasePage(NuMemoryManager*, void*, unsigned long)
g_NuSoundDecoderOpusNX_MemoryManagerEventHandler::OpenDump(NuMemoryManager*, char const*, unsigned long&)
g_NuSoundDecoderOpusNX_MemoryManagerEventHandler::CloseDump(NuMemoryManager*, unsigned long)
g_NuSoundDecoderOpusNX_MemoryManagerEventHandler::Dump(NuMemoryManager*, unsigned long, char const*)
CBOX_DecodeInit(char*, CBOXSTATE*)
CBOX_Decode(CBOXSTATE*, float*)
NuSoundBuffer::NuSoundBuffer()
NuSoundBuffer::NuSoundBuffer(char*, unsigned long)
NuSoundBuffer::Provide(char*, unsigned long)
NuSoundBuffer::~NuSoundBuffer()
NuSoundBuffer::Allocate(unsigned long, NuSoundSystem::MemoryDiscipline)
NuSoundBuffer::IsAllocated() const
NuSoundBuffer::Free()
NuSoundBuffer::GetAddress() const
NuSoundBuffer::GetSegmentAddress(unsigned int, unsigned int, unsigned int) const
NuSoundBuffer::GetBufferSize() const
NuSoundBuffer::GetSegmentSize(unsigned int, unsigned int) const
NuSoundBuffer::GetCurrentContext()
NuSoundBuffer::SetCurrentContext(NuSoundBuffer::Context&)
NuSoundBuffer::Lock()
NuSoundBuffer::Unlock()
NuSoundBuffer::IsLocked() const
NuThreadSemaphore::~NuThreadSemaphore()
NuSoundDecoder::NuSoundDecoder(char const*, NuSoundSource*)
NuSoundDecoder::~NuSoundDecoder()
NuSoundDecoder::~NuSoundDecoder()
NuSoundDecoder::Initialise()
NuSoundDecoder::Shutdown()
NuSoundDecodeThread::Shutdown()
NuSoundDecoder::OpenStream(bool)
NuSoundDecoder::CloseStream()
NuSoundDecoder::IsStreamOpen() const
NuSoundDecoder::IsLocalStreamOpen() const
NuSoundDecoder::RequestBuffer(bool, NuSoundWeakPtr<NuSoundBufferCallback>)
NuSoundDecodeThread::RequestDecode(NuSoundDecoder&, NuSoundBuffer&, NuSoundWeakPtr<NuSoundBufferCallback>, bool)
NuSoundDecoder::Lock()
NuSoundDecoder::Unlock()
NuSoundDecoder::IsLocked() const
NuSoundDecoder::GetNumRingBuffers() const
NuSoundDecoder::GetNumInitialBuffers() const
NuSoundDecoder::VoiceReference()
NuSoundDecoder::VoiceRelease()
NuSoundDecodeThread::NuSoundDecodeThread()
NuSoundDecodeThread::ThreadFunc(void*)
NuSoundDecodeThread::~NuSoundDecodeThread()
NuSoundDecoder::Reset()
NuSoundEffectLowPass::NuSoundEffectLowPass()
NuSoundEffectLowPass::~NuSoundEffectLowPass()
NuSoundEffectLowPass::~NuSoundEffectLowPass()
NuSoundEffectLowPass::Params::Reset()
NuSoundEffectLowPass::Params::Read(nufpar_s*)
NuSoundEffectLowPass::SetParameters(NuSoundEffectLowPass::Params&)
NuSoundEffectLowPass::GetParameters() const
NuSoundLoader::NuSoundLoader()
NuSoundLoader::~NuSoundLoader()
NuSoundLoader::~NuSoundLoader()
NuSoundLoader::LoadFromFile(char const*, NuSoundStreamDesc*, NuSoundBuffer*, NuSoundOutOfMemCallback*)
NuSoundLoader::Load(NuSoundStreamDesc*, NuSoundBuffer*)
NuSoundLoader::LoadFromMemory(NuSoundStreamDesc*, NuSoundBuffer*, void*, unsigned long, NuSoundOutOfMemCallback*)
NuSoundLoader::OpenFileForStreaming(char const*, bool)
NuSoundLoader::OpenForStreaming(char const*, double, NuSoundStreamDesc*, bool)
NuSoundLoader::CloseStream()
NuSoundLoader::ReleaseHeader(NuSoundStreamDesc*)
NuSoundLoader::FillStreamBuffer(NuSoundBuffer*, bool)
NuSoundLoader::Close()
NuSoundLoader::ReadData(void*, unsigned long)
NuSoundLoader::SeekRawData(unsigned long)
NuSoundLoader::GetChannelAddress(NuSoundBuffer*, NuSoundStreamDesc*, NuSoundSystem::AudioChannel)
NuSoundLoader::Deinterleave(char*, int, char**, int, NuSoundSystem::ChannelConfig)
NuSoundMixer::NuSoundMixer(NuSoundSystem::ChannelConfig, NuSoundSystem::ChannelConfig, NuSoundMixer::OutputLayout, NuSoundSystem::DownmixType, NuSoundRoutingTable*)
NuSoundMixer::~NuSoundMixer()
NuSoundMixer::GetOutputIndex(int, int)
NuSoundMixer::Mix(float*, float*)
NuVertexDesc::InitCachedVertexDescTable()
NuVertexDesc::GetCachedVertexDesc(unsigned int, bool)
NuVertexDesc::GetCachedVertexOffsetDesc(unsigned int, bool)
NuVertexDesc::NuVertexDesc(unsigned int)
NuMeshTypeToStr(NUMESHTYPE)
NuMeshAttribToStr(NUMESHATTRIB)
NuVertexDesc::ValidateVertexDescs(NuVertexDesc const&, NuVertexDesc const&, char const*, char const*)
NuVertexDesc::Serialize(NuSerialize&)
NuVertexDesc::ResetOffsets()
NuVertexDesc::Add(NuVertexDesc const&)
NuVertexDesc::Add(NuVertexDesc const&, unsigned int, signed char)
NuVertexDesc::GetStreamDesc(unsigned int, unsigned int) const
NuWiiRenderMeshSimple::DestroyVertexArray(NuWiiVertexArray*&)
NuWiiRenderMeshSimple::DestroyDisplayList(NuWiiDisplayList*&)
NuWiiRenderMesh::Init()
NuWiiRenderMeshSimple::~NuWiiRenderMeshSimple()
NuWiiRenderMesh::~NuWiiRenderMesh()
NuVarArray<NuWiiRenderMeshBone>::~NuVarArray()
NuWiiRenderMesh::Serialize(NuSerialize&)
void NuSerialize::SerializeLinkToObject<NuWiiRenderMeshBone>(NuVarArray<NuWiiRenderMeshBone>*&)
void NuSerialize::SerializeLinkToObject<unsigned char>(NuVarArray<unsigned char>*&)
void NuSerialize::SerializeLinkToObject<unsigned short>(NuVarArray<unsigned short>*&)
NuWiiMeshSceneBlock::Serialize(NuSerialize&)
void NuSerialize::SerializeLinkToObject<NuWiiRenderMesh>(NuWiiRenderMesh*&)
NuWiiMeshSceneBlock::~NuWiiMeshSceneBlock()
NuVarArray<NuWiiVertexArray*>::AdjustSize(unsigned int)
void NuSerialize::SerializeLinkToObject<NuWiiVertexArray>(NuWiiVertexArray*&)
void NuSerialize::SerializeLinkToObject<NuWiiDisplayList>(NuWiiDisplayList*&)
void NuSerialize::_SerializeLegacyNuVarArray<NuWiiRenderMeshBone>(NuVarArray<NuWiiRenderMeshBone>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuWiiRenderMeshBoneInfluence>(NuVarArray<NuWiiRenderMeshBoneInfluence>&, char const*)
NuWiiRenderBuffer::Destroy()
NuWiiRenderBuffer::~NuWiiRenderBuffer()
NuWiiRenderBuffer::Clear()
NuWiiRenderBuffer::Serialize(NuSerialize&)
NuIndexBuffer::NuIndexBuffer()
NuIndexBuffer::NuIndexBuffer(unsigned int, unsigned int, unsigned int, NuDiscipline)
NuIndexBuffer::~NuIndexBuffer()
NuIndexBuffer::~NuIndexBuffer()
NuIndexBuffer::AllocateBuffer(unsigned int)
NuIndexBuffer::ResizeBuffer(unsigned int)
NuIndexBuffer::SwapEndianess()
NuIndexBuffer::Serialize(NuSerialize&)
NuIndexBuffer::GetRefCount() const
NuIndexBuffer::AddRef()
NuIndexBuffer::ReleaseRef()
NuMeshSceneBlock::InterleaveVertexBufferPair(NuSmartPtr<NuVertexBuffer, false>&, NuSmartPtr<NuVertexBuffer, false>&)
NuMeshSceneBlock::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<NuRenderMesh>(NuVector<NuRenderMesh>&, char const*)
void NuSerialize::SerializeVectorFromVarArray<NuRenderMesh>(NuVector<NuRenderMesh>&, NuSerialize&)
NuVector<NuRenderMesh>::Reserve(unsigned int, bool)
NuRenderMesh::NuRenderMesh(NuRenderMesh const&)
NuVarArray<NuRenderMeshVbArrayItem>::NuVarArray(NuVarArray<NuRenderMeshVbArrayItem> const&)
NuRenderMesh::ClassInit()
NuRenderMesh::CreateFullscreenMesh()
NuRenderMesh::CreateFullscreenGridMesh()
NuRenderMesh::CreateFullscreenSeededGridMesh()
NuRenderMesh::CreateCubeMesh()
NuRenderMesh::CalculateFullscreenMesh()
NuRenderMesh::CalculateFullscreenGridMesh()
NuRenderMesh::CalculateFullscreenSeededGridMesh()
NuRenderMesh::EndFrame()
NuRenderMesh::BeginFrame()
NuRenderMesh::Clear()
NuRenderMesh::NuRenderMesh()
NuRenderMesh::NuRenderMesh(NuDiscipline, unsigned short, unsigned int, unsigned int, bool)
NuRenderMesh::Init(NuDiscipline, unsigned short, unsigned int, unsigned int, bool)
NuRenderMesh::NuRenderMesh(NuRenderMesh const*, bool)
NuRenderMesh::UpdateFormat()
NuRenderMesh::~NuRenderMesh()
NuRenderMesh::RemoveVbFromList(NuVarArray<NuRenderMeshVbArrayItem>&, NuSmartPtr<NuVertexBuffer, false>&)
NuRenderMesh::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuRenderMeshVbArrayItem>(NuVarArray<NuRenderMeshVbArrayItem>&, char const*)
NuRenderMesh::ConvertIbBaseToByteOffsets()
NuRenderMesh::Draw(unsigned int, unsigned int, void**)
NuRenderMesh::ValidateVertexBufferFormat(unsigned int, unsigned int)
NuRenderMesh::CompareVbFormat(NuRenderMesh*)
NuRenderMesh::SetMeshDensityCoeff(float)
NuRenderMesh::GetMeshDensityCoeff() const
NuRenderMesh::IsKrawly()
NuRenderMesh::SetupFastBlend(NuVertexBuffer**, unsigned int*)
NuRenderMesh::SetupFastBlend(unsigned int*)
NuRenderMesh::AddBlend(NuBlendShape*)
NuFixedStringT<(unsigned short)128>::Format(char const*, ...)
NuRenderMesh::CalculateCrossSectionalArea(unsigned int, NuRenderMesh**)
void NuSerialize::SerializeLinkToObject<NuIndexBuffer>(NuIndexBuffer*&)
NuVertexBuffer::ClassInit()
NuVertexBuffer::NuVertexBuffer()
NuVertexBuffer::Clear()
NuVertexBuffer::NuVertexBuffer(NuVertexDesc const&, unsigned int, unsigned int, NuDiscipline)
NuVertexBuffer::~NuVertexBuffer()
NuVertexBuffer::~NuVertexBuffer()
NuVertexBuffer::EndFrame()
NuVertexBuffer::AllocBuffer(unsigned int)
NuVertexBuffer::ResizeBuffer(unsigned int)
NuVertexBuffer::SwapEndianess(char*, NuVertexDesc const&, char*, NuVertexDesc const&)
NuVertexBuffer::ConvertValue(char const*, NUMESHTYPE, char*, NUMESHTYPE)
NuVertexBuffer::Serialize(NuSerialize&)
NuVertexBuffer::GetRefCount() const
NuVertexBuffer::AddRef()
NuVertexBuffer::ReleaseRef()
NuVertexBuffer::SwapEndianess()
NuStreamBuffer::ClassInit()
NuStreamBuffer::____WE_HAVE_RUN_OUT_OF_STREAMBUFFER_____()
NuStreamBuffer::EndFrame()
NuStreamBuffer::BeginFrame()
NuIndexBufferPS::Relocate(int, char*, unsigned long, char*, char*)
NuIndexBufferPS::Create(unsigned int, unsigned int, unsigned int, NuDiscipline)
NuIndexBufferPS::Destroy()
NuIndexBufferPS::Lock(bool)
NuIndexBufferPS::Unlock()
NuVertexBufferPS::ClassInit()
NuVertexBufferPS::Relocate(int, char*, unsigned long, char*, char*)
NuVertexBufferPS::Create(NuVertexDesc const&, unsigned int, unsigned int, NuDiscipline)
NuVertexBufferPS::Lock(bool)
NuVertexBufferPS::Unlock()
NuVertexBufferPS::Destroy()
NuVertexBufferPS::MakeCurrent(unsigned int, unsigned int, short, unsigned int, void**)
NuBlendShape::NuBlendShape(unsigned int, unsigned int, bool)
NuBlendShape::~NuBlendShape()
NuBlendShape::Serialize(NuSerialize&)
NuBlendShape::SwapEndianess()
void NuSerialize::_SerializeLegacyNuVarArray<NuBlendOffset>(NuVarArray<NuBlendOffset>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuBlendOffsetAlpha>(NuVarArray<NuBlendOffsetAlpha>&, char const*)
void NuSerialize::_SerializeLegacyNuVarArray<NuBlendRunV1>(NuVarArray<NuBlendRunV1>&, char const*)
NuBlendShape::Validate(char const*)
NuBlendShape::CompressV2()
NuVarArray<NuBlendOffset>::AdjustSize(unsigned int)
NuVarArray<unsigned int>::AdjustSize(unsigned int)
NuFmvPrepareForFullScreenPlaybackPs()
NuFmvFinishFullScreenPlaybackPs()
NuFmvGet()
NuFmv::Initialize()
NuFmvFileExists(char*)
NuFmv::PauseAll()
NuFmv::ResumeAll()
NuFmv::PlayExclusiveV(NUFMVPLAYTOK, ...)
NuFmv::CreateMaterial(char const*, NuFile*, bool, bool, NuFmvExternalAudioStreamInterface*)
NuFmvMaterial::Recreate(NuFile* const&, char*, bool, NuFmvExternalAudioStreamInterface*)
NuFmvMaterial::Start()
NuFmvMaterial::Destroy()
NuFmvMaterial::UpdateFrame()
NuFmvMaterial::UpdateVolume(float)
NuFmvMaterial::UpdateMapping(float, float)
NuFmvMaterial::GetLength()
NuFmvMaterial::GetPosition()
NuFmvMaterial::GetMaterial()
fnaAssert_Print(char const*, ...)
fnaDebug(char const*, ...)
NuSoundSourceChroma::NuSoundSourceChroma(int, int)
NuSoundSourceChroma::~NuSoundSourceChroma()
NuSoundSourceChroma::~NuSoundSourceChroma()
NuSoundSourceChroma::OpenStream(bool)
NuSoundSourceChroma::CloseStream()
NuSoundSourceChroma::IsStreamOpen() const
NuSoundSourceChroma::RequestBuffer(bool, NuSoundWeakPtr<NuSoundBufferCallback>)
NuSoundSourceChroma::WriteData(void*, int)
NuSoundSourceChroma::Lock()
NuSoundSourceChroma::Unlock()
NuSoundSourceChroma::IsLocked() const
NuFmvStreamChromaBase::ClassInit()
NuFmvStreamChromaBase::MemAlloc(unsigned int)
NuFmvStreamChromaBase::MemAllocAligned(unsigned int, unsigned int)
NuFmvStreamChromaBase::MemFree(void*)
NuFmvStreamChromaBase::OpenFn(char const*, bool)
NuFmvStreamChromaBase::ReadFn(void*, void*, unsigned int)
NuFmvStreamChromaBase::SeekFn(void*, long, int)
NuFmvStreamChromaBase::CloseFn(void*)
NuFmvStreamChromaBase::ImposeFn(int)
NuFmvStreamChromaBase::GetFmvStreamChromaInterfaceGen(int)
NuFmvStreamChromaBase::PauseVoice()
NuFmvStreamChromaBase::ResumeVoice()
NuFmvStreamChromaBase::GetFmvStreamChromaInterfaceGen(CHROMA*)
NuFmvStreamChromaBase::GetFmvStreamChromaInterfaceGenFromThreadId()
NuFmvStreamChromaBase::OpenInternalSetupAudio(int)
NuFmvStreamChromaBase::OpenAudioStream(int, int, unsigned long, int)
NuFmvStreamChromaBase::CloseAudioStream()
NuFmvStreamChromaBase::CreateVoice()
NuFmvStreamChromaBase::DestroyVoice()
NuFmvStreamChromaBase::StartVoice()
NuFmvStreamChromaBase::StopVoice(bool)
NuFmvStreamChromaBase::GetAudioSamplesPlayed()
NuFmvStreamChromaBase::HasAudioFinished()
NuFmvStreamChromaBase::GetFmvVoice()
NuFmvStreamChromaBase::GetAudioStreamDescriptor()
NuFmvStreamChromaBase::VideoFuncFn(CHROMA*)
NuFmvStreamChromaBase::VideoFunc(CHROMA*)
NuFmvStreamChromaBase::AudioFuncFn(CHROMA*, void*, unsigned int)
NuFmvStreamChromaBase::AudioFunc(CHROMA*, void*, unsigned long)
NuFmvStreamChromaBase::NuFmvStreamChromaBase()
NuFmvStreamChromaBase::Open(char const*, NuFile*, int, NuSmartPtr<NuMtl, true> const&, unsigned int, NuFmvExternalAudioStreamInterface*)
NuFmvStreamChromaBase::ReOpen(char const*, NuFile*, unsigned int)
NuFmvStreamChromaBase::FindSoundTracks(TRACKINFO*, int, NuFmvStreamChromaBase::SoundTrackMapping*, int, int*)
NuFmvStreamChromaBase::OpenInternal()
NuFmvStreamChromaBase::Close()
NuFmvStreamChromaBase::CloseInternal()
NuFmvStreamChromaBase::GetNextFrame()
NuFmvStreamChromaBase::StopAudio(bool)
NuFmvStreamChromaBase::RenderDebug()
NuFmvStreamChromaBase::SetVolume(float)
NuFmvStreamChromaBase::~NuFmvStreamChromaBase()
NuFmvStreamChromaBase::~NuFmvStreamChromaBase()
NuFmvStreamChromaBase::Start()
NuFmvStreamChromaBase::Stop(bool)
NuFmvStreamChromaBase::GetPosition()
NuFmvStreamChromaBase::GetLength()
NuFmvStream::SaveSystemVolume()
NuFmvStream::RestoreSystemVolume()
NuFmvStream::DiscErrorHandler()
NuFmvStreamChromaBase::OpenInternalSetupTextures()
NuFmvStreamChromaBase::CloseInternalFreeTextures()
NuFmvStreamChromaBase::CloseInternalFreeAudio()
NuFmvStreamChromaBase::GetNextFrameInternalRender()
NuFmvStreamChromaBase::OpenPs(char const*, int, NuSmartPtr<NuMtl, true> const&, unsigned int)
NuFmvStreamChromaBase::ReOpenPs(char const*, unsigned int)
NuFmvStreamChromaBase::ClosePs()
NuSoundStreamDescChroma::~NuSoundStreamDescChroma()
NuSoundStreamDescChroma::GetDecodedDataFormat() const
NuSoundStreamDescChroma::GetEncodedLengthBytes() const
NuSoundStreamDescChroma::GetLengthSamples() const
NuSoundStreamDescChroma::GetLengthSeconds() const
NuSoundStreamDescChroma::GetDataOffset() const
NuSoundStreamDescChroma::GetNumChannels() const
NuSoundStreamDescChroma::GetSampleRate() const
NuSoundStreamDescChroma::GetBitsPerChannel() const
NuSoundStreamDescChroma::GetBlockSize() const
NuSoundStreamDescChroma::GetDecodedLengthBytes() const
NuFmvInitSubtitles(char*, nuvariptr_u*, nuvariptr_u, NUFNT*)
DrawSubtitles(float)
NuFmvInitialiseStreamsPs()
NuFmvGetInterfacePS(char const*, NuFmvStream**)
NuFmvStreamNNXMovie::ClassInit()
NuFmvStreamNNXMovie::NuFmvStreamNNXMovie()
NuFmvStreamNNXMovie::OpenInternal()
NuFmvStreamNNXMovie::CloseInternal()
NuFmvStreamNNXMovie::Open(char const*, NuFile*, int, NuSmartPtr<NuMtl, true> const&, unsigned int, NuFmvExternalAudioStreamInterface*)
NuFmvStreamNNXMovie::CreateExtractor(NuFile*, movie::ContainerType, movie::Extractor**)
NuFmvStreamNNXMovie::CreateDecoders(movie::Extractor*)
NuFmvStreamNNXMovie::AudioAndVideoInputReadThreadFunction(void*)
NuFmvStreamNNXMovie::AudioVideoWorkerThreadFunction(void*)
NuFmvStreamNNXMovie::SetupMaterial(NuSmartPtr<NuMtl, true> const&, int)
NuFmvStreamNNXMovie::Close()
NuFmvStreamNNXMovie::DestroyAudioSource()
NuFmvStreamNNXMovie::StopDecoder(movie::Decoder*)
NuFmvStreamNNXMovie::DestroyDecoder(movie::Decoder*)
NuFmvStreamNNXMovie::DestroyExtractor(movie::Extractor*)
NuFmvStreamNNXMovie::StopAndDestroyAudioVideoWorkerThread()
NuFmvStreamNNXMovie::Start()
NuFmvStreamNNXMovie::StartDecoder(movie::Decoder*)
NuFmvStreamNNXMovie::Stop(bool)
NuFmvStreamNNXMovie::FlushDecoder(movie::Decoder*)
NuFmvStreamNNXMovie::StopAndDestroyAudioAndVideoInputReaderThread()
NuFmvStreamNNXMovie::StopAudioVideoRenderer()
NuFmvStreamNNXMovie::Pause()
NuFmvStreamNNXMovie::Resume()
NuFmvStreamNNXMovie::SetVolume(float)
NuFmvStreamNNXMovie::GetNextFrame()
NuFmvStreamNNXMovie::GetPosition()
NuFmvStreamNNXMovie::GetLength()
NuFmvStreamNNXMovie::CreateAudioSource(int, int, unsigned long, int)
NuFmvStreamNNXMovie::WriteAudioData(void*, int)
NuFmvStreamNNXMovie::GetWidth() const
NuFmvStreamNNXMovie::GetHeight() const
NuFmvStreamNNXMovie::AddBufferToAudioIndexList(int)
NuFmvStreamNNXMovie::RemoveBufferFromAudioIndexList(int*)
NuFmvStreamNNXMovie::AddBufferToVideoIndexList(int)
NuFmvStreamNNXMovie::RemoveBufferFromVideoIndexList(int*)
NuFmvStreamNNXMovie::ReadInputDataFromExtractorSendTodecoder(ByteStreamReader*, int, movie::Decoder*)
NuFmvStreamNNXMovie::SendEosToDecoder()
NuFmvStreamNNXMovie::ReadInputDataFromExtractorSendTodecoder(int, movie::Decoder*)
NuFmvStreamNNXMovie::CheckForInputBuffersAndReadInputdataDecoder()
NuFmvStreamNNXMovie::SignalInputBufferAvailable()
NuFmvStreamNNXMovie::SignalAudioAndVideoInputReadThreadExit()
NuFmvStreamNNXMovie::SignalAudioVideoWorkerThreadExit()
NuFmvStreamNNXMovie::VideoInputBufferAvailableEvent()
NuFmvStreamNNXMovie::VideoOutputBufferAvailableEvent()
NuFmvStreamNNXMovie::CopyVideoFrameToTexture(int, long, unsigned int)
NuFmvStreamNNXMovie::VideoFormatChangedEvent()
NuFmvStreamNNXMovie::AudioInputBufferAvailableEvent()
NuFmvStreamNNXMovie::AudioOutputBufferAvailableEvent()
NuFmvStreamNNXMovie::AudioFormatChangedEvent()
NuFmvStreamNNXMovie::CreateDecoder(movie::Decoder**, movie::DecoderType, movie::DecoderOutputFormat)
NuFmvStreamNNXMovie::ConfigureDecoder(movie::Decoder*, movie::DecoderEvents*, movie::MediaData*)
NuFmvStreamNNXMovie::~NuFmvStreamNNXMovie()
NuFmvStreamNNXMovie::~NuFmvStreamNNXMovie()
NuFmvStream::RenderDebug()
ByteStreamReader::ByteStreamReader()
ByteStreamReader::~ByteStreamReader()
ByteStreamReader::Open(char const*, StreamFormat)
ByteStreamReader::Prepare()
ByteStreamReader::PrepareIVFStream()
ByteStreamReader::PrepareH264Stream()
ByteStreamReader::Close()
ByteStreamReader::ReadNextFrame(char*, int, int*, long*)
ByteStreamReader::ReadIVFNextFrame(char*, int, int*, long*)
ByteStreamReader::ReadH264NextFrame(char*, int, int*, long*)
ByteStreamReader::GetStreamProperties(movie::DecoderType*, int*, int*, double*)
ByteStreamReader::PrepareForLooping()
AudioOutRenderer::AudioOutRenderer()
AudioOutRenderer::~AudioOutRenderer()
AudioOutRenderer::Initialize()
AudioOutRendererThreadFunction(void*)
AudioOutRenderer::Finalize()
AudioOutRenderer::GetRenderInterval()
AudioOutRenderer::Open(movie::Decoder*, unsigned int, int)
AudioOutRenderer::Start()
AudioOutRenderer::Render()
AudioOutRenderer::Stop()
AudioOutRenderer::DoneProcessing()
AudioOutRenderer::IsAudioOutStarted()
AudioOutRenderer::Close()
AudioOutRenderer::OnOutputAvailable(int, long, unsigned int)
NuVector<AudioOutRenderer::audioData>::Reserve(unsigned int, bool)
NuFmvStream::NuFmvStream()
NuFmvStream::ReOpen(char const*, NuFile*, unsigned int)
NuFmvStream::RenderNextFrame(NuSmartPtr<NuMtl, true> const&, float, float, float, int)
NuFmvStream::ThreadCmdToString(NuFmvStream::ThreadCmd)
NuFmvStream::ThreadFn(void*)
NuThreadQueue<NuFmvStream::QueueItem, 32ul>::Pop(NuFmvStream::QueueItem&)
NuFmvStream::SendThreadCommand(NuFmvStream::ThreadCmd, int*)
NuFmvStream::WaitForThreadCommandResult(NuFmvStream::ThreadCmd, int*)
NuFmvStream::InstanceInit(NuFmvStream::InitStage)
NuThreadQueue<NuFmvStream::QueueItem, 32ul>::NuThreadQueue()
NuFmvStream::~NuFmvStream()
NuFmvStream::~NuFmvStream()
NuFmvStream::GetPosition()
NuFmvStream::GetLength()
NuThreadQueue<NuFmvStream::QueueItem, 32ul>::Push(NuFmvStream::QueueItem const&, unsigned int)
fnMaths_atox(char const*)
fnMaths_atox64(char const*)
fnMaths_atou(char const*)
fnMaths_x32rand()
fnMaths_rand()
fnMaths_u32rand(unsigned int)
fnMaths_u32rand_norep(unsigned int, unsigned int)
fnMaths_lrotl(unsigned int, int)
fnMaths_seed(unsigned int)
fnMaths_PerlinNoise_rand(unsigned int, unsigned int, unsigned int*, unsigned int)
fnMaths_sqrt(float)
fnMaths_sin(float)
fnMaths_cos(float)
fnMaths_sincos(float, float*, float*)
fnMaths_tan(float)
fnMaths_asin(float)
fnMaths_acos(float)
fnMaths_atan(float)
fnMaths_atan2(float, float)
fnMaths_power(float, float)
fnMaths_fmod(float, float)
fnMaths_TaylorSine(float)
fnMaths_TaylorCosine(float)
fnMaths_cbits(unsigned int)
fnMaths_ctz(unsigned int)
fnMaths_flp2(unsigned int)
fnMaths_clp2(unsigned int)
fnMaths_GetFirstZeroBit(unsigned int)
fnMaths_GetBarycentricCoordinates(f32vec3*, f32vec3 const* const*, f32vec3 const*, f32vec3 const*)
fnMaths_AngleDiff(float, float)
fnMaths_AngleLerp(float, float, float)
fnMaths_SolveQuadraticEqn(float, float, float, float*)
fnMaths_SolveQuadraticEqn(float, float, float, float*, float)
fnMaths_PerlinNoise_cosine_interpolate(float, float, float)
fnMaths_PerlinNoise_cubic_interpolate(float, float, float, float, float)
fnMaths_PerlinNoise_smooth(int, int, float (*)(int, int))
fnMaths_PerlinNoise_interpolate(float, float, float (*)(int, int), unsigned int)
fnMaths_PerlinNoise_calculate(float, float, float, unsigned int, float (**)(int, int), unsigned int)
fnMaths_PerlinNoise_smooth(int, float (*)(int))
fnMaths_PerlinNoise_interpolate(float, float (*)(int), unsigned int)
fnMaths_PerlinNoise_calculate(float, float, unsigned int, float (**)(int), unsigned int)
fnMaths_PerlinNoise_seed(unsigned int, unsigned int*, unsigned int)
fnMaths_lerp(float, float, float)
fnMaths_smoothstep(float, float, float)
fnMaths_step(float, float, float)
fnMaths_normaliseToRange(float, float, float)
fnMaths_remapRange(float, float, float, float, float)
fnMaths_remapRangeSmooth(float, float, float, float, float)
fnMaths_Clamp(float, float, float)
fnMaths_NextPrime(unsigned int)
fnMem_Free(void*)
fnMemint_AllocAligned(unsigned int, unsigned int, bool)
fnMem_GetCurrentPool()
fnMem_ScratchStart(fnMEMSCRATCHMODE)
fnMem_ScratchEnd()
Chroma_Alloc(unsigned int)
Chroma_AllocAligned(unsigned int, unsigned int)
Chroma_Free(void*)
Chroma_FreeAligned(void*)
Chroma_ReadFrameChunk(FMVHANDLE*, int*)
Chroma_ReadFrame(FMVHANDLE*)
fnaDebug(...)
Chroma_DecodeVideoFrame(FMVHANDLE*, bool)
Chroma_DecodeAudioFrame(FMVHANDLE*)
Chroma_DecodeFrame(FMVHANDLE*, bool)
Chroma_OpenVideo(char const*, bool, void (*)(CHROMA*), void (*)(CHROMA*, void*, unsigned int), void*, TRACKCHANNELMAP const*, unsigned int)
Chroma_GetTrackList(char const*, TRACKINFO*, unsigned int)
Chroma_CloseVideo(FMVHANDLE*)
Chroma_SetFileCallbacks(void* (*)(char const*, bool), unsigned int (*)(void*, void*, unsigned int), void (*)(void*, long, int), void (*)(void*))
Chroma_SetMemory(void* (*)(unsigned int), void* (*)(unsigned int, unsigned int), void (*)(void*), void (*)(void*))
Chroma_GenColorConversionPalettes()
geti(void*, int)
puti(void*, unsigned long, int)
_RLE_WriteRep(unsigned char*, unsigned int*, unsigned char, unsigned char, unsigned int)
_RLE_WriteNonRep(unsigned char*, unsigned int*, unsigned char, unsigned char)
RLE_Encode(unsigned char*, unsigned char*, unsigned int)
RLE_Decode(unsigned char*, unsigned char*, unsigned int)
VideoDecode_FillBlock(CHROMA*, unsigned int, unsigned int, unsigned char, unsigned char, unsigned char)
VideoDecode_CopyBlock(CHROMA*, unsigned int, unsigned int, short, short)
VideoDecode_GetHuffmanTable(CHROMA*, int, int)
VideoDecode_SetupMovieHeader(CHROMA*)
VideoDecode_BuildDequantisationTables(CHROMA*)
VideoDecode_YCbCrToRGBRow(unsigned char*, unsigned char*, unsigned char*, unsigned char*, int)
VideoDecode_DecodeFrame(CHROMA*, unsigned char const*, int, unsigned char*, bool)
VideoDecode_ColourTablesInit()
VideoDecode_ColourTablesExit()
IDCT_Block(unsigned char*, int, short*, float*)
AudioDecode_DecodeAdpcm(AUDIOTRACK*, unsigned char*, unsigned int*, unsigned int)
Huffman_BuildTable(HUFFMAN*, int*)
Huffman_GrowBitBuffer(CHROMA*, int&)
Huffman_DecodeBlock(CHROMA*, short*, HUFFMAN*, HUFFMAN*, int)
Huffman_GetYCbCrFill(CHROMA*, unsigned char*, unsigned char*, unsigned char*)
Huffman_GetMotionVector(CHROMA*, short*, short*)
NuUbershaderBytecodeCache::ProgramByteCode::ProgramByteCode()
NuUbershaderBytecodeCache::ProgramByteCode::~ProgramByteCode()
NuUbershaderBytecodeCache::ProgramByteCode::Release()
NuUbershaderBytecodeCache::ProgramByteCode::~ProgramByteCode()
NuUbershaderBytecodeCache::ProgramByteCode::Serialize(NuSerialize&)
NuUbershaderBytecodeCache::ShaderByteCode::ShaderByteCode()
NuUbershaderBytecodeCache::ShaderByteCode::~ShaderByteCode()
NuUbershaderBytecodeCache::ShaderByteCode::Release()
NuUbershaderBytecodeCache::ShaderByteCode::~ShaderByteCode()
NuUbershaderBytecodeCache::ShaderByteCode::Serialize(NuSerialize&)
NuUbershaderBytecodeCache::NuUbershaderBytecodeCache()
NuUbershaderBytecodeCache::Stats::Stats()
NuUbershaderBytecodeCache::Reset()
NuUbershaderBytecodeCache::~NuUbershaderBytecodeCache()
NuUbershaderBytecodeCache::Init(char const*, bool, char const*)
NuUbershaderBytecodeCache::UpdateEngineHash()
NuUbershaderBytecodeCache::RequestQueue::Init()
NuUbershaderBytecodeCache::GetEngineHash() const
NuUbershaderBytecodeCache::InterpolantSort(NuUbershaderBytecodeCache::Interpolant::T const&, NuUbershaderBytecodeCache::Interpolant::T const&)
NuUbershaderBytecodeCache::RefreshShaderCode()
NuUbershaderBytecodeCache::Stats::Reset()
NuUbershaderBytecodeCache::GetShaderBytecode(NuShaderDesc const&, NuMtl::Shader::T, NuString*, NuHash*)
NuUbershaderBytecodeCache::LookupShaderCaches(NuHash, GPUVendor::T)
NuUbershaderBytecodeCache::CompileShader(NuShaderDesc const&, NuMtl::Shader::T, NuString*)
NuUbershaderBytecodeCache::GetShaderBytecode(NuHash)
NuUbershaderBytecodeCache::GetShaderBytecodeAS(NuShaderDesc const&, NuUbershaderBytecodeCache::ShaderByteCode const**, NuMtl::Shader::T, NuString*, NuHash*)
NuUbershaderBytecodeCache::LookupRuntimeCache(NuHash)
NuUbershaderBytecodeCache::RequestQueue::Push(NuUbershaderBytecodeCache::AsynchronousRequest const&)
NuUbershaderBytecodeCache::GetShaderBytecodeNet(NuShaderDesc const&, bool, NuHash*)
NuUbershaderBytecodeCache::OnConnection(NuClientServer::Connection*)
NuUbershaderBytecodeCache::ReleaseBytecode(NuUbershaderBytecodeCache::ShaderByteCode const*)
NuUbershaderBytecodeCache::DeleteShaderByteCode(NuUbershaderBytecodeCache::ShaderByteCode*)
NuUbershaderBytecodeCache::ReleaseUnreferencedBytecodes()
NuUbershaderBytecodeCache::Serialize(NuSerialize&, unsigned int)
NuUbershaderBytecodeCache::LookupRuntimeCache(NuUbershaderBytecodeCache::ShaderByteCode const&)
NuUbershaderBytecodeCache::ProcessLoadedShader(NuUbershaderBytecodeCache::ShaderByteCode*)
NuUbershaderBytecodeCache::GetShaderCount(unsigned int)
NuUbershaderBytecodeCache::RemoveSceneBytecodeReferences(NuVector<unsigned int> const&)
NuUbershaderBytecodeCache::CleanupDiskCache()
NuString::~NuString()
NuUbershaderBytecodeCache::LookupVertexProgramCaches(NuHash, GPUVendor::T)
NuUbershaderBytecodeCache::LookupPixelProgramCaches(NuHash, GPUVendor::T)
NuUbershaderBytecodeCache::AddShaderToCaches(NuUbershaderBytecodeCache::ShaderByteCode*, NuHash, bool, bool)
NuUbershaderBytecodeCache::InProgressQueue::RemoveFromInProgressList(NuHash const&)
NuUbershaderBytecodeCache::ResolveHashIncludes(StringBuffer&, StringBuffer&)
NuUbershaderBytecodeCache::UpdateShaderCodeHash()
NuUbershaderBytecodeCache::GetShaderCodeHash() const
NuUbershaderBytecodeCache::CreateBytecode(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*&, NuUbershaderBytecodeCache::ProgramByteCode*&, NuShaderVariableUsageMask&, NuBitVector<55u, unsigned int>&, NuMtl::Shader::T, char const*)
NuUbershaderBytecodeCache::CreateBytecodeGLES2(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*&, NuUbershaderBytecodeCache::ProgramByteCode*&, NuBitVector<55u, unsigned int>&, bool)
NuUbershaderBytecodeCache::CreateBytecodePC(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*&, NuUbershaderBytecodeCache::ProgramByteCode*&, NuBitVector<55u, unsigned int>&, bool)
NuUbershaderBytecodeCache::CreateBytecodeMac(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*&, NuUbershaderBytecodeCache::ProgramByteCode*&, NuBitVector<55u, unsigned int>&, bool)
NuUbershaderBytecodeCache::CreateBytecode360(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*, NuUbershaderBytecodeCache::ProgramByteCode*, NuBitVector<55u, unsigned int>&, bool)
NuUbershaderBytecodeCache::CreateBytecodePSP2(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*, NuUbershaderBytecodeCache::ProgramByteCode*, NuShaderVariableUsageMask&, NuBitVector<55u, unsigned int>&, bool)
NuUbershaderBytecodeCache::CreateBytecodeCAFE(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*, NuUbershaderBytecodeCache::ProgramByteCode*, NuBitVector<55u, unsigned int>&, bool)
NuUbershaderBytecodeCache::CreateBytecodePS3(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*, NuUbershaderBytecodeCache::ProgramByteCode*, NuBitVector<55u, unsigned int>&, bool)
NuUbershaderBytecodeCache::CreateBytecodeDurango(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*&, NuUbershaderBytecodeCache::ProgramByteCode*&, NuBitVector<55u, unsigned int>&, bool)
NuUbershaderBytecodeCache::CreateBytecodeOrbis(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*&, NuUbershaderBytecodeCache::ProgramByteCode*&, NuBitVector<55u, unsigned int>&, bool)
NuUbershaderBytecodeCache::CreateBytecodeNX(NuShaderDesc const&, StringBuffer&, StringBuffer&, bool, NuUbershaderBytecodeCache::ProgramByteCode*&, NuUbershaderBytecodeCache::ProgramByteCode*&, NuBitVector<55u, unsigned int>&, bool)
PrintShaderErrorSimple(char const*)
PrintShaderError(NuShaderErrorFormat, char const*, char const*, char const*, char const*)
NuUbershaderBytecodeCache::GetPSP2Param(void const*, char const*)
NuUbershaderBytecodeCache::ConvertShaderFloatsToHalfs(StringBuffer&)
NuUbershaderBytecodeCache::LocateCGCBinaries()
NuUbershaderBytecodeCache::LocateNNXTool(NuDynamicStringT<false> const&, NuDynamicStringT<false>&)
NuUbershaderBytecodeCache::PackInterpolants(NuBitVector<55u, unsigned int> const&, bool&, NuString*, bool)
NuUbershaderBytecodeCache::PrintInterpolantCode(NuShaderDesc const&, StringBuffer&, NuUbershaderBytecodeCache::PackedInterpolants const&, NuBitVector<55u, unsigned int> const&)
NuUbershaderBytecodeCache::AddLegacySymbols(NuShaderDesc const&, NuShaderPreProcessor&)
NuUbershaderBytecodeCache::FindAvailableUVSet(int, bool*, int, eSHADERVERSION)
NuUbershaderBytecodeCache::ClearStats()
NuUbershaderBytecodeCache::PrintStats(unsigned int)
NuShaderFile::NuShaderFile(char const*, bool, char*, int)
NuShaderFile::SetFromGlobal(char*, int)
NuShaderFile::LoadFromFile(char const*)
NuShaderFile::~NuShaderFile()
NuShaderFile::Reset()
NuShaderFile::Serialize(NuSerialize&)
NuUbershaderBytecodeCache::PauseForD3DDeviceReset()
NuUbershaderBytecodeCache::ResumeAfterD3DDeviceReset()
NuUbershaderBytecodeCache::InProgressQueue::InProgressQueue()
NuUbershaderBytecodeCache::InProgressQueue::Init()
NuUbershaderBytecodeCache::InProgressQueue::AddToInProgressList(NuHash const&)
NuUbershaderBytecodeCache::InProgressQueue::IsInProgressList(NuHash const&)
NuUbershaderBytecodeCache::InProgressQueue::WaitUntilEmpty()
NuUbershaderBytecodeCache::AsynchronousRequest::operator=(NuUbershaderBytecodeCache::AsynchronousRequest const&)
NuUbershaderBytecodeCache::RequestQueue::RequestQueue()
NuUbershaderBytecodeCache::RequestQueue::Pop()
NuUbershaderBytecodeCache::RequestQueue::PopAll(NuUbershaderBytecodeCache::AsynchronousRequest*, int)
NuUbershaderBytecodeCache::RequestQueue::WaitUntilEmpty()
NuUbershaderBytecodeCache::WorkerThreadFunc(void*)
NuUbershaderBytecodeCache::LocateWiiUTool(NuDynamicStringT<false> const&, NuDynamicStringT<false>&) const
NuUbershaderBytecodeCache::LocatePS4Tool(NuDynamicStringT<false> const&, NuDynamicStringT<false>&) const
NuUbershaderBytecodeCache::LocateDurangoTool(NuDynamicStringT<false> const&, NuDynamicStringT<false>&) const
NuVarArray<NuShaderFile*>::AdjustSize(unsigned int)
NuHashableBase<NuShaderFile>::GenerateHash() const
StringBuffer::StringBuffer(int, bool)
StringBuffer::~StringBuffer()
StringBuffer::reset()
StringBuffer::createCString() const
StringBuffer::setCapacity(int)
StringBuffer::append(char const*)
StringBuffer::append(char const*, int)
StringBuffer::append(int)
StringBuffer::indexOf(char const*, int) const
StringBuffer::isSubstring(int, char const*) const
StringBuffer::override(int, char const*)
StringBuffer::override(int, char const*, int)
StringBuffer::erase(int, int)
StringBuffer::insert(int, char const*)
StringBuffer::insert(int, char const*, int)
StringBuffer::replace(char const*, char const*)
NuShaderDataCommon::Flush(bool, bool, bool, void const*, unsigned int, wchar_t const*)
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)0>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)0> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)1>, true, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)1> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)2>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)2> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)3>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)3> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)4>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)4> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)5>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)5> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)6>, true, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)6> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)7>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)7> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)8>, true, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)8> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)9>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)9> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)10>, true, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)10> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)11>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)11> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)12>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)12> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)13>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)13> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)14>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)14> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)15>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)15> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)16>, true, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)16> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuUberShaderDataStruct<(NuShaderVariableGroup::T)17>, false, false, true, NuShaderVariableGroupMeta<(NuShaderVariableGroup::T)17> >::~NuShaderDataGeneric()
NuShaderVariableGroupRuntimeMeta::GetScopedVariableName(unsigned int, char*) const
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)0>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)0> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)1>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)1> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)2>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)2> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)3>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)3> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)4>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)4> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)5>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)5> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)6>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)6> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)7>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)7> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)8>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)8> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)9>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)9> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)10>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)10> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)11>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)11> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)12> [10], true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)12> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)13>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)13> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)14>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)14> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)15>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)15> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)16>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)16> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)17>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)17> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)18>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)18> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)19>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)19> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)20>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)20> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)21>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)21> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)22>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)22> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)23>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)23> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)24>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)24> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)25>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)25> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)26>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)26> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)27>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)27> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)28>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)28> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)29>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)29> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)30>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)30> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)31>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)31> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)32>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)32> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)33>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)33> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)34>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)34> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)35>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)35> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)36>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)36> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)37>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)37> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)38>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)38> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)39>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)39> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)40>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)40> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)41>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)41> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)42>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)42> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)43>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)43> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)44>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)44> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)45>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)45> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)46>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)46> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)47>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)47> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)48>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)48> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)49>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)49> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)50>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)50> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)51>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)51> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)52>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)52> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)53>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)53> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)54>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)54> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)55>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)55> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)56>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)56> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)57>, true, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)57> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)58>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)58> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)59>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)59> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)60>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)60> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)61>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)61> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)62>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)62> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)63>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)63> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)64>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)64> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)65>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)65> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)66>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)66> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)67>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)67> >::~NuShaderDataGeneric()
NuShaderDataGeneric<NuCustomShaderDataStruct<(NuCustomShaderVariableGroup::T)68>, false, false, true, NuCustomShaderVariableGroupMeta<(NuCustomShaderVariableGroup::T)68> >::~NuShaderDataGeneric()
NuCustomShaderVariableGroupRuntimeMeta::GetScopedVariableName(unsigned int, char*) const
NuShaderGlobalUpdate(dvDebugVarBase const*, void*)
NuShaderBuilderGlobals::NuShaderBuilderGlobals()
NuShaderBuilderGlobals::RegisterImposeParams()
NuSmartPtr<NuShaderBytecodeSet, true>::~NuSmartPtr()
NuClass_NuShaderBytecodeSet::~NuClass_NuShaderBytecodeSet()
NuShaderBytecodeSet::SetByteCodeCache(NuUbershaderBytecodeCache*)
NuShaderBytecodeSet::NuShaderBytecodeSet()
NuShaderBytecodeSet::~NuShaderBytecodeSet()
NuShaderBytecodeSet::~NuShaderBytecodeSet()
NuShaderBytecodeSet::GetResourceType() const
NuShaderBytecodeSet::Serialize(NuSerialize&)
NuShaderBytecodeSet::PreSerializeFixup(bool)
NuShaderBytecodeSet::PostSerializeFixup(NuSmartPtr<NuClassAbstractInstance, false>, bool)
NuShaderBytecodeSet::SetPlatformMask(unsigned int)
NuClass_NuShaderBytecodeSet::~NuClass_NuShaderBytecodeSet()
NuClass_NuShaderBytecodeSet::CreateObject() const
NuClass_NuShaderBytecodeSet::CreateObjectArray(unsigned int) const
NuClass_NuShaderBytecodeSet::PlacementNew(void*) const
NuClass_NuShaderBytecodeSet::SerializeObjectIn(NuArchive&, void*) const
NuClass_NuShaderBytecodeSet::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_NuShaderBytecodeSet::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_NuShaderBytecodeSet::~NuClass_NuShaderBytecodeSet()
non-virtual thunk to NuClass_NuShaderBytecodeSet::~NuClass_NuShaderBytecodeSet()
CharSys::Initialise(EdRegistry&)
CharSys::RegisterClasses(EdRegistry&)
CharSys::Process()
CharSys::Shutdown()
CharSys::SetDataPath(char const*)
CharSys::SetPakFileName(char const*)
CharSys::GetPakFileName()
CharSys::SetTexturePakFileName(char const*)
CharSys::GetTexturePakFileName()
CharSysSkeletonResourceInfoHelper::RegisterClasses(EdRegistry&)
CharSysAnimSetResourceInfoHelper::RegisterClasses(EdRegistry&)
CharSysCharDefResourceInfoHelper::RegisterClasses(EdRegistry&)
CharSysNuSceneResourceInfoHelper::RegisterClasses(EdRegistry&)
CharSysNUHGOBJResourceInfoHelper::RegisterClasses(EdRegistry&)
CharSysTextureResourceInfoHelper::RegisterClasses(EdRegistry&)
CharSys::BuildWildcard(char*, NUFILETYPE, char const*)
CharSys::BuildWildcard(char*, char const*, char const* const*, char const* const*, int)
CharSys::AllocString(char const*)
CharSys::FreeString(char const*)
CharSys::CalculateBounds(NuSmartPtr<NuScene, true>, NUVEC&, NUVEC&, float, float, nuanimdata2_s const*, nuanimdata2_s const*, char)
CharSys::CalculateBounds(NuSmartPtr<NuScene, true>, NUVEC&, NUVEC&, NUMTX const*, NUMTX const*, int, DEFORMERWEIGHTSARRAY*)
CharSys::CalculateBounds(nuhspecial_s const&, NUMTX const&, NUVEC&, NUVEC&, NUMTX const*, int, DEFORMERWEIGHTSARRAY const*)
CharSys::CalculateSkinnedVertex(NUVEC&, NUVEC&, unsigned int, unsigned int, NUMTX const*, int, NuVarArray<unsigned char> const&)
CharSysEdStringRef::AllocString(char const*)
CharSysEdStringRef::FreeString(char const*)
CharSysResourceFileNameRef::AllocString(char const*)
CharMaterialMap::CharMaterialMap(unsigned int)
CharMaterialMap::CharMaterialMap(CharMaterialMap const&)
CharMaterialMap::~CharMaterialMap()
CharMaterialMap::Push() const
CharTextureMap::CharTextureMap(unsigned int)
CharTextureMap::CharTextureMap(CharTextureMap const&)
CharTextureMap::~CharTextureMap()
CharTextureMap::Push() const
CharLayerSpecialsMap::CharLayerSpecialsMap()
CharLayerSpecialsMap::CharLayerSpecialsMap(CharLayerSpecialsMap const&)
CharOBB::Merge(CharOBB const&, CharOBB const&, CharOBB&)
CharOBB::GetOBB(NUMTX const&, CharOBB&) const
CharOBB::CharOBB()
CharOBB::CharOBB(NUMTX const&, NUVEC const&, NUVEC const&)
CharOBB::Set(NUMTX const&, NUVEC const&, NUVEC const&)
CharOBB::GetLocalSize(NUVEC&) const
CharOBB::GetWorldSize(NUVEC&) const
CharOBB::GetLocalCentrePos(NUVEC&) const
CharOBB::GetWorldCentrePos(NUVEC&) const
CharOBB::GetLocalSphereRadius() const
CharOBB::GetWorldSphereRadius() const
CharOBB::GetLocalCapsuleDimensions(float&, float&) const
CharOBB::GetWorldCapsuleDimensions(float&, float&) const
CharOBB::IsVisible() const
CharOBB::Merge(CharOBB const&)
CharSysResourceMemoryEstimate::CharSysResourceMemoryEstimate()
CharSysResourceMemoryEstimate::CharSysResourceMemoryEstimate(CharSysResourceMemoryEstimate const&)
CharSysResourceMemoryEstimate::operator+=(CharSysResourceMemoryEstimate const&)
CharSysResourceMemoryEstimate::IsAvailable() const
operator+(CharSysResourceMemoryEstimate const&, CharSysResourceMemoryEstimate const&)
CharSysResourceMemoryEstimateHelper::RegisterClasses(EdRegistry&)
CharSysResourceDependency::CharSysResourceDependency()
CharSysResourceDependency::~CharSysResourceDependency()
CharSysResourceDependency::Fixup()
CharSysResourceDependency::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharSysResourceDependency::GetResourceInfoMemSize() const
CharSysResourceDependency::CopyResourceInfo(nuvariptr_u&) const
CharSysResourceInfoRef::CharSysResourceInfoRef()
CharSysResourceInfoRef::~CharSysResourceInfoRef()
CharSysResourceInfoRef::~CharSysResourceInfoRef()
CharSysResourceInfoRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharSysResourceDependencyHelper::RegisterClasses(EdRegistry&)
CharSysResourceDependencyHelper::CharSysResourceDependencyHelper()
CharSysResourceDependencyHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSysResourceDependencyHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSysResourceDependencyHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharSysResourceDependencyList::CharSysResourceDependencyList()
CharSysResourceDependencyList::~CharSysResourceDependencyList()
CharSysResourceDependencyList::Clear()
CharSysResourceDependencyList::Fixup()
CharSysResourceDependencyList::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharSysCharDefResourceInfo::~CharSysCharDefResourceInfo()
CharSysResourceInfo::~CharSysResourceInfo()
CharSysResourceInfo::Fixup()
CharSysResourceInfoHelper::RegisterClasses(EdRegistry&)
CharSysSkeletonResourceInfo::CharSysSkeletonResourceInfo(char const*)
CharSysSkeletonResourceInfo::CharSysSkeletonResourceInfo(CharSysSkeletonResourceInfo const&)
CharSysSkeletonResourceInfo::~CharSysSkeletonResourceInfo()
CharSysSkeletonResourceInfo::Fixup()
CharSysSkeletonResourceInfo::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharSysSkeletonResourceInfo::GetResourceInfoMemSize() const
CharSysSkeletonResourceInfo::CopyResourceInfo(nuvariptr_u&) const
CharSysSkeletonResourceInfoHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSysSkeletonResourceInfoHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSysAnimSetResourceInfo::CharSysAnimSetResourceInfo(char const*)
CharSysAnimSetResourceInfo::CharSysAnimSetResourceInfo(CharSysAnimSetResourceInfo const&)
CharSysAnimSetResourceInfo::~CharSysAnimSetResourceInfo()
CharSysAnimSetResourceInfo::Fixup()
CharSysAnimSetResourceInfo::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharSysAnimSetResourceInfo::GetResourceInfoMemSize() const
CharSysAnimSetResourceInfo::CopyResourceInfo(nuvariptr_u&) const
CharSysAnimSetResourceInfoHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSysAnimSetResourceInfoHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSysCharDefResourceInfo::CharSysCharDefResourceInfo(char const*)
CharSysCharDefResourceInfo::CharSysCharDefResourceInfo(CharSysCharDefResourceInfo const&)
CharSysCharDefResourceInfo::~CharSysCharDefResourceInfo()
CharSysCharDefResourceInfo::Fixup()
CharSysCharDefResourceInfo::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharSysCharDefResourceInfo::GetResourceInfoMemSize() const
CharSysCharDefResourceInfo::CopyResourceInfo(nuvariptr_u&) const
CharSysCharDefResourceInfoHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSysCharDefResourceInfoHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSysNuSceneResourceInfo::CharSysNuSceneResourceInfo(char const*)
CharSysNuSceneResourceInfo::CharSysNuSceneResourceInfo(CharSysNuSceneResourceInfo const&)
CharSysNuSceneResourceInfo::~CharSysNuSceneResourceInfo()
CharSysNuSceneResourceInfo::Fixup()
CharSysNuSceneResourceInfo::IsAlreadyLoaded() const
CharSysNuSceneResourceInfo::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharSysNuSceneResourceInfo::GetResourceInfoMemSize() const
CharSysNuSceneResourceInfo::CopyResourceInfo(nuvariptr_u&) const
CharSysNuSceneResourceInfoHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSysNuSceneResourceInfoHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSysNUHGOBJResourceInfo::CharSysNUHGOBJResourceInfo(char const*)
CharSysNUHGOBJResourceInfo::CharSysNUHGOBJResourceInfo(CharSysNUHGOBJResourceInfo const&)
CharSysNUHGOBJResourceInfo::~CharSysNUHGOBJResourceInfo()
CharSysNUHGOBJResourceInfo::Fixup()
CharSysNUHGOBJResourceInfo::IsAlreadyLoaded() const
CharSysNUHGOBJResourceInfo::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharSysNUHGOBJResourceInfo::GetResourceInfoMemSize() const
CharSysNUHGOBJResourceInfo::CopyResourceInfo(nuvariptr_u&) const
CharSysNUHGOBJResourceInfoHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSysNUHGOBJResourceInfoHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSysTextureResourceInfo::CharSysTextureResourceInfo(char const*, char const*, char const*)
CharSysTextureResourceInfo::CharSysTextureResourceInfo(CharSysTextureResourceInfo const&)
CharSysTextureResourceInfo::~CharSysTextureResourceInfo()
CharSysTextureResourceInfo::Fixup()
CharSysTextureResourceInfo::IsAlreadyLoaded() const
CharSysTextureResourceInfo::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharSysTextureResourceInfo::GetResourceInfoMemSize() const
CharSysTextureResourceInfo::CopyResourceInfo(nuvariptr_u&) const
CharSysTextureResourceInfoHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSysTextureResourceInfoHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSysEdStringRef::~CharSysEdStringRef()
CharSysResourceFileNameRef::~CharSysResourceFileNameRef()
CharSysResourceDependencyHelper::~CharSysResourceDependencyHelper()
CharSysResourceDependencyHelper::~CharSysResourceDependencyHelper()
non-virtual thunk to CharSysResourceDependencyHelper::~CharSysResourceDependencyHelper()
non-virtual thunk to CharSysResourceDependencyHelper::~CharSysResourceDependencyHelper()
CharSysSkeletonResourceInfoHelper::~CharSysSkeletonResourceInfoHelper()
CharSysAnimSetResourceInfoHelper::~CharSysAnimSetResourceInfoHelper()
CharSysCharDefResourceInfoHelper::~CharSysCharDefResourceInfoHelper()
CharSysNuSceneResourceInfoHelper::~CharSysNuSceneResourceInfoHelper()
CharSysNUHGOBJResourceInfoHelper::~CharSysNUHGOBJResourceInfoHelper()
CharSysTextureResourceInfoHelper::~CharSysTextureResourceInfoHelper()
CharSysResourceMemoryEstimateHelper::~CharSysResourceMemoryEstimateHelper()
CharSysResourceInfoHelper::~CharSysResourceInfoHelper()
CharInstList::~CharInstList()
CharGroundInfo::CharGroundInfo(NUVEC const&, NUVEC const&, NUVEC const&)
CharInst::DestroyAll()
CharInst::CharInst(CharDefResourceHndl const&, LevelContainer const&, Placeable*, bool, CharInst::KrawlyMode)
CMList<CharInst*>::Append(CharInst* const&, CMList<CharInst*>::ListLink*)
CharInst::InitCreatureIk()
CharInst::Reset()
CharInst::~CharInst()
CharInst::Clear()
CharInst::Activate(DynoScene*)
CharAttachmentInst::Activate(DynoScene*)
CharInst::Deactivate()
CharInst::ClearAnims(CharAnimState*)
CharAttachmentInst::Deactivate()
CharInst::DestroyJointMatrices()
CharInst::DestroyBlendShapeWeights()
CharInst::DestroyAttachments()
CharInst::ClearRagdoll()
CharInst::ResetTextures()
CharInst::ClearGroundInfo()
CharInst::ResetLayers(int)
CharInst::ResetAlpha()
CharInst::ResetTint()
CharInst::ResetAttachments()
CharInst::EvalAnimsUpdate(float)
CharInst::ResetToDefaults()
CharAnimState::OnTriggerEvent(CharAnimTriggerEvent)
CharInst::SetAnim(CharAnimEntry const*, int, float*)
CharInst::SetAnim(int, int, float*)
CharInst::MainUpdate(float)
CharAnimState::Update(float, float, float&, NUVEC&, NUQUAT&, float*)
CharAttachmentInst::MainUpdate(float)
CharInst::HasTrackRoot(char) const
CharInst::SetCutsceneOverride(nuanimdata2_s*, nuanimdata2_s*, float, nuanimdata2_s**, nuanimdata2_s**)
CharInst::SetCutsceneOverride(NuANI4AnimRaw*, int, int, float)
CharInst::GetWeightOfNonTrackRootAnims(float*)
CharInst::CalculateEvalAnimsPriority() const
CharInst::Update(float)
CharInst::EarlyUpdate()
CharInst::PreMoveUpdate(float)
CharInst::PostMoveUpdate(float)
CharInst::PostPhysicsUpdate(float, Phantom*)
CharInst::CacheFootPivotPoint()
CharAttachmentInst::EarlyUpdate()
CharInst::UpdateKrawly()
CharInst::UpdateLOD()
CharInst::GetAnimLODModel() const
CharInst::AccumulateAnims(CharacterPose&)
CharAttachmentInst::PreMoveUpdate(float)
CharInst::SetRootMatrix(NUMTX const&, bool)
CharInst::UpdateIK(float, CharacterPose&)
CharInst::UpdateRagdollHierachyBlend(float, CharacterPose&)
CharInst::EvaluateCharacterPose(CharacterPose&)
CharAttachmentInst::PostMoveUpdate(float)
CharInst::UpdateRagdollRenderBlend()
CharInst::DoRagDollStateMachine()
CharInst::EvalBlobShadows()
CharInst::EvalGroundInfo(Phantom*)
CharAttachmentInst::PostPhysicsUpdate(float)
CharInst::AccumulateAttachmentAnims(bool&, int, CharInst&, CharacterPose&, float*, int, unsigned char*&)
CharAnimState::AccumulateAnims(bool&, CharacterPose&, float*, int, unsigned char*&)
CharAnimState::AccumulateAttachmentAnims(bool&, int, CharInst&, CharacterPose&, float*, int, unsigned char*&)
NuTransform::NuTransform(NuMatrixBase const&)
CharAttachmentInst::OnRootMtxChanged(NUMTX const&, NUMTX const&, bool)
CharInst::CalculateOBB(CharOBB&, NUMTX const*, bool, bool, bool) const
CharInst::GetTopLODModel() const
CharInst::CalculateRagdollOBB(CharOBB&) const
CharAttachmentInst::CalculateOBB(CharOBB&, NUMTX const*) const
CharAnimState::HasKrawlyAnim() const
CharAnimState::HasTrackRoot() const
CharAnimState::InvalidateKrawlyAnimInfo()
CharAttachmentInst::UpdateLOD()
CharInst::Render(NUMTX*, NUMTX*, float*, long*, float*)
CharInst::GetRenderLODModel() const
CharInst::GetLocalJointMtx(int, NUMTX&) const
CharAnimState::GetKrawlyAnim(int&, int&, float&)
CharAttachmentInst::Render(long, float, float, NUMTX*, bool)
CharInst::RenderBlobShadows()
FindAnglesZX2(NUVEC const*, unsigned short*, unsigned short*)
CharInst::RenderBlobShadow(CharGroundInfo const&, float, float)
CharInst::GetLODAnim(nuanimdata2_s*)
CharInst::GetLocalLocatorMtx(int, NUMTX&) const
CharInst::GetWorldLocatorMtx(int, NUMTX&) const
CharInst::GetLocalLocatorPos(int, NUVEC&) const
CharInst::GetWorldLocatorPos(int, NUVEC&) const
CharInst::GetWorldJointMtx(int, NUMTX&) const
CharInst::CalcLocalJointMtx(int, int, NUMTX&, float) const
CharInst::CalcWorldJointMtx(int, int, NUMTX&, float) const
CharInst::CalcLocalLocatorMtx(int, int, NUMTX&, float) const
CharInst::CalcWorldLocatorMtx(int, int, NUMTX&, float) const
CharInst::CalculateTotalJointMatrixCount() const
CharInst::EnableRigidObjectLayers(RigidObject const&, bool)
CharInst::EnableJointLayers(int, bool)
CharInst::SetRunTimeTint(NUCOLOUR3 const&, bool)
CharInst::SetDisableRender(bool, bool)
CharAttachmentInst::UpdateLightVisibility()
CharInst::AdjustFootPivotVelocity(VuVec&, float)
CharInst::ClearFootPivotPoint()
CharInst::CalculateGroundInfo(NUVEC const&, float, DynoScene*, Phantom*)
CharInst::SetAttachment(CharAttachmentDef const&)
CharInst::AddSceneObjectAttachment(int, SceneObject&, int, int, NUCOLOUR3 const&, NUMTX const&)
CharInst::AddLightObjectAttachment(int, DynamicLight&, int, int, NUMTX const&)
CharInst::AddSeatObjectAttachment(int, SeatObject&, int, int, NUMTX const&, bool, int)
CharInst::AddCharacterAttachment(int, CharInst&, int, int, NUMTX const&)
CharInst::SetAttachment(CharAttachmentInst*)
CharInst::DestroyAttachment(int)
CharInst::ResetAttachment(int)
CharInst::GetAttachments() const
CharInst::GetAttachment(int) const
CMList<CharAttachmentInst*>::Append(CharAttachmentInst* const&, CMList<CharAttachmentInst*>::ListLink*)
CharAttachmentInst::UpdatePosition(float)
CharAnimFrameEvent::CharAnimFrameEvent(float, float, int, CharAnimFrameEvent::FrameEventType)
CharAnimFrameEventList::AddFrameEvent(float, float, int, CharAnimFrameEvent::FrameEventType)
CharAnimState::CharAnimState(CharInst&, CharAnimEntry const&, int, float, float, long, bool, bool, bool, float, bool, bool)
CharAnimState::CharAnimState(CharInst&, nuanimdata2_s*, nuanimdata2_s*, float, nuanimdata2_s**, nuanimdata2_s**)
CharAnimState::CharAnimState(CharInst&, NuANI4AnimRaw*, int, int, float)
CharAnimState::~CharAnimState()
CharAnimState::Reset()
CharAnimState::ResetFrameRate()
CharAnimState::GetSpeedScale() const
CharAnimState::SetPlayBackwards(bool, bool)
CharAnimState::GetFrameEvents(CharAnimFrameEventList&, float, float) const
CharAnimState::ApplyTrackRoot(float, float, float, float, NUVEC&, NUQUAT&) const
CharAnimState::Sync(CharAnimState const&)
CharAnimState::LockJointAnim(int) const
CharAnimState::UnlockJointAnim(int) const
CharAnimState::LockBlendShapeAnim(int) const
CharAnimState::UnlockBlendShapeAnim(int) const
CharAnimState::LockTextureAnim(int) const
CharAnimState::UnlockTextureAnim(int) const
CharAnimState::LockAttachmentJointAnim(int, CharInst&, int) const
CharAnimState::UnlockAttachmentJointAnim(int, CharInst&, int) const
CharAnimState::LockAttachmentBlendShapeAnim(int, CharInst&, int) const
CharAnimState::UnlockAttachmentBlendShapeAnim(int, CharInst&, int) const
CharAnimState::LockAttachmentTextureAnim(int, CharInst&, int) const
CharAnimState::UnlockAttachmentTextureAnim(int, CharInst&, int) const
CharAnimState::CalculateTrackRootMatrix(float, float) const
CharAttachmentInst::CharAttachmentInst(CharInst&, int, SceneObject&, int, int, NUCOLOUR3 const&, NUMTX const&)
CharAttachmentInst::CharAttachmentInst(CharInst&, int, DynamicLight&, int, int, NUMTX const&)
CharAttachmentInst::CharAttachmentInst(CharInst&, int, SeatObject&, int, int, NUMTX const&, bool, int)
CharAttachmentInst::CharAttachmentInst(CharInst&, int, CharInst&, int, int, NUMTX const&)
CharAttachmentInst::~CharAttachmentInst()
CharAttachmentInst::~CharAttachmentInst()
CharAttachmentInst::SetOffsetMtx(NUMTX const&)
CharAttachmentInst::CalculateSceneObjectLOD(SceneObject*) const
CharAnimEntryParams::CharAnimEntryParams()
CharAnimEntryParams::CharAnimEntryParams(char const*, char const*)
CharAnimEntryParams::~CharAnimEntryParams()
CharAnimEntry::SetAppDataClass(EdClass*)
CharAnimEntry::GetPakFileType(CharAnimSourceFileType, PLATFORMS_SUPPORTED)
CharAnimEntry::CharAnimEntry(CharAnimEntryParams const*)
CharAnimEntry::~CharAnimEntry()
CMList<CharAnimTrigger*>::DeleteAll()
CMList<CharAttachmentAnim*>::DeleteAll()
CharAnimEntry::Fixup()
CharAnimEntry::FixupTriggers()
CharAnimEntry::FixupAttachmentAnims()
CharAnimEntry::FixupAppData()
CharAnimEntry::OnSkeletonLoaded()
CharAnimEntry::SetupAttachmentAnimMap()
CharAttachmentAnim::Fixup()
CharAnimEntry::LoadResources(bool, bool)
CharAnimEntry::LoadAnims(bool, bool)
CharAnimEntry::LoadTriggers(bool)
CharAnimEntry::LoadAttachmentAnims(bool, bool)
CharAnimEntry::OnResourcesLoaded()
CharAnimEntry::UnloadResources()
CharAnimEntry::UnloadAnims()
CharAnimEntry::UnloadTriggers()
CharAnimEntry::UnloadAttachmentAnims()
CharAnimEntry::AreResourcesLoaded() const
CharAttachmentAnim::AreResourcesLoaded() const
CharAnimEntry::SetProcessFilterID(int)
CharAttachmentAnim::SetProcessFilterID(int)
CharAnimEntry::FixupAnimIds()
CharAnimEntry::GetAnimFileName(char*, CharAnimSourceFileType, int) const
CharAnimEntry::ReloadAnims()
CharAttachmentAnim::LoadResources(bool, bool)
CharAttachmentAnim::UnloadResources()
CharAnimEntry::CreateTriggerUpdateData(CharAnimState&, CharAnimTriggerUpdateDataList&) const
CharAnimEntry::OnTriggerEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateDataList&) const
CharAnimEntry::FindFirstTriggerRangeEnterFrame(float, bool) const
CharAnimEntry::FindFirstTriggerRangeExitFrame(float, bool) const
CharAnimEntry::CalcJointMtx(NuSmartPtr<NuScene, true>, int, NUMTX&, float, unsigned int, float) const
CharAnimEntry::CalcJointMtxByIndex(NuSmartPtr<NuScene, true>, int, NUMTX&, float, unsigned int, float) const
CharAnimEntry::CalcLocatorMtx(NuSmartPtr<NuScene, true>, int, NUMTX&, float, unsigned int, float) const
CharAnimEntry::CalcRootMtx(NuSmartPtr<NuScene, true>, NUMTX&, float, unsigned int, float) const
CharAnimEntry::CalcRootPosition(NuSmartPtr<NuScene, true>, NUVEC&, float, unsigned int, float) const
CharAnimEntry::CalcRootOrientation(NuSmartPtr<NuScene, true>, NUQUAT&, float, unsigned int, float) const
CharAnimEntry::CalcRootTranslation(NuSmartPtr<NuScene, true>, NUVEC&, float, float, unsigned int, float) const
CharAnimEntry::CalcRootRotation(NuSmartPtr<NuScene, true>, NUQUAT&, float, float, unsigned int, float) const
CharAnimEntry::GetAnimBlendVal(int, float) const
CharAnimEntryRef::CharAnimEntryRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*, NetReplicatorInst*)
CharAnimEntryRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAnimEntryRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAnimEntryHelper::RegisterClasses(EdRegistry&)
CharAttachmentAnimHelper::RegisterClasses(EdRegistry&)
CharAnimEntryHelper::CharAnimEntryHelper()
CharAnimEntryHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimEntryHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimEntryHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CMList<CharAnimTrigger*>::Append(CharAnimTrigger* const&, CMList<CharAnimTrigger*>::ListLink*)
CMList<CharAttachmentAnim*>::Append(CharAttachmentAnim* const&, CMList<CharAttachmentAnim*>::ListLink*)
CharAnimEntryHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharAnimEntryHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CharAnimEntryHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CharAnimEntryHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimEntryHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimEntryHelper::EventNotify(Event&, NuEventData&)
CharAttachmentAnim::CharAttachmentAnim(int)
CharAttachmentAnim::~CharAttachmentAnim()
CharAttachmentAnim::GetAnimFileName(CharAnimSourceFileType, int) const
CharAttachmentAnimNameRef::CharAttachmentAnimNameRef()
CharAttachmentAnimNameRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAttachmentAnimHelper::CharAttachmentAnimHelper()
CharAttachmentAnimHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAttachmentAnimHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAttachmentAnimHelper::CanSaveObject(void*, EdSerialiseParams&)
CharAttachmentAnimHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAttachmentAnimHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAttachmentAnimHelper::EventNotify(Event&, NuEventData&)
CharAnimAppData::CharAnimAppData()
CharAnimAppData::~CharAnimAppData()
CharAnimAppData::~CharAnimAppData()
CharAnimAppData::Fixup()
CharAnimAppData::LoadResources()
CharAnimAppData::UnloadResources()
CharAnimAppData::AreResourcesLoaded() const
CharAnimAppData::SetProcessFilterID(int)
CharAnimAppDataHelper::RegisterClasses(EdRegistry&)
CharAnimAppDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimAppDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimEntryRef::~CharAnimEntryRef()
CharAnimEntryHelper::~CharAnimEntryHelper()
CharAnimEntryHelper::~CharAnimEntryHelper()
non-virtual thunk to CharAnimEntryHelper::~CharAnimEntryHelper()
non-virtual thunk to CharAnimEntryHelper::~CharAnimEntryHelper()
CharAttachmentAnimNameRef::~CharAttachmentAnimNameRef()
CharAttachmentAnimHelper::~CharAttachmentAnimHelper()
CharAttachmentAnimHelper::~CharAttachmentAnimHelper()
non-virtual thunk to CharAttachmentAnimHelper::~CharAttachmentAnimHelper()
non-virtual thunk to CharAttachmentAnimHelper::~CharAttachmentAnimHelper()
CharAnimAppDataHelper::~CharAnimAppDataHelper()
FrameworkEventObjectClassData::~FrameworkEventObjectClassData()
SubPakFileResourceInfo::GetHash() const
CharAnimSetResourceType::GetName() const
CMList<CharAnimSet*>::~CMList()
CharAnimSet::CharAnimSet(CharAnimSetFileParams const*)
CharAnimSet::~CharAnimSet()
CharAnimSet::UnloadResources(bool)
CharAnimSet::DeferredDelete()
CMList<CharAnimSet*>::Append(CharAnimSet* const&, CMList<CharAnimSet*>::ListLink*)
CharAnimSet::DeleteAnimSets()
CharAnimSet::Fixup()
CharAnimSet::FixupSkeletonFile()
CharAnimSet::FixupCharDefActionAnimMaps()
CharAnimSet::OnSkeletonLoaded()
CharAnimSet::LoadResources(bool)
CharAnimSet::LoadAnims(bool)
CharAnimSet::UnloadAnims()
CharAnimSet::AreResourcesLoaded() const
CharAnimSet::SetProcessFilterID(int)
CharAnimSet::OnResourcesLoaded()
CharAnimSet::GetRefAnimSets(CharAnimSetList&) const
CharAnimSet::GetAnimFilePath() const
CharAnimSet::GetPakFileName() const
CharAnimSetFile::GetCharDefRefs(CharDefList&, bool) const
CharAnimSet::GetName() const
CharAnimSet::GetSkeletonName() const
CharAnimSet::GetSkeleton() const
CharAnimSetHelper::RegisterClasses(EdRegistry&)
CharAnimSetHelper::CharAnimSetHelper()
CharAnimSetHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimSetHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimSetHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharAnimSetHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharAnimSetHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CharAnimSetHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CharAnimSetHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimSetHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimSetHelper::EventNotify(Event&, NuEventData&)
CharAnimSetFileParams::CharAnimSetFileParams(char const*, EditorFileParams::AddMode, char const*, bool)
CharAnimSetFile::GetFileType()
CharAnimSetFileParams::~CharAnimSetFileParams()
CharAnimSetFileParams::~CharAnimSetFileParams()
CharAnimSetFileParamsHelper::RegisterClasses(EdRegistry&)
CharAnimSetFileParamsHelper::EventNotify(Event&, NuEventData&)
CharAnimSetFileParamsHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimSetFileParamsHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CMList<CharAnimSetFile*>::~CMList()
CharAnimSetFile::FindByFileName(char const*, CharProject const*)
CharAnimSetFile::FindByFullFileName(char const*, CharProject const*)
CharAnimSetFile::CharAnimSetFile(CharAnimSetFileParams const&)
CMList<CharAnimSetFile*>::Append(CharAnimSetFile* const&, CMList<CharAnimSetFile*>::ListLink*)
CharAnimSetFile::~CharAnimSetFile()
CharAnimSetFile::~CharAnimSetFile()
CharAnimSetFile::Fixup()
CharAnimSetFile::UpdateAnimMemSize()
CharAnimSetFile::GetAnimSetRefs(CharAnimSetList&, bool) const
CMList<CharDef*>::Append(CharDef* const&, CMList<CharDef*>::ListLink*)
CharAnimSetFile::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharAnimSetFile::GetParentObject()
CharAnimSetFile::GetObjects(ClassObjectList&) const
CharAnimSetFile::AddAnimSetRef(CharAnimSetRef*)
CMList<CharAnimSetRef*>::Append(CharAnimSetRef* const&, CMList<CharAnimSetRef*>::ListLink*)
CharAnimSetFile::RemoveAnimSetRef(CharAnimSetRef*)
CharAnimSetFileHelper::RegisterClasses(EdRegistry&)
CharAnimSetFileHelper::CharAnimSetFileHelper()
CharAnimSetFileHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimSetFileHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimSetFileHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharAnimSetFileHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharAnimSetFileHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CharAnimSetFileHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CharAnimSetFileHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimSetFileHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimSetFileHelper::EventNotify(Event&, NuEventData&)
CharAnimSetResourceType::CreateResourceInternal(ResourceInfo const&) const
CharAnimSetResourceInfo::CharAnimSetResourceInfo(CharAnimSetFile const&, bool)
CharAnimSetResourceInfo::CharAnimSetResourceInfo(char const*, char const*, bool)
CharAnimSetResourceInfo::~CharAnimSetResourceInfo()
CharAnimSetResourceInfo::~CharAnimSetResourceInfo()
CharAnimSetResource::CharAnimSetResource(CharAnimSetResourceInfo const&)
CharAnimSetResource::~CharAnimSetResource()
CharAnimSetResource::~CharAnimSetResource()
CharAnimSetResource::IsMatch(ResourceInfo const&) const
CharAnimSetResource::StartLoad()
CharAnimSetResource::ProcessLoad()
CharAnimSetResource::GetAnimSet() const
CharAnimSetResource::AbortLoad()
CharAnimSetResource::FinishUnload()
CharAnimSetResource::FinishLoad()
CharAnimSetResource::HasSuccessfullyLoaded()
CharAnimSetResource::ImmediatelyUnload()
CharAnimSetResourceHndl::GetAnimSet() const
CharAnimSetResource::SetProcessFilterID(int)
CharAnimSetResourceHndl::CharAnimSetResourceHndl()
CharAnimSetResourceHndl::CharAnimSetResourceHndl(ResourceHndl const&)
CharAnimSetResourceType::~CharAnimSetResourceType()
CharAnimSetHelper::~CharAnimSetHelper()
CharAnimSetHelper::~CharAnimSetHelper()
non-virtual thunk to CharAnimSetHelper::~CharAnimSetHelper()
non-virtual thunk to CharAnimSetHelper::~CharAnimSetHelper()
CharAnimSetFileParamsHelper::~CharAnimSetFileParamsHelper()
CharAnimSetFileHelper::~CharAnimSetFileHelper()
CharAnimSetFileHelper::~CharAnimSetFileHelper()
non-virtual thunk to CharAnimSetFileHelper::~CharAnimSetFileHelper()
non-virtual thunk to CharAnimSetFileHelper::~CharAnimSetFileHelper()
SubPakFileResource::GetHash() const
CSListHeader<CharAnimTriggerType>::~CSListHeader()
NuEList<CharAnimTriggerVFXData, DefaultElist>::~NuEList()
NuEList<CharAnimTriggerPTLData, DefaultElist>::~NuEList()
CharAnimTriggerType::CharAnimTriggerType(char const*, EdClass*, EdClass*)
CharAnimTriggerType::~CharAnimTriggerType()
CharAnimTriggerType::~CharAnimTriggerType()
CharAnimTrigger::RegisterTriggerType(char const*, EdClass*, EdClass*)
CharAnimTrigger::FindTriggerType(char const*)
CharAnimTrigger::FindTriggerType(EdClass const*)
CharAnimTrigger::RegisterCommonTypes()
CharAnimTriggerLayersDataHelper::RegisterTriggerType()
CharAnimTriggerSFXDataHelper::RegisterTriggerType()
CharAnimTriggerVFXDataHelper::RegisterTriggerType()
CharAnimTriggerPTLDataHelper::RegisterTriggerType()
CharAnimTriggerMaterialDataHelper::RegisterTriggerType()
CharAnimTriggerTextureDataHelper::RegisterTriggerType()
CharAnimTriggerAttachmentDataHelper::RegisterTriggerType()
CharAnimTriggerLayerSpecialDataHelper::RegisterTriggerType()
CharAnimTrigger::SetCommonTypesContextDataClass(EdClass*)
CharAnimTriggerLayersData::SetContextDataClass(EdClass*)
CharAnimTriggerSFXData::SetContextDataClass(EdClass*)
CharAnimTriggerVFXData::SetContextDataClass(EdClass*)
CharAnimTriggerPTLData::SetContextDataClass(EdClass*)
CharAnimTrigger::CharAnimTrigger(char const*)
CharAnimTrigger::~CharAnimTrigger()
CharAnimTrigger::Fixup()
CharAnimTrigger::LoadResources()
CharAnimTrigger::UnloadResources()
CharAnimTrigger::AreResourcesLoaded() const
CharAnimTrigger::SetProcessFilterID(int)
CharAnimTrigger::CreateUpdateData(CharAnimState&) const
CharAnimTrigger::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimTrigger::FindRange(float) const
CharAnimTrigger::CanTrigger(CharAnimState const&) const
CharAnimTrigger::FindFirstRange(float, float) const
CharAnimTrigger::FindFirstRangeEnterFrame(float, bool) const
CharAnimTrigger::FindFirstRangeExitFrame(float, bool) const
CharAnimTriggerRef::CharAnimTriggerRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*, NetReplicatorInst*)
CharAnimTriggerRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAnimTriggerRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAnimTriggerHelper::CharAnimTriggerHelper()
CharAnimTriggerHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerRangeHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharAnimTriggerHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharAnimTriggerHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CharAnimTriggerHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CharAnimTriggerHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimTriggerHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimTriggerHelper::EventNotify(Event&, NuEventData&)
CharAnimTriggerRange::CharAnimTriggerRange(float, float)
CharAnimTriggerRange::~CharAnimTriggerRange()
CharAnimTriggerRange::GetOverlappedFrames(float&, float&) const
CharAnimTriggerRange::GetOverlappedStartFrame() const
CharAnimTriggerRange::GetOverlappedEndFrame() const
CharAnimTriggerRangeHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerRangeHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerUpdateData::CharAnimTriggerUpdateData(CharAnimTrigger const&, CharAnimState&)
CharAnimTriggerUpdateData::~CharAnimTriggerUpdateData()
CharAnimTriggerUpdateData::~CharAnimTriggerUpdateData()
CharAnimTriggerUpdateData::GetCharInst() const
CharAnimTriggerUpdateData::GetCurrFrame() const
CharAnimTriggerUpdateData::InRange(bool, bool) const
CharAnimTriggerUpdateData::GetCurrRangeProgress() const
CharAnimTriggerData::CharAnimTriggerData()
CharAnimTriggerLocatorData::~CharAnimTriggerLocatorData()
CharAnimTriggerData::~CharAnimTriggerData()
CharAnimTriggerData::Fixup()
CharAnimTriggerData::LoadResources()
CharAnimTriggerData::UnloadResources()
CharAnimTriggerData::AreResourcesLoaded() const
CharAnimTriggerData::SetProcessFilterID(int)
CharAnimTriggerData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
CharAnimTriggerData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimTriggerDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerContextData::CharAnimTriggerContextData()
CharAnimTriggerContextData::~CharAnimTriggerContextData()
CharAnimTriggerContextData::~CharAnimTriggerContextData()
CharAnimTriggerContextData::Fixup()
CharAnimTriggerContextData::CanTrigger(CharAnimState const&, CharAnimTrigger const&) const
CharAnimTriggerContextDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerContextDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerContextDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimSimpleTriggerData::CharAnimSimpleTriggerData()
CharAnimSimpleTriggerData::~CharAnimSimpleTriggerData()
CharAnimSimpleTriggerData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimSimpleTriggerDataHelper::RegisterClasses(EdRegistry&)
CharAnimSimpleTriggerDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimSimpleTriggerDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerLayersData::CharAnimTriggerLayersData()
CharAnimTriggerLayersData::~CharAnimTriggerLayersData()
CharAnimTriggerLayersData::Fixup()
CharAnimTriggerLayersData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimTriggerLayersData::OnTrigger(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimTriggerLayersDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerLayersDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerLayersDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerLocatorData::CharAnimTriggerLocatorData(long, bool)
CharAnimTriggerLocatorData::~CharAnimTriggerLocatorData()
CharAnimTriggerLocatorData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimTriggerLocatorData::GetLocatorMatrix(int, CharAnimTriggerUpdateData&, NUMTX&) const
CharAnimTriggerLocatorDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerLocatorDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerLocatorDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerSFXData::CharAnimTriggerSFXData()
CharAnimTriggerSFXData::~CharAnimTriggerSFXData()
CharAnimTriggerSFXData::~CharAnimTriggerSFXData()
CharAnimTriggerSFXData::Fixup()
CharAnimTriggerSFXData::LoadResources()
CharAnimTriggerSFXData::LoadSFX()
CharAnimTriggerSFXData::UnloadResources()
CharAnimTriggerSFXData::UnloadSFX()
CharAnimTriggerSFXData::AreResourcesLoaded() const
CharAnimTriggerSFXData::SetProcessFilterID(int)
CharAnimTriggerSFXData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
CharAnimTriggerSFXData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimTriggerSFXData::GetSFXSample(CharInst const&) const
CharAnimTriggerSFXData::SFXTriggerUpdateData::StopAllTrackingSFX()
CharAnimTriggerSFXData::SFXTriggerUpdateData::SFXTriggerUpdateData(CharAnimTrigger const&, CharAnimState&, int)
CharAnimTriggerSFXData::SFXTriggerUpdateData::~SFXTriggerUpdateData()
CharAnimTriggerSFXData::SFXTriggerUpdateData::~SFXTriggerUpdateData()
CharAnimTriggerSFXDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerSFXDataHelper::CharAnimTriggerSFXDataHelper()
CharAnimTriggerSFXDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerSFXDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerSFXDataHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimTriggerSFXDataHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimTriggerSFXDataHelper::EventNotify(Event&, NuEventData&)
CharSFXIdRef::CharSFXIdRef()
CharSFXIdRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharSFXIdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAnimTriggerVFXData::LateFixup()
CharAnimTriggerVFXData::CharAnimTriggerVFXData()
CharAnimTriggerVFXData::~CharAnimTriggerVFXData()
CharAnimTriggerVFXData::~CharAnimTriggerVFXData()
CharAnimTriggerVFXData::Fixup()
CharAnimTriggerVFXData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
CharAnimTriggerVFXData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimTriggerVFXData::VFXTriggerUpdateData::StopAllTrackingVFX()
CharAnimTriggerVFXData::VFXTriggerUpdateData::VFXTriggerUpdateData(CharAnimTrigger const&, CharAnimState&, int)
CharAnimTriggerVFXData::VFXTriggerUpdateData::~VFXTriggerUpdateData()
CharAnimTriggerVFXData::VFXTriggerUpdateData::~VFXTriggerUpdateData()
CharAnimTriggerVFXDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerVFXDataHelper::CharAnimTriggerVFXDataHelper()
CharAnimTriggerVFXDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerVFXDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerVFXDataHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimTriggerVFXDataHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimTriggerVFXDataHelper::EventNotify(Event&, NuEventData&)
CharAnimTriggerPTLData::LateFixup()
CharAnimTriggerPTLData::CharAnimTriggerPTLData()
CharAnimTriggerPTLData::~CharAnimTriggerPTLData()
CharAnimTriggerPTLData::~CharAnimTriggerPTLData()
CharAnimTriggerPTLData::Fixup()
CharAnimTriggerPTLData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
CharAnimTriggerPTLData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimTriggerPTLData::PTLTriggerUpdateData::StopAllTrackingPTL()
CharAnimTriggerPTLData::PTLTriggerUpdateData::PTLTriggerUpdateData(CharAnimTrigger const&, CharAnimState&, int)
CharAnimTriggerPTLData::PTLTriggerUpdateData::~PTLTriggerUpdateData()
CharAnimTriggerPTLData::PTLTriggerUpdateData::~PTLTriggerUpdateData()
CharAnimTriggerPTLDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerPTLDataHelper::CharAnimTriggerPTLDataHelper()
CharAnimTriggerPTLDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerPTLDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerPTLDataHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimTriggerPTLDataHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimTriggerPTLDataHelper::EventNotify(Event&, NuEventData&)
CharAnimTriggerMaterialData::CharAnimTriggerMaterialData()
CharAnimTriggerMaterialData::~CharAnimTriggerMaterialData()
CharAnimTriggerMaterialData::~CharAnimTriggerMaterialData()
CharAnimTriggerMaterialData::Fixup()
CharAnimTriggerMaterialData::LoadResources()
CharAnimTriggerMaterialData::UnloadResources()
CharAnimTriggerMaterialData::AreResourcesLoaded() const
CharAnimTriggerMaterialData::SetProcessFilterID(int)
CharAnimTriggerMaterialData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharInst::ResetMaterial(unsigned int)
CharAnimTriggerMaterialDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerMaterialDataHelper::CharAnimTriggerMaterialDataHelper()
CharAnimTriggerMaterialDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerMaterialDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerMaterialDataHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimTriggerMaterialDataHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimTriggerMaterialDataHelper::EventNotify(Event&, NuEventData&)
CharAnimTriggerTextureData::CharAnimTriggerTextureData()
CharAnimTriggerTextureData::~CharAnimTriggerTextureData()
CharAnimTriggerTextureData::~CharAnimTriggerTextureData()
CharAnimTriggerTextureData::Fixup()
CharAnimTriggerTextureData::LoadResources()
CharAnimTriggerTextureData::UnloadResources()
CharAnimTriggerTextureData::AreResourcesLoaded() const
CharAnimTriggerTextureData::SetProcessFilterID(int)
CharAnimTriggerTextureData::OnTrigger(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharInst::ResetTexture(unsigned int, NuShaderDesc::TextureSlot::T)
CharAnimTriggerTextureDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerTextureDataHelper::CharAnimTriggerTextureDataHelper()
CharAnimTriggerTextureDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerTextureDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerTextureDataHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimTriggerTextureDataHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimTriggerTextureDataHelper::EventNotify(Event&, NuEventData&)
CharAnimTriggerAttachmentData::CharAnimTriggerAttachmentData()
CharAnimTriggerAttachmentData::~CharAnimTriggerAttachmentData()
CharAnimTriggerAttachmentData::~CharAnimTriggerAttachmentData()
CharAnimTriggerAttachmentData::Fixup()
CharAnimTriggerAttachmentData::LoadResources()
CharAnimTriggerAttachmentData::UnloadResources()
CharAnimTriggerAttachmentData::AreResourcesLoaded() const
CharAnimTriggerAttachmentData::SetProcessFilterID(int)
CharAnimTriggerAttachmentData::OnTrigger(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimTriggerAttachmentDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerAttachmentDataHelper::CharAnimTriggerAttachmentDataHelper()
CharAnimTriggerAttachmentDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerAttachmentDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerAttachmentDataHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimTriggerAttachmentDataHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimTriggerAttachmentDataHelper::EventNotify(Event&, NuEventData&)
CharAnimTriggerLayerSpecialData::CharAnimTriggerLayerSpecialData()
CharAnimTriggerLayerSpecialData::~CharAnimTriggerLayerSpecialData()
CharAnimTriggerLayerSpecialData::~CharAnimTriggerLayerSpecialData()
CharAnimTriggerLayerSpecialData::LoadResources()
CharAnimTriggerLayerSpecialData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
CharAnimTriggerLayerSpecialDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerLayerSpecialDataHelper::CharAnimTriggerLayerSpecialDataHelper()
CharAnimTriggerLayerSpecialDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerLayerSpecialDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerLayerSpecialDataHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimTriggerLayerSpecialDataHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimTriggerLayerSpecialDataHelper::EventNotify(Event&, NuEventData&)
CharSFXIdRef::~CharSFXIdRef()
CharAnimTriggerRef::~CharAnimTriggerRef()
CharAnimTriggerHelper::~CharAnimTriggerHelper()
CharAnimTriggerHelper::~CharAnimTriggerHelper()
non-virtual thunk to CharAnimTriggerHelper::~CharAnimTriggerHelper()
non-virtual thunk to CharAnimTriggerHelper::~CharAnimTriggerHelper()
CharAnimTriggerRangeHelper::~CharAnimTriggerRangeHelper()
CharAnimTriggerDataHelper::~CharAnimTriggerDataHelper()
CharAnimTriggerContextDataHelper::~CharAnimTriggerContextDataHelper()
CharAnimSimpleTriggerDataHelper::~CharAnimSimpleTriggerDataHelper()
CharAnimTriggerLayersDataHelper::~CharAnimTriggerLayersDataHelper()
CharAnimTriggerLocatorDataHelper::~CharAnimTriggerLocatorDataHelper()
CharAnimTriggerSFXDataHelper::~CharAnimTriggerSFXDataHelper()
CharAnimTriggerSFXDataHelper::~CharAnimTriggerSFXDataHelper()
non-virtual thunk to CharAnimTriggerSFXDataHelper::~CharAnimTriggerSFXDataHelper()
non-virtual thunk to CharAnimTriggerSFXDataHelper::~CharAnimTriggerSFXDataHelper()
CharAnimTriggerVFXDataHelper::~CharAnimTriggerVFXDataHelper()
CharAnimTriggerVFXDataHelper::~CharAnimTriggerVFXDataHelper()
non-virtual thunk to CharAnimTriggerVFXDataHelper::~CharAnimTriggerVFXDataHelper()
non-virtual thunk to CharAnimTriggerVFXDataHelper::~CharAnimTriggerVFXDataHelper()
CharAnimTriggerPTLDataHelper::~CharAnimTriggerPTLDataHelper()
CharAnimTriggerPTLDataHelper::~CharAnimTriggerPTLDataHelper()
non-virtual thunk to CharAnimTriggerPTLDataHelper::~CharAnimTriggerPTLDataHelper()
non-virtual thunk to CharAnimTriggerPTLDataHelper::~CharAnimTriggerPTLDataHelper()
CharAnimTriggerMaterialDataHelper::~CharAnimTriggerMaterialDataHelper()
CharAnimTriggerMaterialDataHelper::~CharAnimTriggerMaterialDataHelper()
non-virtual thunk to CharAnimTriggerMaterialDataHelper::~CharAnimTriggerMaterialDataHelper()
non-virtual thunk to CharAnimTriggerMaterialDataHelper::~CharAnimTriggerMaterialDataHelper()
CharAnimTriggerTextureDataHelper::~CharAnimTriggerTextureDataHelper()
CharAnimTriggerTextureDataHelper::~CharAnimTriggerTextureDataHelper()
non-virtual thunk to CharAnimTriggerTextureDataHelper::~CharAnimTriggerTextureDataHelper()
non-virtual thunk to CharAnimTriggerTextureDataHelper::~CharAnimTriggerTextureDataHelper()
CharAnimTriggerAttachmentDataHelper::~CharAnimTriggerAttachmentDataHelper()
CharAnimTriggerAttachmentDataHelper::~CharAnimTriggerAttachmentDataHelper()
non-virtual thunk to CharAnimTriggerAttachmentDataHelper::~CharAnimTriggerAttachmentDataHelper()
non-virtual thunk to CharAnimTriggerAttachmentDataHelper::~CharAnimTriggerAttachmentDataHelper()
CharAnimTriggerLayerSpecialDataHelper::~CharAnimTriggerLayerSpecialDataHelper()
CharAnimTriggerLayerSpecialDataHelper::~CharAnimTriggerLayerSpecialDataHelper()
non-virtual thunk to CharAnimTriggerLayerSpecialDataHelper::~CharAnimTriggerLayerSpecialDataHelper()
non-virtual thunk to CharAnimTriggerLayerSpecialDataHelper::~CharAnimTriggerLayerSpecialDataHelper()
CharInst::SetLayerSpecialsMap(CharLayerSpecialsMap const*)
CharSkeletonResourceType::GetName() const
CharSkeleton::SetAppDataClass(EdClass*)
CharSkeleton::CharSkeleton()
CharSkeleton::~CharSkeleton()
CMList<CharAttachmentSlot*>::DeleteAll()
CharSkeleton::Fixup()
CharSkeleton::SetupAttachmentSlotMap()
CharSkeleton::FixupAppData()
CharSkeleton::LoadResources()
CharSkeleton::LoadModel()
CharSkeleton::UnloadResources()
CharSkeleton::UnloadModel()
CharSkeleton::AreResourcesLoaded() const
CharSkeleton::SetProcessFilterID(int)
CharSkeleton::OnResourcesLoaded()
CharSkeleton::SetupBoneMap()
CharSkeleton::GetOverrideLODDistances(int&) const
CharSkeleton::FindAttachmentId(char const*) const
CharSkeletonRef::CharSkeletonRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*, NetReplicatorInst*)
CharSkeletonRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharSkeletonRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAttachmentSlotMapRef::CharAttachmentSlotMapRef(int)
CharAttachmentSlotMapRef::~CharAttachmentSlotMapRef()
CharAttachmentSlotMapRef::~CharAttachmentSlotMapRef()
CharAttachmentSlotMapRef::GetMemberObject(void*)
CharSkeletonHelper::RegisterClasses(EdRegistry&)
CharAttachmentSlotHelper::RegisterClasses(EdRegistry&)
CharSkeletonHelper::CharSkeletonHelper()
CharSkeletonHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSkeletonHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSkeletonHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CMList<CharAttachmentSlot*>::Append(CharAttachmentSlot* const&, CMList<CharAttachmentSlot*>::ListLink*)
CharSkeletonHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharSkeletonHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CharSkeletonHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CharSkeletonHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharSkeletonHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharSkeletonHelper::EventNotify(Event&, NuEventData&)
CharAttachmentSlot::CharAttachmentSlot(int)
CharAttachmentSlot::~CharAttachmentSlot()
CharAttachmentSlot::Fixup()
CharAttachmentSlotHelper::CharAttachmentSlotHelper()
CharAttachmentSlotHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAttachmentSlotHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAttachmentSlotHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAttachmentSlotHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAttachmentSlotHelper::EventNotify(Event&, NuEventData&)
CharSkeletonAppData::SetParent(CharSkeleton&)
CharSkeletonAppData::Fixup()
CharSkeletonAppData::LoadResources()
CharSkeletonAppData::UnloadResources()
CharSkeletonAppData::AreResourcesLoaded() const
CharSkeletonAppData::SetProcessFilterID(int)
CharSkeletonAppDataHelper::RegisterClasses(EdRegistry&)
CharSkeletonAppDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSkeletonAppDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSkeletonFileParams::CharSkeletonFileParams(char const*, EditorFileParams::AddMode)
CharSkeletonFile::GetFileType()
CharSkeletonFileParams::~CharSkeletonFileParams()
CharSkeletonFileParams::~CharSkeletonFileParams()
CharSkeletonFileParamsHelper::RegisterClasses(EdRegistry&)
CharSkeletonFileParamsHelper::CharSkeletonFileParamsHelper()
CharSkeletonFileParamsHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSkeletonFileParamsHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSkeletonFileParamsHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharSkeletonFileParamsHelper::EventNotify(Event&, NuEventData&)
CMList<CharSkeletonFile*>::~CMList()
CharSkeletonFile::FindByFileName(char const*, CharProject const*)
CharSkeletonFile::FindByFullFileName(char const*, CharProject const*)
CharSkeletonFile::CharSkeletonFile(CharSkeletonFileParams const&)
CMList<CharSkeletonFile*>::Append(CharSkeletonFile* const&, CMList<CharSkeletonFile*>::ListLink*)
CharSkeletonFile::~CharSkeletonFile()
CharSkeletonFile::~CharSkeletonFile()
CharSkeletonFile::GetParentObject()
CharSkeletonFile::GetObjects(ClassObjectList&) const
CharSkeletonFile::AddCharDef(CharDef*)
CharSkeletonFile::RemoveCharDef(CharDef*)
CharSkeletonFile::AddAnimSet(CharAnimSet*)
CharSkeletonFile::RemoveAnimSet(CharAnimSet*)
CharSkeletonFile::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharSkeletonFileHelper::RegisterClasses(EdRegistry&)
CharSkeletonFileHelper::CharSkeletonFileHelper()
CharSkeletonFileHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSkeletonFileHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSkeletonFileHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharSkeletonFileHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharSkeletonFileHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CharSkeletonFileHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CharSkeletonFileHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharSkeletonFileHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharSkeletonFileHelper::EventNotify(Event&, NuEventData&)
CharSkeletonResourceType::CreateResourceInternal(ResourceInfo const&) const
CharSkeletonResourceInfo::CharSkeletonResourceInfo(char const*, bool)
CharSkeletonResourceInfo::CharSkeletonResourceInfo(CharSkeletonFile const&, bool)
CharSkeletonResourceInfo::CharSkeletonResourceInfo(char const*, char const*, bool)
CharSkeletonResourceInfo::~CharSkeletonResourceInfo()
CharSkeletonResourceInfo::~CharSkeletonResourceInfo()
CharSkeletonResource::CharSkeletonResource(CharSkeletonResourceInfo const&)
CharSkeletonResource::~CharSkeletonResource()
CharSkeletonResource::~CharSkeletonResource()
CharSkeletonResource::IsMatch(ResourceInfo const&) const
CharSkeletonResource::StartLoad()
CharSkeletonResource::LoadSkeletonFromProject()
CharSkeletonResource::ProcessLoad()
CharSkeletonResource::GetCharSkeleton() const
CharSkeletonResource::FinishLoad()
CharSkeletonResource::HasSuccessfullyLoaded()
CharSkeletonResource::AbortLoad()
CharSkeletonResource::FinishUnload()
CharSkeletonResource::ImmediatelyUnload()
CharSkeletonResource::SetProcessFilterID(int)
CharSkeletonResourceHndl::GetCharSkeleton() const
CharSkeletonResourceHndl::CharSkeletonResourceHndl()
CharSkeletonResourceHndl::CharSkeletonResourceHndl(ResourceHndl const&)
CharSkeletonResourceType::~CharSkeletonResourceType()
CharSkeletonRef::~CharSkeletonRef()
CharSkeletonHelper::~CharSkeletonHelper()
CharSkeletonHelper::~CharSkeletonHelper()
non-virtual thunk to CharSkeletonHelper::~CharSkeletonHelper()
non-virtual thunk to CharSkeletonHelper::~CharSkeletonHelper()
CharAttachmentSlotHelper::~CharAttachmentSlotHelper()
CharAttachmentSlotHelper::~CharAttachmentSlotHelper()
non-virtual thunk to CharAttachmentSlotHelper::~CharAttachmentSlotHelper()
non-virtual thunk to CharAttachmentSlotHelper::~CharAttachmentSlotHelper()
CharSkeletonAppDataHelper::~CharSkeletonAppDataHelper()
CharSkeletonFileParamsHelper::~CharSkeletonFileParamsHelper()
CharSkeletonFileParamsHelper::~CharSkeletonFileParamsHelper()
non-virtual thunk to CharSkeletonFileParamsHelper::~CharSkeletonFileParamsHelper()
non-virtual thunk to CharSkeletonFileParamsHelper::~CharSkeletonFileParamsHelper()
CharSkeletonFileHelper::~CharSkeletonFileHelper()
CharSkeletonFileHelper::~CharSkeletonFileHelper()
non-virtual thunk to CharSkeletonFileHelper::~CharSkeletonFileHelper()
non-virtual thunk to CharSkeletonFileHelper::~CharSkeletonFileHelper()
ChaseCameraSettings::~ChaseCameraSettings()
ChaseCameraSettings::loadSetting_stick_length(nufpar_s*)
ChaseCameraSettings::loadSetting_stick_height(nufpar_s*)
ChaseCameraSettings::loadSetting_stick_sphere_radius(nufpar_s*)
ChaseCameraSettings::loadSetting_lookat_offsetx(nufpar_s*)
ChaseCameraSettings::loadSetting_lookat_offsety(nufpar_s*)
ChaseCameraSettings::loadSetting_lookat_offsetz(nufpar_s*)
ChaseCameraSettings::loadSetting_pan_auto_stationary_time(nufpar_s*)
ChaseCameraSettings::loadSetting_pan_auto_rotate_speed(nufpar_s*)
ChaseCameraSettings::loadSetting_pan_auto_zoom_speed(nufpar_s*)
ChaseCameraSettings::loadSetting_pan_user_rotate_speed(nufpar_s*)
ChaseCameraSettings::loadSetting_moving_auto_rotate_speed(nufpar_s*)
ChaseCameraSettings::loadSetting_smooth_position(nufpar_s*)
ChaseCameraSettings::loadSetting_smooth_lookat(nufpar_s*)
ChaseCameraSettings::loadSetting_sock_blend_in_time(nufpar_s*)
ChaseCameraSettings::loadSetting_sock_blend_out_time(nufpar_s*)
ChaseCameraSettings::loadSetting_los_look_ahead(nufpar_s*)
ChaseCameraSettings::loadSetting_los_width(nufpar_s*)
ChaseCameraSettings::loadSetting_los_height(nufpar_s*)
ChaseCameraSettings::loadSetting_screen_top(nufpar_s*)
ChaseCameraSettings::loadSetting_screen_bottom(nufpar_s*)
ChaseCameraSettings::loadSetting_focal_region(nufpar_s*)
ChaseCameraSettings::loadSetting_pos_seek_scale(nufpar_s*)
ChaseCameraSettings::loadSetting_ang_seek_scale(nufpar_s*)
CSListHeader<ChaseCameraSettings>::~CSListHeader()
ChaseCameraSettingsList::PopulateChaseCameraSettingsNameList(int&, char const**&)
ChaseCameraSettingsList::ChaseCameraFindSettings(char const*)
ChaseCameraSettingsList::Find(char const*)
ChaseCameraSettings::ChaseCameraSettings(char const*)
ChaseCameraSettings::ResetSettings()
ChaseCameraSettings::Blend(ChaseCameraSettings const&, ChaseCameraSettings const&, float)
ChaseCameraSettings::loadSettings(char const*)
ChaseCameraSettings::saveSettings(char const*)
ChaseCameraSettingsList::loadAllSettingsBG(void*)
ChaseCameraSettingsList::saveAllSettings()
CharDefResourceType::GetName() const
CMList<CharDef*>::~CMList()
CharDef::SetAppDataClass(EdClass*)
CharDef::AddCharDefToFixupActionAnimMaps(CharDef&)
CharDef::FixupCharDefActionAnimMaps()
CharDef::BuildActionAnimMap()
CharDef::ClearAllActionAnimMaps()
CharDef::ClearActionAnimMaps()
CharDef::CharDef(CharDefFileParams const*)
CharDef::~CharDef()
CMList<CharAttachmentDef*>::DeleteAll()
CMList<CharSFXDef*>::DeleteAll()
CMList<CharMaterialDef*>::DeleteAll()
CMList<CharTextureDef*>::DeleteAll()
CharDef::ClearMaterialMap()
CharDef::Fixup()
CharDef::FixupSkeletonFile()
CharDef::FixupChaseCameraSettings()
CharDef::FixupAnimSetRefs()
CharDef::FixupMaterialDefs()
CharDef::FixupTextureDefs()
CharDef::FixupAttachmentDefs()
CharDef::FixupSFXDefs()
CharDef::FixupLayerDefs()
CharDef::FixupAppData()
CharDef::OnSkeletonLoaded()
CharDef::SetupMaterialDefMap()
CharDef::SetupTextureDefMaps()
CharDef::SetupAttachmentDefMap()
CharDef::SetupSFXDefMap()
CharDef::GetRefAnimSets(CharAnimSetList&) const
CharAnimSetRef::Fixup()
CharMaterialDef::Fixup()
CharTextureDef::Fixup()
CharAttachmentDef::Fixup()
CharSFXDef::Fixup()
CharLayerSpecialDef::Fixup()
CharDef::CalcAnimMemSize(CharDefList const&) const
CharDef::CalcAnimMemSize(CharAnimSetFileList const&) const
CharDef::CalcAnimMemSize() const
CharAnimSetRef::GetAnimSet() const
CharDef::FindLayerId(char const*) const
CharDef::GetName() const
CharDef::BuildMaterialMap(bool)
CharMaterialDef::SetupMaterial()
CharDef::BuildTextureMap(CharTextureDefList const&)
CharDef::BuildTextureMap(bool)
CharDef::ClearTextureMap()
CharDef::BuildKrawlyTextureMap(bool)
CharDef::ClearKrawlyTextureMap()
CharDef::LoadResources(bool)
CharDef::LoadModel(bool)
CharDef::LoadAttachments(bool)
CharDef::LoadSFXs(bool)
CharDef::UnloadResources(bool)
CharDef::UnloadModel()
CharDef::UnloadAttachments()
CharDef::UnloadSFXs()
CharDef::AreResourcesLoaded() const
CharMaterialDef::AreResourcesLoaded() const
CharTextureDef::AreResourcesLoaded() const
CharAttachmentDef::AreResourcesLoaded() const
CharSFXDef::AreResourcesLoaded() const
CharDef::SetProcessFilterID(int)
CharMaterialDef::SetProcessFilterID(int)
CharTextureDef::SetProcessFilterID(int)
CharAttachmentDef::SetProcessFilterID(int)
CharSFXDef::SetProcessFilterID(int)
CharDef::LoadMaterials(bool)
CharDef::LoadTextures(bool)
CharDef::OnResourcesLoaded()
CharDef::UnloadTextures()
CharDef::UnloadMaterials()
CharDef::SetupBoneMap()
CharMaterialDef::LoadResources(bool)
CharMaterialDef::UnloadResources(bool)
CharTextureDef::LoadResources(bool)
CharTextureDef::UnloadResources(bool)
CharAttachmentDef::LoadResources(bool)
CharAttachmentDef::UnloadResources(bool)
CharSFXDef::LoadResources(bool)
CharSFXDef::UnloadResources(bool)
CharDef::FixupLightingJointId()
CharDef::BuildLayerSpecialsMap()
CharLayerSpecialDef::FixupSpecialId()
CharDef::GetMaterialDef(unsigned int) const
CharDef::GetTextureDef(unsigned int, NuShaderDesc::TextureSlot::T) const
CharDef::GetKrawlyTextureDef(unsigned int, NuShaderDesc::TextureSlot::T) const
CharDef::GetTextureFileName(unsigned int, NuShaderDesc::TextureSlot::T) const
CharDef::SetTextureFileName(unsigned int, char const*, NuShaderDesc::TextureSlot::T)
CharTextureDef::SetTextureFileName(char const*)
CharDef::GetAttachmentDef(int) const
CharDef::GetSFXDef(int) const
CharDef::GetLayerSpecialDef(int) const
CharDef::GetAttachmentResourceFileName(int, char const**) const
CharDef::SetupAttachment(int, char const*, char const*, CharAttachmentType)
CharAttachmentDef::SetupAttachment(char const*, char const*, CharAttachmentType)
CharDef::SetAttachmentLayerId(int, int)
CharDef::SetAttachmentTintColour(int, NUCOLOUR3 const&)
CharDef::GetLayerSpecialName(int) const
CharDef::SetLayerSpecialName(int, char const*)
CMList<CharLayerSpecialDef*>::Append(CharLayerSpecialDef* const&, CMList<CharLayerSpecialDef*>::ListLink*)
CharDef::GetCreatureIk() const
CharDef::GetSkeleton() const
CharDef::GetSkeletonName() const
CharDef::GetChaseCamSettingsName() const
CharDef::GetChaseCamSettings() const
CharDef::SetChaseCamSettings(ChaseCameraSettings*)
CharDef::GetOverrideLODDistances(int&) const
CharMaterialDefMapRef::CharMaterialDefMapRef(unsigned int)
CharMaterialDefMapRef::~CharMaterialDefMapRef()
CharMaterialDefMapRef::~CharMaterialDefMapRef()
CharMaterialDefMapRef::GetMemberObject(void*)
CharTextureDefMapRef::CharTextureDefMapRef(CharTextureDefMapRef::TextureType, unsigned int, NuShaderDesc::TextureSlot::T)
CharTextureDefMapRef::~CharTextureDefMapRef()
CharTextureDefMapRef::~CharTextureDefMapRef()
CharTextureDefMapRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharTextureDefMapRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAttachmentDefMapRef::CharAttachmentDefMapRef(int)
CharAttachmentDefMapRef::~CharAttachmentDefMapRef()
CharAttachmentDefMapRef::~CharAttachmentDefMapRef()
CharAttachmentDefMapRef::GetMemberObject(void*)
CharAttachmentDefMapRef::GetLabel(ClassObject const&, char*) const
CharSFXDefMapRef::CharSFXDefMapRef(int)
CharSFXDefMapRef::~CharSFXDefMapRef()
CharSFXDefMapRef::~CharSFXDefMapRef()
CharSFXDefMapRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharSFXDefMapRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharLayerSpecialDefMapRef::CharLayerSpecialDefMapRef(int)
CharLayerSpecialDefMapRef::~CharLayerSpecialDefMapRef()
CharLayerSpecialDefMapRef::~CharLayerSpecialDefMapRef()
CharLayerSpecialDefMapRef::GetMemberObject(void*)
CharDefLayerFlagIdRef::CharDefLayerFlagIdRef(char const**, int)
CharDefLayerFlagIdRef::~CharDefLayerFlagIdRef()
CharDefLayerFlagIdRef::~CharDefLayerFlagIdRef()
CharDefLayerFlagIdRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharDefLayerFlagIdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharDefHelper::RegisterClasses(EdRegistry&)
CharAnimSetRefHelper::RegisterClasses(EdRegistry&)
CharMaterialDefHelper::RegisterClasses(EdRegistry&)
CharTextureDefHelper::RegisterClasses(EdRegistry&)
CharAttachmentDefHelper::RegisterClasses(EdRegistry&)
CharSFXDefHelper::RegisterClasses(EdRegistry&)
CharLayerSpecialDefHelper::RegisterClasses(EdRegistry&)
CharDefHelper::CharDefHelper()
CharDefHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharDefHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharDefHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CMList<CharMaterialDef*>::Append(CharMaterialDef* const&, CMList<CharMaterialDef*>::ListLink*)
CMList<CharTextureDef*>::Append(CharTextureDef* const&, CMList<CharTextureDef*>::ListLink*)
CMList<CharAttachmentDef*>::Append(CharAttachmentDef* const&, CMList<CharAttachmentDef*>::ListLink*)
CMList<CharSFXDef*>::Append(CharSFXDef* const&, CMList<CharSFXDef*>::ListLink*)
CharDefHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharDefHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CharDefHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CharDefHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharDefHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharDefHelper::EventNotify(Event&, NuEventData&)
CharDefFileParams::CharDefFileParams(char const*, EditorFileParams::AddMode, char const*, char const*, char const*)
CharDefFile::GetFileType()
CharDefFileParams::~CharDefFileParams()
CharDefFileParams::~CharDefFileParams()
CharDefFileParamsHelper::RegisterClasses(EdRegistry&)
CharDefFileParamsHelper::CharDefFileParamsHelper()
CharDefFileParamsHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharDefFileParamsHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharDefFileParamsHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharDefFileParamsHelper::EventNotify(Event&, NuEventData&)
CMList<CharDefFile*>::~CMList()
CharDefFile::FindByFileName(char const*, CharProject const*)
CharDefFile::FindByFullFileName(char const*, CharProject const*)
CharDefFile::CharDefFile(CharDefFileParams const&)
CMList<CharDefFile*>::Append(CharDefFile* const&, CMList<CharDefFile*>::ListLink*)
CharDefFile::~CharDefFile()
CharDefFile::~CharDefFile()
CharDefFile::Fixup()
CharDefFile::GetParentObject()
CharDefFile::GetObjects(ClassObjectList&) const
CharDefFile::CalculateMemoryEstimate(CharSysResourceMemoryEstimate&, bool) const
CharDefFileHelper::RegisterClasses(EdRegistry&)
CharDefFileHelper::CharDefFileHelper()
CharDefFileHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharDefFileHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharDefFileHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharDefFileHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharDefFileHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CharDefFileHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CharDefFileHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharDefFileHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharDefFileHelper::EventNotify(Event&, NuEventData&)
CharDefResourceType::CreateResourceInternal(ResourceInfo const&) const
CharDefResourceInfo::CharDefResourceInfo(char const*, int)
CharDefResourceInfo::CharDefResourceInfo(CharDefFile const&, int)
CharDefResourceInfo::CharDefResourceInfo(char const*, char const*, int)
CharDefResourceInfo::~CharDefResourceInfo()
CharDefResourceInfo::~CharDefResourceInfo()
CharDefResource::CharDefResource(CharDefResourceInfo const&)
CharDefResource::~CharDefResource()
CharDefResource::~CharDefResource()
CharDefResource::IsMatch(ResourceInfo const&) const
CharDefResource::GetCharDefName() const
CharDefResource::GetCharDef() const
CharDefResourceHndl::GetCharDef() const
CharDefResource::StartLoad()
CharDefResource::ProcessLoad()
CharDefResource::FinishLoad()
CharDefResource::FinishUnload()
CharDefResource::HasSuccessfullyLoaded()
CharDefResource::AbortLoad()
CharDefResource::ImmediatelyUnload()
CharDefResource::SetProcessFilterID(int)
CharDefResourceHndl::CharDefResourceHndl()
CharDefResourceHndl::CharDefResourceHndl(ResourceHndl const&)
CharDefResourceHndl::GetCharDefName() const
CharDefResourceHndl::GetLoadFlags() const
CharAnimSetRefEdRef::CharAnimSetRefEdRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
CharAnimSetRefEdRef::GetMemberObject(void*)
CharAnimSetRefParams::CharAnimSetRefParams()
CharAnimSetRefParams::CharAnimSetRefParams(char const*, char const*, bool)
CharAnimSetRefParams::~CharAnimSetRefParams()
CharAnimSetRefParams::~CharAnimSetRefParams()
CharAnimSetRefParamsHelper::RegisterClasses(EdRegistry&)
CharAnimSetRefParamsHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimSetRefParamsHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimSetRef::CharAnimSetRef()
CharAnimSetRef::~CharAnimSetRef()
CharAnimSetRef::~CharAnimSetRef()
CharAnimSetRefHelper::CharAnimSetRefHelper()
CharAnimSetRefHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimSetRefHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAnimSetRefHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAnimSetRefHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAnimSetRefHelper::EventNotify(Event&, NuEventData&)
CharDefAppData::SetParent(CharDef&)
CharDefAppData::Fixup()
CharDefAppData::ImportSkeletonInfo()
CharDefAppData::LoadResources()
CharDefAppData::UnloadResources()
CharDefAppData::AreResourcesLoaded() const
CharDefAppData::SetProcessFilterID(int)
CharDefAppDataHelper::RegisterClasses(EdRegistry&)
CharDefAppDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharDefAppDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharMaterialDef::CharMaterialDef(unsigned int)
CharMaterialDef::~CharMaterialDef()
CharMaterialDef::GetSourceMaterialScene() const
CharMaterialDefRef::CharMaterialDefRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
CharMaterialDefRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharMaterialDefRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharMaterialDefHelper::CharMaterialDefHelper()
CharMaterialDefHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharMaterialDefHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharMaterialDefHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharMaterialDefHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharMaterialDefHelper::EventNotify(Event&, NuEventData&)
CharTextureDef::CharTextureDef(unsigned int, NuShaderDesc::TextureSlot::T)
CharTextureDef::~CharTextureDef()
CharTextureDefHelper::CharTextureDefHelper()
CharTextureDefHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharTextureDefHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharTextureDefHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharTextureDefHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharTextureDefHelper::EventNotify(Event&, NuEventData&)
CharAttachmentDef::CharAttachmentDef(int)
CharAttachmentDef::~CharAttachmentDef()
CharAttachmentDef::GetSpecial(nuhspecial_s&) const
CharAttachmentDef::CreateSceneObject(LevelContainer const&) const
CharAttachmentDef::CreateSeatObject(LevelContainer const&) const
CharAttachmentDef::CreateLightObject(LevelContainer const&) const
CharAttachmentDef::CreateCharInst(LevelContainer const&) const
CharAttachmentDef::FindLayerId(char const*) const
CharAttachmentDefNameRef::CharAttachmentDefNameRef()
CharAttachmentDefNameRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAttachmentDefRef::CharAttachmentDefRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*, NetReplicatorInst*)
CharAttachmentDefRef::Init()
CharAttachmentDefRef::Reset()
CharAttachmentDefRef::GetMemberObject(void*)
CharAttachmentDefRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAttachmentDefRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAttachmentDefHelper::CharAttachmentDefHelper()
CharAttachmentDefHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAttachmentDefHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharAttachmentDefHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharAttachmentDefHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharAttachmentDefHelper::EventNotify(Event&, NuEventData&)
CharSFXDef::CharSFXDef(int)
CharSFXDef::~CharSFXDef()
CharSFXDefNameRef::CharSFXDefNameRef()
CharSFXDefNameRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharSFXDefNameRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharSFXDefHelper::CharSFXDefHelper()
CharSFXDefHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSFXDefHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSFXDefHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharSFXDefHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharSFXDefHelper::EventNotify(Event&, NuEventData&)
CharLayerSpecialDef::CharLayerSpecialDef(int)
CharLayerSpecialDef::~CharLayerSpecialDef()
CharLayerSpecialDef::~CharLayerSpecialDef()
CharLayerSpecialDef::GetModel() const
CharLayerSpecialDefNameRef::CharLayerSpecialDefNameRef()
CharLayerSpecialDefNameRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharLayerSpecialDefHelper::CharLayerSpecialDefHelper()
CharLayerSpecialDefHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharLayerSpecialDefHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharLayerSpecialDefHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharLayerSpecialDefHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharLayerSpecialDefHelper::EventNotify(Event&, NuEventData&)
CharDefResourceType::~CharDefResourceType()
CharDefHelper::~CharDefHelper()
CharDefHelper::~CharDefHelper()
non-virtual thunk to CharDefHelper::~CharDefHelper()
non-virtual thunk to CharDefHelper::~CharDefHelper()
CharDefFileParamsHelper::~CharDefFileParamsHelper()
CharDefFileParamsHelper::~CharDefFileParamsHelper()
non-virtual thunk to CharDefFileParamsHelper::~CharDefFileParamsHelper()
non-virtual thunk to CharDefFileParamsHelper::~CharDefFileParamsHelper()
CharDefFileHelper::~CharDefFileHelper()
CharDefFileHelper::~CharDefFileHelper()
non-virtual thunk to CharDefFileHelper::~CharDefFileHelper()
non-virtual thunk to CharDefFileHelper::~CharDefFileHelper()
CharAnimSetRefEdRef::~CharAnimSetRefEdRef()
CharAnimSetRefParamsHelper::~CharAnimSetRefParamsHelper()
CharAnimSetRefHelper::~CharAnimSetRefHelper()
CharAnimSetRefHelper::~CharAnimSetRefHelper()
non-virtual thunk to CharAnimSetRefHelper::~CharAnimSetRefHelper()
non-virtual thunk to CharAnimSetRefHelper::~CharAnimSetRefHelper()
CharDefAppData::AdjustCharacterDefinition()
CharDefAppDataHelper::~CharDefAppDataHelper()
CharMaterialDefRef::~CharMaterialDefRef()
CharMaterialDefHelper::~CharMaterialDefHelper()
CharMaterialDefHelper::~CharMaterialDefHelper()
non-virtual thunk to CharMaterialDefHelper::~CharMaterialDefHelper()
non-virtual thunk to CharMaterialDefHelper::~CharMaterialDefHelper()
CharTextureDefHelper::~CharTextureDefHelper()
CharTextureDefHelper::~CharTextureDefHelper()
non-virtual thunk to CharTextureDefHelper::~CharTextureDefHelper()
non-virtual thunk to CharTextureDefHelper::~CharTextureDefHelper()
CharAttachmentDefNameRef::~CharAttachmentDefNameRef()
CharAttachmentDefRef::~CharAttachmentDefRef()
CharAttachmentDefHelper::~CharAttachmentDefHelper()
CharAttachmentDefHelper::~CharAttachmentDefHelper()
non-virtual thunk to CharAttachmentDefHelper::~CharAttachmentDefHelper()
non-virtual thunk to CharAttachmentDefHelper::~CharAttachmentDefHelper()
CharSFXDefNameRef::~CharSFXDefNameRef()
CharSFXDefHelper::~CharSFXDefHelper()
CharSFXDefHelper::~CharSFXDefHelper()
non-virtual thunk to CharSFXDefHelper::~CharSFXDefHelper()
non-virtual thunk to CharSFXDefHelper::~CharSFXDefHelper()
CharLayerSpecialDefNameRef::~CharLayerSpecialDefNameRef()
CharLayerSpecialDefHelper::~CharLayerSpecialDefHelper()
CharLayerSpecialDefHelper::~CharLayerSpecialDefHelper()
non-virtual thunk to CharLayerSpecialDefHelper::~CharLayerSpecialDefHelper()
non-virtual thunk to CharLayerSpecialDefHelper::~CharLayerSpecialDefHelper()
CharProjectResourceType::GetName() const
CMList<CharProjectSource*>::~CMList()
CharProject::CharProject()
CharProject::~CharProject()
CMList<CharProjectFile*>::~CMList()
CharProject::~CharProject()
CharProject::Fixup()
CharProjectHelper::RegisterClasses(EdRegistry&)
CharProjectFileHelper::RegisterClasses(EdRegistry&)
CharProjectHelper::CharProjectHelper()
CharProjectHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharProjectHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharProjectHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CMList<CharProjectFile*>::Append(CharProjectFile* const&, CMList<CharProjectFile*>::ListLink*)
CharProjectHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharProjectHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CharProjectHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CharProjectHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharProjectHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharProjectHelper::EventNotify(Event&, NuEventData&)
CharProjectFileParams::CharProjectFileParams(char const*, EditorFileParams::AddMode)
CharProjectFile::GetFileType()
CharProjectFileParams::~CharProjectFileParams()
CharProjectFileParams::~CharProjectFileParams()
CharProjectFile::FindByFileName(char const*)
CharProjectFile::FindByFullFileName(char const*)
CharProjectFile::CharProjectFile(EditorFileParams const&)
CharProjectFile::~CharProjectFile()
CharProjectFile::~CharProjectFile()
CharProjectFile::GetParentObject()
CharProjectFile::GetObjects(ClassObjectList&) const
CharProjectFileHelper::CreateCharProjectFile(EditorFileParams const&)
CharProjectFileHelper::CharProjectFileHelper()
CharProjectFileHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharProjectFileHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharProjectFileHelper::AddBaseObject(EdRegContext*, ClassObject&)
CharProjectFileHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
CharProjectFileHelper::GetNumBaseObjects() const
CharProjectFileHelper::GetNextBaseObject(ClassObject const&) const
CharProjectFileHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharProjectFileHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CharProjectFileHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CharProjectFileHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CharProjectFileHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharProjectFileHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharProjectFileHelper::EventNotify(Event&, NuEventData&)
CharProjectResourceType::CreateResourceInternal(ResourceInfo const&) const
CharProjectResourceInfo::CharProjectResourceInfo(char const*)
CharProjectResourceInfo::CharProjectResourceInfo(CharProjectFile const&)
CharProjectResourceInfo::~CharProjectResourceInfo()
CharProjectResourceInfo::~CharProjectResourceInfo()
CharProjectResource::CharProjectResource(CharProjectResourceInfo const&)
CharProjectResource::~CharProjectResource()
CharProjectResource::~CharProjectResource()
CharProjectResource::GetProject() const
CharProjectResource::StartLoad()
CharProjectResource::ProcessLoad()
CharProjectResource::AbortLoad()
CharProjectResource::FinishLoad()
CharProjectResource::HasSuccessfullyLoaded()
CharProjectResource::AbortUnload()
CharProjectResource::FinishUnload()
CharProjectResource::SetProcessFilterID(int)
CharProjectResourceHndl::CharProjectResourceHndl()
CharProjectResourceHndl::CharProjectResourceHndl(ResourceHndl const&)
CharProjectResourceHndl::GetProject() const
CharProjectSource::CharProjectSource(EdRegContext const&)
CharProjectSource::~CharProjectSource()
CharProjectSource::Fixup()
CharProjectSourceHelper::RegisterClasses(EdRegistry&)
CharProjectSourceHelper::CharProjectSourceHelper()
CharProjectSourceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharProjectSourceHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharProjectSourceHelper::AddBaseObject(EdRegContext*, ClassObject&)
CMList<CharProjectSource*>::Append(CharProjectSource* const&, CMList<CharProjectSource*>::ListLink*)
CharProjectSourceHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
CharProjectSourceHelper::GetNumBaseObjects() const
CharProjectSourceHelper::GetNextBaseObject(ClassObject const&) const
CharProjectSourceHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CharProjectSourceHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharProjectSourceHelper::EventNotify(Event&, NuEventData&)
CharProjectResourceType::~CharProjectResourceType()
CharProjectHelper::~CharProjectHelper()
CharProjectHelper::~CharProjectHelper()
non-virtual thunk to CharProjectHelper::~CharProjectHelper()
non-virtual thunk to CharProjectHelper::~CharProjectHelper()
CharProjectFileHelper::~CharProjectFileHelper()
CharProjectFileHelper::~CharProjectFileHelper()
non-virtual thunk to CharProjectFileHelper::~CharProjectFileHelper()
non-virtual thunk to CharProjectFileHelper::~CharProjectFileHelper()
CharProjectSourceHelper::~CharProjectSourceHelper()
CharProjectSourceHelper::~CharProjectSourceHelper()
non-virtual thunk to CharProjectSourceHelper::~CharProjectSourceHelper()
non-virtual thunk to CharProjectSourceHelper::~CharProjectSourceHelper()
FootPivot::FootPivot()
FootPivot::SetPivotBoneName(char const*)
FootPivot::UpdatePivotBoneJointIndex(CharacterPose const&)
FootPivot::CacheWorldTargetPivotPoint(CharacterPose const&)
FootPivot::UpdatePivotBone(CharacterPose const&)
FootPivot::AdjustVelocity(CharacterPose const&, VuVec&, float)
FootPivotTriggerData::FootPivotTriggerData(CharAnimTrigger*)
FootPivotTriggerData::~FootPivotTriggerData()
FootPivotTriggerData::~FootPivotTriggerData()
FootPivotTriggerData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
FootPivotTriggerDataHelper::RegisterTriggerType()
FootPivotTriggerDataHelper::RegisterClasses(EdRegistry&)
FootPivotTriggerDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
FootPivotTriggerDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
FootPivotTriggerDataHelper::~FootPivotTriggerDataHelper()
CreatureIk::CreatureIk()
CreatureIk::CreatureIk(CreatureIk const&)
CreatureIk::~CreatureIk()
CreatureIk::SetEnabled(bool)
CreatureIk::SetTempDisableFootLock()
CreatureIk::RemapBones(int, CharBoneMap&, NuScene&)
CreatureIk::EvaluateBindPose(NuSmartPtr<NuScene, true>, VuMtx*)
CreatureIk::AddLimb(IkBase*)
CreatureIk::RemoveLimb(IkBase*)
CreatureIk::Initialise(CharBoneMap&)
CreatureIk::DoIk(float, NuSmartPtr<NuScene, true>, DynoScene*, CharacterPose&)
CreatureIk::DebugRender(VuMtx&, VuMtx*)
CreatureIk::FindLimb(char const*, IkBase::IkType)
CreatureIk::FindLimb(IkBase const*)
CreatureIk::Clone() const
CreatureIk::GetLegs(Array<LegIk*>&)
CreatureIk::CalculateErrorMtx(NuMatrixBase const&, float, float, NuVector3Base const&, NuVector3Base const&)
CreatureIk::CalculateErrorMtxSimpleYAngOnly(NuVector3Base&, float, float, NuVector3Base const&, NuVector3Base const&, bool, int)
CreatureIk::GetLimbInclusionMaskForCalculateErrorMatrix(char*)
CreatureIk::ApplyErrorReduction(NuMatrixBase&)
CreatureIk::SetLinearErp(float)
CreatureIk::SetLinearReductionFilter(NuVector3Base const&)
CreatureIkHelper::CreatureIkHelper()
CreatureIkHelper::RegisterClasses(EdRegistry&)
Singleton<CreatureIkHelper>::Create()
CreatureIkHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CreatureIkHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CreatureIkHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CreatureIkHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CreatureIkHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CreatureIkHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CreatureIkHelper::GetParentObject(void*)
CreatureIkHelper::GetParentClass(void*)
CreatureIkHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CreatureIkHelper::EventNotify(Event&, NuEventData&)
CreatureIkHelper::~CreatureIkHelper()
CreatureIkHelper::~CreatureIkHelper()
non-virtual thunk to CreatureIkHelper::~CreatureIkHelper()
non-virtual thunk to CreatureIkHelper::~CreatureIkHelper()
EdFakeName::~EdFakeName()
EdFakeName::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdFakeName::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
IkTriggerData::IkTriggerData()
IkTriggerData::~IkTriggerData()
IkTriggerData::~IkTriggerData()
IkTriggerData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
IkTriggerData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
IkTriggerDataHelper::RegisterTriggerType()
IkTriggerDataHelper::RegisterClasses(EdRegistry&)
IkTriggerDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
IkTriggerDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
IkTriggerDataHelper::~IkTriggerDataHelper()
IkTriggerRangeData::~IkTriggerRangeData()
LegIk::DefaultRayCastFunction(DynoScene*, DynoRay&, FirstPointCollector&)
LegIk::SetRayCastFunction(bool (*)(DynoScene*, DynoRay&, FirstPointCollector&))
LegIk::LegIk(char const*)
LegIk::LegIk(LegIk&)
LegIk::~LegIk()
LegIk::~LegIk()
LegIk::GetType()
LegIk::Clone()
LegIk::Initialise(VuMtx*, CharBoneMap&)
LegIk::RemapBones(int, CharBoneMap&, NuScene&)
LegIk::GetLodIndexes(NuSmartPtr<NuScene, true>, unsigned char&, unsigned char&, unsigned char&)
LegIk::GetAnkleAnimPos()
LegIk::GetAnklePos()
LegIk::GetPreviousAnklePos()
LegIk::GetAnkleLockPos()
LegIk::SetMaxLockError(float)
LegIk::GetMaxLockError()
LegIk::SetAnkleLockTarget(NuVector3Base const&)
LegIk::SetAnkleLockBlend(float)
LegIk::SetAnkleLock(bool)
LegIk::GetAnkleLock()
LegIk::GetAnkleLockBlend()
LegIk::RenderLeg(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&)
LegIk::DebugRender(VuMtx&, VuMtx*)
LegIk::SetLockErrorEnabled(bool)
LegIk::DoIk(float, NuSmartPtr<NuScene, true>, DynoScene*, CharacterPose&)
CharacterPose::GetWorldSpaceJointTransform(unsigned char, NuTransform&) const
CharacterPose::SetWorldSpaceJointTransform(unsigned char, NuTransform const&)
EdCharIKLegHelper::EdCharIKLegHelper()
EdCharIKLegHelper::RegisterClasses(EdRegistry&)
EdCharIKLegHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
EdCharIKLegHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
EdCharIKLegHelper::GetParentObject(void*)
EdCharIKLegHelper::GetParentClass(void*)
EdCharIKLegHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to EdCharIKLegHelper::EventNotify(Event&, NuEventData&)
IkBase::GetFirstBoneIx()
EdCharIKLegHelper::~EdCharIKLegHelper()
EdCharIKLegHelper::~EdCharIKLegHelper()
non-virtual thunk to EdCharIKLegHelper::~EdCharIKLegHelper()
non-virtual thunk to EdCharIKLegHelper::~EdCharIKLegHelper()
TargetIk::TargetIk(char const*)
TargetIk::TargetIk(TargetIk&)
TargetIk::~TargetIk()
TargetIk::~TargetIk()
TargetIk::GetType()
TargetIk::Clone()
TargetIk::GetFirstBoneIx()
TargetIk::Initialise(VuMtx*, CharBoneMap&)
TargetIk::GetPivotAndTarget(NuTransform&, NuTransform&, CharacterPose&)
TargetIk::GetLodIndexes(NuSmartPtr<NuScene, true>, unsigned char&, unsigned char&)
TargetIk::RemapBones(int, CharBoneMap&, NuScene&)
TargetIk::SetTargetPos(NuVector3Base&)
TargetIk::InvalidateTarget()
TargetIk::DebugRender(VuMtx&, VuMtx*)
TargetIk::DoIk(float, NuSmartPtr<NuScene, true>, DynoScene*, CharacterPose&)
TargetIk::SeekTowardsPointTarget(NuVector3Base const&, float)
TargetIk::RobotIk(NuVector3Base&, NuVector3Base const&, NuVector3Base&, NuMatrixBase&)
TargetIk::HumanArmIk(NuVector3Base&, NuVector3Base&, NuVector3Base&, NuVector3Base&)
TargetIk::Synchronise(TargetIk*)
TargetIk::HasReachedTarget()
TargetIk::SetLocked(bool)
TargetIkHelper::TargetIkHelper()
TargetIkHelper::RegisterClasses(EdRegistry&)
TargetIkHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
TargetIkHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
TargetIkHelper::GetParentObject(void*)
TargetIkHelper::GetParentClass(void*)
TargetIkHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to TargetIkHelper::EventNotify(Event&, NuEventData&)
TargetIkHelper::~TargetIkHelper()
TargetIkHelper::~TargetIkHelper()
non-virtual thunk to TargetIkHelper::~TargetIkHelper()
non-virtual thunk to TargetIkHelper::~TargetIkHelper()
IkJointModifier::Reset()
IkJointModifier::IkJointModifier(char const*)
IkJointModifier::IkJointModifier(char const*, CharBoneMap&)
IkJointModifier::IkJointModifier(IkJointModifier&)
IkJointModifier::~IkJointModifier()
IkJointModifier::~IkJointModifier()
IkJointModifier::GetType()
IkJointModifier::Clone()
IkJointModifier::DebugRender(VuMtx&, VuMtx*)
IkJointModifier::RemapBones(int, CharBoneMap&, NuScene&)
IkJointModifier::Initialise(VuMtx*, CharBoneMap&)
IkJointModifier::DoIk(float, NuSmartPtr<NuScene, true>, DynoScene*, CharacterPose&)
IkJointModifier::SetTransform(VuMtx const&, bool)
IkJointModifier::SetTransform(VuMtx const&)
IkJointModifierHelper::IkJointModifierHelper()
IkJointModifierHelper::RegisterClasses(EdRegistry&)
IkJointModifierHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
IkJointModifierHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
IkJointModifierHelper::GetParentObject(void*)
IkJointModifierHelper::GetParentClass(void*)
IkJointModifierHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to IkJointModifierHelper::EventNotify(Event&, NuEventData&)
IkJointModifierHelper::~IkJointModifierHelper()
IkJointModifierHelper::~IkJointModifierHelper()
non-virtual thunk to IkJointModifierHelper::~IkJointModifierHelper()
non-virtual thunk to IkJointModifierHelper::~IkJointModifierHelper()
IkConstraint::IkConstraint()
IkConstraint::SetParent(TargetIk const*)
IkConstraint::ConstrainPoint(NuMatrixBase const&, NuVector3Base&)
IkConstraint::ApplyConeConstraint(NuMatrixBase const&, NuVector3Base&, float)
IkConstraint::ApplyPlaneConstraints(NuMatrixBase const&, NuVector3Base&, float, float)
IkConstraintHelper::IkConstraintHelper()
IkConstraintHelper::RegisterClasses(EdRegistry&)
IkConstraintHelper::~IkConstraintHelper()
IkConstraintHelper::~IkConstraintHelper()
non-virtual thunk to IkConstraintHelper::~IkConstraintHelper()
non-virtual thunk to IkConstraintHelper::~IkConstraintHelper()
DynoRagDoll::DynoRagDoll()
DynoRagDoll::~DynoRagDoll()
DynoRagDoll::DestroyRigidObjects()
DynoRagDoll::~DynoRagDoll()
DynoRagDoll::Activate()
DynoRagDoll::SeekToWorldPose(VuMtx*, VuMtx const*)
DynoRagDoll::DeActivate()
DynoRagDoll::CreateRigidObjects(short)
DynoRagDoll::GetRigidObjects(Array<RigidObject*>&)
DynoRagDoll::SetDirty(bool)
DynoRagDoll::UpdateParams(RdBoneParams**, DynoScene*)
DynoRagDoll::RemapBones(int, CharBoneMap&)
DynoRagDoll::MapToCharacter(NuSmartPtr<NuScene, true>, CharBoneMap&, VuMtx*)
DynoRagDoll::EvaluateBindPose(NuSmartPtr<NuScene, true>, VuMtx*, float)
DynoRagDoll::FindBodyController(RigidBody const*)
DynoRagDoll::Evaluate(CharacterPose&)
DynoRagDoll::DriveToPose(CharacterPose const&, float)
DynoRagDoll::GetHierachyBlends(char*)
DynoRagDoll::GetRenderBlends(char*)
DynoRagDoll::GetBlends(char*, char*)
DynoRagDoll::GetEntity(int)
DynoRagDoll::Evolve(DynoScene*, float)
DynoRagDoll::GetType()
DynoRagDoll::SetAppdata(DollAppData*)
DynoRagDoll::GetAppData()
DynoRagDoll::GetMinMax(VuVec&, VuVec&)
DynoRagDoll::SetVelocity(VuVec const&)
DynoRagDoll::ZeroAllVelocityAndSleep()
DynoRagDoll::GetTransform(VuMtx&)
DynoRagDoll::GetYAxisAlignedTransform(VuMtx&)
DynoRagDoll::IsSleeping()
DynoRagDoll::IsKinematic()
DynoRagDoll::SetLayer(char)
DynoRagDoll::AddEntity(Entity*)
DynoRagDoll::ClearCharacterOnlyFilter()
DynoRagDoll::FindBody(char const*)
DynoRagDoll::FindBodyController(char*)
DynoRagDoll::AddJoint(Joint*)
DynoRagDoll::AddToScene(DynoScene*)
DynoRagDoll::RemoveFromScene()
DynoRagDoll::WakeUp()
DynoRagDoll::SetKinematic(bool)
DynoRagDoll::SetKinematic2(bool)
DynoRagDoll::GetName()
DynoRagDoll::SetClothGroundCollision(bool)
DynoRagDoll::SetMaxTranslation(float)
DynoRagDoll::LoadRagDoll(PinnerDynamics*, NuSmartPtr<NuScene, true>, CharBoneMap&)
DynoRagDoll::GetRigidControllersForLayer(int, Array<RdBodyController*>&)
DynoRagDoll::HasDynamicBodies()
DynoRagDoll::SetCastable(bool)
DynoRagDoll::IsCastable()
DynoRagDoll::Cast(DynoRay const&, CastCollector&) const
Controller::GetBody(int)
Controller::RemoveFromScene(DynoScene*)
Controller::SetTransform(VuMtx const&)
Controller::GetExtents(VuVec&)
Controller::SetExtents(VuVec const&)
Controller::GetNumEntities()
RagDollState::RagDollState()
RagDollState::~RagDollState()
RagDollState::GetStateId(char*)
RagDollState::GetBoneParams(RdBoneParams**) const
RagDollState::FixUpBoneIds(CharBoneMap&) const
RagDollState::RemapBones(int, CharBoneMap&) const
RagDollState::SearchForBoneIxs(NuSmartPtr<NuScene, true>) const
RagDollStateHelper::RegisterClasses(EdRegistry&)
RagDollStateHelper::RagDollStateHelper()
RagDollStateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
RagDollStateHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
RagDollStateHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
RagDollStateHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
RagDollStateHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
RagDollStateHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
RagDollStateHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
RagDollStateHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to RagDollStateHelper::EventNotify(Event&, NuEventData&)
RagDollStateHelper::~RagDollStateHelper()
RagDollStateHelper::~RagDollStateHelper()
non-virtual thunk to RagDollStateHelper::~RagDollStateHelper()
non-virtual thunk to RagDollStateHelper::~RagDollStateHelper()
RagDollTriggerData::RagDollTriggerData(CharAnimTrigger*)
RagDollTriggerData::~RagDollTriggerData()
EdNuArray<EdString, unsigned short>::~EdNuArray()
RagDollTriggerData::~RagDollTriggerData()
RagDollTriggerData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
RagDollTriggerData::ShouldConsiderThisEntity(char const*) const
RagDollTriggerData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
RagDollTriggerUpdateData::RagDollTriggerUpdateData(CharAnimTrigger const&, CharAnimState&)
RagDollTriggerUpdateData::~RagDollTriggerUpdateData()
RagDollTriggerUpdateData::~RagDollTriggerUpdateData()
RagDollTriggerDataHelper::RegisterTriggerType()
RagDollTriggerDataHelper::RegisterClasses(EdRegistry&)
RagDollTriggerDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
RagDollTriggerDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
RagDollTriggerDataHelper::~RagDollTriggerDataHelper()
EdNuArray<EdString, unsigned short>::~EdNuArray()
EdNuArray<EdString, unsigned short>::GetAllocSize() const
EdNuArray<EdString, unsigned short>::GetMaxAllocSize() const
EdNuArray<EdString, unsigned short>::SetAllocSize(unsigned int, bool)
EdNuArray<EdString, unsigned short>::GetData()
EdNuArray<EdString, unsigned short>::GetData() const
EdArray<EdString>::GetGrowBy() const
EdArrayWithSize<EdString, unsigned short>::DoGetSize() const
EdArrayWithSize<EdString, unsigned short>::DoSetSize(unsigned int)
RdBodyController::RdBodyController(RigidBody*)
RdBodyController::~RdBodyController()
RdBodyController::~RdBodyController()
RdBodyController::UpdateBoneIxs(int, CharBoneMap&)
RdBodyController::GetType()
RdBodyController::GetBoneIndex()
RdBodyController::GetHierachyBlends(char*)
RdBodyController::GetRenderBlends(char*)
RdBodyController::GetBlends(char*, char*)
RdBodyController::SetParams(RdBoneParams const&, DynoScene*)
RdBodyController::UpdateParams(RdBoneParams**, DynoScene*)
RdBodyController::MapToSkeleton(CharacterPose const&, CharBoneMap*)
NuTransform::Inverse() const
RdBodyController::DriveToPose(CharacterPose const&, float, float, bool)
RdBodyController::Evaluate(CharacterPose&)
RdBodyController::SeekToWorldPose(VuMtx*, VuMtx const*)
RdBodyController::AddToScene(DynoScene*)
RdBodyController::Unlock()
RdClothController::RdClothController(Cloth*)
RdClothController::~RdClothController()
RdClothController::~RdClothController()
RdClothController::GetType()
RdClothController::UpdateBoneIxs(int, CharBoneMap&)
RdClothController::GetBoneIndex()
RdClothController::SetParams(RdBoneParams const&, DynoScene*)
RdClothController::UpdateParams(RdBoneParams**, DynoScene*)
RdClothController::GetHierachyBlends(char*)
RdClothController::GetRenderBlends(char*)
RdClothController::GetBlends(char*, char*)
RdClothController::MapToSkeleton(CharacterPose const&, CharBoneMap*)
RdClothController::GetClothTransforms(NuTransform*, NuSmartPtr<NuScene, true>)
RdClothController::Evaluate(CharacterPose&)
RdClothController::DriveToPose(CharacterPose const&, float, float, bool)
RdClothController::SeekToWorldPose(VuMtx*, VuMtx const*)
RdClothController::AddToScene(DynoScene*)
EdRefRdClothController::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefRdClothController::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
RdClothControllerHelper::RdClothControllerHelper()
RdClothControllerHelper::Initialise()
RdClothControllerHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
RdClothControllerHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
RdClothControllerHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
RdClothControllerHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
RdClothControllerHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
RdClothControllerHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
RdClothControllerHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to RdClothControllerHelper::EventNotify(Event&, NuEventData&)
EdRefRdClothController::~EdRefRdClothController()
RdClothControllerHelper::~RdClothControllerHelper()
RdClothControllerHelper::~RdClothControllerHelper()
non-virtual thunk to RdClothControllerHelper::~RdClothControllerHelper()
non-virtual thunk to RdClothControllerHelper::~RdClothControllerHelper()
RdParticleHelper::Initialise()
RdParticleHelper::RdParticleHelper()
RdParticleHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
RdParticleHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
RdParticleHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to RdParticleHelper::EventNotify(Event&, NuEventData&)
RdParticleHelper::~RdParticleHelper()
RdParticleHelper::~RdParticleHelper()
non-virtual thunk to RdParticleHelper::~RdParticleHelper()
non-virtual thunk to RdParticleHelper::~RdParticleHelper()
TargetPose::TargetPose()
TargetPose::~TargetPose()
TargetPose::~TargetPose()
TargetPoseHelper::RegisterClasses(EdRegistry&)
TargetPoseHelper::TargetPoseHelper()
TargetPoseHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
TargetPoseHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
TargetPoseHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to TargetPoseHelper::EventNotify(Event&, NuEventData&)
TargetPoseHelper::~TargetPoseHelper()
TargetPoseHelper::~TargetPoseHelper()
non-virtual thunk to TargetPoseHelper::~TargetPoseHelper()
non-virtual thunk to TargetPoseHelper::~TargetPoseHelper()
CharBoneMap::CharBoneMap(NuSmartPtr<NuScene, true>)
CharBoneMap::SetTopLodModel(NuSmartPtr<NuScene, true>)
CharBoneMap::~CharBoneMap()
CharBoneMap::FindBoneId(char const*)
NuVector<CharBoneMap::BoneIxLodMap>::Reserve(unsigned int, bool)
IkBase::IkBase(char const*, IkBase*)
IkBase::IkBase(IkBase&)
IkBase::SetName(char const*)
IkBase::~IkBase()
IkBase::~IkBase()
IkBase::SetActive(char)
IkBase::SolveTwoBoneIk(NuVector3Base const&, NuVector3Base&, NuVector3Base const&, NuScalarBase const&, NuScalarBase const&, NuVector3Base const*)
IkBase::RemapBones(int, CharBoneMap&, NuScene&)
IkBase::Initialise(VuMtx*, CharBoneMap&)
EntityTuner::EntityTuner(int, char const*, char)
EntityTuner::~EntityTuner()
EntityTuner::~EntityTuner()
EntityTunerHelper::RegisterClasses(EdRegistry&)
EntityTunerHelper::EntityTunerHelper()
EntityTunerHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
EntityTunerHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
EntityTunerHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to EntityTunerHelper::EventNotify(Event&, NuEventData&)
EntityTunerHelper::~EntityTunerHelper()
EntityTunerHelper::~EntityTunerHelper()
non-virtual thunk to EntityTunerHelper::~EntityTunerHelper()
non-virtual thunk to EntityTunerHelper::~EntityTunerHelper()
ApiRopeTypeList::~ApiRopeTypeList()
DynoManager::DynoManager(LevelContainer&)
DynoManager::RegisterProcessing()
DynoManager::RegisterRendering()
DynoManager::~DynoManager()
DynoManager::~DynoManager()
DynoManager::SetPaused(bool)
DynoManager::AddEntityObject(EntityObject*)
DynoManager::RemoveEntityObject(EntityObject*)
DynoManager::ContainsEntityObject(EntityObject&)
DynoManager::AddApiRope(ApiRope*)
DynoManager::RemoveApiRope(ApiRope*)
CreateDynoManager(LevelContainer&)
DynoManager::OnAddScene(EdRegContext&, char const*)
DynoManager::InitialiseEntities(DynoImporter&, EdRegContext&)
DynoManager::OnRemoveScene(EdRegContext&)
DynoManager::OnSetInUse()
DynoManager::OnSetIdle()
DynoManager::EventNotify(Event&, NuEventData&)
DynoManager::SettlePhysics()
DynoManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
DynoManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
DynoManager::SupportsLevelContainerFindObject(EdClass*)
DynoManager::LevelContainerFindObject(char const*, EdClass*, short, void*)
DynoManager::FindRigidObject(char const*, NuSmartPtr<NuScene, true>)
DynoManager::GetLevelContainer(Entity&)
DynoManager::GetEntity(ClassObject const&)
DynoManager::MenuItemToggle(void*, int)
DynoManager::GetScene()
DynoManager::GetNumClasses()
DynoManager::GetClass(int)
DynoManager::GetManagerName() const
DynoManager::GetNumObjects(void*)
DynoManager::GetNextObject(void*, void*)
DynoManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
DynoManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
NuEHashMap<SceneObjectKey, SceneObject>::~NuEHashMap()
PhysicsEffects::PhysicsEffects()
PhysicsEffects::SetReferenceSplashVolumeAndCause(float, float, float)
PhysicsEffects::~PhysicsEffects()
PhysicsEffects::~PhysicsEffects()
PhysicsEffects::Initialize()
PhysicsEffects::Process(float)
PhysicsEffects::CurrentPhysSfxDesc::Clear()
PhysicsEffects::HighestPrioritySfxInArray(PhysicsEffects::CurrentPhysSfxDesc*)
PhysicsEffects::LowestPrioritySfxInArray(PhysicsEffects::CurrentPhysSfxDesc*)
PhysicsEffects::Collision(EntityPair*)
PhysicsEffects::BodyPairCollision(BodyPair*)
PhysicsEffects::WaterBodyPairCollision(WaterBodyPair*)
PhysicsEffects::RequestSfxPlayback(int, EntityPair*, bool, NUVEC const*, float, float)
PhysicsEffects::SetImpactSfxMaxVolSpeed(float)
PhysicsEffects::SetGlobalSlidesSfxVolScale(float)
PhysicsEffects::EventNotify(Event&, NuEventData&)
PhysicsEffects::CurrentPhysSfxDesc::CurrentPhysSfxDesc()
ClassManagerAccessor<SoundManager>::GetFromCreate(ILevelContainer const&)
ApiActor::ApiActor(EdRegContext&)
ApiActor::~ApiActor()
non-virtual thunk to ApiActor::~ApiActor()
ApiActor::~ApiActor()
non-virtual thunk to ApiActor::~ApiActor()
ApiActor::GetCharDef()
ApiActor::GetCharInst() const
ApiActor::DeleteBrain()
ApiActor::EnableBrain(bool)
ApiActor::AddToScene()
ApiActor::RemoveFromScene()
ApiActor::PrePhysicsProcess(float)
ApiActor::SetScriptContext(char const*)
ApiActor::UpdateOnActiveGridCellLevel()
ApiActor::ScriptContextClearRef()
ApiActor::GetScriptContext() const
ApiActor::SwapScript(ApiActor&)
ApiActor::RestartScript()
IsInActiveGridCell(StreamingLevelAreaManager*, VuVec const&)
VehicleGridCellStatus(StreamingLevelAreaManager*, ApiVehicle*)
ApiActor::IsFullyOnNavMesh(float, ApiActor::IsFullyOnNavMeshMode)
ApiActor::Cast(PlaceableBase*)
ApiActorHelper::RegisterClasses(EdRegistry&)
ApiActorHelper::ApiActorHelper()
ApiActor::GetApiCharacter()
ApiActor::GetApiVehicle()
ApiActor::IsEnabled() const
ApiActor::GetDimensions(NuVector3Base&)
ApiActor::SetScale(float)
ApiActor::GetScaledRadiusButNotTheSameNameAsTheApiObjectOne()
ApiActor::IsOnActiveGridCell()
ApiActorHelper::~ApiActorHelper()
ApiCharacter::ApiCharacter(EdRegContext&, ApiCharacterParams const&)
ApiCharacter::SetContext(EdRegContext&)
ApiCharacter::SetCharDefResource(CharDefResourceHndl const&, CharInst::KrawlyMode)
ApiCharacter::~ApiCharacter()
ApiCharacter::DetachCharacter()
ApiCharacter::DestroyPhysicsChar()
ApiCharacter::DestroyCharInst()
non-virtual thunk to ApiCharacter::~ApiCharacter()
non-virtual thunk to ApiCharacter::~ApiCharacter()
non-virtual thunk to ApiCharacter::~ApiCharacter()
ApiCharacter::~ApiCharacter()
non-virtual thunk to ApiCharacter::~ApiCharacter()
non-virtual thunk to ApiCharacter::~ApiCharacter()
non-virtual thunk to ApiCharacter::~ApiCharacter()
ApiCharacter::CreateCharacterBrain()
ApiCharacter::GetSkeleton() const
ApiCharacter::GetMyLevelContainer() const
ApiCharacter::GetMinMax(NuVector3Base&, NuVector3Base&)
ApiCharacter::GetDimensions(NuVector3Base&)
ApiCharacter::SetPosition(VuVec const&)
ApiCharacter::UpdatePositions(bool, bool)
ApiCharacter::SetTransform(VuMtx const&)
ApiCharacter::UpdateTransforms(bool, bool)
ApiCharacter::GetTransform(VuMtx&) const
ApiCharacter::SetTransform(NuMatrixBase const&)
ApiCharacter::GetTransform() const
ApiCharacter::SetScale(float)
ApiCharacter::GetClass() const
ApiCharacter::SetFootPosition(NuVector3Base const&)
ApiCharacter::ShouldUseSmoothedY()
ApiCharacter::Teleport(NuVector3Base const&)
ApiCharacter::SetTransformExceptPhysicsAndAI(VuMtx const&)
ApiCharacter::SetTransformExceptPhysicsCapsule(VuMtx const&)
ApiCharacter::CreateCharInst(CharDefResourceHndl const&, CharInst::KrawlyMode)
ApiCharacter::CreatePhysicsChar()
ApiCharacter::GetDynoScene()
ApiCharacter::AddToScene()
ApiCharacter::RemoveFromScene()
ApiCharacter::EnablePhysicsChar(bool)
ApiCharacter::CreateLak()
ApiCharacter::ExpandLAK(NuVector3Base const&)
ApiCharacter::SetName(char const*)
ApiCharacter::SetRender(bool)
ApiCharacter::PrePhysicsProcess(float)
ApiCharacter::PreMoveAnimate(float)
ApiCharacter::Move(float)
ApiCharacter::PostMoveAnimate(float)
ApiCharacter::Think(float)
ApiCharacter::GetHeading() const
ApiCharacter::GetHeadingSeekMultiplier() const
ApiCharacter::MoveAttachments(float)
ApiCharacter::PostPhysicsProcess(float)
ApiCharacter::ResetOnScreen()
ApiCharacter::Render()
non-virtual thunk to ApiCharacter::Render()
ApiCharacter::DebugRender()
ApiCharacter::SetTargetHeading(float)
ApiCharacter::SetHeading(float)
ApiCharacter::GetTargetHeading() const
ApiCharacter::SetHeadingSeekMultiplier(float)
ApiCharacter::GetFootPosition() const
ApiCharacter::Cast(Character const*)
ApiCharacter::Cast(CharInst const*)
ApiCharacter::Cast(CharInst const&)
ApiCharacter::Cast(Phantom const*)
ApiCharacter::Cast(APIOBJECT const*)
ApiCharacter::GetLakPlacableList(Array<Placeable*>&)
ApiCharacter::SetManager(ApiCharacterManager*)
ApiCharacter::UpdateBox()
non-virtual thunk to ApiCharacter::UpdateBox()
ApiCharacter::CharInstResetToDefaults()
ApiCharacter::ClearRagdoll()
ApiCharacter::AttachData::AttachData(ApiCharacter&, ApiCharacter&, int, float, float, ApiCharacter::AttachBlendMode, ApiCharacter::AttachCollisionMode)
ApiCharacter::AttachCharacter(ApiCharacter&, int, float, float, ApiCharacter::AttachBlendMode, ApiCharacter::AttachCollisionMode)
ApiCharacter::UpdateAttachments(float)
ApiCharacter::CanCollide(ApiCharacter const&) const
ApiCharacter::GetVisibility() const
ApiCharacter::SetVisibility(int)
ApiCharacter::GetApiCharacter()
ApiCharacter::GetScaledRadiusButNotTheSameNameAsTheApiObjectOne()
ApiCharacter::PrepareBrain()
ApiCharacter::PreAvoidanceProcess(float)
ApiCharacter::PostAvoidanceProcess(float)
APIOBJECT::GetApiObjIsUsed() const
APIOBJECT::GetApiObjIsOn() const
APIOBJECT::GetApiObjIsPlayerControlled() const
APIOBJECT::GetApiObjIsPartyMember() const
APIOBJECT::GetApiObjPartyIndex() const
APIOBJECT::GetApiObjCreatdataix() const
APIOBJECT::GetApiObjIsDead() const
APIOBJECT::GetScaledCollisionRadius() const
AIAvoidable::GetAiObstacles(Array<VuVec>&)
AIAvoidable::ShouldBeAvoided(Brain const&) const
AIAvoidable::GetEscapeDirection(VuVec&, VuVec const&) const
AIAvoidable::GetAvoidableBrain() const
ClassManagerAccessor<ApiCharacterManager>::GetFromCreate(ILevelContainer const&)
ApiCharacterLak::ApiCharacterLak()
ApiCharacterLak::IsTouchingKillLayer()
ApiCharacterLak::ReCalculateTerrainPoints(VuVec const&, unsigned int, unsigned int, bool)
ApiCharacterLak::ClearTerrainPoints()
ApiCharacterLak::BeginCollision(Entity*)
ApiCharacterLak::EndCollision(Entity*)
ApiCharacterLak::GetExtents(VuVec&)
ApiCharacterLak::GetExtents(NuVector3Base&)
ApiCharacterLak::DebugRender(ApiCharacter*)
NuDebugDraw::RenderText3D(VuVec const&, char const*, ...)
ApiCharacterLak::~ApiCharacterLak()
ApiCharacterLak::~ApiCharacterLak()
ApiCharacterParamsHelper::RegisterClasses(EdRegistry&)
ApiCharacterParamsHelper::ApiCharacterParamsHelper()
ApiCharacterHelper::RegisterClasses(EdRegistry&)
ApiCharacterHelper::ApiCharacterHelper()
ApiCharacterHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ApiCharacterHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ApiCharacterHelper::GetObjectPrams(void*, void*, int)
ApiCharacterHelper::GetManNumObjectsType(ClassManager*, void*, EdClass*)
ApiCharacterHelper::GetManNumObjects(ClassManager*, void*)
ApiCharacterHelper::GetManNextObjectType(ClassManager*, void*, void*, EdClass*)
ApiCharacterHelper::GetManNextObject(ClassManager*, void*, void*)
ApiCharacterRef::ApiCharacterRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
ApiCharacterRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ApiCharacterRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ApiCharacterRef::GetMemberObject(void*)
ApiCharacterHelper::~ApiCharacterHelper()
ApiCharacterRef::~ApiCharacterRef()
ApiCharacterParamsHelper::~ApiCharacterParamsHelper()
ApiCharacterParamsHelper::~ApiCharacterParamsHelper()
non-virtual thunk to ApiCharacterParamsHelper::~ApiCharacterParamsHelper()
non-virtual thunk to ApiCharacterParamsHelper::~ApiCharacterParamsHelper()
CSListHeader<ApiCharacter>::~CSListHeader()
ApiCharacterManager::SetBlobShadowMaterial(NuSmartPtr<NuMtl, true>)
ApiCharacterManager::ApiCharacterManager(LevelContainer&)
ApiCharacterManager::RegisterProcessing()
ApiCharacterManager::RegisterRendering()
ApiCharacterManager::~ApiCharacterManager()
ApiCharacterManager::~ApiCharacterManager()
ApiCharacterManager::AddCharacter(ApiCharacter&)
CMList<ApiCharacter*>::Append(ApiCharacter* const&, CMList<ApiCharacter*>::ListLink*)
ApiCharacterManager::RemoveCharacter(ApiCharacter&)
ApiCharacterManager::FindCharacterByName(char const*) const
ApiCharacterManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ApiCharacterManager::PreScriptManagerProcess(float)
ApiCharacterManager::EarlyProcess(float)
ApiCharacterManager::Process(float)
ApiCharacterManager::PostPhysicsProcess(float)
ApiCharacterManager::SetupEvalAnims()
ApiCharacterManager::ResetOnScreen(NURENDERSTAGE, LevelViewType, ClassManager::eRenderingPriority const&)
ApiCharacterManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
ApiCharacterManager::SetProcessingPaused(int)
ApiCharacterManager::SetRenderingPaused(int)
ApiCharacterManager::SetInCutscene(bool)
ApiCharacterManager::EventNotify(Event&, NuEventData&)
ApiCharacterManager::MakeUniqueName(EdString&, ApiCharacter*) const
ApiCharacterManager::IsUniqueName(EdString&, ApiCharacter*) const
ApiCharacterManager::ApiCharacterPriority::ApiCharacterPriority(ApiCharacter*, float)
ApiCharacterManager::CompareApiCharacterPriority(ApiCharacterManager::ApiCharacterPriority const&, ApiCharacterManager::ApiCharacterPriority const&)
ApiCharacterManager::GetManagerName() const
ApiCharacterManager::GetClass(int)
ApiCharacterManager::GetNumClasses()
ApiCharacterManager::GetNumObjects(void*)
ApiCharacterManager::GetNextObject(void*, void*)
ApiCharacterManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ApiCharacterManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
NuListNode<ApiCharacterManager::ApiCharacterPriority>* NuListSort<ApiCharacterManager::ApiCharacterPriority, NuListNode<ApiCharacterManager::ApiCharacterPriority> >::MergeSort<bool (*)(ApiCharacterManager::ApiCharacterPriority const&, ApiCharacterManager::ApiCharacterPriority const&)>(bool (*)(ApiCharacterManager::ApiCharacterPriority const&, ApiCharacterManager::ApiCharacterPriority const&), NuListNode<ApiCharacterManager::ApiCharacterPriority>*, unsigned int)
ApiCharacterScriptVariable::Init()
ApiCharacterScriptVariable::Set(ScriptVariable const*)
ApiCharacterScriptVariable::NotifyEvent(Event&, NuEventData&)
ApiCharacterScriptVariable::Equals(ScriptVariable const*)
ApiCharacterScriptVariable::~ApiCharacterScriptVariable()
non-virtual thunk to ApiCharacterScriptVariable::~ApiCharacterScriptVariable()
ApiCharacterScriptVariable::~ApiCharacterScriptVariable()
non-virtual thunk to ApiCharacterScriptVariable::~ApiCharacterScriptVariable()
ApiCharacterScriptVariable::LoadVariable(char const*)
ApiCharacterScriptVariable::ApiCharacterScriptVariable(char const*, sDynamicVariableData&, ScriptContext&)
SAction_ApiCharacter::Exec(ScriptContext&)
void ScriptContext::SetReturn<ApiCharacterScriptVariable, sDynamicVariableData>(int, sDynamicVariableData)
CharacterAction::Exec(ScriptContext&)
CharacterAction::ExecInternal(ScriptContext&, bool)
SAction_ApiCharacter2Text::CharacterExec(ApiCharacter*, ScriptContext&)
SAction_ApiCharacter2Position::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_Distance::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_DistanceXZ::CharacterExec(ApiCharacter*, ScriptContext&)
SAction_CharacterInArea::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_OnScreen::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_ResetToOrigin::CharacterExec(ApiCharacter*, ScriptContext&)
ApiCharacterScriptVariable::AsBool() const
ApiCharacterScriptVariable::AsText() const
SAction_ApiCharacter::~SAction_ApiCharacter()
SAction_ApiCharacter::GetName() const
SAction_ApiCharacter::GetInputs(SCmdParams&) const
SAction_ApiCharacter::GetOutputs(SCmdParams&) const
CharacterAction::~CharacterAction()
SAction_ApiCharacter2Text::~SAction_ApiCharacter2Text()
SAction_ApiCharacter2Text::GetName() const
SAction_ApiCharacter2Text::GetInputs(SCmdParams&) const
SAction_ApiCharacter2Text::GetOutputs(SCmdParams&) const
SAction_ApiCharacter2Position::~SAction_ApiCharacter2Position()
SAction_ApiCharacter2Position::GetName() const
SAction_ApiCharacter2Position::GetInputs(SCmdParams&) const
SAction_ApiCharacter2Position::GetOutputs(SCmdParams&) const
CharacterAction_Distance::~CharacterAction_Distance()
CharacterAction_Distance::GetName() const
CharacterAction_Distance::GetInputs(SCmdParams&) const
CharacterAction_Distance::GetOutputs(SCmdParams&) const
CharacterAction_DistanceXZ::~CharacterAction_DistanceXZ()
CharacterAction_DistanceXZ::GetName() const
CharacterAction_DistanceXZ::GetInputs(SCmdParams&) const
CharacterAction_DistanceXZ::GetOutputs(SCmdParams&) const
CharacterAction_OnScreen::~CharacterAction_OnScreen()
CharacterAction_OnScreen::GetName() const
CharacterAction_OnScreen::GetInputs(SCmdParams&) const
CharacterAction_OnScreen::GetOutputs(SCmdParams&) const
CharacterAction_OnScreen::Exec(ScriptContext&)
CharacterAction_ResetToOrigin::~CharacterAction_ResetToOrigin()
CharacterAction_ResetToOrigin::GetName() const
CharacterAction_ResetToOrigin::GetInputs(SCmdParams&) const
CharacterAction_ResetToOrigin::GetOutputs(SCmdParams&) const
SAction_CharacterInArea::~SAction_CharacterInArea()
SAction_CharacterInArea::GetName() const
SAction_CharacterInArea::GetInputs(SCmdParams&) const
SAction_CharacterInArea::GetOutputs(SCmdParams&) const
SAction_CharacterInArea::Exec(ScriptContext&)
ScriptVariable* CreateObject<ApiCharacterScriptVariable>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<ApiCharacterScriptVariable>(char const*, ScriptContext&)
VehicleDefSeat::GetSeatFromIndex(int)
VehicleDefSeat::GetNextSeat(VehicleDefSeat::SEATTYPES)
VehicleDefSeat::VehicleDefSeat()
VehicleDefSeatHelper::VehicleDefSeatHelper()
VehicleDefSeatHelper::Initialise()
VehicleDefSeatHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefSeatHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefSeatHelper::~VehicleDefSeatHelper()
ApiVehicleMassMulVars::Set(float, float, float)
ApiVehicleMassMulMatrix::SetMassMul(bool, float, float, float, float, bool, float, float, float)
ApiVehicleMassMulMatrix::SetMassMul(float, float, float, float, bool, float, float, float)
ApiVehicleMassMulMatrix::SetPlr2Plr(float, float, float)
ApiVehicleMassMulMatrix::SetPlr2NonPlr(float, float, float)
ApiVehicleMassMulMatrix::SetNonPlr2NonPlr(float, float, float)
ApiVehicleMassMulMatrix::SetNonPlr2Plr(float, float, float)
ApiVehicleMassMulMatrix::SetPlr2Blowup(float, float, float)
ApiVehicleMassMulMatrix::SetNonPlr2Blowup(float, float, float)
ApiVehicleMassMulMatrix::SetBlowupHitByPlr(float, float, float)
ApiVehicleMassMulMatrix::SetBlowupHitByNonPlr(float, float, float)
ApiVehicle::SetMassMulMatrix(ApiVehicleMassMulMatrix&)
ApiVehicle::GetMassMulInfo(ApiVehicle*)
ApiVehicle::GetMassMulScalar(ApiVehicle*, float&, float&)
ApiVehicle::GetBlowupMassMulInfo()
ApiVehicle::InitMassMulVars()
ApiVehicle::SetMassMulImpact(float)
ApiVehicle::IsMassMulImpact()
ApiVehicle::UpdateMassMulImpactTimer()
ApiVehicle::IsMassMulEnabled()
VehicleDefStatic::Reset()
VehicleDefStatic::VehicleDefStatic(EdRegContext&)
VehicleDefStatic::GetClass() const
VehicleDefStatic::~VehicleDefStatic()
non-virtual thunk to VehicleDefStatic::~VehicleDefStatic()
VehicleDefStatic::~VehicleDefStatic()
non-virtual thunk to VehicleDefStatic::~VehicleDefStatic()
VehicleDefStaticHelper::VehicleDefStaticHelper()
VehicleDefStaticHelper::BeginFoldingGroup(EdClass*, char const*)
VehicleDefStaticHelper::EndFoldingGroup(EdClass*)
VehicleDefStaticHelper::Initialise()
VehicleDefStaticHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefStaticHelper::GetObjectPrams(void*, void*, int)
VehicleDefStaticHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefStaticHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefStaticHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefStaticHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
VehicleDefStaticHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
VehicleDefStaticHelper::GetParentObject(void*)
VehicleDefStaticHelper::GetParentClass(void*)
VehicleDefStaticHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to VehicleDefStaticHelper::EventNotify(Event&, NuEventData&)
VehicleDef::GetJumpPower() const
VehicleDefStaticHelper::~VehicleDefStaticHelper()
VehicleDefStaticHelper::~VehicleDefStaticHelper()
non-virtual thunk to VehicleDefStaticHelper::~VehicleDefStaticHelper()
non-virtual thunk to VehicleDefStaticHelper::~VehicleDefStaticHelper()
VehicleDefHover::Reset()
VehicleDefHover::VehicleDefHover(EdRegContext&)
VehicleDefHover::~VehicleDefHover()
non-virtual thunk to VehicleDefHover::~VehicleDefHover()
VehicleDefHover::~VehicleDefHover()
non-virtual thunk to VehicleDefHover::~VehicleDefHover()
VehicleDefHover::GetClass() const
VehicleDefHoverHelper::VehicleDefHoverHelper()
VehicleDefHoverHelper::Initialise()
VehicleDefHoverHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefHoverHelper::GetObjectPrams(void*, void*, int)
VehicleDefHoverHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefHoverHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefHoverHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefHoverHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
VehicleDefHoverHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
VehicleDefHoverHelper::GetParentObject(void*)
VehicleDefHoverHelper::GetParentClass(void*)
VehicleDefHoverHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to VehicleDefHoverHelper::EventNotify(Event&, NuEventData&)
VehicleDefHoverHelper::~VehicleDefHoverHelper()
VehicleDefHoverHelper::~VehicleDefHoverHelper()
non-virtual thunk to VehicleDefHoverHelper::~VehicleDefHoverHelper()
non-virtual thunk to VehicleDefHoverHelper::~VehicleDefHoverHelper()
VehicleDefCar::Reset()
VehicleDefCar::VehicleDefCar(EdRegContext&)
VehicleDefCar::~VehicleDefCar()
non-virtual thunk to VehicleDefCar::~VehicleDefCar()
VehicleDefCar::~VehicleDefCar()
non-virtual thunk to VehicleDefCar::~VehicleDefCar()
VehicleDefCar::GetClass() const
VehicleDefCar::UnloadSkidmarkResources(bool)
VehicleDefCar::LoadSkidmarkResources(bool)
VehicleDefCar::LoadResources()
VehicleDefCar::UnloadResources()
VehicleDefCar::AreSkidmarkResourcesLoaded()
VehicleDefCar::AreResourcesLoaded()
VehicleDefCar::SetProcessFilterID(int)
VehicleDefCarHelper::VehicleDefCarHelper()
VehicleDefCarHelper::Initialise()
VehicleDefCarHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefCarHelper::GetObjectPrams(void*, void*, int)
VehicleDefCarHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefCarHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefCarHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefCarHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
VehicleDefCarHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
VehicleDefCarHelper::GetParentObject(void*)
VehicleDefCarHelper::GetParentClass(void*)
VehicleDefCarHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to VehicleDefCarHelper::EventNotify(Event&, NuEventData&)
VehicleDef::GetMaxVelocity() const
VehicleDefCar::GetJumpPower() const
VehicleDefCarHelper::~VehicleDefCarHelper()
VehicleDefCarHelper::~VehicleDefCarHelper()
non-virtual thunk to VehicleDefCarHelper::~VehicleDefCarHelper()
non-virtual thunk to VehicleDefCarHelper::~VehicleDefCarHelper()
VehicleDefBike::Reset()
VehicleDefBike::VehicleDefBike(EdRegContext&)
VehicleDefBike::~VehicleDefBike()
non-virtual thunk to VehicleDefBike::~VehicleDefBike()
VehicleDefBike::~VehicleDefBike()
non-virtual thunk to VehicleDefBike::~VehicleDefBike()
VehicleDefBike::GetClass() const
VehicleDefBike::UnloadSkidmarkResources(bool)
VehicleDefBike::LoadSkidmarkResources(bool)
VehicleDefBike::LoadResources()
VehicleDefBike::UnloadResources()
VehicleDefBike::AreSkidmarkResourcesLoaded()
VehicleDefBike::AreResourcesLoaded()
VehicleDefBike::SetProcessFilterID(int)
VehicleDefBikeHelper::VehicleDefBikeHelper()
VehicleDefBikeHelper::Initialise()
VehicleDefBikeHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefBikeHelper::GetObjectPrams(void*, void*, int)
VehicleDefBikeHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefBikeHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefBikeHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefBikeHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
VehicleDefBikeHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
VehicleDefBikeHelper::GetParentObject(void*)
VehicleDefBikeHelper::GetParentClass(void*)
VehicleDefBikeHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to VehicleDefBikeHelper::EventNotify(Event&, NuEventData&)
VehicleDefBike::GetJumpPower() const
VehicleDefBikeHelper::~VehicleDefBikeHelper()
VehicleDefBikeHelper::~VehicleDefBikeHelper()
non-virtual thunk to VehicleDefBikeHelper::~VehicleDefBikeHelper()
non-virtual thunk to VehicleDefBikeHelper::~VehicleDefBikeHelper()
VehicleDefBoat::Reset()
VehicleDefBoat::VehicleDefBoat(EdRegContext&)
VehicleDefBoat::GetClass() const
VehicleDefBoatHelper::VehicleDefBoatHelper()
VehicleDefBoatHelper::Initialise()
VehicleDefBoatHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefBoatHelper::GetObjectPrams(void*, void*, int)
VehicleDefBoatHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefBoatHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefBoatHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefBoatHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
VehicleDefBoatHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
VehicleDefBoatHelper::GetParentObject(void*)
VehicleDefBoatHelper::GetParentClass(void*)
VehicleDefBoat::~VehicleDefBoat()
VehicleDefBoat::~VehicleDefBoat()
VehicleDefBoat::GetJumpPower() const
non-virtual thunk to VehicleDefBoat::~VehicleDefBoat()
non-virtual thunk to VehicleDefBoat::~VehicleDefBoat()
VehicleDefBoatHelper::~VehicleDefBoatHelper()
VehicleDefAircraft::Reset()
VehicleDefAircraft::VehicleDefAircraft(EdRegContext&)
VehicleDefAircraft::~VehicleDefAircraft()
non-virtual thunk to VehicleDefAircraft::~VehicleDefAircraft()
VehicleDefAircraft::~VehicleDefAircraft()
non-virtual thunk to VehicleDefAircraft::~VehicleDefAircraft()
VehicleDefAircraft::GetClass() const
VehicleDefAircraftHelper::VehicleDefAircraftHelper()
VehicleDefAircraftHelper::Initialise()
VehicleDefAircraftHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefAircraftHelper::GetObjectPrams(void*, void*, int)
VehicleDefAircraftHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefAircraftHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefAircraftHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
VehicleDefAircraftHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
VehicleDefAircraftHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
VehicleDefAircraftHelper::GetParentObject(void*)
VehicleDefAircraftHelper::GetParentClass(void*)
VehicleDefAircraftHelper::~VehicleDefAircraftHelper()
ApiVehicleSFXData::ApiVehicleSFXData()
ApiVehicleSFX::ApiVehicleSFX()
ApiVehicleSFX::IsValid()
ApiVehicleSFX::Destroy()
ApiVehicleSFXManager::ApiVehicleSFXManager()
ApiVehicleSFXManager::Lookup(char const*, ApiVehicleSFX&)
ApiVehicleSFXManager::Open(LevelContainer&)
ApiVehicleSFXManager::Close()
ApiVehicleSFXManager::Play(ApiVehicleSFX&, VuVec const&, float, float)
ApiVehicleSFXManager::Stop(ApiVehicleSFX&)
ApiVehicle::SFXCreate()
ApiVehicle::SFXDestroy()
ApiVehicle::SFXTrigger_DriverEnter()
ApiVehicle::SFXTrigger_DriverExit()
ApiVehicle::SFXDriverEnterExit()
ApiVehicle::SFXImpact(float, VuVec const*)
ApiVehicle::SFXGearShift()
ApiVehicle::SFXEngineOverrun()
ApiVehicle::SFXReversing()
ApiVehicle::SFXEngineCalcSubNote(float&, float&, ApiVehicleSFX&, VehicleDefSFX const&, float, float, float, bool)
ApiVehicle::SFXEngineIdle(float)
ApiVehicle::SFXEngineDetailMin(float)
ApiVehicle::SFXEngineDetailMax(float)
ApiVehicle::SFXEngine()
ApiVehicle::SFXProcessHorn(ApiVehicleSFX&, ApiVehicleSFX&, ApiVehicleSFX&, bool, bool&, bool&, bool&, float&, bool, unsigned char&)
ApiVehicle::SFXPlayHorn()
ApiVehicle::SFXTrigger_Death()
ApiVehicle::SFXGrind(ApiVehicleImpact*, VuVec const&, VuVec const&)
ApiVehicle::SFXGrindUpdate()
ApiVehicle::SFXTyreSkid()
ApiVehicle::SFXTyreRoadNoise()
ApiVehicle::SFXUpdateAll()
ApiVehicle::SFXUpdateAllLOD()
ApiVehiclePFX::ApiVehiclePFX()
ApiVehiclePFXManager::ApiVehiclePFXManager()
ApiVehiclePFXManager::Lookup(char const*, LevelContainer&, ApiVehiclePFX&)
ApiVehiclePFXManager::LookupPFX(char const*, LevelContainer&, ApiVehiclePFX&)
ApiVehiclePFXManager::Open(LevelContainer&)
ApiVehiclePFXManager::Update(float)
CSListHeader<ApiVehiclePFX>::Delete(ApiVehiclePFX*)
ApiVehiclePFXManager::RemoveFiniteActive(ApiVehiclePFX*)
ApiVehiclePFXManager::RegisterFiniteActive(ApiVehiclePFX*)
ApiVehiclePFXManager::Play(void*, ApiVehiclePFX&, VuVec const&, int, float, VuVec const*, VuMtx const*)
ApiVehiclePFXManager::Play(void*, ApiVehiclePFX&, VuMtx const&, int, float, VuVec const*, VuMtx const*)
ApiVehiclePFXManager::GetPFXInst(void*, ApiVehiclePFX&)
ApiVehiclePFXManager::Play(void*, eAPIVEHICLEPFX, VuVec const&, int, float, VuVec const*, VuMtx const*)
ApiVehiclePFXManager::Close()
ApiVehicleEmitter::ApiVehicleEmitter()
ApiVehicleEmitter::~ApiVehicleEmitter()
ApiVehicleStreak::ApiVehicleStreak()
ApiVehicle::CreateEmitters()
ApiVehicle::DestroyEmitters()
CSListHeader<ApiVehicleEmitter>::Delete(ApiVehicleEmitter*)
ApiVehicle::IsLayerActive(long)
ApiVehicle::FindEmitter(char const*)
ApiVehicle::ProjectEmitter(VuMtx&, float)
ApiVehicle::BoostLinkedPFXSkip(VehicleDefPFX*, bool)
ApiVehicle::RenderEmitters()
ApiVehicleStreak::Render(ApiVehicle*, VuMtx const&, float)
ApiVehicle::PFXHandleWater()
ApiVehicle::PFXImpact(ApiVehicleImpact*)
ApiVehicle::PFXGrind(ApiVehicleImpact*, VuVec const&, VuVec const&)
ApiVehicleStreak::~ApiVehicleStreak()
VehicleDefBooster::VehicleDefBooster()
ApiVehicleBooster::ApiVehicleBooster()
ApiVehicleBooster::Create(ApiVehicle*, VehicleDefBooster const*)
ApiVehicleBooster::IsActive()
ApiVehicleBooster::IsBoostActiveFX()
ApiVehicleBooster::IsCooling()
ApiVehicleBooster::IsBoostStartFX()
ApiVehicleBooster::WasActive()
ApiVehicleBooster::IsBoostEndFX()
ApiVehicleBooster::GetActiveProgress()
ApiVehicleBooster::GetCoolingProgress()
ApiVehicleBooster::IsCold()
ApiVehicleBooster::GetPFXScale()
ApiVehicleBooster::Activate()
ApiVehicleBooster::Deactivate()
ApiVehicleBooster::ForceFullThrottle()
ApiVehicleBooster::TriggerEndFX()
ApiVehicleBooster::IsBoostUnlimited()
ApiVehicleBooster::UpdateSFX()
ApiVehicleBooster::Update()
ApiVehicleBooster::GetCurrentPower()
ApiVehicleEngine::ApiVehicleEngine()
ApiVehicleGearbox::ApiVehicleGearbox()
ApiVehicleDriveTrain::ApiVehicleDriveTrain()
ApiVehicleDriveTrain::ApiVehicleDriveTrain(ApiVehicle*)
ApiVehicleDriveTrain::LockGearShift(bool)
ApiVehicleDriveTrain::IsGearLocked()
ApiVehicleDriveTrain::GetEngineRPM()
ApiVehicleDriveTrain::GetDriveWheelRPM()
ApiVehicleDriveTrain::GetEngineRevLimit()
ApiVehicleDriveTrain::UseGearbox()
ApiVehicleDriveTrain::GetGearboxLever()
ApiVehicleDriveTrain::GetEngineRevbandPos()
ApiVehicleDriveTrain::GetVirtualEngineRevbandPosSFX()
ApiVehicleDriveTrain::GetVirtualEngineRevbandPos()
ApiVehicleDriveTrain::GetEngineVelocity()
ApiVehicleDriveTrain::UpdateShiftGear()
ApiVehicleDriveTrain::GetGearShiftTime(int)
ApiVehicleDriveTrain::GetGearShiftTimeSFX(int)
ApiVehicleDriveTrain::UpdateShiftGearSFX()
ApiVehicleDriveTrain::IsGearShift()
ApiVehicleDriveTrain::IsGearShiftUp()
ApiVehicleDriveTrain::GetCurrentGear()
ApiVehicleDriveTrain::GetGearIndex() const
ApiVehicleDriveTrain::ShiftGear(int, bool, bool)
ApiVehicleDriveTrain::CalcGearboxMaxVelocity(float, bool)
ApiVehicleDriveTrain::GetDriveWheelVelocity(float)
ApiVehicleDriveTrain::GetEnginePower()
ApiVehicleDriveTrain::ApplyEngineLimits(float)
ApiVehicleDriveTrain::SetInitialVelocity(float)
ApiVehicleDriveTrain::UpdateAutoGearbox()
ApiVehicleDriveTrain::UpdateThrottle(float&)
ApiVehicleDriveTrain::CalcCurrentEnginePower(float)
ApiVehicleDriveTrain::CalcCurrentEnginePower()
ApiVehicleDriveTrain::ApplyGearShiftInducedPitch(VuMtx&)
ApiVehicleDriveTrain::UpdateDriveWheels()
ApiVehicleDriveTrain::UpdateThrust()
ApiVehicleDriveTrain::UpdateOverrun()
ApiVehicleDriveTrain::UpdateWheelPowered()
ApiVehicleDriveTrain::UpdateThrustPowered()
ApiVehicleDriveTrain::SetDesiredVelocity(float)
ApiVehicleDriveTrain::ClearDesiredVelocity()
ApiVehicleDriveTrain::UpdateDesiredVelocity()
ApiVehicleDriveTrain::Update()
ApiVehicleSeat::ApiVehicleSeat()
ApiVehicleSeat::IsValid()
ApiVehicleSeat::IsUsed()
ApiVehicleSeat::WasUsed()
ApiVehicleSeat::GetType()
ApiVehicleSeat::GetMode()
ApiVehicle::EnableOccupantCollisionShape(VehicleDefSeat::SEATTYPES, float, float)
ApiVehicle::FindSeat(VehicleDefSeat::SEATTYPES)
ApiVehicleSeat::AddCollisionShape(float, float)
ApiVehicle::DisableOccupantCollisionShape(VehicleDefSeat::SEATTYPES)
ApiVehicleSeat::RemoveOccupantCollisionShape()
ApiVehicleSeat::AddShape(Geom*, float, float)
ApiVehicleSeat::AddOccupantCollisionShape()
ApiVehicleSeat::RemoveShape(Geom*, Geom*)
ApiVehicleSeat::SetOccupant(ApiCharacter*)
ApiVehicleSeat::ClrOccupant()
ApiVehicleSeat::GetOccupant()
ApiVehicle::CreateSeats()
ApiVehicle::DestroySeats()
ApiVehicle::IsSeatUsed(VehicleDefSeat::SEATTYPES)
ApiVehicle::DoesSeatExist(VehicleDefSeat::SEATTYPES)
ApiVehicle::DetachFromSeat(VehicleDefSeat::SEATTYPES)
ApiVehicle::AttachToSeat(ApiCharacter*, VehicleDefSeat::SEATTYPES)
ApiVehicle::GetSeatOccupant(VehicleDefSeat::SEATTYPES)
ApiVehicle::GetSeatType(VehicleDefSeat::SEATTYPES)
ApiVehicle::GetSeatMode(VehicleDefSeat::SEATTYPES)
ApiVehicle::GetSeatTransformWorld(VehicleDefSeat::SEATTYPES, VuMtx&)
ApiVehicle::GetSeatTransformLocal(VehicleDefSeat::SEATTYPES, VuMtx&)
ApiVehicle::GetNumSeats()
ApiVehicle::ProcessSeats()
ApiVehicle::AddOccupantCollisionShapes()
ApiVehicle::RemoveOccupantCollisionShapes()
ApiVehicleDamageStage::ApiVehicleDamageStage(ApiVehicle*, VehicleDefDamageStage*)
ApiVehicleDamageStage::~ApiVehicleDamageStage()
ApiVehicle::CreateDamageStages()
ApiVehicle::DestroyDamageStages()
CSListHeader<ApiVehicleDamageStage>::Delete(ApiVehicleDamageStage*)
ApiVehicle::SetDamageStage(int)
ApiVehicle::GetDamageStage()
ApiVehicle::GetMaxDamageStage()
ApiVehicle::IsDisableCharacterHat()
ApiVehicle::IsDisableCharacterHair()
ApiVehicle::GetDamageStageLayerFlags()
ApiVehicle::UpdateDamageStage(bool)
ApiVehicleController::ApiVehicleController()
ApiVehicleController::Reset()
ApiVehicleController::GetSteering()
ApiVehicleController::GetStrafing()
ApiVehicleController::GetAltitude()
ApiVehicleController::GetReverse()
ApiVehicleController::GetThrottle()
ApiVehicleController::GetBrake()
ApiVehicleController::GetHandBrake()
ApiVehicleController::GetJump()
ApiVehicleController::GetHorn()
ApiVehicleController::SetHorn(bool)
ApiVehicleController::GetHornB()
ApiVehicleController::GetBooster()
ApiVehicleController::SetHornB(bool)
ApiVehicleController::SetBooster(bool)
ApiVehicleController::SetPlayer(bool)
ApiVehicleController::SetAIControlled(bool)
ApiVehicleController::SetSteering(float)
ApiVehicleController::SetStrafing(float)
ApiVehicleController::SetAltitude(float)
ApiVehicleController::SetThrottle(float)
ApiVehicleController::SetReverse(float)
ApiVehicleController::SetJump(float)
ApiVehicleController::SetBrake(float)
ApiVehicleController::SetHandbrake(float)
ApiVehicleController::SetPadInput(float, float)
ApiVehicleController::SetScreenRelative(int)
ApiVehicleController::SetScreenRelativeReverse(float, float, bool)
ApiVehicleController::IsScreenRelative()
ApiVehicleController::IsPlayer()
ApiVehicleController::IsAIControlled()
ApiVehicleController::IsActive()
ApiVehicleMaterial::InitMaterialIndexSlippy()
ApiVehicleMaterial::GetMaterialIndexSlippy()
ApiVehicleMaterial::SetSlippyTerrType(int)
ApiVehicleMaterial::GetSlippyTerrType()
ApiVehicleMaterialDef::ApiVehicleMaterialDef(char const*, char const*, char const*, char const*, char const*, float, float, float)
ApiVehicleMaterialDef::LookupDefPFX(LevelContainer*)
ApiVehicleMaterial::GetRumble() const
ApiVehicle::FindMaterialDef(int)
ApiVehicle::InitMaterialDefs()
ApiVehicle::CloseMaterialDefs()
ApiVehicle::GetMaterial(int)
ApiVehicle::GetAverageMaterial()
poValidate(VuMtx const&)
IsApiVehicle(Entity const*)
ApiVehicle::Cast(Entity const*)
ApiVehicle::SetMasterMaxVelocity(float)
ApiVehicle::GetMasterMaxVelocity()
ApiVehicle::CreateVehicleBrain()
ApiVehicle::OnDeath()
ApiVehicle::SetTreatAttachVehiclesAsOne(bool)
ApiVehicle::IsTreatAttachVehiclesAsOne()
ApiVehicle::DisableAutoDeleteAttachedVehicles()
ApiVehicle::IsAutoDeleteAttachedVehicles()
ApiVehicle::IsFlyingVehicle()
ApiVehicle::ToInfinityAndBeyond()
ApiVehicle::DisableCollisionUntilDisjoint(Character&)
ApiVehicle::Cast(SphereRay const&, CastCollector&)
ApiVehicleParams::ApiVehicleParams(char const*, APIVEHICLETYPES)
ApiVehicleUserData::ApiVehicleUserData()
ApiVehicle::CastStatic()
ApiVehicle::CastHover()
ApiVehicle::CastAircraft()
ApiVehicle::CastBoat()
ApiVehicle::CastCar()
ApiVehicle::CastBike()
ApiVehicle::SetCastableSection(bool)
ApiVehicle::SetCastable(bool)
ApiVehicle::Reset()
ApiVehicle::SetGravityDir(VuVec const&)
ApiVehicle::SetGravityMagnitude(float)
ApiVehicle::ApiVehicle(EdRegContext&, char const*, VuMtx const*, bool, bool, bool, bool)
ApiVehicle::~ApiVehicle()
ApiVehicle::GetGameUserData() const
ApiVehicle::ClearCharInstOverride()
ApiVehicle::DestroyDriveTrain()
ApiVehicle::DestroyImpacts()
non-virtual thunk to ApiVehicle::~ApiVehicle()
non-virtual thunk to ApiVehicle::~ApiVehicle()
ApiVehicle::~ApiVehicle()
non-virtual thunk to ApiVehicle::~ApiVehicle()
non-virtual thunk to ApiVehicle::~ApiVehicle()
ApiVehicle::GetMyLevelContainer() const
ApiVehicle::GetApiVehicle()
ApiVehicle::ConvertAbstract(float, float, float, float)
ApiVehicle::GetLocatorIndex(char const*)
ApiVehicle::GetLocatorMtxLocal(int, VuMtx&, bool)
ApiVehicle::GetLocatorMtxWorld(int, VuMtx&, bool)
ApiVehicle::GetRenderTransform()
ApiVehicle::GetJointIndex(char const*)
ApiVehicle::GetLocatorMtx(int, VuMtx&, VuMtx&, bool)
ApiVehicle::GetJointMtxLocal(int, VuMtx&)
ApiVehicle::GetJointMtxWorld(int, VuMtx&)
ApiVehicle::ConstructDamageStageDynoShapes()
ApiVehicle::CreateRagdoll()
ApiVehicle::CreateRagdollChassisEntity()
ApiVehicle::CreateChassisEntity()
ApiVehicle::UpdateCustomMass()
ApiVehicle::CalcRadius()
ApiVehicle::CalcExtents()
ApiVehicle::GetTransform()
ApiVehicle::SetEntityAppData()
ApiVehicle::Create()
ApiVehicle::GetName()
ApiVehicle::CreateDriveTrain()
ApiVehicle::CalcRenderTransform()
ApiVehicleDriveTrain::~ApiVehicleDriveTrain()
ApiVehicle::DriveToTransform(VuMtx const&, float)
ApiVehicle::IsDefaultAutoUpright()
ApiVehicle::TriggerDefaultAutoUpright()
ApiVehicle::IsUpright()
ApiVehicle::UpdateDefaultAutoUpright()
ApiVehicle::UpdateDesiredLocation()
ApiVehicle::GetPosition()
ApiVehicle::SetDesiredLocation(VuVec const&)
ApiVehicle::SetDriveToTransform(VuMtx const&, float)
ApiVehicle::UpdateDriveToTransform()
ApiVehicle::IsDriveToTransform()
ApiVehicle::IsDriveToTransformOld()
ApiVehicle::SetAnimTransform(VuMtx const&)
ApiVehicle::IsAnimTransform()
ApiVehicle::IsAnimTransformOld()
ApiVehicle::UpdateAnimTransform()
ApiVehicle::ZeroVelocity()
ApiVehicle::Teleport(VuMtx const&)
ApiVehicle::AlignWheelsToVehicle()
ApiVehicle::IsCutsceneMode()
ApiVehicle::SetTransform(VuMtx const&)
ApiVehicle::SetTransform(VuMtx const&, bool)
ApiVehicle::SetTransformExceptPhysics(VuMtx const&)
ApiVehicle::UpdateCharInstOverride()
ApiVehicle::GetVelocity()
ApiVehicle::GetVelocityLong()
ApiVehicle::GetVelocityLongXZ()
ApiVehicle::GetEngineVelocity()
ApiVehicle::GetEngineRPM()
ApiVehicle::GetTransform(VuMtx&) const
ApiVehicle::SetPosition(VuVec const&)
ApiVehicle::GetPosition(VuVec&) const
ApiVehicle::GetCentreOfMass(NuVector3Base&) const
ApiVehicle::GetDirection(VuVec&)
ApiVehicle::GetRotY()
ApiVehicle::SetRotY(int)
ApiVehicle::GetNumWheels()
ApiVehicle::GetWheelInAir(int)
ApiVehicle::GetWheelRadius(int)
ApiVehicle::GetWheelPosLocal(int, VuVec&)
ApiVehicle::GetWheelPosWorld(int, VuVec&)
ApiVehicle::GetWheelContactPosWorld(int, VuVec&)
ApiVehicle::GetWheelNrmWorld(int, VuVec&, bool*)
ApiVehicle::GetWheelTerrInfo(int, int&, int&, int&)
ApiVehicle::EnableWheelCastCache()
ApiVehicle::DisableWheelCastCache()
ApiVehicle::IsScreenRelativeStickReverseEnabled()
ApiVehicle::IsManuallyAIControlled()
ApiVehicle::IsPlayer()
ApiVehicle::IsForceLightsOn()
ApiVehicle::HasBoost()
ApiVehicle::IsBoostActive()
ApiVehicle::SetBoostUnlimited()
ApiVehicle::IsBoostUnlimited()
ApiVehicle::SetBoostFuelMultiplier(float)
ApiVehicle::GetBoostActiveProgress()
ApiVehicle::GetBoostCoolingProgress()
ApiVehicle::ForceActivateBoost()
ApiVehicle::ForceDeactivateBoost()
ApiVehicle::SetCutsceneMode(bool)
ApiVehicle::UpdateSteeringScreenReverse()
ApiVehicle::IsForwardMotion()
ApiVehicle::UpdateControls()
ApiVehicle::ApplyJump()
ApiVehicle::CanJump()
ApiVehicle::UpdateJump()
ApiVehicle::IsInAir()
ApiVehicle::IsJumping()
ApiVehicle::IsInWater()
ApiVehicle::WasInAir()
ApiVehicle::HasControllerInput()
ApiVehicle::GetMinMax(NuVector3Base&, NuVector3Base&, float)
ApiVehicle::GetMinMax(NuVector3Base&, NuVector3Base&)
ApiVehicle::GetDimensions(NuVector3Base&)
ApiVehicle::GetRadius(VuVec*, bool)
ApiVehicle::GetInvMass()
ApiVehicle::GetMass()
ApiVehicle::SetManager(ApiVehicleManager*)
ApiVehicle::SetName(char const*)
ApiVehicle::GetCharDefName()
ApiVehicle::GetClass() const
ApiVehicle::Activate()
ApiVehicle::AddEntity()
ApiVehicle::Deactivate()
ApiVehicle::RemoveEntity()
ApiVehicle::AddToScene()
ApiVehicle::RemoveFromScene()
ApiVehicle::NormalisePadInput(float, float, float)
ApiVehicle::UpdateAeroDrag()
ApiVehicle::IsTransformControlled()
ApiVehicle::TimeBasedUpdate(int)
ApiVehicle::GetControls()
ApiVehicle::SetControls(ApiVehicleController&)
ApiVehicle::IsDriverlessAI()
ApiVehicle::GetPositionOnVehicle(VuVec&, ApiVehicle::APIVEHICLEPOSITIONS)
ApiVehicle::GetImpact(int)
ApiVehicle::AddImpact(int, float)
ApiVehicle::TriggerImpact(ApiVehicleImpact*, bool)
ApiVehicle::TriggerGrind(ApiVehicleImpact*, bool, VuVec const&, VuVec const&)
ApiVehicle::CacheImpact(float, VuVec const&, VuVec const&, RigidBody*, bool)
ApiVehicle::ProcessImpacts()
ApiVehicle::UpdateMinimumVelocity()
ApiVehicle::HasDriver()
ApiVehicle::UpdateGravity()
ApiVehicle::SetHeadingContraint(VuVec&, float)
ApiVehicle::HandleHeadingContraint()
ApiVehicle::GetGameUserDataUpdate() const
ApiVehicle::SetGameUserData(ApiVehicleUserData*)
ApiVehicle::SetInitialVelocity(float)
ApiVehicle::UserDataProcessEarly()
ApiVehicle::UserDataProcess()
ApiVehicle::UserDataProcessPostDynoEvolve()
ApiVehicle::ProcessDeathTerrain()
ApiVehicle::ProcessStuckTimer()
ApiVehicle::GetStuckTime()
ApiVehicle::ResetStuckTime()
ApiVehicle::GetGearIndex() const
ApiVehicle::SetAlpha(float, float)
ApiVehicle::SetAlpha(float, float, float)
ApiVehicle::GetAlpha()
ApiVehicle::UpdateAlpha()
ApiVehicle::UpdateAlphaRenderSettings()
ApiVehicle::HandleFlightAlign()
ApiVehicle::Process(float)
ApiVehicle::PreDynoPostProcess()
ApiVehicle::UpdateSkidMarkers()
ApiVehicle::ProcessPostDynoEvolve()
ApiVehicle::IsForceInWater()
ApiVehicle::UpdateAnim()
ApiVehicle::CutSceneProcess()
ApiVehicle::CutSceneRender()
ApiVehicle::GetRenderTransformInv()
ApiVehicle::ResetOnScreen()
ApiVehicle::DebugAndEditorRender()
ApiVehicle::Render()
ApiVehicle::RenderResetFlags()
non-virtual thunk to ApiVehicle::Render()
ApiVehicle::RenderHUD()
ApiVehicle::GetDistanceSqr(VuVec&, VuVec const&, float)
ApiVehicle::RenderTyrePFX()
ApiVehicle::RenderPFX()
ApiVehicle::IsForceActive()
ApiVehicle::IsNoBrainUpdate()
ApiVehicle::SetForceActive(bool)
ApiVehicle::SetForceIsInWater(bool)
ApiVehicle::IsReversing()
ApiVehicle::GetInWater()
ApiVehicle::IsUnderWater()
ApiVehicle::IsKillTerrainContact()
ApiVehicle::IsIdle()
ApiVehicle::WasIdle()
ApiVehicle::IsMoving()
ApiVehicle::IsParked()
ApiVehicle::PlayAnim(int, int, float)
ApiVehicle::IsReverseMotion()
ApiVehicle::OnDamageStageChanged(unsigned int, unsigned int)
ApiVehicle::ProjectToTerrain(VuMtx&)
ApiVehicle::SetTargetFlightHeight(float)
ApiVehicle::GetAltitude()
ApiVehicle::GetWaterDepth()
ApiVehicle::SetDesiredHeading(int)
ApiVehicle::SetDesiredVelocity(float)
ApiVehicle::SetDesiredAltitude(float)
ApiVehicle::SetDesiredAltitudeSeekScale(float)
ApiVehicle::SetDesiredOrientation(int, int, int)
ApiVehicle::SFXCalcExtraFreq(VehicleDefSFX const&)
ApiVehicle::DebugRender()
ApiVehicle::GetBrakePower()
ApiVehicle::GetHandBrakeSensitivity(float&, float&)
ApiVehicleUserData::~ApiVehicleUserData()
ApiVehicleUserData::~ApiVehicleUserData()
ApiVehicleUserData::OnEnteredWater(ApiVehicle*)
ApiVehicleUserData::OnPostCreate(ApiVehicle*)
ApiVehicleUserData::OnAddToScene()
ApiVehicleUserData::OnRemoveFromScene()
ApiVehicleUserData::OnImpact(ApiVehicle*, float, VuVec const&, VuVec const&, RigidBody*)
ApiVehicleUserData::OnProcessEarly(ApiVehicle*)
ApiVehicleUserData::OnProcess(ApiVehicle*)
ApiVehicleUserData::OnProcessPostDynoEvolve(ApiVehicle*)
ApiVehicleUserData::OnRender(ApiVehicle*)
ApiVehicleUserData::OnPreDestroy(ApiVehicle*)
ApiVehicleUserData::OnDamageStageChanged(unsigned int, unsigned int)
ClassManagerAccessor<DynoManager>::GetFromCreate(ILevelContainer const&)
ApiVehicle::AddListener()
ApiVehicle::RemoveListener()
ApiVehicleDynoListener::AdjustWaterVars(Water const*, Entity const*, float&, float&)
Controller_GetCharInst(Entity const*)
ApiVehicleDynoListener::OverlapBegin(Entity const*, Entity const*)
ApiVehicleDynoListener::AllowCollision(Entity const*, Entity const*)
ApiVehicleDynoListener::ApplyContactImpulse(ContactJoint*, RigidBody*, ApiVehicle*, float, float, float, float, float, float)
ApiVehicleDynoListener::CalcMultipliers(ContactJoint*, RigidBody*, RigidBody*, ApiVehicle*, ApiVehicle*, float&, float&, float&, float&, float, bool&)
ApiVehicleDynoListener::ApplyMassMultipliers(ContactJoint*, ApiVehicle*, ApiVehicle*, float)
ApiVehicleDynoListener::ContactJoints(LinkedList<Joint>&)
ApiVehicleDynoListener::Collision(BodyPair*, Array<ContactPoint>&)
ApiVehicleDynoListener::~ApiVehicleDynoListener()
ApiVehicleDriveToMtxNew(RigidBody*, VuMtx&, float, float, VuVec&, VuVec&, float, float, float)
ApiVehicleOrientationDrive::SetTransform(VuMtx const&)
ApiVehicleOrientationDrive::Reset()
ApiVehicleOrientationDrive::ApiVehicleOrientationDrive(ApiVehicle*, float, float, float)
ApiVehicleOrientationDrive::SetRollVars(float, float)
ApiVehicleOrientationDrive::SetRollVelScale(float)
ApiVehicleOrientationDrive::SetPitchVars(float, float, float)
ApiVehicleOrientationDrive::SetTargetRoll(int, bool)
ApiVehicleOrientationDrive::GetTargetRoll()
ApiVehicleOrientationDrive::SetTargetHeading(int, bool)
ApiVehicleOrientationDrive::GetTargetHeading()
ApiVehicleOrientationDrive::SetTargetPitch(int, bool)
ApiVehicleOrientationDrive::GetTargetPitch()
ApiVehicleOrientationDrive::SetTargetTerrainNormal(VuVec const&, bool)
ApiVehicleOrientationDrive::GetTargetTerrainNormal()
ApiVehicleOrientationDrive::HandleStickReverse(int&)
ApiVehicleOrientationDrive::UpdateHeadingScreen()
ApiVehicleOrientationDrive::UpdateHeadingLocal()
ApiVehicleOrientationDrive::SetDesiredHeading(int)
ApiVehicleOrientationDrive::SetDesiredOrientation(int, int, int)
ApiVehicleOrientationDrive::UpdateDesiredOrientation()
ApiVehicleOrientationDrive::UpdateDesiredHeading()
ApiVehicleOrientationDrive::UpdateHeading()
ApiVehicleOrientationDrive::UpdatePitch()
ApiVehicleOrientationDrive::UpdateRoll()
ApiVehicleOrientationDrive::CalcTerrainNormal()
ApiVehicleOrientationDrive::AlignToTerrain(VuMtx&)
ApiVehicleOrientationDrive::SetMaxTrackVars(float, float)
ApiVehicleOrientationDrive::TrackOrientation()
ApiVehicleOrientationDrive::Update()
ApiVehicleOrientationDrive::SetEulers(int, int, int)
ApiVehicle::IsForceMaxLODInRange()
ApiVehicle::EnableForceMaxLODInRange()
ApiVehicle::SetLODRange(float)
ApiVehicle::ForceMaxLODInRange()
ApiVehicle::ForceLODMaxDetail()
ApiVehicle::EvalForceFullPhysics()
ApiVehicle::GetLODMode()
ApiVehicle::ForceLODMinDetail(bool)
ApiVehicle::CalcLODMode()
ApiVehicle::GetLODExitTime()
ApiVehicle::EnterLODMode()
ApiVehicle::ExitLODMode()
ApiVehicle::GetProjectedRoadHeight(VuVec&)
ApiVehicle::ProjectLODPosToRoad(VuVec&)
ApiVehicle::IsOnActiveGridCell()
ApiVehicle::SyncLODTranform()
ApiVehicle::UpdateLODDefaultAI()
ApiVehicle::UpdateLODManualAI()
ApiVehicle::UpdateTransitionPhysToNonPhys()
ApiVehicle::UpdateTransitionNonPhysToPhys()
ApiVehicle::UpdateLOD()
ApiVehicleHover::SetAnimTransform(VuMtx const&)
ApiVehicleHover::GetBrakePower()
ApiVehicleHover::GetVehicleDef()
ApiVehicleHover::ApiVehicleHover(EdRegContext&, char const*, VuMtx const*, bool, bool, bool, bool)
ApiVehicleHover::~ApiVehicleHover()
non-virtual thunk to ApiVehicleHover::~ApiVehicleHover()
non-virtual thunk to ApiVehicleHover::~ApiVehicleHover()
ApiVehicleHover::~ApiVehicleHover()
non-virtual thunk to ApiVehicleHover::~ApiVehicleHover()
non-virtual thunk to ApiVehicleHover::~ApiVehicleHover()
ApiVehicleHover::SetTransform(VuMtx const&, bool)
ApiVehicleHover::Create()
ApiVehicleHover::UpdateControls()
ApiVehicleHover::SetDesiredHeading(int)
ApiVehicleHover::SetDesiredVelocity(float)
ApiVehicleHover::SetDesiredAltitude(float)
ApiVehicleHover::SetDesiredAltitudeSeekScale(float)
ApiVehicleHover::UpdatePitch()
ApiVehicleHover::UpdateOrientationScales()
ApiVehicleHover::IsLanded()
ApiVehicleHover::Process(float)
ApiVehicleHover::GetAltitude()
ApiVehicleHover::SetHeightCeiling(float)
ApiVehicleHover::GetHeightCeiling()
ApiVehicleHover::SetHeightActive(float)
ApiVehicleHover::GetHeightActive()
ApiVehicleHover::Render()
non-virtual thunk to ApiVehicleHover::Render()
ApiVehicleHover::RenderPFX()
ApiVehicleHover::SFXCreate()
ApiVehicleHover::SFXDestroy()
ApiVehicleHover::SFXUpdateAll()
ApiVehicleHover::EnterLODMode()
ApiVehicleHover::ExitLODMode()
ApiVehicleHover::SFXCalcExtraFreq(VehicleDefSFX const&)
ApiVehicleHover::SetEulers(int, int, int)
ApiVehicle::CreateBrain()
ApiVehicle::UpdateBrainTransform(VuMtx const&)
ApiVehicle::DeactivateBrain()
ApiVehicle::ActivateBrain()
ApiVehicle::GetAIAvoidable()
ApiVehicle::GetAvoidableBrain() const
non-virtual thunk to ApiVehicle::GetAvoidableBrain() const
ApiVehicle::UpdateBox()
non-virtual thunk to ApiVehicle::UpdateBox()
ApiVehicle::UpdateBrain()
ApiVehicle::IsAlwaysControlLeadTower()
ApiVehicle::IsTrailered()
ApiVehicle::IsTowed()
ApiVehicle::IsTrailerSibbling(ApiVehicle*)
ApiVehicle::GetLeadTower()
ApiVehicle::GetTrailer()
ApiVehicle::GetTower()
ApiVehicle::GetCharTower()
ApiVehicle::GetTowPointRear(VuMtx&, VuMtx&)
ApiVehicle::GetTowPointFront(VuMtx&, VuMtx&)
ApiVehicle::GetLastTrailer()
ApiVehicle::CreateTowerAndTrailerJoint(ApiVehicle*, ApiVehicle*, VuVec&, VuVec&)
ApiVehicle::CalcTrailerTransform(ApiVehicle*, ApiVehicle*, VuMtx&)
ApiVehicle::AttachTowerAndTrailer(ApiVehicle*, ApiVehicle*, float, bool, bool)
ApiVehicle::ReleaseTowerAndTrailer(ApiVehicle*, ApiVehicle*)
ApiVehicle::CreateVehicleAttachments()
ApiVehicle::DestroyVehicleAttachments()
ApiVehicle::ReleaseTowerAndTrailer()
ApiVehicleCar::TowerAndTrailerUpdate()
ApiVehicle::TowerAndTrailerUpdate()
ApiVehicle::GetCharTowPos(VuMtx&)
ApiVehicle::TowerAndTrailerUpdatePostDynoEvolve()
ApiVehicle::AttachTowerAndTrailer(ApiCharacter*, int)
ApiVehicle::AttachTowerAndTrailer(ApiCharacter*, char const*)
ApiVehicleHelper::ApiVehicleHelper()
ApiVehicleHelper::Initialise()
ApiVehicleHelper::FindCharDef(char const*)
ApiVehicleHelper::CreateObject(ApiVehicleParams*, EdRegContext*)
ApiVehicleHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ApiVehicleHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ApiVehicleHelper::CloneObject(void*, EdRegContext&, EDOBJATTR_FLAGS)
ApiVehicleHelper::GetParentObject(void*)
ApiVehicleHelper::GetParentClass(void*)
ApiVehicleHelper::GetObjectPrams(void*, void*, int)
ApiVehicleHelper::GetManNumObjects(ClassManager*, void*)
ApiVehicleHelper::GetManNextObject(ClassManager*, void*, void*)
ApiVehicleHelper::~ApiVehicleHelper()
ApiVehicleManager::ApiVehicleManager(LevelContainer&)
ApiVehicleManager::RegisterProcessing()
ApiVehicleManager::RegisterRendering()
ApiVehicleManager::~ApiVehicleManager()
ApiVehicleManager::~ApiVehicleManager()
ApiVehicleManager::GetClass(int)
ApiVehicleManager::AddVehicle(ApiVehicle*)
ApiVehicleManager::RemoveVehicle(ApiVehicle*)
ApiVehicleManager::FindVehicleByName(char const*) const
ApiVehicleManager::GetDynoScene()
ApiVehicleManager::UpdateDynoGravity()
ApiVehicleManager::GetDynoGravity()
ApiVehicleManager::PlayPFX(void*, ApiVehiclePFX&, VuVec const&, int, float, VuVec*, VuMtx*)
ApiVehicleManager::PlayPFX(void*, eAPIVEHICLEPFX, VuVec const&, int, float, VuVec*, VuMtx*)
ApiVehicleManager::PlayPFX(void*, ApiVehiclePFX&, VuMtx const&, int, float, VuVec*, VuMtx*)
ApiVehicleManager::CreateSFX(ApiVehicleSFX&, VehicleDefSFX const&)
ApiVehicleManager::CreateSFX(char const*, ApiVehicleSFX&)
ApiVehicleManager::DestroySFX(ApiVehicleSFX&)
ApiVehicleManager::PlaySFX(ApiVehicleSFX&, VuVec const&, float, float)
ApiVehicleManager::StopSFX(ApiVehicleSFX&)
ApiVehicleManager::PreDynoPostProcess()
ApiVehicleManager::Process(float)
ApiVehicleManager::ProcessPostDynoEvolve()
ApiVehicleManager::Render()
ApiVehicleManager::RenderHUD()
ApiVehicleManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ApiVehicleManager::IsCutSceneMode()
ApiVehicleManager::ResetOnScreen(NURENDERSTAGE, LevelViewType, ClassManager::eRenderingPriority const&)
ApiVehicleManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
ApiVehicleManager::SetRender(bool)
ApiVehicleManager::SetCutSceneMode(bool)
ApiVehicleManager::DestroyActiveVehicles()
ApiVehicleManager::EventNotify(Event&, NuEventData&)
ApiVehicleManager::MakeUniqueName(EdString&, ApiVehicle*) const
ApiVehicleManager::IsUniqueName(EdString&, ApiVehicle*) const
ApiVehicleManager::GetVehicleID()
ApiVehicleRangeResult::ApiVehicleRangeResult()
ApiVehicleManager::FindVehiclesInRange(VuVec const&, float, ApiVehicleRangeResult*, int)
ApiVehicleManager::FindVehiclesInAABB(NuVector3Base const&, NuVector3Base const&, Array<ApiVehicle*>&)
ApiVehicleManager::GetNumLODVehicles()
ApiVehicleManager::FindCharDef(char const*)
ApiVehicleManager::Create(char const*, VuMtx&, bool, bool, bool, bool)
ApiVehicleManager::GetManagerName() const
ApiVehicleManager::GetNumClasses()
ApiVehicleManager::GetNumObjects(void*)
ApiVehicleManager::GetNextObject(void*, void*)
ApiVehicleManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ApiVehicleManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ApiVehicleManager::IsChildlessManager()
SVarApiVehicle::Init()
SVarApiVehicle::Set(ScriptVariable const*)
SVarApiVehicle::Set(ApiVehicle*)
SVarApiVehicle::NotifyEvent(Event&, NuEventData&)
SVarApiVehicle::Equals(ScriptVariable const*)
SVarApiVehicle::~SVarApiVehicle()
non-virtual thunk to SVarApiVehicle::~SVarApiVehicle()
SVarApiVehicle::~SVarApiVehicle()
non-virtual thunk to SVarApiVehicle::~SVarApiVehicle()
SVarApiVehicle::LoadVariable(char const*)
SVarApiVehicle::SVarApiVehicle(char const*, sDynamicVariableData&, ScriptContext&)
SAction_ApiVehicle::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarApiVehicle, sDynamicVariableData>(int, sDynamicVariableData)
VehicleAction::Exec(ScriptContext&)
SAction_ApiVehicle2Text::VehicleExec(ApiVehicle*, ScriptContext&)
SAction_ApiVehicle2Position::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_Distance::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_DistanceXZ::VehicleExec(ApiVehicle*, ScriptContext&)
SAction_VehicleInArea::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_OnScreen::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_ForceMaxDetail::VehicleExec(ApiVehicle*, ScriptContext&)
VehicleAction_IsSubmerged::VehicleExec(ApiVehicle*, ScriptContext&)
SVarApiVehicle::AsBool() const
SVarApiVehicle::AsText() const
SAction_ApiVehicle::~SAction_ApiVehicle()
SAction_ApiVehicle::GetName() const
SAction_ApiVehicle::GetInputs(SCmdParams&) const
SAction_ApiVehicle::GetOutputs(SCmdParams&) const
VehicleAction::~VehicleAction()
SAction_ApiVehicle2Text::~SAction_ApiVehicle2Text()
SAction_ApiVehicle2Text::GetName() const
SAction_ApiVehicle2Text::GetInputs(SCmdParams&) const
SAction_ApiVehicle2Text::GetOutputs(SCmdParams&) const
SAction_ApiVehicle2Position::~SAction_ApiVehicle2Position()
SAction_ApiVehicle2Position::GetName() const
SAction_ApiVehicle2Position::GetInputs(SCmdParams&) const
SAction_ApiVehicle2Position::GetOutputs(SCmdParams&) const
VehicleAction_Distance::~VehicleAction_Distance()
VehicleAction_Distance::GetName() const
VehicleAction_Distance::GetInputs(SCmdParams&) const
VehicleAction_Distance::GetOutputs(SCmdParams&) const
VehicleAction_DistanceXZ::~VehicleAction_DistanceXZ()
VehicleAction_DistanceXZ::GetName() const
VehicleAction_DistanceXZ::GetInputs(SCmdParams&) const
VehicleAction_DistanceXZ::GetOutputs(SCmdParams&) const
VehicleAction_OnScreen::~VehicleAction_OnScreen()
VehicleAction_OnScreen::GetName() const
VehicleAction_OnScreen::GetInputs(SCmdParams&) const
VehicleAction_OnScreen::GetOutputs(SCmdParams&) const
VehicleAction_ForceMaxDetail::~VehicleAction_ForceMaxDetail()
VehicleAction_ForceMaxDetail::GetName() const
VehicleAction_ForceMaxDetail::GetInputs(SCmdParams&) const
VehicleAction_ForceMaxDetail::GetOutputs(SCmdParams&) const
VehicleAction_IsSubmerged::~VehicleAction_IsSubmerged()
VehicleAction_IsSubmerged::GetName() const
VehicleAction_IsSubmerged::GetInputs(SCmdParams&) const
VehicleAction_IsSubmerged::GetOutputs(SCmdParams&) const
SAction_VehicleInArea::~SAction_VehicleInArea()
SAction_VehicleInArea::GetName() const
SAction_VehicleInArea::GetInputs(SCmdParams&) const
SAction_VehicleInArea::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarApiVehicle>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarApiVehicle>(char const*, ScriptContext&)
ApiRopeType::ApiRopeType()
ApiRopeType::~ApiRopeType()
ApiRopeType::SyncGrappleMtl()
ApiRopeTypeList::ApiRopeTypeList()
ApiRopeTypeList::FixUpMaterials(NuSmartPtr<NuScene, true>)
ApiRopeTypeList::Find(short)
ApiRopeTypeList::Find(char const*)
ApiRopeTypeList::SyncGrappleMtls()
ApiRopeTypeList::NextID()
ApiRopeHelper::ApiRopeHelper()
ApiRopeHelper::Initialise()
ApiRopeHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ApiRopeHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ApiRopeHelper::GetManNextObject(ClassManager*, void*, void*)
ApiRopeHelper::~ApiRopeHelper()
ApiRope::ApiRope(EdRegContext&, Cloth*, ApiRopeType*)
ApiRope::SetClothRadius(float)
ApiRope::ApiRope(EdRegContext&, ApiRope&)
ApiRope::~ApiRope()
non-virtual thunk to ApiRope::~ApiRope()
ApiRope::~ApiRope()
non-virtual thunk to ApiRope::~ApiRope()
ApiRope::GetVisibility() const
ApiRope::SetVisibility(int)
ApiRope::GetCollision() const
ApiRope::SetCollision(int)
ApiRope::GetCollisionMode() const
ApiRope::SetCollisionMode(PlaceableBase::COLLISION_MODE)
ApiRope::GetClass() const
ApiRope::Render(NuCurveParams::Mode)
RigidObject::GetDefaultCollisionFilter()
RigidObject::RigidObject(EdRegContext&, RigidObject&)
RigidObject::RigidObject(EdRegContext&, RigidBody*, nuhspecial_s&)
RigidObject::Initialise()
RigidObject::~RigidObject()
non-virtual thunk to RigidObject::~RigidObject()
RigidObject::~RigidObject()
non-virtual thunk to RigidObject::~RigidObject()
RigidObject::SetKeyframe(VuMtx const&, float, int)
RigidObject::Render(VuMtx const*, unsigned int)
RigidObject::GetClass() const
RigidObject::ContainsValidScaleCheck(VuMtx const&)
RigidObject::DriveToAnimMtx(float)
RigidObject::Clone(EdRegContext&, EDOBJATTR_FLAGS, bool) const
RigidObject::Destroy()
non-virtual thunk to RigidObject::Destroy()
RigidObject::SetMotionType(RigidObject::MotionType)
RigidObject::GetMotionType(RigidObject::MotionType&) const
RigidObject::SetDefaultCollisionFilter(unsigned short)
RigidObject::GameForcingNetworking()
RigidObject::GameWantsThisNetworked()
RigidObject::GetAiObstacles(Array<VuVec>&) const
RigidObject::Activate()
RigidObject::Deactivate()
RigidObjectHelper::SetObjectGuid(void*, int)
RigidObjectHelper::GetObjectGuid(void*)
RigidObjectHelper::IsObjectReplicated(void*)
RigidObjectHelper::GetObjectPrams(void*, void*, int)
RigidObjectHelper::ScatterCheck(char*, short)
EdRefRigidObject::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefRigidObject::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
RigidParams::RigidParams()
RigidParams::RigidParams(char const*)
RigidParams::RigidParams(RigidBody const*, NuSmartPtr<NuScene, true>)
RigidParams::RigidParams(RigidBody const*, nuhspecial_s*)
RigidParams::RigidParams(RigidObject const*)
RigidObjectHelper::RigidObjectHelper()
RigidObjectHelper::Initialise()
RigidObjectHelper::SubProcessEvenWhenPaused(float)
RigidObjectHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to RigidObjectHelper::EventNotify(Event&, NuEventData&)
RigidObjectHelper::GetManNumObjects(ClassManager*, void*)
RigidObjectHelper::GetManNextObject(ClassManager*, void*, void*)
RigidObjectHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
RigidObjectHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
RigidObjectHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
RigidObjectHelper::DistanceToObject(VuVec&, VuVec&, void*, EdRef**)
RigidObject::IsGadgetSimpleProp()
SceneObject::SetAlwaysUpdate(bool)
RigidObjectHelper::~RigidObjectHelper()
RigidObjectHelper::~RigidObjectHelper()
non-virtual thunk to RigidObjectHelper::~RigidObjectHelper()
non-virtual thunk to RigidObjectHelper::~RigidObjectHelper()
EdRefRigidObject::~EdRefRigidObject()
FrameworkEventCreateData::~FrameworkEventCreateData()
WaterObject::WaterObject(EdRegContext&, WaterObject&)
WaterObject::WaterObject(EdRegContext&, Water*, nuhspecial_s&)
WaterObject::~WaterObject()
non-virtual thunk to WaterObject::~WaterObject()
WaterObject::~WaterObject()
non-virtual thunk to WaterObject::~WaterObject()
WaterObject::Destroy()
non-virtual thunk to WaterObject::Destroy()
WaterObject::SetKeyframe(VuMtx const&, float, int)
WaterObject::GetClass() const
WaterObjectHelper::WaterObjectHelper()
WaterObjectHelper::GetObjectPrams(void*, void*, int)
WaterObjectHelper::Initialise()
WaterObjectHelper::GetManNumObjects(ClassManager*, void*)
WaterObjectHelper::GetManNextObject(ClassManager*, void*, void*)
WaterObjectHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
WaterObjectHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
WaterObjectHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
WaterObjectHelper::Render(EdRenderWindowInfo const&, void*, int, EdRef*)
WaterObjectHelper::~WaterObjectHelper()
CoreGroupHelper::CoreGroupHelper()
CoreGroupHelper::Initialise()
CoreGroupHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CoreGroupHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CoreGroupHelper::AddBaseObject(EdRegContext*, ClassObject&)
CoreGroupHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
CoreGroupHelper::GetManNumObjects(ClassManager*, void*)
CoreGroup::GetNextByClass()
CoreGroupHelper::GetManNextObject(ClassManager*, void*, void*)
CoreGroupHelper::CanMultiReference() const
CoreGroupHelper::GetObjectDataClass()
CoreGroupHelper::SetObjectDataClass(EdClass&)
CoreGroupHelper::GetInstanceClass()
CoreGroupHelper::SetInstanceClass(EdClass&)
CoreGroup::CoreGroup(EdRegContext&, EdClass*)
CoreGroup::~CoreGroup()
non-virtual thunk to CoreGroup::~CoreGroup()
CoreGroup::~CoreGroup()
non-virtual thunk to CoreGroup::~CoreGroup()
CoreGroup::GetFlaggedObjectBounds(unsigned int, unsigned int, NuVector3Base&, NuVector3Base&)
CoreGroup::GetState(int)
CoreGroup::GetClass() const
CoreGroup::AddState(char const*, signed char, signed char, float)
CoreGroup::AddStates()
CoreGroup::ReCalculateStateNodes()
CoreGroup::CreateAutoInstance()
CoreGroup::CreateInPlaceInstance()
CoreGroup::DestroyAutoInstance()
CoreGroup::SetInstanceOriginOffset(VuVec const&)
CoreGroup::GetInstanceOriginOffset()
CoreGroup::GetOrigin(VuVec&)
CoreGroup::SetDefaultState(int)
CoreGroup::GetDefaultState()
CoreGroup::CalculateClippingVolume(SceneNode*)
CoreGroup::GetClippingVolume(NuVector3Base&, NuVector3Base&)
CoreGroup::SetFlag(unsigned int, unsigned int, unsigned int, bool)
CoreGroup::GetFlag(unsigned int, unsigned int, unsigned int)
CoreGroup::Flags_AddState()
CoreGroup::Flags_RemoveState(unsigned int)
CoreGroup::Flags_AddObject(unsigned int)
CoreGroup::Flags_RemoveObject(unsigned int, unsigned int)
CoreGroup::GetDefaultObjectsState(CoreGroupState const*)
CoreGroup::SetInstanceChildrenHidden(CoreGroupState*, unsigned int, bool)
CoreGroup::FixupObjectFlags()
CoreGroup::HasStates()
CoreGroup::FixupInPlaceInstance()
CoreGroupHelper::~CoreGroupHelper()
EdRefCoreGroup::~EdRefCoreGroup()
EdRefCoreGroup::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCoreGroup::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CoreGroupStateObjectFlags::~CoreGroupStateObjectFlags()
ClassManagerAccessor<CoreGroupManager>::GetFromCreate(ILevelContainer const&)
CoreGroupInstanceHelper::ConstructorParams::~ConstructorParams()
CoreGroupInstanceHelper::CoreGroupInstanceHelper()
CoreGroupInstanceHelper::Get()
CoreGroupInstanceHelper::Exists()
CoreGroupInstanceHelper::Initialise()
CoreGroupInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CoreGroupInstanceHelper::ConstructorParams::Clear()
CoreGroupInstanceHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CoreGroupInstanceHelper::AddBaseObject(EdRegContext*, ClassObject&)
CoreGroupInstanceHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
CoreGroupInstanceHelper::GetManNumObjects(ClassManager*, void*)
CoreGroupInstanceHelper::GetManNextObject(ClassManager*, void*, void*)
CoreGroupInstanceHelper::GetObjectPrams(void*, void*, int)
CoreGroupInstanceHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CoreGroupInstance::SetPlatform(int)
CoreGroupInstanceHelper::ConstructorParams::ConstructorParams()
CoreGroupInstance::ExtendedData::ExtendedData()
CoreGroupInstance::ExtendedData::Clear()
CoreGroupInstance::CoreGroupInstance(EdRegContext&)
CoreGroupInstance::Init()
CoreGroupInstance::CoreGroupInstance(CoreGroup&, EdRegContext&, EdClass*)
CoreGroupInstance::SetCoreGroupTemplate(CoreGroup*, EdRegContext*)
CoreGroupInstance::CoreGroupInstance(CoreGroupInstance&, EdRegContext&, EdClass*)
CoreGroupInstance::SetCoreGroupTemplate(NuFatSmartPtr<CoreGroup> const&, EdRegContext*)
CoreGroupInstance::CoreGroupInstance(EdString&, EdRegContext&)
CoreGroupInstance::~CoreGroupInstance()
CoreGroupInstance::FreeInstance()
non-virtual thunk to CoreGroupInstance::~CoreGroupInstance()
CoreGroupInstance::~CoreGroupInstance()
non-virtual thunk to CoreGroupInstance::~CoreGroupInstance()
CoreGroupInstance::OnGameLevelFixup()
CoreGroupInstance::RebuildDynamicClipBox()
CoreGroupInstance::GetClass() const
CoreGroupInstance::SetHidden(unsigned int, bool)
CoreGroupInstance::GetHiddenMask()
CoreGroupInstance::SetStateNum(int, CoreGroupState::eStateAnimPosition, unsigned int)
CoreGroupInstance::GetState(signed char)
CoreGroupInstance::SetState(CoreGroupState*, bool, bool)
CoreGroupInstance::GetStateNum()
CoreGroupInstance::CopyCoreGroupStateOnly(CoreGroupState&, EdRegContext&, bool)
CoreGroupInstance::PrepareInstancedStateForAnimation()
CoreGroupInstance::AddToAnimatingInstancesList()
CoreGroupInstance::MoveObjectsBetweenStates(CoreGroupState*, CoreGroupState*, float) const
CoreGroupInstance::MoveObjectsBetweenStatesWithAnimation(CoreGroupState*, CoreGroupState*, float) const
CoreGroupInstance::FreeInstanceChildrenOnly()
CoreGroupInstance::AllocateChildrenOnly(EdRegContext, CoreGroupState*, CloneFlags)
CoreGroupInstance::OffsetStatePosition()
CoreGroupInstance::Fixup(LevelContainer*)
CoreGroupInstance::SetTransform(VuMtx const&)
SetKeyframeRecursive(VuMtx const&, float, int, SceneNode*)
CoreGroupInstance::SetKeyframe(VuMtx const&, float, int)
CoreGroupInstance::SetPosition(VuVec const&)
CoreGroupInstance::FreeStateChildrenFast(SceneNode*, CoreGroupState*)
NuVector<PlaceableBase*>::Reserve(unsigned int, bool)
CoreGroupInstance::OnCollision(Entity*, Entity*)
CoreGroupInstance::OnCollision(Entity*, Entity*, Array<ContactPoint>&)
CoreGroupInstance::OnCollision(Entity*, Character*, ContactPoint&)
CoreGroupInstance::OnOverlapBegin(Entity const*, Entity const*)
CoreGroupInstance::OnOverlapEnd(Entity const*, Entity const*)
CoreGroupInstance::AllowSweepCollision(Entity const*, Entity const*)
CoreGroupInstance::DoClipTest()
CoreGroupInstance::IsInsideClipRange()
CoreGroupInstance::MonitorAnimation()
CoreGroupInstance::OnAnimationComplete(CoreGroupState::eStateAnimPosition)
CoreGroupInstance::GetClipDistance()
CoreGroupInstance::GetBoundingVolume(NuVector3Base&, NuVector3Base&, NuMatrixBase&)
CoreGroupInstance::GetClippingVolume(NuVector3Base&, NuVector3Base&, NuMatrixBase&)
CoreGroupInstance::GetLEDInstancedFrom()
CoreGroupInstance::GetResourceLedName()
CoreGroupInstance::GetAveragePosition(VuVec&, bool, CoreGroupState::eStateAnimPosition)
CoreGroupInstance::GetNumObjects()
CoreGroupInstance::GetStateId()
CoreGroupInstance::SetAnimationInstance(AnimationInstance*)
CoreGroupInstance::GetAttributes() const
CoreGroupInstance::GetAnimationInstance()
CoreGroupInstance::PlayAnimation(float)
CoreGroupInstance::PlayAnimation(bool, apcPlayDirection)
CoreGroupInstance::StopAnimation(bool)
CoreGroupInstance::SetAnimationFrame(bool, float)
CoreGroupInstance::IsAnimationPlaying(bool)
CoreGroupInstance::IsAnimationAtEnd(bool)
CoreGroupInstance::IsAnimationAtStart(bool)
CoreGroupInstance::IsAnimationLooping(bool)
CoreGroupInstance::IsAnimationComplete(bool, bool)
CoreGroupInstance::GetAnimationPlayDirection()
CoreGroupInstance::IsAnimated(bool)
CoreGroupInstance::GetAnimationLength(bool, bool)
CoreGroupInstance::JumpToStartFrame(bool)
CoreGroupInstance::JumpToEndFrame(bool)
CoreGroupInstance::SetPlayMode(bool, apcPlayMode)
CoreGroupInstance::SetPlayDirection(bool, apcPlayDirection)
CoreGroupInstance::GetAnimFrame()
CoreGroupInstance::PlayAnimationToPercentage(float)
CoreGroupInstance::PlayAnimationToFrame(float)
CoreGroupInstance::JumpAnimationToFrame(float)
CoreGroupInstance::JumpAnimationToPercentage(float)
CoreGroupInstance::SetAnimation(Animation*)
CoreGroupInstance::SetAnimation(char const*)
CoreGroupInstance::SetVisibility(int)
CoreGroupInstance::GetStartFrame() const
CoreGroupInstance::GetEndFrame() const
CoreGroupInstance::GetPlayBackSpeed() const
CoreGroupInstance::SetPlayBackSpeed(float)
CoreGroupInstance::AddTemplateObjectToState(SceneNode*, CoreGroupState*, NuMatrixBase&)
CoreGroupInstance::AddTemplateObjectToClipBounds(SceneNode*, NuMatrixBase&)
CoreGroupInstance::GetFlaggedObjectTransform(unsigned int, unsigned int, VuMtx&)
CoreGroupInstance::AddObjectToCurrentState(unsigned int, unsigned int, NuMatrixBase&, CoreGroupInstance::eDynamicBuildMode)
CoreGroupInstance::GetClipStrategy(bool)
CoreGroupInstance::GetLedFile() const
CoreGroupInstance::SetLedFile(short)
CoreGroupInstance::GetName() const
CoreGroupInstance::Activate()
CoreGroupInstance::Deactivate()
CoreGroupInstance::IsActive() const
CoreGroupInstance::SetName(char const*)
CoreGroupInstance::GetPlatform() const
CoreGroupInstance::ClearPlatform(int)
CoreGroupInstance::GetNuUniqueObjectBase()
CoreGroupInstance::GetNuUniqueName() const
non-virtual thunk to CoreGroupInstance::GetNuUniqueName() const
CoreGroupInstance::GetNuUniqueNameHash() const
non-virtual thunk to CoreGroupInstance::GetNuUniqueNameHash() const
CoreGroupInstance::SetAttributes(EDOBJATTR_FLAGS)
CoreGroupInstance::CheckAttributes(EDOBJATTR_FLAGS)
CoreGroupInstance::SetLayer(char)
CoreGroupInstance::GetLayer()
CoreGroupInstance::GetSceneNode() const
CoreGroupInstance::SetSceneNode(SceneNode*)
CoreGroupInstance::CheckObjectFlag(PlaceableBase&, unsigned int)
CoreGroupInstance::ResolveEntityContactsStart(Entity const*, Entity const*)
CoreGroupInstance::ResolveEntityContactsEnd(Entity const*, Entity const*)
CoreGroupInstance::SetPerPixelFade(NuPerPixelFadePacket&)
CoreGroupInstance::SetAlpha(float)
CoreGroupInstance::MultiplyAlpha(float)
CoreGroupInstance::GetAlpha() const
CoreGroupInstance::SetLightingGlow(NuColour const&)
CoreGroupInstanceHelper::~CoreGroupInstanceHelper()
CoreGroupInstance::GetTransform(VuMtx&) const
CoreGroupInstance::GetPosition(VuVec&) const
CoreGroupInstance::OnSetIdle()
CoreGroupInstance::IsGadgetSimpleProp(Entity*)
CoreGroupInstance::OnStateChange()
CoreGroupInstance::OnGameLevelInit()
CoreGroupInstance::CheckResetBits()
CoreGroupInstance::OnLEDEditorPostExit()
EdRefCoreGroupInstance::~EdRefCoreGroupInstance()
EdRefCoreGroupInstance::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCoreGroupInstance::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefPlaceableDummy::~EdRefPlaceableDummy()
EdRefPlaceableDummy::GetMemberObject(void*)
DummyPlaceable::~DummyPlaceable()
DummyPlaceable::GetClass() const
DummyPlaceable::GetTransform(VuMtx&) const
DummyPlaceable::SetTransform(VuMtx const&)
non-virtual thunk to DummyPlaceable::~DummyPlaceable()
non-virtual thunk to DummyPlaceable::~DummyPlaceable()
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::~EdRefSmartPtr()
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::FixUpToNuUniqueObjAccessor(void*, NuUniqueObjectAccessor*)
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::GetFixupSearchStr(void*)
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::WriteFixupData(void*, char const*)
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::LateFixup(void*, StreamingLevel*, NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>*)
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::GetNuUniqueObjAccessorFromPointee(void*) const
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::GetPointee(void*)
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::GetPointeeAsNuUniqueObjectAccessor(void*) const
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::GetPointeeAsBaseEdClass(void*)
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::GetPointeeEdClass(void*)
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::ResetSmartPtr(void*)
EdRefSmartPtr<CoreGroup, CoreGroup, NuFatSmartPtr<CoreGroup> >::ResetToPreFixup(void*)
NuVector<EdClass*>::~NuVector()
CoreGroupManager::CoreGroupManager(LevelContainer&)
CoreGroupManager::SetDefaultClipRangeFromConfig()
CoreGroupManager::SetInstancesVisibility(bool, EdClass const&)
CoreGroupManager::SetInstanceVisibility(bool, char const*)
CoreGroupManager::SetInstancesVisibility(bool, char const*)
CoreGroupManager::RegisterProcessing()
CoreGroupManager::RegisterRendering()
CoreGroupManager::~CoreGroupManager()
CoreGroupInstanceMultiList::~CoreGroupInstanceMultiList()
CoreGroupManager::~CoreGroupManager()
CoreGroupManager::CreateCoreHelpers()
CoreGroupManager::CreatePhysicsListener()
CoreGroupManager::GetNumClasses()
CoreGroupManager::GetClass(int)
CoreGroupManager::PostLoadInitialisation(NuEventData&)
CoreGroupManager::FixupInstances(NuFrameworkResourceHndlList const&, NuList<CoreGroupInstance*>*)
CoreGroupManager::FixupInstance(CoreGroupInstance&, NuFrameworkResourceHndlList const*)
CoreGroupManager::FixupInstancesLevelContainerOnly(LevelContainer*)
CoreGroupManager::RemoveOrphanedInstances(NuList<CoreGroupInstance*> const&)
CoreGroupManager::OnGameLevelFixupEvent(NuEventData&)
CoreGroupManager::OnParentedEvent(NuEventData&)
CoreGroupManager::OnAddObjectToState(SceneNode&, SceneNode&)
CoreGroupManager::OnLinkEvent(NuEventData&)
CoreGroupManager::OnRemoveObjectFromState(ClassObject, CoreGroupState*)
CoreGroupManager::OnDeParentedEvent(NuEventData&)
CoreGroupManager::EventNotify(Event&, NuEventData&)
CoreGroupManager::OnRemoveSceneEvent(NuEventData&)
CoreGroupManager::OnSetIdleEvent(NuEventData&)
CoreGroupManager::OnPostScenegraphFixup(NuEventData&)
CoreGroupManager::OnDestroyObjectEvent(NuEventData&)
CoreGroupManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CoreGroupManager::AddManagedClass(EdClass&)
CoreGroupManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
CoreGroupManager::GetManagerName() const
NuVector<EdClass*>::Reserve(unsigned int, bool)
CoreGroupInstanceIteratorBase::CoreGroupInstanceIteratorBase()
CoreGroupInstanceIteratorBase::CoreGroupInstanceIteratorBase(CoreGroupInstanceList const*, unsigned int)
CoreGroupInstanceIteratorBase::CoreGroupInstanceIteratorBase(CoreGroupInstanceIteratorBase const&)
CoreGroupInstanceIteratorBase::Assign(CoreGroupInstanceIteratorBase const&)
CoreGroupInstanceIteratorBase::IsEqual(CoreGroupInstanceIteratorBase const&) const
CoreGroupInstanceIteratorBase::Current() const
CoreGroupInstanceIteratorBase::Current()
CoreGroupInstanceIteratorBase::Advance()
CoreGroupInstanceMultiList::CoreGroupInstanceMultiList()
CoreGroupInstanceMultiList::Begin()
CoreGroupInstanceMultiList::Begin() const
CoreGroupInstanceMultiList::End()
CoreGroupInstanceMultiList::End() const
CoreGroupInstanceMultiList::CurrentListBegin()
CoreGroupInstanceMultiList::CurrentListBegin() const
CoreGroupInstanceMultiList::CurrentListEnd()
CoreGroupInstanceMultiList::CurrentListEnd() const
CoreGroupInstanceMultiList::PushBack(CoreGroupInstance*)
CoreGroupInstanceMultiList::Unlink(CoreGroupInstance*)
CoreGroupInstanceMultiList::GetNextByClass(CoreGroupInstance*, EdClass*)
CoreGroupInstanceMultiList::GetCountByClass(EdClass*)
CoreGroupInstanceMultiList::Size() const
CoreGroupInstanceMultiList::Empty() const
CoreGroupInstanceMultiList::AdvanceCurrentProcessingList()
CoreGroupStateHelper::CoreGroupStateHelper()
CoreGroupStateHelper::Get()
CoreGroupStateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CoreGroupStateHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CoreGroupState::GetOwningCoreGroupInstance()
CoreGroupStateHelper::AddBaseObject(EdRegContext*, ClassObject&)
CoreGroupStateHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
CoreGroupStateHelper::GetManNextObject(ClassManager*, void*, void*)
CoreGroupStateHelper::GetManNumObjects(ClassManager*, void*)
CoreGroupState::CoreGroupState(EdRegContext&)
CoreGroupState::CoreGroupState(EdRegContext&, CoreGroupState*)
CoreGroupState::~CoreGroupState()
non-virtual thunk to CoreGroupState::~CoreGroupState()
CoreGroupState::~CoreGroupState()
non-virtual thunk to CoreGroupState::~CoreGroupState()
CoreGroupState::GetClass() const
CoreGroupState::GetTransform(VuMtx&) const
CoreGroupState::GetPosition(VuVec&) const
CoreGroupState::SetTransform(VuMtx const&)
CoreGroupState::SetPosition(VuVec const&)
CoreGroupState::SetVisibility(int)
CoreGroupState::RefreshChildAnimationRanges()
CoreGroupState::SetStartFrame(float)
CoreGroupState::SetEndFrame(float)
CoreGroupState::SetActive(CoreGroupInstance*, bool, SceneNode*)
CoreGroupState::FindByName(char const*, SceneNode*)
CoreGroupState::FixupRigidObjects(CoreGroupInstance*, SceneNode*)
CoreGroupState::RecalcNodes(SceneNode*)
CoreGroupState::GetAveragePosition(VuVec&, bool, CoreGroupState::eStateAnimPosition)
CoreGroupState::CalcAveragePosition(int&, SceneNode*)
CoreGroupState::SetAnimationInstance(AnimationInstance*)
CoreGroupState::SetAnimation(Animation*)
CoreGroupState::GetNumObjects(SceneNode*)
CoreGroupState::SetAnimation(char const*)
CoreGroupState::PlayAnimationToPercentage(float)
CoreGroupState::PlayAnimationToFrame(float)
CoreGroupState::GetFrameFromPercentage(float) const
CoreGroupState::JumpAnimationToPercentage(float)
CoreGroupState::JumpAnimationToFrame(float)
CoreGroupState::DeparentObjects()
CoreGroupState::ReEvaluateCompoundObject(bool, SceneNode*)
CoreGroupState::GetChildPlaceableIndex(PlaceableBase const*)
CoreGroupState::SetOwningCoreGroupInstance(CoreGroupInstance*)
CoreGroupState::GetBoundingBox(NuVector3Base&, NuVector3Base&, NuMatrixBase&)
CoreGroupState::SetPerPixelFade(NuPerPixelFadePacket&)
CoreGroupState::SetAlpha(float, SceneNode*, bool)
CoreGroupState::MultiplyAlpha(float, SceneNode*)
CoreGroupState::GetAlpha() const
CoreGroupState::GetAlpha(float&, SceneNode*) const
CoreGroupState::SetLightingGlow(NuColour const&, SceneNode*)
EdCoreGroupStateRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdCoreGroupStateRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdCoreGroupStateRef::~EdCoreGroupStateRef()
CoreGroupStateHelper::~CoreGroupStateHelper()
CoreGroupState::GetVisibility() const
CoreGroupObjectReferenceHelper::CoreGroupObjectReferenceHelper()
CoreGroupObjectReferenceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CoreGroupObjectReferenceHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CoreGroupObjectReferenceHelper::Initialise()
CoreGroupObjectReferenceHelper::AddBaseObject(EdRegContext*, ClassObject&)
CoreGroupObjectReferenceHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
CoreGroupObjectReferenceHelper::GetManNextObject(ClassManager*, void*, void*)
CoreGroupObjectReferenceHelper::GetManNumObjects(ClassManager*, void*)
CoreGroupObjectReferenceHelper::~CoreGroupObjectReferenceHelper()
EdRefCoreGroupObjectReference::~EdRefCoreGroupObjectReference()
EdRefCoreGroupObjectReference::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCoreGroupObjectReference::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
NuClass_CoreGroupObjectFlags::NuClass_CoreGroupObjectFlags()
NuClass_CoreGroupObjectFlags::~NuClass_CoreGroupObjectFlags()
CoreGroupObjectFlags::CoreGroupObjectFlags()
CoreGroupObjectFlags::CoreGroupObjectFlags(CoreGroupObjectFlags const&)
CoreGroupObjectFlags::~CoreGroupObjectFlags()
CoreGroupObjectFlags::Serialize(NuSerialize&)
NuClass_CoreGroupObjectFlags::~NuClass_CoreGroupObjectFlags()
NuClass_CoreGroupObjectFlags::CreateObject() const
NuClass_CoreGroupObjectFlags::CreateObjectArray(unsigned int) const
NuClass_CoreGroupObjectFlags::PlacementNew(void*) const
NuClass_CoreGroupObjectFlags::SerializeObjectIn(NuArchive&, void*) const
NuClass_CoreGroupObjectFlags::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_CoreGroupObjectFlags::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_CoreGroupObjectFlags::~NuClass_CoreGroupObjectFlags()
non-virtual thunk to NuClass_CoreGroupObjectFlags::~NuClass_CoreGroupObjectFlags()
NuClass_CoreGroupStateObjectFlags::NuClass_CoreGroupStateObjectFlags()
NuClass_CoreGroupStateObjectFlags::~NuClass_CoreGroupStateObjectFlags()
CoreGroupStateObjectFlags::CoreGroupStateObjectFlags()
CoreGroupStateObjectFlags::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<CoreGroupObjectFlags>(NuVector<CoreGroupObjectFlags>&, char const*)
CoreGroupStateObjectFlags::SetFlag(unsigned int, unsigned int, bool)
CoreGroupStateObjectFlags::GetFlag(unsigned int, unsigned int)
CoreGroupStateObjectFlags::AnyFlag(unsigned int, unsigned int)
CoreGroupStateObjectFlags::TemplateIndexFromInstanceIndex(unsigned int)
CoreGroupStateObjectFlags::Cleanup()
CoreGroupStateObjectFlags::FixupObjectFlags(SceneNode*)
CoreGroupStateObjectFlags::AddObject()
CoreGroupStateObjectFlags::RemoveObject(unsigned int)
NuClass_CoreGroupStateObjectFlags::~NuClass_CoreGroupStateObjectFlags()
NuClass_CoreGroupStateObjectFlags::CreateObject() const
NuClass_CoreGroupStateObjectFlags::CreateObjectArray(unsigned int) const
NuClass_CoreGroupStateObjectFlags::PlacementNew(void*) const
NuClass_CoreGroupStateObjectFlags::SerializeObjectIn(NuArchive&, void*) const
NuClass_CoreGroupStateObjectFlags::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_CoreGroupStateObjectFlags::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_CoreGroupStateObjectFlags::~NuClass_CoreGroupStateObjectFlags()
non-virtual thunk to NuClass_CoreGroupStateObjectFlags::~NuClass_CoreGroupStateObjectFlags()
NuVector<CoreGroupObjectFlags>::Reserve(unsigned int, bool)
NuClass_CoreGroupObjectFlagsContainer::NuClass_CoreGroupObjectFlagsContainer()
NuClass_CoreGroupObjectFlagsContainer::~NuClass_CoreGroupObjectFlagsContainer()
CoreGroupObjectFlagsContainer::CoreGroupObjectFlagsContainer()
CoreGroupObjectFlagsContainer::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<CoreGroupStateObjectFlags>(NuVector<CoreGroupStateObjectFlags>&, char const*)
CoreGroupObjectFlagsContainer::SetFlag(unsigned int, unsigned int, unsigned int, bool)
CoreGroupObjectFlagsContainer::GetFlag(unsigned int, unsigned int, unsigned int)
CoreGroupObjectFlagsContainer::AnyFlag(unsigned int, unsigned int, unsigned int)
CoreGroupObjectFlagsContainer::AddState()
CoreGroupObjectFlagsContainer::RemoveState(unsigned int)
CoreGroupObjectFlagsContainer::AddObject(unsigned int)
CoreGroupObjectFlagsContainer::RemoveObject(unsigned int, unsigned int)
CoreGroupObjectFlagsContainer::HasFlags()
CoreGroupObjectFlagsContainer::Cleanup()
NuClass_CoreGroupObjectFlagsContainer::~NuClass_CoreGroupObjectFlagsContainer()
NuClass_CoreGroupObjectFlagsContainer::CreateObject() const
NuClass_CoreGroupObjectFlagsContainer::CreateObjectArray(unsigned int) const
NuClass_CoreGroupObjectFlagsContainer::PlacementNew(void*) const
NuClass_CoreGroupObjectFlagsContainer::SerializeObjectIn(NuArchive&, void*) const
NuClass_CoreGroupObjectFlagsContainer::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_CoreGroupObjectFlagsContainer::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_CoreGroupObjectFlagsContainer::~NuClass_CoreGroupObjectFlagsContainer()
non-virtual thunk to NuClass_CoreGroupObjectFlagsContainer::~NuClass_CoreGroupObjectFlagsContainer()
NuVector<CoreGroupStateObjectFlags>::Reserve(unsigned int, bool)
ConvexArea::ConvexArea(EdRegContext&)
ConvexArea::GetTransform(VuMtx&) const
ConvexArea::GetClass() const
ConvexArea::IsInside(VuVec const&) const
ConvexArea::SetPosition(VuVec const&)
ConvexArea::SetSize(VuVec const&)
ConvexArea::PointAreaDist(VuVec const&) const
ConvexArea::SqrDistance(VuVec const&) const
ConvexArea::GetCylinder(VuMtx&, float&, float&) const
ConvexArea::Intersects(VuVec&, VuVec&)
ConvexArea::Intersects(VuMtx&, VuVec&)
ConvexArea::GetBox(VuMtx&, VuVec&) const
ConvexArea::operator=(ConvexArea const&)
ConvexAreaHelper::ConvexAreaHelper()
ConvexAreaHelper::RegisterBaseRefs(EdClass&)
ConvexAreaHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ConvexAreaHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ConvexArea::~ConvexArea()
ConvexArea::~ConvexArea()
ConvexArea::GetPosition(VuVec&) const
non-virtual thunk to ConvexArea::~ConvexArea()
non-virtual thunk to ConvexArea::~ConvexArea()
ConvexAreaHelper::~ConvexAreaHelper()
EdRefConvexArea::~EdRefConvexArea()
EdRefConvexArea::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefConvexArea::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EntityObject::EntityObject(EdRegContext&, EntityObject&)
EntityObject::EntityObject(EdRegContext&, Entity*, nuhspecial_s&)
EntityObject::Initialise(Entity*, nuhspecial_s&, NuSmartPtr<NuScene, true>)
EntityObject::~EntityObject()
non-virtual thunk to EntityObject::~EntityObject()
EntityObject::~EntityObject()
non-virtual thunk to EntityObject::~EntityObject()
EntityObject::GetRadius() const
EntityObject::DriveToAnimMtx(float)
EntityObject::UpdateRenderMtx(bool)
EntityObject::SetTransform(VuMtx const&)
EntityObject::SetKeyframe(VuMtx const&, float, int)
EntityObject::SetVisibility(int)
EntityObject::GetCollision() const
EntityObject::SetCollision(int)
EntityObject::SetName(char const*)
EntityObject::Activate()
EntityObject::Deactivate()
EntityObject::IsActive()
EntityObject::GetCollisionMode() const
EntityObject::SetCollisionMode(PlaceableBase::COLLISION_MODE)
EntityObject::SetSpecialFollowRigid(bool)
EntityObject::RemoveEntityAnimation()
ApiCharacterParams::ApiCharacterParams()
ApiCharacterParams::ApiCharacterParams(char const*, int, CharInst::KrawlyMode)
ApiCharacterParams::LoadResource()
ApiCharacterParams::ApiCharacterParams(CharDef const&, int, CharInst::KrawlyMode)
ApiCharacterParams::ApiCharacterParams(CharDefResourceHndl const&, CharInst::KrawlyMode)
ApiCharacterParams::SetupFromResource()
ApiCharacterParams::~ApiCharacterParams()
ApiCharacterParams::ClearResource()
VehicleDefWheelParams::VehicleDefWheelParams(VehicleDefWheel&, VehicleDef*)
VehicleDefWheel::VehicleDefWheel()
VehicleDefWheel::VehicleDefWheel(VehicleDefWheelParams&)
VehicleDefWheelHelper::BeginFoldingGroup(EdClass*, char const*)
VehicleDefWheelHelper::EndFoldingGroup(EdClass*)
VehicleDefWheelHelper::Initialise()
VehicleDefWheelHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefWheelHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefWheelHelper::~VehicleDefWheelHelper()
MapDamageStageRef::MapDamageStageRef(char*, int)
MapDamageStageRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
VehicleDefDamageStage::Reset()
VehicleDefDamageStage::VehicleDefDamageStage()
VehicleDefDamageStage::VehicleDefDamageStage(VehicleDef*)
VehicleDefDamageStageHelper::Initialise()
VehicleDefDamageStageHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefDamageStageHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MapDamageStageRef::~MapDamageStageRef()
VehicleDefDamageStageHelper::~VehicleDefDamageStageHelper()
VehicleDefSFX::VehicleDefSFX()
VehicleDefSFX::Reset()
VehicleDefSFXHelper::BeginFoldingGroup(EdClass*, char const*)
VehicleDefSFXHelper::EndFoldingGroup(EdClass*)
VehicleDefSFXHelper::Initialise()
VehicleDefSFXHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefSFXHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefSFXHelper::~VehicleDefSFXHelper()
VehicleDefPFX::VehicleDefPFX()
VehicleDefPFXHelper::VehicleDefPFXHelper()
VehicleDefPFXHelper::Initialise()
VehicleDefPFXHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefPFXHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefPFXHelper::~VehicleDefPFXHelper()
VehicleDefLight::VehicleDefLight()
VehicleDefAttachment::VehicleDefAttachment()
VehicleDefAttachment::GetScene()
VehicleDefAttachment::AreResourcesLoaded()
VehicleDefAttachment::SetProcessFilterID(int)
VehicleDefAttachment::UnloadResources(bool)
VehicleDefAttachment::LoadResources(bool)
VehicleDefAttachmentHelper::VehicleDefAttachmentHelper()
VehicleDefAttachmentHelper::BeginFoldingGroup(EdClass*, char const*)
VehicleDefAttachmentHelper::EndFoldingGroup(EdClass*)
VehicleDefAttachmentHelper::Initialise()
VehicleDefAttachmentHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefAttachmentHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefAttachmentHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to VehicleDefAttachmentHelper::EventNotify(Event&, NuEventData&)
VehicleDefAttachmentHelper::~VehicleDefAttachmentHelper()
VehicleDefAttachmentHelper::~VehicleDefAttachmentHelper()
non-virtual thunk to VehicleDefAttachmentHelper::~VehicleDefAttachmentHelper()
non-virtual thunk to VehicleDefAttachmentHelper::~VehicleDefAttachmentHelper()
VehicleDefEngine::VehicleDefEngine()
VehicleDefGearbox::VehicleDefGearbox()
VehicleDefGear::Set(float, float, float, float, char const*, char const*, char const*, char const*)
VehicleDefGearHelper::BeginFoldingGroup(EdClass*, char const*)
VehicleDefGearHelper::EndFoldingGroup(EdClass*)
VehicleDefGearHelper::Initialise()
VehicleDefGearHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefGearHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefGearboxHelper::BeginFoldingGroup(EdClass*, char const*)
VehicleDefGearboxHelper::EndFoldingGroup(EdClass*)
VehicleDefGearboxHelper::Initialise()
VehicleDefGearboxHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefGearboxHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefEngineHelper::Initialise()
VehicleDefEngineHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefEngineHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDefBoosterHelper::Initialise()
VehicleDefBoosterHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
VehicleDefBoosterHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
VehicleDef::DriveTrainPreset_ClearGears()
VehicleDef::DriveTrainPreset_Generic1Speed()
VehicleDef::DriveTrainPreset_Generic2Speed()
VehicleDef::DriveTrainPreset_Generic3Speed()
VehicleDef::DriveTrainPreset_Generic4Speed()
VehicleDef::DriveTrainSetPreset()
VehicleDefGearHelper::~VehicleDefGearHelper()
VehicleDefGearboxHelper::~VehicleDefGearboxHelper()
VehicleDefEngineHelper::~VehicleDefEngineHelper()
VehicleDefBoosterHelper::~VehicleDefBoosterHelper()
VehicleDefParams::VehicleDefParams()
VehicleDefParams::VehicleDefParams(APIVEHICLETYPES)
VehicleDefParams::VehicleDefParams(char const*)
VehicleDef::Reset()
VehicleDef::TempSFXHack()
VehicleDef::VehicleDef(EdRegContext&)
VehicleDef::FindSeat(VehicleDefSeat::SEATTYPES)
VehicleDef::DoesSeatExist(VehicleDefSeat::SEATTYPES)
VehicleDef::~VehicleDef()
CSListHeader<VehicleDefPFX>::Delete(VehicleDefPFX*)
CSListHeader<VehicleDefAttachment>::Delete(VehicleDefAttachment*)
CSListHeader<VehicleDefDamageStage>::Clear()
VehicleDef::UnloadIconTex()
non-virtual thunk to VehicleDef::~VehicleDef()
VehicleDef::~VehicleDef()
non-virtual thunk to VehicleDef::~VehicleDef()
VehicleDef::SetName(char const*)
VehicleDef::LoadIconTex()
VehicleDef::IsIconTexLoaded()
VehicleDef::LoadAttachments()
VehicleDef::UnloadAttachments()
VehicleDef::AreAttachmentsLoaded()
VehicleDef::FixupPFX()
VehicleDef::LoadResources()
VehicleDef::UnloadResources()
VehicleDef::AreResourcesLoaded()
VehicleDef::SetProcessFilterID(int)
VehicleDefHelper::VehicleDefHelper()
VehicleDefHelper::BeginFoldingGroup(EdClass*, char const*)
VehicleDefHelper::EndFoldingGroup(EdClass*)
VehicleDefHelper::AppendDefaultSFX(EdClass*, VehicleDef*)
VehicleDefHelper::RegisterBaseClassVars(EdClass*, VehicleDef*)
VehicleDefHelper::IsVehicleDefClass(ClassObject const*)
VehicleDefHelper::GetParentObject(void*)
VehicleDefHelper::GetParentClass(void*)
VehicleDefHelper::~VehicleDefHelper()
ApiVehicleWheel::SetSpringLength(float)
ApiVehicleWheel::CalcSpringLoad(float)
ApiVehicleWheel::CalcDampingForce(float)
ApiVehicleWheel::Reset()
ApiVehicleJointModifier::ApiVehicleJointModifier(ApiVehicle*, ApiVehicleWheel*, char const*, int)
ApiVehicleJointModifier::DoIk(float, NuSmartPtr<NuScene, true>, DynoScene*, CharacterPose&)
ApiVehicleWheel::ApiVehicleWheel(ApiVehicle&, VehicleDefWheel&)
ApiVehicleWheel::CreateWheelGeom()
ApiVehicleWheel::CreateTyreFrictionJoint()
ApiVehicleWheel::AlignWheelToVehicle()
ApiVehicleWheel::UpdateSpring()
ApiVehicleWheel::UpdateWheelModifier()
ApiVehicleWheel::~ApiVehicleWheel()
ApiVehicleWheel::CalcChassisAttachLocal(VuMtx&)
ApiVehicleWheel::CalcChassisAttachWorld(VuMtx&)
ApiVehicleWheel::UpdateWheelGeom()
IsGadgetProp(Entity*)
ApiVehicleWheel::Cast(VuVec&, VuVec&, float, float, FirstPointCollector&)
ApiVehicleWheel::ZeroVelocity()
ApiVehicleWheel::GetSurfaceFriction(int)
ApiVehicleWheel::CalcTyreGrip()
ApiVehicleWheel::CalcFrictionComponent(VehicleDefWheel const&, VuVec&, VuVec&, float&, float, float, float)
ApiVehicleWheel::CalcTyreReaction(VuVec const&, VuVec const&, float, VuVec&)
ApiVehicleWheel::UpdateTyreFriction()
ApiVehicleWheel::ApplyAcceleration(float, bool)
ApiVehicleWheel::SetSteeringAngle(float)
ApiVehicleWheel::IsFrontWheel()
ApiVehicleWheel::UpdateVelocity()
ApiVehicleWheel::UpdateBrake()
ApiVehicleWheel::UpdateHandBrake()
ApiVehicleWheel::UpdateTyreDrag()
ApiVehicleWheel::UpdateAxleFriction()
ApiVehicleWheel::UpdateTyreFrictionJoint()
ApiVehicleWheel::UpdateSkidStats()
ApiVehicleWheel::Process(float)
ApiVehicleWheel::ProcessLOD(float, float)
ApiVehicleJointModifier::~ApiVehicleJointModifier()
ApiVehicleSkidSegment::Reset()
ApiVehicleSkidSegment::Complete(float, float)
ApiVehicleSkidMarker::ApiVehicleSkidMarker(ApiVehicleWheel*, NuSceneResourceHndl&, NuSmartPtr<NuMtl, true>, float, float)
ApiVehicleSkidMarker::~ApiVehicleSkidMarker()
ApiVehicleSkidMarker::GetPrev()
ApiVehicleSkidMarker::GetCurr()
ApiVehicleSkidMarker::GetFree()
ApiVehicleSkidMarker::Add(VuVec&, float)
ApiVehicleSkidMarker::Render()
ApiVehicleWheel::UpdateSkidMarker()
ApiVehicleWheel::RenderSkidMarker()
ApiVehicle::CreateWheelSkidmarkers(NuSceneResourceHndl&, char const*)
ApiVehicleSkidmarkManager::GetMarker(ApiVehicleWheel*, NuSceneResourceHndl&, NuSmartPtr<NuMtl, true>, float, float)
ApiVehicleSkidmarkManager::ApiVehicleSkidmarkManager()
ApiVehicleSkidmarkManager::~ApiVehicleSkidmarkManager()
CSListHeader<ApiVehicleSkidMarker>::Clear()
ApiVehicleSkidMarker::Release()
ApiVehicleSkidmarkManager::FreeMarker(ApiVehicleSkidMarker*)
ApiVehicleSkidmarkManager::Update(float)
CSListHeader<ApiVehicleSkidMarker>::Delete(ApiVehicleSkidMarker*)
ApiVehicleSkidmarkManager::Render()
ApiVehicleLight::Reset()
ApiVehicleLight::ApiVehicleLight()
ApiVehicleLight::~ApiVehicleLight()
ApiVehicleLight::CastToScene(DynoScene*, VuMtx const&)
ApiVehicleLight::CalcBlinkColour(bool, NUCOLOUR3&)
ApiVehicle::CreateLight(VehicleDefAttachment*)
ApiVehicle::CreateLights()
ApiVehicleLight::HandleRotation(bool, VuMtx&, VuMtx&)
ApiVehicleLight::HandleVisibility(VehicleDefAttachment*, bool)
ApiVehicle::ProcessLights()
ApiVehicle::RenderLights()
ApiVehicle::DestroyLights()
ApiVehicleHoverDrive::Reset()
ApiVehicleHoverDrive::ApiVehicleHoverDrive(ApiVehicle*, float, float, float, float, float, float, float)
ApiVehicleHoverDrive::CalcTargetHeight()
ApiVehicleHoverDrive::SetStrafeVelocity(float)
ApiVehicleHoverDrive::SetHeightCeiling(float)
ApiVehicleHoverDrive::SetHeightActive(float)
ApiVehicleHoverDrive::SetCanHoverOverWater(bool)
ApiVehicleHoverDrive::UpdateStrafing()
ApiVehicleHoverDrive::CheckForOverhangingTerrain()
ApiVehicleHoverDrive::UpdateUserControlledHeight()
ApiVehicleHoverDrive::IsActive()
ApiVehicleHoverDrive::SetDesiredAltitude(float)
ApiVehicleHoverDrive::SetDesiredAltitudeSeekScale(float)
ApiVehicleHoverDrive::Update()
ApiVehicleFrictionDrive::Reset()
ApiVehicleFrictionDrive::AddFrictionJointToScene()
ApiVehicleFrictionDrive::ApiVehicleFrictionDrive(ApiVehicle*, float, float, float, float)
ApiVehicleFrictionDrive::Update(bool)
ApiVehicleBike::GetVehicleDef()
ApiVehicleBike::ApiVehicleBike(EdRegContext&, char const*, VuMtx const*, bool, bool, bool, bool)
ApiVehicleBike::~ApiVehicleBike()
non-virtual thunk to ApiVehicleBike::~ApiVehicleBike()
non-virtual thunk to ApiVehicleBike::~ApiVehicleBike()
ApiVehicleBike::~ApiVehicleBike()
non-virtual thunk to ApiVehicleBike::~ApiVehicleBike()
non-virtual thunk to ApiVehicleBike::~ApiVehicleBike()
ApiVehicleBike::ProjectToTerrain(VuMtx&)
ApiVehicleBike::ZeroVelocity()
ApiVehicleBike::SetTransform(VuMtx const&, bool)
ApiVehicleBike::Create()
ApiVehicleBike::AddWheel(VehicleDefWheel&)
ApiVehicleBike::CalcWheelPlan()
ApiVehicleBike::GetBrakePower()
ApiVehicleBike::GetHandBrakeSensitivity(float&, float&)
ApiVehicleBike::GetVelocityScale()
ApiVehicleBike::CalcPadSensitivity()
ApiVehicleBike::CalcSteeringRateMin()
ApiVehicleBike::CalcSteeringRateMax()
ApiVehicleBike::CalcSteeringAlignRate()
ApiVehicleBike::CalcSteeringAngleScaleMin()
ApiVehicleBike::CalcSteeringAngleScaleMax()
ApiVehicleBike::UpdateSteeringLocal()
ApiVehicleBike::UpdateSteeringScreen()
ApiVehicleBike::UpdateSteering()
ApiVehicleBike::CalcSkidStats()
ApiVehicleBike::UpdateStats()
ApiVehicleBike::UpdateAutoBrake()
ApiVehicleBike::UpdateFlightControl()
ApiVehicleBike::UpdateControls()
ApiVehicleBike::UpdateFlightKeepUpright()
ApiVehicleBike::UpdateRoll()
ApiVehicleBike::Process(float)
ApiVehicleBike::CreateWheelSkidmarkers()
ApiVehicleBike::UpdateWheels()
ApiVehicleBike::UpdateWheelsLOD()
ApiVehicleBike::Render()
non-virtual thunk to ApiVehicleBike::Render()
ApiVehicleBike::SFXCreate()
ApiVehicleBike::SFXDestroy()
ApiVehicleBike::SFXUpdateAll()
ApiVehicleBike::EnterLODMode()
ApiVehicleBike::ExitLODMode()
ApiVehicleBike::TowerAndTrailerUpdate()
ApiVehicleBike::SFXCalcExtraFreq(VehicleDefSFX const&)
ApiVehicleStatic::ApiVehicleStatic(EdRegContext&, char const*, VuMtx const*, bool, bool, bool, bool)
ApiVehicleStatic::~ApiVehicleStatic()
non-virtual thunk to ApiVehicleStatic::~ApiVehicleStatic()
non-virtual thunk to ApiVehicleStatic::~ApiVehicleStatic()
ApiVehicleStatic::~ApiVehicleStatic()
non-virtual thunk to ApiVehicleStatic::~ApiVehicleStatic()
non-virtual thunk to ApiVehicleStatic::~ApiVehicleStatic()
ApiVehicleStatic::SetTransform(VuMtx const&, bool)
ApiVehicleStatic::Create()
ApiVehicleStatic::UpdateControls()
ApiVehicleStatic::GetVehicleDef()
ApiVehicleStatic::Process(float)
ApiVehicleStatic::Render()
non-virtual thunk to ApiVehicleStatic::Render()
ApiVehicleStatic::RenderPFX()
ApiVehicleStatic::SFXCreate()
ApiVehicleStatic::SFXDestroy()
ApiVehicleStatic::SFXUpdateAll()
ApiVehicleStatic::EnterLODMode()
ApiVehicleStatic::ExitLODMode()
ApiVehicleBoat::ApiVehicleBoat(EdRegContext&, char const*, VuMtx const*, bool, bool, bool, bool)
ApiVehicleBoat::~ApiVehicleBoat()
non-virtual thunk to ApiVehicleBoat::~ApiVehicleBoat()
non-virtual thunk to ApiVehicleBoat::~ApiVehicleBoat()
ApiVehicleBoat::~ApiVehicleBoat()
non-virtual thunk to ApiVehicleBoat::~ApiVehicleBoat()
non-virtual thunk to ApiVehicleBoat::~ApiVehicleBoat()
ApiVehicleBoat::GetBrakePower()
ApiVehicleBoat::GetVehicleDef()
ApiVehicleBoat::SetDesiredHeading(int)
ApiVehicleBoat::SetDesiredVelocity(float)
ApiVehicleBoat::SetTransform(VuMtx const&, bool)
ApiVehicleBoat::Create()
ApiVehicleBoat::IsInWater()
ApiVehicleBoat::UpdateControls()
ApiVehicleBoat::UpdatePitch()
ApiVehicleBoat::UpdateOrientationScales()
ApiVehicleBoat::CalcWaterline()
ApiVehicleBoat::GetWaterDepth()
ApiVehicleBoat::HandleBuoyancy()
ApiVehicleBoat::Process(float)
ApiVehicleBoat::Render()
non-virtual thunk to ApiVehicleBoat::Render()
ApiVehicleBoat::RenderPFX()
ApiVehicleBoat::SFXCreate()
ApiVehicleBoat::SFXDestroy()
ApiVehicleBoat::SFXUpdateTurnWake()
ApiVehicleBoat::SFXUpdateWake()
ApiVehicleBoat::SFXUpdateAll()
ApiVehicleBoat::EnterLODMode()
ApiVehicleBoat::ExitLODMode()
ApiVehicleAircraft::GetBrakePower()
ApiVehicleAircraft::GetVehicleDef()
ApiVehicleAircraft::ApiVehicleAircraft(EdRegContext&, char const*, VuMtx const*, bool, bool, bool, bool)
ApiVehicleAircraft::~ApiVehicleAircraft()
non-virtual thunk to ApiVehicleAircraft::~ApiVehicleAircraft()
non-virtual thunk to ApiVehicleAircraft::~ApiVehicleAircraft()
ApiVehicleAircraft::~ApiVehicleAircraft()
non-virtual thunk to ApiVehicleAircraft::~ApiVehicleAircraft()
non-virtual thunk to ApiVehicleAircraft::~ApiVehicleAircraft()
ApiVehicleAircraft::GetAltitude()
ApiVehicleAircraft::SetTransform(VuMtx const&, bool)
ApiVehicleAircraft::Create()
ApiVehicleAircraft::UpdateControls()
ApiVehicleAircraft::SetDesiredHeading(int)
ApiVehicleAircraft::SetDesiredOrientation(int, int, int)
ApiVehicleAircraft::SetDesiredVelocity(float)
ApiVehicleAircraft::SetDesiredAltitude(float)
ApiVehicleAircraft::SetDesiredAltitudeSeekScale(float)
ApiVehicleAircraft::UpdateOrientationScales()
ApiVehicleAircraft::UpdatePitch()
ApiVehicleAircraft::Process(float)
ApiVehicleAircraft::Render()
non-virtual thunk to ApiVehicleAircraft::Render()
ApiVehicleAircraft::RenderPFX()
ApiVehicleAircraft::SFXCreate()
ApiVehicleAircraft::SFXDestroy()
ApiVehicleAircraft::SFXUpdateAll()
ApiVehicleAircraft::EnterLODMode()
ApiVehicleAircraft::ExitLODMode()
ApiVehicleDriveToMtx(RigidBody*, VuMtx&, float, bool, bool, float)
ApiVehicleCar::ApiVehicleCar(EdRegContext&, char const*, VuMtx const*, bool, bool, bool, bool)
ApiVehicleCar::~ApiVehicleCar()
non-virtual thunk to ApiVehicleCar::~ApiVehicleCar()
non-virtual thunk to ApiVehicleCar::~ApiVehicleCar()
ApiVehicleCar::~ApiVehicleCar()
non-virtual thunk to ApiVehicleCar::~ApiVehicleCar()
non-virtual thunk to ApiVehicleCar::~ApiVehicleCar()
ApiVehicleCar::ProjectToTerrain(VuMtx&)
ApiVehicleCar::ZeroVelocity()
ApiVehicleCar::SetTransform(VuMtx const&, bool)
ApiVehicleCar::Create()
ApiVehicleCar::GetVehicleDef()
ApiVehicleCar::AddWheel(VehicleDefWheel&)
ApiVehicleCar::CalcWheelPlan()
ApiVehicleCar::CalcAxleGroups()
ApiVehicleCar::GetBrakePower()
ApiVehicleCar::GetHandBrakeSensitivity(float&, float&)
ApiVehicleCar::GetVelocityScale()
ApiVehicleSeekAng(int, int, float, float)
ApiVehicleCar::CalcPadSensitivity()
ApiVehicleCar::CalcSteeringRateMin()
ApiVehicleCar::CalcSteeringRateMax()
ApiVehicleCar::CalcSteeringAlignRate()
ApiVehicleCar::CalcSteeringAngleScaleMin()
ApiVehicleCar::CalcSteeringAngleScaleMax()
ApiVehicleCar::UpdateSteeringLocal()
ApiVehicleCar::UpdateSteeringScreen()
ApiVehicleCar::UpdateSteering()
ApiVehicleCar::CalcSkidStats()
ApiVehicleCar::UpdateStats()
ApiVehicleCar::UpdateAutoBrake()
ApiVehicleCar::UpdateFlightControl()
ApiVehicleCar::UpdateLimitedSlipDiff()
ApiVehicleCar::UpdateDriftControl()
ApiVehicleCar::UpdateControls()
ApiVehicleCar::UpdateDownforce()
ApiVehicleCar::UpdateFlightKeepUpright()
ApiVehicleCar::Process(float)
ApiVehicleCar::CreateWheelSkidmarkers()
ApiVehicleCar::UpdateWheelSpin()
ApiVehicleCar::UpdateWheels()
ApiVehicleCar::UpdateWheelsLOD()
ApiVehicleCar::IsWheelspinActive()
ApiVehicleCar::GetWheelspinProgress()
ApiVehicleCar::SetDrivewheelGripScale(float, float)
ApiVehicleCar::Render()
non-virtual thunk to ApiVehicleCar::Render()
ApiVehicleCar::SFXCreate()
ApiVehicleCar::SFXDestroy()
ApiVehicleCar::SFXUpdateAll()
ApiVehicleCar::EnterLODMode()
ApiVehicleCar::ExitLODMode()
ApiVehicleCar::SFXCalcExtraFreq(VehicleDefSFX const&)
NuVarArray<ApiVehicleWheel*>::AdjustSize(unsigned int)
CoreGroupCollisionListener::Collision(Character*, Entity*, ContactPoint&)
CoreGroupCollisionListener::Collision(BodyPair*, Array<ContactPoint>&)
CoreGroupCollisionListener::Collision(EntityPair*)
CoreGroupCollisionListener::OverlapEnd(Entity const*, Entity const*)
CoreGroupCollisionListener::OverlapBegin(Entity const*, Entity const*)
CoreGroupCollisionListener::AllowSweepCollision(Entity const*, Entity const*)
CoreGroupCollisionListener::~CoreGroupCollisionListener()
CoreGroupObjectReference::CoreGroupObjectReference(EdRegContext&)
CoreGroupObjectReference::CoreGroupObjectReference(EdRegContext&, CoreGroupObjectReference*)
CoreGroupObjectReference::GetClass() const
CoreGroupObjectReference::SetReferenceObject(PlaceableBase*)
CoreGroupObjectReference::GetReferencedObject() const
CoreGroupObjectReference::GetTransform(VuMtx&) const
CoreGroupObjectReference::SetTransform(VuMtx const&)
CoreGroupObjectReference::~CoreGroupObjectReference()
CoreGroupObjectReference::~CoreGroupObjectReference()
non-virtual thunk to CoreGroupObjectReference::~CoreGroupObjectReference()
non-virtual thunk to CoreGroupObjectReference::~CoreGroupObjectReference()
EditorFileParams::EditorFileParams(EditorFileType const&, char const*, EditorFileParams::AddMode)
EditorFileParams::~EditorFileParams()
EditorFileParams::~EditorFileParams()
EditorFileParamsHelper::RegisterClasses(EdRegistry&)
EditorFileParamsHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
EditorFileParamsHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
EditorFileParamsHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to EditorFileParamsHelper::EventNotify(Event&, NuEventData&)
EditorFileType::EditorFileType(char const*, char const*, EditorFile* (*)(EditorFileParams const&), char const*, EdClass*, EdComponent const*)
EditorFileType::BuildFileSelectorText(char*, char const*, char const*)
EditorFileType::~EditorFileType()
CMList<EditorFile*>::~CMList()
EditorFileType::FindFile(char const*) const
EditorFile::GetFullFileName(char*, int) const
EditorFileType::CreateFile(EditorFileParams const&) const
CSListHeader<EditorFileType>::~CSListHeader()
EditorFile::SetVCEnabled(bool)
EditorFile::IsVCEnabled()
EditorFile::RegisterFileType(char const*, char const*, EditorFile* (*)(EditorFileParams const&), char const*, EdClass*, EdComponent const*)
EditorFile::FindFileType(EdClass*)
EditorFile::FindFileType(char const*)
EditorFile::AddVCHistory(char const*)
EditorFile::FindFile(char const*)
EditorFile::EditorFile(EditorFileParams const&)
CMList<EditorFile*>::Append(EditorFile* const&, CMList<EditorFile*>::ListLink*)
EditorFile::JoinRelativeFileName(char const*)
EditorFile::~EditorFile()
EditorFile::~EditorFile()
EditorFile::Fixup()
EditorFile::SetupFileName()
EditorFile::GetName() const
EditorFile::SetFileName(char const*)
EditorFile::SplitFullFileName(char const*)
EditorFile::LoadFromDisk()
EditorFile::CanLoadFromDisk() const
EditorFile::LoadFromMem(void*, int)
EditorFile::CanLoadFromMem() const
EditorFile::Unload()
EditorFile::CanUnload() const
EditorFileHelper::RegisterClasses(EdRegistry&)
EditorFileHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
EditorFileHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
EditorFileHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to EditorFileHelper::EventNotify(Event&, NuEventData&)
EditorFileRequest::EditorFileRequest(char const*, EditorFile&, NuFileNotifier*)
EditorFileRequest::EditorFileRequest(char const*, char const*, EditorFile&, NuFileNotifier*)
EditorFileRequest::~EditorFileRequest()
EditorFileRequest::~EditorFileRequest()
EditorFileRequest::Read(bool volatile*)
EditorFileRequest::ReadFromMem(void*, unsigned int, bool volatile*)
EditorObjectFile::EditorObjectFile(EditorFileParams const&)
EditorObjectFile::~EditorObjectFile()
EditorObjectFile::IsModified() const
EditorObjectFile::DoLoadFromDisk()
EditorObjectFile::DoLoadFromMem(void*, int)
EditorObjectFile::DoUnload()
EditorObjectFile::SetObjects(ClassObjectList const&)
EditorObjectFile::GetParentObject()
EditorObjectFileHelper::RegisterClasses(EdRegistry&)
EditorObjectFileHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
EditorObjectFileHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
EditorFileParamsHelper::~EditorFileParamsHelper()
EditorFileParamsHelper::~EditorFileParamsHelper()
non-virtual thunk to EditorFileParamsHelper::~EditorFileParamsHelper()
non-virtual thunk to EditorFileParamsHelper::~EditorFileParamsHelper()
EditorFileHelper::~EditorFileHelper()
EditorFileHelper::~EditorFileHelper()
non-virtual thunk to EditorFileHelper::~EditorFileHelper()
non-virtual thunk to EditorFileHelper::~EditorFileHelper()
EditorObjectFileHelper::~EditorObjectFileHelper()
CStack<EdFileInputStream::ReadBlockInfo, 32>::~CStack()
CStack<EdFileInputStream::ReadBlockInfo, 32>::~CStack()
Animation::Animation(EdRegContext&, EdClass*)
Animation::Animation(EdRegContext&, Animation&)
Animation::GetUniqueName(AnimationManager*, EdString const&, EdString&)
Animation::~Animation()
Animation::~Animation()
Animation::SetNameFromClassObject(ClassObject const&, void*, AnimationManager*)
Animation::SetNameFromClassObject(ClassObject const&, AnimationManager*)
Animation::FindKeyframeTrack(KeyframeTrackType*, EdRef*)
Animation::FindEventTrack()
Animation::Process(ClassObject, AnimationLayer*)
Animation::Stop(ClassObject, AnimationLayer*)
Animation::GetAbsolute()
Animation::GetNextKeyframe(float) const
Animation::GetPrevKeyframe(float) const
Animation::RecalcEndframe()
Animation::SetName(char const*)
Animation::IsProcedural() const
Animation::IsShareable() const
AnimationHelper::AnimationHelper()
AnimationHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
AnimationHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
AnimationHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
AnimationHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
AnimationHelper::AddBaseObject(EdRegContext*, ClassObject&)
AnimationHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
AnimationHelper::GetObjectPrams(void*, void*, int)
AnimationHelper::GetManNextObject(ClassManager*, void*, void*)
AnimationHelper::GetManNumObjects(ClassManager*, void*)
AnimationHelper::Initialise()
AnimationHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to AnimationHelper::EventNotify(Event&, NuEventData&)
Animation::GetName() const
Animation::GetEndFrame() const
Animation::GetLength() const
Animation::RemapTime(float) const
AnimationHelper::~AnimationHelper()
AnimationHelper::~AnimationHelper()
non-virtual thunk to AnimationHelper::~AnimationHelper()
non-virtual thunk to AnimationHelper::~AnimationHelper()
ClassManagerAccessor<AnimationManager>::GetFromCreate(ILevelContainer const&)
AnimationInstanceValue::AnimationInstanceValue()
AnimationInstanceValue::AnimationInstanceValue(void*, int)
AnimationInstanceValue::SetValue(void*, int)
AnimationInstanceValue::AnimationInstanceValue(float&)
AnimationInstanceValue::ConvertBasicTypesToFloatType()
AnimationInstanceConstructionParams::AnimationInstanceConstructionParams()
RandomInstance::Initialise()
AnimationInstance::AnimationInstance(EdRegContext&, ClassObject&, AnimationInstance&)
AnimationInstance::Initialise(EdRegContext&, ClassObject const&)
AnimationInstance::AnimationInstance(EdRegContext&, ClassObject&)
AnimationInstance::AnimationInstance(EdRegContext&, SceneObject&)
AnimationInstance::~AnimationInstance()
AnimationInstance::~AnimationInstance()
AnimationInstance::LinkToObject(ClassObject)
AnimationInstance::FilterLayersByName(char const*, AnimationInstance::FilterLayerAction, AnimationInstance::FilterDirection)
AnimationInstance::SetPlayDirection(apcPlayDirection)
AnimationInstance::Play(bool)
AnimationInstance::HasCutSceneLayers()
AnimationInstance::Stop()
AnimationInstance::RequestUpdate(bool)
AnimationInstance::SetUpdatePhase(AnimationInstance::UpdatePhase)
AnimationInstance::GetUpdatePhase() const
AnimationInstance::Activate()
AnimationInstance::GetAnimationManager()
AnimationInstance::DeActivate()
AnimationInstance::JumpToFrame(float)
AnimationInstance::SetFrame(float)
AnimationInstance::GetFrame()
AnimationInstance::UpdateInheritParentFrame()
AnimationInstance::UpdateAnimation(float, bool)
AnimationInstance::IsFullyFixedUp() const
AnimationInstance::CalculateAnimSyncLength(AnimationLayer*)
AnimationInstance::CalculateLongestAnimLength()
AnimationInstance::StartAutomaticPlaybackNodes()
AnimationInstance::AddLayer(AnimationLayer*)
AnimationInstance::GetAnimObject()
AnimationInstance::RemoveLayer(AnimationLayer*)
AnimationInstance::HasLayerWithThisAnimation(Animation const*) const
AnimationInstance::HasLayerWithThisAnimation(char const*) const
AnimationInstance::AddNewLayer(Animation const*)
AnimationInstance::DestroyLayersWithAnimation(Animation const*)
AnimationInstance::DestroyIfEmpty(AnimationInstance*)
AnimationInstance::HasAnimatedVisibility()
AnimationInstance::GetAnimatedVisibility(float)
AnimationInstance::SetAnimationTFactor(float)
AnimationInstance::RemoveAnimationLayer(Animation*)
AnimationInstance::RemoveAnimationLayer(char const*)
AnimationInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
AnimationInstance::SetObject(IAnimatable*)
AnimationInstanceHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
AnimationInstanceHelper::GetManNextObject(ClassManager*, void*, void*)
AnimationInstanceHelper::AllowSlowSmartPtrFixup(EdClass*) const
AnimationInstanceHelper::GetTargetObjectEdRefSmartPtr() const
AnimationInstanceHelper::GetManNumObjects(ClassManager*, void*)
AnimationInstanceHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
AnimationInstanceHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
AnimationInstanceHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
AnimationInstanceHelper::AddBaseObject(EdRegContext*, ClassObject&)
AnimationInstanceHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
AnimationInstanceHelper::Initialise()
AnimationInstanceHelper::GetInstanceFromObject(ClassObject const&)
AnimationInstanceHelper::SetEditInstance(ClassObject const&)
AnimationInstanceHelper::AnimationInstanceHelper()
AnimationInstanceHelper::GetObjectPrams(void*, void*, int)
AnimationInstanceHelper::EventNotify(Event&, NuEventData&)
AnimationInstanceHelper::SelectObject(ClassObject const&)
non-virtual thunk to AnimationInstanceHelper::EventNotify(Event&, NuEventData&)
AnimationInstanceHelper::FindTrack(AnimationInstance&, EdRef&)
AnimationInstance::GetMyEdClass()
AnimationInstance::FindLayer(char const*)
AnimationInstance::GetPrimaryAnimation()
AnimationInstance::GetPrimaryLayer()
AnimationInstance::GetPlayControl()
AnimationInstance::GetPlayControl() const
AnimationInstance::SetComplete(char)
AnimationInstance::AddFailedFixUpLayersToList()
AnimationInstance::RemoveFailedFixUpLayersFromList()
AnimationInstance::SetReferencedByTargetObject(bool)
AnimationInstance::IsOrphan() const
AnimationInstance::SetSaveableFromAttributes(EDOBJATTR_FLAGS)
AnimationInstance::SetSaveable(bool)
AnimationInstance::IsSaveable() const
AnimationInstance::SetNotifyOnDestroy(bool)
AnimationInstance::GetPlayBackSpeed() const
AnimationInstance::SetPlayBackSpeed(float)
EdRefAnimationInstance::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAnimationInstance::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefIAnimatableBasePtr::EdRefIAnimatableBasePtr(char const*, void**, long, EDATTR_FLAGS, EdRefSmartPtrBase::FixupError::T, EdControl*)
EdRefIAnimatableBasePtr::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefIAnimatableBasePtr::ResetSmartPtr(void*)
EdRefAnimationInstance::~EdRefAnimationInstance()
AnimationInstance::IsAnyLayerPlaying() const
AnimationInstanceHelper::~AnimationInstanceHelper()
AnimationInstanceHelper::~AnimationInstanceHelper()
non-virtual thunk to AnimationInstanceHelper::~AnimationInstanceHelper()
non-virtual thunk to AnimationInstanceHelper::~AnimationInstanceHelper()
EdRefIAnimatableBasePtr::~EdRefIAnimatableBasePtr()
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::FixUpToNuUniqueObjAccessor(void*, NuUniqueObjectAccessor*)
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::GetFixupSearchStr(void*)
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::WriteFixupData(void*, char const*)
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::LateFixup(void*, StreamingLevel*, NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>*)
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::GetNuUniqueObjAccessorFromPointee(void*) const
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::GetPointee(void*)
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::GetPointeeAsNuUniqueObjectAccessor(void*) const
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::GetPointeeAsBaseEdClass(void*)
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::GetPointeeEdClass(void*)
EdRefSmartPtr<IAnimatable, IAnimatable, NuFatRawPtr<IAnimatable> >::ResetToPreFixup(void*)
AnimationClipInstance::AnimationClipInstance(EdRegContext&, ClassObject&, AnimationClipInstance&)
AnimationClipInstance::AnimationClipInstance(EdRegContext&, ClassObject&)
AnimationClipInstance::UpdateAnimation(float, bool)
AnimationClipInstance::Activate()
AnimationClipInstance::DeActivate()
AnimationClipInstance::Play(bool)
AnimationClipInstance::Stop()
AnimationClipInstance::SetPlayDirection(apcPlayDirection)
AnimationClipInstance::SetFrame(float)
AnimationClipInstance::JumpToFrame(float)
AnimationClipInstanceHelper::AnimationClipInstanceHelper()
AnimationClipInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
AnimationClipInstanceHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
AnimationClipInstanceHelper::GetManNextObject(ClassManager*, void*, void*)
AnimationClipInstanceHelper::GetManNumObjects(ClassManager*, void*)
AnimationClipInstanceHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
AnimationClipInstanceHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
AnimationClipInstanceHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
AnimationClipInstanceHelper::Initialise()
AnimationClipInstanceHelper::GetObjectPrams(void*, void*, int)
AnimationClipInstanceHelper::AddBaseObject(EdRegContext*, ClassObject&)
AnimationClipInstanceHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
AnimationClipInstance::GetMyEdClass()
AnimationClipInstance::IsAnyLayerPlaying()
AnimationClipInstance::GetPlayBackSpeed() const
AnimationClipInstance::SetPlayBackSpeed(float)
AnimationClipInstance::~AnimationClipInstance()
AnimationClipInstance::~AnimationClipInstance()
AnimationClipInstance::GetPlayControl() const
AnimationClipInstance::GetPlayControl()
AnimationClipInstanceHelper::~AnimationClipInstanceHelper()
AnimationClipInstanceHelper::~AnimationClipInstanceHelper()
non-virtual thunk to AnimationClipInstanceHelper::~AnimationClipInstanceHelper()
non-virtual thunk to AnimationClipInstanceHelper::~AnimationClipInstanceHelper()
AnimationLayer::AnimationLayer(Animation*, AnimationPlayControl*, ArithmeticOperator, bool)
AnimationLayer::SetAnimation(Animation*)
AnimationLayer::AnimationLayer(EdRegContext const&, AnimationLayer const*)
AnimationLayer::~AnimationLayer()
AnimationLayer::~AnimationLayer()
AnimationLayer::UpdateAnimation(float, ClassObject, bool)
AnimationLayer::GetComponent() const
AnimationLayer::RegenerateRandomSeed()
AnimationLayer::FixItUp()
AnimationLayer::SetFixupName(char const*)
AnimationLayer::ReplaceFailedToFixUpAnimation(Animation*, EdRegContext, ClassObject const&)
AnimationLayer::SetNotifyClipOnDestuction(bool)
AnimationLayerHelper::AnimationLayerHelper()
AnimationLayerHelper::~AnimationLayerHelper()
AnimationLayerHelper::~AnimationLayerHelper()
AnimationLayerHelper::Initialise()
AnimationLayerHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
AnimationLayerHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
AnimationLayerHelper::GetObjectPrams(void*, void*, int)
EdRefAnimationLayer::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAnimationLayer::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefLayerParams::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefLayerParams::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAnimationLayer::~EdRefAnimationLayer()
EdRefLayerParams::~EdRefLayerParams()
AnimationLayer::GetPlayControl() const
AnimationLayer::GetArithmeticOperator() const
AnimationLayer::GetPlayControl()
AnimationClipLayer::AnimationClipLayer(AnimationClip*, ClassObject)
AnimationClipLayer::AnimationClipLayer(EdRegContext const&, AnimationClipLayer*)
AnimationClipLayer::~AnimationClipLayer()
AnimationClipLayer::~AnimationClipLayer()
AnimationClipLayer::GetPlayControl()
AnimationClipLayer::GetPlayControl() const
AnimationClipLayer::UpdateAnimation(float, ClassObject, bool)
AnimationClipLayer::GetComponent()
AnimationClipLayerHelper::AnimationClipLayerHelper()
AnimationClipLayerHelper::~AnimationClipLayerHelper()
AnimationClipLayerHelper::~AnimationClipLayerHelper()
AnimationClipLayerHelper::Initialise()
AnimationClipLayerHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
AnimationClipLayerHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
AnimationClipLayerHelper::GetObjectPrams(void*, void*, int)
AnimationClipLayer::GetArithmeticOperator() const
AnimationManager::AnimationManager(LevelContainer&)
AnimationManager::RegisterProcessing()
AnimationManager::RegisterRendering()
AnimationManager::Initialise()
AnimationManager::FindAnimatableInNodeUsingAnimationName(SceneNode*, char const*)
AnimationManager::FindAnimationNameInNodeUsingObjectName(SceneNode*, char const*)
AnimationManager::FindAnimationInstance(char const*)
AnimationManager::FindAnimationInstance(ClassObject const&, AnimationInstance*)
AnimationManager::FindAnimation(char const*, short)
AnimationManager::FindClipAnimation(char const*)
AnimationManager::FindProceduralAnimation(char const*) const
AnimationManager::FindAnimation(KeyframeTrack*)
AnimationManager::FindAnimationInstance(Animation*, AnimationInstance*)
AnimationManager::FindAnimationInstance(KeyframeTrack*, AnimationInstance*)
AnimationManager::IsAnimatedBy(AnimationInstance*, Animation const&)
AnimationManager::IsAnimatedBy(ClassObject const&, Animation const&)
AnimationManager::ProcessEarly(ManagerProcessData*)
AnimationManager::UpdateAllAnimation(float)
AnimationManager::UpdateAnimationNotSyncedToCutscene(float)
AnimationManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
AnimationManager::UpdateAnimation(float, unsigned int)
AnimationManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
AnimationManager::Serialise(EdStream&)
AnimationManager::IsInUse(Animation*, ClassObject*)
AnimationManager::DeleteAnimation(Animation*)
AnimationManager::AddProceduralAnimation(ProceduralAnimation*)
AnimationManager::RemoveProceduralAnimation(ProceduralAnimation*)
AnimationManager::GetProceduralAnimations() const
AnimationManager::RemoveAnimationInstance(AnimationInstance*)
AnimationManager::DeleteAnimationInstance(AnimationInstance*)
AnimationManager::FindAnimationInstanceIndex(ClassObject const&, AnimationInstance&)
AnimationManager::RemoveScene(int)
AnimationManager::SetPlayingGroup(char const*, bool, bool)
AnimationManager::GetClass(int)
AnimationManager::GetNumClasses()
AnimationManager::~AnimationManager()
AnimationManager::~AnimationManager()
AnimationManager::EventNotify(Event&, NuEventData&)
AnimationManager::ProcessFailedToFixUpList()
AnimationManager::OnDestroyedAnimatableEvent(IAnimatable*) const
AnimationManager::UpdateAnimationSyncedToCutscene(float)
AnimationManager::UpdateInstanceList(AnimationInstanceList&, float, int)
AnimationManager::AnimationInstanceNeedsUpdating(AnimationInstance const*, unsigned int, bool&) const
AnimationManager::RemoveFromFailedFixUpList(AnimationLayer*)
AnimationManager::AddToFailedFixUpList(AnimationLayer*)
CMList<AnimationLayer*>::Append(AnimationLayer* const&, CMList<AnimationLayer*>::ListLink*)
AnimationManager::GetManagerName() const
AnimationPlayControl::AnimationPlayControl(EdRegContext*, float, float)
AnimationPlayControl::AnimationPlayControl(EdRegContext const&, Animation*)
AnimationPlayControl::AnimationPlayControl(AnimationPlayControl const&, Animation*)
AnimationPlayControl::IsFirstUpdateSinceStartedPlaying() const
AnimationPlayControl::UpdateFrame(float)
AnimationPlayControl::IsAnimationAtBeginning() const
AnimationPlayControl::IsAnimationAtEnd() const
AnimationPlayControl::CalculateFrameFromTime(AnimationLayer const*, float) const
PlayControlFactory::Create(EdRegContext&, Animation*, ClassObject const&, AnimationPlayControl const*)
AnimationPlayControl::SetState(apcState)
AnimationPlayControl::Play()
AnimationPlayControl::Stop()
AnimationPlayControl::SetFrame(float)
AnimationPlayControl::JumpToFrame(float)
AnimationPlayControl::SetNeedsProcess(bool)
AnimationPlayControl::NeedsProcess() const
AnimationPlayControl::GetPlayDirection() const
AnimationPlayControl::SetPlayDirection(apcPlayDirection)
AnimationPlayControl::GetPlayBackSpeed() const
AnimationPlayControl::SetPlayBackSpeed(float)
AnimationPlayControl::GetPlayMode() const
AnimationPlayControl::SetPlayMode(apcPlayMode)
AnimationPlayControl::GetState() const
AnimationPlayControl::GetFrame() const
AnimationPlayControl::GetPreviousFrame() const
AnimationPlayControl::SetPreviousFrame(float)
AnimationPlayControl::~AnimationPlayControl()
AnimationPlayControl::~AnimationPlayControl()
AnimationPlayControl::SetTfactor(float)
AnimationPlayControl::GetTfactor()
AnimationClip::AnimationClip(EdRegContext&, Animation*, EdClass*, float, float)
AnimationClip::~AnimationClip()
AnimationClip::~AnimationClip()
AnimationClip::Process(ClassObject, AnimationLayer*)
AnimationClip::AddRef()
AnimationClip::ReleaseRef(bool)
AnimationClipHelper::AnimationClipHelper()
AnimationClipHelper::Initialise()
AnimationClipHelper::GetManNumObjects(ClassManager*, void*)
AnimationClipHelper::GetManNextObject(ClassManager*, void*, void*)
AnimationClipHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
AnimationClipHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
AnimationClipHelper::GetObjectPrams(void*, void*, int)
AnimationClipHelper::AddBaseObject(EdRegContext*, ClassObject&)
AnimationClipHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
AnimationClip::GetEndFrame() const
AnimationClipHelper::~AnimationClipHelper()
GSCAnimationPlayControl::GSCAnimationPlayControl(EdRegContext const&, Animation const*)
GSCAnimationPlayControl::GSCAnimationPlayControl(EdRegContext const&, Animation const*, ClassObject const&)
GSCAnimationPlayControl::SetSceneObject(SceneObject*)
GSCAnimationPlayControl::GSCAnimationPlayControl(GSCAnimationPlayControl const&, ClassObject const&, Animation const*)
GSCAnimationPlayControl::~GSCAnimationPlayControl()
GSCAnimationPlayControl::~GSCAnimationPlayControl()
GSCAnimationPlayControl::GetNuInstAnim()
GSCAnimationPlayControl::SetPreAnimMtx(VuMtx const&)
GSCAnimationPlayControl::SetFrame(float)
GSCAnimationPlayControl::GetPlayMode() const
GSCAnimationPlayControl::GetNuInstAnim() const
GSCAnimationPlayControl::SetPlayMode(apcPlayMode)
GSCAnimationPlayControl::GetState() const
GSCAnimationPlayControl::SetState(apcState)
GSCAnimationPlayControl::UpdateFrame(float)
GSCAnimationPlayControl::GetFirstTime() const
GSCAnimationPlayControl::GetIntervalTime() const
GSCAnimationPlayControl::CalculateFrameFromTime(AnimationLayer*, float)
GSCAnimationPlayControl::UpdateDrawMatrix(AnimationInstance*, SceneObject*)
GSCAnimationPlayControl::HasAnimatedVisibility(ClassObject const&) const
GSCAnimationPlayControl::GetAnimatedVisibility(float, ClassObject const&) const
GSCAnimationPlayControl::SetNeedsProcess(bool)
GSCAnimationPlayControl::NeedsProcess()
GSCAnimationPlayControl::GetFrame() const
GSCAnimationPlayControl::GetPlayDirection() const
GSCAnimationPlayControl::SetPlayDirection(apcPlayDirection)
GSCAnimationPlayControl::GetPlaying() const
GSCAnimationPlayControl::SetPlaying(bool)
GSCAnimationPlayControl::GetPreviousFrame() const
GSCAnimationPlayControl::SetPreviousFrame(float)
GSCAnimationPlayControl::GetPreAnimMtx(VuMtx&) const
GSCAnimationPlayControl::GetPrevEvalTime() const
GSCAnimationPlayControl::ResetPrevEvalTime()
GSCAnimationPlayControl::SetFparam1(float)
GSCAnimationPlayControl::SetWaiting(bool)
GSCAnimationPlayControl::SetRepeating(bool)
GSCAnimationPlayControl::SetUseDrawMtx(bool)
GSCAnimationPlayControl::SetUptoDate(bool)
GSCAnimationPlayControl::SetTfactor(float)
GSCAnimationPlayControl::SetLocalTime(float)
GSCAnimationPlayControl::GetWaiting() const
GSCAnimationPlayControl::GetRepeating() const
GSCAnimationPlayControl::GetUseDrawMtx() const
GSCAnimationPlayControl::GetLocalTime() const
GSCAnimationPlayControl::GetTfactor() const
GSCAnimationPlayControl::GetInitialTfactor() const
GSCAnimationPlayControl::GetFparam1() const
GSCAnimationPlayControl::GetNumFrames() const
KeyframeTrack::GetRegType(KeyframeTrackType)
KeyframeTrack::GetTypeFromRegType(int)
KeyframeTrack::SetValue(void*, KeyframeTrackType, float)
KeyframeTrack::GetValue(void*, KeyframeTrackType)
KeyframeTrack::CalcDefaultKeyframeType(KeyframeTrackType) const
KeyframeTrack::KeyframeTrack(EdRegContext&, KeyframeTrackType, char const*, EdRef*, char const*)
KeyframeTrack::KeyframeTrack(EdRegContext&, KeyframeTrack&)
KeyframeTrack::~KeyframeTrack()
KeyframeTrack::~KeyframeTrack()
KeyframeTrack::CheckTrackExists(KeyframeTrack*)
KeyframeTrack::GetSubTrackValue(unsigned int, AnimationInstanceValue&) const
KeyframeTrack::GetEndFrame() const
KeyframeTrack::IsEmpty() const
KeyframeTrack::SetDefaultTransitionType(KeyFrameTransitionType)
KeyframeTrack::IsSpecialisedType() const
KeyframeTrack::FindKeyframe(float) const
KeyframeTrack::FindKeyframe(float)
KeyframeTrack::FindLastKeyframe(float) const
KeyframeTrack::FindLastKeyframe(float)
KeyframeTrack::GetTrackLength() const
KeyframeTrack::DestroySelf(Animation&)
KeyframeTrack::DeleteKeyframe(float)
KeyframeTrack::GetPreviousKeyframe(float)
KeyframeTrack::GetNextKeyframe(float)
KeyframeTrack::SetOriginalValue(float)
KeyframeTrack::GetOriginalValue(ClassObject, AnimationLayer*)
KeyframeTrack::SetObjectValue(ClassObject, AnimationInstanceValue*)
KeyframeTrack::GetObjectValue(ClassObject, AnimationInstanceValue*)
KeyframeTrack::GetInterpFromFrame(float, ClassObject, AnimationLayer const*, InterpFrameResult&) const
KeyframeTrack::Process(ClassObject, AnimationLayer*, ArithmeticOperator, AnimationInstanceValue*) const
KeyframeTrack::GetTrackFrameValue(ClassObject, AnimationLayer*) const
KeyframeTrack::Interpolate(float, float, float)
KeyframeTrack::SplineInterpolate(float, float, float, float, float)
KeyframeTrack::GetLed()
KeyframeTrack::GetTrackValueAtFrame(ClassObject, AnimationLayer const*, float) const
KeyframeTrack::GetParent()
KeyframeTrack::GetComponent() const
KeyframeTrack::GetJitterComponent()
KeyframeTrack::GetParentObject(void*)
KeyframeTrack::SetParentObject(EdClass*, void*, EdRef*)
KeyframeTrack::SortKeyframes()
KeyframeTrack::FixUpEdRef(EdClass*)
KeyframeTrack::SetLed(short)
KeyframeTrack::GetHighestValue()
KeyframeTrack::GetHighestTrackValue()
KeyframeTrack::GetLowestValue()
KeyframeTrack::GetLowestTrackValue()
KeyframeListFactory::Make(EdRegContext&, KeyframeTrackType, EdRef*, char const*, KeyframeTrack*)
EdRefKeyframeList::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefKeyframeList::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
KeyframeTrackHelper::Initialise()
KeyframeTrackHelper::GetNumObjects(void*)
KeyframeTrackHelper::GetNextObject(void*, void*)
KeyframeTrackHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
KeyframeTrackHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
KeyframeTrackHelper::GetObjectPrams(void*, void*, int)
KeyframeTrackHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
KeyframeTrackHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
KeyframeTrack::SetTrackJitterData(JitterBaseData*)
KeyframeTrackHelper::GetHelperType(KeyframeTrackType)
KeyframeSpecialisedTrackHelper::GetNumObjects(void*)
KeyframeSpecialisedTrackHelper::GetNextObject(void*, void*)
KeyframeTrackHelper::~KeyframeTrackHelper()
EdRefKeyframeList::~EdRefKeyframeList()
KeyframeSpecialisedTrackHelper::~KeyframeSpecialisedTrackHelper()
KeyframeTrack::Stop(ClassObject, AnimationLayer*) const
KeyframeTrack::SetFromObject()
KeyframeTrack::GetSubTrack(unsigned int)
KeyframeTrack::GetSubTrack(unsigned int) const
KeyframeTrack::GetSubTrackCount() const
KeyframeTrackColour::KeyframeTrackColour(EdRegContext&, EdRef*, char const*)
KeyframeTrackColour::CreateSubTracks(EdRegContext&)
KeyframeTrackColour::KeyframeTrackColour(EdRegContext&, KeyframeTrackColour&)
KeyframeTrackColour::~KeyframeTrackColour()
KeyframeTrackColour::~KeyframeTrackColour()
KeyframeTrackColour::GetSubTrackValue(unsigned int, AnimationInstanceValue&) const
KeyframeTrackColour::Process(ClassObject, AnimationLayer*, ArithmeticOperator, AnimationInstanceValue*) const
KeyframeTrackColour::GetHelper()
KeyframeTrackColour::GetComponent() const
KeyframeTrackColour::GetJitterComponent()
KeyframeColourTrackHelper::Initialise()
KeyframeColourTrackHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
KeyframeColourTrackHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
KeyframeColourTrackHelper::GetObjectPrams(void*, void*, int)
KeyframeColourTrackHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
KeyframeColourTrackHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
KeyframeTrackColour::GetSubTrack(unsigned int)
KeyframeTrackColour::GetSubTrack(unsigned int) const
KeyframeTrackColour::GetSubTrackCount() const
KeyframeTrackColour::SetObject(void*)
KeyframeColourTrackHelper::~KeyframeColourTrackHelper()
KeyframeColourTrackHelper::GetTrackType() const
KeyframeTrackFloat::KeyframeTrackFloat(EdRegContext&, KeyframeTrackFloat&)
KeyframeTrackFloat::KeyframeTrackFloat(EdRegContext&, EdRef*, char const*, KeyframeTrackType)
KeyframeTrackFloat::KeyframeTrackFloat(EdRegContext&, KeyframeTrackType)
KeyframeTrackFloat::~KeyframeTrackFloat()
KeyframeTrackInt::KeyframeTrackInt(EdRegContext&, EdRef*, char const*, KeyframeTrackType)
KeyframeTrackInt::KeyframeTrackInt(EdRegContext&, KeyframeTrackType)
KeyframeTrackInt::KeyframeTrackInt(EdRegContext&, KeyframeTrackInt&)
KeyframeTrackInt::Interpolate(float, float, float)
KeyframeTrackInt::~KeyframeTrackInt()
KeyframeTrackEvent::KeyframeTrackEvent(EdRegContext&, KeyframeTrackType)
KeyframeTrackEvent::KeyframeTrackEvent(EdRegContext&, KeyframeTrackEvent&)
KeyframeTrackEvent::GetComponent() const
KeyframeTrackEvent::Process(ClassObject, AnimationLayer*, ArithmeticOperator, AnimationInstanceValue*) const
KeyframeTrackEvent::ProcessTimeRange(AnimationLayer*, float, float, apcPlayDirection, bool) const
KeyframeTrackEvent::Execute(AnimationLayer*, KeyframeEvent const*)
KeyframeTrackEvent::Stop(ClassObject, AnimationLayer*) const
KeyframeTrackEventHelper::Initialise()
KeyframeTrackEventHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
KeyframeTrackEventHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
KeyframeTrackEventHelper::GetObjectPrams(void*, void*, int)
KeyframeTrackEventHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
KeyframeTrackEventHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
EdRefKeyframeTrackEvent::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefKeyframeTrackEvent::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
KeyframeTrackEvent::~KeyframeTrackEvent()
EdRefKeyframeTrackEvent::~EdRefKeyframeTrackEvent()
KeyframeTrackEventHelper::~KeyframeTrackEventHelper()
KeyframeTrackEventHelper::GetTrackType() const
KeyframeTrackMatrix::KeyframeTrackMatrix(EdRegContext&, EdRef*, char const*, EDREG_FLAGS)
KeyframeTrackMatrix::CreateSubTracks(EdRegContext&)
KeyframeTrackMatrix::KeyframeTrackMatrix(EdRegContext&, KeyframeTrackMatrix&, EDREG_FLAGS)
KeyframeTrackMatrix::~KeyframeTrackMatrix()
KeyframeTrackMatrix::~KeyframeTrackMatrix()
TransformMtxComponents::VuMtxToComponents(_vum_s*)
TransformMtxComponents::ComponentsToVuMtx(_vum_s*)
KeyframeTrackMatrix::SetObjectValue(ClassObject, AnimationInstanceValue*)
KeyframeTrackMatrix::GetObjectValue(ClassObject, AnimationInstanceValue*)
KeyframeTrackMatrix::Process(ClassObject, AnimationLayer*, ArithmeticOperator, AnimationInstanceValue*) const
KeyframeTrackMatrix::TestVuMtxSub(_vum_s*, _vum_s const*, _vum_s const*) const
KeyframeTrackMatrix::GetComponent() const
KeyframeTrackMatrix::GetJitterComponent()
KeyframeMatrixTrackHelper::Initialise()
KeyframeMatrixTrackHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
KeyframeMatrixTrackHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
KeyframeMatrixTrackHelper::GetObjectPrams(void*, void*, int)
KeyframeMatrixTrackHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
KeyframeMatrixTrackHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
KeyframeMatrixTrackHelper::~KeyframeMatrixTrackHelper()
KeyframeMatrixTrackHelper::GetTrackType() const
KeyframeTrackMatrix::GetSubTrack(unsigned int)
KeyframeTrackMatrix::GetSubTrack(unsigned int) const
KeyframeTrackMatrix::GetSubTrackCount() const
KeyframeTrackVector3::KeyframeTrackVector3(EdRegContext&, EdRef*, char const*)
KeyframeTrackVector3::CreateSubTracks(EdRegContext&)
KeyframeTrackVector3::KeyframeTrackVector3(EdRegContext&, KeyframeTrackVector3&)
KeyframeTrackVector3::~KeyframeTrackVector3()
KeyframeTrackVector3::~KeyframeTrackVector3()
KeyframeTrackVector3::GetSubTrackValue(unsigned int, AnimationInstanceValue&) const
KeyframeTrackVector3::Process(ClassObject, AnimationLayer*, ArithmeticOperator, AnimationInstanceValue*) const
KeyframeTrackVector3::GetHelper()
KeyframeTrackVector3::GetJitterComponent()
KeyframeTrackVector3::GetComponent() const
KeyframeVector3TrackHelper::Initialise()
KeyframeVector3TrackHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
KeyframeVector3TrackHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
KeyframeVector3TrackHelper::GetObjectPrams(void*, void*, int)
KeyframeVector3TrackHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
KeyframeVector3TrackHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
KeyframeTrackVector3::GetSubTrack(unsigned int)
KeyframeTrackVector3::GetSubTrack(unsigned int) const
KeyframeTrackVector3::GetSubTrackCount() const
KeyframeTrackVector3::SetObject(void*)
KeyframeVector3TrackHelper::~KeyframeVector3TrackHelper()
KeyframeVector3TrackHelper::GetTrackType() const
ProceduralAnimation::ProceduralAnimation(EdRegContext&, char const*)
ProceduralAnimation::~ProceduralAnimation()
ProceduralAnimation::~ProceduralAnimation()
ProceduralAnimation::SetShareable(bool)
ProceduralAnimation::IsNonShareable() const
ProceduralAnimation::SetOwner(AnimationInstance*)
ProceduralAnimation::GetOwner() const
ProceduralAnimation::Process(ClassObject, AnimationLayer*)
ProceduralAnimationHelper::ProceduralAnimationHelper()
ProceduralAnimationHelper::Initialise()
ProceduralAnimationHelper::GetManNextObject(ClassManager*, void*, void*)
ProceduralAnimationHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
ProceduralAnimationHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
ProceduralAnimationHelper::AddBaseObject(EdRegContext*, ClassObject&)
ProceduralAnimationHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
ProceduralAnimationHelper::~ProceduralAnimationHelper()
ProcAnimPlayControl::ProcAnimPlayControl(EdRegContext const&, Animation*, ClassObject const&)
ProcAnimPlayControl::GetProceduralAnimation() const
ProcAnimPlayControl::ProcAnimPlayControl(ProcAnimPlayControl const&, Animation*, ClassObject const&)
ProcAnimPlayControl::SetState(apcState)
ProcAnimPlayControl::GetProcAnimInterface()
ProcAnimPlayControl::~ProcAnimPlayControl()
ProcAnimPlayControl::~ProcAnimPlayControl()
ProcAnimInterface::ProcAnimInterface(ClassObject const&)
NuVector<ProcAnimInterface::ProcAnimObject>::Reserve(unsigned int, bool)
ProcAnimInterface::Reset()
ProcAnimInterface::UpdateObjects()
ProcAnimInterface::AddChildren(ClassObject const&, ProcAnimInterface::ObjectListUpdateState*)
ProcAnimInterface::GetNumObjects() const
ProcAnimInterface::SetAnimationFinished()
ProcAnimInterface::IsAnimationFinished() const
ProcAnimInterface::IsInSceneGraph(int) const
ProcAnimInterface::GetSceneNode(int) const
ProcAnimInterface::GetLocalMtx(int) const
ProcAnimInterface::SetLocalMtx(int, NuMatrixBase const&) const
ProcAnimInterface::GetWorldMtx(int) const
ProcAnimInterface::GetPlaceableBase(int) const
ProcAnimInterface::SetWorldMtx(int, NuMatrixBase const&)
ProcAnimInterface::GetPosition(int) const
ProcAnimInterface::SetPosition(int, NuVector3Base const&)
ProcAnimInterface::GetStartWorldMtx(int) const
ProcAnimInterface::IsRigidObject(int) const
ProcAnimInterface::GetRigidObject(int) const
ProcAnimInterface::SetKinematic(int, bool)
ProcAnimInterface::GetSceneObject(int) const
ProcAnimInterface::SetLinearVelocity(int, NuVector3Base const&)
ProcAnimInterface::SetAngularVelocity(int, NuVector3Base const&)
ProcAnimInterface::SetAlpha(int, float)
ProcAnimInterface::SetVisibility(int, bool)
ProcAnimInterface::AddObject(ClassObject const&, ProcAnimInterface::ObjectListUpdateState*)
ProcAnimInterface::FindObject(ClassObject const&, int) const
ProcAnimInterface::ProcAnimObject::ProcAnimObject()
ProcAnimInterface::ProcAnimObject::ProcAnimObject(ClassObject const&)
KeyframeSubHelper::Initialise()
EdRefAnimationObject::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAnimationObject::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAnimationObject::~EdRefAnimationObject()
NuClass_InstObjInitialiser::NuClass_InstObjInitialiser()
NuClass_InstObjInitialiser::~NuClass_InstObjInitialiser()
InstObjInitialiser::InstObjInitialiser()
InstObjInitialiser::CopyNamesFromInitialiser(InstanceObject const&)
InstObjInitialiser::CopyNamesForChildObjects(SceneNode*, int, bool)
NuVector<NuDynamicStringT<false> >::PushBack(NuDynamicStringT<false> const&)
InstObjInitialiser::CopyNamesToInitialiser(InstanceObject const&)
InstObjInitialiser::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<NuDynamicStringT<false> >(NuVector<NuDynamicStringT<false> >&, char const*)
InstanceObject::InstanceObject(SceneNode*, EdRegContext&)
InstanceObject::GetClass() const
InstanceObject::MakeChildObjectNamesUnique(SceneNode*)
InstanceObject::CloneObjectTree(ClassObject const&)
InstanceObject::SetCloneObjectName(char const*)
InstanceObject::SetClonedObject(ClassObject const&)
InstanceObject::~InstanceObject()
non-virtual thunk to InstanceObject::~InstanceObject()
InstanceObject::~InstanceObject()
non-virtual thunk to InstanceObject::~InstanceObject()
InstanceObject::DeleteObjectTree(ClassObject&)
InstanceObject::SetTransform(VuMtx const&)
InstanceObject::InitTransform()
InstanceObject::ResetTransform()
InstanceObject::GetTransform(VuMtx&) const
InstanceObject::GetPosition(VuVec&) const
InstanceObject::SetPosition(VuVec const&)
InstanceObjectManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
InstanceObjectManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
InstanceObjectManager::RemoveInstanceFromHashMap(ClassObject const&)
InstanceObjectManager::InstanceObjectFind(ClassObject const&)
InstanceObjectManager::InsertInstanceInHashMap(InstanceObject*, ClassObject const&)
InstanceObject::ClearClonedObject()
InstanceObjectManager::GetNumObjects(void*)
InstanceObjectManager::GetNextObject(void*, void*)
InstanceObjectManager::CreateAndInitCloneObject(InstanceObject*)
InstanceObject::FixupInstanceObject()
InstanceObject::FixupNodeAndChildren(SceneNode*)
InstanceObjectManager::EventNotify(Event&, NuEventData&)
InstanceObjectManager::FixupAnimationInstances(NuFrameworkResource const*)
InstanceObjectManager::RemoveScene(int)
InstanceObjectManager::OnDestroyObjectEvent(ClassObject const&)
InstanceObjectManager::ClonePhysicsJoints(NuVector<ClassObject*>&, NuVector<ClassObject*>&)
InstanceObjectManager::ClonePhysicsJoints(InstanceObject*)
InstanceObjectManager::ClonePhysicsJoints(SceneNode*, SceneNode*)
InstanceObjectManager::RebuildInstance(InstanceObject*, ClassObject&)
InstanceObjectManager::InstanceObjectManager(LevelContainer&)
InstanceObjectHelper::InstanceObjectHelper()
CreateInstanceObjectManager(LevelContainer&)
InstanceObjectHelper::Initalise()
InstanceObjectHelper::Render(EdRenderWindowInfo const&, void*, int, EdRef*)
EdRefInstance::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefInstance::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSceneNodePtr::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefInstance::~EdRefInstance()
EdRefSceneNodePtr::~EdRefSceneNodePtr()
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::FixUpToNuUniqueObjAccessor(void*, NuUniqueObjectAccessor*)
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::GetFixupSearchStr(void*)
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::WriteFixupData(void*, char const*)
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::LateFixup(void*, StreamingLevel*, NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>*)
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::GetNuUniqueObjAccessorFromPointee(void*) const
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::GetPointee(void*)
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::GetPointeeAsNuUniqueObjectAccessor(void*) const
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::GetPointeeAsBaseEdClass(void*)
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::GetPointeeEdClass(void*)
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::ResetSmartPtr(void*)
EdRefSmartPtr<SceneNode, SceneNode, NuFatRawPtr<SceneNode> >::ResetToPreFixup(void*)
InstanceObjectManager::~InstanceObjectManager()
InstanceObjectManager::~InstanceObjectManager()
InstanceObjectManager::GetManagerName() const
InstanceObjectManager::GetClass(int)
InstanceObjectManager::GetNumClasses()
InstanceObjectHelper::~InstanceObjectHelper()
NuClass_InstObjInitialiser::~NuClass_InstObjInitialiser()
NuClass_InstObjInitialiser::CreateObject() const
NuClass_InstObjInitialiser::CreateObjectArray(unsigned int) const
NuClass_InstObjInitialiser::PlacementNew(void*) const
NuClass_InstObjInitialiser::SerializeObjectIn(NuArchive&, void*) const
NuClass_InstObjInitialiser::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_InstObjInitialiser::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_InstObjInitialiser::~NuClass_InstObjInitialiser()
non-virtual thunk to NuClass_InstObjInitialiser::~NuClass_InstObjInitialiser()
NuVector<NuDynamicStringT<false> >::ReSize(unsigned int, bool)
NuVector<NuDynamicStringT<false> >::Reserve(unsigned int, bool)
NuVector<Joint*>::Reserve(unsigned int, bool)
NuVector<ClassObject*>::Reserve(unsigned int, bool)
IAnimatable::SetPlayMode(bool, apcPlayMode)
IAnimatable::GetReferencedIAnimatables(IAnimatable**)
IAnimatable::IsAnimationIsolatedFromHierarchy()
IAnimatable::SetPlayDirection(bool, apcPlayDirection)
IAnimatable::JumpToStartFrame(bool)
IAnimatable::JumpToEndFrame(bool)
IAnimatable::GetAnimFrame()
IAnimatable::GetCurrentAnimFrameDebug(bool)
IAnimatable::SetAnimationFrame(bool, float)
IAnimatable::ForceProcessAnimation(bool)
IAnimatable::PlayAnimation(bool, apcPlayDirection, bool)
IAnimatable::StopAnimation(bool)
IAnimatable::SetAnimationTFactor(float, bool)
IAnimatable::IsAnimationLooping(bool)
IAnimatable::IsAnimationComplete(bool, bool)
IAnimatable::IsAnimationAtEnd(bool)
IAnimatable::IsAnimationAtStart(bool)
IAnimatable::IsAnimationPlaying(bool)
IAnimatable::GetAnimationPlayDirection()
IAnimatable::GetPlayBackSpeed() const
IAnimatable::SetPlayBackSpeed(float)
IAnimatable::IsAnimated(bool)
IAnimatable::GetAnimationLength(bool, bool)
IAnimatable::AddAdditionalAnimationLayer(Animation*)
IAnimatable::AddAdditionalAnimationLayer(char const*)
IAnimatable::RemoveAnimationLayer(Animation*)
IAnimatable::RemoveAnimationLayer(char const*)
IAnimatable::CopyAnimationInstance(EdRegContext&, IAnimatable&)
IAnimatable::RemoveAnimation()
Animatable::Animatable(int)
Animatable::Animatable(EdRegContext*, int)
Animatable::Animatable(Animatable&, EdRegContext*, bool)
Animatable::~Animatable()
non-virtual thunk to Animatable::~Animatable()
Animatable::~Animatable()
non-virtual thunk to Animatable::~Animatable()
Animatable::GetClass() const
Animatable::GetLedFile() const
Animatable::SetLedFile(short)
Animatable::GetName() const
Animatable::SetName(char const*)
Animatable::SetAnimationInstance(AnimationInstance*)
Animatable::GetAnimationInstance()
Animatable::GetAnimationInstance() const
EdRefAnimatable::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAnimatable::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
IAnimatableHelper::IAnimatableHelper()
IAnimatableHelper::Initialise()
AnimatableHelper::AnimatableHelper()
AnimatableHelper::Initialise()
NuUniqueObjectAccessor::~NuUniqueObjectAccessor()
IAnimatable::~IAnimatable()
EdRefAnimatable::~EdRefAnimatable()
Animatable::GetNuUniqueObjectBase()
Animatable::GetNuUniqueName() const
Animatable::GetNuUniqueNameHash() const
non-virtual thunk to Animatable::GetNuUniqueName() const
non-virtual thunk to Animatable::GetNuUniqueNameHash() const
IAnimatableHelper::~IAnimatableHelper()
AnimatableHelper::~AnimatableHelper()
PlaceableBase::DoSetSceneNode(SceneNode*&, SceneNode*, bool)
PlaceableBase::FindInHierachy(char const*, EdClass*, NuVector<PlaceableBase*>&, bool)
PlaceableBase::FindInHierachy(EdClass&, NuVector<PlaceableBase*>&)
PlaceableBase::GetPosition(VuVec&) const
PlaceableBase::SetPosition(VuVec const&)
PlaceableBase::GetTransform(VuMtx&) const
PlaceableBase::SetSceneNodeDirty()
PlaceableBase::SetTransform(VuMtx const&)
PlaceableBase::SetKeyframe(VuMtx const&, float, int)
PlaceableBase::GetSceneNode() const
PlaceableBase::GetVisibility() const
PlaceableBase::SetVisibility(int)
PlaceableBase::SetLayer(char)
PlaceableBase::GetLayer()
PlaceableBase::GetCollision() const
PlaceableBase::SetCollision(int)
PlaceableBase::Activate(bool)
PlaceableBase::GetCollisionMode() const
PlaceableBase::SetCollisionMode(PlaceableBase::COLLISION_MODE)
PlaceableBase::IsInTempScene()
PlaceableBase::IsInLedFile(short)
PlaceableBase::IsInContainer(LevelContainer*) const
PlaceableBase::GetContainer() const
PlaceableBase::SetAttributes(EDOBJATTR_FLAGS)
PlaceableBase::CheckAttributes(EDOBJATTR_FLAGS)
PlaceableBase::SetSceneNode(SceneNode*)
Placeable::Placeable()
Placeable::Placeable(EdRegContext&)
Placeable::Placeable(EdRegContext&, Placeable&, int)
non-virtual thunk to Placeable::~Placeable()
Placeable::~Placeable()
non-virtual thunk to Placeable::~Placeable()
PlaceableBase::Clone(EdRegContext&, EDOBJATTR_FLAGS, CloneFlags) const
PlaceableBase::CloneObjectTree(PlaceableBase const*, EdRegContext&, EDOBJATTR_FLAGS, SceneNode*, CloneFlags) const
PlaceableBase::GenerateUniqueName(PlaceableBase const*)
Placeable::SetName(char const*)
Placeable::SetAnimationInstance(AnimationInstance*)
Placeable::GetAttributes() const
Placeable::GetClassInterface() const
Placeable::SetAttributes(EDOBJATTR_FLAGS)
Placeable::CheckAttributes(EDOBJATTR_FLAGS)
Placeable::GetAppData()
Placeable::SetAppData(GameAppData*)
Placeable::GetLedFile() const
Placeable::SetLedFile(short)
Placeable::GetPlatform() const
Placeable::SetPlatform(int)
Placeable::ClearPlatform(int)
Placeable::CheckPlatform(int)
Placeable::IsForThisPlatform()
Placeable::GetSceneNode() const
Placeable::SetLayer(char)
Placeable::GetLayer()
Placeable::Destroy()
non-virtual thunk to Placeable::Destroy()
Placeable::Reset()
Placeable::GetName() const
Placeable::GetNoName()
Placeable::GetInstanceNameSuffix()
Placeable::GetRadius() const
Placeable::GetNuUniqueName() const
non-virtual thunk to Placeable::GetNuUniqueName() const
Placeable::GetNuUniqueNameHash() const
non-virtual thunk to Placeable::GetNuUniqueNameHash() const
Placeable::Render()
Placeable::GetAnimationInstance()
Placeable::SetSceneNode(SceneNode*)
Placeable::GetNavObstacleNodeGroupName(char*) const
Placeable::Serialize(NuSerialize&)
PlaceableStub::GetTransform(VuMtx&) const
PlaceableStub::SetTransform(VuMtx const&)
PlaceableBaseHelper::PlaceableBaseHelper()
PlaceableBaseHelper::Initialise()
PlaceableInterface::Find(char const*)
PlaceableInterface::Find(char const*, Placeable**, int)
PlaceableInterface::DebugOutputObjects()
PlaceableInterface::CloneObject(void*, EdRegContext&, EDOBJATTR_FLAGS)
PlaceableHelper::PlaceableHelper()
PlaceableHelper::GetPlaceableClass()
PlaceableHelper::Initialise()
PlaceableHelper::RegisterObjectType(PlaceableInterface*)
PlaceableHelper::FindObject(char const*, void*)
PlaceableHelper::GetNextObject(void*, void*)
PlaceableHelper::Find(char*)
PlaceableHelper::Find(char*, Placeable**, int)
PlaceableHelper::IsEditorObject(ClassObject&)
EdRefPlaceable::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefPlaceable::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefPlaceable::~EdRefPlaceable()
PlaceableInterface::~PlaceableInterface()
PlaceableBase::~PlaceableBase()
Placeable::~Placeable()
PlaceableStub::~PlaceableStub()
PlaceableStub::GetClass() const
non-virtual thunk to PlaceableStub::~PlaceableStub()
non-virtual thunk to PlaceableStub::~PlaceableStub()
EdClassFactoryT<PlaceableStub>::New(EdRegContext&)
EdClassFactoryT<PlaceableStub>::Delete(void*)
PlaceableBaseHelper::~PlaceableBaseHelper()
PlaceableGroupHelper::PlaceableGroupHelper()
CreatePlaceableGroupManager(LevelContainer&)
PlaceableGroupHelper::Initialise()
PlaceableGroup::PlaceableGroup(EdRegContext&)
PlaceableGroup::Init()
PlaceableGroup::GetClass() const
PlaceableGroup::GetRadius() const
PlaceableGroup::SetTransform(VuMtx const&)
PlaceableGroupManager::PlaceableGroupManager(LevelContainer&)
PlaceableGroupManager::~PlaceableGroupManager()
PlaceableGroupManager::~PlaceableGroupManager()
PlaceableGroupManager::GetNextObject(void*, void*)
PlaceableGroupManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
PlaceableGroupManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
PlaceableGroupManager::EventNotify(Event&, NuEventData&)
PlaceableGroupManager::RemoveScene(int)
PlaceableGroupManager::FindRandomObjectFuzzy(char const*, short)
EdRefPlaceableGroup::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefPlaceableGroup::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
PlaceableGroupList::GetHeadByClass(EdClass&)
EdRefPlaceableGroup::~EdRefPlaceableGroup()
PlaceableGroup::~PlaceableGroup()
PlaceableGroup::~PlaceableGroup()
non-virtual thunk to PlaceableGroup::~PlaceableGroup()
non-virtual thunk to PlaceableGroup::~PlaceableGroup()
PlaceableGroupManager::GetManagerName() const
PlaceableGroupManager::GetClass(int)
PlaceableGroupManager::GetNumClasses()
PlaceableGroupManager::GetNumObjects(void*)
PlaceableGroupHelper::~PlaceableGroupHelper()
NuVector<PlaceableGroup*>::Reserve(unsigned int, bool)
EdPlaceableHelper::EdPlaceableHelper(int)
EdClassHelper::EdClassHelper(int)
EdPlaceableHelper::~EdPlaceableHelper()
EdClassHelperT<PlaceableInterface, PlaceableBase, EdPlaceableHelper>::GetClassManager(short) const
EdClassHelperT<PlaceableInterface, PlaceableBase, EdPlaceableHelper>::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
EdClassHelperT<PlaceableInterface, PlaceableBase, EdPlaceableHelper>::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdClassHelperT<PlaceableInterface, PlaceableBase, EdPlaceableHelper>::GetNumObjects(void*)
EdClassHelperT<PlaceableInterface, PlaceableBase, EdPlaceableHelper>::GetNextObject(void*, void*)
EdClassHelperT<PlaceableInterface, PlaceableBase, EdPlaceableHelper>::GetManNumObjects(ClassManager*, void*)
EdClassHelperT<PlaceableInterface, PlaceableBase, EdPlaceableHelper>::GetManNextObject(ClassManager*, void*, void*)
EdClassHelperT<PlaceableInterface, PlaceableBase, EdPlaceableHelper>::Render(EdRenderWindowInfo const&, void*, int, EdRef*)
EdClassHelper::~EdClassHelper()
EdClassHelperT<EdClassInterface, void, EdClassHelper>::GetClassManager(short) const
EdClassHelperT<EdClassInterface, void, EdClassHelper>::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
EdClassHelperT<EdClassInterface, void, EdClassHelper>::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdClassHelperT<EdClassInterface, void, EdClassHelper>::GetNumObjects(void*)
EdClassHelperT<EdClassInterface, void, EdClassHelper>::GetNextObject(void*, void*)
EdClassHelperT<EdClassInterface, void, EdClassHelper>::GetManNumObjects(ClassManager*, void*)
EdClassHelperT<EdClassInterface, void, EdClassHelper>::GetManNextObject(ClassManager*, void*, void*)
EdClassHelperT<EdClassInterface, void, EdClassHelper>::Render(EdRenderWindowInfo const&, void*, int, EdRef*)
FileResourceInfo::GetHash() const
NuFrameworkResourceType::GetName() const
SceneMapKey::SceneMapKey()
SceneMapKey::SceneMapKey(NuString const&, NuFrameworkResource*, LevelContainer const*)
SceneMapKey::Hash() const
SceneMapKey::operator==(SceneMapKey const&) const
NuFrameworkResourceType::CreateResourceInternal(ResourceInfo const&) const
LEDFileRequest::LEDFileRequest(char const*, EdFileDesc&, EdRegContext const&, NuFileNotifier*, NuMemoryManager*)
LEDFileRequest::~LEDFileRequest()
LEDFileRequest::~LEDFileRequest()
LEDFileRequest::Read(bool volatile*)
NuFrameworkResourceInfo::NuFrameworkResourceInfo(char const*, char const*, LevelContainer*, EdRegContext*, EDSCENE_FLAGS, NuFrameworkResource*, char, EdFileDescVector*)
NuFrameworkResourceInfo::NuFrameworkResourceInfo(char const*, char const*, instNUGCUTSCENE*, LevelContainer*, EdRegContext*, EDSCENE_FLAGS, NuFrameworkResource*, EdFileDescVector*)
NuFrameworkResourceInfo::~NuFrameworkResourceInfo()
NuFrameworkResourceInfo::~NuFrameworkResourceInfo()
NuFrameworkResource::NuFrameworkResource(NuFrameworkResourceInfo const&)
EdSceneHelper::AllocLedId(NuFrameworkResource&)
NuFrameworkResource::~NuFrameworkResource()
EdSceneHelper::FreeLedId(short)
NuFrameworkResource::~NuFrameworkResource()
NuFrameworkResource::ImmediatelyLoad()
NuFrameworkResource::StartLoad()
NuFrameworkResource::StartLoad_LED()
NuFrameworkResource::StartLoad_GSC()
NuFrameworkResource::StartLoad_CUT()
NuFrameworkResource::SetFlags(EDSCENE_FLAGS)
FixUpGScenePortals(NuFrameworkResource*)
EdSceneHelper::GetEdScene(short)
NuFrameworkResource::ProcessLoad()
NuFrameworkResource::DoAddResource()
EdFileDescVector::Contains(EdFileDesc&)
NuFrameworkResource::AbortLoad()
NuFrameworkResource::FinishLoad()
NuFrameworkResource::HasSuccessfullyLoaded()
NuFrameworkResource::StartUnload()
NuFrameworkResource::PreUnloadFixup(bool)
NuFrameworkResource::FinishUnload()
NuFrameworkResource::DoRemoveResource()
NuFrameworkResourceHndl::GetEdScene() const
NuFrameworkResource::SetProcessFilterID(int)
NuFrameworkResource::PostLoadFixup(bool, NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>*)
NuFrameworkResource::PostLoadFixupRecursive(ClassObject&, bool, NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>*)
NuFrameworkResource::PreUnloadFixupRecursive(ClassObject&, bool) const
NuFrameworkResource::IsMatch(ResourceInfo const&) const
NuFrameworkResource::ResourceMatch(ResourceInfo const&) const
NuFrameworkResource::ClearFlags(EDSCENE_FLAGS, bool)
EdSceneHelper::Initialise()
EdSceneHelper::GetObjectPrams(void*, void*, int)
EdSceneHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
EdSceneHelper::GetSceneContainer(short)
NuFrameworkResourceHndl::GetLEDId() const
EdSceneHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdSceneHelper::GetNextBaseObject(ClassObject const&) const
EdSceneHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
EdSceneHelper::UpdateScene(ManagerProcessData*)
EdSceneHelper::GetNumScenes() const
EdSceneHelper::PostProcessUpdateScene(ManagerProcessData*)
EdSceneHelper::GetEdScene(char const*, LevelContainer*)
EdSceneHelper::GetEdSceneFromPath(char const*)
NuFrameworkResource::GetFilename(EdString&, unsigned char) const
EdSceneHelper::GetEdScene(NuSmartPtr<NuScene, true>)
EdSceneHelper::GetEdScene(ClassObject const&)
EdSceneHelper::GetEdScene(NuSmartPtr<NuScene, true>, LevelContainer*)
EdSceneHelper::GetSceneId(char const*)
EdSceneHelper::GetSceneId(NuSmartPtr<NuScene, true>)
EdSceneHelper::GetScene(short)
EdSceneHelper::GetScene(char const*)
EdSceneHelper::IsSceneActive(short)
EdSceneHelper::IsSceneVisible(short)
EdSceneHelper::IsSceneVisible(ClassObject const&)
EdSceneHelper::IsEditable(short)
EdSceneHelper::GetSceneName(ClassObject const&, EdString&)
EdSceneHelper::GetFilename(ClassObject const&, EdString&)
EdSceneHelper::GetSceneFile(ClassObject const&)
EdRefSceneResource::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSceneResource::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSceneParams::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSceneParams::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
NuFrameworkResource::GetTypeString() const
NuFrameworkResource::GetSubfileCount() const
NuFrameworkResource::GetFullFilename(EdString&, unsigned char) const
NuFrameworkResource::GetSubFileName(unsigned char, char*, unsigned long) const
NuFrameworkResource::OnStateChanged(EDSCENE_FLAGS) const
NuFrameworkResource::IsEditing() const
NuFrameworkResource::SetEditing(bool)
NuFrameworkResource::MarkForDeleteRecursive()
NuFrameworkResource::CreateHackyCutSceneInstanceFrameworkResource(NuFrameworkResourceInfo const&)
NuFrameworkResource::IsUnloading(bool)
NuFrameworkResource::IsUnloading() const
NuFrameworkResource::AddChild(NuFrameworkResourceHndl)
NuFrameworkResourceHndl::NuFrameworkResourceHndl()
NuFrameworkResourceHndl::NuFrameworkResourceHndl(ResourceHndl const&)
NuHashMap<SceneMapKey, NuFrameworkResource*>::Insert(SceneMapKey const&, NuFrameworkResource* const&)
NuHashMap<SceneMapKey, NuFrameworkResource*>::Erase(SceneMapKey const&)
EdSceneHelper::GetEdScenes(NuList<NuFrameworkResource*>&)
EdSceneHelper::GetNonTempLedId(short)
SceneManager::SceneManager()
SceneManager::~SceneManager()
SceneManager::~SceneManager()
SceneManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
SceneManager::SetRenderingPaused(int)
SceneManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
SceneManager::EventNotify(Event&, NuEventData&)
SceneManager::RebuildResourceHashmapForFixups(StreamingLevel*, NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>&)
NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>::~NuHashMap()
SceneManager::RegisterActiveAPIScenes()
NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>::Insert(NuDynamicStringT<true> const&, NuFrameworkResource* const&)
SceneManager::AddChildScenesToResourceHashmap(NuFrameworkResource*, NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>&)
EdFixedArray<EdLayer, 16u, unsigned short>::~EdFixedArray()
EdLayer::AddEdLayer(char const*, bool, bool)
EdLayer::GetEdLayerArray()
EdLayer::SetLayerName(int, char const*)
EdLayer::SetName(char const*)
EdLayer::SetLayerActive(int, bool)
EdLayer::SetLayerPhysicsActiveIfNotVisible(int, bool)
EdLayer::RemoveEdLayer(int)
EdLayer::GetEdLayer(char const*)
EdLayer::GetEdLayer(int)
EdLayer::CheckEdLayer(int)
NuFrameworkResourceHndlList::ClearResources()
NuFrameworkResourceType::~NuFrameworkResourceType()
EdRefSceneResource::~EdRefSceneResource()
EdRefSceneParams::~EdRefSceneParams()
EdSceneHelper::~EdSceneHelper()
EdSceneHelper::~EdSceneHelper()
FileResource::GetHash() const
NuFrameworkResource::GetName() const
SceneManager::GetManagerName() const
NuVector<EdFileDesc*>::Reserve(unsigned int, bool)
PostLoadEventData::~PostLoadEventData()
FrameworkEventDestroyData::~FrameworkEventDestroyData()
FrameworkEventAddSceneData::~FrameworkEventAddSceneData()
FrameworkEventRemoveSceneData::~FrameworkEventRemoveSceneData()
FrameworkEventDataSceneVisibility::~FrameworkEventDataSceneVisibility()
NuHashMap<SceneMapKey, NuFrameworkResource*>::Clear()
ClassManagerAccessor<PartsManager>::GetFromCreate(ILevelContainer const&)
NuListFind<NuHashMapNode<SceneMapKey, NuFrameworkResource*>, NuListNode<NuHashMapNode<SceneMapKey, NuFrameworkResource*> > >::Find(NuListNode<NuHashMapNode<SceneMapKey, NuFrameworkResource*> >*, NuListNode<NuHashMapNode<SceneMapKey, NuFrameworkResource*> >*, NuHashMapNode<SceneMapKey, NuFrameworkResource*> const&)
NuList<NuHashMapNode<NuDynamicStringT<true>, NuFrameworkResource*> >::DeleteNode(NuListNode<NuHashMapNode<NuDynamicStringT<true>, NuFrameworkResource*> >*)
EdFixedArray<EdLayer, 16u, unsigned short>::~EdFixedArray()
EdFixedArray<EdLayer, 16u, unsigned short>::GetAllocSize() const
EdFixedArray<EdLayer, 16u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<EdLayer, 16u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<EdLayer, 16u, unsigned short>::GetData()
EdFixedArray<EdLayer, 16u, unsigned short>::GetData() const
EdArray<EdLayer>::GetGrowBy() const
EdArrayWithSize<EdLayer, unsigned short>::DoGetSize() const
EdArrayWithSize<EdLayer, unsigned short>::DoSetSize(unsigned int)
EdArray<EdLayer>::SetSize(unsigned int, bool)
EdArray<EdLayer>::RemoveAt(unsigned int)
SceneNodeManager::SceneNodeManager(LevelContainer&)
SceneNodeManager::RegisterProcessing()
SceneNodeManager::RegisterRendering()
SceneNodeManager::~SceneNodeManager()
SceneNodeManager::DestroyNodeWithNoNotifications(SceneNode*&)
SceneNodeManager::~SceneNodeManager()
SceneNode::RemoveChild(SceneNode&, EDREG_FLAGS, bool)
SceneNode::UnlinkObject(bool, PlaceableBase*, EDREG_FLAGS)
SceneNode::DestroySceneNodeHierarchy(SceneNode*, NuVector<PlaceableBase*>&)
SceneNodeManager::EventNotify(Event&, NuEventData&)
SceneNodeHelper::StartAutomaticPlaybackNodes(SceneNode*)
SceneNodeManager::NodeBelongsToManager(SceneNode*)
SceneNode::GetLocalRoot()
SceneNodeHelper::DestroySceneNodesForPlaceableBase(SceneNode*, PlaceableBase*, EDREG_FLAGS, EdRegContext*)
SceneNodeHelper::DestroyNodeAndChildObjects(SceneNode*, EDREG_FLAGS, EdRegContext*, PlaceableBase*)
SceneNodeManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
SceneNodeHelper::UpdateMatrices(SceneNode*, bool, bool)
SceneNodeManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
SceneNode::GetWorldMtx() const
SceneNode::SetWorldMtx(VuMtx&, bool)
SceneNode::RecalculateNode()
SceneNodeManager::GetNumObjects(void*)
SceneNodeHelper::GetManNumObjects(ClassManager*, void*)
SceneNodeHelper::GetManNextObject(ClassManager*, void*, void*)
SceneNodeManager::GetNextObject(void*, void*)
SceneNodeManager::FindSceneNode(char const*, short, SceneNode*)
SceneNodeManager::FindNode(SceneNode*, SceneNode*)
SceneNodeHelper::AddBaseObject(EdRegContext*, ClassObject&)
SceneNode::AddChild(SceneNode&, EDREG_FLAGS, bool)
SceneNodeHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&, EDREG_FLAGS)
SceneNodeHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
SceneNode::NotifyAboutToDeparent()
SceneNodeHelper::CloneSceneNodeHierarchy(SceneNode*, EdRegContext&, SceneNode*)
SceneNodeHelper::SetNodeToSave(SceneNode*, bool)
SceneNode::GetAttributes() const
SceneNodeHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
SceneNode::SetClassObject(ClassObject const&, bool)
SceneNode::FixupJointOrLocatorIds()
SceneNodeHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
SceneNodeHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
SceneNodeHelper::DestroyNode(SceneNode*&, bool, bool, PlaceableBase*)
SceneNodeHelper::CanLinkParentChild(ClassObject const&, ClassObject const&)
SceneNodeHelper::CreateParentChild(ClassObject const&, ClassObject const&, EDREG_FLAGS, bool)
SceneNodeHelper::DeParentObject(PlaceableBase&, bool*)
SceneNode::Deparent(bool&)
SceneNodeHelper::DeParentNode(SceneNode*&)
SceneNodeHelper::ResetTotalFrameTime()
SceneNodeHelper::ApplyParentTranform(SceneNode*, SceneNode*, bool)
SceneNodeHelper::ApplyParentVisibility(SceneNode*, SceneNode*)
SceneNodeHelper::ApplyParentLayer(SceneNode*, SceneNode*)
SceneNode::GetParentWorldMtx() const
SceneNodeHelper::SceneNodeHelper()
SceneNodeHelper::Initialise()
SceneNodeHelper::EdRefPlaceableBasePtr::EdRefPlaceableBasePtr(char const*, void**, long, EDATTR_FLAGS, EdRefSmartPtrBase::FixupError::T, EdControl*)
SceneNodeHelper::EdRefPlaceableBasePtr::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SceneNode::SetPlaceableBackPtr()
SceneNodeHelper::EdRefPlaceableBasePtr::ResetSmartPtr(void*)
SceneNodeHelper::GetParentObject(void*)
SceneNodeHelper::GetParentClass(void*)
SceneNodeHelper::GetObjectPrams(void*, void*, int)
SceneNode::GetClassObjectName() const
SceneNodeHelper::AllowSlowSmartPtrFixup(EdClass*) const
FrameworkEventSceneNodePreDeParentData::FrameworkEventSceneNodePreDeParentData(SceneNode*, SceneNode*)
EdRefSceneNode::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSceneNode::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SceneNode::SetFaceOn(bool)
SceneNode::SetFaceY(bool)
SceneNode::SceneNode(EdRegContext&)
SceneNode::~SceneNode()
non-virtual thunk to SceneNode::~SceneNode()
SceneNode::~SceneNode()
non-virtual thunk to SceneNode::~SceneNode()
SceneNode::GetLedFile() const
SceneNode::SetLedFile(short)
SceneNode::GetName() const
SceneNode::SetName(char const*)
SceneNode::GetClass() const
SceneNode::Activate()
SceneNode::Deactivate()
SceneNode::IsActive() const
SceneNode::GetNuUniqueObjectBase()
SceneNode::GetNuUniqueName() const
non-virtual thunk to SceneNode::GetNuUniqueName() const
SceneNode::GetNuUniqueNameHash() const
non-virtual thunk to SceneNode::GetNuUniqueNameHash() const
SceneNode::SetAttributes(EDOBJATTR_FLAGS)
SceneNode::CheckAttributes(EDOBJATTR_FLAGS)
SceneNode::SetTransform(VuMtx const&)
SceneNode::GetTransform(VuMtx&) const
SceneNode::GetSceneNodeManager() const
CMList<SceneNode*>::Append(SceneNode* const&, CMList<SceneNode*>::ListLink*)
SceneNode::SetInheritParentVisibility(bool)
SceneNode::GetNumDescendents() const
ClassObject::SetModified(...)
SceneNode::IsValid() const
SceneNode::MarkAsUpdateNeeded()
SceneNode::IsLinkableName(char const*)
SceneNode::ClearName()
CharDef::FindJointId(char const*) const
SceneNode::LinkToObject(PlaceableBase*, bool)
SceneNode::GetChildIndex()
SceneNode::MoveToBefore(SceneNode*)
SceneNode::MoveToAfter(SceneNode*)
SceneNode::HasLinkableName(ClassObject const&)
SceneNode::EvaluateWorldMtx() const
SceneNode::UpdateParentsOriginalInverse()
SceneNode::TransferChildrenFromNode(SceneNode*)
SceneNode::MarkAsDirty()
EdRefSceneNode::~EdRefSceneNode()
SceneNodeManager::GetManagerName() const
SceneNodeManager::GetClass(int)
SceneNodeManager::GetNumClasses()
SceneNodeHelper::~SceneNodeHelper()
SceneNodeHelper::EdRefPlaceableBasePtr::~EdRefPlaceableBasePtr()
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::FixUpToNuUniqueObjAccessor(void*, NuUniqueObjectAccessor*)
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::GetFixupSearchStr(void*)
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::WriteFixupData(void*, char const*)
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::LateFixup(void*, StreamingLevel*, NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>*)
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::GetNuUniqueObjAccessorFromPointee(void*) const
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::GetPointee(void*)
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::GetPointeeAsNuUniqueObjectAccessor(void*) const
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::GetPointeeAsBaseEdClass(void*)
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::GetPointeeEdClass(void*)
EdRefSmartPtr<PlaceableBase, PlaceableBase, NuFatSmartPtr<PlaceableBase> >::ResetToPreFixup(void*)
FrameworkEventSceneNodePreDeParentData::~FrameworkEventSceneNodePreDeParentData()
FrameworkEventSceneNodeParentedData::~FrameworkEventSceneNodeParentedData()
FrameworkEventSceneNodeLinkData::~FrameworkEventSceneNodeLinkData()
ClassManagerAccessor<SceneNodeManager>::GetFromCreate(ILevelContainer const&)
SceneObjectKey::SceneObjectKey()
SceneObjectKey::SceneObjectKey(NuString, short, SceneObject*)
SceneObjectKey::Hash() const
SceneObjectKey::operator==(SceneObjectKey const&) const
SceneObjectKeySearchPredicate::SceneObjectKeySearchPredicate(bool, SceneObject*)
SceneObjectKeySearchPredicate::operator()(SceneObjectKey const&, SceneObjectKey const&)
SceneObject::SceneObject(EdRegContext&, nuhspecial_s&)
SceneObject::InitCommonDefaults()
SceneObject::BindToSpecial(EdRegContext&)
SceneObject::SceneObject(EdRegContext&, SceneObject&)
SceneObject::SpecialExists() const
SceneObject::~SceneObject()
SceneObject::SetAIAvoidable(AIAvoidable*)
SceneObject::Clear()
non-virtual thunk to SceneObject::~SceneObject()
SceneObject::~SceneObject()
non-virtual thunk to SceneObject::~SceneObject()
SceneObject::SceneObject(SceneObject const&)
SceneObject::operator=(SceneObject const&)
SceneObject::RemoveFromCompound()
CompoundSceneObject::RemoveObject(SceneObject*)
SceneObject::GetWorldAABB(NuVector3Base*, NuVector3Base*, NuMatrixBase*) const
SceneObject::CleanupGSCReferences(NuSmartPtr<NuScene, true>, NuRenderNode*)
SceneObject::Destroy()
non-virtual thunk to SceneObject::Destroy()
SceneObject::GetAnimationInstance()
SceneObject::SetLayer(char)
SceneObject::UpdateRenderObjectVisibility()
SceneObject::GetSceneName() const
SceneObject::GetSpecialName() const
SceneObject::GetPlaybackSpeed() const
SceneObject::GetName() const
SceneObject::SetName(char const*)
SceneObjectManager::ContainsObject(SceneObject&)
SceneObjectManager::RemoveObject(SceneObject*)
SceneObjectManager::AddObject(SceneObject*)
SceneObject::GetNuUniqueName() const
non-virtual thunk to SceneObject::GetNuUniqueName() const
SceneObject::GetNuUniqueNameHash() const
non-virtual thunk to SceneObject::GetNuUniqueNameHash() const
SceneObject::GetFlags()
SceneObject::GetNumMtls() const
SceneObject::GetMtl(int) const
SceneObject::SetAlpha(float)
SceneObject::SetDepthSqrOverride(float)
SceneObject::SetVisibility(int)
SceneObject::GetCollision() const
SceneObject::SetCollision(int)
SceneObject::GetRadius() const
SceneObject::GetAppData()
SceneObject::SetAppData(GameAppData*)
SceneObject::GetClass() const
SceneObject::GetTransform(VuMtx&) const
SceneObject::SetTransform(VuMtx const&)
CompoundSceneObject::Invalidate()
SceneObject::SetKeyframe(VuMtx const&, float, int)
SceneObject::PlayAnimation(bool, apcPlayDirection)
SceneObject::GetPosition(VuVec&) const
SceneObject::SetPosition(VuVec const&)
SceneObject::ClearPrevPosition()
SceneObject::Render()
SceneObject::Render(VuMtx const*, unsigned int, float)
SceneObject::RenderAt(VuMtx const&) const
SceneObject::RenderAlpha(VuMtx const*, float) const
SceneObject::SetUVOverrides(int, NuUVOverrides const*)
SceneObject::SetMaterialMap(int, NuSmartPtr<NuMtl, true>*)
SceneObject::GetGScene()
SceneObject::SetAlbedoTint(NUCOLOUR3 const&)
SceneObject::SetLightingGlow(NuColour const&)
SceneObject::GetBounds(NUVEC&, NUVEC&) const
SceneObject::GetRadius(NUVEC&, float&)
SceneObject::GetOriginRadius()
SceneObject::SetDrawDistance(float)
SceneObject::GetPreAnimMtx(VuMtx&) const
SceneObject::GetGSCPlayControl() const
SceneObject::GetLODCount() const
SceneObject::SetPreAnimMtx(VuMtx const&)
SceneObject::SetPreAnimMtxKeyFrame(VuMtx const&, float)
SceneObject::GetSceneObject(ClassObject const&)
SceneObject::GetVisibility() const
SceneObject::GetAlpha() const
EdRefSceneObject::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSceneObject::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CompoundSceneObject::CompoundSceneObject(EdRegContext&)
CompoundSceneObject::~CompoundSceneObject()
non-virtual thunk to CompoundSceneObject::~CompoundSceneObject()
CompoundSceneObject::~CompoundSceneObject()
non-virtual thunk to CompoundSceneObject::~CompoundSceneObject()
CompoundSceneObject::CompoundSceneObject(CompoundSceneObject const&)
CompoundSceneObject::operator=(CompoundSceneObject const&)
CompoundSceneObject::GetVisibility() const
CompoundSceneObject::SetVisibility(int)
CompoundSceneObject::GetTransform(VuMtx&) const
CompoundSceneObject::SetTransform(VuMtx const&)
CompoundSceneObject::GetPosition(VuVec&) const
CompoundSceneObject::SetPosition(VuVec const&)
CompoundSceneObject::GetRadius() const
CompoundSceneObject::Render()
CompoundSceneObject::GetClass() const
CompoundSceneObject::AddObject(SceneObject*)
CompoundSceneObject::GetBoundingBox(NuVector3Base&, NuVector3Base&, NuMatrixBase&)
CompoundSceneObject::SetPerPixelFade(NuPerPixelFadePacket&)
SceneObjectContainer::SceneObjectContainer(EdClass*)
SceneObjectContainer::CleanupGSCReferences(NuSmartPtr<NuScene, true> const&, NuRenderNode*)
SceneObjectContainer::RemoveScene(EdRegContext&)
SceneObjectContainer::ClearAllObjects()
SceneObjectContainer::GetNextObject(SceneObject*)
NuEHashMap<SceneObjectKey, SceneObject>::Find(SceneObjectKey const&) const
SceneObjectContainer::GetMap()
SceneObjectContainer::AddObject(SceneObject&)
SceneObjectContainer::RemoveObject(SceneObject&)
NuEHashMap<SceneObjectKey, SceneObject>::Unlink(SceneObjectKey const&)
SceneObjectContainer::ContainsObject(SceneObject&, bool)
NuIterator<SceneObject, NuEHashMapIteratorBase<SceneObjectKey, SceneObject> > NuEHashMap<SceneObjectKey, SceneObject>::Find<SceneObjectKeySearchPredicate>(SceneObjectKey const&, SceneObjectKeySearchPredicate&) const
SceneObjectContainer::FindObjectByNameAndLed(char const*, short, void*, bool)
SceneObjectContainer::FindObjectByNameAndScene(char const*, NuSmartPtr<NuScene, true> const&, bool)
SceneObjectContainer::Count()
SceneObjectManager::SceneObjectManager(LevelContainer&)
SceneObjectManager::RegisterProcessing()
SceneObjectManager::RegisterRendering()
SceneObjectManager::~SceneObjectManager()
SceneObjectManager::~SceneObjectManager()
SceneObjectManager::OnSceneVisibilityChanged()
SceneObjectManager::OnLayerVisibilityChanged()
SceneObjectManager::GetObjects()
CreateSceneObjectManager(LevelContainer&)
SceneObjectManager::AddScene(EdRegContext&)
SceneObjectManager::RemoveScene(EdRegContext&)
SceneObjectManager::CleanupGSCReferences(NuSmartPtr<NuScene, true> const&)
SceneObjectManager::EventNotify(Event&, NuEventData&)
SceneObjectManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
SceneObjectManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
SceneObjectManager::RenderObjects(int)
SceneObjectManager::GetNumObjects(void*)
SceneObjectManager::GetNextObject(void*, void*)
SceneObjectManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
SceneObjectManager::SupportsLevelContainerFindObject(EdClass*)
SceneObjectManager::LevelContainerFindObject(char const*, EdClass*, short, void*)
SceneObjectManager::FindObject(char const*, void*, short, bool)
SceneObjectManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
SceneObjectManager::FindObject(nuhspecial_s const&)
SceneObjectManager::FindObject(char const*, bool)
SceneObjectManager::FindObject(char const*, NuSmartPtr<NuScene, true> const&, bool)
SceneObjectManager::GetClass(int)
SceneObjectHelper::SceneObjectHelper()
SceneObjectHelper::Initialise()
SceneObjectHelper::FindObject(nuhspecial_s const&)
SceneObjectHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
SceneObjectHelper::SetSceneFilter(char*)
SceneObjectHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to SceneObjectHelper::EventNotify(Event&, NuEventData&)
EdRefSceneObject::~EdRefSceneObject()
SceneObjectManager::GetManagerName() const
SceneObjectManager::GetNumClasses()
SceneObjectHelper::~SceneObjectHelper()
SceneObjectHelper::~SceneObjectHelper()
non-virtual thunk to SceneObjectHelper::~SceneObjectHelper()
non-virtual thunk to SceneObjectHelper::~SceneObjectHelper()
ClassManagerAccessor<SceneObjectManager>::GetFromCreate(ILevelContainer const&)
FlowHelper::FlowHelper()
FlowHelper::Initialise()
FlowHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
FlowHelper::GetManNumObjects(ClassManager*, void*)
FlowHelper::GetManNextObject(ClassManager*, void*, void*)
FlowHelper::~FlowHelper()
FlowLink::FlowLink()
FlowLink::SetFlowObject(FlowObject*)
FlowLink::FlowLink(FlowObject*)
FlowLink::~FlowLink()
FlowLink::~FlowLink()
FlowLink::SetFixupIx(short)
FlowLink::IsChildLink() const
FlowLink::SetAsChildLink()
FlowLink::SetOutputIx(unsigned char)
FlowLink::GetOutputIx() const
FlowLink::GetFixupIx() const
CSListHeader<FlowManager::FlowManagerClass>::~CSListHeader()
FlowManager::FlowManager(LevelContainer&)
FlowManager::RegisterProcessing()
FlowManager::~FlowManager()
FlowManager::~FlowManager()
FlowManager::InitialiseHelpers()
FlowManager::RegisterClass(EdClass*)
FlowManager::GetClass(int)
FlowManager::GetNumClasses()
FlowManager::GetNumFlows(EdClass*)
FlowManager::GetNextFlow(EdClass*, Flow*)
FlowManager::FindFlow(char*)
FlowManager::EventNotify(Event&, NuEventData&)
FlowManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
FlowManager::GetManagerName() const
FlowManager::GetNumObjects(void*)
FlowManager::GetNextObject(void*, void*)
FlowManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowObject::FlowObject(short)
FlowObject::~FlowObject()
FlowObject::~FlowObject()
FlowObject::Loop_CountLoopingInputsEx(FlowObject*, FlowObject*, int, unsigned char)
FlowObject::ResetForLoopEx(Flow*, FlowObject*, FlowObject*, int)
FlowObject::Loop_CountLoopingInputs(unsigned char)
FlowObject::IsChildOf(FlowObject*)
FlowObject::IsParentOf(FlowObject*)
FlowObject::ProcessFlowBox(Flow*, unsigned char)
FlowObject::CheckForBoxReverse(Flow*)
FlowObject::CheckIfParentsFinished(Flow*)
FlowObject::GetNextLoopChecksum()
FlowObject::IsEmpty()
FlowObject::SetTriggeredByPlayerId(MechCharacter*)
FlowObject::Process(Flow*, unsigned char)
FlowObject::CheckOutput(Flow*, unsigned char)
FlowObject::GetNumericalOutput(Flow*, unsigned char)
FlowObjectHelper::Initialise()
FlowObjectHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
FlowObjectHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectHelper::GetParentObject(ClassObject const&)
FlowObjectHelper::GetParent(FlowTarget&)
FlowObjectHelper::~FlowObjectHelper()
FlowObjectHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
EdRefFlowObject::~EdRefFlowObject()
EdRefFlowObject::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefFlowObject::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowObjectPassThroughHelper::Initialise()
FlowObjectPassThroughHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectPassThroughHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectPassThroughHelper::GetParentObject(ClassObject const&)
FlowObjectPassThroughHelper::~FlowObjectPassThroughHelper()
GetDrawScale(VuVec const&)
GetControlPointDrawScale(float&, float&, VuVec const*)
SplinePointArray::GetNumPoints() const
SplinePointArray::GetLength() const
SplinePointArray::GetPoint(int, VuVec&) const
SplinePointArray::GetPoint(int)
SplinePointArray::GetPointPos(float, VuVec&) const
SplinePointArray::GetPoint(int, SplinePoint&) const
SplinePointArray::AddPoint(VuVec const&, int, float)
SplinePointArray::Clear()
SplinePointArray::Draw(int, int, float) const
SplineKnot::SplineKnot(SplineKnot const&, SplineObject*)
SplineKnot::~SplineKnot()
SplineKnot::~SplineKnot()
SplineKnot::SetTransform(VuMtx const&)
SplineKnot::SetPosition(VuVec const&)
SplineKnot::GetClass() const
SplineKnot::GetLedFile() const
SplineKnot::SetControlPointIn(VuVec const&)
SplineKnot::SetControlPointOut(VuVec const&)
SplineKnot::SetLockedTangents(bool)
SplineKnot::GetLockedTangents() const
SplineKnot::Smooth()
SplineKnot::LocateAtHead()
SplineKnot::LocateAtTail()
SplineKnot::LocateReplace(SplineKnot*)
SplineKnot::CloneKnot(SplineObject*) const
SplineKnot::CopyKnot(SplineKnot const*)
SplineKnotList::GetPoint(int, VuVec&) const
SplineKnotList::GetPoints(int, VuVec*) const
EdRefKnot::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefKnot::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
KnotHelper::Initialise(SplineHelper*)
KnotHelper::GetNumObjects(void*)
KnotHelper::GetNextObject(void*, void*)
KnotHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
KnotHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
KnotHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
KnotHelper::GetParentClass(void*)
KnotHelper::GetObjectPrams(void*, void*, int)
SplineKnot::SetLedFile(short)
SplineKnot::GetName() const
SplineKnot::SetName(char const*)
SplineKnot::GetTransform(VuMtx&) const
SplineKnot::GetPosition(VuVec&) const
SplineKnot::SetKeyframe(VuMtx const&, float, int)
SplineKnot::Activate()
SplineKnot::Deactivate()
SplineKnot::IsActive() const
SplineKnot::GetPosition() const
SplineKnot::GetUseControlPointsFromParams()
EdRefKnot::~EdRefKnot()
KnotHelper::~KnotHelper()
KnotHelper::NewKnot()
KnotHelper::DeleteKnot(SplineKnot*)
non-virtual thunk to KnotHelper::~KnotHelper()
non-virtual thunk to KnotHelper::~KnotHelper()
EdArray<SplinePoint>::SetSize(unsigned int, bool)
SplineObject::SplineObject(EdRegContext&, void*, int)
SplineObject::~SplineObject()
non-virtual thunk to SplineObject::~SplineObject()
SplineObject::~SplineObject()
non-virtual thunk to SplineObject::~SplineObject()
SplineObject::GetClass() const
SplineObject::ReverseKnots()
SplineObject::ReorderKnots()
SplineObject::SmoothKnots()
SplineObject::IsBezier() const
SplineObject::GetLength()
SplineObject::RebuildSpline(bool)
SplineObject::CalcAveragePointPos()
SplineObject::CalcAverageKnotPos()
SplineObject::InsideSpline(VuVec const&) const
SplineObject::ComputeSplinePoint(float, VuVec&, SplineKnot**, float*, VuMtx*) const
SplineObject::ComputeBezierSplinePoint(float, VuVec&, SplineKnot**, float*, VuMtx*) const
SplineObject::ComputeLinearSplinePoint(float, VuVec&, SplineKnot**, float*, VuMtx*) const
SplineObject::ComputeBezierSplineSegmentMatrix(VuMtx&, VuVec*, SplineKnot*, SplineKnot*, float)
SplineObject::SetInterpPoint(float)
SplineObject::SetDirty()
SplineObject::SetHeightOffset(float)
SplineObject::GetHeightOffset() const
SplineObject::SetSplineType(SplineObject::SplineType)
SplineObject::SetSceneSpline(NuSpline*)
SplineObject::SetPointGenerationParam(float)
SplineObject::SetClosed(bool)
SplineObject::SetAveragePosition(VuMtx&)
SplineObject::GetTransform(VuMtx&) const
SplineObject::SetTransform(VuMtx const&)
SplineObject::SetName(char const*)
SplineObject::IsPointInsideAABB(VuVec&, float) const
SplineObject::AABBInsideAABB(VuVec const&, VuVec const&) const
SplineObject::AABBInsideAABBXZ(VuVec const&, VuVec const&) const
SplineObject::CreateFromNuSpline(NuSpline const*)
SplineObject::GetNuSpline()
CreateSplineManagerSplineObject(LevelContainer&)
CreateSplineManagerKrawlieAreaSpline(LevelContainer&)
SplineObject::Initialise()
SplineHelper::Initialise(KnotHelper*)
EdRefSpline::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSpline::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SplineHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to SplineHelper::EventNotify(Event&, NuEventData&)
SplineHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
SplineHelper::FindInLed(char*, int)
SplineHelper::Find(char const*)
SplineHelper::CreateFromNuSpline(NuSpline const*, int)
SplineHelper::Process(void*, float)
SplineManager::SplineManager(LevelContainer&, int)
SplineManager::RegisterProcessing()
SplineManager::~SplineManager()
SplineManager::GetNumObjects(void*)
SplineManager::GetNextObject(void*, void*)
SplineManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
SplineManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
SplineManager::EventNotify(Event&, NuEventData&)
SplineManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
SplineManager::FindSpline(char const*)
SplineHelper::~SplineHelper()
SplineHelper::NewSpline(EdRegContext*, void*, int) const
SplineHelper::DeleteSpline(SplineObject*) const
SplineHelper::GetPrefix()
SplineHelper::GetCategory()
SplineHelper::GetFileExt()
SplineHelper::RegisterSplineData(EdClass*)
non-virtual thunk to SplineHelper::~SplineHelper()
non-virtual thunk to SplineHelper::~SplineHelper()
SplineObject::SetPosition(VuVec const&)
EdRefSpline::~EdRefSpline()
EdNuArray<SplinePoint, unsigned short>::~EdNuArray()
EdNuArray<SplinePoint, unsigned short>::~EdNuArray()
EdNuArray<SplinePoint, unsigned short>::GetAllocSize() const
EdNuArray<SplinePoint, unsigned short>::GetMaxAllocSize() const
EdNuArray<SplinePoint, unsigned short>::SetAllocSize(unsigned int, bool)
EdNuArray<SplinePoint, unsigned short>::GetData()
EdNuArray<SplinePoint, unsigned short>::GetData() const
EdArray<SplinePoint>::GetGrowBy() const
EdArrayWithSize<SplinePoint, unsigned short>::DoGetSize() const
EdArrayWithSize<SplinePoint, unsigned short>::DoSetSize(unsigned int)
SplineManager::~SplineManager()
SplineManagerT<SplineObject>::~SplineManagerT()
SplineManagerT<SplineObject>::GetManagerName() const
SplineManagerT<SplineObject>::GetClass(int)
SplineManagerT<SplineObject>::GetNumClasses()
SplineManagerT<SplineObject>::NewSpline(EdRegContext*, void*, int) const
SplineManagerT<SplineObject>::DeleteSpline(SplineObject*) const
SplineManagerT<SplineObject>::GetSplineHelper() const
SplineManagerT<MechKrawlieAreaSpline>::~SplineManagerT()
SplineManagerT<MechKrawlieAreaSpline>::GetManagerName() const
SplineManagerT<MechKrawlieAreaSpline>::GetClass(int)
SplineManagerT<MechKrawlieAreaSpline>::GetNumClasses()
SplineManagerT<MechKrawlieAreaSpline>::NewSpline(EdRegContext*, void*, int) const
SplineManagerT<MechKrawlieAreaSpline>::DeleteSpline(SplineObject*) const
SplineManagerT<MechKrawlieAreaSpline>::GetSplineHelper() const
SplineHelperT<SplineObject>::~SplineHelperT()
SplineHelperT<SplineObject>::NewSpline(EdRegContext*, void*, int) const
SplineHelperT<SplineObject>::DeleteSpline(SplineObject*) const
SplineHelperT<SplineObject>::GetManagerID() const
non-virtual thunk to SplineHelperT<SplineObject>::~SplineHelperT()
non-virtual thunk to SplineHelperT<SplineObject>::~SplineHelperT()
EdSplineUtil::BezierLineSplit(VuVec&, VuVec&, VuVec&, VuVec&, VuVec&, VuVec&, VuVec&, VuVec&, VuVec const&, VuVec const&, VuVec const&, VuVec const&, float)
EdSplineUtil::BezierLineLength(VuVec const&, VuVec const&, VuVec const&, VuVec const&)
EdSplineUtil::BezierLineLength(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float)
EdSplineUtil::BezierLineEvalAtDistance(VuVec&, VuVec const&, VuVec const&, VuVec const&, VuVec const&, float)
EdSplineUtil::BezierLineEval(VuVec&, VuVec const&, VuVec const&, VuVec const&, VuVec const&, float)
EdSplineUtil::BezierLineTangent(VuVec&, VuVec const&, VuVec const&, VuVec const&, VuVec const&, float)
EdSplineUtil::BezierSplineGenPointsBySmoothness(VuVec&, VuVec&, VuVec&, VuVec&, float, void (*)(VuVec const&, VuVec const&, int, float, float, void*), float, void*)
EdSplineUtil::BezierSplineLength(SplineKnotList const&, bool)
EdSplineUtil::BezierSplineGenPointsByDistance(SplineKnotList const&, bool, float, void (*)(VuVec const&, VuVec const&, int, float, float, void*), float, void*, int)
EdSplineUtil::BezierSplineGenPointsBySmoothness(SplineKnotList const&, bool, float, void (*)(VuVec const&, VuVec const&, int, float, float, void*), float, void*)
EdSplineUtil::BezierSplineGenPointsByDistanceStretch(SplineKnotList const&, bool, float, void (*)(VuVec const&, VuVec const&, int, float, float, void*), float, void*)
EdSplineUtil::BezierSplineGenPointsByCount(SplineKnotList const&, bool, int, void (*)(VuVec const&, VuVec const&, int, float, float, void*), float, void*)
EdSplineUtil::BezierRebuildSpline(SplinePointArray*, SplineObject const&)
EdSplineUtil::LinearSplineGenPointsByKnotPositions(SplineKnotList const&, bool, void (*)(VuVec const&, VuVec const&, int, float, float, void*), float, void*)
EdSplineUtil::GetClosestPointOnBezierSplineSegment(VuVec const&, SplineKnot&, SplineKnot&, float, float, VuVec&, VuVec&, float&, VuVec&, bool)
EdSplineUtil::GetClosestPointOnBezierSpline(SplineObject&, VuVec const&, VuVec&, float&, bool, float*, float)
EdSplineUtil::GetClosestPointOnLinearSpline(SplineObject&, VuVec const&, VuVec&, float&, bool, float*, float)
EdSplineUtil::GetClosestPointOnSpline(SplineObject&, VuVec const&, VuVec&, float&, bool, float*, float)
EdSplineUtil::LinearLineLength(VuVec const&, VuVec const&)
EdSplineUtil::LinearSplineLength(SplineKnotList const&, bool)
EdSplineUtil::LinearSplineGenPointsByDistance(SplineKnotList const&, bool, float, void (*)(VuVec const&, VuVec const&, int, float, float, void*), float, void*, int)
EdSplineUtil::LinearSplineGenPointsByDistanceStretch(SplineKnotList const&, bool, float, void (*)(VuVec const&, VuVec const&, int, float, float, void*), float, void*)
EdSplineUtil::LinearSplineGenPointsByCount(SplineKnotList const&, bool, int, void (*)(VuVec const&, VuVec const&, int, float, float, void*), float, void*)
EdSplineUtil::LinearRebuildSpline(SplinePointArray*, SplineObject const&)
OverrideBezierErrorScoped::OverrideBezierErrorScoped(float, int)
OverrideBezierErrorScoped::~OverrideBezierErrorScoped()
ClassEditor::ClassEditor()
ClassEditor::Initialise()
ClassEditor::Shutdown()
ClassEditor::Serialise(EdSerialiseParams&)
ClassEditor::Serialise(ClassObjectList&, EdComponent const*, ClassObject const&, EdSerialiseParams&)
ClassEditor::IsUniqueName(ClassObject const&, char const*) const
ClassEditor::MakeUniqueName(ClassObject const&, char const*, char*, int) const
ClassEditor::MakeUniqueNameForObject(ClassObject&, bool) const
ClassEditor::EventNotify(Event&, NuEventData&)
ClassEditor::~ClassEditor()
ClassObject::ClassObject()
ClassObject::ClassObject(EdClass*, void*, EdRef*, EdClass*, void*)
ClassObject::ClassObject(EdClassInterface&, void*)
ClassObject::ClassObject(EdComponent const&, void*, ClassObject const&)
ClassObject::Clear()
ClassObject::Set(EdClass*, void*)
ClassObject::IsValid() const
ClassObject::IsRef() const
ClassObject::IsComponent() const
ClassObject::GetComponent() const
ClassObject::SetParentObject(EdComponent const&, ClassObject const&)
ClassObject::ClearParentObject()
ClassObject::GetParentObject() const
ClassObject::FindParentObject() const
ClassObject::ContainsChild(ClassObject const&) const
ClassObject::GetFirstComponentObject(EdComponent const&) const
ClassObject::operator++(int)
ClassObject::ContainsChild(ClassObjectList const&) const
ClassObject::HasSmartPtrTo(ClassObject const&) const
ClassObject::GetObjectReferences(ClassObject*) const
ClassObject::FindComponent(ClassObject, bool) const
ClassObject::UnlinkAndDestroy(EDREG_FLAGS, EdRegContext*, int)
ClassObject::IndependentUnlinkAndDestroy(EDREG_FLAGS, EdRegContext*, int)
ClassObject::Render(EdRenderWindowInfo const&, ObjectSelection) const
ClassObject::Process(float)
ClassObject::GetLedFile(bool) const
ClassObject::SetLedFile(short)
ClassObject::GetLevelContainer() const
ClassObject::IsPlaceableClass() const
ClassObject::IsSortedByComponentIndex() const
ClassObject::IsKindOf(EdClassInterface const&) const
ClassObject::IsKindOf(EdClass const&) const
ClassObject::IsKindOf(EdClassInterface const*) const
ClassObject::IsKindOf(char const*) const
ClassObject::IsPlaceableBaseClass() const
ClassObject::GetPlaceableBase() const
ClassObject::GetPlaceable() const
ClassObject::GetAnimatable() const
ClassObject::GetObjectName(EdString&) const
ClassObject::GetAttributeData(EDATTR_FLAGS, int, void*, int) const
ClassObject::GetName(char*, int) const
ClassObject::GetInvalidName()
ClassObject::GetName(EdString&) const
ClassObject::GetFirstBaseObject(EdClass const&, EdComponent const*) const
ClassObject::GetLastBaseObject(EdClass const&, EdComponent const*) const
ClassObject::GetLastComponentObject(EdComponent const&) const
ClassObject::GetNextObject() const
ClassObject::operator++()
ClassObject::GetPrevObject() const
ClassObject::operator--()
ClassObject::operator--(int)
ClassObject::FixupUnresolvedReferences() const
ClassObject::GetManNextObject(ClassManager&) const
ClassObject::SerialiseOut(EdSerialiseParams&) const
ClassObject::AddComponentObject(EdComponent const&, ClassObject&, EDREG_FLAGS) const
ClassObject::RemoveComponentObject(EdComponent const&, ClassObject&) const
ClassObject::Contains(ClassObject const&)
ClassObject::GetClasses(NuVector<EdClass*>&, bool, bool) const
ClassObject::GetClasses(NuVector<EdClass*>&, NuVector<ClassObject> const&, bool, bool)
ClassObject::HasAttribute(EDATTR_FLAGS) const
ClassObject::SetAttributeData(EDATTR_FLAGS, int, void*, int)
ClassObjectList::ClassObjectList()
ClassObjectList::ClassObjectList(ClassObjectList const&)
ClassObjectList::Add(ClassObject const&)
ClassObjectList::~ClassObjectList()
ClassObjectList::~ClassObjectList()
ClassObjectList::GetAveragePosition(VuVec&) const
ClassObjectList::GetAveragePosition(VuVec&, float&) const
ClassObjectList::IsInList(ClassObject const&, bool, bool) const
ClassObjectList::IsInList(void const*, EdRef const*) const
ClassObjectList::IsInList(EdClass const*, int) const
ClassObjectList::Find(ClassObject const&) const
ClassObjectList::Remove(void*)
ClassObjectList::GetClasses(EdClassList&) const
CMList<EdClass*>::Append(EdClass* const&, CMList<EdClass*>::ListLink*)
ClassObjectList::FilterByClass(EdClass*, ClassObjectList&) const
ClassObjectListEdStack::Remove(ClassObject const&)
ClassObjectListStack::IsInList(ClassObject const&) const
ClassObjectListStack::Remove(void*)
EdStream::EdStream(EdStream::DIRECTION)
EdStream::Open()
EdStream::Close()
EdStream::SetMode(int)
EdStream::SerialiseBits(void*, int, int)
EdStream::EatBits(int)
EdInputStream::SerialiseString(char*, int)
EdInputStream::SerialiseString(char**)
EdInputStream::SerialiseConstString(char const**)
EdInputStream::SerialiseString(char**, int)
EdInputStream::ReadBits(void*, int, int)
EdOutputStream::SerialiseString(char*, int)
EdOutputStream::SerialiseString(char**)
EdOutputStream::SerialiseString(char**, int)
EdOutputStream::SerialiseConstString(char const**)
EdOutputStream::WriteBits(void*, int)
EdFileInputStream::Open(NuFile*)
EdFileInputStream::Close()
EdFileInputStream::Eat(int, int)
EdFileInputStream::SerialiseBuffer(void*, int, int)
EdFileInputStream::SerializeNuClassObject(NuSmartPtr<NuClass, false>&, void*, bool&)
EdFileOutputStream::SerializeNuClassObject(NuSmartPtr<NuClass, false>&, void*, bool&)
EdFileInputStream::BeginBlock(char const*)
EdFileInputStream::EndBlock()
EdFileInputStream::ReadNextByte()
EdFileOutputStream::Open(NuFile*)
EdFileOutputStream::Close()
EdFileOutputStream::Eat(int, int)
EdFileOutputStream::SerialiseBuffer(void*, int, int)
EdFileOutputStream::BeginBlock(char const*)
EdFileOutputStream::EndBlock()
EdFileOutputStream::WriteNextByte(unsigned char)
EdInputStream::~EdInputStream()
EdStream::WriteBits(void*, int)
EdStream::ReadNextByte()
EdStream::WriteNextByte(unsigned char)
EdStream::~EdStream()
EdOutputStream::~EdOutputStream()
EdStream::ReadBits(void*, int, int)
EdFileInputStream::~EdFileInputStream()
EdFileInputStream::~EdFileInputStream()
EdFileOutputStream::~EdFileOutputStream()
EdFileOutputStream::~EdFileOutputStream()
EdStream::~EdStream()
EdRefContextData::EdRefContextData()
EdRef::EdRef(char const*, char const*, long, int, EDATTR_FLAGS, EdControl*, NetReplicatorInst*, unsigned int)
EdRef::EdRef(char const*, char const*, long, int, int, EDATTR_FLAGS, EdControl*, unsigned int)
EdRef::EdRef()
EdRef::ClearName()
EdRef::~EdRef()
EdRef::GetClass(EdRegistry const&) const
EdRef::SetupType()
EdRef::GetRegistry() const
EdRef::ExtractType(char const*, int&, bool&, bool&, int&, int&, EdRegistry&)
EdRef::IsKeyframeable()
EdRef::IsTypeKeyframeable()
EdRef::ExtractIntegerBetweenString(int&, char const*&, char, char)
EdFixedArray<char, 256u, unsigned short>::GetData()
EdFixedArray<char, 256u, unsigned short>::~EdFixedArray()
EdFixedArray<char, 64u, unsigned short>::GetData()
EdFixedArray<char, 64u, unsigned short>::~EdFixedArray()
EdRef::SetName(char const*, bool)
EdRef::GetLabel(ClassObject const&, char*) const
EdRef::Serialise(EdSerialiseParams&)
EdRef::CanSave(EdSerialiseParams&) const
EdRef::SetupMappings(EdRegistry&)
EdRef::GetCount(void*)
EdRef::GetMaxCount(void*)
EdRef::SetCount(void*, unsigned int)
EdRef::InsertMemberByIndex(void*, unsigned int, void*, int)
EdRef::RemoveMemberByIndex(void*, unsigned int)
EdRef::GetMemberObject(void*)
EdRef::GetMemberData(ClassObject, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRef::SetMemberData(ClassObject, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRef::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRef::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRef::GetMemberDataAsType(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRef::GetAttributeData(ClassObject, EDATTR_FLAGS, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRef::SetAttributeData(ClassObject, EDATTR_FLAGS, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRef::CheckType(int)
EdRef::GetSize()
EdStringRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdStringRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdStringRef::AllocString(char const*)
EdStringRef::FreeString(char const*)
EdDynamicStringRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdDynamicStringRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
NuDynamicStringRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
NuDynamicStringRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdHashedStringRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdHashedStringRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
NuClassEdRef::NuClassEdRef(char const*, char const*, long)
NuClassEdRef::GetNuClassName() const
EdStringRef::~EdStringRef()
EdRef::~EdRef()
EdDynamicStringRef::~EdDynamicStringRef()
NuDynamicStringRef::~NuDynamicStringRef()
EdHashedStringRef::~EdHashedStringRef()
NuClassEdRef::~NuClassEdRef()
EdFixedArray<char, 256u, unsigned short>::~EdFixedArray()
EdFixedArray<char, 256u, unsigned short>::GetAllocSize() const
EdFixedArray<char, 256u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<char, 256u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<char, 256u, unsigned short>::GetData() const
EdArray<char>::GetGrowBy() const
EdArrayWithSize<char, unsigned short>::DoGetSize() const
EdArrayWithSize<char, unsigned short>::DoSetSize(unsigned int)
EdArray<char>::SetSize(unsigned int, bool)
EdFixedArray<char, 64u, unsigned short>::~EdFixedArray()
EdFixedArray<char, 64u, unsigned short>::GetAllocSize() const
EdFixedArray<char, 64u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<char, 64u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<char, 64u, unsigned short>::GetData() const
EdMapping::EdMapping(char const*, char const*)
EdMappingList::MapName(char const*) const
EdMappingList::MapNameHash(int) const
EdMappingList::MapNameHash(char const*) const
EdClass::~EdClass()
EdClass::GetClassId() const
EdClass::AddRefMapping(char const*, char const*)
EdClass::MapRef(EdRef const&) const
EdClass::FindTypeRef(int, bool) const
EdClass::AddComponentMapping(char const*, char const*)
EdClass::MapComponent(EdComponent const&) const
EdClass::FindComponent(int) const
EdClass::CanUserCreate() const
EdClass::GetFirstBaseObject() const
EdClass::CanUserDelete() const
EdClass::Serialise(EdSerialiseParams&)
EdClass::AddType(EdRef*, bool)
EdClass::AddComponent(EdComponent*)
EdClass::SetupMappings(EdRegistry&)
EdClass::GetSavedObjects(ClassObject const&, ClassObjectList&, EdClassList*, EdSerialiseParams&, EdComponent const*)
EdClass::GetObjectSavedClasses(void*, EdClassList&, EdSerialiseParams&)
EdClass::SerialiseObjectOut(ClassObject const&, EdSerialiseParams&) const
EdClass::CanSave(EdSerialiseParams&)
EdClass::SerialiseObject(EdClass const&, ClassObject&, EdSerialiseParams&) const
EdClass::SerialiseObjectMembers(EdClass const&, ClassObject&, bool, EdSerialiseParams&) const
EdClass::SetObjectAttribs(void*, EDOBJATTR_FLAGS, bool) const
EdClass::SerialiseObjectComponents(EdClass const&, ClassObject&, EdSerialiseParams&) const
EdClass::GetDataSize(EdRegistry*)
EdClass::CopyObject(void*, void*)
EdClass::GetBaseClassOffset(EdClass const*) const
EdClass::AddBaseType(EdRef*, bool)
EdClass::AddBoolChar(char const*, unsigned int)
EdClass::AddFloat(char const*, unsigned int)
EdClass::AddString(char const*, unsigned int, EdControl*, EDATTR_FLAGS)
EdClass::AddComponent(EdClass*, char const*, EDCOMPONENT_FLAGS)
EdClass::CanSaveObject(void*, EdSerialiseParams&)
EdClass::CheckObjectAttribs(void*, EDOBJATTR_FLAGS) const
EdClass::GetAttributeData(void*, EDATTR_FLAGS, int, void*, int) const
EdClass::FindClassRef(EdClass*, bool)
EdClass::FindClassRefObject(EdClass*, void*, bool, bool) const
EdClass::GetClassRefObjects(void*, ClassObjectList&, bool) const
EdClass::GetClassRefObjects(void*, NuVector<ClassObject>&, bool) const
EdClass::FindTypeRef(char const*, int) const
EdClass::FindTypeRef(EDATTR_FLAGS, int) const
EdClass::FindTypeRefFromName(char const*)
EdClass::FindTypeRefFullName(EdRef*, char*)
EdClass::FindMember(EdMember*, void*, EDATTR_FLAGS, int) const
EdClass::FindComponent(char const*, bool) const
void EdClass::GetComponents<char const*>(char const* const&, NuVector<EdComponent*>&, bool) const
EdClass::FindComponent(EdClass const&, bool) const
void EdClass::GetComponents<EdClass>(EdClass const&, NuVector<EdComponent*>&, bool) const
EdClass::FindObject(char const*, void*, void*)
EdClass::FindFirstObject(char const*) const
EdClass::FindNextObject(char const*, ClassObject) const
EdClass::SetAttributeData(void*, EDATTR_FLAGS, int, void*, int) const
EdClass::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*) const
EdClass::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*) const
EdClass::AddBaseObject(EdRegContext*, ClassObject&) const
EdClass::RemoveBaseObject(EdRegContext*, ClassObject&) const
EdClass::GetNumBaseObjects() const
EdClass::GetNextBaseObject(ClassObject const&) const
EdClass::GetLastBaseObject() const
EdClass::GetPrevBaseObject(ClassObject const&) const
EdClass::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&, EDREG_FLAGS) const
EdClass::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&) const
EdClass::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
EdClass::GetFirstComponentObject(EdComponent const&, ClassObject const&) const
EdClass::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
EdClass::GetLastComponentObject(EdComponent const&, ClassObject const&) const
EdClass::GetPrevComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
EdClass::GetManNumObjects(ClassManager&) const
EdClass::GetManFirstObject(ClassManager&) const
EdClass::GetManNextObject(ClassManager&, ClassObject const&) const
EdClass::SetObjectGuid(ClassObject const&, int) const
EdClass::Render(EdRenderWindowInfo const&, void*, ObjectSelection, EdRef*)
EdClass::Process(void*, float)
EdClass::GetLedFile(void*) const
EdClass::SetLedFile(void*, short) const
EdClass::IsClassVisible() const
EdClass::SetClassVisible(bool)
EdClass::InheritsClass(EdClass const*) const
EdClass::FindObjectWithAttribs(ClassObject const&)
EdClass::GetComponentObjects(EdComponent&, void*, NuVector<ClassObject>&) const
EdClass::SerialiseObjectIn(EdClass const*, ClassObject&, EdComponent const*, ClassObject const&, EdSerialiseParams&) const
EdClass::SerialiseObjectInV11(EdClass const*, ClassObject&, EdComponent const*, ClassObject const&, EdSerialiseParams&) const
EdClass::CreateAndLinkObject(EdParams const&, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int) const
EdClass::UnlinkAndDestroyObject(ClassObject&, EDREG_FLAGS, EdRegContext*, int)
EdClass::IndependentUnlinkAndDestroy(ClassObject&, EDREG_FLAGS, EdRegContext*, int)
EdClass::MustUseUnlinkAndDestroy(void*) const
EdClass::GetSubFileIndexOfClass() const
NuVector<ClassObject>::Reserve(unsigned int, bool)
NuVector<EdComponent*>::Reserve(unsigned int, bool)
EdClassInterface::EdClassInterface()
EdClassInterface::~EdClassInterface()
EdClassInterface::~EdClassInterface()
EdClassInterface::CreateAndLinkObject(EdParams const&, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int) const
EdClassInterface::UnlinkAndDestroyObject(ClassObject&, EDREG_FLAGS, EdRegContext*, int)
EdClassInterface::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
EdClassInterface::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
EdClassInterface::AddBaseObject(EdRegContext*, ClassObject&)
EdClassInterface::RemoveBaseObject(EdRegContext*, ClassObject&)
EdClassInterface::GetNumBaseObjects() const
EdClassInterface::GetNextBaseObject(ClassObject const&) const
EdClassInterface::GetFirstBaseObject() const
EdClassInterface::GetLastBaseObject() const
EdClassInterface::GetPrevBaseObject(ClassObject const&) const
EdClassInterface::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&, EDREG_FLAGS)
EdClassInterface::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
EdClassInterface::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
EdClassInterface::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
EdClassInterface::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
EdClassInterface::GetFirstComponentObject(EdComponent const&, ClassObject const&) const
EdClassInterface::GetLastComponentObject(EdComponent const&, ClassObject const&) const
EdClassInterface::GetPrevComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
EdClassInterface::GetParentObject(ClassObject const&)
EdClassInterface::SetObjectGuid(ClassObject const&, int) const
EdClassInterface::GetClassManager(short) const
EdClassInterface::GetManNumObjects(ClassManager&) const
EdClassInterface::GetManNextObject(ClassManager&, ClassObject const&) const
EdClassInterface::GetManFirstObject(ClassManager&) const
EdClassInterface::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
EdClassInterface::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
EdClassInterface::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdClassInterface::GetNumObjects(void*)
EdClassInterface::GetNextObject(void*, void*)
EdClassInterface::GetParentObject(void*)
EdClassInterface::GetParentClass(void*)
EdClassInterface::GetManNumObjects(ClassManager*, void*)
EdClassInterface::GetManNextObject(ClassManager*, void*, void*)
EdClassInterface::SetObjectGuid(void*, int)
EdClassInterface::GetObjectGuid(void*)
EdClassInterface::GetObjectPrams(void*, void*, int)
EdClassInterface::IsObjectReplicated(void*)
EdClassInterface::CanSave(EdSerialiseParams&)
EdClassInterface::CanSaveObject(void*, EdSerialiseParams&)
EdClassInterface::CloneObject(void*, EdRegContext&, EDOBJATTR_FLAGS)
SerialiseChar(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
ConvertChar(int, void*, int, void*, int)
SerialiseShort(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
ConvertShort(int, void*, int, void*, int)
SerialiseHalf(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
ConvertHalf(int, void*, int, void*, int)
SerialiseInt(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
ConvertInt(int, void*, int, void*, int)
SerialiseInt64(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
ConvertInt64(int, void*, int, void*, int)
SerialiseFloat(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
ConvertFloat(int, void*, int, void*, int)
SerialiseVec3(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
ConvertVec3(int, void*, int, void*, int)
SerialiseVec4(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
ConvertVec4(int, void*, int, void*, int)
SerialiseMtx(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
ConvertMtx(int, void*, int, void*, int)
SerialiseString(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
SerialiseColour3(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
SerialiseNuHSpecial(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
SerialiseClassObject(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
EdRegistry::FindClass(char const*) const
SerialiseClassObjectRef(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
SerialiseData(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
SerialiseHalfVec3(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&)
ConvertHalfVec3(int, void*, int, void*, int)
EdRegistry::EdRegistry()
EdRegistry::EdRegistry(int, int, int, int)
EdRegistry::Initialise(int, int, int, int)
EdRegistry::~EdRegistry()
EdRegistry::Shutdown()
EdRegistry::Reset()
EdRegistry::RegisterBaseTypes()
EdRegistry::RegisterType(int, char const*, int, void (*)(void*, int, int, int, ClassObject const&, EdRegistry&, EdRegistry&, EdSerialiseParams&), void (*)(int, void*, int, void*, int))
EdRegistry::AddTypeMapping(char const*, char const*)
EdRegistry::CanSaveClass(EdClass*, EdSerialiseParams&)
EdRegistry::CanSaveObject(EdClass*, void*, EdSerialiseParams&)
EdRegistry::GetSavedBaseClassObjects(ClassObjectList&, EdClassList*, EdSerialiseParams&)
EdRegistry::GetSavedObjects(ClassObjectList const&, ClassObjectList&, EdClassList*, EdSerialiseParams&)
EdRegistry::BuildClassIdMap(EdClassList const&) const
EdRegistry::DestroyClassIdMap(int*&) const
EdRegistry::Serialise(EdSerialiseParams&)
EdRegistry::Serialise(EdComponent const*, ClassObject const&, ClassObjectList&, EdClassList&, EdSerialiseParams&)
EdRegistry::Serialise(ClassObjectList&, EdComponent const*, ClassObject const&, EdSerialiseParams&)
EdRegistry::SerialiseTypes(EdSerialiseParams&)
EdRegistry::SerialiseClasses(EdClassList&, EdSerialiseParams&)
EdRegistry::SetupMappings(EdRegistry&)
EdRegistry::SerialiseObjects(EdComponent const*, ClassObject const&, ClassObjectList&, EdSerialiseParams&, EdRegistry&) const
EdRegistry::CreateClassStubs(EdRegistry&)
EdRegistry::SerialiseClassObjectsOut(EdClass*, ClassObject const&, ClassObjectList const&, EdSerialiseParams&) const
EdRegistry::SerialiseClassObjectsIn(EdComponent const*, ClassObject const&, ClassObjectList&, EdSerialiseParams&, EdRegistry&) const
EdRegistry::SerialiseObjectsInV3(EdComponent const*, ClassObject const&, ClassObjectList&, EdSerialiseParams&, EdRegistry&) const
EdRegistry::GetClassName(int)
EdRegistry::FindClassId(char const*) const
EdRegistry::RegisterFile(EdFileDesc*)
EdRegistry::RegisterClass(char const*, EdClassInterface*, EDCLASS_FLAGS, EdFileDesc*, char const*, float, EdClassMenuDesc*)
EdRegistry::GetMappedType(char const*) const
EdRegistry::FindType(char const*) const
EdRegistry::MapType(EdType const&) const
EdRegistry::FindType(int) const
EdRegistry::AddClassMapping(char const*, char const*)
EdRegistry::GetMappedClass(char const*) const
EdRegistry::MapClass(EdClass const&) const
EdRegistry::FindClass(int) const
EdRegistry::GetFileId(char const*)
EdRegistry::GetFile(char const*)
EdRegistry::FindTypeId(char const*) const
EdRegistry::GetClassId(EdClass const*) const
EdRegistry::CloneObject(void*, EdClass*, EdRegContext&, EDOBJATTR_FLAGS)
EdRegistry::NotifyDestroyObject(void*, EdClass*, int, EDREG_FLAGS, void*, EdRegContext*)
EdRegistry::NotifyObjectsSelected(ClassObjectList const&, bool, bool)
EdRegistry::NotifyObjectsDeselected(ClassObjectList const&)
EdRegistry::SetGetGuidFn(int (*)(EDREG_FLAGS, EdRegContext*))
EdRegistry::GetGuid(EDREG_FLAGS, EdRegContext*)
EdParams::EdParams()
EdParams::EdParams(ClassObject const&)
EdParams::Set(ClassObject const&)
EdParams::EdParams(void*, int)
EdParams::Set(void*, int)
EdGetCurrentPlatformFlag()
FrameworkEventSelectData::~FrameworkEventSelectData()
EdStringEdRef::GetString(void*)
EdString::~EdString()
EdStringEdRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdStringEdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdStringEdArrayRef::EdStringEdArrayRef(char const*, long, EDATTR_FLAGS, EdControl*, NetReplicatorInst*)
EdStringEdArrayRef::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdStringEdArrayRef::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdStringEdRef::~EdStringEdRef()
EdStringEdArrayRef::~EdStringEdArrayRef()
EdArrayRef<EdString>::GetCount(void*)
EdArrayRef<EdString>::SetCount(void*, unsigned int)
EdArrayRef<EdString>::GetMaxCount(void*)
EdFixedArray<EdString, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<EdString, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<EdString, 1u, unsigned short>::GetAllocSize() const
EdFixedArray<EdString, 1u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<EdString, 1u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<EdString, 1u, unsigned short>::GetData()
EdFixedArray<EdString, 1u, unsigned short>::GetData() const
EdArray<EdString>::SetSize(unsigned int, bool)
EdFileDesc::EdFileDesc(char const*, int)
EdFileDesc::GetExtension()
EdFileDesc::GetFileName(char const*, char*, unsigned long)
EdFileDesc::GetFullFileName(char const*, NuFixedStringT<(unsigned short)256>&)
EdFileDesc::Load(char const*, EdRegContext*)
EdFileDesc::GetDescription()
SkipResourceHeader(NuFile*)
SerializeStreamsOlderThanV22(EdStream&, EdSerialiseParams&)
MemFileScoped::MemFileScoped(char const*, NuFile*&)
MemFileScoped::~MemFileScoped()
EdFileDescLED::Load(char const*, EdRegContext*)
EdFileDescLighting::Load(char const*, EdRegContext*)
EdFileDescLighting::Serialise(NuFile*, bool, EdFileDescLighting::LightingSerialiseData&)
EdFileDescVector::operator==(EdFileDescVector const&)
EdFileDescVector::operator!=(EdFileDescVector const&)
EdFileDescLED::GetExtension()
EdFileDescLighting::GetExtension()
EdFatSmartPtrFixupData::EdFatSmartPtrFixupData()
EdFatSmartPtrFixupData::~EdFatSmartPtrFixupData()
EdFatSmartPtrFixupData::~EdFatSmartPtrFixupData()
EdRefSmartPtrBase::FindNuUniqueObjSlowFallback(NuDynamicStringT<true> const&, short, EdClass*) const
EdRefSmartPtrBase::FindNuUniqueObjFast(NuDynamicStringT<true> const&, short, EdClass*) const
EdRefSmartPtrBase::FindNuUniqueObj(NuDynamicStringT<true> const&, short, EdClass*) const
EdRefSmartPtrBase::FindNuUniqueObjMovable(NuDynamicStringT<true> const&, short, EdClass*) const
EdRefSmartPtrBase::CheckLedFileChildren(NuFrameworkResource*, NuDynamicStringT<true>&) const
EdRefSmartPtrBase::GetLedIdFromSearchStr(void*, StreamingLevel*, NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>*, char const*, NuDynamicStringT<true>&, EdClass*&) const
NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>::Find(NuDynamicStringT<true> const&) const
EdRefSmartPtrBase::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSmartPtrBase::CreateFixupString(EdClass const*, NuFrameworkResource const*, char const*, char*)
EdRefSmartPtrBase::CreateFixupString(char const*, char const*, char const*, char*)
EdRefSmartPtrBase::~EdRefSmartPtrBase()
EdFatSmartPtrFixupData::Copy() const
EdString::Empty()
EdString::AppendPart(char const*, unsigned int, bool)
EdString::SetUppercase()
EdString::FindString(EdString const&) const
EdString::FindChar(char const&, unsigned int) const
EdString::Append(int const&)
EdString::Append(EdValueAsHex const&)
EdString::AppendFormat(char const*, void const*, unsigned char)
EdString::Split(char const&, EdArray<EdString>&) const
EdString::RemoveLeft(unsigned int)
EdString::EnsureLastChar(char)
EdTriangle::UpdateCache(VuVec const&, VuVec const&, VuVec const&)
EdSphere::Set(EdArray<VuVec> const&)
EdFixedArray<VuVec, 3u, unsigned short>::~EdFixedArray()
EdBox::GetSphere() const
EdBox::GetPoints(EdArray<VuVec>&, VuVec*) const
EdFixedArray<VuVec, 8u, unsigned short>::~EdFixedArray()
EdBox::TransformAabb(NuVector3Base const&, NuVector3Base const&, NuMatrixBase const&, NuVector3Base*, NuVector3Base*)
EdBox::GetEdges(EdArray<Line>&) const
EdBox::GetTriangles(EdArray<EdTrianglePrim>&) const
EdTrianglePrim::EdTrianglePrim(VuVec const&, VuVec const&, VuVec const&)
EdCapsule::GetSphere() const
Line::GetPoint(float) const
Line::GetIntersection(Line const&, VuVec&) const
Line::GetNearestPoint(VuVec const&) const
Line::GetDistanceSq(VuVec const&, VuVec*) const
EdLineProxy2D::GetNearestPoint(VuVec const&) const
EdLineProxy2D::GetDistanceSq(VuVec const&, VuVec*) const
EdSphere::GetIntersection(Line const&, float*) const
EdSphere::GetIntersection(Line const&, VuVec&, float*) const
EdCircle::GetIntersection(EdLineProxy2D const&, VuVec&) const
EdCircle::GetIntersection(NUPLANE const&, VuVec const&, VuVec const&, VuVec&, float*) const
LineToPlaneIntersecion(VuVec const&, VuVec const&, VuVec const&, VuVec*)
EdCircle::GetIntersection(VuVec const&) const
EdCircle::GetIntersection(Line const&, VuVec&, float*) const
EdCircle::GetIntersection(VuVec const&, VuVec const&, VuVec const&, VuVec&) const
PointInTriangleXZ(VuVec const&, VuVec const&, VuVec const&, VuVec const&)
LineToPointDistance(VuVec const&, VuVec const&, VuVec const&, VuVec*)
LineToPlaneDistance(VuVec&, VuVec&, VuVec&)
LineToSphereIntersection(VuVec const&, VuVec const&, VuVec const&, float, VuVec*, VuVec*)
LineToLineClosestPoints(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float&, float&)
CompressUtil::CompressFloat1(float)
CompressUtil::UncompressFloat1(unsigned short)
CompressUtil::CompressFloat2(float)
CompressUtil::UncompressFloat2(unsigned char)
CompressUtil::CompressUFloat1(float)
CompressUtil::UncompressUFloat1(unsigned short)
CompressUtil::CompressUFloat2(float)
CompressUtil::UncompressUFloat2(unsigned char)
PointInBox(VuVec const&, VuMtx const&, VuVec*)
EdUtil::MaxXPointInArray(EdArray<VuVec> const&)
EdUtil::MinXPointInArray(EdArray<VuVec> const&)
EdUtil::MaxYPointInArray(EdArray<VuVec> const&)
EdUtil::MinYPointInArray(EdArray<VuVec> const&)
EdUtil::MaxZPointInArray(EdArray<VuVec> const&)
EdUtil::MinZPointInArray(EdArray<VuVec> const&)
EdUtil::GetPlanesFromRays(EdArray<NUPLANE>&, EdArray<Line>&, Line const&, Line const&, Line const&, Line const&)
EdUtil::GetPlaneSurfaceLocalTriangle(NUPLANE const&, EdArray<VuVec>&)
EdUtil::GetPlaneSurfaceLocalQuad(NUPLANE const&, EdArray<VuVec>&)
EdFixedArray<VuVec, 3u, unsigned short>::~EdFixedArray()
EdFixedArray<VuVec, 3u, unsigned short>::GetAllocSize() const
EdFixedArray<VuVec, 3u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<VuVec, 3u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<VuVec, 3u, unsigned short>::GetData()
EdFixedArray<VuVec, 3u, unsigned short>::GetData() const
EdArray<VuVec>::GetGrowBy() const
EdArrayWithSize<VuVec, unsigned short>::DoGetSize() const
EdArrayWithSize<VuVec, unsigned short>::DoSetSize(unsigned int)
EdArray<VuVec>::SetSize(unsigned int, bool)
EdFixedArray<VuVec, 8u, unsigned short>::~EdFixedArray()
EdFixedArray<VuVec, 8u, unsigned short>::GetAllocSize() const
EdFixedArray<VuVec, 8u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<VuVec, 8u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<VuVec, 8u, unsigned short>::GetData()
EdFixedArray<VuVec, 8u, unsigned short>::GetData() const
EdArray<Line>::SetSize(unsigned int, bool)
EdArray<EdTrianglePrim>::SetSize(unsigned int, bool)
EdTrianglePrim::operator=(EdTrianglePrim const&)
EdArray<NUPLANE>::SetSize(unsigned int, bool)
GSCAnimation::GSCAnimation(EdRegContext&, SceneObject*, EdClass*)
GSCAnimation::MakeLEDStyleAnimation(EdRegContext&)
GSCAnimation::~GSCAnimation()
GSCAnimation::~GSCAnimation()
GSCAnimation::Process(ClassObject, AnimationLayer*)
GSCAnimation::GetAnimData() const
GSCAnimation::ApplyAnimMtx(NUMTX*, NUMTX const*)
GSCAnimation::EvalAnim(AnimationInstance*, GSCAnimationPlayControl*, float, NUMTX*, NUMTX const*, int, int)
GSCAnimation::GetInstAnim() const
GSCAnimation::GetLength() const
GSCAnimation::UpdateDrawMatrix(AnimationInstance*, AnimationPlayControl*, SceneObject*)
GSCAnimation::CalcDrawMatrix(AnimationInstance*, AnimationPlayControl*, VuMtx&, SceneObject*)
Keyframe::Keyframe(EdRegContext const&, float, float, KeyFrameTransitionType)
Keyframe::Keyframe(EdRegContext const&, Keyframe&)
Keyframe::SetFrameValue(float)
Keyframe::SetFrame(float)
Keyframe::GetComponent()
Keyframe::GetParentObject()
Keyframe::GetSplineOut() const
Keyframe::SetSplineOut(float)
Keyframe::GetSplineIn() const
Keyframe::SetSplineIn(float)
KeyframeFactory::Make(EdRegContext const&, KeyframeType, float, float, KeyFrameTransitionType)
KeyframeFactory::Make(EdRegContext const&, KeyframeType, Keyframe&)
EdRefKeyframe::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefKeyframe::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
KeyframeHelper::Initialise()
KeyframeHelper::GetNumObjects(void*)
KeyframeHelper::GetNextObject(void*, void*)
KeyframeHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
KeyframeHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
KeyframeHelper::GetParentObject(void*)
KeyframeHelper::GetParentClass(void*)
Keyframe::~Keyframe()
Keyframe::~Keyframe()
Keyframe::GetFrameValue(ClassObject, AnimationLayer const*) const
Keyframe::GetFrameValue() const
Keyframe::GetLength() const
EdRefKeyframe::~EdRefKeyframe()
KeyframeHelper::~KeyframeHelper()
KeyframeEvent::KeyframeEvent(EdRegContext const&, KeyframeEvent::eEventType, float)
KeyframeEvent::KeyframeEvent(EdRegContext const&, KeyframeEvent&)
KeyframeEvent::SetLength(float)
EdRefKeyframeEvent::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefKeyframeEvent::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
KeyframeEventHelper::KeyframeEventHelper()
KeyframeEventHelper::Initialise()
KeyframeEventHelper::GetNextObject(void*, void*)
KeyframeEventHelper::GetNumObjects(void*)
EdRefKeyframeEvent::~EdRefKeyframeEvent()
KeyframeEventHelper::~KeyframeEventHelper()
KeyframeEvent::~KeyframeEvent()
KeyframeEvent::GetLength() const
KeyframeEvent::Stop(AnimationLayer*)
RandomNumberGenerator::GetRandom(unsigned int, float, float, float)
KeyframeRandom::KeyframeRandom(EdRegContext const&, float, KeyFrameTransitionType, float, float)
KeyframeRandom::KeyframeRandom(EdRegContext const&, KeyframeRandom&)
KeyframeRandom::GetFrameValue(AnimationInstance*, AnimationLayer*)
KeyframeRandom::GetComponent()
EdRefKeyframeRandom::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefKeyframeRandom::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
KeyframeRandomHelper::Initialise()
KeyframeRandomHelper::GetNumObjects(void*)
KeyframeRandomHelper::GetNextObject(void*, void*)
KeyframeRandomHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
KeyframeRandomHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
KeyframeRandom::~KeyframeRandom()
EdRefKeyframeRandom::~EdRefKeyframeRandom()
KeyframeRandomHelper::~KeyframeRandomHelper()
PartsHolder::PartsHolder(EdRegContext&)
PartsHolder::ResetTiming()
PartsHolder::PartsHolder(PartsHolder&, EdRegContext&)
PartsHolder::SetParts(char*)
PartsHolder::GetPartsName()
PartsHolder::~PartsHolder()
non-virtual thunk to PartsHolder::~PartsHolder()
PartsHolder::~PartsHolder()
non-virtual thunk to PartsHolder::~PartsHolder()
PartsHolder::GetClass() const
PartsHolder::Reset()
PartsHolder::Process(float, LevelContainer*)
PartsHolder::GetPartsPerSecond()
PartsHolder::SpawnPart(part_typedesc_s*, NUVEC*, NUMTX*, LevelContainer*)
PartsManager::PartsManager()
PartsManager::PartsManager(LevelContainer&)
PartsManager::RegisterProcessing()
PartsManager::RegisterRendering()
PartsManager::~PartsManager()
PartsManager::~PartsManager()
PartsManager::RemoveScene(int)
PartsManager::LookupObjectInScene(char*, NuSmartPtr<NuScene, true> const&)
PartsManager::AddToPartScenes(NuSmartPtr<NuScene, true> const&, int)
PartsManager::FixUpPartTypesUsingVfxGen()
PartsManager::OnSetInUse()
PartsManager::OnSetIdle()
PartsManager::GetNumObjects(void*)
PartsManager::GetNextObject(void*, void*)
PartsManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
PartsManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
PartsManager::FindNamedPartsHolder(char*)
PartsManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
PartsManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
PartsManager::EventNotify(Event&, NuEventData&)
PartsManager::FixUp()
PartsManager::FindScene(NuSmartPtr<NuScene, true> const&)
PartsManager::SetValidPageId()
PartsManager::ClearPageId()
PartsManager::SetPageId(int)
PartsManager::GetPageId()
EdRefPartsHolder::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefPartsHolder::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
PartsHelper::PartsHelper()
CreatePartsManager(LevelContainer&)
PartsHelper::Initialise()
PartsHolder::GetTransform(VuMtx&) const
PartsHolder::SetTransform(VuMtx const&)
PartsHolder::GetVisibility() const
PartsHolder::SetVisibility(int)
PartsHolder::Activate()
PartsHolder::Deactivate()
PartsHolder::IsActive() const
PartsHolder::GetRadius() const
PartsManager::GetManagerName() const
PartsManager::GetClass(int)
PartsManager::GetNumClasses()
EdRefPartsHolder::~EdRefPartsHolder()
PartsHelper::~PartsHelper()
PartsHelper::~PartsHelper()
StubObject::StubObject(EdRegContext&, StubInfo*)
StubObject::~StubObject()
EdRefStub::GetMemberObject(void*)
EdRefStub::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefStub::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
StubHelper::StubHelper(EdRegistry&, EdClass&)
StubHelper::GetNumObjects(void*)
StubHelper::GetNextObject(void*, void*)
StubHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
StubHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdRefStub::~EdRefStub()
StubHelper::~StubHelper()
StubHelper::~StubHelper()
EdStubObjectFactory::New(EdRegContext&)
EdStubObjectFactory::Delete(void*)
EdStubObjectFactory::~EdStubObjectFactory()
EdStubObjectFactory::~EdStubObjectFactory()
Flow::Flow(char const*, short)
CommonString::~CommonString()
Flow::~Flow()
Flow::~Flow()
Flow::RecreateAllChildLinks()
Flow::DestroyAllChildLinks(FlowObject*)
Flow::CreateAllChildLinks(FlowObject*)
Flow::Validate()
Flow::Process()
Flow::Reset(FlowProgress*, int, int)
Flow::GetFlowBoxIx(FlowObject*)
Flow::GetFlowBoxFromIX(int)
Flow::RemoveEmptyFlowBoxes()
Flow::DestroyLinkBetweenFlowBoxes(FlowObject*, FlowObject*)
Flow::FlowBoxFindByName(char*)
Flow::GetNextFlowObject(EdClass&, FlowObject*)
Flow::ResetPointers()
Flow::ResetProgress(FlowProgress*, FlowObject*, int)
TFixedString<256>::~TFixedString()
FlowObjectActionHelper::Process()
FlowObjectActionHelper::Initialise()
FlowObjectActionHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectActionHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
FlowObjectActionHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectActionHelper::GetParentObject(ClassObject const&)
FlowObjectActionHelper::~FlowObjectActionHelper()
EdRefFlowActionTarget::~EdRefFlowActionTarget()
EdRefFlowActionTarget::GetMemberObject(void*)
FlowActionTargetHelper::Initialise()
FlowActionTargetHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowActionTargetHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowActionTargetHelper::GetParentObject(ClassObject const&)
FlowActionTargetHelper::~FlowActionTargetHelper()
EdRefFlowAction::~EdRefFlowAction()
EdRefFlowAction::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefFlowAction::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowActionTargetParamRef::~FlowActionTargetParamRef()
FlowActionTargetParamRef::GetCount(void*)
FlowActionTargetParamRef::SetCount(void*, unsigned int)
FlowActionTargetParamRef::GetMaxCount(void*)
FlowActionTargetParamRef::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowActionTargetParamRef::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdFixedArray<char, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<char, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<char, 1u, unsigned short>::GetAllocSize() const
EdFixedArray<char, 1u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<char, 1u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<char, 1u, unsigned short>::GetData()
EdFixedArray<char, 1u, unsigned short>::GetData() const
FlowObjectConditionHelper::Initialise()
FlowObjectConditionHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectConditionHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectConditionHelper::GetParentObject(ClassObject const&)
FlowObjectConditionHelper::~FlowObjectConditionHelper()
EdRefFlowCondition::~EdRefFlowCondition()
EdRefFlowCondition::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefFlowCondition::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowConditionTarget::~FlowConditionTarget()
FlowObjectNumberProcessorHelper::Initialise()
FlowObjectNumberProcessorHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectNumberProcessorHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectNumberProcessorHelper::GetParentObject(ClassObject const&)
FlowObjectNumberProcessorHelper::~FlowObjectNumberProcessorHelper()
EdRefFlowNumberProcessor::~EdRefFlowNumberProcessor()
EdRefFlowNumberProcessor::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefFlowNumberProcessor::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowNumberProcessorTarget::~FlowNumberProcessorTarget()
FlowLinkHelper::Initialise(EdClass*)
FlowLinkHelper::CreateLink(FlowObject*, FlowLinkList&, EDREG_FLAGS, FlowObjectUICreateData*)
FlowLinkHelperParent::Initialise()
FlowLinkHelperParent::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowLinkHelperParent::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowLinkHelperParent::GetParentObject(ClassObject const&)
FlowLinkHelperChild::Initialise()
FlowLinkHelperChild::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowLinkHelperChild::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowLinkHelperChild::GetParentObject(ClassObject const&)
FlowLinkHelperChild::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
FlowLinkHelperParent::~FlowLinkHelperParent()
FlowLinkHelperChild::~FlowLinkHelperChild()
FlowLinkHelperChild::~FlowLinkHelperChild()
non-virtual thunk to FlowLinkHelperChild::~FlowLinkHelperChild()
non-virtual thunk to FlowLinkHelperChild::~FlowLinkHelperChild()
EdRefFlowLink::~EdRefFlowLink()
EdRefFlowLink::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefFlowLink::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowObjectPassThrough::FlowObjectPassThrough(short)
FlowObjectPassThrough::Process(Flow*, unsigned char)
FlowObjectPassThrough::CheckOutput(Flow*, unsigned char)
FlowObjectPassThrough::~FlowObjectPassThrough()
EdType::EdType()
EdType::~EdType()
EdType::SerialiseTypeData(EdType const&, EdRegistry&, EdRegistry&, int, void*, int, ClassObject const&, EdSerialiseParams&) const
EdType::SetName(char const*)
EdType::Serialise(EdSerialiseParams&)
EdType::SetupMappings(EdRegistry&)
EdComponent::EdComponent(char const*, EdClass*, EDCOMPONENT_FLAGS)
EdComponent::~EdComponent()
EdComponent::CanSave(EdSerialiseParams&) const
EdComponent::CanUserCreate(ClassObject const&) const
EdComponent::CanUserDelete() const
EdComponent::MatchFilter(EdFilterVisiblity const&) const
EdComponent::SetupMappings(EdRegistry&)
FlowActionDefinitionList::~FlowActionDefinitionList()
FlowObjectAction::FlowObjectAction(short)
FlowActionFind(char*)
FlowActionDefinitionList::Find(char const*) const
FlowObjectAction::Process(Flow*, unsigned char)
FlowObjectAction::PerformActionFlowBox(Flow*)
FlowObjectAction::CheckOutput(Flow*, unsigned char)
FlowActionTarget::ClearParams()
FlowActionTarget::~FlowActionTarget()
FlowActionTarget::~FlowActionTarget()
FlowActionDefinitionList::Get(int) const
FlowActionDefinitionList::Count() const
FlowActionDefinitionList::SetGizactiondefArray(FlowActionDefinition*)
FlowActionDefinitionList::Register(FlowActionDefinition&)
CMList<FlowActionDefinition*>::Append(FlowActionDefinition* const&, CMList<FlowActionDefinition*>::ListLink*)
FlowObjectAction::~FlowObjectAction()
FlowObjectCondition::FlowObjectCondition(short)
FlowObjectCondition::Process(Flow*, unsigned char)
FlowObjectCondition::CheckOutput(Flow*, unsigned char)
FlowObjectCondition::SetTriggeredByPlayerId(MechCharacter*)
FlowObjectCondition::~FlowObjectCondition()
FlowObjectNumberProcessor::FlowObjectNumberProcessor(short)
FlowObjectNumberProcessor::Process(Flow*, unsigned char)
FlowObjectNumberProcessor::CheckOutput(Flow*, unsigned char)
FlowObjectNumberProcessor::SetTriggeredByPlayerId(MechCharacter*)
FlowObjectNumberProcessor::~FlowObjectNumberProcessor()
edbitsRegisterBaseScene(NuSmartPtr<NuScene, true>)
edbitsRegisterCommonScene(NuSmartPtr<NuScene, true>)
edbitsRegisterThingsScene(NuSmartPtr<NuScene, true>)
edbitsRegisterVfxScene(NuSmartPtr<NuScene, true>)
edbitsRegisterBaseTerrain(void*)
edbitsLookupSoundFX(char*)
edbitsSetSoundFxVolume(int)
edbitsSoundPlay(NUVEC*, int)
edbitsGetSoundName(int)
edbitsLookupInstance(char const*, NuSmartPtr<NuScene, true>)
edbitsRegisterLevel(char const*, int)
edbitsRegisterSaveFormat(char const*, char const*, char const*, char const*, char const*, char const*)
edbitsRegisterDataPath(char const*)
edbitsDrawCross(float, float, float, float, unsigned int, NuSmartPtr<NuMtl, true>)
edbitsDrawCircleXY(NUVEC*, float, unsigned int, NuSmartPtr<NuMtl, true>)
EdFileSwapEndianess16(void*)
EdFileSwapEndianess32(void*)
EdFileSwapEndianess64(void*)
EdFileSetReadWrongEndianess(int)
EdFileSetMedia(int)
EdFileSetMemoryPointer(char*)
EdFileGetMemoryPointer()
EdFileSetPakFile(NUPAKFILEHNDL const&)
EdFileResetBuffers()
EdFileFillBuffer()
EdFileOpen(char const*, nufilemode_e)
EdFileFlushBuffer()
EdFileClose()
EdFileWrite(void const*, int)
EdFileWriteFloat(float)
EdFileWriteInt(int)
EdFileWriteUnsignedInt(unsigned int)
EdFileWriteShort(short)
EdFileWriteUnsignedShort(unsigned short)
EdFileWriteChar(char)
EdFileWriteUnsignedChar(unsigned char)
EdFileWriteNuVec(NUVEC*)
EdFileWriteNuMtx(NUMTX*)
EdFileWriteString(char const*)
EdFileWriteStringV(char const*, ...)
EdFileRead(void*, int)
EdFileMovePointer(int)
EdFileReadFloat()
EdFileReadInt()
EdFileReadUnsignedInt()
EdFileReadShort()
EdFileReadUnsignedShort()
EdFileReadChar()
EdFileReadUnsignedChar()
EdFileReadNuVec(NUVEC*)
EdFileReadNuMtx(NUMTX*)
EdFileWriteMemCard(char*, int, void*)
EdFileReadMemCard(char*, int, void*)
EdFileBackup(char*, char*)
EdFileSeek(int)
DrawMenuHeader()
MenuSmartTextEx(char const*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char, float, int, MESSAGEBOX_s*, int, int)
MenuText3DEx(char const*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char, unsigned char)
MenuInitialiseEx(MENUFNINFO_s*, int, int, void (*)(float, float, int, int), int, int)
MenuInitialise(MENUFNINFO_s*, int, int, void (*)(MENU*, float), int, int)
MenuSetColours(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
MenuReset()
MenuRegisterSoundFX(int, int, int, int)
MenuRememberCursor(MENU*)
SetupMenu(MENU*, int, bool)
NewMenu(int, int, int)
BackupMenu()
BackupMenuNoFn()
MenuRepeat(int*, int*, float*, unsigned char*, float, float)
UpdateMenu(unsigned int, unsigned int, unsigned int, unsigned int, float, int, int, int, int, SoundManager*)
DrawMenuEntry(MENU*, char const*)
DrawMenuEntryEx(MENU*, char const*, unsigned char)
DrawMenuButtonPromptsEx(int, int, int, int, unsigned char, unsigned char, unsigned char, unsigned char)
DrawMenuButtonPrompts(int, int, int, unsigned char, unsigned char, unsigned char, unsigned char)
DrawMenu(int)
APIMenu_TestCard_Fade(int, float)
APIMenu_TestCard_Init()
APIMenu_TestCard_Draw(float)
GetMenuID()
MenuLoadTechnicalStrings(char const*, char const*)
GetSTFont()
Text_InsertCommasIntoNumber(char const*, char*, int)
Text_LocaliseDateSeparator(char*)
Text_LocaliseDecimalPoint(char*)
Text_GetLocalisedPercentage(char*)
Text_MakeScore(unsigned long, char*)
Text_MakeTime(float, int, int, int, char*)
Text3DStringEncodeEx(unsigned char*, unsigned short*, void*)
Text3DStringEncode(unsigned char*, unsigned short*)
TextRegisterButtonMapFn(void (*)(char*, char*))
Text3DStringEncodeFont(unsigned char*, unsigned short*, void*)
TextDecode_IsPlayerUsingSwitchFullKeyPad(int)
TextDecodeCodewordForPlayer(char*)
TextDecodeCodeword(char*, char*)
TextDecode(unsigned char const*, unsigned char*, bool)
Text3D(unsigned char const*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char)
Text3DEx(unsigned char const*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char, unsigned char)
TextPrintSubstring(unsigned char*, float, float, float, float, float, int, int)
SetButtonScaleMode(int)
Text3DExLimit(unsigned char const*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char, unsigned char, int, unsigned char, bool)
Text3DEx2(unsigned char const*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char, unsigned char)
IsNaturalBreak(unsigned char*, int)
FindNextBreak(unsigned char*, int)
FindNearestBreak(unsigned char*, int)
MessageBoxInitMtl()
DrawMessageBox(int, float, float, float, float)
SmartText(unsigned char*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char, float, int)
SmartTextEx(unsigned char*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char, float, int, MESSAGEBOX_s*, int, int, bool)
SmartTextExLimit(unsigned char*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char, float, int, MESSAGEBOX_s*, int, int, int, unsigned char, bool)
TextTrueCharLength(unsigned char*)
SmartTextEx2(unsigned char*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char, float, int, MESSAGEBOX_s*, int, int)
SmartTextExDrop(unsigned char*, float, float, float, float, float, float, int, unsigned char, unsigned char, unsigned char, float, int, MESSAGEBOX_s*, int, int)
SmartTextSetFWNMode(int)
SmartTextSetFont(void*)
SetGameFont(void*)
Set3DGameFont(void*)
LoadGameFont(char const*, char const*, nuvariptr_u*, nuvariptr_u*, int)
UnloadGameFont(NUFNT*)
SetQFont2D()
SmartTextSetWidescreen(float, float)
SmartTextGetWidescreen(float*, float*)
Debug_Print(int, char const*, ...)
SplitTextFindNextWS(unsigned char*, int)
SplitText(unsigned char*, float, bool)
MatrixTextStringEncode(void*, unsigned char*, unsigned short*)
MatrixText(void*, unsigned char*, float, float, float, float, float, int, unsigned int, NUMTX*, int)
LoadButtonFontEx(char const*, char const*, nuvariptr_u*, nuvariptr_u*, int, float)
FixUpButtonsInFont(void*, void*)
LoadButtonFont(char const*, char const*, nuvariptr_u*, nuvariptr_u*, int)
SetButtonFontAspect(float)
GameGUI2DrawImpose()
GUI2Manager::DrawImpose()
GUI2Manager::GUI2Manager()
GUI2Manager::~GUI2Manager()
GUI2Manager::~GUI2Manager()
GUI2Manager::Init()
GUI2Manager::EventNotify(Event&, NuEventData&)
GUI2Manager::LoadSounds()
GUI2Manager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
GUI2Manager::ProcessInput(ManagerProcessData*)
GUI2Manager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
GUI2Manager::RenderSubtitleText()
GUI2Manager::UnlinkAndDestroy(GUI2Object*)
GUI2Manager::GetHelper(eGUI2Objects)
GUI2Manager::GetClass(int)
GUI2Manager::FindPage(char const*)
GUI2Manager::FindObjectByName(char const*)
GUI2Manager::ShowPage(char const*, eGUI2ObjectStage)
GUI2Manager::ShowPage(GUI2Page&, eGUI2ObjectStage)
GUI2Manager::RemovePage(char const*)
GUI2Manager::RemovePage(GUI2Page&)
GUI2Manager::RemoveAllPages()
GUI2Manager::RemoveAllPagesForStage(eGUI2ObjectStage)
GUI2Manager::RemoveAllHudStagePages()
GUI2Manager::GetSoundManager() const
GUI2Manager::AllowInput(int)
GUI2Manager::ProcessInput2_ForStage(int, eGUI2ObjectStage)
NuInputAutoRepeat::ProcessPad(NUPAD&)
GUI2Manager::ProcessInput3_ForPad(NUPAD*, int, eGUI2ObjectStage)
GUI2Manager::IsInputProcessingPaused()
GUI2Manager::ProcessInput4_ForPlayList(NUPAD*, int, GUI2PlayList*)
GUI2Manager::PauseProcessingInput(bool)
GUI2Manager::StopProcessingInput()
GUI2Manager::IsFlashEnabled()
GUI2Manager::Load(char const*, char const*)
GUI2Manager::FixUp()
GUI2Manager::AddPageHandler(GUI2PageHandler&)
GUI2Manager::RemovePageHandler(GUI2PageHandler&, bool)
GUI2Manager::PlaySound(GUI2Sound)
GUI2Manager::LoadFont()
NuInputAutoRepeat::NuInputAutoRepeat()
GUI2Manager::GetManagerName() const
GUI2Manager::GetNumClasses()
GUI2Manager::GetNumObjects(void*)
GUI2Manager::GetNextObject(void*, void*)
GUI2Manager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
GUI2Manager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
GetFlashEnabledStateEventData::~GetFlashEnabledStateEventData()
FilePathFixedString::~FilePathFixedString()
AllowRenderSoundEventSubtitleData::~AllowRenderSoundEventSubtitleData()
NuVector<GUI2PlayList>::Reserve(unsigned int, bool)
NuVector<SoundEventData*>::Reserve(unsigned int, bool)
GUI2PlayObject::GUI2PlayObject(GUI2Object&)
GUI2PlayObject::operator==(GUI2PlayObject const&) const
GUI2PlayList::Add(GUI2Object&)
GUI2PlayList::Contains(GUI2Object&)
GUI2PlayList::Remove(GUI2Object&)
GUI2PlayList::ClearProcessInput()
GUI2PlayList::Clear()
GUI2PlayList::Render()
GUI2PlayList::Process(ManagerProcessData*)
GUI2PageHandler::GUI2PageHandler(char const*)
GUI2PageHandler::~GUI2PageHandler()
GUI2PageHandler::~GUI2PageHandler()
GUI2PageHandlerList::Find(char const*)
GUI2Material::GUI2Material()
GUI2Material::~GUI2Material()
GUI2Material::DestroyMaterial()
GUI2Material::CreateMaterial()
GUI2Material::CreateFontMaterial()
GUI2Material::CreatePanelMaterial()
GUI2MaterialHelper::Initialise()
GUI2MaterialHelper::GetManNumObjects(ClassManager*, void*)
GUI2MaterialHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
GUI2MaterialHelper::GetManNextObject(ClassManager*, void*, void*)
GUI2MaterialHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
GUI2MaterialHelper::CreateAllMaterials()
GUI2MaterialHelper::Find(char*)
EdRefGUI2MaterialUser::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefGUI2MaterialUser::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
GUI2MaterialHelper::~GUI2MaterialHelper()
GUI2MaterialHelper::~GUI2MaterialHelper()
EdRefGUI2MaterialUser::~EdRefGUI2MaterialUser()
EdRefGUI2Material::~EdRefGUI2Material()
EdRefGUI2Material::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefGUI2Material::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
GUI2ObjectBehaviourAnimations::AddToAnimInstance(AnimationInstance*)
GUI2ObjectBehaviourAnimations::Clear()
GUI2ObjectBehaviourAnimations::CreateLayers()
GUI2ObjectBehaviourAnimations::operator=(GUI2ObjectBehaviourAnimations&)
GUI2Object::GUI2Object(EdRegContext&)
GUI2Object::Init()
GUI2Object::GUI2Object(EdRegContext&, GUI2Object&)
GUI2Object::GUI2Object()
GUI2Object::GetClass() const
GUI2Object::GetTransform(VuMtx&) const
GUI2Object::GetCumulativeAlpha()
GUI2Object::GetParent()
GUI2Object::SetKeyframe(VuMtx const&, float, int)
GUI2Object::SetTransform(VuMtx const&)
GUI2Object::Render(VuMtx const*)
GUIChildrenIterator::operator*()
GUIChildrenIterator::operator++(int)
GUI2Object::IsAnimationPlaying()
GUI2Object::ResetMatrix()
GUI2Object::FindObject(char const*)
GUI2Object::FindObjectType(eGUI2Objects)
GUI2Object::GetObjectStage() const
GUI2Object::SetObjectStage(eGUI2ObjectStage)
GUI2Object::SetSceneNode(SceneNode*)
GUI2Object::GetPage()
GUI2Object::GetNumChild()
GUI2Object::GetChild(int)
GUI2Object::GetChildIndex()
GUI2Object::OnGUI2Event(eGUI2Event, GUI2EventData*)
GUI2Object::SetColour(unsigned int)
GUI2Object::Active() const
GUI2Object::SetActive(bool)
GUI2Object::SafeSetActive(GUI2Object*, bool)
GUI2Object::OnAPlayList() const
GUI2Object::GetVisibility() const
GUI2Object::SetVisibility(int)
GUI2Object::Available()
GUI2Object::GetAnimPlayControl()
GUI2Object::IsAnimationApplied()
GUI2Object::SetBehaviour(eGUI2AnimBehaviour)
GUI2Object::PlayBehaviourAnimation(eGUI2AnimBehaviour)
GUI2Object::CopyAnimationsFromSourceAnimationObject()
GUI2Object::ClearAnimationLayers()
GUI2Object::ShouldBeGrey()
GUI2Object::SetGrey(bool)
GUI2Object::ClearBehaviours()
GUI2Object::AllAnimationsComplete()
GUI2Object::ProcessBehaviourAnimations()
GUI2ObjectList::Find(char const*)
EdRefGUI2ObjectLocalMatrix::EdRefGUI2ObjectLocalMatrix(char const*, char const*, long, int, EDATTR_FLAGS, EdControl*)
EdRefGUI2ObjectLocalMatrix::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefGUI2BehaviourAnimation::EdRefGUI2BehaviourAnimation(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdRefGUI2BehaviourAnimation::AsOffset(eGUI2AnimBehaviour)
EdRefGUI2BehaviourAnimation::AsBehaviour(int)
EdRefGUI2BehaviourAnimation::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefGUI2BehaviourAnimation::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
GUI2ObjectHelper::GUI2ObjectHelper()
GUI2ObjectHelper::Initialise()
GUI2ObjectHelper::GetManNumObjects(ClassManager*, void*)
GUI2ObjectHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
GUI2ObjectHelper::GetManNextObject(ClassManager*, void*, void*)
GUI2ObjectHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
GUIChildrenIterator::GUIChildrenIterator(GUI2Object*)
GUIChildrenIterator::Init(GUI2Object*, bool)
GUIChildrenIterator::GUIChildrenIterator(GUI2Object*, GUIChildrenIterator::AvailableOnly)
GUIChildrenIterator::SeekValid()
GUIChildrenIterator::ValidChildIndex()
GUIChildrenIterator::ValidChildObject()
GUIChildrenIterator::operator++()
GUI2Object::~GUI2Object()
GUI2Object::~GUI2Object()
GUI2Object::PreRender(VuMtx const*)
GUI2Object::OnRender(VuMtx const*)
GUI2Object::PostRender(VuMtx const*)
non-virtual thunk to GUI2Object::~GUI2Object()
non-virtual thunk to GUI2Object::~GUI2Object()
EdRefGUI2ObjectLocalMatrix::~EdRefGUI2ObjectLocalMatrix()
EdRefGUI2BehaviourAnimation::~EdRefGUI2BehaviourAnimation()
GUI2ObjectHelper::~GUI2ObjectHelper()
GUI2ObjectHelper::~GUI2ObjectHelper()
GUI2ObjectHelper::Render(void*, int, EdRef*)
NuVector<AnimationLayer*>::Reserve(unsigned int, bool)
GUI2Text::GUI2Text(EdRegContext&)
GUI2Text::Init()
GUI2Text::GUI2Text(EdRegContext&, GUI2Text&)
GUI2Text::GUI2Text()
GUI2Text::GetClass() const
GUI2Text::SetClearTextOnExit(bool)
GUI2Text::SetText(char const*)
GUI2Text::SetStringTableTextByName(char const*)
GUI2Text::OnGUI2Event(eGUI2Event, GUI2EventData*)
GUI2Text::EventNotify(Event&, NuEventData&)
non-virtual thunk to GUI2Text::EventNotify(Event&, NuEventData&)
GUI2Text::OnRender(VuMtx const*)
EdGUI2TextDynamicStringRef::EdGUI2TextDynamicStringRef(char const*, char const*, long, int, EDATTR_FLAGS, EdControl*)
EdGUI2TextDynamicStringRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
GUI2TextHelper::Initialise()
GUI2TextHelper::Factory(EdRegContext&, Placeable*)
GUI2Text::~GUI2Text()
GUI2Text::~GUI2Text()
non-virtual thunk to GUI2Text::~GUI2Text()
non-virtual thunk to GUI2Text::~GUI2Text()
non-virtual thunk to GUI2Text::~GUI2Text()
non-virtual thunk to GUI2Text::~GUI2Text()
EdGUI2TextDynamicStringRef::~EdGUI2TextDynamicStringRef()
GUI2TextHelper::~GUI2TextHelper()
GUI2Page::GUI2Page(EdRegContext&)
GUI2Page::GetClass() const
GUI2Page::OnGUI2Event(eGUI2Event, GUI2EventData*)
GUI2Page::OnGUI2EventPageHandler(GUI2Object*, eGUI2Event, GUI2EventData*)
GUI2PageHelper::Initialise()
GUI2PageHelper::Factory(EdRegContext&, Placeable*)
GUI2Page::~GUI2Page()
non-virtual thunk to GUI2Page::~GUI2Page()
non-virtual thunk to GUI2Page::~GUI2Page()
GUI2PageHelper::~GUI2PageHelper()
Seeker::Seeker()
Seeker::Set(float, float)
Seeker::GetStartSpeed()
Seeker::GetEndSpeed()
Seeker::Seek(float)
GUI2Menu::GUI2Menu(EdRegContext&)
GUI2Menu::GetClass() const
GUI2Menu::PostRender(VuMtx const*)
GUI2Menu::DoEntryLayout()
GUI2Menu::PreRender(VuMtx const*)
GUI2Menu::GetSelectionIndex()
GUI2Menu::GetSelectedObject()
GUI2Menu::EventNotify(Event&, NuEventData&)
non-virtual thunk to GUI2Menu::EventNotify(Event&, NuEventData&)
GUI2Menu::OnInit()
GUI2Menu::ActionAllChildInstances(GUI2InstanceAction)
GUI2Menu::OnRemove()
GUI2Menu::RemoveAnimationInstances()
GUI2Menu::OnAboutToShow()
GUI2Menu::OnShow()
GUI2Menu::SelectEntryByIndex(int)
GUI2Menu::GetTargetPosition()
GUI2Menu::OnGUI2Event(eGUI2Event, GUI2EventData*)
GUI2Menu::GetNextAvailableEntry(eGUI2Event)
GUI2Menu::SelectEntry(GUI2Object*, bool)
GUI2Menu::SetEntrySelected(GUI2Object*, bool, bool)
GUI2Menu::GetCoordsFromItemIndex(int, int&, int&)
GUI2Menu::CountAvailableEntries()
GUI2Menu::SetPlaySelectSound(bool)
GUI2Menu::SetPlayBackSound(bool)
GUI2Menu::SetSelectSound(GUI2Sound)
GUI2Menu::SetNumEntriesPerLine(int)
GUI2Menu::GetNumEntriesPerLine()
GUI2Menu::GetItemIndexFromCoords(int&, int, int)
GUI2Menu::Available()
GUI2MenuHelper::Initialise()
GUI2MenuHelper::Factory(EdRegContext&, Placeable*)
GUI2Menu::~GUI2Menu()
GUI2Menu::~GUI2Menu()
non-virtual thunk to GUI2Menu::~GUI2Menu()
non-virtual thunk to GUI2Menu::~GUI2Menu()
non-virtual thunk to GUI2Menu::~GUI2Menu()
non-virtual thunk to GUI2Menu::~GUI2Menu()
GUI2MenuHelper::~GUI2MenuHelper()
MenuEntrySelectedEventData::~MenuEntrySelectedEventData()
GUI2MenuEntryTemplate::GUI2MenuEntryTemplate(EdRegContext&)
GUI2MenuEntryTemplate::Init()
GUI2MenuEntryTemplate::GUI2MenuEntryTemplate()
GUI2MenuEntryTemplate::GUI2MenuEntryTemplate(EdRegContext&, GUI2MenuEntryTemplate&)
GUI2MenuEntryTemplate::~GUI2MenuEntryTemplate()
non-virtual thunk to GUI2MenuEntryTemplate::~GUI2MenuEntryTemplate()
GUI2MenuEntryTemplate::~GUI2MenuEntryTemplate()
non-virtual thunk to GUI2MenuEntryTemplate::~GUI2MenuEntryTemplate()
GUI2MenuEntryTemplate::GetClass() const
GUI2MenuEntryTemplate::Render(VuMtx const*)
EdGUI2MenuEntryTemplateRef::EdGUI2MenuEntryTemplateRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdGUI2MenuEntryTemplateRef::AsOffset(eGUI2AnimBehaviour)
EdGUI2MenuEntryTemplateRef::AsBehaviour(int)
EdGUI2MenuEntryTemplateRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdGUI2MenuEntryTemplateRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
GUI2MenuEntryTemplateHelper::Initialise()
GUI2MenuEntryTemplateHelper::Factory(EdRegContext&, Placeable*)
EdGUI2MenuEntryTemplateRef::~EdGUI2MenuEntryTemplateRef()
GUI2MenuEntryTemplateHelper::~GUI2MenuEntryTemplateHelper()
GUI2MenuEntry::GUI2MenuEntry()
GUI2MenuEntry::Init()
GUI2MenuEntry::GUI2MenuEntry(EdRegContext&)
GUI2MenuEntry::GUI2MenuEntry(EdRegContext&, GUI2MenuEntry&)
GUI2MenuEntry::GetClass() const
GUI2MenuEntry::DoInstanceAction(GUI2InstanceAction)
GUI2MenuEntry::CreateChildInstance()
GUI2MenuEntry::DestroyChildInstance()
GUI2MenuEntry::FindCorrespondingInstanceObject(GUI2Object*, GUI2Object*, eGUI2AnimBehaviour)
GUI2MenuEntry::BehaviourAnimations::operator[](unsigned int)
ClearNotDelete(AnimationLayerList&)
GUI2MenuEntry::AnimationParams::AnimationParams()
GUI2MenuEntry::AnimationParams::Clear()
GUI2MenuEntry::AnimationParams::~AnimationParams()
GUI2MenuEntry::AnimationParams::ClearAnimLayerList()
GUI2MenuEntry::AnimationParams::DestroyAnimationInstance()
GUI2MenuEntry::AnimationParams::GetAnimName()
GUI2MenuEntry::AnimationParams::SetAnimName(char const*)
GUI2MenuEntry::BehaviourAnimations::BehaviourAnimations()
NuVector<GUI2MenuEntry::AnimationParams*>::Reserve(unsigned int, bool)
GUI2MenuEntry::BehaviourAnimations::Clear()
GUI2MenuEntry::BehaviourAnimations::SetAnimationString(char*)
GUI2MenuEntry::PlayMenuEntryAnimation(eGUI2AnimBehaviour)
GUI2MenuEntry::InitInstanceAnimation(eGUI2AnimBehaviour)
GUI2MenuEntry::CopyTemplateAnimations()
GUI2MenuEntry::ProcessAnimations()
GUI2MenuEntry::ClearBehaviourAnimations()
GUI2MenuEntry::OnGUI2Event(eGUI2Event, GUI2EventData*)
SetGUI2ObjColourRecursive(GUI2Object*, unsigned int)
GUI2MenuEntry::SetEntrySelected(bool, bool)
GUI2MenuEntry::OnRender(VuMtx const*)
GUI2MenuEntry::SetText(char const*)
GUI2MenuEntry::GetText()
GUI2MenuEntry::SetCurrentBehaviour(eGUI2AnimBehaviour)
EdGUI2MenuEntryRef::EdGUI2MenuEntryRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdGUI2MenuEntryRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdGUI2MenuEntryRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
GUI2MenuEntryHelper::Initialise()
GUI2MenuEntryHelper::Factory(EdRegContext&, Placeable*)
GUI2MenuEntry::~GUI2MenuEntry()
GUI2MenuEntry::~GUI2MenuEntry()
non-virtual thunk to GUI2MenuEntry::~GUI2MenuEntry()
non-virtual thunk to GUI2MenuEntry::~GUI2MenuEntry()
EdGUI2MenuEntryRef::~EdGUI2MenuEntryRef()
GUI2MenuEntryHelper::~GUI2MenuEntryHelper()
GUI2Panel::GUI2Panel(EdRegContext&)
GUI2Panel::Init()
GUI2Panel::GUI2Panel(EdRegContext&, GUI2Panel&)
GUI2Panel::GUI2Panel()
GUI2Panel::~GUI2Panel()
non-virtual thunk to GUI2Panel::~GUI2Panel()
GUI2Panel::~GUI2Panel()
non-virtual thunk to GUI2Panel::~GUI2Panel()
GUI2Panel::GetClass() const
GUI2Panel::OnRender(VuMtx const*)
GUI2PanelHelper::Initialise()
GUI2PanelHelper::Factory(EdRegContext&, Placeable*)
GUI2PanelHelper::~GUI2PanelHelper()
GUI2Group::GUI2Group(EdRegContext&)
GUI2Group::Init()
GUI2Group::GUI2Group()
GUI2Group::GUI2Group(EdRegContext&, GUI2Group&)
GUI2Group::~GUI2Group()
non-virtual thunk to GUI2Group::~GUI2Group()
GUI2Group::~GUI2Group()
non-virtual thunk to GUI2Group::~GUI2Group()
GUI2Group::GetClass() const
GUI2Group::Render(VuMtx const*)
GUI2GroupHelper::Initialise()
GUI2GroupHelper::Factory(EdRegContext&, Placeable*)
GUI2GroupHelper::~GUI2GroupHelper()
IsGUI2EventInputEvent(eGUI2Event)
IsGUI2EventDirection(eGUI2Event)
AutoForwardToChildren(eGUI2Event)
TrackManager::TrackManager(LevelContainer*)
TrackManager::Initialise()
TrackManager::~TrackManager()
TrackManager::~TrackManager()
TrackManager::Shutdown()
TrackManager::StopAll()
TrackManager::EventNotify(Event&, NuEventData&)
TrackManager::ProcessEffects(Streamer&, SoundEffectsManager*, SoundMultiEffectsArea*)
TrackManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
TrackManager::VolumeLerp(float, float, float, float)
Track::GetVolume()
Track::CanStealUserMusic() const
TrackManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
TrackManager::AddTrack(Track*)
TrackManager::GetTrack(char const*)
Track::GetName()
TrackManager::AddBank(TrackBank*)
TrackManager::GetBank(char const*)
TrackBank::GetName()
TrackManager::SetCurrentBank(TrackBank*)
TrackManager::GetCurrentBank()
TrackManager::IsTrackReadyForPlayback(Track*)
Track::GetSample()
TrackManager::CueTrack(Track*, TrackManager::TrackClass, bool, bool)
Track::GetCanLoop() const
TrackManager::GetFreeStreamer(Track*, TrackManager::TrackClass)
TrackManager::PlayTrack(Track*, SoundManager*)
TrackManager::GetStreamer(Track*)
TrackManager::StopTrack(Track*, bool, float)
TrackManager::PauseAllTracks()
TrackManager::ResumeTracks()
TrackManager::PauseTrack(Track*)
TrackManager::ResumeTrack(Track*)
TrackManager::SetMasterVolume(float)
TrackManager::SetMasterFader(float, float)
TrackManager::SetTrackFader(Track*, float, float, NuSoundEffectFader::FinishState)
TrackManager::SetTrackFader(TrackManager::TrackClass, float, float, NuSoundEffectFader::FinishState)
TrackManager::GetStreamer(TrackManager::TrackClass)
TrackManager::CalculateTrackTargetVolume(Track*, TrackBank*)
TrackBank::GetTrack(TrackManager::TrackClass)
TrackBank::GetVolume(TrackManager::TrackClass)
TrackManager::GetState(Track*)
TrackManager::GetState(TrackManager::TrackClass)
TrackManager::GetVoice(Track*)
TrackManager::GetSoundHandle(Track*)
TrackManager::GetPlaybackPositionSeconds(Track*)
TrackManager::GetPlaybackPositionSamples(Track*)
TrackManager::GetTotalLengthSeconds(Track*)
TrackManager::GetTotalLengthSamples(Track*)
TrackManager::GetStreamer(NuSoundStreamingSample*)
TrackManager::GetStreamerIdx(Track*)
TrackManager::PlayTrack(TrackManager::TrackClass)
TrackManager::StopTrack(TrackManager::TrackClass, bool, float)
TrackManager::PauseTrack(TrackManager::TrackClass)
TrackManager::ResumeTrack(TrackManager::TrackClass)
Track::Track()
Track::Track(char*)
Track::~Track()
Track::~Track()
Track::SetSample(NuSoundStreamingSample*)
Track::GetDownmixerType()
Track::SetDownmixerType(NuSoundSystem::DownmixType)
Track::SetVolume(float)
Track::AddCueTime(float)
Track::GetNumCueTimes()
Track::GetCurrentCueTime()
Track::NextCueTime()
Track::SetCanStealUserMusic(bool)
Track::GetCrossfadeUpTime() const
Track::GetCrossfadeDownTime() const
Track::SetCrossfadeUpTime(float)
Track::SetCrossfadeDownTime(float)
Track::GetDuration() const
Track::SetDuration(float)
Track::SetCanLoop(bool)
Track::GetBus() const
Track::SetBus(NuSoundBus*)
Track::GetRoutingTable() const
Track::SetRoutingTable(NuSoundRoutingTable*)
Track::SetDuckParams(NuSoundBus*, float, float, float)
Track::GetDuckEventData() const
TrackBank::TrackBank()
TrackBank::TrackBank(char const*)
TrackBank::TrackBank(TrackBank const&)
TrackBank::operator=(TrackBank const&)
TrackBank::~TrackBank()
TrackBank::~TrackBank()
TrackBank::operator==(TrackBank const&)
TrackBank::operator!=(TrackBank const&)
TrackBank::SetTrack(TrackManager::TrackClass, Track*)
TrackBank::SetVolume(TrackManager::TrackClass, float)
TrackBank::SetDefaultClass(TrackManager::TrackClass)
TrackBank::GetDefaultClass() const
TrackManager::GetManagerName() const
NuListFind<SoundManager*, NuListNode<SoundManager*> >::Remove(NuListNode<SoundManager*>*, NuListNode<SoundManager*>*, SoundManager* const&)
Streamer::Streamer()
Streamer::~Streamer()
Streamer::~Streamer()
Streamer::Initialise()
Streamer::Shutdown()
Streamer::Stop()
Streamer::Update(float)
Streamer::ReCue()
Streamer::UpdateReverb(bool)
Streamer::GetEffect(NuSoundEffect::EffectType)
Streamer::Cue(Track*, TrackManager::TrackClass, bool, bool)
Streamer::Play(SoundManager*)
Streamer::CreateVoice()
Streamer::CreateDuckInstance(SoundManager*)
Streamer::Pause()
Streamer::Resume()
Streamer::SetVolume(float)
Streamer::GetVolume()
Streamer::SetMainFader(float, float, NuSoundEffectFader::FinishState)
Streamer::GetMainFader()
Streamer::FadeFinished()
Streamer::GetDownmixerType()
Streamer::SetDownmixerType(NuSoundSystem::DownmixType)
Streamer::GetTrack()
Streamer::GetClass()
Streamer::GetState()
Streamer::GetPlaybackPositionSeconds()
Streamer::GetPlaybackPositionSamples()
Streamer::GetTotalLengthSeconds()
Streamer::GetTotalLengthSamples()
Streamer::AddEffect(NuSoundEffect*)
Streamer::RemoveEffect(NuSoundEffect*)
SoundEffectsManager::SoundEffectsManager(LevelContainer&)
SoundEffectsManager::RegisterProcessing()
SoundEffectsManager::~SoundEffectsManager()
SoundEffectsManager::~SoundEffectsManager()
SoundEffectsManager::Initialise()
SoundEffectsManager::Shutdown()
SoundEffectsManager::AddActiveSoundManager(SoundManager&)
SoundEffectsManager::RemoveActiveSoundManager(SoundManager&)
SoundEffectsManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
SoundEffectsManager::GetActiveReverbArea(int, float&)
SoundEffectsManager::GetActiveLowPassArea(int, float&, float&)
SoundEffectsManager::GetActiveEffectsArea(int, int, bool, float&, float&)
SoundEffectsManager::GetActiveEffectsArea(NuSoundListener const*, int, int, bool, float&, float&)
SoundEffectsManager::GetActiveEffectsArea(VuVec const&, int, int, bool, float&, float&)
SoundEffectsManager::GetActiveReverbArea(NuSoundListener const*, int, float&)
SoundEffectsManager::GetActiveLowPassArea(NuSoundListener const*, int, float&, float&)
SoundEffectsManager::GetActiveMusicArea()
SoundEffectsManager::GetManagerName() const
SoundMultiEffectsArea::SoundMultiEffectsArea(EdRegContext&)
SoundMultiEffectsArea::SoundMultiEffectsArea(SoundMultiEffectsArea&, EdRegContext&)
SoundMultiEffectsArea::~SoundMultiEffectsArea()
SoundMultiEffectsArea::TrackChangeParams::~TrackChangeParams()
non-virtual thunk to SoundMultiEffectsArea::~SoundMultiEffectsArea()
SoundMultiEffectsArea::~SoundMultiEffectsArea()
non-virtual thunk to SoundMultiEffectsArea::~SoundMultiEffectsArea()
SoundMultiEffectsArea::GetClass() const
SoundMultiEffectsArea::GetTransform(VuMtx&) const
SoundMultiEffectsArea::SetTransform(VuMtx const&)
SoundMultiEffectsArea::GetDistanceNear(VuVec const&)
SoundMultiEffectsArea::DistanceSqToBox(VuMtx const&, VuVec const&, float)
SoundMultiEffectsArea::DistanceSqToCylinderSq(VuMtx const&, VuVec const&, float)
SoundMultiEffectsArea::GetDistanceFar(VuVec const&)
SoundMultiEffectsArea::NearContainsPoint(VuVec const&)
SoundMultiEffectsArea::PointInsideBox(VuMtx const&, VuVec const&, float)
SoundMultiEffectsArea::FarContainsPoint(VuVec const&)
SoundMultiEffectsArea::GetShapeVolume()
SoundMultiEffectsArea::GetReverbParams()
SoundMultiEffectsArea::GetLowPassParams()
SoundMultiEffectsArea::GetOcclusionParams()
SoundMultiEffectsArea::GetTrackChangeParams()
EdRefSoundMultiEffectsArea::EdRefSoundMultiEffectsArea(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdRefSoundMultiEffectsArea::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSoundMultiEffectsArea::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SoundMultiEffectsAreaHelper::SoundMultiEffectsAreaHelper()
SoundMultiEffectsAreaHelper::Initialise()
SoundMultiEffectsAreaHelper::GetManNumObjects(ClassManager*, void*)
SoundMultiEffectsAreaHelper::GetManNextObject(ClassManager*, void*, void*)
SoundMultiEffectsAreaHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
SoundMultiEffectsAreaHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
SoundMultiEffectsAreaHelper::AddBaseObject(EdRegContext*, ClassObject&)
SoundMultiEffectsAreaHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
SoundMultiEffectsArea::TrackManagerClassToTrackType(TrackManager::TrackClass)
SoundMultiEffectsArea::TrackManagerClassToVoiceType(TrackManager::TrackClass)
SoundMultiEffectsArea::TrackTypeToTrackManagerClass(SoundMultiEffectsArea::TrackType)
SoundMultiEffectsArea::GetVisibility() const
SoundMultiEffectsArea::SetVisibility(int)
EdRefSoundMultiEffectsArea::~EdRefSoundMultiEffectsArea()
SoundMultiEffectsAreaHelper::~SoundMultiEffectsAreaHelper()
SoundEventData::SoundEventData(char const*, SoundEventData::EventType)
SoundEventData::operator=(SoundEventData const&)
NuList<SoundEventData*>::operator=(NuList<SoundEventData*> const&)
SoundEventData::RequestSampleLoads(SampleLoader&)
SoundEventData::RequestSampleUnloads(SampleLoader&)
SoundEventData::GetName() const
SoundEventData::SetName(char const*)
SoundEventData::IsPositional() const
SoundEventData::SetPositional(bool)
SoundEventData::CanTriggerOutsideFalloff() const
SoundEventData::SetTriggerOutsideFalloff(bool)
SoundEventData::SetDefaultNear(float)
SoundEventData::SetDefaultFar(float)
SoundEventData::SetDefaultFalloffType(NuSoundSystem::FalloffType)
SoundEventData::GetDefaultNear() const
SoundEventData::GetDefaultFar() const
SoundEventData::GetDefaultFalloffType() const
SoundEventData::GetIndex() const
SoundEventData::SetIndex(short)
SoundEventData::GetHashNext() const
SoundEventData::SetHashNext(SoundEventData*)
SoundEventData::AddChildEvent(SoundEventData&)
SoundEventData::SetParent(SoundEventData*)
SoundEventData::GetParent() const
SoundEventData::GetChildren() const
SoundEventData::SetGroup(SoundEventDataGroup*)
SoundEventData::GetGroup() const
SoundEventData::GetEventType() const
SoundEventData::IsLoopable() const
SoundEventInstance::Create(SoundManager&, SoundEventData const&, SoundEventInstance::InstanceParams const&)
SoundEventInstance::SoundEventInstance(SoundManager&, SoundEventData const&, SoundEventInstance::InstanceParams const&)
SoundEventInstance::~SoundEventInstance()
SoundEventInstance::~SoundEventInstance()
SoundEventInstance::GetEventType() const
SoundEventInstance::GetEventData() const
SoundEventInstance::GetSoundHandle() const
SoundEventInstance::GetSoundManager() const
SoundEventInstance::AddChild(SoundEventInstance&)
SoundEventInstance::SetParent(SoundEventInstance*)
SoundEventInstance::RemoveChild(SoundEventInstance&)
SoundEventInstance::GetVoice() const
SoundEventInstance::SetVoice(NuSoundVoice*)
SoundEventInstance::GetChildren() const
SoundEventInstance::GetParent() const
SoundEventInstance::BeginEvent()
SoundEventInstance::EndEvent()
SoundEventInstance::UpdateEvent(float)
SoundEventInstance::UpdateInstanceParams(SoundEventInstance::InstanceParams&)
SoundEventInstance::HasFinished()
SoundEventInstance::OnSoundHandleStopped(NuSoundHandle&)
SoundEventInstance::OnSoundHandleDestroyed(NuSoundHandle&)
SoundEventInstance::OnSoundHandleTouched(NuSoundHandle&)
SoundEventInstance::GetTouchCounter() const
SoundEventInstance::IncrementTouchCounter()
SoundEventInstance::ResetTouchCounter()
SoundEventData::~SoundEventData()
NuListFind<NuSoundHandle::Callback*, NuListNode<NuSoundHandle::Callback*> >::Remove(NuListNode<NuSoundHandle::Callback*>*, NuListNode<NuSoundHandle::Callback*>*, NuSoundHandle::Callback* const&)
NuSoundWeakPtr<NuSoundVoice>::Set(NuSoundVoice*)
SoundEventDataDuck::SoundEventDataDuck(char const*)
SoundEventDataDuck::operator=(SoundEventDataDuck const&)
SoundEventDataDuck::GetDuckBusses()
SoundEventDataDuck::GetDuckScale() const
SoundEventDataDuck::GetDuckAttackTime() const
SoundEventDataDuck::GetDuckSustainTime() const
SoundEventDataDuck::GetDuckReleaseTime() const
SoundEventDataDuck::AddDuckBus(NuSoundBus*)
SoundEventDataDuck::SetDuckScale(float)
SoundEventDataDuck::SetDuckAttackTime(float)
SoundEventDataDuck::SetDuckSustainTime(float)
SoundEventDataDuck::SetDuckReleaseTime(float)
SoundEventDuck::Create(SoundManager&, SoundEventDataDuck const&, SoundEventInstance::InstanceParams const&)
SoundEventDuck::SoundEventDuck(SoundManager&, SoundEventDataDuck const&, SoundEventInstance::InstanceParams const&)
SoundEventDuck::~SoundEventDuck()
SoundEventDuck::~SoundEventDuck()
SoundEventDuck::BeginEvent()
SoundEventDuck::EndEvent()
SoundEventDuck::UpdateEvent(float)
SoundEventDuck::HasFinished()
SoundEventDuck::GetCurrentAttenuation()
KeyframeTrackSound::KeyframeTrackSound(EdRegContext&, EdRef*, char const*, EDREG_FLAGS)
KeyframeTrackSound::CreateSubTracks(EdRegContext&)
KeyframeTrackSound::KeyframeTrackSound(EdRegContext&, KeyframeTrackSound&, EDREG_FLAGS)
KeyframeTrackSound::~KeyframeTrackSound()
KeyframeTrackSound::~KeyframeTrackSound()
KeyframeTrackSound::Process(ClassObject, AnimationLayer*, ArithmeticOperator, AnimationInstanceValue*) const
KeyframeTrackSound::SetObjectValue(ClassObject, AnimationInstanceValue*)
KeyframeTrackSound::GetObjectValue(ClassObject, AnimationInstanceValue*)
KeyframeTrackSound::GetComponent()
KeyframeSoundTrackHelper::Initialise()
KeyframeSoundTrackHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
KeyframeSoundTrackHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
KeyframeSoundTrackHelper::GetObjectPrams(void*, void*, int)
KeyframeTrackSound::GetSubTrack(unsigned int)
KeyframeTrackSound::GetSubTrack(unsigned int) const
KeyframeTrackSound::GetSubTrackCount() const
KeyframeSoundTrackHelper::~KeyframeSoundTrackHelper()
KeyframeSoundTrackHelper::GetTrackType() const
SoundMusicArea::SoundMusicArea(EdRegContext&)
SoundMusicArea::SoundMusicArea(SoundMusicArea&, EdRegContext&)
SoundMusicArea::~SoundMusicArea()
non-virtual thunk to SoundMusicArea::~SoundMusicArea()
SoundMusicArea::~SoundMusicArea()
non-virtual thunk to SoundMusicArea::~SoundMusicArea()
SoundMusicArea::GetClass() const
SoundMusicArea::Reset()
SoundMusicArea::Process(float)
SoundMusicArea::GetTransform(VuMtx&) const
SoundMusicArea::SetTransform(VuMtx const&)
SoundMusicArea::GetDistanceSq(VuVec const&)
SoundMusicArea::ContainsPoint(VuVec const&)
SoundMusicArea::GetBankName()
SoundMusicArea::GetBank()
SoundMusicArea::SetBankName(char const*)
EdRefSoundMusicArea::EdRefSoundMusicArea(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdRefSoundMusicArea::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSoundMusicArea::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SoundMusicAreaHelper::SoundMusicAreaHelper()
SoundMusicAreaHelper::Initialise()
SoundMusicAreaHelper::GetManNumObjects(ClassManager*, void*)
SoundMusicAreaHelper::GetManNextObject(ClassManager*, void*, void*)
SoundMusicAreaHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
SoundMusicAreaHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
SoundMusicAreaHelper::AddBaseObject(EdRegContext*, ClassObject&)
SoundMusicAreaHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
SoundMusicArea::GetVisibility() const
SoundMusicArea::SetVisibility(int)
EdRefSoundMusicArea::~EdRefSoundMusicArea()
SoundMusicAreaHelper::~SoundMusicAreaHelper()
NuVector<SoundEventData*>::~NuVector()
SpeechLoader::~SpeechLoader()
NuList<SoundEventDataSample*>::~NuList()
NuEList<SoundEventDataSample, DefaultElist>::~NuEList()
CreateSoundManager(LevelContainer&)
SoundManager::SoundManager(LevelContainer&)
SoundManager::Clear()
SoundManager::RegisterProcessing()
SoundManager::RegisterRendering()
SoundManager::SoundManager()
SoundManager::~SoundManager()
SoundManager::~SoundManager()
SoundManager::DestroyAllSoundEventInstances()
SoundManager::Initialise()
SoundManager::CacheSamplesToHDD()
SoundManager::Shutdown()
SoundManager::LoadConfigFiles(char const*, char const*, char const*, char const*, char const*)
SoundManager::AddSoundEventData(SoundEventData*)
SoundManager::GetSoundEventData(char const*)
SoundManager::GetSoundEventId(char const*)
SoundManager::GetSoundEventName(short)
SoundManager::GetSoundEventData(short)
SoundManager::LoadGlobalSamples()
SoundManager::RequestResourceLoad(SoundEventData*)
SoundManager::CreateSoundEventInstances(SoundEventData const&, SoundEventInstance::InstanceParams const&, SoundEventInstance*)
SoundManager::GetSampleEventOverrides(SoundEventDataSample const&)
SoundManager::CreateOverriddenEventData(SoundInfoOverrides&, SoundEventDataSample const&)
SoundManager::DestroySoundEventInstances(SoundEventInstance*)
SoundManager::DestroyOverriddenEventData(SoundEventDataSample*)
SoundManager::HaveSoundEventInstancesFinished(SoundEventInstance*)
SoundManager::TriggerSoundEvent(SoundEventData const&, VuVec*, NuSoundHandle*, float, float, SoundEventInstance::InstanceParams::LoopBehaviour, int, NuSoundSystem::SurroundMode, VuVec*, bool)
SoundManager::PlaySample(SoundEventData const*, VuVec*, NuSoundHandle*, float, float, SoundEventInstance::InstanceParams::LoopBehaviour, int, NuSoundSystem::SurroundMode, VuVec*, bool)
SoundManager::PlaySample(short, VuVec*, NuSoundHandle*, float, float, SoundEventInstance::InstanceParams::LoopBehaviour, int)
SoundManager::PlaySample_Legacy(short, NUVEC const*, NuSoundHandle*, float, float, SoundEventInstance::InstanceParams::LoopBehaviour, int)
SoundManager::StopAllSfx(bool)
SoundManager::PauseAll()
SoundManager::ResumeAll()
SoundManager::WithinFalloff(VuVec*, float)
SoundManager::RequestResourceUnload(SoundEventData*)
SoundManager::PurgeSamplesForSpareMemory(int, SoundEventDataSample*)
SoundManager::GetMaxVoices()
SoundManager::CountNumVoices(SoundEventDataSample const&)
SoundManager::GetOldestVoice(SoundEventDataSample const&)
SoundManager::AddScene(int)
SoundManager::RemoveScene(int)
SoundManager::EventNotify(Event&, NuEventData&)
SoundManager::SetBlacklistedSampleList()
SoundManager::ProcessBlacklistedSamples()
SoundManager::ClearBlacklistedSamples()
SoundManager::DebugProcess(ManagerProcessData*)
SoundManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
SoundManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
SoundManager::GetClass(int)
SoundManager::GetNumClasses()
SoundManager::GetNumObjects(void*)
SoundManager::GetNextObject(void*, void*)
SoundManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
SoundManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
SoundManager::FindSoundPlaceable(char const*)
SoundManager::FindEffectsArea(char const*)
SoundManager::BlacklistSample(char*)
SoundManager::IsSoundEventBlacklisted(SoundEventData const*)
SoundManager::AddSampleForceLoad(char*)
SoundManager::IsEventDataForcedToLoad(SoundEventData const*)
SoundManager::AddLowPriorityLoadedEvent(SoundEventDataSample*)
SoundManager::RemoveLowPriorityLoadedEvent(SoundEventDataSample*)
SoundManager::SortLowPriorityEventList()
OutOfAudioMemCallback::OutOfAudioMemCallback(SoundEventDataSample*)
OutOfAudioMemCallback::OnOutOfMem(int)
OutOfAudioMemCallback::OnFragmented(int)
SoundManager::GetManagerName() const
OutOfAudioMemCallback::~OutOfAudioMemCallback()
NuSoundOutOfMemCallback::~NuSoundOutOfMemCallback()
NuListFind<NuSoundHandle, NuListNode<NuSoundHandle> >::Remove(NuListNode<NuSoundHandle>*, NuListNode<NuSoundHandle>*, NuSoundHandle const&)
NuEListSort<SoundEventDataSample, SoundEventDataSample, DefaultElist>::DefaultLessThanCompare(SoundEventDataSample const&, SoundEventDataSample const&)
SoundEventDataSample* NuEListSort<SoundEventDataSample, SoundEventDataSample, DefaultElist>::MergeSort<bool (*)(SoundEventDataSample const&, SoundEventDataSample const&)>(bool (*)(SoundEventDataSample const&, SoundEventDataSample const&), SoundEventDataSample*, unsigned int)
SoundInfoOverrides::SoundInfoOverrides(SoundEventData*)
SoundInfoOverrides::SoundInfoOverrides(EdRegContext&)
SoundInfoOverrides::SoundInfoOverrides(SoundInfoOverrides&, EdRegContext&)
SoundInfoOverrides::~SoundInfoOverrides()
NuEList<SoundEventDataSample::ListenerSensitivity, DefaultElist>::Clear()
SoundInfoOverrides::operator=(SoundInfoOverrides const&)
SoundInfoOverrides::Read(nufpar_s*)
SoundInfoOverrides::IsOverridden(SoundInfoOverrides::eOverrideProperties)
SoundInfoOverridesList::GetBySampleInfo(SoundEventData const*)
EdRefSoundOverrides::EdRefSoundOverrides(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdRefSoundOverrides::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSoundOverrides::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SoundOverridesHelper::SoundOverridesHelper()
SoundOverridesHelper::Initialise()
SoundOverridesHelper::GetManNumObjects(ClassManager*, void*)
SoundOverridesHelper::GetManNextObject(ClassManager*, void*, void*)
SoundOverridesHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
SoundOverridesHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
EdRefSoundOverrides::~EdRefSoundOverrides()
SoundOverridesHelper::~SoundOverridesHelper()
Speech::Speech()
Speech::Speech(NuSoundSample&)
Speech::GetSample() const
Speech::Load(void*, unsigned int)
Speech::Unload()
SpeechPack::SpeechPack(char const*)
SpeechPack::SpeechPack(SpeechPack const&)
SpeechPack::GetName() const
SpeechPack::IsLoaded() const
SpeechPack::~SpeechPack()
NuHashMap<NuDynamicStringT<true>, Speech>::~NuHashMap()
SpeechPack::~SpeechPack()
SpeechPack::SetLoaded(bool)
SpeechPack::UnloadAll()
SpeechPack::GetSpeech(char const*)
NuHashMap<NuDynamicStringT<true>, Speech>::Find(NuDynamicStringT<true> const&) const
SpeechPack::AddSpeech(char const*, NuSoundSample&)
NuHashMap<NuDynamicStringT<true>, Speech>::Insert(NuDynamicStringT<true> const&, Speech const&)
NuHashMap<NuDynamicStringT<true>, Speech>::operator[](NuDynamicStringT<true> const&)
SpeechLoader::RequestResourceLoad(SpeechPack&)
SpeechLoader::BgProcCallback(void*)
SpeechLoader::RequestResourceUnload(SpeechPack&)
SpeechLoader::FlushRequests()
SpeechLoader::BgProcJob()
SpeechPackFileRequest::SpeechPackFileRequest(char const*, NuSmartPtr<SpeechPack, false>)
SpeechPackFileRequest::~SpeechPackFileRequest()
SpeechPackFileRequest::~SpeechPackFileRequest()
SpeechPackFileRequest::Read(bool volatile*)
NuList<NuHashMapNode<NuDynamicStringT<true>, Speech> >::DeleteNode(NuListNode<NuHashMapNode<NuDynamicStringT<true>, Speech> >*)
SVarSpeech::Init()
SAction_SVarSpeech_Constructor_SpeechPack::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarSpeech, SVarSpeechData>(int, SVarSpeechData)
SVarSpeechData::SVarSpeechData(SVarSpeechData&)
SAction_SVarSpeech_Constructor_Text::Exec(ScriptContext&)
SAction_SVarSpeech_Base::Exec(ScriptContext&)
SAction_SVarSpeech_Load::SpeechExec(ScriptContext&, SVarSpeechData&)
SAction_SVarSpeech_Release::SpeechExec(ScriptContext&, SVarSpeechData&)
SAction_SVarSpeech_IsLoaded::SpeechExec(ScriptContext&, SVarSpeechData&)
SAction_SVarSpeech_Play::SpeechExec(ScriptContext&, SVarSpeechData&)
SVarSpeech_Play(LevelContainer*, SVarSpeechData&)
SAction_SVarSpeech_Stop::SpeechExec(ScriptContext&, SVarSpeechData&)
SVarSpeech_Stop(SVarSpeechData&)
SAction_SVarSpeech_IsPlaying::SpeechExec(ScriptContext&, SVarSpeechData&)
SVarSpeech_IsPlaying(SVarSpeechData&)
SAction_SVarSpeech_SetCharacter::SpeechExec(ScriptContext&, SVarSpeechData&)
SAction_SVarSpeech_SetOutputDevice::SpeechExec(ScriptContext&, SVarSpeechData&)
SAction_SVarSpeech_SetDuckingScale::SpeechExec(ScriptContext&, SVarSpeechData&)
SAction_SVarSpeech_SetFalloff::SpeechExec(ScriptContext&, SVarSpeechData&)
SAction_SVarSpeech_GetDuration::SpeechExec(ScriptContext&, SVarSpeechData&)
SVarSpeech_GetDuration(SVarSpeechData&)
SAction_SVarSpeech_GetPlaybackTime::SpeechExec(ScriptContext&, SVarSpeechData&)
SAction_SVarSpeech_Constructor_SpeechPack::~SAction_SVarSpeech_Constructor_SpeechPack()
SAction_SVarSpeech_Constructor_SpeechPack::GetName() const
SAction_SVarSpeech_Constructor_SpeechPack::GetInputs(SCmdParams&) const
SAction_SVarSpeech_Constructor_SpeechPack::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_Constructor_Text::~SAction_SVarSpeech_Constructor_Text()
SAction_SVarSpeech_Constructor_Text::GetName() const
SAction_SVarSpeech_Constructor_Text::GetInputs(SCmdParams&) const
SAction_SVarSpeech_Constructor_Text::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_Base::~SAction_SVarSpeech_Base()
SAction_SVarSpeech_Load::~SAction_SVarSpeech_Load()
SAction_SVarSpeech_Load::GetName() const
SAction_SVarSpeech_Load::GetInputs(SCmdParams&) const
SAction_SVarSpeech_Load::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_Release::~SAction_SVarSpeech_Release()
SAction_SVarSpeech_Release::GetName() const
SAction_SVarSpeech_Release::GetInputs(SCmdParams&) const
SAction_SVarSpeech_Release::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_Play::~SAction_SVarSpeech_Play()
SAction_SVarSpeech_Play::GetName() const
SAction_SVarSpeech_Play::GetInputs(SCmdParams&) const
SAction_SVarSpeech_Play::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_Stop::~SAction_SVarSpeech_Stop()
SAction_SVarSpeech_Stop::GetName() const
SAction_SVarSpeech_Stop::GetInputs(SCmdParams&) const
SAction_SVarSpeech_Stop::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_IsLoaded::~SAction_SVarSpeech_IsLoaded()
SAction_SVarSpeech_IsLoaded::GetName() const
SAction_SVarSpeech_IsLoaded::GetInputs(SCmdParams&) const
SAction_SVarSpeech_IsLoaded::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_IsPlaying::~SAction_SVarSpeech_IsPlaying()
SAction_SVarSpeech_IsPlaying::GetName() const
SAction_SVarSpeech_IsPlaying::GetInputs(SCmdParams&) const
SAction_SVarSpeech_IsPlaying::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_SetCharacter::~SAction_SVarSpeech_SetCharacter()
SAction_SVarSpeech_SetCharacter::GetName() const
SAction_SVarSpeech_SetCharacter::GetInputs(SCmdParams&) const
SAction_SVarSpeech_SetCharacter::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_SetOutputDevice::~SAction_SVarSpeech_SetOutputDevice()
SAction_SVarSpeech_SetOutputDevice::GetName() const
SAction_SVarSpeech_SetOutputDevice::GetInputs(SCmdParams&) const
SAction_SVarSpeech_SetOutputDevice::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_SetDuckingScale::~SAction_SVarSpeech_SetDuckingScale()
SAction_SVarSpeech_SetDuckingScale::GetName() const
SAction_SVarSpeech_SetDuckingScale::GetInputs(SCmdParams&) const
SAction_SVarSpeech_SetDuckingScale::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_SetFalloff::~SAction_SVarSpeech_SetFalloff()
SAction_SVarSpeech_SetFalloff::GetName() const
SAction_SVarSpeech_SetFalloff::GetInputs(SCmdParams&) const
SAction_SVarSpeech_SetFalloff::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_GetDuration::~SAction_SVarSpeech_GetDuration()
SAction_SVarSpeech_GetDuration::GetName() const
SAction_SVarSpeech_GetDuration::GetInputs(SCmdParams&) const
SAction_SVarSpeech_GetDuration::GetOutputs(SCmdParams&) const
SAction_SVarSpeech_GetPlaybackTime::~SAction_SVarSpeech_GetPlaybackTime()
SAction_SVarSpeech_GetPlaybackTime::GetName() const
SAction_SVarSpeech_GetPlaybackTime::GetInputs(SCmdParams&) const
SAction_SVarSpeech_GetPlaybackTime::GetOutputs(SCmdParams&) const
NuList<NuSoundBus*>::operator=(NuList<NuSoundBus*> const&)
ScriptVariable* CreateObject<SVarSpeech>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarSpeech>(char const*, ScriptContext&)
SVarSpeech::~SVarSpeech()
SVarSpeech::~SVarSpeech()
SVarSpeech::Equals(ScriptVariable const*)
SVarSpeech::Set(ScriptVariable const*)
SVarSpeechData::operator=(SVarSpeechData&)
NuSmartPtr<Track, false>::~NuSmartPtr()
SVarTrackBank::Init()
SAction_SVarTrackBank_Constructor::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarTrackBank, NuSmartPtr<TrackBank, false> >(int, NuSmartPtr<TrackBank, false>)
SAction_SetTrackBank::Exec(ScriptContext&)
SVarTrack::Init()
SAction_SVarTrack_Constructor::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarTrack, NuSmartPtr<Track, false> >(int, NuSmartPtr<Track, false>)
SAction_SetTrack::Exec(ScriptContext&)
SAction_ClearTrackBank::Exec(ScriptContext&)
SAction_SVarTrackBank_Constructor::~SAction_SVarTrackBank_Constructor()
SAction_SVarTrackBank_Constructor::GetName() const
SAction_SVarTrackBank_Constructor::GetInputs(SCmdParams&) const
SAction_SVarTrackBank_Constructor::GetOutputs(SCmdParams&) const
SAction_SetTrackBank::~SAction_SetTrackBank()
SAction_SetTrackBank::GetName() const
SAction_SetTrackBank::GetInputs(SCmdParams&) const
SAction_SetTrackBank::GetOutputs(SCmdParams&) const
SAction_ClearTrackBank::~SAction_ClearTrackBank()
SAction_ClearTrackBank::GetName() const
SAction_ClearTrackBank::GetInputs(SCmdParams&) const
SAction_ClearTrackBank::GetOutputs(SCmdParams&) const
SAction_SVarTrack_Constructor::~SAction_SVarTrack_Constructor()
SAction_SVarTrack_Constructor::GetName() const
SAction_SVarTrack_Constructor::GetInputs(SCmdParams&) const
SAction_SVarTrack_Constructor::GetOutputs(SCmdParams&) const
SAction_SetTrack::~SAction_SetTrack()
SAction_SetTrack::~SAction_SetTrack()
SAction_SetTrack::GetName() const
SAction_SetTrack::GetInputs(SCmdParams&) const
SAction_SetTrack::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarTrackBank>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarTrackBank>(char const*, ScriptContext&)
SVarTrackBank::~SVarTrackBank()
SVarTrackBank::~SVarTrackBank()
SVarTrackBank::Equals(ScriptVariable const*)
SVarTrackBank::Set(ScriptVariable const*)
ScriptVariable* CreateObject<SVarTrack>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarTrack>(char const*, ScriptContext&)
SVarTrack::~SVarTrack()
SVarTrack::~SVarTrack()
SVarTrack::Equals(ScriptVariable const*)
SVarTrack::Set(ScriptVariable const*)
SampleLoader::SampleLoader()
SampleLoader::~SampleLoader()
SampleLoader::RequestSampleLoad(SoundEventDataSample&)
SampleLoader::RequestSampleLoad(NuSoundSample&, SoundEventDataSample*)
SampleLoader::RequestSampleUnload(SoundEventDataSample&)
SampleLoader::RequestSampleUnload(NuSoundSample&, SoundEventDataSample*)
SampleLoader::GetPAKFilename(SoundEventDataSample*)
SampleLoader::RemoveFromUnloadQueue(SampleLoader::QueueItem&)
SampleLoader::AddToLoadQueue(SampleLoader::QueueItem&)
SampleLoader::RemoveFromLoadQueue(SampleLoader::QueueItem&)
SampleLoader::RemoveFromRetryQueue(SampleLoader::QueueItem&)
SampleLoader::RemoveFromFileManager(SampleLoader::QueueItem&)
SampleLoader::AddToUnloadQueue(SampleLoader::QueueItem&)
SampleLoader::AddSampleToRetry(NuSoundSample&, SoundEventDataSample*)
SampleLoader::AddToRetryQueue(SampleLoader::QueueItem&)
SampleLoader::ProcessLoadQueue()
SampleLoader::BackgroundJobsWaiting()
SampleLoader::OnMainThread()
SampleLoader::BackgroundJobInQueue()
SampleLoader::BackgroundLoadingLocked()
SampleLoader::SubmitBackgroundJob()
SampleLoader::BackgroundJobProcess()
SampleLoader::SetPAKFilenames(NuString&, NuString&, NuString&)
SampleLoader::GetGlobalPAKFilename()
SampleLoader::GetDynamicPAKFilename()
SampleLoader::GetDlcPAKFilename()
SampleLoader::FormatPAKPath(NuFixedStringT<(unsigned short)128>&)
SampleLoader::BgProcLoadingCallback(void*)
SampleLoader::FinishedBackgroundJob()
SampleLoader::ForegroundJobsWaiting()
SampleLoader::GetLastSubmittedJobId() const
SampleLoader::GetLastProcessedJobId() const
SampleLoader::JobsWaiting()
SampleLoader::SetMainThreadId(NuThread*)
SampleLoader::SetBackgroundLoadingLock(bool)
SampleLoader::Flush()
SampleLoader::InLoadQueue(SampleLoader::QueueItem const&) const
SampleLoader::InUnloadQueue(SampleLoader::QueueItem const&) const
SampleLoader::InRetryQueue(SampleLoader::QueueItem const&) const
NuListFind<SampleLoader::QueueItem, NuListNode<SampleLoader::QueueItem> >::Remove(NuListNode<SampleLoader::QueueItem>*, NuListNode<SampleLoader::QueueItem>*, SampleLoader::QueueItem const&)
NuEListSort<SoundFileRequest, SoundFileRequest, DefaultElist>::DefaultLessThanCompare(SoundFileRequest const&, SoundFileRequest const&)
SoundFileRequest* NuEListSort<SoundFileRequest, SoundFileRequest, DefaultElist>::MergeSort<bool (*)(SoundFileRequest const&, SoundFileRequest const&)>(bool (*)(SoundFileRequest const&, SoundFileRequest const&), SoundFileRequest*, unsigned int)
SampleParser::SampleParser()
SampleParser::~SampleParser()
SampleParser::Parse(DynamicString)
SampleParser::ParseFile()
SampleParser::ParsePlatform()
SampleParser::ParseLanguage()
SampleParser::ParseInclude()
SampleParser::ParseEvent()
SampleParser::ParseSampleEvent()
SampleParser::ParseGroupEvent()
SampleParser::ParseDuckEvent()
SampleParser::ParseRumbleEvent()
SampleParser::ParseConnection()
SampleParser::SubstituteString(char*, char const*, char const*, char const*)
SampleParser::SampleOverrides(nufpar_s*)
SampleParser::EndIfPlatform(nufpar_s*)
SampleParser::IfPlatform(nufpar_s*)
SampleParser::GroupOverrides(nufpar_s*)
SampleParser::SampleDisable(nufpar_s*)
SampleParser::SampleForceLoad(nufpar_s*)
TrackParser::TrackParser()
TrackParser::~TrackParser()
TrackParser::Parse(DynamicString)
TrackParser::ParseFile()
TrackParser::ParsePlatform()
TrackParser::ParseLanguage()
TrackParser::ParseBank()
TrackParser::ParseTrack(TrackBank*)
TrackParser::SubstituteString(char*, char const*, char const*, char const*)
BankParser::BankParser()
BankParser::BankParser(nufpar_s*)
BankParser::~BankParser()
BankParser::Parse(DynamicString)
BankParser::ParseFile()
BankParser::ParsePlatform()
BankParser::ParseLanguage()
BankParser::ParseBank()
BankParser::ParseTrack(TrackBank*)
BusParser::BusParser()
BusParser::~BusParser()
BusParser::Parse(DynamicString)
BusParser::ParseFile()
BusParser::ParseBus()
BusParser::ParseConnection()
RoutingParser::RoutingParser()
RoutingParser::~RoutingParser()
RoutingParser::Parse(DynamicString)
RoutingParser::ParseFile()
RoutingParser::ParseInclude()
RoutingParser::ParseTable()
RoutingParser::ParseMatrix()
RoutingParser::GetConfigByName(DynamicString&)
SoundEventDataSample::SoundEventDataSample(char const*)
SoundEventDataSample::~SoundEventDataSample()
SoundEventDataSample::~SoundEventDataSample()
SoundEventDataSample::SoundEventDataSample(SoundEventDataSample const&)
SoundEventDataSample::operator=(SoundEventDataSample const&)
SoundEventDataSample::AddListenerSensitivity(char const*, float)
SoundEventDataSample::SetSourceSample(NuSoundSample*)
SoundEventDataSample::SetPAKFileSource(SoundEventDataSample::PAKFileSource)
SoundEventDataSample::SetGlobal(bool)
SoundEventDataSample::SetLoadPriority(int)
SoundEventDataSample::SetLoopable(bool)
SoundEventDataSample::SetReverb(bool)
SoundEventDataSample::SetDoppler(bool)
SoundEventDataSample::SetLowPassScale(bool)
SoundEventDataSample::SetUpdateMix(bool)
SoundEventDataSample::SetMaxVoices(int)
SoundEventDataSample::SetMaxVoicesBehaviour(SoundEventDataSample::MaxVoicesBehaviour)
SoundEventDataSample::SetVolume(float)
SoundEventDataSample::SetStartOffset(float)
SoundEventDataSample::SetPitch(float)
SoundEventDataSample::SetLFEMix(float)
SoundEventDataSample::SetFieldAngleMin(float)
SoundEventDataSample::SetFieldAngleMax(float)
SoundEventDataSample::SetBleedAngle(float)
SoundEventDataSample::SetBleedNear(float)
SoundEventDataSample::SetBleedFar(float)
SoundEventDataSample::SetDownmixType(NuSoundSystem::DownmixType)
SoundEventDataSample::SetOutputBus(NuSoundBus*)
SoundEventDataSample::SetRoutingTable(NuSoundRoutingTable*)
SoundEventDataSample::SetLowPassScale(float)
SoundEventDataSample::SetLowPassQ(float)
SoundEventDataSample::SetReverbWetMix(float)
SoundEventDataSample::SetFadeInTime(float)
SoundEventDataSample::SetFadeOutTime(float)
SoundEventDataSample::SetPitchRampStart(float)
SoundEventDataSample::SetPitchRampTarget(float)
SoundEventDataSample::SetPitchRampEnd(float)
SoundEventDataSample::SetPitchRampUpTime(float)
SoundEventDataSample::SetPitchRampDownTime(float)
SoundEventDataSample::SetDopplerEffectScale(float)
SoundEventDataSample::SetRandomVolumeScale(float)
SoundEventDataSample::SetRandomStartOffset(float)
SoundEventDataSample::SetRandomPitchScale(float)
SoundEventDataSample::SetRandomLowPassScale(float)
SoundEventDataSample::SetLowPassRolloffNear(float)
SoundEventDataSample::SetLowPassRolloffFar(float)
SoundEventDataSample::SetOutputDevices(int)
SoundEventDataSample::GetSource() const
SoundEventDataSample::GetSourceSample() const
SoundEventDataSample::GetPAKFileSource() const
SoundEventDataSample::RequestSampleLoads(SampleLoader&)
SoundEventDataSample::RequestSampleUnloads(SampleLoader&)
SoundEventDataSample::IsGlobal() const
SoundEventDataSample::GetVolume() const
SoundEventDataSample::GetPitch() const
SoundEventDataSample::GetLFEMix() const
SoundEventDataSample::GetFieldAngleMin() const
SoundEventDataSample::GetFieldAngleMax() const
SoundEventDataSample::GetBleedAngle() const
SoundEventDataSample::GetBleedNear() const
SoundEventDataSample::GetBleedFar() const
SoundEventDataSample::GetDownmixerType() const
SoundEventDataSample::GetOutputBus() const
SoundEventDataSample::GetRoutingTable() const
SoundEventDataSample::GetLowPassScale() const
SoundEventDataSample::GetLowPassQ() const
SoundEventDataSample::GetReverbWetMix() const
SoundEventDataSample::GetLoadPriority() const
SoundEventDataSample::IsLoopable() const
SoundEventDataSample::HasReverb() const
SoundEventDataSample::HasDoppler() const
SoundEventDataSample::HasLowPass() const
SoundEventDataSample::CanUpdateMix() const
SoundEventDataSample::GetFadeInTime() const
SoundEventDataSample::GetFadeOutTime() const
SoundEventDataSample::GetPitchRampStart() const
SoundEventDataSample::GetPitchRampTarget() const
SoundEventDataSample::GetPitchRampEnd() const
SoundEventDataSample::GetPitchRampUpTime() const
SoundEventDataSample::GetPitchRampDownTime() const
SoundEventDataSample::GetDopplerEffectScale() const
SoundEventDataSample::GetStartOffset() const
SoundEventDataSample::GetRandomStartOffset() const
SoundEventDataSample::GetRandomVolumeScale() const
SoundEventDataSample::GetRandomPitchScale() const
SoundEventDataSample::GetRandomLowPassScale() const
SoundEventDataSample::GetLowPassRolloffFar() const
SoundEventDataSample::GetLowPassRolloffNear() const
SoundEventDataSample::GetMaxVoices() const
SoundEventDataSample::GetMaxVoicesBehaviour() const
SoundEventDataSample::GetListenerSensitivities() const
SoundEventDataSample::GetOutputDevices() const
SoundEventDataSample::OverrideValues(SoundInfoOverrides&)
SoundEventSample::Create(SoundManager&, SoundEventDataSample const&, SoundEventInstance::InstanceParams const&)
SoundEventSample::SoundEventSample(SoundManager&, SoundEventDataSample const&, SoundEventInstance::InstanceParams const&)
SoundEventSample::CreateVoice(SoundEventInstance::InstanceParams const&, SoundEventDataSample const&, SoundManager&)
SoundEventSample::UpdateLowPass()
SoundEventSample::UpdateReverb()
SoundEventSample::UpdateOcclusion()
SoundEventSample::~SoundEventSample()
SoundEventSample::~SoundEventSample()
SoundEventSample::BeginEvent()
SoundEventSample::EndEvent()
SoundEventSample::UpdateEvent(float)
SoundEventSample::UpdateInstanceParams(SoundEventInstance::InstanceParams&)
SoundEventSample::HasFinished()
SoundEventSample::ConfigureAttenuationEffect(NuSoundVoice*, SoundEventDataSample const&, SoundManager&)
SoundEventSample::ConfigurePitchEffect(NuSoundVoice*, SoundEventDataSample const&, SoundManager&)
SoundEventSample::ConfigureRandomVolumeEffect(NuSoundVoice*, SoundEventDataSample const&, SoundManager&)
SoundEventSample::ConfigureRandomPitchEffect(NuSoundVoice*, SoundEventDataSample const&, SoundManager&)
SoundEventSample::ConfigureFaderEffect(NuSoundVoice*, SoundEventDataSample const&, SoundManager&)
SoundEventSample::ConfigurePitchRampEffect(NuSoundVoice*, SoundEventDataSample const&, SoundManager&)
SoundEventSample::ConfigureLowPassEffect(NuSoundVoice*, SoundEventDataSample const&, SoundManager&)
SoundEventSample::ConfigureReverbEffect(NuSoundVoice*, SoundEventDataSample const&, SoundManager&)
SoundEventSample::ConfigureDopplerEffect(NuSoundVoice*, SoundEventDataSample const&, SoundManager&)
SoundEventSample::ConfigureOcclusionEffect(NuSoundVoice*, SoundEventDataSample const&, SoundManager&)
SoundEventDataGroup::SoundEventDataGroup(char const*)
SoundEventDataGroup::RequestSampleLoads(SampleLoader&)
SoundEventDataGroup::RequestSampleUnloads(SampleLoader&)
SoundEventDataGroup::AddEventData(SoundEventData*)
SoundEventDataGroup::GetNumEvents() const
SoundEventDataGroup::GetEventData(int) const
SoundEventDataGroup::GetNextEventData() const
SoundEventDataGroup::GetRandomEventData() const
SoundEventDataGroup::SetPlayBehaviour(SoundEventDataGroup::PlayBehaviour)
SoundEventDataGroup::GetPlayBehaviour() const
SoundEventDataGroup::SetNumEventsToTrigger(int)
SoundEventDataGroup::GetNumEventsToTrigger() const
SoundEventGroup::Create(SoundManager&, SoundEventDataGroup const&, SoundEventInstance::InstanceParams const&)
SoundEventGroup::SoundEventGroup(SoundManager&, SoundEventDataGroup const&, SoundEventInstance::InstanceParams const&)
SoundEventGroup::BeginEvent()
SoundEventGroup::EndEvent()
SoundEventGroup::UpdateEvent(float)
SoundEventGroup::HasFinished()
SoundEventDataGroup::~SoundEventDataGroup()
SoundEventDataGroup::~SoundEventDataGroup()
SoundEventGroup::~SoundEventGroup()
SoundEventDataRumble::SoundEventDataRumble(char const*)
SoundEventDataRumble::SetRumbleBuzzTime(float)
SoundEventDataRumble::SetRumbleTime(float)
SoundEventDataRumble::SetRumbleStrength(float)
SoundEventDataRumble::SetRumbleRelease(float)
SoundEventDataRumble::GetRumbleBuzzTime() const
SoundEventDataRumble::GetRumbleTime() const
SoundEventDataRumble::GetRumbleStrength() const
SoundEventDataRumble::GetRumbleRelease() const
SoundEventRumble::Create(SoundManager&, SoundEventDataRumble const&, SoundEventInstance::InstanceParams const&)
SoundEventRumble::SoundEventRumble(SoundManager&, SoundEventDataRumble const&, SoundEventInstance::InstanceParams const&)
SoundEventRumble::BeginEvent()
SoundEventRumble::EndEvent()
SoundEventRumble::UpdateEvent(float)
SoundEventRumble::HasFinished()
SoundEventRumble::~SoundEventRumble()
SoundEventDataRumble::~SoundEventDataRumble()
SoundEventDataSubtitle::SoundEventDataSubtitle()
SoundEventDataSubtitle::SetText(char*)
SoundEventSubtitle::Create(SoundManager&, SoundEventDataSubtitle const&, SoundEventInstance::InstanceParams const&)
SoundEventSubtitle::SoundEventSubtitle(SoundManager&, SoundEventDataSubtitle const&, SoundEventInstance::InstanceParams const&)
SoundEventSubtitle::BeginEvent()
SoundEventSubtitle::DrawSubtitle()
SoundEventSubtitle::EndEvent()
SoundEventSubtitle::UpdateEvent(float)
SoundEventSubtitle::HasFinished()
SoundEventSubtitle::~SoundEventSubtitle()
SoundEventDataSubtitle::~SoundEventDataSubtitle()
SoundFileRequest::SoundFileRequest(char const*, NuSoundSample*, NuFileNotifier*, NuSoundOutOfMemCallback*)
SoundFileRequest::SoundFileRequest(char const*, char const*, NuSoundSample*, NuFileNotifier*, NuSoundOutOfMemCallback*)
SoundFileRequest::~SoundFileRequest()
SoundFileRequest::~SoundFileRequest()
SoundFileRequest::operator<(SoundFileRequest const&) const
SoundFileRequest::Read(bool volatile*)
SoundFileRequest::ReadFromMem(void*, unsigned int, bool volatile*)
SoundPlaceable::SoundPlaceable(EdRegContext&)
SoundPlaceable::SoundPlaceable(SoundPlaceable&, EdRegContext&)
SoundPlaceable::~SoundPlaceable()
non-virtual thunk to SoundPlaceable::~SoundPlaceable()
SoundPlaceable::~SoundPlaceable()
non-virtual thunk to SoundPlaceable::~SoundPlaceable()
SoundPlaceable::GetClass() const
SoundPlaceable::SetSoundManager(SoundManager*)
SoundPlaceable::GetTransform(VuMtx&) const
SoundPlaceable::SetTransform(VuMtx const&)
SoundPlaceable::OnLinked()
SoundPlaceable::Process(float)
SoundPlaceable::RequestResource()
SoundPlaceable::ReleaseResource()
SoundPlaceable::SetState(SoundPlaceable::States, bool)
SoundPlaceable::PlaySample()
SoundPlaceable::GetFalloffFar()
SoundPlaceable::IsActive() const
SoundPlaceable::GetState() const
SoundPlaceable::GetUnloadWhenFinished()
SoundPlaceable::SetUnloadWhenFinished(bool)
SoundPlaceable::GetSample()
SoundPlaceable::GetSampleName()
SoundPlaceable::SetSampleName(char*)
SoundPlaceable::SetVolume(float)
SoundPlaceable::GetVolume()
SoundPlaceable::SetPitch(float)
SoundPlaceable::GetPitch()
SoundPlaceable::SetLowPassScale(float)
SoundPlaceable::GetLowPassScale()
SoundPlaceable::SetLowPassQ(float)
SoundPlaceable::GetLowPassQ()
SoundPlaceable::GetFallofNear()
SoundPlaceable::SetFalloffNear(float)
SoundPlaceable::SetFalloffFar(float)
SoundPlaceable::GetFalloffType()
SoundPlaceable::SetFalloffType(NuSoundSystem::FalloffType)
SoundPlaceable::GetSurroundMode()
SoundPlaceable::SetSurroundMode(NuSoundSystem::SurroundMode)
SoundPlaceable::GetPenetration()
SoundPlaceable::SetPenetration(float)
SoundPlaceable::GetUseDefaults()
SoundPlaceable::SetUseDefaults(bool)
SoundPlaceable::GetUseRandomTrigger()
SoundPlaceable::GetRandMinTime()
SoundPlaceable::GetRandMaxTime()
SoundPlaceable::SetUseRandomTrigger(bool)
SoundPlaceable::SetRandMinTime(float)
SoundPlaceable::SetRandMaxTime(float)
SoundPlaceable::GetProximityLoad()
SoundPlaceable::SetProximityLoad(bool)
SoundPlaceable::GetProximityLoadDist()
SoundPlaceable::SetProximityLoadDist(float)
SoundPlaceable::GetInheritActiveState()
SoundPlaceable::SetInheritActiveState(bool)
SoundPlaceable::GetSoundHandle()
SoundPlaceableHelper::SoundPlaceableHelper()
SoundPlaceableHelper::~SoundPlaceableHelper()
SoundPlaceableHelper::~SoundPlaceableHelper()
SoundPlaceableHelper::Initialise()
SoundPlaceableHelper::GetManNumObjects(ClassManager*, void*)
SoundPlaceableHelper::GetManNextObject(ClassManager*, void*, void*)
SoundPlaceableHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
SoundPlaceableHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
SoundPlaceableHelper::AddBaseObject(EdRegContext*, ClassObject&)
SoundPlaceableHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
SoundPlaceableHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
EdRefSoundPlaceable::EdRefSoundPlaceable(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdRefSoundPlaceable::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSoundPlaceable::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSoundPlaceable::~EdRefSoundPlaceable()
SoundAmbienceArea::SoundAmbienceArea(EdRegContext&)
SoundAmbienceArea::~SoundAmbienceArea()
non-virtual thunk to SoundAmbienceArea::~SoundAmbienceArea()
SoundAmbienceArea::~SoundAmbienceArea()
non-virtual thunk to SoundAmbienceArea::~SoundAmbienceArea()
SoundAmbienceArea::GetClass() const
SoundAmbienceArea::Process(float)
SoundAmbienceArea::GetTransform(VuMtx&) const
SoundAmbienceArea::SetTransform(VuMtx const&)
SoundAmbienceArea::GetDistanceSq(VuVec const&)
SoundAmbienceArea::ContainsPoint(VuVec const&)
SoundAmbienceArea::GetDistanceFalloff()
SoundAmbienceArea::SetDistanceFalloff(float)
EdRefSoundAmbienceArea::EdRefSoundAmbienceArea(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdRefSoundAmbienceArea::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSoundAmbienceArea::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SoundAmbienceAreaHelper::SoundAmbienceAreaHelper()
SoundAmbienceAreaHelper::Initialise()
SoundAmbienceAreaHelper::Process(float)
SoundAmbienceAreaHelper::GetManNumObjects(ClassManager*, void*)
SoundAmbienceAreaHelper::GetManNextObject(ClassManager*, void*, void*)
SoundAmbienceAreaHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
SoundAmbienceAreaHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
SoundAmbienceAreaHelper::AddBaseObject(EdRegContext*, ClassObject&)
SoundAmbienceAreaHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
EdRefSoundAmbienceArea::~EdRefSoundAmbienceArea()
SoundAmbienceAreaHelper::~SoundAmbienceAreaHelper()
KeyframeEventSoundInstance::KeyframeEventSoundInstance(SoundManager&, KeyframeEventSound&, AnimationInstance&)
KeyframeEventSoundInstance::Trigger(SoundManager&, KeyframeEventSound&, AnimationInstance&)
KeyframeEventSoundInstance::~KeyframeEventSoundInstance()
KeyframeEventSoundInstance::GetAnimationInstance()
KeyframeEventSoundInstance::GetKeyframe()
KeyframeEventSoundInstance::GetSoundHandle()
KeyframeEventSound::KeyframeEventSound(EdRegContext const&, float)
KeyframeEventSound::KeyframeEventSound(EdRegContext const&, KeyframeEventSound&)
KeyframeEventSound::RequestResource()
KeyframeEventSound::GetSoundEventData()
KeyframeEventSound::ReleaseResource()
KeyframeEventSound::Execute(AnimationLayer*)
KeyframeEventSound::Stop(AnimationLayer*)
KeyframeEventSound::GetComponent()
KeyframeEventSound::SetSoundEvent(SoundEventData*)
KeyframeEventSound::SetVolume(float)
KeyframeEventSound::GetVolume()
KeyframeEventSound::SetPitch(float)
KeyframeEventSound::GetPitch()
KeyframeEventSound::GetFallofNear()
KeyframeEventSound::SetFalloffNear(float)
KeyframeEventSound::GetFalloffFar()
KeyframeEventSound::SetFalloffFar(float)
KeyframeEventSound::SetLowPassScale(float)
KeyframeEventSound::GetLowPassScale()
KeyframeEventSound::SetLowPassQ(float)
KeyframeEventSound::GetLowPassQ()
KeyframeEventSound::SetReverbWetMix(float)
KeyframeEventSound::GetReverbWetMix()
KeyframeEventSound::SetDuckingScale(float)
KeyframeEventSound::GetDuckingScale()
KeyframeEventSound::GetFalloffType()
KeyframeEventSound::SetFalloffType(NuSoundSystem::FalloffType)
KeyframeEventSound::GetSurroundMode()
KeyframeEventSound::SetSurroundMode(NuSoundSystem::SurroundMode)
KeyframeEventSound::GetUseDefaults()
KeyframeEventSound::SetUseDefaults(bool)
KeyframeEventSoundHelper::KeyframeEventSoundHelper()
KeyframeEventSoundHelper::Initialise()
KeyframeEventSoundHelper::GetNumObjects(void*)
KeyframeEventSoundHelper::GetNextObject(void*, void*)
KeyframeEventSoundHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
KeyframeEventSoundHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
KeyframeEventSoundHelper::RenderForEditor(LevelContainer*)
EdRefSoundEventKeyframe::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSoundEventKeyframe::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
KeyframeEventSound::~KeyframeEventSound()
KeyframeEventSound::~KeyframeEventSound()
EdRefSoundEventKeyframe::~EdRefSoundEventKeyframe()
KeyframeEventSoundHelper::~KeyframeEventSoundHelper()
SoundReverbArea::SoundReverbArea(EdRegContext&)
SoundReverbArea::~SoundReverbArea()
non-virtual thunk to SoundReverbArea::~SoundReverbArea()
SoundReverbArea::~SoundReverbArea()
non-virtual thunk to SoundReverbArea::~SoundReverbArea()
SoundReverbArea::GetClass() const
SoundReverbArea::Reset()
SoundReverbArea::Process(float)
SoundReverbArea::GetTransform(VuMtx&) const
SoundReverbArea::SetTransform(VuMtx const&)
SoundReverbArea::GetDistanceSq(VuVec const&)
SoundReverbArea::ContainsPoint(VuVec const&)
SoundReverbArea::GetParams()
SoundReverbArea::GetWetMix()
SoundReverbArea::GetGain()
SoundReverbArea::GetDecay()
SoundReverbArea::GetDensity()
SoundReverbArea::GetRoomSize()
SoundReverbArea::GetPreDelay()
SoundReverbArea::GetEchoDelay()
SoundReverbArea::GetEchoFeedback()
SoundReverbArea::GetLowPassFilterScale()
SoundReverbArea::GetDistanceFalloff()
SoundReverbArea::SetWetMix(float)
SoundReverbArea::SetGain(float)
SoundReverbArea::SetDecay(float)
SoundReverbArea::SetDensity(float)
SoundReverbArea::SetRoomSize(float)
SoundReverbArea::SetPreDelay(float)
SoundReverbArea::SetEchoDelay(float)
SoundReverbArea::SetEchoFeedback(float)
SoundReverbArea::SetLowPassFilterScale(float)
SoundReverbArea::SetDistanceFalloff(float)
EdRefSoundReverbArea::EdRefSoundReverbArea(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdRefSoundReverbArea::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSoundReverbArea::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SoundReverbAreaHelper::SoundReverbAreaHelper()
SoundReverbAreaHelper::Initialise()
SoundReverbAreaHelper::GetManNumObjects(ClassManager*, void*)
SoundReverbAreaHelper::GetManNextObject(ClassManager*, void*, void*)
SoundReverbAreaHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
SoundReverbAreaHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
SoundReverbAreaHelper::AddBaseObject(EdRegContext*, ClassObject&)
SoundReverbAreaHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
EdRefSoundReverbArea::~EdRefSoundReverbArea()
SoundReverbAreaHelper::~SoundReverbAreaHelper()
SoundLowPassArea::SoundLowPassArea(EdRegContext&)
SoundLowPassArea::SoundLowPassArea(SoundLowPassArea&, EdRegContext&)
SoundLowPassArea::~SoundLowPassArea()
non-virtual thunk to SoundLowPassArea::~SoundLowPassArea()
SoundLowPassArea::~SoundLowPassArea()
non-virtual thunk to SoundLowPassArea::~SoundLowPassArea()
SoundLowPassArea::GetClass() const
SoundLowPassArea::Reset()
SoundLowPassArea::Process(float)
SoundLowPassArea::GetTransform(VuMtx&) const
SoundLowPassArea::SetTransform(VuMtx const&)
SoundLowPassArea::GetDistanceSq(VuVec const&)
SoundLowPassArea::ContainsPoint(VuVec const&)
SoundLowPassArea::GetParams()
SoundLowPassArea::GetFrequency()
SoundLowPassArea::GetOneOverQ()
SoundLowPassArea::GetDistanceFalloff()
SoundLowPassArea::SetFrequency(float)
SoundLowPassArea::SetOneOverQ(float)
SoundLowPassArea::SetDistanceFalloff(float)
EdRefSoundLowPassArea::EdRefSoundLowPassArea(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdRefSoundLowPassArea::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSoundLowPassArea::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SoundLowPassAreaHelper::SoundLowPassAreaHelper()
SoundLowPassAreaHelper::Initialise()
SoundLowPassAreaHelper::GetManNumObjects(ClassManager*, void*)
SoundLowPassAreaHelper::GetManNextObject(ClassManager*, void*, void*)
SoundLowPassAreaHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
SoundLowPassAreaHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
SoundLowPassAreaHelper::AddBaseObject(EdRegContext*, ClassObject&)
SoundLowPassAreaHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
SoundLowPassArea::GetVisibility() const
SoundLowPassArea::SetVisibility(int)
EdRefSoundLowPassArea::~EdRefSoundLowPassArea()
SoundLowPassAreaHelper::~SoundLowPassAreaHelper()
AvoidableBox::ContainsPoint(VuVec const&) const
AvoidableBox::Top() const
AvoidableBox::GetMinMax(NuVector3Base&, NuVector3Base&) const
AIAvoidable::Render()
AIAvoidable::NotifyRemoved()
AIAvoidable::ActivateAvoidable(bool)
AIAvoidable::~AIAvoidable()
AIAvoidable::~AIAvoidable()
FrameworkEventAIAvoidableData::~FrameworkEventAIAvoidableData()
AIList<ObjectCloud*>::~AIList()
ObjectSteering::ObjectSteering()
ObjectSteering::Clear()
ObjectSteering::~ObjectSteering()
ObjectSteering::RemovePhantom()
AvoidableList::~AvoidableList()
ObjectSteering::~ObjectSteering()
ObjectSteering::Initialise(LevelContainer const*, Brain&)
CacheCloudListManager::GetCache(CacheCloudList::User const&)
ObjectSteering::ClearClouds()
ObjectSteering::Deactivate()
ObjectSteering::Process(float const&, bool)
ObjectSteering::UpdatePhantom()
ObjectSteering::GatherEvasionObjects()
ObjectSteering::UpdateClouds()
ObjectSteering::UpdateSectors()
CacheCloudList::Find(AIAvoidable&) const
ObjectSteering::AddCloudPiece(AIAvoidable&, NuVector3Base const&)
ObjectSteering::FindBestCloudAndDirection(VuVec const&, VuVec&, ObjectSteering::Direction&)
ObjectSteering::ProcessResults2(float)
ObjectSteering::ProcessResults()
ObjectSteering::ShouldJumpOver(AIAvoidable const&) const
ObjectSteering::PrepareAABB() const
AI_GenericShape::~AI_GenericShape()
ObjectSteering::ShouldConsider(AIAvoidable const&) const
CacheCloudList::UpdateItem(AIAvoidable&)
CacheCloudList::CacheItem(AIAvoidable&)
ObjectSteering::AddPhantom()
CacheCloud::Contains(AIAvoidable*) const
CacheCloud::WithinRange(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&) const
CacheCloud::Add(AIAvoidable&)
CacheCloud::Add(CacheCloud&)
CacheCloud::Within(NuVector3Base const&, NuVector3Base const&) const
CacheCloudListManager::~CacheCloudListManager()
CacheCloudListManager::Clean()
CacheCloudListManager::~CacheCloudListManager()
CacheCloudListManager::EventNotify(Event&, NuEventData&)
CacheCloudListManager::IsInContainer(LevelContainer&)
AI_AABB::~AI_AABB()
AvoidableList::~AvoidableList()
AIList<AIAvoidable*>::~AIList()
AIList<AIAvoidable*>::~AIList()
AIList<CloudPiece*>::~AIList()
AIList<CloudPiece*>::~AIList()
CacheCloudList::~CacheCloudList()
CacheCloudList::~CacheCloudList()
AIList<ObjectCloud*>::~AIList()
AIFactory<AITask*, unsigned int>::~AIFactory()
Brain::Brain()
Brain::~Brain()
Brain::~Brain()
Brain::SetTransform(VuMtx const&)
Brain::GetTransform(VuMtx&) const
Brain::SetRotation(float const&)
Brain::SetPosition(VuVec const&)
Brain::Process(float const&)
Brain::LimitPace()
Brain::AddRoute()
Brain::SetRoute(AIRoute*)
Brain::ForceNewRoute(bool)
Brain::GetCurrentEdgeFlags() const
Brain::HasTask() const
Brain::AddCleanTask(unsigned int, Brain::TaskPriority)
Brain::AddCleanTask(AITask*, Brain::TaskPriority)
Brain::AddTask(AITask&, Brain::TaskPriority, bool)
Brain::RemoveTask(AITask&, Brain::TaskPriority)
Brain::RemoveTask(unsigned int, unsigned int, Brain::TaskPriority)
Brain::RemoveTaskByTag(unsigned int, Brain::TaskPriority)
Brain::ClearTasks(Brain::TaskPriority)
Brain::FindTask(unsigned int, unsigned int, Brain::TaskPriority) const
Brain::AutoPace(float const*, float const*)
Brain::Activate()
Brain::Deactivate()
Brain::SetCurrentNode(ConvexNode const*)
Brain::IsActive() const
Brain::AddToScene(LevelContainer&)
Brain::RemoveFromScene(LevelContainer&)
Brain::ResetExtras()
Brain::ContainerRemoved(LevelContainer*)
Brain::FullReset()
Brain::TeleportClean()
Brain::GetCombatInfo()
Brain::SetDestinationNode(ConvexNode const*)
Brain::GetOpponent() const
Brain::GetNearestOpponent() const
Brain::IsOpponent(Brain const&) const
Brain::IsFriend(Brain const&) const
Brain::SetMaxPace(char const*)
Brain::SetCurrentTask(unsigned int, Brain::TaskPriority, unsigned int, bool, bool)
Brain::CalcMoveTarget(NUVEC&, float*)
Brain::PreProcess(float const&)
Brain::PostProcess(float const&)
Brain::SetVelocity(NuVec2 const&)
Brain::GetVelocity()
Brain::CalculateHeading(VuVec const&)
Brain::GetName() const
Brain::EnableObjectAvoider()
Brain::DisableObjectAvoider()
Brain::IsInSpecialMove()
Brain::UpdateStatus(float)
Brain::MidSpecialMove(float const&)
Brain::PreSpecialMove(float const&)
Brain::ObjectAvoidance(float const&)
Brain::HandleWait(float const&)
AIList<AIFactory<AITask*, unsigned int>::Map*>::~AIList()
AIList<AIFactory<AITask*, unsigned int>::Map*>::~AIList()
ClassManagerAccessor<AIManager>::GetFromCreate(ILevelContainer const&)
CharacterBrain::CharacterBrain()
CharacterBrain::~CharacterBrain()
CharacterBrain::~CharacterBrain()
CharacterBrain::FullReset()
CharacterBrain::MidSpecialMove(float const&)
CharacterBrain::PreSpecialMove(float const&)
CharacterBrain::ObjectAvoidance(float const&)
CharacterBrain::HandleWait(float const&)
CharacterBrain::GetName() const
RegularBrain::IsInSpecialMove()
RegularBrain::PreProcess(float const&)
RegularBrain::PostProcess(float const&)
CombatInfo::CombatInfo(Brain&)
CombatInfo::UpdateNearestOpponent()
CMList<Brain*>::Append(Brain* const&, CMList<Brain*>::ListLink*)
Faction::AddFaction(char const*)
Faction::InitFactions()
Faction::Faction()
Faction::~Faction()
Faction::SetFeeling(int, int)
Faction::SetFeelings(int, int)
PhysicalStatus::PhysicalStatus()
PhysicalStatus::ResetPhysicalStatus()
RegularBrain::UpdateStatus(float)
RegularBrain::HandleWait(float const&)
RegularBrain::Deactivate()
RegularBrain::EnableObjectAvoider()
RegularBrain::~RegularBrain()
RegularBrain::MidSpecialMove(float const&)
RegularBrain::PreSpecialMove(float const&)
VehicleBrain::VehicleBrain()
VehicleBrain::~VehicleBrain()
VehicleBrain::~VehicleBrain()
VehicleBrain::FullReset()
VehicleBrain::ResetPhysicalStatus()
non-virtual thunk to VehicleBrain::ResetPhysicalStatus()
VehicleBrain::AutoPace(float const*, float const*)
VehicleBrain::MaxStoppingVelocity(float) const
VehicleBrain::PreProcess(float const&)
VehicleBrain::OutputReset()
VehicleBrain::PostProcess(float const&)
VehicleBrain::AddRoute()
VehicleBrain::GetRelativePosition(VuVec const&, VehicleBrain::VehiclePosition) const
VehicleBrain::GetPositionOnVehicle(VuVec&, VehicleBrain::VehiclePosition) const
VehicleBrain::GetVRoute() const
VehicleBrain::Action_EmergencyStop()
VehicleBrain::OutputTargetVelocity(float)
VehicleBrain::Action_Approach(VuVec const&)
VehicleBrain::Action_ReverseTurn(VuVec const&)
VehicleBrain::Action_ReverseTurnFullLock(VuVec const&)
VehicleBrain::Action_ReverseTo(VuVec const&)
VehicleBrain::StoppingDistance() const
VehicleBrain::StoppingDistance(float) const
VehicleBrain::ObjectAvoidance(float const&)
VehicleBrain::GetName() const
NuClass_AIMeshProperties::NuClass_AIMeshProperties()
NuClass_AIMeshProperties::~NuClass_AIMeshProperties()
AIMeshProperties::AIMeshProperties()
AIMeshProperties::Reset()
AIMeshProperties::SetStairStepMaxFlexAngle(float)
AIMeshProperties::SetStairStepMaxDropAngle(float)
AIMeshProperties::Serialize(NuSerialize&)
NuClass_AIMeshProperties::~NuClass_AIMeshProperties()
NuClass_AIMeshProperties::CreateObject() const
NuClass_AIMeshProperties::CreateObjectArray(unsigned int) const
NuClass_AIMeshProperties::PlacementNew(void*) const
NuClass_AIMeshProperties::SerializeObjectIn(NuArchive&, void*) const
NuClass_AIMeshProperties::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_AIMeshProperties::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_AIMeshProperties::~NuClass_AIMeshProperties()
non-virtual thunk to NuClass_AIMeshProperties::~NuClass_AIMeshProperties()
AIRoute::AIRoute()
AIRoute::~AIRoute()
AIRoute::ClearRoute()
AIRoute::~AIRoute()
AIRoute::ReferencesContainer(LevelContainer*)
AIRoute::LoadFromQuery(SearchQuery const&)
AIRoute::SmoothRoute(VuVec const&, VuVec const&, float, int)
AIRoutePoint::~AIRoutePoint()
AIRoute::NewUpdateRouteProgression(Brain const&)
AIRoute::Render(VuVec const*, VuVec const*) const
AIRoute::GetTargetNode() const
AIRoute::InsideCurrentTarget(NUVEC const&) const
AIRoute::GenerateDirectRoute(void const*, VuVec const&, VuVec const&, float, unsigned int, ConvexNode const*, ConvexNode const*, AIZone const&, float, float)
AIRoute::GenerateRoute(void const*, VuVec const&, VuVec const&, float, unsigned int, ConvexNode const*, ConvexNode const*, AIZone const&, float, float)
AIRoute::FindQuickestRecoveryNodeEscape(VuVec const&, ConvexNode const&, AIZone const&, unsigned int const&, float const&)
AIRoute::CollectNeighbourRecoveryNodes_Recursive(ConvexNodePtrList&, ConvexEdgePtrList&, ConvexNode&, AIZone const&)
AIRoute::GetCurrentEdge(NUVEC const&) const
AIRoute::GetCurrentEdge() const
AIRoute::DiedOnCurrentSection()
AIRoute::SetColour(NuColour)
AIRoute::CalcMaxPathFrequency(NUVEC const&, NUVEC const&)
CMList<ConvexNode*>::Append(ConvexNode* const&, CMList<ConvexNode*>::ListLink*)
AIRoute::IsRouteBlocked(Brain const&) const
AIRoute::CalcDistToTarget(VuVec const&, VuVec const&, bool) const
AIRoute::ForceRouteRegeneration(bool)
AIRoutePoint::UpdateMovingLinkEdge()
AIRoutePoint::IsEdgeMoving() const
AIRoutePoint::GetToPos(NUVEC&) const
AIRoutePoint::GetFromPos(NUVEC&) const
AIRoutePoint::GetToRad(float&) const
AIRoutePoint::GetFromRad(float&) const
AIRoutePoint::GetToHeight(float&) const
AIRoutePoint::GetFromHeight(float&) const
AIRoutePoint::MoveTargetPointToEndOfLinkEdge()
AIRoute::ValidRouteFound(SearchQuery const&)
AIRoutePoint::~AIRoutePoint()
ConvexEdge::ConvexEdge(ConvexNode&)
ConvexEdge::SetParentNode(ConvexNode&)
ConvexEdge::ConvexEdge(ConvexNode&, VuVec const&, VuVec const&, ConvexNode*, float, int)
ConvexEdge::~ConvexEdge()
ConvexEdge::~ConvexEdge()
ConvexEdge::ArrangeLeftRight()
ConvexEdge::FindFlagFromName(char const*)
ConvexEdge::SetFlagNameFromMask(unsigned int, char const*, char const*)
ConvexEdge::GetPortal(VuVec&, VuVec&, float) const
ConvexEdge::GetPositionOnEdge(VuVec&, VuVec const&, ConvexEdge::PortalPositionType) const
ConvexEdge::GetPositionOnEdge(VuVec&, VuVec const&, VuVec const&, float) const
ConvexEdge::GetFirstNeighbour() const
ConvexEdge::GetNextNeighbour(void*) const
ConvexEdge::IsCapable(int, float, int) const
ConvexEdge::DefaultIsCapable(int const&, float const&, int const&) const
ConvexEdge::GetMinIndexFromVert()
ConvexEdge::GetMaxIndexFromVert()
ConvexEdge::IsCapableFrom(float, AStarItem*)
ConvexEdge::CalcEdgeNormal_Forward(VuVec&) const
ConvexEdge::CalcEdgeNormal_Backward(VuVec&) const
ConvexEdge::AddOppositeEdge() const
ConvexEdge::ClearFlag(int)
ConvexEdge::SetFlag(int)
ConvexEdge::GetTraversalCostMultiplier() const
ConvexEdge::UpdateBestPosition(VuVec const&, VuVec const&, float)
ConvexEdge::UpdateBestInfo(VuVec const&, VuVec const&, float, AStarItem const&, AStarTurningData const*)
ConvexEdge::SetMax(VuVec const&)
ConvexEdge::SetMin(VuVec const&)
ConvexEdgeHelper::CanSaveObject(void*, EdSerialiseParams&)
EdRefConvexEdge::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefConvexEdge::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ConvexEdgeHelper::ConvexEdgeHelper()
void AIAutoCreatedInterface::Register<ConvexEdge>(EdClass*)
ConvexEdgeHelper::~ConvexEdgeHelper()
ConvexEdgeHelper::~ConvexEdgeHelper()
ConvexEdgeHelper::GetNumObjects(void*)
ConvexEdgeHelper::GetNextObject(void*, void*)
ConvexEdgeHelper::GetParentObject(void*)
ConvexEdgeHelper::GetParentClass(void*)
ConvexEdgeHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ConvexEdgeHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ConvexEdgeHelper::GetSelectedEdges(ConvexEdgePtrList&)
AStarItem::IsTempItem()
ConvexEdge::GetPhysicalPosition(VuVec&) const
ConvexEdge::IsNeighbour(AStarItem*) const
ConvexEdge::GetCost() const
AStarItem::GetData() const
ConvexEdge::GetDestination() const
ConvexEdge::SetDestination(ConvexNode*)
ConvexEdge::GetPosition(VuVec&) const
EdRefConvexEdge::~EdRefConvexEdge()
AutoCreatedEdRef<ConvexEdge>::~AutoCreatedEdRef()
AutoCreatedEdRef<ConvexEdge>::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AutoCreatedEdRef<ConvexEdge>::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ConvexGraph::ConvexGraph(AIManager*, short)
ConvexGraph::~ConvexGraph()
ConvexGraph::RemoveFromActiveList()
ConvexGraph::DeleteAllVerts()
CSGridList<ConvexNode>::~CSGridList()
non-virtual thunk to ConvexGraph::~ConvexGraph()
ConvexGraph::~ConvexGraph()
non-virtual thunk to ConvexGraph::~ConvexGraph()
ConvexGraph::AddToActiveList()
ConvexGraph::SetName(char const*)
ConvexGraph::GetClass() const
ConvexGraph::FindNode(VuVec const&, VuVec const&, float&, ConvexNode*&, bool) const
ConvexGraph::CullInvalidEdges(ConvexNode*)
ConvexGraph::DeleteAllEdges()
ConvexGraph::CreateNode(VuVecConstPtrList const*, bool)
ConvexGraph::DeleteNode(ConvexNode*)
CSGridList<ConvexNode>::RemoveFromBuckets(ConvexNode*)
ConvexGraph::DeleteEdge(ConvexNode*, ConvexNode*)
ConvexGraph::FixUpEdgePointers()
ConvexGraph::UpdateAABB()
ConvexGraph::CalculateWidths()
ConvexGraph::BuildNodeGrid()
CSGridList<ConvexNode>::ResizeGrid(unsigned int, unsigned int, NuVector3Base const&, NuVector3Base const&)
CSGridList<ConvexNode>::AddToBuckets(ConvexNode*)
ConvexGraph::AllocateVerts(int)
ConvexGraph::AllocateVert(VuVec const&)
ConvexGraph::DeAllocateVertMap()
ConvexGraph::AddVert(VuVec const&)
ConvexGraph::FindVert(VuVec const&) const
ConvexGraph::GetVertFromIndex(int) const
ConvexGraph::GetIndexFromVert(VuVec const*) const
ConvexGraph::SetVertFromIndex(int, VuVec const&)
ConvexGraph::SetTimeStamp(char*)
ConvexGraph::GetTimeStamp() const
ConvexGraph::GetNumVerts() const
ConvexGraph::CollectNodeGroups()
ConvexGraph::Validate()
ConvexGraph::ResetObstacleReferences()
ConvexGraph::Stitch()
ConvexGraph::UnStitch(LevelContainer*)
EdRefConvexGraph::GetCount(void*)
EdRefConvexGraph::SetCount(void*, unsigned int)
EdRefConvexGraph::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefConvexGraph::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ConvexGraphHelper::ConvexGraphHelper()
void AIAutoCreatedInterface::Register<ConvexGraph>(EdClass*)
ConvexGraphHelper::CanSaveObject(void*, EdSerialiseParams&)
ConvexGraphHelper::GetManNumObjects(ClassManager*, void*)
ConvexGraphHelper::GetManNextObject(ClassManager*, void*, void*)
ConvexGraphHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ConvexGraphHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ConvexGraphHelper::AddMainMenuItems(EdMenu&)
ConvexGraphHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
ConvexGraphHelper::~ConvexGraphHelper()
EdRefConvexGraph::~EdRefConvexGraph()
EdRefConvexGraph::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefConvexGraph::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
NuVector<ConvexGraph*>::Reserve(unsigned int, bool)
AutoCreatedEdRef<ConvexGraph>::~AutoCreatedEdRef()
AutoCreatedEdRef<ConvexGraph>::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AutoCreatedEdRef<ConvexGraph>::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ConvexLink::ConvexLink(ConvexNode&)
ConvexLink::ConvexLink(ConvexNode&, VuVec const&, VuVec const&, ConvexNode*, float, int)
ConvexLink::~ConvexLink()
ConvexLink::~ConvexLink()
ConvexLink::GetRootPosition(VuVec&) const
ConvexLink::SetRootPosition(VuVec const&)
ConvexLink::GetDestPosition(VuVec&) const
ConvexLink::SetDestPosition(VuVec const&)
ConvexLink::SetDestPosition(NUVEC const&)
ConvexLink::SetRootPosition(NUVEC const&)
ConvexLink::GetPositionOnEdge(VuVec&, VuVec const&, ConvexEdge::PortalPositionType) const
ConvexLink::IsCapable(int, float, int) const
EdRefConvexLink::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefConvexLink::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ConvexLinkHelper::ConvexLinkHelper()
ConvexLinkHelper::~ConvexLinkHelper()
ConvexLinkHelper::~ConvexLinkHelper()
ConvexLinkHelper::CanSaveObject(void*, EdSerialiseParams&)
ConvexLinkHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ConvexLinkHelper::GetNumObjects(void*)
ConvexLinkHelper::GetNextObject(void*, void*)
ConvexLinkHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ConvexLink::SetMax(VuVec const&)
ConvexLink::SetMin(VuVec const&)
ConvexLink::GetPosition(VuVec&) const
ConvexLink::GetMinIndexFromVert()
ConvexLink::GetMaxIndexFromVert()
ConvexLink::IsCapableFrom(int, float, AStarItem*, float) const
EdRefConvexLink::~EdRefConvexLink()
ConvexNode::~ConvexNode()
ConvexNode::DeletePoints()
ConvexNode::~ConvexNode()
ConvexNode::FindVert(VuVec const&)
ConvexNode::SetPoints(VuVecConstPtrList const&, bool)
ConvexNode::SetBoundaryFlag(int, char)
ConvexNode::SetBoundaryFlags(NuVector<char>&)
ConvexNode::GatherWallsWithinRadius(Brain*, ConvexNode*, VuVec const&, float, Array<OrcaEdge>&)
ConvexNode::IsBadNode(AIZone const&) const
ConvexNode::FindMinMax(VuVec&, VuVec&) const
ConvexNode::GetMinMax(NuVector3Base&, NuVector3Base&) const
ConvexNode::WithinNode(VuVec const&, VuVec const&, float&) const
ConvexNode::GetPosition(VuVec*)
ConvexNode::GetPosition(VuVec*) const
ConvexNode::GetClosestPoint(VuVec const&, VuVec&)
ConvexNode::AddEdge(ConvexNode&, float)
ConvexNode::FindEdge(ConvexNode*) const
ConvexNode::AddEdge(VuVec const&, VuVec const&, ConvexNode&, float, int, float const&, float const&)
ConvexNode::AddEdge(ConvexEdge&)
ConvexNode::RemoveEdge(ConvexEdge&)
ConvexNode::DeleteEdge(ConvexEdge&)
ConvexNode::GetPositionOnNodeUsingVerticalRayCast(VuVec&) const
ConvexNode::IsBoxContainedOnNavmesh(VuMtx const&, VuVec const&) const
ConvexNode::GraphWallCast(VuVec const&, VuVec const&, VuVec&, float&, AIZone const&, VuVec*, ConvexNode const**) const
ConvexNode::CalculateWidths()
ConvexNode::FindEdgeIx(VuVec const*, VuVec const*)
ConvexNode::CalculateSaveIndex() const
ConvexNode::DeleteAllEdges(ConvexEdge::ClassType)
ConvexNode::DeleteAutoEdges(LevelContainer*)
ConvexNode::CalcNormal(VuVec&) const
ConvexNode::BuildPointList(VuVecConstPtrList&) const
ConvexNode::ReconnectNode(AIManager*)
ConvexNode::ResetObstacleReference()
ConvexNode::ObstacleReference()
ConvexNode::ObstacleRelease()
ConvexNode::GetPointPosition(void const*)
ConvexNode::NextPoint(void const*, void const*, bool)
ConvexNode::PrevPoint(void const*, void const*, bool)
ConvexNode::PointCount(void const*)
EdRefConvexNode::GetCount(void*)
EdRefConvexNode::SetCount(void*, unsigned int)
EdRefConvexNode::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefConvexNode::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ConvexNodeHelper::ConvexNodeHelper()
void AIAutoCreatedInterface::Register<ConvexNode>(EdClass*)
ConvexNodeHelper::~ConvexNodeHelper()
ConvexNodeHelper::~ConvexNodeHelper()
ConvexNodeHelper::CanSaveObject(void*, EdSerialiseParams&)
ConvexNodeHelper::GetNumObjects(void*)
ConvexNodeHelper::GetNextObject(void*, void*)
ConvexNodeHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ConvexNodeHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ConvexNodeHelper::GetParentObject(void*)
ConvexNodeHelper::GetParentClass(void*)
ConvexNodeHelper::RayIntersection(ConvexNode&, VuVec&, VuVec&, VuVec*)
AIMath::RayTriIntersection(VuVec const*, VuVec const*, VuVec const*, VuVec const*, VuVec const*, VuVec*)
ConvexNode::RandomPointInside(VuVec&) const
ConvexNode::CalcSurfaceArea() const
ConvexNode::IsBadNode() const
ConvexNodeHelper::PointInside(VuVec const&, VuVec*&, int, VuVec const&, float)
ConvexNodeHelper::GetSelectedNodes(ConvexNodePtrList&, AIManager&)
EdRefConvexNode::~EdRefConvexNode()
EdRefConvexNode::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefConvexNode::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AIMath::Between(VuVec const*, VuVec const*, VuVec const*)
AutoCreatedEdRef<ConvexNode>::~AutoCreatedEdRef()
AutoCreatedEdRef<ConvexNode>::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AutoCreatedEdRef<ConvexNode>::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
QueryManager::~QueryManager()
QueryManager::Clear()
QueryManager::AddQuery(SearchQuery&)
QueryManager::CancelQuery(SearchQuery&)
QueryManager::PopQueued()
QueryManager::Process(float)
AIRouteCache::~AIRouteCache()
RouteMaster::~RouteMaster()
RouteMaster::Clear()
RouteMaster::Process(float)
RouteMaster::FindValidRoute(RouteInfo const&)
RouteMaster::ClearValid()
RouteMaster::FindInvalidRoute(RouteInfo const&)
RouteMaster::ClearInvalid()
RouteMaster::AddValidRoute(RouteInfo const&)
RouteMaster::AddInvalidRoute(RouteInfo const&)
SearchQuery::~SearchQuery()
SearchQuery::~SearchQuery()
SearchQuery::Validate()
SearchQuery::Prepare()
SearchQuery::GetPathProcessor() const
SearchQuery::Process(float const&)
CMList<AStarItem*>::Append(AStarItem* const&, CMList<AStarItem*>::ListLink*)
CMList<ConvexEdge*>::Insert(ConvexEdge* const&, CMList<ConvexEdge*>::ListLink*)
CMList<VuVec>::Insert(VuVec const&, CMList<VuVec>::ListLink*)
SearchQuery::QuickProcess()
SearchQuery::ValidRouteRemoved(AIRouteCache const&)
VehicleRoute::VehicleRoute(AIManager&)
VehicleRoute::LoadFromValidRoute(AIRouteCache const&, SearchQuery const&)
DriveSpline::Clear()
DriveSpline::UpdateLimits()
VehicleRoute::ValidRouteFound(SearchQuery const&)
VehicleRoute::UpdateTrack(VehicleBrain&, VehicleTarget const&)
SplineDriver::Drive_InvalidData(VehicleBrain&)
SplineDriver::UpdateTarget(VehicleTarget&, VehicleBrain&, ISpline const&)
SplineDriver::Drive(VehicleBrain&, VehicleTarget const&, ISpline const&)
DriveSplineDriver::UpdateTarget(VehicleTarget&, VehicleBrain&, ISpline const&)
DriveSplineDriver::Drive(VehicleBrain&, VehicleTarget const&, ISpline const&)
DriveSpline::CalcSpeedLimit(float) const
DriveSpline::~DriveSpline()
DriveSpline::~DriveSpline()
ISpline::GetLength_NearestPos(VuVec const&, VuVec&, float const*) const
AIBezierSpline::AddAtStart(AIBezierSplinePoint*)
AIBezierSpline::AddAtEnd(AIBezierSplinePoint*)
AIBezierSpline::PopStart()
AIBezierSpline::PopEnd()
SplineDriver::~SplineDriver()
SplineDriver::SetTargetSpeed(float)
SplineDriver::GetTargetSpeed()
SplineDriver::~SplineDriver()
DriveSplineDriver::~DriveSplineDriver()
VehicleRoute::~VehicleRoute()
VehicleRoute::~VehicleRoute()
SplineBase<AIBezierSplinePoint*>::~SplineBase()
SplineBase<AIBezierSplinePoint*>::~SplineBase()
SplineBase<AIBezierSplinePoint*>::Clear()
SplineBase<AIBezierSplinePoint*>::AddAtStart(AIBezierSplinePoint*)
SplineBase<AIBezierSplinePoint*>::AddAtEnd(AIBezierSplinePoint*)
SplineBase<AIBezierSplinePoint*>::PopStart()
SplineBase<AIBezierSplinePoint*>::PopEnd()
AIList<SpeedLimit*>::~AIList()
AIList<SpeedLimit*>::~AIList()
AIBezierSplinePoint::~AIBezierSplinePoint()
AIBezierSplinePoint::~AIBezierSplinePoint()
AIBezierSplinePoint::GetDistToNext()
LegacyScriptContext::LegacyScriptContext()
LegacyScriptContext::LegacyScriptContext(ScriptManager&, ScriptScope&)
LegacyScriptContext::LegacyScriptContext(LegacyScriptContext&)
LegacyScriptContext::LegacyScriptContext(ScriptScope&)
LegacyScriptContext::~LegacyScriptContext()
LegacyScriptContext::SetScriptProcessor(ScriptProcessor*)
LegacyScriptContext::~LegacyScriptContext()
LegacyScriptContext::CreateNewContext()
LegacyScriptContext::SetApiActor(ApiActor*)
LegacyScriptContext::GetApiCharacter() const
LegacyScriptContext::GetApiVehicle() const
SLegacyAction::SLegacyAction(char const*)
SLegacyAction::~SLegacyAction()
SLegacyAction::SplitParams(char const*, char**, int&)
SLegacyV1Action::SLegacyV1Action(char const*, int (*)(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float))
SLegacyV1Action::Exec(ScriptContext&)
SLegacyCondition::SLegacyCondition(char const*, float (*)(AIManager&, ScriptProcessor*, AIPACKET*, char*, void*), void* (*)(AIManager&, char*))
SLegacyCondition::~SLegacyCondition()
SLegacyCondition::~SLegacyCondition()
SLegacyCondition::Exec(ScriptContext&)
LegacyScriptContext::GetType()
SLegacyAction::GetName() const
SLegacyAction::GetInputs(SCmdParams&) const
SLegacyAction::GetOutputs(SCmdParams&) const
SLegacyAction::AdjustParam(char*)
SLegacyAction::~SLegacyAction()
SLegacyV1Action::~SLegacyV1Action()
SLegacyCondition::GetName() const
SLegacyCondition::GetInputs(SCmdParams&) const
SLegacyCondition::GetOutputs(SCmdParams&) const
ScriptProcessor::~ScriptProcessor()
SLegacyAction::LegacyActionData::~LegacyActionData()
SLegacyAction::LegacyActionData::~LegacyActionData()
ScriptProcessor::ParamToFloatEx(AIPACKET*, ScriptProcessor*, char*)
ScriptProcessor::EvalExpressionNameLookup(char*, float*, int*)
ScriptProcessor::ParamToFloat(char const*) const
ScriptProcessor::GetScriptName()
AIAutoCreatedInterface::SetData(PlaceableBase*)
AIAutoCreatedInterface::FixupData()
NuFixedStringT<(unsigned short)256>::~NuFixedStringT()
CSListHeader<AIManager>::~CSListHeader()
NuVector<ConvexGraph*>::~NuVector()
CSListHeader<NodeGroup>::~CSListHeader()
CSListHeader<EdgeGroup>::~CSListHeader()
CSListHeader<Brain>::~CSListHeader()
CSListHeader<AIEdgeTimeCost>::~CSListHeader()
CSListHeader<AIDecisionBase>::~CSListHeader()
AIManager::AIManager(LevelContainer&)
AIManager::~AIManager()
AIManager::~AIManager()
AIManager::RegisterProcessing()
AIManager::RegisterRendering()
AIManager::Initialise()
AIManager::RegisterConnectionFlag(char const*, char const*, unsigned long)
AIManager::GetPhysicsScene()
AIManager::EventNotify(Event&, NuEventData&)
AIManager::SetInUse()
AIManager::SetIdle()
AIManager::CreateStaticNodesFromLocators(short)
AIManager::AddNodeToNodeGroup(char const*, ConvexNode&)
AIManager::ContainsOfflineAutoCreatedStuff()
AIManager::CreateAutoNodes()
AIManager::CreateDynamicNodesFromLocators()
AIManager::ActivateLocatorsAndLinks()
AIManager::RemoveFromEdgeGroups(ConvexEdge*)
AIManager::ClearLocatorsAndLinks(LevelContainer*)
AIManager::DestroyAutoNodes(bool)
AIManager::GetLedId()
AIManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
AIManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
AIManager::DeleteAllGraphs()
AIManager::DeleteConvexGraph(ConvexGraph*)
AIManager::FindGraph(short)
AIManager::FindGraphFromId(int)
AIManager::CreateGraphIfNotFound(short, bool)
AIManager::CreateConvexGraph()
AIManager::FindNode(Brain const&)
AIManager::FindNode(VuVec const&, VuVec const&, int const&, bool)
AIManager::CreateDynamicNode(short, SceneObject&)
AIManager::FindDynamicNode(SceneObject&) const
AIManager::FindEdges(ConvexEdgePtrList*, int, PlaceableBase*)
AIManager::EditorOnlyRayCast(VuVec&, VuVec const&, bool)
AIManager::SetRenderZoneFlags(AIZone const&)
AIManager::FindNearestNode(VuVec const&, AIZone const&, VuVec*, ConvexNode const*, int)
AIManager::BuildAILink(ConvexNode&, ConvexNode&, VuVec const&, VuVec const&, float, float, float, float, int, float, PlaceableBase*, bool)
AIManager::BuildAILocator(VuVec const&, float, float, int, char const*, PlaceableBase*)
AIManager::BuildAILocatorLink(AIConvexLocator&, AIConvexLocator&, int, float, PlaceableBase*)
AIManager::BuildAIConvexDynamicLink(ConvexNode&, VuVec const&, bool, VuVec const&, int, PlaceableBase*)
AIManager::BuildAIArea(VuVec const&, VuVec const&, char, short, char const*, PlaceableBase*)
AIManager::FindLocatorLink(AIConvexLocator const*, AIConvexLocator const*, bool) const
AIManager::BuildBasicConvexNode(VuVecConstPtrList const*, char const*, PlaceableBase*)
AIManager::GetLocator(int)
AIManager::GetLocatorFromSaveID(int)
AIManager::GetLocatorName(int)
AIManager::GetLocatorID(AIConvexLocator const*) const
AIManager::FindLocatorByName(char const*) const
AIManager::FindLocatorSetByName(char const*, bool) const
AIManager::FindLocatorSetByTag(unsigned int) const
AIManager::FindLocatorSetByProximity(VuVec&) const
AIManager::GetLocatorSet(int)
AIManager::GetLocatorSetName(int)
AIManager::GetLocatorSetID(AIConvexLocatorSet*)
AIManager::DeleteLocator(AIConvexLocator*)
AIManager::FindLocatorLinks(AIConvexLocatorLinkPtrList*, AIConvexLocator const*, AIConvexLocator const*, bool) const
CMList<AIConvexLocatorLink*>::Append(AIConvexLocatorLink* const&, CMList<AIConvexLocatorLink*>::ListLink*)
AIManager::AddEdgeTimeCost(ConvexEdge&, float, float)
AIManager::ClearEdgeTimeCosts(ConvexEdge*)
AIManager::GetAutoFlag(AIManager::AUTO_LINKS)
AIManager::SetAutoFlag(AIManager::AUTO_LINKS, int, float)
AIManager::GetAutoValue(AIManager::AUTO_LINKS)
AIManager::SetAutoFlag_Gap(int)
AIManager::SetAutoFlag_Jump(int)
AIManager::SetAutoFlag_LongJump(int, float)
AIManager::SetAutoFlag_HighJump(int, float)
AIManager::SetAutoFlag_BigJump(int)
AIManager::GetArea(int)
AIManager::FindAreaByName(char const*) const
AIManager::GetAreaNum(AIConvexArea const*) const
AIManager::GetAreaName(int)
AIManager::AddNewEdgeGroup()
AIManager::AddAutoEdgeGroup(unsigned char)
AIManager::FindEdgeGroup(char const*)
AIManager::AddNodeGroup(char const*)
AIManager::FindNodeGroup(char const*)
AIManager::FindSplineByName(char const*) const
AIManager::FindNearestSplineXZ(NUVEC const&, char const*, int) const
AIManager::ApproximatelyWithinJumpRange(VuVec const&, VuVec const&, float, float)
AIManager::RegisterClass(EdClass*)
AIManager::GetNumClasses()
AIManager::GetClass(int)
AIManager::DoNewProcess(float)
AIManager::IsUsingHulaHoop(Brain const&)
AIManager::GatherCharacters(Brain*, Array<OrcaAgent*>&, float)
AIManager::GatherObstacles(Brain*, Array<OrcaLineSeg*>&, float)
AIManager::GatherNavMesh(Brain*, Array<OrcaLineSeg*>&, float, float)
AIManager::ResetBrains()
AIManager::AddBrain(Brain&)
AIManager::RemoveBrain(Brain&)
AIManager::GetManagerName() const
AIEventData::~AIEventData()
NodeGroup::~NodeGroup()
NodeGroup::~NodeGroup()
AITask* CreateObject<AITask*, Task_Circle>()
AITask* CreateObject<AITask*, Task_DirectTraverse>()
AITask* CreateObject<AITask*, Task_GeneratePath>()
AITask* CreateObject<AITask*, Task_Interact>()
AITask* CreateObject<AITask*, Task_PathTo>()
AITask* CreateObject<AITask*, Task_Retreat>()
AITask* CreateObject<AITask*, Task_ReturnToGraph>()
AITask* CreateObject<AITask*, Task_Traverse>()
AITask* CreateObject<AITask*, Task_Meander>()
AITask* CreateObject<AITask*, Task_Wander>()
AITask* CreateObject<AITask*, Task_MoveInstruction>()
AITask* CreateObject<AITask*, VehicleTask_PathTo>()
AITask* CreateObject<AITask*, VehicleTask_PathToRange>()
AITask* CreateObject<AITask*, VehicleTask_FollowSpline>()
AIMath::InitialiseNormal(VuVec const*)
AIMath::CalcNormal(VuVec*, VuVecConstPtrList const*)
AIMath::CalcNormal(VuVec*, void const*)
AIMath::CalcNormal(VuVec*, VuVec const*, VuVec const*, VuVec const*)
AIMath::CalcAverage(VuVec*, void const*)
AIMath::CalcArea_3D(void const*)
AIMath::CalcAABB(void const*, AI_AABB*)
AI_AABB::SetMinMax(VuVec const*, VuVec const*)
AIMath::CalcRadius(void const*)
AIMath::SegSegInt_2D(VuVec const*, VuVec const*, VuVec const*, VuVec const*, VuVec*, VuVec*, float*, float*)
AIMath::ParallelInt_2D(VuVec const*, VuVec const*, VuVec const*, VuVec const*, VuVec*, VuVec*)
AIMath::SegLineInt_2D(VuVec const*, VuVec const*, VuVec const*, VuVec const*, VuVec*, VuVec*, bool)
AIMath::SegSegNearest(VuVec const*, VuVec const*, VuVec const*, VuVec const*, float*, float*, VuVec*, VuVec*)
AIMath::SegSegNearest_2D(VuVec const*, VuVec const*, VuVec const*, VuVec const*, float*, float*, VuVec*, VuVec*)
AIMath::Diagonalie(void const*, void const*, void const*)
AIMath::Convex(void const*)
AIMath::CosAng_2D(VuVec const*, VuVec const*, VuVec const*)
AIMath::Complex(void const*)
AIMath::InitialiseCallbacks(VuVec const* (*)(void const*), void const* (*)(void const*, void const*, bool), void const* (*)(void const*, void const*, bool), int (*)(void const*))
AIMath::RayPolyIntersection(VuVec const*, VuVec const*, void const*, VuVec*)
AIMath::InPoly_2D(void const*, VuVec const*)
AIMath::LimitSegToPoly_2D(void const*, VuVec const*, VuVec const*, VuVec*, VuVec*)
CMList<VuVec>::Append(VuVec const&, CMList<VuVec>::ListLink*)
AIMath::PolyIntsPlane(void const*, VuVec const*, VuVec const*)
AIMath::ExtendedPolyIntsPlane(void const*, VuVec const*, VuVec const*, VuVec const&)
AIMath::PolyPlaneIntersection(void const*, VuVec const*, VuVec const*, VuVec*, VuVec*, bool, float)
AIMath::TriangulatePolygon(void const*, VuVecConstPtrListList&)
VuVecConstPtrList::GetPosition(void const*)
VuVecConstPtrList::NextVec(void const*, void const*, bool)
VuVecConstPtrList::PrevVec(void const*, void const*, bool)
VuVecConstPtrList::VecCount(void const*)
AIMath::Diagonal(void const*, void const*, void const*)
CMList<VuVecConstPtrList>::Append(VuVecConstPtrList const&, CMList<VuVecConstPtrList>::ListLink*)
AIMath::SplitPolysWithPlane(VuVecConstPtrListList*, VuVec const*, VuVec const*, VuVecList*, VuVecConstPtrListPtrList*, VuVecConstPtrListPtrList*)
CMList<VuVecConstPtrList>::RemoveAll()
AIMath::SplitPolyWithPlane(VuVecConstPtrList const*, VuVecConstPtrListList*, VuVec const*, VuVec const*, VuVecList*, VuVecConstPtrListPtrList*, VuVecConstPtrListPtrList*)
CMList<VuVecConstPtrList*>::Append(VuVecConstPtrList* const&, CMList<VuVecConstPtrList*>::ListLink*)
AIMath::SnapPolysAtPlane(VuVecConstPtrListList*, VuVec const*, VuVec const*, VuVecList*)
AIMath::SnapPolyAtPlane(VuVecConstPtrList*, VuVec const*, VuVec const*, VuVecList*)
CMList<VuVec const*>::Insert(VuVec const* const&, CMList<VuVec const*>::ListLink*)
AIMath::SnapPolysAtPoint(VuVecConstPtrListList*, VuVec const*)
AIMath::SnapPolyAtPoint(VuVecConstPtrList*, VuVec const*)
AIMath::Between_3D(VuVec const*, VuVec const*, VuVec const*, float)
AIMath::PointSegDist(VuVec const&, VuVec const&, VuVec const&, VuVec&)
AIMath::PointSegDistSqr(VuVec const&, VuVec const&, VuVec const&, VuVec&)
AIMath::PointLineDist(VuVec const*, VuVec const*, VuVec const*, bool, VuVec*)
AIMath::SplitPolysWithSeg(VuVecConstPtrListList*, VuVecConstPtrPair const*, VuVecList*, VuVecConstPtrListPtrList*, VuVecConstPtrListPtrList*, VuVecConstPtrListPtrList*)
VuVecConstPtrPair::XZNrm(VuVec*) const
AIMath::SplitPolyWithSeg(VuVecConstPtrList const*, VuVecConstPtrListList*, VuVec const*, VuVec const*, VuVec const*, VuVecList*, VuVecConstPtrListPtrList*, VuVecConstPtrListPtrList*, VuVecConstPtrListPtrList*)
AIMath::MakeConvex(VuVecConstPtrList*)
AIMath::PointLineDist_2D(VuVec const*, VuVec const*, VuVec const*, bool)
AIMath::SnapPolysAtPairEnds(VuVecConstPtrListList*, VuVecConstPtrPair const*, VuVecList*)
AIMath::SnapPolyAtPairEnds(VuVecConstPtrList*, VuVecConstPtrPair const*, VuVecList*)
AIMath::MakeSelectable(VuVecConstPtrList&)
AIMath::CalcOBBMinMaxFov(NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base&, NuVector3Base&)
AIMath::GetBoxCorner(NuMatrixBase const&, NuVector3Base const&, NuVector3Base&, AIMath::BoxCorner const&)
AIMath::CalcSphereMinMaxFov(VuVec const&, float, VuVec const&, VuVec&, VuVec&, float*, float*)
AIMath::GetLocalBoxCorner(NuVector3Base const&, NuVector3Base&, AIMath::BoxCorner const&)
AIMath::GetRandomPointInsideTriangle(VuVec const&, VuVec const&, VuVec const&, VuVec&)
AIMath::PlaneFromPoints(VuVecConstPtrList*, VuVec*, VuVec*)
AI_AABB::SetCenterExtent(VuVec const*, VuVec const*)
VuVecConstPtrPair::Dist() const
VuVecConstPtrPair::DistSqr() const
VuVecConstPtrPair::Swap()
VuVecConstPtrPair::Front(VuVec const*) const
VuVecConstPtrListList::RemoveByPtrList(VuVecConstPtrListPtrList*, bool)
AIMath::IntersectProp(VuVec const*, VuVec const*, VuVec const*, VuVec const*)
AIMath::InCone(VuVec const*, VuVec const*, VuVec const*, VuVec const*)
CMList<VuVecConstPtrList>::Remove(CMList<VuVecConstPtrList>::ListLink*)
AIMemPool::Init()
AIMemPool::Flush()
AITask::StringToHash(char const*)
TaskList::TaskList()
TaskList::~TaskList()
TaskList::~TaskList()
Task_Manager::Task_Manager()
AITask::AITask(char const*)
Task_Manager::Reset(Brain&)
Task_Manager::Sleep(Brain&)
Task_Wait::Task_Wait(float)
Task_Wait::Process(Brain&, float const&)
AITask::~AITask()
AITask::ContainerRemoved(LevelContainer*)
AITask::Process(Brain&, float const&)
AITask::RemoveSubTask(AITask&, Brain&)
AITask::Activate()
AITask::Terminate(Brain&)
AITask::AddSubTask(AITask&, bool)
AITask::RemoveSubTask(unsigned int, Brain&, unsigned int)
AITask::RemoveSubTaskByTag(Brain&, unsigned int)
AITask::ClearTasks(Brain&)
AITask::FindSubTask(unsigned int, unsigned int) const
AITask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
AIFocalTask::AIFocalTask(char const*)
AIFocalTask::~AIFocalTask()
AIFocalTask::ContainerRemoved(LevelContainer*)
AIFocalTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
AIFocalTask::SetFocusAsApiCharacter(ApiCharacter*)
AIFocalTask::SetFocusAsBrain(Brain*, Brain const&)
AIFocusPoint_Brain::SetBrain(Brain*)
AIFocalTask::SetFocusAsLocator(AIConvexLocator*)
AIFocalTask::SetFocusAsLocation(VuVec const&, AIManager const*)
AIFocusPoint_Location::UpdateNode(AIManager const&)
AIFocusPoint_ApiCharacter::GetPosition(VuVec&)
AIFocusPoint_ApiCharacter::GetNode()
AIFocusPoint_ApiCharacter::GetRadius() const
AIFocusPoint_Brain::GetPosition(VuVec&)
AIFocusPoint_Brain::GetNode()
AIFocusPoint_Brain::GetRadius() const
AIFocusPoint_Brain::NotifyObjectDestroy(void*)
AIFocusPoint_Brain::~AIFocusPoint_Brain()
AIFocusPoint_Brain::~AIFocusPoint_Brain()
AIFocusPoint_Locator::AIFocusPoint_Locator(AIConvexLocator*)
AIFocusPoint_Locator::GetPosition(VuVec&)
AIFocusPoint_Locator::GetNode()
AIFocusPoint_Locator::GetRadius() const
AIFocusPoint_Locator::GetDirection() const
AIFocusPoint_Location::ContainerRemoved(LevelContainer*)
AIVehicleTask::Process(Brain&, float const&)
AIVehicleFocalTask::Process(Brain&, float const&)
Task_Manager::~Task_Manager()
Task_Manager::Terminate(Brain&)
AITask::~AITask()
Task_Wait::~Task_Wait()
AIFocusPoint_ApiCharacter::~AIFocusPoint_ApiCharacter()
AIFocusPoint_ApiCharacter::~AIFocusPoint_ApiCharacter()
AIFocusPoint_RadDir::SetRadius(float)
AIFocusPoint_RadDir::GetDirection() const
AIFocusPoint_RadDir::SetDirection(float)
AIFocusPoint_ApiCharacter::GetType() const
AIFocusPoint_ApiCharacter::IsValid() const
AIFocusPoint::ContainerRemoved(LevelContainer*)
AIFocusPoint_Brain::GetType() const
AIFocusPoint_Brain::IsValid() const
AIFocusPoint_Locator::~AIFocusPoint_Locator()
AIFocusPoint_Locator::~AIFocusPoint_Locator()
AIFocusPoint_Locator::SetRadius(float)
AIFocusPoint_Locator::SetDirection(float)
AIFocusPoint_Locator::GetType() const
AIFocusPoint_Locator::IsValid() const
AIFocusPoint::~AIFocusPoint()
AIFocusPoint_Location::~AIFocusPoint_Location()
AIFocusPoint_Location::GetPosition(VuVec&)
AIFocusPoint_RadDir::GetRadius() const
AIFocusPoint_Location::GetNode()
AIFocusPoint_Location::GetType() const
AIFocusPoint_Location::IsValid() const
AIVehicleTask::~AIVehicleTask()
AIFocalTask::~AIFocalTask()
AIVehicleFocalTask::~AIVehicleFocalTask()
Task_Circle::Task_Circle(Task_Circle::Direction)
Task_Circle::~Task_Circle()
Task_Circle::~Task_Circle()
Task_Circle::Activate()
Task_Circle::Process(Brain&, float const&)
Task_Circle::IsSafe(VuVec const&, Brain&) const
Task_Circle::ChangeDirection()
AIDecision<Task_Circle::Direction>::~AIDecision()
AIDecisionBase::~AIDecisionBase()
AIDecisionBase::~AIDecisionBase()
Task_DirectTraverse::Task_DirectTraverse()
Task_DirectTraverse::~Task_DirectTraverse()
Task_DirectTraverse::~Task_DirectTraverse()
Task_DirectTraverse::Activate()
Task_DirectTraverse::Process(Brain&, float const&)
Task_GeneratePath::Task_GeneratePath()
Task_GeneratePath::~Task_GeneratePath()
Task_GeneratePath::~Task_GeneratePath()
Task_GeneratePath::Process(Brain&, float const&)
Task_GeneratePath::ShouldStop()
Task_Interact::Task_Interact(AIInteractable*, StreamingLevel const*, float, float)
Task_Interact::Activate()
Task_Interact::ValidateStreamingLevel(StreamingLevel const*) const
Task_Interact::Process(Brain&, float const&)
Task_Interact::~Task_Interact()
Task_Meander::Task_Meander()
Task_Meander::~Task_Meander()
Task_Meander::~Task_Meander()
Task_Meander::Process(Brain&, float const&)
Task_PathTo::Task_PathTo()
Task_PathTo::Task_PathTo(AIManager const*, VuVec const&, float, Task_PathTo::Positioning)
Task_PathTo::~Task_PathTo()
Task_PathTo::~Task_PathTo()
Task_PathTo::Activate()
Task_PathTo::Process(Brain&, float const&)
Task_PathTo::UpdateTargetCamera(Brain&)
Task_PathTo::PrepareTargets(Brain&)
Task_PathTo::OverrideDirection(Brain&)
Task_PathTo::CalcRadius(Brain&, float*) const
Task_PathTo::UpdateCustomRadius(Brain&)
Task_Retreat::Task_Retreat()
Task_Retreat::~Task_Retreat()
Task_Retreat::~Task_Retreat()
Task_Retreat::Activate()
Task_Retreat::Process(Brain&, float const&)
Task_Retreat::CalculateData(Brain const&, VuVec&, float&) const
Task_Retreat::Escape(Brain&, float const&, VuVec&)
Task_Retreat::UpdateSearches(Brain&)
Task_ReturnToGraph::Task_ReturnToGraph()
Task_ReturnToGraph::~Task_ReturnToGraph()
Task_ReturnToGraph::~Task_ReturnToGraph()
Task_ReturnToGraph::Process(Brain&, float const&)
Task_Traverse::Task_Traverse()
Task_Traverse::~Task_Traverse()
Task_Traverse::~Task_Traverse()
Task_Traverse::Process(Brain&, float const&)
Task_Traverse::TraversePath(Brain&, float const&)
Task_Traverse::MoveTowardsTarget(Brain&, float const&)
Task_Traverse::OffScreenCatchUp(Brain&)
Task_Traverse::ReturnToGraph(Brain&, float const&)
Task_Wander::Task_Wander()
Task_Wander::Process(Brain&, float const&)
Task_Wander::~Task_Wander()
Task_MoveInstruction::Task_MoveInstruction()
Task_MoveInstruction::~Task_MoveInstruction()
Task_MoveInstruction::~Task_MoveInstruction()
Task_MoveInstruction::CreateSubTask(Brain&, unsigned int)
Task_MoveInstruction::Process(Brain&, float const&)
Task_MoveInstruction::Terminate(Brain&)
Task_MoveInstruction::SetMoveMode(Brain&, NUVEC const*, float, int, float, APIOBJECT*, ConvexNode*)
Task_MoveInstruction::AISelectBehaviour(Brain&, NUVEC const*)
Task_MoveInstruction::GetAtTarget() const
Task_MoveInstruction::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
VehicleTask_FollowSpline::VehicleTask_FollowSpline()
VehicleTask_FollowSpline::~VehicleTask_FollowSpline()
VehicleTask_FollowSpline::~VehicleTask_FollowSpline()
VehicleTask_FollowSpline::VehicleProcess(VehicleBrain&, float const&)
VehicleTask_FollowSpline::UpdateSpline()
VehicleTask_PathTo::VehicleTask_PathTo()
VehicleTask_PathTo::~VehicleTask_PathTo()
VehicleTask_PathTo::Activate()
VehicleTask_PathTo::VehicleProcess(VehicleBrain&, float const&)
VehicleTask_PathTo::PrepareTargets(VehicleBrain&)
VehicleTask_PathTo::OverrideDirection(VehicleBrain&)
VehicleTask_PathToRange::VehicleTask_PathToRange()
VehicleTask_PathToRange::VehicleProcess(VehicleBrain&, float const&)
VehicleTask_PathTo::~VehicleTask_PathTo()
VehicleTask_PathToRange::~VehicleTask_PathToRange()
VehicleTask_Traverse::VehicleTask_Traverse(VehicleTarget&)
VehicleTask_Traverse::~VehicleTask_Traverse()
VehicleTask_Traverse::~VehicleTask_Traverse()
VehicleTask_Traverse::VehicleProcess(VehicleBrain&, float const&)
VehicleTask_Traverse::ProcessRoute(VehicleBrain&, float const&)
VehicleTask_Traverse::PickTarget(VehicleBrain&, float const&)
VehicleTask_Traverse::SimpleDrive(VehicleBrain&, float const&)
VehicleTask_Traverse::ThreePointTurn(VehicleBrain&, VuVec const&)
AIDecision<VehicleTask_Traverse::Decision>::~AIDecision()
AIDecision<VehicleTask_Traverse::TargetType>::~AIDecision()
AIDecision<VehicleTask_Traverse::ThreePointTurnDir>::~AIDecision()
AIBezierSpline::BezierLength(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float)
AIBezierSpline::BezierLength(VuVec const&, VuVec const&, VuVec const&, VuVec const&)
AIBezierSpline::GetTimeAtDist(AIBezierSplinePoint*&, float) const
AIBezierSpline::UpdateAllDistances()
AIBezierSplinePoint::UpdateDistToNext(AIBezierSplinePoint&)
AIBezierSpline::Clear()
AIBezierSpline::GetLength() const
AIBezierSpline::GetLength_Point(AIBezierSplinePoint* const&) const
AIBezierSpline::GetPosition_Dist(VuVec&, float) const
AIBezierSpline::GetPosition_Time(VuVec&, float) const
AIBezierSpline::GetTangent_Dist(VuVec&, float) const
AIBezierSpline::GetLength_NearestPos(VuVec const&, float const*) const
AIBezierSpline::~AIBezierSpline()
AIConvexArea::AIConvexArea(EdRegContext&, AIManager&)
AIConvexArea::GetAreaNum() const
AIConvexArea::GetClass() const
AIConvexArea::SetPosition(VuVec const&)
AIConvexArea::RecalcTrigger()
AIConvexArea::SetSize(VuVec const&)
AIConvexArea::SetName(char const*)
AIConvexArea::~AIConvexArea()
non-virtual thunk to AIConvexArea::~AIConvexArea()
AIConvexArea::~AIConvexArea()
non-virtual thunk to AIConvexArea::~AIConvexArea()
AIConvexAreaHelper::Initialise()
void AIAutoCreatedInterface::Register<AIConvexArea>(EdClass*)
AIConvexAreaHelper::GetManNumObjects(ClassManager*, void*)
AIConvexAreaHelper::GetManNextObject(ClassManager*, void*, void*)
AIConvexAreaHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
AIConvexAreaHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
AIConvexAreaHelper::~AIConvexAreaHelper()
AIConvexAreaHelper::CanSaveObject(void*, EdSerialiseParams&)
EdRefAIConvexArea::~EdRefAIConvexArea()
EdRefAIConvexArea::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAIConvexArea::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AutoCreatedEdRef<AIConvexArea>::~AutoCreatedEdRef()
AutoCreatedEdRef<AIConvexArea>::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AutoCreatedEdRef<AIConvexArea>::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AIConvexLocator::AIConvexLocator(short)
AIConvexLocator::~AIConvexLocator()
AIConvexLocatorHelper::NotifyDestroy(AIConvexLocator*)
non-virtual thunk to AIConvexLocator::~AIConvexLocator()
AIConvexLocator::~AIConvexLocator()
non-virtual thunk to AIConvexLocator::~AIConvexLocator()
AIConvexLocator::IsInSet(AIConvexLocatorSet const*) const
AIConvexLocator::GetClass() const
AIConvexLocator::SetTransform(VuMtx const&)
AIConvexLocator::SetConvexNode(ConvexNode*)
AIConvexLocator::SetPosition(VuVec const&)
AIConvexLocator::GetConvexNode()
AIConvexLocator::BindToConvexNode()
AIConvexLocator::UnBindFromConvexNode()
AIConvexLocator::GetIndex() const
AIConvexLocator::IsInAABB(AI_AABB&) const
AIConvexLocator::GetSaveID() const
AIConvexLocator::GetMinMax(VuVec&, VuVec&) const
AIConvexLocator::GetNuUniqueObjectBase()
AIConvexLocator::GetNuUniqueName() const
non-virtual thunk to AIConvexLocator::GetNuUniqueName() const
AIConvexLocator::GetNuUniqueNameHash() const
non-virtual thunk to AIConvexLocator::GetNuUniqueNameHash() const
EdRefAIConvexLocator::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAIConvexLocator::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AIConvexLocatorHelper::AIConvexLocatorHelper()
void AIAutoCreatedInterface::Register<AIConvexLocator>(EdClass*)
AIConvexLocatorHelper::GetManNumObjects(ClassManager*, void*)
AIConvexLocatorHelper::GetManNextObject(ClassManager*, void*, void*)
AIConvexLocatorHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
AIConvexLocatorHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
AIConvexLocatorHelper::CreateLocatorLink(AIConvexLocator*, AIConvexLocator*)
AIConvexLocatorHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
EdRefAIConvexLocator::~EdRefAIConvexLocator()
AIConvexLocator::GetLedFile() const
AIConvexLocator::SetLedFile(short)
AIConvexLocator::GetName() const
AIConvexLocator::SetName(char const*)
AIConvexLocator::GetTransform(VuMtx&) const
AIConvexLocator::GetPosition(VuVec&) const
AIConvexLocator::GetSceneNode() const
AIConvexLocator::Activate()
AIConvexLocator::Deactivate()
AIConvexLocator::IsActive() const
AIConvexLocator::SetSceneNode(SceneNode*)
AIConvexLocator::GetRadius() const
AIConvexLocatorHelper::~AIConvexLocatorHelper()
AIConvexLocatorHelper::~AIConvexLocatorHelper()
AIConvexLocatorHelper::CanSaveObject(void*, EdSerialiseParams&)
non-virtual thunk to AIConvexLocatorHelper::~AIConvexLocatorHelper()
non-virtual thunk to AIConvexLocatorHelper::~AIConvexLocatorHelper()
AutoCreatedEdRef<AIConvexLocator>::~AutoCreatedEdRef()
AutoCreatedEdRef<AIConvexLocator>::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AutoCreatedEdRef<AIConvexLocator>::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AIConvexLocatorLink::GetPosition(VuVec&) const
AIConvexLocatorLink::GetClass() const
AIConvexLocatorLink::GetPosition() const
AIConvexLocatorLink::AddToEdgeGroup() const
AIConvexLocatorLink::CreateConvexLink()
AIConvexLocatorLink::DestroyConvexLink()
AIConvexLocatorLink::SetRootLocator(AIConvexLocator*)
AIConvexLocatorLink::SetDestinationLocator(AIConvexLocator*)
AIConvexLocatorLink::AutoUpdateName()
EdRefAIConvexLocatorLink::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAIConvexLocatorLink::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AIConvexLocatorLinkHelper::Initialise()
AIConvexLocatorLinkHelper::ClearConnectionEnums()
void AIAutoCreatedInterface::Register<AIConvexLocatorLink>(EdClass*)
AIConvexLocatorLinkHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
AIConvexLocatorLinkHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
AIConvexLocatorLinkHelper::GetManNumObjects(ClassManager*, void*)
AIConvexLocatorLinkHelper::GetManNextObject(ClassManager*, void*, void*)
AIConvexLocatorLinkHelper::AddConnectionEnum(char const*, unsigned long)
AIConvexLocatorLinkHelper::GetConnectionTypeString(void*, char*&, int)
AIConvexLocatorLink::~AIConvexLocatorLink()
AIConvexLocatorLink::~AIConvexLocatorLink()
non-virtual thunk to AIConvexLocatorLink::~AIConvexLocatorLink()
non-virtual thunk to AIConvexLocatorLink::~AIConvexLocatorLink()
AIConvexLocatorLinkHelper::~AIConvexLocatorLinkHelper()
AIConvexLocatorLinkHelper::CanSaveObject(void*, EdSerialiseParams&)
EdRefAIConvexLocatorLink::~EdRefAIConvexLocatorLink()
AutoCreatedEdRef<AIConvexLocatorLink>::~AutoCreatedEdRef()
AutoCreatedEdRef<AIConvexLocatorLink>::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AutoCreatedEdRef<AIConvexLocatorLink>::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AIConvexLocatorSet::GetClass() const
AIConvexLocatorSet::GetPosition(VuVec&) const
AIConvexLocatorSet::SetPosition(VuVec const&)
AIConvexLocatorSet::UpdatePosition()
AIConvexLocatorSet::AddLocator(AIConvexLocator&)
CMList<AIConvexLocatorSet*>::Append(AIConvexLocatorSet* const&, CMList<AIConvexLocatorSet*>::ListLink*)
AIConvexLocatorSet::RemoveLocator(AIConvexLocator&, bool)
AIConvexLocatorSet::GetLocator(int) const
AIConvexLocatorSet::GetLocatorIndex(AIConvexLocator*) const
AIConvexLocatorSet::GetLocatorSetExtents(VuVec&, VuVec&) const
AIConvexLocatorSet::~AIConvexLocatorSet()
non-virtual thunk to AIConvexLocatorSet::~AIConvexLocatorSet()
AIConvexLocatorSet::~AIConvexLocatorSet()
non-virtual thunk to AIConvexLocatorSet::~AIConvexLocatorSet()
EdRefAIConvexLocatorSet::GetCount(void*)
EdRefAIConvexLocatorSet::SetCount(void*, unsigned int)
EdRefAIConvexLocatorSet::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAIConvexLocatorSet::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AIConvexLocatorSetHelper::Initialise()
AIConvexLocatorSetHelper::GetManNumObjects(ClassManager*, void*)
AIConvexLocatorSetHelper::GetManNextObject(ClassManager*, void*, void*)
AIConvexLocatorSetHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
AIConvexLocatorSetHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
AILocatorRefHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
AILocatorRefHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
AILocatorRefHelper::GetNumObjects(void*)
AILocatorRefHelper::GetNextObject(void*, void*)
EdRefAILocatorRef::GetMemberObject(void*)
EdRefAILocatorRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAIConvexLocatorSet::~EdRefAIConvexLocatorSet()
EdRefAIConvexLocatorSet::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAIConvexLocatorSet::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AIConvexLocatorSetHelper::~AIConvexLocatorSetHelper()
EdRefAILocatorRef::~EdRefAILocatorRef()
AILocatorRefHelper::~AILocatorRefHelper()
EdRefAISpline::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefAISpline::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
AISplineHelper::Initialise()
AISplineHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
AISplineHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
AISplineHelper::GetManNumObjects(ClassManager*, void*)
AISplineHelper::GetManNextObject(ClassManager*, void*, void*)
AISplinePointHelper::Initialise()
AISplinePointHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
Wander::AddNewPoint()
AISplinePointHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
Wander::DeletePoint(WanderPoint&)
AISplinePointHelper::GetNextObject(void*, void*)
AISplinePointHelper::GetNumObjects(void*)
Wander::Process()
Wander::GetBoundingBox(NUVEC&, NUVEC&)
Wander::FindNearestPointXZ(NUVEC const&, int, float&) const
WanderPoint::GetRandPos(NUVEC&, int const&, unsigned int const&) const
AISplineHelper::~AISplineHelper()
AISplinePointHelper::~AISplinePointHelper()
AISplinePointHelper::~AISplinePointHelper()
AISplinePointHelper::GetParentObject(void*)
AISplinePointHelper::GetParentClass(void*)
non-virtual thunk to AISplinePointHelper::~AISplinePointHelper()
non-virtual thunk to AISplinePointHelper::~AISplinePointHelper()
EdRefAISpline::~EdRefAISpline()
Wander::~Wander()
Wander::~Wander()
Wander::GetLedFile() const
Wander::SetLedFile(short)
Wander::GetName() const
Wander::SetName(char const*)
Wander::GetClass() const
Wander::Activate()
Wander::Deactivate()
Wander::IsActive() const
AutoEdgeGroup::Update(float)
AutoEdgeGroup::UpdateLink(ConvexLink&)
AutoEdgeGroup::CanReachPositionByJumping(VuVec const&, VuVec const&, VuVec const&)
AutoEdgeGroup::PosAtTime(float, VuVec const&)
AutoEdgeGroup::CanReachPositionByJumping(VuVec const&, VuVec const&, float const&, float const&)
AutoEdgeGroup::~AutoEdgeGroup()
EdgeGroup::~EdgeGroup()
EdgeGroup::~EdgeGroup()
EdgeGroup::RemoveFlagged(int)
EdgeGroup::RemoveIfData()
EdgeGroup::RemoveIfNoData()
EdgeGroup::SetFlagForAll(int) const
EdgeGroup::ClearFlagForAll(int) const
EdgeGroup::ContainerRemoved(LevelContainer*)
EdgeGroup::RemoveEdge(ConvexEdge*)
EdgeGroup::ContainsDestinationNode(ConvexNode*)
EdgeGroup::SetGroupName(char const*)
EdgeGroup::GetGroupName() const
NodeGroup::SetZoneForAll(AIZone::ZoneType const&) const
NodeGroup::ActivateAll() const
NodeGroup::DeactivateAll() const
NodeGroup::ContainerRemoved(LevelContainer*)
NodeGroup::ObstacleReferenceAll() const
NodeGroup::ObstacleReleaseAll() const
NodeGroup::SetCostMultiplierForAll(float) const
NodeGroup::SetFlagForAll(unsigned char) const
NodeGroup::ClearFlagForAll(unsigned char) const
NodeGroup::FixupWallsAtEdge() const
NodeGroup::FixupWallsAtZone() const
NodeGroup::SetGroupName(char const*)
NodeGroup::GetGroupName() const
BoxTrigger::BoxTrigger()
BoxTrigger::GetAABB(NuVector3Base&, NuVector3Base&) const
BoxTrigger::CheckCollision(Entity const&) const
BoxTrigger::GetTransform(NuMatrixBase&)
CylinderTrigger::GetAABB(NuVector3Base&, NuVector3Base&) const
CylinderTrigger::CheckCollision(Entity const&) const
Trigger::Activate()
Trigger::Deactivate()
Trigger::AddUser(int)
Trigger::RemoveUser(int)
Trigger::HasUser(int) const
Trigger::HasUser(ApiCharacter const*) const
CylinderTrigger::~CylinderTrigger()
Trigger::GetTransform(NuMatrixBase&)
Trigger::~Trigger()
BoxTrigger::~BoxTrigger()
Trigger::~Trigger()
TriggerEventData::~TriggerEventData()
TriggerManager::TriggerManager(LevelContainer&, LevelContainer*)
TriggerManager::RegisterProcessing()
TriggerManager::RegisterRendering()
TriggerManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
TriggerManager::ProcessQueue(int)
TriggerManager::EventNotify(Event&, NuEventData&)
TriggerManager::Clear()
TriggerManager::AddTrigger(Trigger&)
TriggerManager::RemoveTrigger(Trigger&)
TriggerManager::AddUser(ApiCharacter const*)
TriggerManager::RemoveUser(ApiCharacter const*)
TriggerManager::AddQueueItem(ApiCharacter const*)
TriggerManager::RemoveQueueItem(ApiCharacter const*)
TriggerManager::FindUser(ApiCharacter const*) const
TriggerManager::~TriggerManager()
TriggerManager::~TriggerManager()
TriggerManager::GetManagerName() const
TriggerManager::IsChildlessManager()
VehicleTarget::ContainerRemoved(LevelContainer*)
VehicleTarget::GetCornerPosition(VuVec&, VehicleTarget::Corner) const
VehicleTarget::GetTransform_NoScale(VuMtx&) const
VehicleTarget::UpdateNode(AIManager const&)
VehicleTarget::GetExtents(VuVec&) const
VehicleTarget::PointInsideTarget(VuVec const&) const
VehicleTarget::PointToLocalSpace(VuVec&) const
VehicleTarget::~VehicleTarget()
VehicleTarget::GetPosition(VuVec&)
VehicleTarget::GetRadius() const
VehicleTarget::SetRadius(float)
VehicleTarget::GetNode()
VehicleTarget::GetDirection() const
VehicleTarget::SetDirection(float)
VehicleTarget::GetType() const
VehicleTarget::IsValid() const
APIOBJECT::~APIOBJECT()
APIOBJECT::~APIOBJECT()
APIOBJECT::FixupApiCharacter(EdRegContext&, ApiCharacter*)
APIOBJECT::GetApiObjBrain() const
APIOBJECT::GetApiObjPhysicsChar() const
APIOBJECT::Cast(Brain const*)
APIOBJECT::GetOpponent() const
APIOBJECT::GetNearestOpponent() const
AIRandomFloat(float, float)
AIRandomInt(int, int)
AiDistInsideSpline(biospline_s const&, VuVec const&)
AIInsideSpline(biospline_s const&, VuVec const&)
AIFindBestSplineKVal(biospline_s const*, VuVec const*, int)
AIFindBestSplinePoint(biospline_s const*, float, VuVec*, int)
AIInsideSpline(VuVec const*, int, VuVec const&)
VuVecTween(VuVec*, VuVec const*, VuVec const*, float)
AIVuVecSplinePoint(VuVec*, VuVec*, float, int)
AIVuVecSplinePointSafe(VuVec*, VuVec*, float, int, int)
deleteBioSpline(biospline_s*&)
AIFindBestSplinePoint(biospline_s const*, float, VuMtx*, int)
AIFindBestSplinePoint(biospline_s const*, VuVec*, VuMtx*, int)
AIFindBestSplinePoint(biospline_s const*, VuVec*, VuVec*, int)
GenSplineGetPoint(NuSpline*, int, int, VuVec*, int)
GetMinMaxPoint_Spline(NuSpline*, VuVec&, VuVec&)
GenerateBioSpline(NuSpline*, int, int, int, float, int)
GetApproxLiveCalcPow(float)
CalcFrameTimes(float, float, float, float)
calculateQuadRoots(float, float, float, float&, float&)
CalculateAimForProjectileMoody(VuVec const&, VuVec const&, VuVec const&, float, VuVec&, VuVec&, VuVec*)
PredictProjectile(VuVec const&, VuVec const&, VuVec const&, VuVec*, int, float, int, int)
AIMoveInstruction(ApiCharacter*, NUVEC const*, float, int, float, APIOBJECT*, ConvexNode*)
AIMoveInstruction(AIPACKET*, NUVEC const*, float, int, float, APIOBJECT*, ConvexNode*)
AIMoveInstructionLegacy(ApiCharacter*, NUVEC const*, float, int, float, APIOBJECT*, ConvexNode*)
ObjectCloud::Overlaps(CloudPiece const&, float) const
ObjectCloud::AddSorted(CloudPiece&)
ObjectCloud::CanAdd(CloudPiece const&)
ObjectCloud::AddCloud(ObjectCloud&)
ObjectCloud::CalcSqrDistance(VuVec const&, CloudPiece*&) const
ObjectCloud::~ObjectCloud()
SwapFloat(float&, float&)
CloudPiece::UpdateAIData(NUVEC const&, float)
CloudPiece::Init(NuVector3Base const&, float)
OrcaAgent::OrcaAgent()
OrcaAgent::SetRadius(float)
OrcaAgent::SetPosition(VuVec const&)
OrcaAgent::SetVelocity(VuVec const&)
OrcaAgent::SetTargetVelocity(VuVec const&)
OrcaAgent::SetNewVelocity(NuVec2 const&)
OrcaAgent::IntegratePosition(float)
OrcaAgent::GetRadius()
OrcaAgent::GetNewVelocity()
OrcaAgent::GetPosition() const
OrcaAgent::GetVelocity()
OrcaAgent::SetBrain(Brain*)
OrcaAgent::DebugRender(OrcaSolver&, Array<OrcaAgent*>&, Array<OrcaLineSeg*>&)
OrcaAgent::Process(float, Array<OrcaAgent*>&, Array<OrcaLineSeg*>&)
OrcaAgent::ProcessObstacles(OrcaSolver&, Array<OrcaLineSeg*>&, float)
OrcaAgent::ProcessAgents(OrcaSolver&, Array<OrcaAgent*>, float)
OrcaAgent::DebugRenderWeights(OrcaAgent const&, OrcaAgent const&, float)
OrcaAgent::Render()
void std::__1::__sort<Array<OrcaLineSeg*>::pointer_compare&, OrcaLineSeg**>(OrcaLineSeg**, OrcaLineSeg**, Array<OrcaLineSeg*>::pointer_compare&)
unsigned int std::__1::__sort5<Array<OrcaLineSeg*>::pointer_compare&, OrcaLineSeg**>(OrcaLineSeg**, OrcaLineSeg**, OrcaLineSeg**, OrcaLineSeg**, OrcaLineSeg**, Array<OrcaLineSeg*>::pointer_compare&)
bool std::__1::__insertion_sort_incomplete<Array<OrcaLineSeg*>::pointer_compare&, OrcaLineSeg**>(OrcaLineSeg**, OrcaLineSeg**, Array<OrcaLineSeg*>::pointer_compare&)
OrcaSolver::IsSegmentOccluded(NuVec2&, NuVec2&, float)
OrcaSolver::SolveConstraints(float, NuVec2 const&, NuVec2&)
OrcaSolver::IncrementalSolver2D(float, NuVec2 const&, NuVec2&)
OrcaSolver::Render(VuVec const&, float)
OrcaLineSeg::Render(VuVec const&, float, int)
OrcaLineSeg::CreateSegments(Array<VuVec>&, Array<OrcaLineSeg*>&, bool, float)
OrcaLineSeg::ConnectSegments(Array<OrcaLineSeg*>&, bool)
OrcaLineSeg::CreateSegments(Array<OrcaEdge>&, Array<OrcaLineSeg*>&, bool, float)
AStarItem::VoidAStarNode()
AStarItem::GetAStarNode()
AStarNode::Initialise()
AStarProcessor::AStarProcessor()
AStarProcessor::AStarNodeArrayList::Initialise(int)
AStarProcessor::Clean()
AStarProcessor::~AStarProcessor()
TempAStarItem::~TempAStarItem()
AStarProcessor::AStarNodeArrayList::Clean()
AStarProcessor::Process(int, float, unsigned int const&, float, float const&, float*)
AStarProcessor::AddToOpenList(AStarNode&)
AStarProcessor::AStarNodeArrayList::IsFull()
AStarProcessor::RemoveBestFromOpenList()
AStarProcessor::RemoveFromClosedList(AStarNode&)
AStarProcessor::AddToClosedList(AStarNode&)
AStarProcessor::AStarNodeArrayList::AddSorted(AStarNode*)
AStarProcessor::AStarNodeArrayList::Append(AStarNode*)
AStarProcessor::RemoveFromOpenList(AStarNode&)
AStarProcessor::AStarNodeArrayList::Remove(AStarNode*)
AStarProcessor::AStarNodeArrayList::PopEnd()
AStarProcessor::GetConstructedPath()
AStarProcessor::CheckForNonUse()
AStarProcessor::AStarNodeArrayList::Empty()
AStarProcessor::AStarNodeArrayList::Populate(int)
AStarProcessor::AStarNodeArrayList::Add(int, AStarNode*)
AStarProcessor::AStarNodeArrayList::Prepend(AStarNode*)
AStarProcessor::AStarNodeArrayList::PopStart()
TempAStarItem::GetTraversalCostMultiplier() const
TempAStarItem::~TempAStarItem()
TempAStarItem::IsTempItem()
TempAStarItem::UpdateBestPosition(VuVec const&, VuVec const&, float)
TempAStarItem::UpdateBestInfo(VuVec const&, VuVec const&, float, AStarItem const&, AStarTurningData const*)
AStarItem::GetPhysicalPosition(VuVec&) const
TempAStarItem::GetFirstNeighbour() const
TempAStarItem::GetNextNeighbour(void*) const
TempAStarItem::IsNeighbour(AStarItem*) const
AStarItem::IsCapable(int, float, int) const
AStarItem::IsCapableFrom(float, AStarItem*)
TempAStarItem::GetCost() const
TempAStarItem::GetData() const
ConvexDynamicLink::Update(AIManager&)
ConvexDynamicLink::ResolveEndPoints()
ConvexDynamicLink::IsCapable(int, float, int) const
EdRefConvexDynamicLink::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefConvexDynamicLink::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ConvexDynamicLinkHelper::Initialise()
ConvexDynamicLinkHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ConvexDynamicLinkHelper::GetNumObjects(void*)
ConvexDynamicLinkHelper::GetNextObject(void*, void*)
ConvexDynamicLinkHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ConvexDynamicLink::~ConvexDynamicLink()
ConvexDynamicLink::IsCapableFrom(int, float, AStarItem*, float) const
ConvexDynamicLinkHelper::~ConvexDynamicLinkHelper()
EdRefConvexDynamicLink::~EdRefConvexDynamicLink()
ConvexDynamicNode::ConvexDynamicNode(ConvexGraph&, SceneObject&)
ConvexDynamicNode::UpdateOffset()
ConvexDynamicNode::~ConvexDynamicNode()
ConvexDynamicNode::~ConvexDynamicNode()
ConvexDynamicNode::GetPosition(VuVec*)
ConvexDynamicNode::GetPosition(VuVec*) const
ConvexDynamicNode::WithinNode(VuVec const&, bool, bool) const
ConvexDynamicNode::WithinNode(VuVec const&, VuVec const&, float&) const
ConvexDynamicNode::GetPositionOnNodeUsingVerticalRayCast(VuVec&) const
CMList<ConvexDynamicNode*>::Append(ConvexDynamicNode* const&, CMList<ConvexDynamicNode*>::ListLink*)
StitchLink::StitchLink(ConvexNode*)
StitchLink::~StitchLink()
StitchLink::~StitchLink()
StitchLink::SetDestination(ConvexNode*)
StitchLinkHelper::Initialise()
StitchLinkHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
StitchLinkHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
StitchLinkHelper::GetNumObjects(void*)
StitchLinkHelper::GetNextObject(void*, void*)
StitchLinkHelper::~StitchLinkHelper()
SAction_SetAvoidanceType::GetName() const
SAction_SetAvoidanceType::GetInputs(SCmdParams&) const
SAction_SetAvoidanceType::GetOutputs(SCmdParams&) const
SAction_SetAvoidanceType::Exec(ScriptContext&)
SAction_SetAvoidanceType::~SAction_SetAvoidanceType()
SAction_SetZoneAbility::GetName() const
SAction_SetZoneAbility::GetInputs(SCmdParams&) const
SAction_SetZoneAbility::GetOutputs(SCmdParams&) const
SAction_SetZoneAbility::Exec(ScriptContext&)
SAction_SetZoneAbility::~SAction_SetZoneAbility()
AILocatorScriptVariable::Init()
AILocatorScriptVariable::LoadVariable(char const*)
AILocatorScriptVariable::AILocatorScriptVariable(char const*, sDynamicVariableData, ScriptContext&)
SAction_Text2AILocator::Exec(ScriptContext&)
void ScriptContext::SetReturn<AILocatorScriptVariable, AIConvexLocator*>(int, AIConvexLocator*)
SAction_Text2AILocatorDeep::Exec(ScriptContext&)
SAction_AILocator::Exec(ScriptContext&)
void ScriptContext::SetReturn<AILocatorScriptVariable, sDynamicVariableData>(int, sDynamicVariableData)
LocatorAction::Exec(ScriptContext&)
SAction_AILocator2Text::Exec(ScriptContext&)
SAction_AILocator2Position::LocatorExec(ScriptContext&, AIConvexLocator*)
SAction_AILocatorGetDirection::LocatorExec(ScriptContext&, AIConvexLocator*)
DynamicScriptVariable<AIConvexLocator>::~DynamicScriptVariable()
AILocatorScriptVariable::~AILocatorScriptVariable()
AILocatorScriptVariable::AsBool() const
AILocatorScriptVariable::AsText() const
AILocatorScriptVariable::Equals(ScriptVariable const*)
DynamicScriptVariable<AIConvexLocator>::Set(ScriptVariable const*)
DynamicScriptVariable<AIConvexLocator>::EventNotify(Event&, NuEventData&)
non-virtual thunk to AILocatorScriptVariable::~AILocatorScriptVariable()
non-virtual thunk to AILocatorScriptVariable::~AILocatorScriptVariable()
non-virtual thunk to DynamicScriptVariable<AIConvexLocator>::EventNotify(Event&, NuEventData&)
SAction_AILocator2Text::~SAction_AILocator2Text()
SAction_AILocator2Text::GetName() const
SAction_AILocator2Text::GetInputs(SCmdParams&) const
SAction_AILocator2Text::GetOutputs(SCmdParams&) const
SAction_Text2AILocator::~SAction_Text2AILocator()
SAction_Text2AILocator::GetName() const
SAction_Text2AILocator::GetInputs(SCmdParams&) const
SAction_Text2AILocator::GetOutputs(SCmdParams&) const
SAction_Text2AILocatorDeep::~SAction_Text2AILocatorDeep()
SAction_Text2AILocatorDeep::GetName() const
SAction_Text2AILocatorDeep::GetInputs(SCmdParams&) const
SAction_Text2AILocatorDeep::GetOutputs(SCmdParams&) const
SAction_AILocator::~SAction_AILocator()
SAction_AILocator::GetName() const
SAction_AILocator::GetInputs(SCmdParams&) const
SAction_AILocator::GetOutputs(SCmdParams&) const
LocatorAction::~LocatorAction()
SAction_AILocator2Position::~SAction_AILocator2Position()
SAction_AILocator2Position::GetName() const
SAction_AILocator2Position::GetInputs(SCmdParams&) const
SAction_AILocator2Position::GetOutputs(SCmdParams&) const
SAction_AILocatorGetDirection::~SAction_AILocatorGetDirection()
SAction_AILocatorGetDirection::GetName() const
SAction_AILocatorGetDirection::GetInputs(SCmdParams&) const
SAction_AILocatorGetDirection::GetOutputs(SCmdParams&) const
DynamicScriptVariable<AIConvexLocator>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<AIConvexLocator>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<AIConvexLocator>::~DynamicScriptVariable()
ScriptVariable* CreateObject<AILocatorScriptVariable>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<AILocatorScriptVariable>(char const*, ScriptContext&)
AILocatorSetScriptVariable::Init()
AILocatorSetScriptVariable::LoadVariable(char const*)
AILocatorSetScriptVariable::AILocatorSetScriptVariable(char const*, sDynamicVariableData, ScriptContext&)
SAction_Text2AILocatorSet::Exec(ScriptContext&)
void ScriptContext::SetReturn<AILocatorSetScriptVariable, AIConvexLocatorSet*>(int, AIConvexLocatorSet*)
SAction_AILocatorSet::Exec(ScriptContext&)
void ScriptContext::SetReturn<AILocatorSetScriptVariable, sDynamicVariableData>(int, sDynamicVariableData)
SAction_AILocatorSet2Text::Exec(ScriptContext&)
SAction_AILocatorSetGetLocator::Exec(ScriptContext&)
SAction_AILocatorSetSize::Exec(ScriptContext&)
DynamicScriptVariable<AIConvexLocatorSet>::~DynamicScriptVariable()
AILocatorSetScriptVariable::~AILocatorSetScriptVariable()
AILocatorSetScriptVariable::AsBool() const
AILocatorSetScriptVariable::AsText() const
AILocatorSetScriptVariable::Equals(ScriptVariable const*)
DynamicScriptVariable<AIConvexLocatorSet>::Set(ScriptVariable const*)
DynamicScriptVariable<AIConvexLocatorSet>::EventNotify(Event&, NuEventData&)
non-virtual thunk to AILocatorSetScriptVariable::~AILocatorSetScriptVariable()
non-virtual thunk to AILocatorSetScriptVariable::~AILocatorSetScriptVariable()
non-virtual thunk to DynamicScriptVariable<AIConvexLocatorSet>::EventNotify(Event&, NuEventData&)
SAction_AILocatorSet2Text::~SAction_AILocatorSet2Text()
SAction_AILocatorSet2Text::GetName() const
SAction_AILocatorSet2Text::GetInputs(SCmdParams&) const
SAction_AILocatorSet2Text::GetOutputs(SCmdParams&) const
SAction_Text2AILocatorSet::~SAction_Text2AILocatorSet()
SAction_Text2AILocatorSet::GetName() const
SAction_Text2AILocatorSet::GetInputs(SCmdParams&) const
SAction_Text2AILocatorSet::GetOutputs(SCmdParams&) const
SAction_AILocatorSet::~SAction_AILocatorSet()
SAction_AILocatorSet::GetName() const
SAction_AILocatorSet::GetInputs(SCmdParams&) const
SAction_AILocatorSet::GetOutputs(SCmdParams&) const
SAction_AILocatorSetGetLocator::~SAction_AILocatorSetGetLocator()
SAction_AILocatorSetGetLocator::GetName() const
SAction_AILocatorSetGetLocator::GetInputs(SCmdParams&) const
SAction_AILocatorSetGetLocator::GetOutputs(SCmdParams&) const
SAction_AILocatorSetSize::~SAction_AILocatorSetSize()
SAction_AILocatorSetSize::GetName() const
SAction_AILocatorSetSize::GetInputs(SCmdParams&) const
SAction_AILocatorSetSize::GetOutputs(SCmdParams&) const
DynamicScriptVariable<AIConvexLocatorSet>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<AIConvexLocatorSet>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<AIConvexLocatorSet>::~DynamicScriptVariable()
ScriptVariable* CreateObject<AILocatorSetScriptVariable>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<AILocatorSetScriptVariable>(char const*, ScriptContext&)
SAction_GetCharacter::Exec(ScriptContext&)
SAction_GetCharacter::~SAction_GetCharacter()
SAction_GetCharacter::GetName() const
SAction_GetCharacter::GetInputs(SCmdParams&) const
SAction_GetCharacter::GetOutputs(SCmdParams&) const
AIZone::ZoneDetails::~ZoneDetails()
AIZone::GetColour() const
AIZone::GetDetails() const
AIZone::GetZoneType(unsigned int)
AIZone::GetZoneType(char const*)
ProjectedDecal::ProjectedDecal(DecalBuffer const&, NuSmartPtr<NuMtl, true>)
ProjectedDecal::Initialise(DecalBuffer const&)
ProjectedDecal::ProjectedDecal(DecalBuffer const&, char const*)
ProjectedDecal::~ProjectedDecal()
ProjectedDecal::~ProjectedDecal()
ProjectedDecal::NumPolys()
ProjectedDecal::IsDead()
ProjectedDecal::OnProcess(float, DynoScene*)
ProjectedDecal::OnRender()
ProjectedDecal::GetAABBBounds(NuMatrixBase const&, NuVector3Base&, NuVector3Base&)
ProjectedDecal::GetClipPlanes(NuMatrixBase const&, VuVec*)
ProjectedDecal::Create(NuMatrixBase const&, LevelContainer const&, char const*, float, float, int)
ProjectedDecal::BuildCache(CacheGeom&, DynoScene&, NuVector3Base const&, NuVector3Base const&, int)
ProjectedDecal::ClipCache(DecalBuffer&, CacheGeom const&, VuVec const*, int, NuVector3Base const&, float, float)
ProjectedDecal::UpdateUVs(NuMatrixBase const&)
ProjectedDecal::Create(NuMatrixBase const&, LevelContainer const&, NuSmartPtr<NuMtl, true>, float, float, int)
ProjectedDecal::ClipTri(DecalBuffer&, NuVector3Base const*, VuVec const*, int)
DecalSet::IsFinalised()
part_typedesc_s::FixUpEmitterTypes(LevelContainer*)
part_typedesc_s::FreeEmitterFixUpNames()
ADDPART::ADDPART(NUMTX*, NUVEC*, NUVEC*, void*, void*, float, float, float, float, nuhspecial_s*, int, unsigned int, unsigned int, void (*)(PART*), void (*)(PART*, float), void (*)(PART*), void (*)(PART*), void (*)(PART*), void (*)(PART*, int), void (*)(PART*), void (*)(PART*), void (*)(PART*), void (*)(PART*), int (*)(PART*), ParticleEmitterType*, int*, ParticleEmitterType*, ParticleEmitterType*, float, float, ParticleEmitterType*, int, ParticleEmitterType*, float, ParticleEmitterType*, int, float, float, float, int, bool, CharMaterialMap*, CharTextureMap*, NUCOLOUR3, NUCOLOUR3, float, float, float, float, float, int, int, int, int, int, int, float, unsigned char, char, float)
NuPartEnableRayCasts(int)
NuPartSetSeed(unsigned int)
NuPartGetSeed()
NuPartResetGlobalTime()
ResetParts()
KillPart(PART*, int)
InitPartPageLED(int, int)
InitParts(int, bool)
NewPartRotation(PART*)
NewPartOrderedRotation(PART*)
InitPartPhysics(PART*)
AddPart(ADDPART*, LevelContainer const&)
PartTimeSlip()
edpartDestroy(int)
CheckPartCount()
part_emitdesc_s::Clear()
PartCleanupTypes()
UpdatePartEmits(float)
PARTStartOffset(int, float)
RemovePARTEffect(int)
PARTLookupType(char const*)
AddVariableShotPARTEffect(int, NUVEC*, float, float, NUMTX*, LevelContainer*)
EarlyUpdateParts(float)
UpdateParts(LevelContainer&, float)
AddFiniteShotPART(int, NUVEC const*, int, LevelContainer const*)
DrawParts(int, ClassManager::eRenderingPriority const&)
HitParts(void*, NUVEC*, int, float, NUVEC*, NUVEC*, unsigned int)
DoesAnyPartMatchAppData(void*)
KillPartsWithMatchingAppData(void*)
KillLevelEmitters(LevelContainer*)
FindPart(NUVEC*, int, void*)
FindPart(RigidObject*)
SetPartRTLSet(void*)
PARTLookupTypePageOnly(char const*, int)
PARTLookupTypePageFirst(char const*, int)
CountActiveParts()
GetPartCount()
GetMaxPartTypes()
GetPartName(int)
PARTGetTotalOnTime(int)
PARTGetTotalOffTime(int)
AddPARTEffect(int, NUVEC const*, LevelContainer const*)
PARTEmitterPos(int, float, float, float)
PARTEmitterOrientation(int, short, short, short)
PARTEmitterOrientationMtx(int, NUMTX*)
CreateScaledPARTEffect(int, float)
AddScaledFiniteShotPART(int, NUVEC*, int, float)
AddScaledVariableShotPARTEffect(int, NUVEC*, float, float, NUMTX*, float, LevelContainer*)
KillPartsByScene(NuSmartPtr<NuScene, true> const&)
KillPartsByLevelContainer(LevelContainer&)
RemoveSceneFromPartsListOfScenes(NuSmartPtr<NuScene, true> const&)
TintPARTEmit(int, float, float, float)
SetFuncsPARTEmit(int, Part_Funcs const&)
ClearFuncsPARTEmit(int)
PART_DebugDraw()
BeginNewEmittersWantsPhysicsParts()
EndNewEmittersWantsPhysicsParts()
PART::PART(LevelContainer const&)
PART::~PART()
PART::~PART()
PART::GetMechObjectInterface()
PartTerrGetScene()
PartTerrInit(void*, int, unsigned short)
PartRayCast(SphereRay&, FirstPointCollector&, PART&)
CastPart(PART*, float)
DebrisGetGlobalActiveThinningLevel()
DebrisGetGlobalThinningLevel()
DebrisSetParticleThinningLevel(float)
RayCastFloorHeight(LevelContainer*, NUVEC const*)
DeleteNuImposeParams()
CameraEmitterDistance(NUVEC const*)
DebrisDrawCalculateClipVectors(ParticleEmitterType*, NUMTX*, NUVEC*, NUVEC*)
DebrisDrawCalculateClipBoxes(ParticleEmitterType*, ParticleEmitter*)
ParticleManager::Render(int)
ParticleManager::SortRenderStack()
ParticleManager::UpdateRenderStack()
SolveQuadratic(float, float, float, float*, float*)
DebrisGetControlStackLock()
DebrisReleaseControlStackLock()
ParticleManager::LockInstance(int)
ParticleManager::LockInstance(ParticleEmitter*)
ParticleManager::UnlockInstance(int)
ParticleManager::UnlockInstance(ParticleEmitter*)
ParticleManager::LockType(ParticleEmitterType*)
ParticleManager::UnlockType(ParticleEmitterType*)
ParticleManager::EvolveParticle(ParticleGenerationPattern, ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::GeneratePatternRandomOffset(ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::GeneratePatternRadial(ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::GeneratePatternRadialRotor(ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::GeneratePatternSpheroid(ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::GeneratePatternBounceY(ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::GeneratePatternBounceXZ(ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::GeneratePatternRadialImproved(ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::GeneratePatternRadialStar(ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::GeneratePatternEventY(ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::GeneratePatternManual(ParticleEmitter*, ParticleEmitterType*, int, float)
ParticleManager::EvolveNextParticle(ParticleGenerationPattern, ParticleEmitter*, ParticleEmitterType*, float)
AddChunkControlToStack(ParticleChunkControl*, ParticleChunkControl**)
ParticleManager::GeneratePatternDummy(ParticleEmitter*, ParticleEmitterType*, int, float)
CreateCopyMat(NuSmartPtr<NuMtl, true>, int, int, int, int)
ParticleManager::AllocChunkControlTable_Legacy()
ParticleManager::FreeChunkControlTable_Legacy()
DebrisAddTexturePage(NuSmartPtr<NuMtl, true>*, char const*)
DebrisDestroyTexturePage(NuSmartPtr<NuMtl, true>*)
CreateParticleManager(LevelContainer&)
ParticleManager::Initialise(char*, int)
DebrisResetCameras()
ParticleManager::LoadLevelTexture(char*)
DebrisRequestSfx(ParticleEmitter*)
DebrisReleaseSfx(ParticleEmitter*)
ParticleManager::AllocEmitterType(EmitterTypeContainer, char const*)
NuHashMap<NuDynamicStringT<true>, ParticleEmitterType*>::Find(NuDynamicStringT<true> const&) const
ParticleManager::CreateUniqueNameForEmitter(NuFixedStringT<(unsigned short)16>&, char const*)
NuHashMap<NuDynamicStringT<true>, ParticleEmitterType*>::Insert(NuDynamicStringT<true> const&, ParticleEmitterType* const&)
ParticleManager::FreeEmitterType(ParticleEmitterType*)
NuHashMap<NuDynamicStringT<true>, ParticleEmitterType*>::Erase(NuDynamicStringT<true> const&)
ParticleManager::ProcessNewChunkCount(ParticleEmitter*)
ParticleManager::AllocParticleChunk()
ParticleManager::OrphanChunks(ParticleEmitter*, int)
ParticleManager::FreeParticleChunk(ParticleChunk*)
ParticleManager::SetEmitterNumParticles(int, int)
ParticleManager::SetEmitterNumParticles(ParticleEmitter*, int)
RemoveChunkControlFromStack(ParticleChunkControl*, ParticleChunkControl**)
ParticleManager::RemoveAnyChunkControls(ParticleChunk*)
ParticleManager::StopEmitter(int*, bool)
ParticleManager::StartEmitter(int*, bool)
ParticleManager::SetEmitterRenderState(int, bool)
ParticleManager::DisableEmitterType(ParticleEmitterType*)
ParticleManager::EnableEmitterType(ParticleEmitterType*)
ParticleManager::SetParticleEmitRate(int, int)
ParticleManager::SetParticlesDrag(int, float)
ParticleManager::FreeEmitterInstance(int*)
ParticleManager::FreeParticleChunks(ParticleEmitter*)
ParticleManager::MoveParticleChunkToDeferredFreeList(ParticleChunk*)
ParticleManager::MovePartHeaderToDeferredFreeList(ParticleRenderData*)
ParticleManager::FreeParticleChunksForAllEmitters()
ParticleManager::FreeAllEmitterInstances()
ParticleManager::FreeAllEmitterInstances(ParticleEmitterType*)
ParticleManager::FreeAllEmitterTypes(EmitterTypeContainer)
ParticleManager::SetEmitterJetPosition(ParticleEmitter*, NUVEC*, bool, NUVEC*, NUVEC*, NUVEC*, NUVEC*)
ParticleManager::SetEmitterJetPosition(ParticleEmitter*, NUMTX*, bool, NUVEC*, NUVEC*, NUVEC*, NUVEC*)
ParticleManager::SetEmitterJetOrientation(ParticleEmitter*, NUMTX*)
ParticleManager::SetEmitterJetPosition(int, float, float, float)
ParticleManager::SetEmitterJetTransform(int, NUMTX*)
ParticleManager::SetEmitterJetOrientation(int, NUMTX*)
ParticleManager::SetEmitterJetLinearInterpolationPositions(ParticleEmitter*, NUVEC*, NUVEC*)
ParticleManager::GetEmitterJetPosition(ParticleEmitter*)
ParticleManager::SetEmitterJetOrientation(int, short, short, short)
ParticleManager::SetEmitterRenderTransform(int, NUMTX*)
ParticleManager::SetEmitterRenderFlags(int, bool, bool)
ParticleManager::SetEmitterJetVelocity(int, float, float, float)
ParticleManager::SetParticleVelocity(ParticleEmitter*, NUVEC*)
ParticleManager::SetParticleVelocity(int, NUVEC*)
ParticleManager::SetParticleVelocity(int, float, float, float)
ParticleManager::SetReflectionOrientation(int, short, short, float, float)
ParticleManager::SetFloor(int, float)
ParticleManager::SetParticleFaceOrientation(int, char, short, short)
ParticleManager::GetParticleCount(int)
ParticleManager::SetEmitterTimeOffset(ParticleEmitter*, float)
ParticleEmitterType::GetMaxThin() const
ParticleManager::SetEmitterTimeOffset(int, float)
ParticleManager::SetParticlePosition(int, int, NUVEC*, bool)
ParticleManager::SetParticleTime(int, int, float)
ParticleManager::SpawnParticle(int, int, float)
ParticleManager::DestroyParticle(int, int)
ParticleManager::GetParticleCurrentTime(int, int)
ParticleManager::GetParticleEndTime(int)
ParticleManager::SetParticleVisibility(int, int, bool)
ParticleManager::GetEmitterCurrentTime(int)
ParticleManager::SetEmitterBounds(int, NUVEC*, NUVEC*)
ParticleManager::SetTrigger(int, int, int, float)
ParticleManager::SetEmitterGroupId(int, short)
ParticleManager::SetEmitterPriority(int, unsigned short, char)
DebrisGetPriority(ParticleEmitterType*)
ParticleManager::SetEmitterPortalRoom(int, NuSmartPtr<NuScene, true>)
ParticleManager::SetEmitterDetailLevels(int, int)
DebrisProcessSpheres(Particle*, float, ParticleEmitterType*, ParticleEmitter*, int)
NuFixedStringT<(unsigned short)16>::Format(char const*, ...)
ParticleManager::GetEmitterType(char const*, bool)
ParticleManager::CreateUniqueNameForEmitterTypeCopy(NuFixedStringT<(unsigned short)16>&, NuString const&)
ParticleManager::DebrisCreateNewScaledType(ParticleEmitterType*, float)
DebrisReScale(ParticleEmitterType*, float)
ParticleManager::DestroyScaledType(ParticleEmitterType*)
ParticleManager::CreateFiniteEmitter(int*, ParticleEmitterType*, NUVEC const*, NUVEC*, NUVEC*, int)
ParticleManager::CreateEmitter(int*, ParticleEmitterType*, float, float, float)
ParticleManager::CreateScaledFiniteEmitter(int*, ParticleEmitterType*, NUVEC*, NUVEC*, NUVEC*, int, float)
ParticleManager::CreateOneShotEmitter(ParticleEmitterType*, NUVEC const*, NUVEC*, NUVEC*, int, float, NUMTX*, NUMTX*, int, char)
DebrisOutsideCameraDistanceRangeCheck(float, ParticleEmitterType const*)
ParticleManager::CreateScaledOneShotEmitter(ParticleEmitterType*, NUVEC const*, NUVEC*, int, float, NUMTX*, NUMTX*, float)
ParticleManager::CreateEmitter(int*, ParticleEmitterType*, NUVEC const&)
ParticleManager::CreateScaledEmitter(int*, ParticleEmitterType*, float, float, float, float)
ParticleManager::PopulateEmitter(int, float)
DebrisSetRenderGroup(int)
ParticleManager::ProcessControlStack(int)
ParticleManager::ProcessTriggers()
ParticleManager::ProcessAllocation()
DebrisOutsideCameraDistanceRangeCheck(float, float, float)
ParticleManager::ProcessOrphans(float)
ParticleManager::ProcessGeneration(float)
ParticleManager::ProcessTimeSlip(int)
ParticleManager::Process(float, int)
ParticleManager::ProcessDeferredFreeList()
ParticleManager::PurgeDeferredFreeList()
ParticleManager::PurgeOrphanedChunks()
DebrisGetName(ParticleEmitterType*)
DebrisGetDuration(ParticleEmitterType*)
ParticleManager::GetEmitterTypeFromGlobalContainer(char const*)
ParticleManager::GetEmitterTypeFromAnyContainer(char const*)
ParticleManager::OwnsType(ParticleEmitterType*)
DebrisRegisterCamera(NuCamera const*)
DebrisUnRegisterCamera(NuCamera const*)
DebrisRegisterCutoffCamera(NuCamera const*)
DebrisGetNumClipCameras()
DebrisGetClipCamera(int)
ParticleManager::FindEmitters(ParticleEmitterType*, NUVEC*, int*, int, int, int)
ParticleManager::CollisionTestTorus(ParticleEmitter*, NUVEC*, float, float, unsigned char)
ParticleManager::CollisionTestTorus(NUVEC*, float, float, unsigned char)
ParticleManager::CollisionTestSphere(ParticleEmitter*, NUVEC*, float, float, unsigned char)
ParticleManager::CollisionTestSphere(NUVEC*, float, float, unsigned char)
ParticleManager::PreCheckCollisions(NUVEC*, float)
DebrisGlassInit()
DebrisSetSeed(long)
DebrisSetCutSceneMode(int)
ParticleEmitterType::SetMaterial(ParticleManager*, int, int)
NuList<NuHashMapNode<NuDynamicStringT<true>, ParticleEmitterType*> >::DeleteNode(NuListNode<NuHashMapNode<NuDynamicStringT<true>, ParticleEmitterType*> >*)
NuVector<ParticleChunk*>::Reserve(unsigned int, bool)
NuVector<ParticleLevelContainer*>::~NuVector()
InitFn_ChangePageToEdit(int (*)())
Init_FilterPTLInstancesByPage(int)
edptlReserveContainerArray()
NuVector<ParticleLevelContainer*>::Reserve(unsigned int, bool)
edptlUpdateType(ParticleEmitterType*)
ReadCurve(int, NuVector<CurvePoint>&)
WriteCurve(NuVector<CurvePoint>&)
FileLoadSingleEffectTypeName(NuFixedStringT<(unsigned short)16>&)
FileLoadSingleEffectTypeInternals(ParticleEmitterType*, int, ParticleManager*)
FileLoadSingleEffectType(ParticleManager&, EmitterTypeContainer, int, bool, bool&)
edppLoadPage(char*, char, NuSmartPtr<NuScene, true>, ParticleManager&)
edppCanSave(char*)
edppRestartAllEffectsInParticleManager(ParticleManager*)
edppStartSingleEffect(int, ParticleManager*)
edppInitLevelContainers()
edptlAddLevelContainer(LevelContainer*, char*, char*)
edptlRemoveLevelContainer(LevelContainer*)
edppUpdateInstances(int, ParticleManager*)
edppSetEditorLevelContainer(LevelContainer*)
edppStartPage(char, ParticleManager*)
edppPtlShelve(int, ParticleManager*)
edppPtlDestroy(int, ParticleManager*)
edppStopPage(char, ParticleManager*)
edppClearPage(char, ParticleManager*)
edppClearAllPages(ParticleManager*)
ParticleReset()
edppDeleteType(ParticleEmitterType*, ParticleManager*)
edppGetNewPage(NuSmartPtr<NuScene, true>)
GetParticleEdReg()
NuVector<CurvePoint>::Reserve(unsigned int, bool)
NuVector<ParticleColour>::Reserve(unsigned int, bool)
NuHashMap<NuDynamicStringT<true>, ParticleEmitterType*>::~NuHashMap()
NuList<ParticleManager*>::~NuList()
ParticleManager::ParticleManager()
ParticleManager::ParticleManager(LevelContainer&)
ParticleManager::RegisterProcessing()
ParticleManager::RegisterRendering()
ParticleManager::~ParticleManager()
ParticleManager::~ParticleManager()
ParticleManager::EnablePostEffectsRenderStage(bool)
ParticleManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ParticleManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
ParticleManager::RenderMemoryUsage()
ParticleManager::RenderDebugInfo()
ParticleManager::AllocRenderList(int, ParticleEmitterType*)
ParticleManager::AddRenderListToStack(ParticleRenderList*, ParticleRenderList**)
ParticleManager::FreeRenderList(ParticleRenderList*)
ParticleManager::RemoveRenderListFromStack(ParticleRenderList*, ParticleRenderList**)
ParticleManager::EventNotify(Event&, NuEventData&)
ParticleEmitterType::ParticleEmitterType()
ParticleEmitterType::~ParticleEmitterType()
ParticleEmitterType::Copy(ParticleEmitterType const&)
NuVector<CurvePoint>::operator=(NuVector<CurvePoint> const&)
ParticleEmitterType::SetName(char const*)
ParticleEmitterType::GetName()
ParticleEmitter::ParticleEmitter(ParticleEmitterType*)
ParticleEmitter::~ParticleEmitter()
ParticleEmitter::AddParticleChunk(ParticleChunk*)
ParticleEmitter::LinkParticleChunks()
ParticleEmitter::RemoveParticleChunk(ParticleChunk*)
ParticleEmitter::CalculateNumParticlestoAllocate(int)
ParticleEmitter::GetParticle(int)
ParticleEmitter::GetNextParticle()
ParticleManager::TriggerSounds(ParticleEmitter*, ParticleSoundTriggerType)
ParticleManager::GetCurrentMaterialForEmitterType(ParticleEmitterType&) const
ParticleManager::GetCurrentMaterialPageForEmitterType(ParticleEmitterType&) const
ParticleManager::IsVisibleFromDebrisCameras(NuVector3Base&, NuVector3Base&)
ParticleManager::DebugRenderEmitterLocationsOnMap(VuVec const&, float, VuVec const&, float)
ParticleManager::AllocEmitterInstance(ParticleEmitterType*)
ParticleManager::FreeEmitterInstance(ParticleEmitter*)
ParticleManager::UpdateStatsOnce()
ParticleManager::SampleCurve(NuVector<CurvePoint>&, float, float&, int)
ParticleManager::SampleCurve(NuVector<ParticleColour>&, float, float&, float&, float&, int)
ParticleRenderData::~ParticleRenderData()
ParticleManager::GetManagerName() const
NuVector<ParticleEmitter*>::Reserve(unsigned int, bool)
NuListFind<ParticleManager*, NuListNode<ParticleManager*> >::Remove(NuListNode<ParticleManager*>*, NuListNode<ParticleManager*>*, ParticleManager* const&)
DynamicLight::DynamicLight()
DynamicLight::InitializeEdDescriptorMembers()
DynamicLight::SetEdDescriptor(DynamicLightDesc*)
DynamicLight::DynamicLight(EdRegContext&)
DynamicLight::DynamicLight(EdRegContext&, DynamicLight&)
DynamicLight::GetEdDescriptor()
DynamicLight::DynamicLight(EdRegContext&, DynamicLight&, DynamicLightDesc&)
DynamicLight::DynamicLight(DynamicLightDesc*)
DynamicLight::DynamicLight(EdRegContext&, DynamicLightDesc*)
DynamicLight::~DynamicLight()
non-virtual thunk to DynamicLight::~DynamicLight()
non-virtual thunk to DynamicLight::~DynamicLight()
DynamicLight::~DynamicLight()
non-virtual thunk to DynamicLight::~DynamicLight()
non-virtual thunk to DynamicLight::~DynamicLight()
DynamicLight::Serialize(NuSerialize&)
DynamicLight::GetClass() const
DynamicLight::GetTransform(VuMtx&) const
DynamicLight::SetTransform(VuMtx const&)
DynamicLight::GetPosition(VuVec&) const
DynamicLight::SetPosition(VuVec const&)
DynamicLight::GetName() const
non-virtual thunk to DynamicLight::GetName() const
void NuFixablePtrHelper::SetFixablePtrToObject<NuFixupStrongPtrEx<Animatable>, Animatable>(NuFixupStrongPtrEx<Animatable>&, Animatable*)
DynamicLight::GetEdDescriptorIDs(NuIdentifier&, NuIdentifier&, NuIdentifier&)
DynamicLight::SetEdDescriptorIDs(NuIdentifier const&, NuIdentifier const&, NuIdentifier const&)
DynamicLightHelper::DynamicLightHelper()
DynamicLightHelper::~DynamicLightHelper()
DynamicLightHelper::~DynamicLightHelper()
CreateDynamicLightManager(LevelContainer&)
CreateDynamicLightDescManager(LevelContainer&)
DynamicLightHelper::Initialise()
DynamicLightDescHelper::InitLightDescTypes(DynamicLightDescHelper::EdRefType, EdClass*, EDATTR_FLAGS, EdRefDynamicLightParams**)
DynamicLightHelper::GetManNumObjects(ClassManager*, void*)
DynamicLightHelper::GetManNextObject(ClassManager*, void*, void*)
DynamicLightManager::DynamicLightManager(LevelContainer&)
DynamicLightManager::RegisterProcessing()
DynamicLightManager::~DynamicLightManager()
DynamicLightManager::~DynamicLightManager()
DynamicLightManager::GetClass(int)
DynamicLightManager::GetNumClasses()
DynamicLightManager::GetNumObjects(void*)
DynamicLightManager::GetNextObject(void*, void*)
DynamicLightManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
DynamicLightManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
DynamicLightDescHelper::DynamicLightDescHelper()
DynamicLightDescHelper::~DynamicLightDescHelper()
DynamicLightDescHelper::~DynamicLightDescHelper()
DynamicLightDescHelper::NewEdRef(DynamicLightDescHelper::EdRefType, char const*, char const*, long, int, EDATTR_FLAGS, EdControl*)
DynamicLightDescHelper::Initialise()
DynamicLightDescManager::DynamicLightDescManager(LevelContainer&)
DynamicLightDescManager::~DynamicLightDescManager()
DynamicLightDescManager::~DynamicLightDescManager()
DynamicLightDescManager::GetNumObjects(void*)
DynamicLightDescManager::GetNextObject(void*, void*)
DynamicLightDescManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
DynamicLightDescManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
DynamicLightDescHelper::GetSerialisePlatformOverride() const
DynamicLightDescHelper::SerialiseObject(void*, EdSerialiseParams&)
DynamicLightDescHelper::SetInterpretForwardPassFieldAsBoolean(bool)
DynamicLightDescHelper::GetInterpretForwardPassFieldAsBoolean() const
DynamicLightHelper::GetSerialisePlatformOverride() const
DynamicLightDescHelper::ThrowAwayObjectWhenSerialisedIn(void*) const
DynamicLightDesc::DynamicLightDesc(EdRegContext*)
DynamicLightDesc::DynamicLightDesc(DynamicLightDesc&, EdRegContext*)
DynamicLightDesc::~DynamicLightDesc()
DynamicLightDesc::DestroyTexture()
non-virtual thunk to DynamicLightDesc::~DynamicLightDesc()
non-virtual thunk to DynamicLightDesc::~DynamicLightDesc()
DynamicLightDesc::~DynamicLightDesc()
non-virtual thunk to DynamicLightDesc::~DynamicLightDesc()
non-virtual thunk to DynamicLightDesc::~DynamicLightDesc()
DynamicLightDesc::GetClass() const
DynamicLight::GetVisibility() const
DynamicLight::SetVisibility(int)
DynamicLightDesc::DestroysOnUnreferenced() const
non-virtual thunk to DynamicLightDesc::DestroysOnUnreferenced() const
DynamicLightDesc::Destroy()
non-virtual thunk to DynamicLightDesc::Destroy()
DynamicLightDesc::Serialize(NuSerialize&)
EdRefDynamicLightParams::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefDynamicLightParams::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefPipeLightInstToDesc::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefPipeLightInstToDesc::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
DynamicLightManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
DynamicLightManager::AddAnimationToLightDescription(Animation&, AnimationLayer&, DynamicLightDesc&) const
DynamicLightManager::SplitLightAnimation(Animation*) const
DynamicLightManager::SplitOldLightAnimations() const
DynamicLightDescManager::EventNotify(Event&, NuEventData&)
DynamicLightDescManager::ProcessDeletionQueue(void*)
DynamicLightDescManager::QueueForDeletion(DynamicLightDesc&)
DynamicLightManager::EventNotify(Event&, NuEventData&)
EdRefDynamicLightParams::~EdRefDynamicLightParams()
EdRefPipeLightInstToDesc::~EdRefPipeLightInstToDesc()
DynamicLightManager::GetManagerName() const
DynamicLightDescManager::GetManagerName() const
DynamicLightDescManager::GetClass(int)
DynamicLightDescManager::GetNumClasses()
DynamicLightDesc::GetNuUniqueObjectBase()
DynamicLightDesc::GetNuUniqueNameHash() const
DynamicLightDesc::GetRefCount() const
DynamicLightDesc::AddRef()
DynamicLightDesc::ReleaseRef()
DynamicLightDesc::GetLightDescNuUniqueName() const
non-virtual thunk to DynamicLightDesc::GetRefCount() const
non-virtual thunk to DynamicLightDesc::AddRef()
non-virtual thunk to DynamicLightDesc::ReleaseRef()
non-virtual thunk to DynamicLightDesc::GetNuUniqueNameHash() const
non-virtual thunk to DynamicLightDesc::GetRefCount() const
non-virtual thunk to DynamicLightDesc::AddRef()
non-virtual thunk to DynamicLightDesc::ReleaseRef()
EdRefLightName::~EdRefLightName()
EdRefNuFixablePtr<NuFixupStrongPtrEx<Animatable> >::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefNuFixablePtr<NuFixupStrongPtrEx<Animatable> >::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefNuFixablePtr<NuFixupStrongPtrEx<Animatable> >::GetFixupSearchStr(void*, NuDynamicStringT<false>&)
EdRefNuFixablePtr<NuFixupStrongPtrEx<Animatable> >::LateFixup(void*, StreamingLevel*)
EdRefNuFixablePtr<NuFixupStrongPtrEx<Animatable> >::GetPointee(void*)
EdRefNuFixablePtr<NuFixupStrongPtrEx<Animatable> >::GetPointeeAsNuUniqueObject(void*) const
EdRefNuFixablePtr<NuFixupStrongPtrEx<Animatable> >::GetPointeeAsBaseEdClass(void*)
EdRefNuFixablePtr<NuFixupStrongPtrEx<Animatable> >::GetPointeeEdClass(void*)
EdRefNuFixablePtr<NuFixupStrongPtrEx<Animatable> >::ClearFixablePtr(void*)
EdRefNuFixablePtr<NuFixupStrongPtrEx<Animatable> >::ResetToPreFixup(void*)
EdRefLightName::OnFixup(void*)
EdRefLightName::OnUnfixup(void*)
void NuFixablePtrHelper::CreateFixupString<Animatable>(NuFixupManager::ReferenceT<Animatable> const&, char*, unsigned int)
bool NuFixablePtrHelper::RegisterObjectForFixup<Animatable>(Animatable*, NuIdentifier*, NuIdentifier*, NuIdentifier*)
NuVector<Animation*>::Reserve(unsigned int, bool)
CreateVfxThing(LevelContainer&)
NuList<VfxThing*>::~NuList()
NuMap<long, VfxProxy>::~NuMap()
VfxHandle::Destroy()
VfxThing::VFX_Release(VfxHandle&)
NuSmartPtr<NuPrimContext3D, false>::~NuSmartPtr()
VfxBeamDescriptorList::FixUp(LevelContainer&, bool)
VfxBeamDescriptor::FixUp(LevelContainer&, bool)
SeekLinear(float, float, float)
VfxBeam::VfxBeam(VfxThing&, VfxBeamDescriptor&)
VfxBeam::Init(VfxThing&)
VfxPointList::DeAllocatePoints(VfxThing&)
VfxBeam::~VfxBeam()
VfxBeam::GetLastPoint(VuVec&) const
VfxBeam::Process(float)
VfxThing::AllocateBeamPoint(VuVec&, float)
VfxBeam::Subdivide(VfxPoint&, VfxPoint&)
VfxBeam::GenerateSineWave(VuVec&, VuVec&)
VfxThing::DeAllocateBeamPoint(VfxPoint*)
VfxThing::AddBeam(VfxHandle&, VuVec&, VuVec&, VfxBeamDescriptor*, int, char const*)
VfxThing::TriggerLooping(VfxHandle&, long, VuMtx&, bool)
VfxBeam::RenderBeamSection(VuVec const&, VuVec const&, float&, float, float)
VfxBeam::CalculateBillBoardedQuadPointsBeamSection(VfxPoint const&, VfxPoint const&, float&, VuVec*, int)
VfxBeam::ClearBeamDescriptor()
VfxBeamDescriptor::operator=(VfxBeamDescriptor const&)
VfxBeam::SetEndPoints(VuVec&, VuVec&, bool)
VfxBeam::SetEndPoints(VuVec&, VuVec&, VuVec&, VuVec&, bool)
VfxBeam::SetAlpha(float)
VfxBeam::SetThicknessScale(float)
VfxBeam::SetStartThicknessScale(float)
VfxBeam::SetEndThicknessScale(float)
VfxBeam::SetSineMagnitudeScale(float)
VfxBeam::SetNextInChain(VfxBeam*)
VfxBeam::GetStartU()
VfxBeam::ForceUniformDistance(VuVec&, VuVec&, float)
VfxBeam::RenderBeamQuad(float, float, VuVec const*, float, float)
VfxBeam::EndBeamQuadBatch()
VfxBeam::Hose_TruncateLength(float)
VuVecSplinePoint(VuVec*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, float, int)
ApproxSin180(float)
ApproxSin360(float)
VfxBeam::FinalAlphaGather()
VfxBeam::RenderHemisphereCap(VuMtx&, float, unsigned int)
VfxBeam::Render(float&, VfxBeam*, VfxBeam*)
VfxBeam::AllocateScratch()
VfxBeam::DeAllocateScratch()
VfxBeam::ProcessScratch()
VfxBeam::RefreshScratch()
VfxBeam::ResetOnScreenStatus()
VfxBeam::UpdateOnScreenStatus()
VfxBeam::GenerateMinMax(VuVec const&, VuVec const&, VuVec&, VuVec&)
VfxBeam::GenerateBestMin(VuVec const&, VuVec const&, VuVec&)
VfxBeam::GenerateBestMax(VuVec const&, VuVec const&, VuVec&)
VfxBeamDescriptor::~VfxBeamDescriptor()
VfxThing::FindVfxSpecial(LevelContainer&, nuhspecial_s&, char const*, LevelContainer**, bool)
VfxThing::VFX_GetType(char const*, bool)
VfxBeamDescriptor::SfxName(char const*)
VfxBeamDescriptor::VfxAtStartName(char const*)
VfxBeamDescriptor::VfxAtEndName(char const*)
VfxBeamDescriptor::PtlAlongBeamName(char const*)
VFX_SetFailsafeTimeout(char)
VFX_RegisterCallback(VFX_CALLBACK_TYPE_s, void*)
VFX_LoadScene(char const*)
VFX_Dump()
VFX_ReloadScene(char const*)
SetEditingThing(VfxThing*)
SetCreatureManagerThing(VfxThing*)
VFX_GeneralInit(int)
VfxThing::VFX_ThingInit(int)
VfxThing::VFX_Reset()
VfxThing::VFX_FixupNames(LevelContainer&, bool)
VFX_LoadData(char const*, int)
VFX_GetParamName(float*)
VFX_GetGameFuncName(void*)
VFX_RecursivelySetEarlyColourMode(SceneNode*)
VfxThing::VFX_Trigger(long, VuMtx*, int, int)
VfxThing::GetProxy(long)
VfxProxy::GetSourcePlaceable()
VFX_RotateMtxToFaceOn(VuMtx*)
VFX_RotateMtxToFaceY(VuMtx*)
VFX_GetScaleFromMtx(VuMtx const&)
VfxThing::GetInstancePlaceable(VfxHandle&)
Vfx_Instance_PlaceableList::Find(VfxHandle&)
VfxThing::GetInstancePlaceable(long)
VfxThing::VFX_JustUpdateMtx(VfxHandle&, VuMtx*, bool)
Vfx_Instance_Placeable::JustUpdateMtx(VuMtx*, bool)
VfxThing::VFX_UpdateMtx(VfxHandle&, VuMtx*, bool)
Vfx_Instance_Placeable::UpdateMtx(VuMtx*, bool)
VfxThing::VFX_UpdatePos(VfxHandle&, VuVec*, bool)
Vfx_Instance_Placeable::UpdatePos(VuVec*, bool)
VfxThing::VFX_OffsetPos(VfxHandle&, VuVec*, bool)
Vfx_Instance_Placeable::OffsetPos(VuVec*, bool)
VfxThing::VFX_GetMtx(VfxHandle&, VuMtx*)
Vfx_Instance_Placeable::GetMtx(VuMtx&)
VfxThing::VFX_GetDuration(long)
VfxThing::VFX_IsLooping(long)
VfxThing::VFX_IsPlaying(VfxHandle&)
Vfx_Instance_Placeable::IsPlaying()
VfxThing::VFX_GetPlaceable(VfxHandle&)
VfxThing::OnPlaceableDestroyed(Placeable*)
VfxThing::AllocateBeam(VfxBeamDescriptor&, char const*)
VfxThing::DeAllocateBeam(VfxBeam*)
VfxThing::GetBeam(VfxHandle&)
VfxThing::KillBeam(VfxBeam*)
VfxThing::ClearBeamDescriptor(VfxBeam*)
VfxThing::KillBeam(VfxHandle&)
VfxThing::ClearBeamDescriptor(VfxHandle&)
VfxThing::BeamTemplateDeleted(VfxBeamDescriptor*)
VfxThing::AddBeam(VfxHandle&, VuVec*, VuVec&, VuVec&, VuVec*, VfxBeamDescriptor*, int, char const*)
VfxThing::ProcessBeams(float)
GetBeamDesc(char const*, bool)
VfxThing::FindVfxBeamSpline(ClassObject&, char const*)
VfxThing::VFX_GetName(long)
VfxThing::VFX_Sleep()
VfxThing::VFX_WakeUp()
VfxThing::VFX_IsAsleep()
VfxThing::FindVfxObject(LevelContainer&, ClassObject&, char const*, bool)
VfxThing::FindProxyProxy(char const*, bool, bool)
VfxProxy::Set(char const*, int)
VfxProxy::FixUp(ClassObject&)
VfxThing::FindProxy(char const*, bool, bool)
VfxThing::FixUpProxies(LevelContainer&)
VfxProxy::FixUp(LevelContainer&)
VfxThing::FixUpPermProxies(LevelContainer&)
VfxThing::UnFixUpPermProxies(LevelContainer&)
VfxProxy::UnFixUp(LevelContainer&)
VfxThing::ClearProxies()
VfxProxy::Clear()
VfxThing::ClearPermProxies()
VfxThing::FixUpGlobalProxies(LevelContainer&)
VfxThing::UnFixUpGlobalProxies(LevelContainer&)
VfxThing::ClearGlobalProxies()
VfxThing::ClearProxy(Placeable*)
VfxProxy::SetSourcePlaceable(Placeable*)
VfxProxy::VfxProxy()
VfxProxy::~VfxProxy()
VfxProxy::Reference()
VfxProxy::Release()
VfxThing::VFX_GetPermType(char const*)
VFX_GetPermTypeByName(char const*, bool)
VfxThing::VFX_GetTypeFromAnyContainer(char const*)
VFX_GetPermTypeProxyByName(char const*)
VfxThing::VFX_FlushActive()
CSListHeader<Vfx_Instance_Placeable>::Clear()
VfxThing::ProcessEvenPaused()
VfxThing::Process(float)
VfxThing::ProcessPlaceableBasedVfxInstances(float)
Vfx_Instance_Placeable::UpdateFade(float)
VfxThing::VFX_RenderType(int, VFX_RENDER_TYPE)
VfxThing::RenderBeams(VFX_RENDER_TYPE)
VFX_Init()
VFX_LoadOldData()
VfxThing::VfxThing(LevelContainer&)
VfxThing::RegisterProcessing()
VfxThing::RegisterRendering()
VfxThing::~VfxThing()
VfxThing::VFX_CleanUp()
VfxThing::~VfxThing()
VfxThing::GetFromCreate(ILevelContainer const&)
VfxThing::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
VfxThing::ResetOnScreen(ManagerRenderData&, NURENDERSTAGE, LevelViewType, ClassManager::eRenderingPriority const&)
VfxThing::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
VfxThing::EventNotify(Event&, NuEventData&)
Vfx_Instance_Placeable::SetVisible(bool)
Vfx_Instance_Placeable::CleanUp()
Vfx_Instance_Placeable::InvalidateAllHandles()
Vfx_Instance_Placeable::Vfx_Instance_Placeable(Placeable*, short, VfxProxy*)
Vfx_Instance_Placeable::~Vfx_Instance_Placeable()
Vfx_Instance_Placeable::SetAlphaRatio(float)
VfxThing::DebugRenderBeamLocationsOnMap(VuVec const&, float, VuVec const&, float)
VfxThing::StaticInit()
VfxThing::VFX_IsTypeAvailable(long)
VfxThing::VFX_FadeIn(VfxHandle&, float)
VfxThing::VFX_FadeOut(VfxHandle&, float, bool)
VfxThing::GetManagerName() const
NuMap<long, VfxProxy>::InsertNode(long const&)
NuMap<long, VfxProxy>::DeleteNodeLinks(NuMapNode<long, VfxProxy>*)
NuListFind<VfxThing*, NuListNode<VfxThing*> >::Remove(NuListNode<VfxThing*>*, NuListNode<VfxThing*>*, VfxThing* const&)
ParticleManager::UpdateRenderData(ParticleEmitterType*)
DecalBuffer::NewPoly()
DecalBuffer::AddPoint(NuVector3Base const&, NuVector3Base const&)
DecalBuffer::AddPointInternal(NuVector3Base const&, NuVector3Base const&)
DecalBuffer::AddNormal(NuVector3Base const&)
DecalBuffer::CopyData(Decal*, unsigned short*, NuVector3Base*) const
DecalBuffer::ApplyNormals()
DecalManager::DecalManager(LevelContainer&)
DecalManager::RegisterProcessing()
DecalManager::RegisterRendering()
DecalManager::~DecalManager()
DecalManager::~DecalManager()
DecalManager::GetManagerName() const
DecalManager::AddDecalSet(DecalSet*)
DecalManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
DecalManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
DecalSet::DecalSet(char const*)
DecalSet::SetMaterial(char const*)
DecalSet::DecalSet(NuSmartPtr<NuMtl, true>)
DecalSet::OnRender()
DecalSet::RenderDecals(unsigned int) const
GetTangent(NuVector3Base const&)
DecalSet::~DecalSet()
DecalSet::~DecalSet()
DecalSet::NumPolys()
DecalSet::IsDead()
ParFileRequest::Read(bool volatile*)
edpartLoadPageEx(char const*, char, NuSmartPtr<NuScene, true>*, int, LevelContainer*)
edpartLookupObject(char*)
edpartLoadSingleType(part_typedesc_s*, int, int, LevelContainer&)
edpartLoadPage(char const*, char, NuSmartPtr<NuScene, true>, LevelContainer*)
edpartStartPage(char)
edpartStopPage(char)
edpartClearPage(char)
edpartClearAllPages()
edpartScaleType(int, float)
GetPARTEdReg()
ParFileRequest::~ParFileRequest()
ParFileRequest::~ParFileRequest()
RegisterFindGobjCallBack(void* (*)(char const*))
RegisterResetGobjCallBack(void (*)(void*, VuMtx const&))
RegisterVisiGobjCallBack(void (*)(void*, bool))
RegisterMovedGobjCallBack(void (*)(void*, VuMtx const&, float, bool))
RegisterCreateGobjCallBack(void* (*)(char const*, VuMtx const&, LevelContainer*, EdRegContext*))
RegisterDestroyGobjCallBack(void (*)(void*))
GFXCutsceneRelocate(int, char*, unsigned long, char*, char*)
instNuGCutSceneLockCutsceneGfxMem2(int)
instNuGCutSceneLockCutsceneGfxMem2(instNUGCUTSCENE const*)
instNuGCutSceneUnLockCutsceneGfxMem2(int)
instNuGCutSceneUnLockCutsceneGfxMem2(instNUGCUTSCENE const*)
CSMemoryInit()
CSAllocMemory(int)
CSGetMemoryPtr(int)
CSFreeMemory(int)
instNuGCutSceneStartBlend(instNUGCUTSCENE*, instNUGCUTSCENE*, float, bool)
instNuGCutSceneStop(instNUGCUTSCENE*, NuCutSceneRaw*)
instNuGCutSceneStart(instNUGCUTSCENE*, float, bool)
instNuGCutSceneSetBlendValue(instNUGCUTSCENE*, instNUGCUTSCENE*, float)
instNuGCutSceneStopBlend(instNUGCUTSCENE*, instNUGCUTSCENE*)
RemoveBlending(instNUGCUTSCENE*)
NuGCutSceneSysBackgroundFlush()
NuGCutSceneSysInit(NUGCUTLOCFNDATA_s*)
NuGCutSceneSysInitMemoryManager(MemoryManager*)
NuGCutSceneSysSetVfxThing(VfxThing*)
NuGCutSceneSysGetVfxThing()
instNuGCutSceneGetSPaintingAspectRatio(nuhspecial_s*, VuMtx*, VuVec*)
instNUGCUTSCENEDoImposterLodding()
NuGCutSceneSysUpdate(int, int, float)
instNuGCutSceneUpdate(instNUGCUTSCENE*, int, int, float)
instNuGCutSceneResetCamLock(instNUGCUTSCENE*)
NuGCutSceneSysRender(int)
instNuGCutSceneRender(instNUGCUTSCENE*, int)
NuGCutSceneLoad(char const*, int)
NuGCutSceneDestroy(int)
NuGCutCharSysDestroy(NuCutSceneRaw*)
NuGCutSceneFixUp(NuCutSceneRaw*, NuSmartPtr<NuScene, true>, NUTRIGGERSYS_s*, int, void*)
NuGCutCharSysFixUp(NuCutSceneRaw*, void*)
NuGCutSceneFixUpExtra(NuCutSceneRaw*, NuSmartPtr<NuScene, true>)
NuGCutSceneCheckFixUp(NuCutSceneRaw*, int)
NuGCutSceneSysPostBackgroundLoad()
PetesHackOfDeath()
instNuGCutSceneSetCreationLocus(VuMtx&)
instNuGCutSceneSetRigidLibrary(int, void**)
instNuGCutSceneSendStartEvent(instNUGCUTSCENE*)
instNuGCutSceneSendFinishEvent(instNUGCUTSCENE*)
instNuGCutSceneCreate(int, NuSmartPtr<NuScene, true>, instNUTRIGGERSYS_s*, char const*, nuvariptr_u*, int, LevelContainer*, LevelContainer*, EdRegContext*, char const*, bool)
instNuGCutSceneCreate(NuCutSceneRaw*, NuSmartPtr<NuScene, true>, instNUTRIGGERSYS_s*, char const*, nuvariptr_u*, int, LevelContainer*, LevelContainer*, EdRegContext*, char const*, bool)
instNuGCutSceneDestroy(instNUGCUTSCENE*)
instNuGCutSceneEnd(instNUGCUTSCENE*, bool)
instNuGCutCharSysDestroy(instNUGCUTSCENE*, NuCutSceneRaw*)
instNuGCutSceneIsFinished(instNUGCUTSCENE*)
instNuGCutSceneRestoreControl(instNUGCUTSCENE*)
instNuGCutSceneReset(instNUGCUTSCENE*)
instNuGCutCamSysUpdate(instNUGCUTSCENE*, NuCutSceneRaw*, float)
gcutSetSoundVol(int, int)
instNuGCutCamSysStart(instNUGCUTCAMSYS_s*, NuCutSceneRaw*)
instNuGCutScenePlay(instNUGCUTSCENE*, int)
instNuGCutScenePause(instNUGCUTSCENE*, int)
instNuGCutSceneEndButNotSystems(instNUGCUTSCENE*)
instNuGCutLocatorSysEnd(LevelContainer*, instNUGCUTLOCATORSYS_s*, NuCutSceneRaw*, float)
instNuGCutSceneEndFirstFrame(instNUGCUTSCENE*)
instNuGCutSceneJumpToEnd(instNUGCUTSCENE*)
instNuGCutSceneJumpToLastFrame(instNUGCUTSCENE*)
instNuGCutSceneEnable(instNUGCUTSCENE*)
instNuGCutSceneDisable(instNUGCUTSCENE*)
instNuGCutSceneSetPos(instNUGCUTSCENE*, NUVEC*)
instNuGCutSceneCalculateCentre(instNUGCUTSCENE*, NUMTX*)
instNuGCutSceneTranslate(instNUGCUTSCENE*, NUVEC*)
instNuGCutSceneSetMtx(instNUGCUTSCENE*, NUMTX*)
instNuGCutSceneSetRepeat(instNUGCUTSCENE*, int)
instNuGCutSceneWaitAtEnd(instNUGCUTSCENE*, int)
instNuGCutSceneChain(instNUGCUTSCENE*, instNUGCUTSCENE*)
instNuGCutSceneAnimateInvisibles(instNUGCUTSCENE*)
instNuGCutSceneSetEndCallback(instNUGCUTSCENE*, void (*)(void*))
instNuGCutSceneRotateY(instNUGCUTSCENE*, int)
instNuGCutSceneCreateCamTgtArray(instNUGCUTSCENE*, int, nuvariptr_u*)
instNuGCutSoundStream(instNUGCUTSCENE*, char*, char*, int, int, nuvariptr_u*)
instNuGCutSceneFind(char*)
NuHSpecialMatch(nuhspecial_s*, nuhspecial_s*)
instNuGCutSceneAddCamTgt(instNUGCUTSCENE*, NUVEC*, float, float, char)
NewCopyAnims(instNUGCUTSCENE*)
NuGCutSceneIsBackgroundLoading()
instNuGCutSceneSwapBuffers(instNUGCUTSCENE*, int)
NuGCutSetCutAudioStream(int)
instNuGCutSceneRenderCamIndex(instNUGCUTSCENE*, int, NuCutSceneRaw*, int, float)
SetPaintingCameraCallBack(void (*)(instNUGCUTRIGID*, NuCamera*))
instNuGCutSceneRenderPaintingCallback(void*, NURENDERSTAGE)
instNuGCutGetCameraResults(instNUGCUTSCENE*, int*, int)
instNuGCutScnGetCameraNearFar(instNUGCUTSCENE const*, float*, float*, int)
instNuGCutSceneGetPostProcessRndrNeeded(instNUGCUTSCENE*)
instNuGCutSceneGetRenderPostProcess(instNUGCUTSCENE*)
instNuGCutSceneCharGetStartMtx(instNUGCUTSCENE*, char*, NUMTX*)
instNuGCutCamSysCreate(NuCutSceneRaw*, nuvariptr_u*)
CalculateMatrixUsingCurveFlags(NUMTX*, int, float**)
instNuGCutCamEvaluateCameraResults(instNUGCUTSCENE*, NuCutSceneRaw*, int, instcamresults_s*)
instNuGCutCamSysUpdateBgSafe(int, instNUGCUTSCENE*, NuCutSceneRaw*, float, NUQUAT*)
NuGCutLocatorCalcMtx(NuCutSceneRaw*, NuCutSceneRawLocator*, float, NUMTX*, nuanimtime_s*, bool, float*, float*, int*)
instNuGCutEvaluateCamera(instNUGCUTSCENE*, int, instcamresults_s*)
instNuGCutGetShadowFocusLocScale(instNUGCUTSCENE*, NuVector4Base*, int)
instNuGCutGetNumActiveSplitCameras(instNUGCUTSCENE*)
instNuGCutGetSplitCameraMode(instNUGCUTSCENE*)
instNuGCutGetSplitCameraAmount(instNUGCUTSCENE*)
NuGCutLocatorCalcMtx_3(NuCutSceneRaw*, NuCutSceneRawLocator*, NUMTX*, float, bool, float*, float*, int*)
NuGCutLocatorIsVisble_3(NuCutSceneRaw*, NuCutSceneRawLocator*, float, float*, float*, int*)
NuGCutLocatorIsVisble(NuCutSceneRaw*, NuCutSceneRawLocator*, float, nuanimtime_s*, float*, float*, int*)
FindMtlInHGObj(NuSmartPtr<NuScene, true>, int)
FindTexAnimFromMtl(NuSmartPtr<NuScene, true>, NuSmartPtr<NuMtl, true>)
instGetLookAtLocatorInfo(instNUGCUTSCENE*, NuCutSceneRaw*, instNUGCUTLOOKAT_s*)
CalculateLocatorDirection(LOCATORDIRECTION, NUMTX*, NUVEC*)
instNuGCutLocatorUpdate(instNUGCUTSCENE*, NuCutSceneRaw*, NuCutSceneRawLocatorSys*, instNUGCUTLOCATOR_s*, NuCutSceneRawLocator*, float, NUMTX*, int)
instNuGCutVFXLocatorUpdate(NuCutSceneRaw*, NuCutSceneRawLocatorSys*, instNUGCUTLOCATOR_s*, NuCutSceneRawLocator*, float, NUMTX*)
EvaluateJointOrientationMtx(NuSmartPtr<NuScene, true>, int, NUMTX*)
NuGCutRigidCalcMtx_3(NuCutSceneRaw*, NuCutSceneRawRigid*, float, NUMTX*, float*, unsigned char*, NuCutSceneRaw*, NuCutSceneRawRigid*, float, float)
NuGCutRigidCalcMtx(NuCutSceneRaw*, NuCutSceneRawRigid*, float, NUMTX*, float*, unsigned char*, NuCutSceneRaw*, NuCutSceneRawRigid*, float, float)
instNuGCutCharSysCreate(NuCutSceneRaw*, nuvariptr_u*, LevelContainer*, bool)
GetIntCurveVal(ani3_animheader_s*, float*, int)
MoveRootNodeCurves(ani3_animheader_s*, short, float*, float*)
NuGCutCharAnimProcess_3(NuCutSceneRaw*, NuANI4AnimRaw*, float, NUMTX*, int*, unsigned int*, float*, float*, float*, int*, float*, unsigned char*, NuCutSceneRaw*, NuANI4AnimRaw*, float, float)
NuGCutCharAnimProcess(NuCutSceneRaw*, int, float, NUMTX*, int*, unsigned int*, float*, float*, float*, int*, float*, unsigned char*, NuCutSceneRaw*, NuANI4AnimRaw*, float, float)
NuGCutCharAnimProcess(NuCutSceneRaw*, NuANI4AnimRaw*, float, NUMTX*, int*, unsigned int*, float*, float*, float*, int*, float*, unsigned char*, NuCutSceneRaw*, NuANI4AnimRaw*, float, float)
NuSetGetHGObjFromIndxFn(NuSmartPtr<NuScene, true> (*)(instNUGCUTSCENE*, int))
NuSetCutSceneCharacterProcessFn(void (*)(int, instNUGCUTSCENE*, NuCutSceneRaw*, float, int))
NuSetCutSceneCharacterRenderFn(void (*)(int, instNUGCUTSCENE*, NuCutSceneRaw*, float, int, NuANI4AnimRaw*))
NuSetCutSceneCharacterEvalFn(void (*)(instNUGCUTSCENE*, NuCutSceneRaw*, instNUGCUTCHAR_s*, NuANI4AnimRaw*, float))
NuSetCutSceneCharacterReleaseFn(void (*)(instNUGCUTCHAR_s*, NuANI4AnimRaw*))
NuSetCutSceneFindCharactersFn(void (*)(NuCutSceneRaw*, void*))
NuSetCutSceneDestroyCharactersFn(void (*)(NuCutSceneRaw*))
NuSetCutSceneResetCharactersFn(void (*)(instNUGCUTSCENE*))
NuSetCutSceneCharacterCreateDataFn(void (*)(NuCutSceneRaw*, NuANI4AnimRaw*, NuCutSceneRawCharExtra*, instNUGCUTCHAR_s*, nuvariptr_u*, LevelContainer*, bool))
NuSetCutSceneCharacterDestroyDataFn(void (*)(NuCutSceneRaw*, NuANI4AnimRaw*, NuCutSceneRawCharExtra*, instNUGCUTCHAR_s*))
NuSetCutSceneRigidCollisionCheckFn(void (*)(NuCutSceneRawRigid*, NUMTX*))
NuSetCutSceneSFXFixUpFn(int (*)(char*))
NuSetCutSceneSFXUpdateFn(void (*)(NuCutSceneRaw*, NuCutSceneRawLocatorSys*, instNUGCUTLOCATOR_s*, NuCutSceneRawLocator*, float, NUMTX*, int))
NuSetCutSceneRequestSFXFn(void (*)(instNUGCUTSCENE*))
NuSetCutSceneRigidPostRenderFn(void (*)(NuCutSceneRaw&, instNUGCUTSCENE&, NuCutSceneRawRigid&, instNUGCUTRIGID&, NUMTX&, float))
NuSetCutSceneRigidInstUpdateFn(void (*)(NuCutSceneRaw&, instNUGCUTSCENE&, NuCutSceneRawRigid&, instNUGCUTRIGID&, NUMTX&, float))
NuSetCutSceneVFXFixUpFn(long (*)(char const*, NuCutSceneRaw*, void*))
NuSetCutScenePTLFixUpFn(long (*)(char const*, NuCutSceneRaw*, void*))
instNuGCutSceneResetCleanUp(void*, void*, void*, void*, void*, instNUGCUTSCENE* (*)(void*), instNUGCUTSCENE* (*)(void*, NuCutSceneRaw*, nuvariptr_u*), void (*)(void*))
NuHGobjSetClippingRootTrackerOverride(NuSmartPtr<NuScene, true>, NuCutSceneRaw*, int)
NuHGobjSetClippingRootTrackerOverrideSimple(int, int)
NuGCutSetScaleMode(CUTSCENESCALEMODE)
instNuGCutSceneWaitAtFrame(instNUGCUTSCENE*, int const&, float const&)
isPrimaryCameraCutscenePlaying()
FrameworkEventCutSceneData::~FrameworkEventCutSceneData()
NuVector<ContainerLedIdSearchPair>::Reserve(unsigned int, bool)
NuVector<CSGROUPNODELIST_s>::Reserve(unsigned int, bool)
NuVector<ContainerLedIdSearchPair>::ReSize(unsigned int, bool)
NuVector<NuCamera const*>::Reserve(unsigned int, bool)
NuDynamicStringT<true>::~NuDynamicStringT()
CutSceneThing::Init()
CutSceneThing::StopGrabbing()
CutSceneThing::SetGrabbing(bool)
CutSceneThing::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CutSceneThing::SetOutputDirectory(char*)
CutSceneThing::SetGrabPrimaryFrameBufferOnly(bool)
CutSceneThing::GrabPrimaryFrameBufferOnly() const
CutSceneThing::ResetCutScene(instNUGCUTSCENE*)
CutSceneThing::SetupDefaultLighting(bool)
CutSceneThing::CutSceneCreatePath(char*)
CutSceneThing::StopCutScene(instNUGCUTSCENE*)
CutSceneThing::SetPlaying(bool)
CutSceneThing::PlayCutScene(instNUGCUTSCENE*, float, float)
CutSceneThing::OnPaused(bool)
PlayCutScenetoAVI(instNUGCUTSCENE*, float, float)
CutSceneThing::~CutSceneThing()
CutSceneThing::~CutSceneThing()
CutSceneThing::GetManagerName() const
ClassManager::ClassManager(int, ClassManager*)
ClassManager::~ClassManager()
ClassManager::~ClassManager()
ClassManager::SetInContainer(LevelContainer&, ClassManager::eDeletionOrder)
ClassManager::RemoveFromContainer(LevelContainer*)
ClassManager::GetNextManagerID()
ClassManager::GetClass(int)
ClassManager::GetNumClasses()
ClassManager::GetNumObjects(void*)
ClassManager::GetNextObject(void*, void*)
ClassManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ClassManager::CreateInstance(ClassObject const&)
ClassManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ClassManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ClassManager::ResetOnScreen(NURENDERSTAGE, LevelViewType, ClassManager::eRenderingPriority const&)
ClassManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
ClassManager::IsInContainer(LevelContainer&)
ClassManager::IsMainLevel() const
ClassManager::CreateManager(int, LevelContainer&)
ClassManager::RegisterFactory(int, ClassManager* (*)(LevelContainer&))
ClassManager::IsRegisteredProcessingManager(ClassManager::eProcessingPriority)
ClassManager::IsRegisteredRenderingManager(ClassManager::eRenderingPriority)
ClassManagerAccessorBase::GetILevelContainer(short)
FadeSystem::Init(FrameworkEnvironment*)
FadeSystem::InitFadeSystemAudio()
FadeSystem::FadeSoundAsScreenFade()
FadeSystem::SetStage(LevelContainer const*, char)
FadeSystem::GetStage() const
FadeSystem::AddFade(FadeBase*, int)
FadeSystem::SetFade(int const&, unsigned int)
FadeSystem::GetFadeTime()
FadeSystem::SetFadeTime(float)
FadeSystem::GetFadeInfo()
FadeSystem::SetSpeed(float)
FadeSystem::SetDrawOverHud(int, int)
FadeSystem::GetSpeed()
FadeSystem::GetFadeType()
FadeSystem::IsStillRenderAllowed() const
FrameworkConfig::FrameworkConfig()
FrameworkConfig::SetDefaults()
TFixedString<16>::~TFixedString()
FrameworkDemo::FrameworkDemo()
LaunchDemoLevelEventData::LaunchDemoLevelEventData(LaunchDemoMode)
FrameworkDemo::IsPlayableDemo()
FrameworkDemo::SetPlayableDemo()
FrameworkDemo::IsE3Demo()
FrameworkDemo::SetE3Demo()
FrameworkDemo::DispatchDemoEvent(LaunchDemoMode)
FrameworkDemo::StoryFreePlayMenuSelected(LaunchDemoMode)
FrameworkDemo::ShutDownSplash()
LaunchDemoLevelEventData::~LaunchDemoLevelEventData()
FrameworkEnvironment::FrameworkEnvironment()
FrameworkEnvironment::SetPaused(int)
FrameworkEnvironment::SetFrameTime(float)
FrameworkEnvironment::SetDataPath(char*)
PausedStateChangeEventData::~PausedStateChangeEventData()
FrameworkEventObjectClassData::FrameworkEventObjectClassData(ClassObject const&)
NuSimpleJob::~NuSimpleJob()
NuMain(int, char**)
FrameworkPads::FrameworkPads(GameFramework*)
FrameworkPads::Init()
FrameworkPads::StartPressed()
FrameworkPads::AnyButtonPressed()
FrameworkPads::ClearPads(bool)
FrameworkPads::AssignPad(NUPAD*)
FrameworkPads::EventNotify(Event&, NuEventData&)
FrameworkPads::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
FrameworkPads::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
FrameworkPads::~FrameworkPads()
FrameworkPads::~FrameworkPads()
FrameworkPads::GetManagerName() const
StartPressedRequestEventData::~StartPressedRequestEventData()
FrameworkSave::SaveRequest::SaveRequest(FlowReason, int, float, FrameworkSave::Interaction)
FrameworkSave::SaveRequest::EnsureDelay(float)
FrameworkSave::FrameworkSave(GameFramework*)
FrameworkSave::SetMainThread(NuThread*)
FrameworkSave::SaveSystemInitialise()
FrameworkSave::CommandLineDisableSave()
FrameworkSave::InitStrings()
FrameworkSave::DeleteSubFile(int, int)
FrameworkSave::ExecuteIO()
FrameworkSave::IsInteractionAutomatic() const
FrameworkSave::IsInteractionManual() const
FrameworkSave::HandleOverwriteSlot()
IsOptionsFileType(int)
FrameworkSave::IsCurrentFileTypeGlobalOptions()
FrameworkSave::TriggerSerialiseFlow(FrameworkSave::Interaction, int, FlowReason)
FrameworkSave::IsSaveEnabled() const
FrameworkSave::RetryManualSerialising()
FrameworkSave::CleanupSaveEventData()
FrameworkSave::ExistingFilesShouldBeOverwritten()
FrameworkSave::TriggerManualLoad()
FrameworkSave::TriggerManualSave()
FrameworkSave::TriggerAutoLoad(int)
FrameworkSave::TriggerAutoSave(int, float)
FrameworkSave::FindSaveRequest(int)
FrameworkSave::HandleOutstandingSaveRequests()
FrameworkSave::ClearSaveQueue()
FrameworkSave::EventNotify(Event&, NuEventData&)
FrameworkSave::SetLeftSaveFlow()
FrameworkSave::CheckDispatchLoadPiggyBack()
FrameworkSave::IsBusy()
FrameworkSave::AllowedToResolveStorageDeviceChanged()
FrameworkSave::OnUpdate()
FrameworkSave::FinishedSerialising()
FrameworkSave::CommandLineSaveDisabled() const
FrameworkSave::IsSaveDisabledDueToBootWarning() const
FrameworkSave::SaveDisabledDueToReturningToFrontend() const
FrameworkSave::SetContinueWithoutSaving(bool)
FrameworkSave::CommandLineEnableSave()
FrameworkSave::DebugResetSaveEnabled()
FrameworkSave::FileExists(int, int)
FrameworkSave::SetCurrentSlot(int)
FrameworkSave::ShowSerialisingResult(bool)
FrameworkSave::SetReportStorageChanged(bool)
FrameworkSave::GetCurrentSaveFileType()
FrameworkSave::DisableSaveDueToBootWarning()
FrameworkSave::SetSaveDisabledDueToReturningToFrontend(bool)
FrameworkSave::HasCurrentSaveRequest()
FrameworkSaveEventData::FrameworkSaveEventData(void*, int, SaveAction)
FrameworkSaveEventData::IsLoad() const
FrameworkSaveEventData::IsSave() const
FrameworkSaveEventData::~FrameworkSaveEventData()
FrameworkSaveEventData::~FrameworkSaveEventData()
SaveLoadPiggyBackEventData::SaveLoadPiggyBackEventData(SaveAction, int)
SaveFileIndexData::SaveFileIndexData()
FrameworkSave::~FrameworkSave()
FrameworkSave::~FrameworkSave()
SaveLoadPiggyBackEventData::~SaveLoadPiggyBackEventData()
SaveFileIndexData::~SaveFileIndexData()
CStack<int, 32>::~CStack()
CStack<int, 32>::~CStack()
TFixedString<512>::~TFixedString()
FrameworkSystemSettings::FrameworkSystemSettings()
FrameworkSystemSettings::SetStage(FrameworkSystemSettings::eLoadStage)
FrameworkSystemSettings::GetStage()
FrameworkSystemSettings::IsBootComplete()
FrameworkString::Init()
FrameworkString::GetString(char const*)
NuSceneResourceType::GetName() const
NUHGOBJResourceType::GetName() const
AnimResourceType::GetName() const
SFXResourceType::GetName() const
TextureResourceType::GetName() const
DoUISafeZone(bool)
SetUISafeZone(float)
GetUISafeZone()
GameFramework::GameFramework()
GameFramework::ExitApp()
GameFramework::Exiting() const
LoadGameFrameworkLed()
GameFramework::SystemInit()
GameFramework::InitLanguage()
GameFramework::LoadData(void*)
GameFramework::SetGlobalOptionsLoaded()
GameFramework::SetWaitingForGlobalOptionsToLoad()
GameFramework::SetWaitingToSaveGlobalOptions()
GameFramework::UpdatePvs()
GameFramework::Process()
GameFramework::DoInput()
GameFramework::ProcessResources(void*)
GameFramework::SystemShutdown()
GameFramework::CreateGameSplashScreens()
GameFramework::UpdateScene(short)
GameFramework::PostProcessUpdate(short, float)
GameFramework::UpdateScene(short, float)
GameFramework::IsSystemUIImposed() const
DoUnitTestingIfRequired(int&)
GameFramework::Run()
GameFramework::ClearCameraReference(NuCamera*)
GameFramework::GetCamera(int)
GameFramework::SetCamera(NuCamera*, int, int)
GameFramework::RemoveArg(int)
GameFramework::GetArg(char const*, int)
GameFramework::GetNextArg(int)
GameFramework::ParseCommandLine()
GameFramework::EventNotify(Event&, NuEventData&)
GameFramework::AddImposeSystemUI()
GameFramework::RemoveImposeSystemUI()
GameFramework::RestartFrontend()
GameFramework::HandleWiiStartup(void*)
GameFramework::SetupRenderPipe()
GameFramework::RenderHudFn(void*)
GameFramework::RenderAfterFinalPostEffectsFn(void*)
GameFramework::InitGameLanguagesFromTTBuilder()
SetPortalScene(NuSmartPtr<NuScene, true>)
GetPortalScene()
GameFramework::IsGameInFrontend() const
GameFramework::SetGameInFrontend(bool)
GameFramework::IsSaveMenuImposeAllowed()
GameFramework::ReportPadRemoval()
GameFramework::GetEnvironmentJPad(int)
GameFramework::CreateLevelContainer(char const*, bool, LevelContainer::LevelContainerMemory, StreamingLevel*)
GameFramework::IsLedGUIActive()
GameFramework::OnLevelActivate(StreamingLevel&)
GameFramework::OnLevelDeactivate(StreamingLevel&)
GameFramework::OnLevelLoad(StreamingLevel&)
GameFramework::OnLevelUnload(StreamingLevel&)
IsGameFrameworkExiting()
NuSceneResourceType::~NuSceneResourceType()
NUHGOBJResourceType::~NUHGOBJResourceType()
AnimResourceType::~AnimResourceType()
SFXResourceType::~SFXResourceType()
TextureResourceType::~TextureResourceType()
GameFramework::~GameFramework()
GameFramework::~GameFramework()
GameFramework::Close()
GameFramework::AllocateGameRenderPipes()
GameFramework::TriggerAutoSave()
GameFramework::CreateFlowManager(LevelContainer&)
GameFramework::InActiveGameplay()
GameFramework::CreateLevelContextData(StreamingLevel const&)
GameFramework::DestroyLevelContextData(StreamingLevel const&)
GameFramework::GetPlayerControl(int)
GameFramework::GetPlayerPresent(int)
GameFramework::OnRenderScreenGrab()
GameFramework::IsCutSceneInProgress()
GameFramework::OnNuInitHardwareComplete()
GameFramework::OnSystemsInitComplete()
GameFramework::GetDefaultLevel() const
GameFramework::GetDefaultLoadingScreens(StreamingLevel::LevelVector&) const
GameFramework::LoadGameData(void*)
KeyframeSubHelper::~KeyframeSubHelper()
ManagerProcessData::~ManagerProcessData()
ManagerRenderData::~ManagerRenderData()
BeamSplineKnotHelper::~BeamSplineKnotHelper()
KnotHelperT<BeamSplineKnot>::NewKnot()
KnotHelperT<BeamSplineKnot>::DeleteKnot(SplineKnot*)
non-virtual thunk to BeamSplineKnotHelper::~BeamSplineKnotHelper()
non-virtual thunk to BeamSplineKnotHelper::~BeamSplineKnotHelper()
FrameworkScreenGrabThing::~FrameworkScreenGrabThing()
MenuFlow2::~MenuFlow2()
GameFrameworkCommandLineArgs::GetNextArg()
GameFrameworkCommandLine::GetNextArg()
GameFrameworkCommandLine::GameFrameworkCommandLine()
GameFrameworkCommandLine::Finished()
GameFrameworkCommandLine::ParseCommandLine(int, char const**)
GameFrameworkCommandLine::ParseArg(char const*)
OverlaySystem::OverlaySystem()
OverlaySystem::AddOverlay(Overlay*, int)
OverlaySystem::AddOverlay(Overlay*)
OverlaySystem::RemoveOverlay(Overlay const*)
OverlaySystem::RemoveOverlay(int)
OverlaySystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
OverlaySystem::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
OverlaySystem::~OverlaySystem()
OverlaySystem::GetManagerName() const
LevelContainerMemEventHandler::AllocatePage(NuMemoryManager*, unsigned long, unsigned long)
LevelContainerMemEventHandler::ReleasePage(NuMemoryManager*, void*, unsigned long)
LevelContainer::LevelContainer(char const*, LevelContainer::LevelContainerType, bool, LevelContainer::LevelContainerMemory, StreamingLevel*)
LevelContainer::~LevelContainer()
LevelContainer::DeleteManagers()
LevelContainer::~LevelContainer()
LevelContainer::RegisterAllProcessingManagers(bool)
LevelContainer::DeregisterAllProcessingManagers(bool)
LevelContainer::DeregisterProcessingThingFromAllPriorities(ClassManager*)
LevelContainer::RegisterAllRenderingManagers(bool)
LevelContainer::DeregisterAllRenderingManagers(bool)
LevelContainer::DeregisterRenderingThingFromAllPriorities(ClassManager*)
LevelContainer::RegisterProcessingThing(ClassManager*, ClassManager::eProcessingPriority const&)
LevelContainer::RegisterRenderingThing(ClassManager*, NURENDERSTAGE const&, ClassManager::eRenderingPriority const&, void*, LevelViewType)
LevelContainer::DeregisterProcessingThing(ClassManager*, ClassManager::eProcessingPriority const&)
LevelContainer::DeregisterRenderingThing(ClassManager*, NURENDERSTAGE const&, ClassManager::eRenderingPriority const&, LevelViewType)
LevelContainer::UnFixupTempLED()
LevelContainer::ClearTempLED()
LevelContainer::SetInVisibiltyAndProcess(bool, bool, bool)
LevelContainer::SetCanProcess(bool, bool, bool)
LevelContainer::SetCanRender(bool, bool, bool)
LevelContainer::SetInUse(bool)
LevelContainer::SetIdle(bool)
LevelContainer::AddChildContainer(LevelContainer&)
LevelContainer::RemoveChildContainer(LevelContainer&)
LevelContainer::RemoveAllChildContainers()
LevelContainer::FindObject(char const*, EdClass*, bool, bool)
LevelContainer::FindObject(char const*, EdClass*, short)
LevelContainer::FindObject(char const*, bool&, ClassObject const&, bool, bool, bool, EdClass*)
LevelContainer::FindManager(EdClass*)
LevelContainer::FindObject(char const*, EdClass*, short const*, unsigned int)
LevelContainer::FindObject(char const*, ClassObject const&, bool, bool, EdClass*)
LevelContainerList::FindObject(char const*, EdClass*)
LevelContainerList::FindObject(char const*, bool)
LevelContainer::SetManager(ClassManager*, int, ClassManager::eDeletionOrder)
LevelContainer::RemoveManager(int)
LevelContainer::AddCommonManagers()
LevelContainer::AddBasicManagers()
LevelContainer::PrintListingOfManagers()
LevelContainer::RemoveFromParentContainer()
LevelContainer::GetLevelResource() const
LevelContainer::SetLevelViewExcludeFilterBit(LevelView::eFilterBits, bool)
LevelContainer::SetLevelViewIncludeFilterBit(LevelView::eFilterBits, bool)
LevelContainer::ExpandExtents(VuVec const&, VuVec const&)
LevelContainer::GetPosition(VuVec&) const
LevelContainer::AddManagers()
SystemLevelContainer::AddManagers()
SystemLevelContainer::~SystemLevelContainer()
GlobalLevelContainer::AddManagers()
GlobalLevelContainer::~GlobalLevelContainer()
ClassManagerAccessor<DynamicLightDescManager>::GetFromCreate(ILevelContainer const&)
GameLevelContainer::AddManagers()
GameLevelContainer::~GameLevelContainer()
GameLevelContainer::IsGamePlayLevel() const
GameLevelContainer::IsLegoSet() const
GUILevelContainer::AddManagers()
GUILevelContainer::~GUILevelContainer()
LevelContainerManager::LevelContainerManager()
LevelContainerManager::~LevelContainerManager()
LevelContainerManager::ClearRenderingThings()
LevelContainerManager::ClearProcessingThings()
LevelContainerManager::~LevelContainerManager()
LevelContainerManager::Init()
LevelContainerManager::Get()
LevelContainerManager::UpdateAnimation(ManagerProcessData&)
LevelContainerManager_Process_SimpleJob(void*)
LevelContainerManager::Process_SimpleJob(ClassManager*, PrioritisedManager*, ManagerProcessData*)
LevelContainerManager_Process_SimpleJob_Callback(NuSimpleJobStatus)
LevelContainerManager::Process(ManagerProcessData&)
LevelContainerManager::ResetOnScreen()
LevelContainerManager::RenderThings(NURENDERSTAGE const&, ManagerRenderData&)
LevelContainerManager::GetRenderData()
LevelContainerManager::CreateRenderPipes(bool)
LevelContainerManager::GetDRCPipe()
LevelContainerManager::GetGamePipe(unsigned int)
LevelContainerManager::GetDRCPipeIndex()
LevelContainerManager::GetGamePipeIndex(unsigned int)
LevelContainerManager::SetClearColourOverrideEnabled(bool)
LevelContainerManager::SetClearColourOverride(unsigned int)
LevelContainerManager::IsClearColourOverrideEnabled()
LevelContainerManager::GetClearColourOverride()
LevelContainerManager::SetupRenderPipes()
LevelContainerManager::RenderMain3dFn(void*)
LevelContainerManager::RenderAfterDeferredFn(void*)
LevelContainerManager::Render3dAfterEarlyColouringFn(void*)
LevelContainerManager::RenderFinalPostEffectsFn(void*)
LevelContainerManager::RenderAfterFinalPostEffectsFn(void*)
LevelContainerManager::RenderHUDFn(void*)
LevelContainerManager::SetPreRenderHackFunction(void (*)(void*))
LevelContainerManager::Render(ManagerRenderData&)
LevelContainerManager::SetInUse(LevelContainer&, int)
LevelContainerManager::RemoveFromLists(LevelContainer&)
LevelContainerManager::SetIdle(LevelContainer&, int)
LevelContainerManager::SetCanRender(LevelContainer::LevelContainerType, bool)
LevelContainerManager::SetCanProcess(LevelContainer::LevelContainerType, bool)
LevelContainerManager::IsOnInUseList(LevelContainer&) const
LevelContainerManager::IsOnIdleList(LevelContainer&) const
ValidateLevelView(void*)
LevelContainerManager::RegisterProcessingThing(ClassManager*, ClassManager::eProcessingPriority const&)
LevelContainerManager::DeregisterProcessingThing(ClassManager*, ClassManager::eProcessingPriority const&)
LevelContainerManager::DeregisterProcessingThingFromAllPriorities(ClassManager*)
LevelContainerManager::RegisterRenderingThing(ClassManager*, NURENDERSTAGE const&, ClassManager::eRenderingPriority const&, LevelViewType)
LevelContainerManager::DeregisterRenderingThing(ClassManager*, NURENDERSTAGE const&, ClassManager::eRenderingPriority const&, LevelViewType)
LevelContainerManager::DeregisterRenderingThingFromAllPriorities(ClassManager*)
LevelContainerManager::RemapRenderingThings(char, char, char)
LevelContainerManager::ClearRemapRenderingThings()
LevelContainerManager::GetRemappedLevelViewDestination(NURENDERSTAGE, LevelViewType) const
ManagerEventData::~ManagerEventData()
LevelStreamingManager::LevelStreamingManager()
LevelStreamingManager::~LevelStreamingManager()
NuEList<LevelStreamingManager::StreamingRequest, DefaultElist>::~NuEList()
non-virtual thunk to LevelStreamingManager::~LevelStreamingManager()
LevelStreamingManager::~LevelStreamingManager()
non-virtual thunk to LevelStreamingManager::~LevelStreamingManager()
LevelStreamingManager::Get()
LevelStreamingManager::IsCreated()
LevelStreamingManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LevelStreamingManager::ProcessRequestList()
non-virtual thunk to LevelStreamingManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LevelStreamingManager::FindLevel(char const*, StreamingLevel*, eIterateChildren) const
LevelStreamingManager::FindLevel(NuFrameworkResource const*) const
LevelStreamingManager::RequestLoadLevel(StreamingLevel&, bool, StreamingLevel::LevelVector*)
LevelStreamingManager::RequestLoadLevelInternal(StreamingLevel&, bool, LevelStreamingManager::StreamingRequest*)
LevelStreamingManager::RequestActivateLevelInternal(StreamingLevel&, LevelStreamingManager::StreamingRequest*, bool)
LevelStreamingManager::RequestDeactivateLevelInternal(StreamingLevel&, bool, bool, LevelStreamingManager::StreamingRequest*, StreamingLevel*)
LevelStreamingManager::RequestUnloadLevel(StreamingLevel&, bool)
LevelStreamingManager::RequestUnloadLevelInternal(StreamingLevel&, LevelStreamingManager::StreamingRequest*)
LevelStreamingManager::RequestActivateLevel(StreamingLevel&, bool)
LevelStreamingManager::RequestPseudoActivateLevel(StreamingLevel&, bool)
LevelStreamingManager::GetRequestOutstanding(StreamingLevel const&, LevelStreamingManager::StreamingRequest::eRequest) const
LevelStreamingManager::RequestDeactivateLevel(StreamingLevel&, bool, bool)
LevelStreamingManager::RequestReactivateLevel(StreamingLevel&)
LevelStreamingManager::RequestWaitForCompletion(Event*)
LevelStreamingManager::RequestSetVisibilityAndProcessState(StreamingLevel&, bool)
LevelStreamingManager::RequestUnloadAll()
LevelStreamingManager::RequestUnloadExternalLevels(StreamingLevel&)
LevelStreamingManager::IsRequestOutstanding(StreamingLevel const&, LevelStreamingManager::StreamingRequest::eRequest) const
LevelStreamingManager::ClearQueuedLoad(StreamingLevel&)
LevelStreamingManager::IsLevelActivateRequested(StreamingLevel const&) const
LevelStreamingManager::RequestDeactivateLevelInternalInternal(StreamingLevel&, bool, bool, LevelStreamingManager::StreamingRequest*)
LevelStreamingManager::ClearQueuedRequest(StreamingLevel*, LevelStreamingManager::StreamingRequest::eRequest, bool, unsigned int)
LevelStreamingManager::LoadLevel(StreamingLevel&)
LevelStreamingManager::ClearBGQueuedRequests(StreamingLevel*)
LevelStreamingManager::UnloadLevel(StreamingLevel&)
LevelStreamingManager::ActivateLevel(StreamingLevel&)
LevelStreamingManager::PseudoActivateLevel(StreamingLevel&)
LevelStreamingManager::PseudoDeactivateLevel(StreamingLevel&)
LevelStreamingManager::DeactivateLevel(StreamingLevel&, bool, bool)
LevelStreamingManager::StreamingRequest::GetLevel()
LevelStreamingManager::IsLevelDeactivateRequested(StreamingLevel const&) const
LevelStreamingManager::StreamingRequest::QueueNextRequests()
LevelStreamingManager::IsLevelLoadRequested(StreamingLevel const&) const
LevelStreamingManager::IsLevelUnloadRequested(StreamingLevel const&) const
LevelStreamingManager::AbortCurrentDeactivate(StreamingLevel&)
LevelStreamingManager::NotifyAbortLoadRequested(StreamingLevel const&)
LevelStreamingManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
non-virtual thunk to LevelStreamingManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
LevelStreamingManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
non-virtual thunk to LevelStreamingManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
LevelStreamingManager::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
LevelStreamingManager::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
LevelStreamingManager::GetNextObject(void*, void*)
non-virtual thunk to LevelStreamingManager::GetNextObject(void*, void*)
LevelStreamingManager::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
LevelStreamingManager::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
LevelStreamingManager::IsCurrentlyStreamingMainLevel()
LevelStreamingManager::IsMasterLevel(StreamingLevel&)
LevelStreamingManager::AreRequestsOutstanding()
ResourceDefinitionAssetVisitor::~ResourceDefinitionAssetVisitor()
LevelStreamingManager::StreamingRequest::StreamingRequest(LevelStreamingManager::StreamingRequest*, StreamingLevel&, LevelStreamingManager::StreamingRequest::eRequest, Event*)
LevelStreamingManager::StreamingRequest::AddToRequestList(LevelStreamingManager::StreamingRequest*, LevelStreamingManager::StreamingRequest*)
LevelStreamingManager::StreamingRequest::StreamingRequest(LevelStreamingManager::StreamingRequest::eRequest, Event*)
LevelStreamingManager::StreamingRequest::~StreamingRequest()
LevelStreamingManager::AddLevel(StreamingLevel&)
LevelStreamingManager::GetStreamingLevelList() const
LevelStreamingManager::GetTopRequestCount(LevelStreamingManager::eCountRequests)
LevelStreamingManager::GetManagerName() const
non-virtual thunk to LevelStreamingManager::GetManagerName() const
ResourceDefinitionAssetVisitor::VisitDefinitionLED(ResourceDefinitionLED&)
ResourceDefinitionAssetVisitor::VisitDefinitionGSC(ResourceDefinitionGSC&)
ResourceDefinitionAssetVisitor::VisitDefinitionStreamingLevel(ResourceDefinitionStreamingLevel&)
ApplyLegoCityHDTileHackToFilename(char*)
ApplyLegoCityWaterTileHackToFilename(char*)
StreamingLevelLoadedList::StreamingLevelLoadedList()
StreamingLevel::StreamingLevel(char const*, char const*, char const*, char const*)
StreamingLevel::StreamingLevel(ResourceDefinitionStreamingLevel&)
StreamingLevel::~StreamingLevel()
StreamingLevel::ClearChildLevels()
StreamingLevel::ClearLoadPOIContainer()
StreamingLevelInfo::~StreamingLevelInfo()
StreamingLevel::~StreamingLevel()
StreamingLevel::Load()
StreamingLevel::DoLoad(void*)
StreamingLevel::GetLevelInfo() const
StreamingLevel::SetInitialFade()
StreamingLevel::DoLoadGSCResourceOnly(void*)
StreamingLevel::SetState(StreamingLevel::eState)
StreamingLevel::GetParentLevel() const
StreamingLevel::IsSubLevel() const
StreamingLevel::GetLevelResourceList()
StreamingLevel::AddLevelResource(NuFrameworkResourceHndl)
StreamingLevel::DoUnload(void*)
StreamingLevel::DoUnloadGSCResourceOnly(void*)
StreamingLevel::Activate()
StreamingLevel::SetRenderState(StreamingLevel::eRenderState)
StreamingLevel::GetFade(int) const
StreamingLevel::GetTopParentLevel() const
StreamingLevel::IsLoaded(StreamingLevel::eCheckChildren) const
StreamingLevel::IsLoading(StreamingLevel::eCheckChildren) const
StreamingLevel::ChildLevelBegin(eIterateLODs, eIterateChildren, eIterateMissions, eIterateLayers, eIterateLowPriorityLevels, eIterateImmediateChildrenOnly) const
StreamingLevel::ChildLevelEnd() const
StreamingLevel::PseudoActivate()
StreamingLevel::PseudoDeactivate()
StreamingLevel::Unload()
StreamingLevel::Deactivate(bool)
StreamingLevel::GetStateName(StreamingLevel::eState) const
StreamingLevel::GetRenderStateName(int) const
StreamingLevel::SetRenderState(int, StreamingLevel::eRenderState)
StreamingLevel::IsVisible() const
StreamingLevel::IsDeactivated() const
StreamingLevel::GetLevelResource() const
StreamingLevel::AddLODLevel(StreamingLevel&)
StreamingLevel::RemoveLODLevel(StreamingLevel&)
StreamingLevel::GetActiveLOD()
StreamingLevel::GetLODLevel()
StreamingLevel::GetRenderLOD(int)
StreamingLevel::AddChildLevels(ResourceDefinitionStreamingLevel&)
StreamingLevel::AddChildLevel(StreamingLevel&)
StreamingLevel::AddMission(StreamingLevel&)
StreamingLevel::AddLayer(StreamingLevel&)
StreamingLevel::AddLowPriorityLevel(StreamingLevel&)
StreamingLevel::OnPostPopulate()
StreamingLevel::RemoveChildLevel(StreamingLevel&)
StreamingLevel::RemoveMission(StreamingLevel&)
StreamingLevel::RemoveLayer(StreamingLevel&)
StreamingLevel::RemoveLowPriorityLevel(StreamingLevel&)
StreamingLevel::RemoveSubLevel(StreamingLevel&)
StreamingLevel::IsActivateRequested() const
StreamingLevel::IsActivating(StreamingLevel::eCheckChildren) const
StreamingLevel::HasChildrenActivating() const
StreamingLevel::HasChildrenLoading() const
StreamingLevel::CanBeDeactivated()
StreamingLevel::AbortIfLoading(bool, bool)
StreamingLevelList::Find(char const*, eIterateLODs, eIterateChildren, eIterateMissions, eIterateLayers, eIterateLowPriorityLevels, eIterateImmediateChildrenOnly) const
StreamingLevelList::AnyLoaded()
StreamingLevel::GridPos::GridPos(unsigned char, unsigned char)
StreamingLevel::GridPos::GridPos(StreamingLevel&)
StreamingLevel::GridPos::ExtractPos(char const*)
StreamingLevel::GridPos::GridPos(StreamingLevelArea&)
StreamingLevel::GridPos::IsValid()
StreamingLevel::LevelVector::LevelVector(int)
StreamingLevel::LevelVector::Contains(StreamingLevel&)
StreamingLevel::FindChildLevel(char const*)
StreamingLevel::HasChildLevels() const
StreamingLevel::AnyChildrenNotUnloaded() const
StreamingLevel::NeedsLoadRequesting() const
StreamingLevel::GetMyLOD() const
StreamingLevel::GetLayerLevel()
StreamingLevel::GetRequestedLOD()
StreamingLevel::GetKeepActivatedWithParentLOD()
StreamingLevel::IsActiveAtMultipleLODs()
StreamingLevel::IsLoadedAtAnyLOD()
StreamingLevel::IsActiveAtAnyLOD()
StreamingLevel::GetLevelConfig()
StreamingLevel::SetKeepLoadedWithParent(bool)
StreamingLevel::SetKeepActivatedWithParent(bool)
StreamingLevel::GetAutoGrid()
StreamingLevel::GetNoProcessGrid()
StreamingLevel::GetHighGrid()
StreamingLevel::IsDRCParent()
StreamingLevel::GetPriorityOld() const
StreamingLevel::GetPriority() const
StreamingLevel::SetFade(int, float)
StreamingLevel::GetAdjacentLevels(StreamingLevel::AdjacentLevels&)
StreamingLevel::IsRequiredLoadingScreen() const
StreamingLevel::SetLoadPOIContainer(StreamingLevel::LoadPOIContainer const&)
StreamingLevel::IsLODed()
StreamingLevel::HasULD()
StreamingLevel::AdjacentLevels::IsLoaded()
StreamingLevel::AdjacentLevels::RequestLoad()
StreamingLevelEventData::~StreamingLevelEventData()
GameUnloadRequestEventData::~GameUnloadRequestEventData()
StreamingLevelInfo::StreamingLevelInfo()
StreamingLevelInfo::Init()
StreamingLevelInfo::StreamingLevelInfo(ResourceDefinitionStreamingLevel&)
StreamingLevelInfo::StreamingLevelInfo(EdRegContext&)
StreamingLevelInfo::FullFilename(NuFixedStringT<(unsigned short)256>&) const
StreamingLevelInfo::FullFilenameWithoutExtension(NuFixedStringT<(unsigned short)256>&) const
StreamingLevelInfo::CommonFullFilename(NuFixedStringT<(unsigned short)256>&) const
StreamingLevelInfo::Directory(NuFixedStringT<(unsigned short)256>&) const
StreamingLevelDebugInfo::CheckBeforeLoad(int)
StreamingLevelConfigHelper::StreamingLevelConfigHelper()
StreamingLevelConfigHelper::GetManNextObject(ClassManager*, void*, void*)
StreamingLevelConfigHelper::GetManNumObjects(ClassManager*, void*)
StreamingLevelConfigHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
StreamingLevelConfigHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
StreamingLevelConfig::StreamingLevelConfig(LevelContainer&, EdRegContext&)
StreamingLevelConfigHelper::~StreamingLevelConfigHelper()
EdRefStreamingLevelConfig::~EdRefStreamingLevelConfig()
EdRefStreamingLevelConfig::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefStreamingLevelConfig::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ClassManagerAccessor<ResourceDefinitionManager>::GetFromCreate(ILevelContainer const&)
StreamingLevelAreaHelper::StreamingLevelAreaHelper()
StreamingLevelArea::StreamingLevelArea(EdRegContext&)
StreamingLevelArea::~StreamingLevelArea()
CSListHeader<StreamingLevelAreaBoundLevel>::Clear()
StreamingLevelAreaBoundLevelList::~StreamingLevelAreaBoundLevelList()
StreamingLevelArea::~StreamingLevelArea()
StreamingLevelArea::WithinHighLODActivateRadius(int, float&)
StreamingLevelArea::Inside(int)
StreamingLevelArea::SetName(char const*)
StreamingLevelArea::GetName() const
StreamingLevelArea::SetLedFile(short)
StreamingLevelArea::GetLedFile() const
StreamingLevelArea::SetPosition(VuVec const&)
StreamingLevelArea::GetPosition(VuVec&) const
StreamingLevelArea::GetTransform(VuMtx&) const
StreamingLevelArea::SetTransform(VuMtx const&)
StreamingLevelArea::Activate()
StreamingLevelArea::Deactivate()
StreamingLevelArea::IsActive() const
StreamingLevelAreaList::Find(char*)
StreamingLevelAreaList::Find(VuVec&, StackArray<StreamingLevelArea*, 16>&)
StreamingLevelAreaList::FixupBoundLevels(StreamingLevel&)
StreamingLevelAreaList::GetNextByClass(StreamingLevelArea*, EdClass*)
StreamingLevelAreaList::GetCountByClass(EdClass*)
StreamingLevelAreaHelper::~StreamingLevelAreaHelper()
CreateStreamingLevelAreaManager(LevelContainer&)
StreamingLevelBoxAreaHelper::StreamingLevelBoxAreaHelper()
StreamingLevelBoxAreaHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
StreamingLevelBoxAreaHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
StreamingLevelBoxAreaHelper::GetManNextObject(ClassManager*, void*, void*)
StreamingLevelBoxAreaHelper::GetManNumObjects(ClassManager*, void*)
StreamingLevelBoxArea::StreamingLevelBoxArea(EdRegContext&)
StreamingLevelBoxArea::GetClass() const
StreamingLevelBoxArea::DistanceToArea(VuVec const&)
StreamingLevelBoxArea::IsInside(VuVec const&) const
StreamingLevelBoxArea::GetSize(VuVec&) const
StreamingLevelBoxAreaHelper::~StreamingLevelBoxAreaHelper()
StreamingLevelBoxArea::~StreamingLevelBoxArea()
StreamingLevelBoxArea::~StreamingLevelBoxArea()
StreamingLevelBoxArea::GetTriggerArea() const
StreamingLevelBoxArea::GetTriggerArea()
StreamingLevelBoxAreaEdRef::~StreamingLevelBoxAreaEdRef()
StreamingLevelBoxAreaEdRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
StreamingLevelBoxAreaEdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ClassManagerAccessor<StreamingLevelAreaManager>::GetFromCreate(ILevelContainer const&)
StreamingLevelSplineArea::StreamingLevelSplineArea(EdRegContext&)
StreamingLevelSplineArea::GetClass() const
StreamingLevelSplineArea::GetSize(VuVec&) const
StreamingLevelSplineArea::IsInside(VuVec const&) const
StreamingLevelSplineArea::DistanceToArea(VuVec const&)
StreamingLevelSplineArea::GetHeight() const
StreamingLevelSplineAreaHelper::StreamingLevelSplineAreaHelper()
StreamingLevelSplineAreaHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
StreamingLevelSplineAreaHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
StreamingLevelSplineAreaHelper::GetManNextObject(ClassManager*, void*, void*)
StreamingLevelSplineAreaHelper::GetManNumObjects(ClassManager*, void*)
StreamingLevelSplineAreaHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
StreamingLevelSplineArea::~StreamingLevelSplineArea()
StreamingLevelSplineArea::~StreamingLevelSplineArea()
StreamingLevelSplineArea::GetTriggerArea() const
StreamingLevelSplineArea::GetTriggerArea()
StreamingLevelSplineAreaHelper::~StreamingLevelSplineAreaHelper()
StreamingLevelSplineAreaEdRef::~StreamingLevelSplineAreaEdRef()
StreamingLevelSplineAreaEdRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
StreamingLevelSplineAreaEdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
StreamingLevelAreaBoundLevel::StreamingLevelAreaBoundLevel(StreamingLevel*)
StreamingLevelAreaBoundLevelHelper::StreamingLevelAreaBoundLevelHelper()
StreamingLevelAreaBoundLevelHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
StreamingLevelAreaBoundLevelHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
StreamingLevelAreaBoundLevelHelper::GetNextObject(void*, void*)
StreamingLevelAreaBoundLevel::FixupLevel(StreamingLevel&)
BoundLevelEdRef::BoundLevelEdRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
BoundLevelEdRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
BoundLevelEdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
StreamingLevelAreaBoundLevelList::StreamingLevelAreaBoundLevelList()
StreamingLevelAreaBoundLevelList::FixupLevels(StreamingLevel&)
NuVector<StreamingLevelAreaBoundLevel*>::Reserve(unsigned int, bool)
StreamingLevelAreaBoundLevelList::RequestTopLOD()
StreamingLevelAreaBoundLevelList::RequestLowLODs()
StreamingLevelAreaBoundLevelList::ShowTopLOD(int)
StreamingLevelAreaBoundLevelList::ShowLowLODs(int)
StreamingLevelAreaBoundLevelList::CheckExclusions()
StreamingLevelAreaBoundLevelList::GetLoadedLevel()
StreamingLevelAreaBoundLevelList::RequestMissions()
StreamingLevelAreaBoundLevelList::ShowMissions(int)
StreamingLevelAreaBoundLevelList::Contains(StreamingLevel const&) const
StreamingLevelAreaBoundLevelList::ContainsAnyRelated(StreamingLevel&)
StreamingLevelAreaBoundLevelList::SetGridLevelFromBoundLevels(StreamingLevel::GridPos)
StreamingLevelAreaBoundLevelList::SetKeepLoadedWithParent(bool)
StreamingLevelAreaBoundLevelList::Remove(StreamingLevel const&)
StreamingLevelAreaBoundLevelHelper::~StreamingLevelAreaBoundLevelHelper()
BoundLevelEdRef::~BoundLevelEdRef()
StreamingLevelAreaManager::StreamingLevelAreaManager(LevelContainer&)
StreamingLevelAreaManager::RegisterProcessing()
StreamingLevelAreaManager::IsMaster()
StreamingLevelAreaManager::RegisterRendering()
StreamingLevelAreaManager::~StreamingLevelAreaManager()
StreamingLevelAreaManager::GetGridSizeX() const
StreamingLevelAreaManager::GetGridSizeZ() const
StreamingLevelAreaManager::GetLevelGrid(int, int) const
StreamingLevelAreaManager::~StreamingLevelAreaManager()
StreamingLevelAreaManager::EventNotify(Event&, NuEventData&)
StreamingLevelAreaManager::SetPOITransform(int, NuMatrixBase const&, bool, VuVec const*)
StreamingLevelAreaManager::SetPOICount(int)
StreamingLevelAreaManager::CheckLevelAreas(StreamingLevelAreaManager::eCheckLevelAreas)
StreamingLevelAreaManager::InitLevelGrid()
StreamingLevelAreaManager::MarkAlwaysResident()
StreamingLevelAreaManager::GetStreamingTopParentLevel()
StreamingLevelAreaManager::RequestAlwaysResident()
StreamingLevelAreaManager::IsSubLevelActivationComplete(NuMatrixBase*)
StreamingLevelAreaManager::IsAlwaysResidentInitComplete()
StreamingLevelAreaManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
StreamingLevelAreaManager::ProcessRequestedLevels()
StreamingLevelAreaManager::InUse()
StreamingLevelAreaManager::SmartStreamingUpdate(StreamingLevel*, StreamingLevelAreaManager*)
StreamingLevelAreaManager::ProcessLevelGrid()
StreamingLevelAreaManager::ProcessLevelGridVisibility()
StreamingLevelAreaManager::ProcessGlobalAreas()
StreamingLevelAreaManager::ProcessExclusions()
StreamingLevelAreaManager::GetPOICount()
StreamingLevelAreaManager::ResetSmartStreamingAfterTeleport(int)
StreamingLevelAreaManager::GetPOITransform(int)
StreamingLevelAreaManager::GetPOIVelocity(int)
StreamingLevelAreaManager::PosToGrid(VuVec&)
StreamingLevelAreaManager::GetLevelPosFast(StreamingLevel const&, VuVec&) const
StreamingLevelAreaManager::GetCurrentLocation(int)
StreamingLevelAreaManager::GridToPos(VuVec&, bool) const
StreamingLevelAreaManager::IntersectsCircle(VuVec&, float, VuVec&, float)
StreamingLevelAreaManager::HighGrid::Process()
StreamingLevelAreaManager::GetGlobalAreas() const
StreamingLevelAreaManager::GetGridCellLevel(VuVec const&, VuVec*)
StreamingLevelAreaManager::GetSubLevelsInRadius(StackArray<StreamingLevel*, 128>&, VuVec const&, float)
StreamingLevelAreaManager::SnapToGrid(VuVec&)
StreamingLevelAreaManager::SetPOITeleport()
StreamingLevelAreaManager::IsSubLevelLoadingComplete()
StreamingLevelAreaManager::ReactivateSubLevels()
StreamingLevelAreaManager::AddStreamingLevelToGrid(StreamingLevel&)
StreamingLevelAreaManager::RemoveStreamingLevelFromGrid(StreamingLevel&)
StreamingLevelAreaManager::GetUseLastPOIAreaIfNone()
StreamingLevelAreaManager::GetParentStreamingLevelAreaManager()
StreamingLevelAreaManager::GetPOIDescription(int)
StreamingLevelAreaManager::SetPOIDescription(int, char const*)
StreamingLevelAreaManager::HighGrid::HighGrid(StreamingLevelAreaManager&, int)
StreamingLevelAreaManager::HighGrid::~HighGrid()
StreamingLevelAreaManager::HighGrid::GetLevelGrid(int, int)
StreamingLevelAreaManager::HighGrid::Init()
StreamingLevelAreaManager::HighGrid::PosToGrid(VuVec&)
StreamingLevelAreaManager::HighGrid::GridToPos(VuVec&)
StreamingLevelAreaManager::HighGrid::GetGridCellLevel(VuVec const&, VuVec*)
StreamingLevelAreaManager::GetManagerName() const
BackgroundLevelManager::BackgroundLevelManager()
BackgroundLevelManager::Get()
BackgroundLevelManager::SetBackgroundLevels(StreamingLevel::LevelVector&)
BackgroundLevelManager::UnloadAll()
BackgroundLevelManager::SetPaused(bool)
CurrentLevelsManager::CurrentLevelsManager()
CurrentLevelsManager::Get()
CurrentLevelsManager::ProcessRequestedLevels(CurrentLevelsManager::eForceProcessing)
CurrentLevelsManager::ProcessLevelUnloads()
CurrentLevelsManager::ProcessLevelLoads()
CurrentLevelsManager::ProcessVisibility()
CurrentLevelsManager::ClearRequestedLevels(bool)
CurrentLevelsManager::LoadLevel(StreamingLevel&)
CurrentLevelsManager::AddToRequestedLevels(StreamingLevel&)
CurrentLevelsManager::ExcludeLevel(StreamingLevel&)
CurrentLevelsManager::RecordLoadedLevel(StreamingLevel&)
CurrentLevelsManager::AllRequestedLevelsLoaded(CurrentLevelsManager::eRequestedLevelCheckType)
CurrentLevelsManager::LoadLowPriorityLevels(StreamingLevel&)
CurrentLevelsManager::IsRequested(StreamingLevel&)
CurrentLevelsManager::ClearLevelVisibility()
ResourceDefinitionManager::ResourceDefinitionManager(LevelContainer&)
ResourceDefinitionManager::~ResourceDefinitionManager()
ResourceDefinitionManager::~ResourceDefinitionManager()
ResourceDefinitionManager::CreateHelpers()
ResourceDefinitionManager::GetNumClasses()
ResourceDefinitionManager::GetClass(int)
ResourceDefinitionManager::VisitResources(ResourceDefinitionAssetVisitor&)
ResourceDefinitionManager::Enable(bool, char const*)
ResourceDefinitionManager::BuildResourceHeader(NuResourceHeader&)
ResourceDefinitionManager::FindSet(char*)
ResourceDefinitionManager::AddSet(char*, EdRegContext&)
ResourceDefinitionManager::EventNotify(Event&, NuEventData&)
ResourceDefinitionManager::SetStreamingLevelConfig(StreamingLevelConfig&)
ResourceDefinitionManager::GetManagerName() const
ResDefLEDLoadVisitor::~ResDefLEDLoadVisitor()
ResDefLEDLoadVisitor::VisitDefinitionLED(ResourceDefinitionLED&)
ResDefLEDLoadVisitor::VisitDefinitionGSC(ResourceDefinitionGSC&)
ResourceDefinitionAssetVisitor::VisitDefinitionExternalLevel(ResourceDefinitionExternalLevel&)
ResourceDefinition::ResourceDefinition()
CreateResourceDefinitionManager(LevelContainer&)
ResourceDefinitionHelper::ResourceDefinitionHelper()
ResourceDefinitionHelper::~ResourceDefinitionHelper()
ResourceDefinitionHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionSet::ResourceDefinitionSet(short)
ResourceDefinitionSet::VisitResources(ResourceDefinitionAssetVisitor&)
ResourceDefinitionSet::FindResource(char*)
ResourceDefinitionSet::AddResource(ResourceDefinitionAsset&)
ResourceDefinitionSetHelper::ResourceDefinitionSetHelper()
ResourceDefinitionSetHelper::RegisterDefinitionClass(EdClass&)
ResourceDefinitionSetHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionSetHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionSetHelper::GetManNextObject(ClassManager*, void*, void*)
ResourceDefinitionSetHelper::GetManNumObjects(ClassManager*, void*)
ResourceDefinitionSetHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
ResourceDefinitionSetHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
ResourceDefinitionSetHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
ResourceDefinitionSetHelper::RegisterStreamingLevelComponents()
ResourceDefinitionSetHelper::~ResourceDefinitionSetHelper()
ResourceDefinitionSetEdRef::~ResourceDefinitionSetEdRef()
ResourceDefinitionSetEdRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ResourceDefinitionSetEdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ResourceDefinitionAsset::ResourceDefinitionAsset(EdClass&)
ResourceDefinitionAsset::SetFilename(char const*)
ResourceDefinitionAsset::PromptForFile(ResourceDefinitionAsset&, char const*, char const*, EDREG_FLAGS)
ResourceDefinitionAsset::GetFullFilePath(NuFixedStringT<(unsigned short)256>&)
ResourceDefinitionAsset::BuildResourceHeader(NuResourceHeader&)
ResourceDefinitionAssetHelper::ResourceDefinitionAssetHelper()
ResourceDefinitionAssetHelper::GetParentObject(ClassObject const&)
ResourceDefinitionAssetHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionAsset::~ResourceDefinitionAsset()
ResourceDefinitionAsset::~ResourceDefinitionAsset()
ResourceDefinitionAssetHelper::~ResourceDefinitionAssetHelper()
ResourceDefinitionAssetHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionAssetEdRef::~ResourceDefinitionAssetEdRef()
ResourceDefinitionAssetEdRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ResourceDefinitionAssetEdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ResourceDefinitionGSC::ResourceDefinitionGSC(EdClass&)
ResourceDefinitionGSC::AcceptVisitor(ResourceDefinitionAssetVisitor&)
ResourceDefinitionGSCHelper::ResourceDefinitionGSCHelper()
ResourceDefinitionGSCHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionGSCHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionGSCHelper::GetParentObject(ClassObject const&)
ResourceDefinitionGSC::~ResourceDefinitionGSC()
ResourceDefinitionGSC::GetExtension() const
ResourceDefinitionGSC::GetNuResourceType() const
ResourceDefinitionGSCHelper::~ResourceDefinitionGSCHelper()
ResourceDefinitionLED::ResourceDefinitionLED(EdClass&)
ResourceDefinitionLED::AcceptVisitor(ResourceDefinitionAssetVisitor&)
ResourceDefinitionLED::MakeFileFilter(EdFileDescVector&)
ResourceDefinitionLEDHelper::ResourceDefinitionLEDHelper()
ResourceDefinitionLEDHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionLEDHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionLEDHelper::GetParentObject(ClassObject const&)
ResourceDefinitionLED::~ResourceDefinitionLED()
ResourceDefinitionLED::GetExtension() const
ResourceDefinitionLED::GetNuResourceType() const
ResourceDefinitionLEDHelper::~ResourceDefinitionLEDHelper()
EdRefLEDSubFile::~EdRefLEDSubFile()
EdRefLEDSubFile::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefLEDSubFile::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ResourceDefinitionStreamingLevel::ResourceDefinitionStreamingLevel(EdRegContext&, ResourceDefinitionStreamingLevel::eType)
ResourceDefinitionStreamingLevel::AcceptVisitor(ResourceDefinitionAssetVisitor&)
ResourceDefinitionStreamingLevelHelper::ResourceDefinitionStreamingLevelHelper()
ResourceDefinitionStreamingLevelHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionStreamingLevelHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionStreamingLevelHelper::GetParentObject(ClassObject const&)
ResourceDefinitionStreamingLevelHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
ResDefStreamingLevelCompArray::TypeFromComponent(EdComponent const&) const
ResourceDefinitionStreamingLevelHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
ResourceDefinitionStreamingLevelHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
ResDefStreamingLevelCompArray::ComponentFromType(ResourceDefinitionStreamingLevel::eType)
ResourceDefinitionStreamingLevel::FullFilename(NuFixedStringT<(unsigned short)256>&)
ResourceDefinitionStreamingLevel::CommonFullFilename(NuFixedStringT<(unsigned short)256>&)
ResourceDefinitionStreamingLevel::GetFullFilePath(NuFixedStringT<(unsigned short)256>&)
ResourceDefinitionStreamingLevel::BuildResourceHeader(NuResourceHeader&)
ResourceDefinitionStreamingLevel::~ResourceDefinitionStreamingLevel()
ResourceDefinitionStreamingLevel::~ResourceDefinitionStreamingLevel()
ResourceDefinitionStreamingLevel::GetExtension() const
ResourceDefinitionStreamingLevel::GetNuResourceType() const
ResourceDefinitionStreamingLevelHelper::~ResourceDefinitionStreamingLevelHelper()
EdRefResDefStreamingLevel::~EdRefResDefStreamingLevel()
EdRefResDefStreamingLevel::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefResDefStreamingLevel::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ResourceDefinitionExternalLevel::ResourceDefinitionExternalLevel(EdClass&)
ResourceDefinitionExternalLevel::AcceptVisitor(ResourceDefinitionAssetVisitor&)
ResourceDefinitionExternalLevel::LoadExternalLevel(StreamingLevel&)
ResourceDefinitionExternalLevel::RequestUnloadExternalLevel()
ResourceDefinitionExternalLevelHelper::ResourceDefinitionExternalLevelHelper()
ResourceDefinitionExternalLevelHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionExternalLevelHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ResourceDefinitionExternalLevelHelper::GetParentObject(ClassObject const&)
ResourceDefinitionExternalLevel::~ResourceDefinitionExternalLevel()
ResourceDefinitionExternalLevel::GetExtension() const
ResourceDefinitionExternalLevel::GetNuResourceType() const
ResourceDefinitionExternalLevelHelper::~ResourceDefinitionExternalLevelHelper()
SplashScreenSequence::SplashScreenSequence()
SplashScreenSequence::IsPlaying()
SplashScreenSequence::Finished()
SplashScreenSequence::IsAnyActive()
SplashScreenSequence::GetSplash(int)
SplashScreenSequence::NonSplashImposePresent()
SplashScreenSequence::OnUpdate()
SplashScreenSequence::CheckSkip()
SplashScreenSequence::HasPlayedAllRepititions()
SplashScreenSequence::FinishSequence()
SplashScreenSequence::RePlay()
SplashScreenSequence::ShowNextSplash()
SplashScreenSequence::Skip()
SplashScreenSequence::LastScreen()
SplashScreenSequence::AddSplashImpose()
SplashScreenSequence::RemoveSplashImpose()
SplashScreenSequence::Play()
SplashScreenSequence::LoadSplashSequence()
SplashScreenSequence::AllSplashScreensReady()
SplashScreenSequence::StaticLoadSplashSequence(void*)
SplashScreenSequence::LoadSplashSequenceOnCurrentThread()
SplashScreenSequence::UnloadImages()
SplashScreenSequence::EventNotify(Event&, NuEventData&)
SplashScreenSequence::~SplashScreenSequence()
SplashScreenSequence::~SplashScreenSequence()
NuVarArray<SplashScreenInfo*>::AdjustSize(unsigned int)
GameSplashScreens::GameSplashScreens()
GameSplashScreens::InitShowControlsScreen()
GameSplashScreens::InitDemoAdvertScreen()
GameSplashScreens::SetAdvertiseInteractive(bool)
GameSplashScreens::InitRatingScreen()
GameSplashScreens::InitLegalScreen()
GameSplashScreens::InitLocalisedScreens()
GameSplashScreens::EventNotify(Event&, NuEventData&)
GameSplashScreens::IncludeShowControlsScreen()
GameSplashScreens::~GameSplashScreens()
GameSplashScreens::GetMaxLegalScreens() const
GameSplashScreens::GetAdvertFilePath(DynamicString&)
GameSplashScreens::GetLegalScreenFilePath(DynamicString&)
SplashScreenInfo::SplashScreenInfo(float, float, float, char*, VuVec const&, char const*)
SplashScreenInfo::DeleteImage()
SplashScreenInfo::ReadyToDisplay() const
SplashScreenInfo::LoadImage()
SplashScreenInfo::~SplashScreenInfo()
FrameworkScreenGrabThing::FrameworkScreenGrabThing()
FrameworkScreenGrabThing::GetRenderTargetID()
FrameworkScreenGrabThing::SetGrabMaterial(NuSmartPtr<NuMtl, true> const&)
FrameworkScreenGrabThing::SetGrabRenderTarget(NuSmartPtr<NuTexture, true>&)
FrameworkScreenGrabThing::Init()
NothingToGrab()
FrameworkScreenGrabThing::RequestScreenGrab(bool, void (*)(void*), void*)
FrameworkScreenGrabThing::StopRendering()
FrameworkScreenGrabThing::ClearGrabState()
FrameworkScreenGrabThing::GrabScreen()
FrameworkScreenGrabThing::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
FrameworkScreenGrabThing::InformListenersGrabWasDone()
FrameworkScreenGrabThing::RenderScreenGrab()
FrameworkScreenGrabThing::GetGrabState()
FrameworkScreenGrabThing::RenderFullScreenQuad(NuSmartPtr<NuMtl, true> const&, unsigned int)
FrameworkScreenGrabThing::IsProcessingScreenGrabRequest()
FrameworkScreenGrabThing::HasGrabbed()
FrameworkScreenGrabThing::StartRendering()
GrabCallback::Call()
FrameworkScreenGrabThing::~FrameworkScreenGrabThing()
FrameworkScreenGrabThing::GetManagerName() const
AboutToGrabEventData::~AboutToGrabEventData()
APIFlowScreen::GetName(APIFlowScreen::Tag)
FrameworkImpose::FrameworkImpose()
FrameworkImpose::IsImposeOrPending()
FrameworkImpose::ImposeFreezesGame()
FrameworkImpose::Init()
FrameworkImpose::ReportError(char const*, FrameworkImposeMessageType, bool)
FrameworkImpose::AddImpose(ImposedState&)
FrameworkImpose::DisplayMessage(char const*, FrameworkImposeMessageType, bool, bool, int, unsigned char, char const*, char const*)
FrameworkImpose::DisplayHighestPriorityState()
FrameworkImpose::HandleFreezeAudio(ImposedState*)
FrameworkImpose::StopChroma()
FrameworkImpose::RemoveImpose(ImposedState&, bool)
FrameworkImpose::HandleResumeAudio(ImposedState*)
FrameworkImpose::UnFreezeGame()
FrameworkImpose::GetHighestPriorityState()
FrameworkImpose::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
FrameworkImpose::FreezeGame()
FrameworkImpose::StopAllSoundAndMusic()
FrameworkImpose::StopCutsceneAudio(float)
FrameworkImpose::ResumeAllSoundAndMusic()
FrameworkImpose::ResumeCutsceneAudio()
FrameworkImpose::ResumeChroma()
FrameworkImpose::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
FrameworkImpose::SetResetGameOptions(bool)
FrameworkImpose::ShouldResetGameOptions()
FrameworkImpose::HandleDrawSafeArea()
FrameworkImpose::DrawSafeArea()
FrameworkImpose::SafeRemove(ImposedState*)
FrameworkImpose::IsMessageTypePresent(FrameworkImposeMessageType)
FrameworkImpose::RemoveMessageType(FrameworkImposeMessageType)
FrameworkImpose::RemoveMessageTypeLowerThan(FrameworkImposeMessageType)
FrameworkImpose::IsImposeDisablingNormalGUI()
FrameworkImpose::IsErrorImpose()
FrameworkImpose::SetReportProfileChanged(bool)
FrameworkImpose::IsDisplaying()
FrameworkImpose::EventNotify(Event&, NuEventData&)
FrameworkImpose::RemoveAllErrors()
FrameworkImpose::SetDrawSafeArea(bool)
ImposeStateChangeEventData::ImposeStateChangeEventData(TypeOfImposeEvent, ImposedState*)
FrameworkImpose::~FrameworkImpose()
FrameworkImpose::~FrameworkImpose()
FrameworkImpose::GetManagerName() const
ImposeStateChangeEventData::~ImposeStateChangeEventData()
ImposedState::ImposedState(FrameworkImposeMessageType)
ImposedState::~ImposedState()
ImposedState::~ImposedState()
ImposedState::Process(ImposeStateEvent)
ImposedState::SetCompletionEvent(Event&, NuEventData*)
ImposedState::GetSpecificPlayer() const
ImposedState::SetSpecificPlayer(int)
ImposedState::IsValidControllerForPlayer(int) const
ImposedState::IsAnyInputOK() const
ImposedState::SetAnyInputOK(unsigned char)
ImposedState::IsErrorState() const
ImposedState::SetIsErrorState(unsigned char)
ImposedState::DisableNormalGUIDuringImpose() const
ImposedState::CanFreezeGame() const
ImposedState::SetCanFreezeGame(unsigned char)
ImposedState::FreezesAllAudio() const
ImposedState::SetFreezesAllAudio(unsigned char)
ImposedState::AllowScreenGrab() const
ImposedState::SetAllowScreenGrab(unsigned char)
ImposedState::SetMusicMasterFaderScale(float)
ImposedState::GetMusicMasterFaderScale()
ImposedState::BlocksPadInput() const
ImposedState::ExpectsInput()
FrameworkImposePadChecker::FrameworkImposePadChecker()
FrameworkImposePadChecker::HandlePadRemovalMessageDismissed()
FrameworkImposePadChecker::HandlePadReconnect()
FrameworkImposePadChecker::IsPlayersPadConnected(int)
FrameworkImposePadChecker::HandlePendingMessages()
FrameworkImposePadChecker::AllowedToReportPadRemoval()
FrameworkImposePadChecker::ShowMessage()
FrameworkImposePadChecker::OnProcess()
FrameworkImposePadChecker::HandlePadStatusChanged()
FrameworkImposePadChecker::GetLastRemovedPadsPlayer()
FrameworkImposePadChecker::ForceRemoveImposeMessage()
FrameworkImposePadChecker::EventNotify(Event&, NuEventData&)
FrameworkImposePadChecker::~FrameworkImposePadChecker()
FrameworkImposeCommonErrors::FrameworkImposeCommonErrors()
FrameworkImposeCommonErrors::QueryStreamingInstallProgress()
FrameworkImposeCommonErrors::GetStreamingInstallProgress()
ImposedStateMessage::~ImposedStateMessage()
ImposeInstallProgress::~ImposeInstallProgress()
ImposeInstallProgress::Process(ImposeStateEvent)
NuFixedStringT<(unsigned short)2048>::Format(char const*, ...)
RumbleManager::RumbleManager()
RumbleManager::~RumbleManager()
RumbleManager::AddRumble(NUPAD const&, float, float, float, float)
RumbleManager::Stop(NuInputDevice*)
RumbleManager::StopAll()
RumbleManager::Update(float)
RumbleManager::EnableRumble(bool)
MenuFlow2::MenuFlow2()
NuVector<FlowPageHandler2*>::Reserve(unsigned int, bool)
NuVector<GenericPageHandlerImplementation*>::Reserve(unsigned int, bool)
MenuFlow2::Restart()
MenuFlow2::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MenuFlow2::AddMenuImpose()
MenuFlow2::SetupNextPage()
MenuFlow2::ProceedToNextPage()
MenuFlow2::InCriticalSaveMenu()
MenuFlow2::IsSaveMenu(APIFlowScreen::Tag)
MenuFlow2::InSaveMenu()
MenuFlow2::InOnlineMenu()
MenuFlow2::EventNotify(Event&, NuEventData&)
MenuFlow2::SetNextPage(APIFlowScreen::Tag)
MenuFlow2::RequestImposePauseGame()
MenuFlow2::ResolvingCorruptSaveMidGame()
MenuFlow2::SetResolvingCorruptSaveMidGame(bool)
MenuFlow2::Init()
MenuFlow2::ProceedToGameplay()
MenuFlow2::SetResolvingStorageDeviceChanged(bool)
MenuFlow2::ContinueWithoutSaving()
MenuFlow2::HandleFades(FlowPageHandler2*, APIFlowScreen::Tag)
MenuFlow2::GetCurrentPageTag()
MenuFlow2::HandlePauseGame(APIFlowScreen::Tag)
MenuFlow2::GetCurrentPageHandler()
MenuFlow2::SetPreviousPageTag(APIFlowScreen::Tag)
MenuFlow2::GetFlowReason()
MenuFlow2::SetFlowReason(FlowReason)
MenuFlow2::GetSaveCoreActionType()
MenuFlow2::BackupPage()
MenuFlow2::GetBackOutOfSaveGameIOFlowTag()
MenuFlow2::QuickMenus() const
MenuFlow2::GetScreenImplementation(APIFlowScreen::Tag)
MenuFlow2::ResolvingStorageDeviceChanged()
MenuFlow2::RemoveMenuImpose()
MenuFlow2::ShouldPauseGame(APIFlowScreen::Tag)
MenuFlow2::RegisterCallbacks()
MenuFlow2::SetLeavingFrontend(unsigned char)
MenuFlow2::IsLeavingFrontend()
MenuFlow2::GetUsePrimaryPadOnly() const
MenuFlow2::OnAreaDump()
MenuFlowEventData::MenuFlowEventData(APIFlowScreen::Tag)
MenuFlow2::~MenuFlow2()
MenuFlow2::GetManagerName() const
MenuFlowEventData::~MenuFlowEventData()
ImposedStateMessage::ImposedStateMessage(FrameworkImposeMessageType, char const*, bool, bool, int, char const*, char const*)
ImposedStateMessage::ExpectsInput()
ImposedStateMessage::Process(ImposeStateEvent)
FrameworkImposeMessageScreen::ShowImpose(char const*, bool, bool, char const*, char const*)
FrameworkImposeMessageScreen::Remove()
ImposedStateMessage::SetText(char const*)
FrameworkImposeMessageScreen::SetGuiText(char const*)
ImposedStateMessage::ProcessInput(eGUI2Event, GUI2EventData*)
ImposedStateMessage::Dismissed()
FrameworkImposeMessageScreen::AnimateOff()
ImposedStateMessage::DismissMessage()
ImposedStateMessage::MessageAppeared() const
ImposedStateMessage::SetDismissEvent(Event&, NuEventData*)
FrameworkImposeMessageScreen::FrameworkImposeMessageScreen()
FrameworkImposeMessageScreen::Init()
FrameworkImposeMessageScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
FrameworkImposeMessageScreen::AnimateOn()
FrameworkImposeMessageScreen::ProcessAnims()
ImposedStateMessage::~ImposedStateMessage()
FrameworkImposeMessageScreen::~FrameworkImposeMessageScreen()
GenericPageHandlerImplementation::GenericPageHandlerImplementation()
GenericPageHandlerImplementation::SetPreviousPageTag(APIFlowScreen::Tag)
GenericPageHandlerImplementation::GetPreviousPageTag() const
GenericPageHandlerImplementation::SetMessage(char const*, GenericPage::MessageStyle, GenericPage::ShowPrompts, int, char const**)
GenericPageHandlerImplementation::BackButtonPressed()
GenericPageHandlerImplementation::ViewedOverFadedBackground(APIFlowScreen::Tag)
GenericPageHandlerImplementation::AboutToPlay()
GenericPageHandlerImplementation::OnExit()
GenericPageHandlerImplementation::MenuSelection(int)
NuFixedStringT<(unsigned short)512>::~NuFixedStringT()
GenericPageHandler::GenericPageHandler()
GenericPageHandler::ResetPage()
GenericPageHandler::HideAll()
GenericPageHandler::Played()
GenericPageHandler::ShowMessage()
GenericPageHandler::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
GenericPageHandler::GetPreviousPageTag() const
GenericPageHandler::SetPreviousPageTag(APIFlowScreen::Tag)
GenericPageHandler::SetMenus(GenericPage::MessageStyle, int, char const**)
GenericPageHandler::GetMenu()
GenericPageHandler::GetMenuEntry(unsigned int)
GenericPageHandler::GetText()
GenericPageHandler::SetMessage(char const*, GenericPage::MessageStyle, GenericPage::ShowPrompts, int, char const**)
GenericPageHandler::Init()
GenericPageHandler::ViewedOverFadedBackground(APIFlowScreen::Tag)
GenericPageHandler::SetCurrentImplementation(GenericPageHandlerImplementation*)
GenericPageHandler::GetCurrentImplementation()
GenericPageHandler::GetMessageStyle()
GenericPageHandler::GetStaticMessageBuffer()
GenericPageHandler::~GenericPageHandler()
AnimatingSaveIconScreen::AnimatingSaveIconScreen()
AnimatingSaveIconScreen::Init()
AnimatingSaveIconScreen::SetIconPosFromAspectRatio()
AnimatingSaveIconScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
AnimatingSaveIconScreen::AnimateIcon()
AnimatingSaveIconScreen::DefaultTransformIcon()
AnimatingSaveIconScreen::RotateAndScaleIcon()
AnimatingSaveIconScreen::GetSaveIconStartPos() const
AnimatingSaveIconScreen::GetSaveIconStartPos()
AnimatingSaveIconScreen::GetSaveIconStartScale()
AnimatingSaveIconScreen::ForceTransformUpdate()
AnimatingSaveIconScreen::GetAnimSpeed() const
AnimatingSaveIconScreen::SetAnimSpeed(float)
AnimatingSaveIconScreen::SetAnimateMode(AnimatingSaveIconScreen::eAnimateMode)
AnimatingSaveIconScreen::OnUpdate(float)
AnimatingSaveIconScreen::IsVisible()
AnimatingSaveIconScreen::HideInternal()
AnimatingSaveIconScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to AnimatingSaveIconScreen::EventNotify(Event&, NuEventData&)
AnimatingSaveIconScreen::Show()
AnimatingSaveIconScreen::HideShortly()
AnimatingSaveIconScreen::Hide(float)
AnimatingSaveIconScreen::~AnimatingSaveIconScreen()
AnimatingSaveIconScreen::~AnimatingSaveIconScreen()
non-virtual thunk to AnimatingSaveIconScreen::~AnimatingSaveIconScreen()
non-virtual thunk to AnimatingSaveIconScreen::~AnimatingSaveIconScreen()
AutosaveWarningScreen::AutosaveWarningScreen()
AutosaveWarningScreen::AllowBackupAutosaveWarning()
AutosaveWarningScreen::PrepAutosaveMessage()
AutosaveWarningScreen::AboutToShow()
AutosaveWarningScreen::SetNextScreenState()
AutosaveWarningScreen::UpdateStillInstallingMessage()
AutosaveWarningScreen::SetAutoSaveExampleIconVisible(int)
AutosaveWarningScreen::BackButtonPressed()
AutosaveWarningScreen::Init()
AutosaveWarningScreen::GetText()
AutosaveWarningScreen::GetMenu()
AutosaveWarningScreen::ShowAutosaveIcon()
AutosaveWarningScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
AutosaveWarningScreen::MenuSelection(int)
AutosaveWarningScreen::OnProcess()
AutosaveWarningScreen::DismissAutoSaveWarning()
AutosaveWarningScreen::EventNotify(Event&, NuEventData&)
AutosaveWarningScreen::Reset()
non-virtual thunk to AutosaveWarningScreen::EventNotify(Event&, NuEventData&)
AutosaveWarningScreen::GetNeedsToBeFullyInstalled()
NeedsToBeFullyInstalledEventData::NeedsToBeFullyInstalledEventData()
AutosaveWarningScreen::~AutosaveWarningScreen()
AutosaveWarningScreen::~AutosaveWarningScreen()
FlowPageHandler2::ViewedOverFadedBackground(APIFlowScreen::Tag)
non-virtual thunk to AutosaveWarningScreen::~AutosaveWarningScreen()
non-virtual thunk to AutosaveWarningScreen::~AutosaveWarningScreen()
NeedsToBeFullyInstalledEventData::~NeedsToBeFullyInstalledEventData()
LedGuiFade::LedGuiFade()
LedGuiFade::SendFinishedFadingEvent()
LedGuiFade::BeginFadingPolyToVisible()
LedGuiFade::SetFadeState(LedGuiFade::FadeState)
LedGuiFade::BeginFadingPolyToTransparent()
FadeScreen::ShowAPIFadePage()
LedGuiFade::Fading() const
LedGuiFade::Init(char const*)
LedGuiFade::Process()
LedGuiFade::GetFadeState() const
LedGuiFade::IsValid()
LedGuiFade::ResetFade()
FadeScreen::FadeScreen()
FadeScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
FadeScreen::Init()
FadeScreen::SetAllBlackPolyVisible(int)
FadeScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to FadeScreen::EventNotify(Event&, NuEventData&)
LedGuiFadingEventData::LedGuiFadingEventData(LedGuiFade*)
FadeScreen::~FadeScreen()
FadeScreen::~FadeScreen()
non-virtual thunk to FadeScreen::~FadeScreen()
non-virtual thunk to FadeScreen::~FadeScreen()
LedGuiFadingEventData::~LedGuiFadingEventData()
LanguageSelectScreen::LanguageSelectScreen()
LanguageSelectScreen::Init()
IndexOfLanguage(NuLanguage)
LanguageSelectScreen::AboutToShow(GUI2EventData*)
LanguageSelectScreen::SelectLanguage()
LanguageSelectScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
LanguageSelectScreen::GetMenu()
LanguageChosenEventData::LanguageChosenEventData(NuLanguage)
LanguageSelectScreen::~LanguageSelectScreen()
LanguageChosenEventData::~LanguageChosenEventData()
LevelSelectScreen::LevelSelectScreen()
LevelSelectScreen::Init(GUI2Object*)
LevelSelectScreen::CountLevelNames()
LevelSelectScreen::AboutToShow()
LevelSelectScreen::MenuSelect()
LevelSelectScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
LevelSelectScreen::OnGetLevelSelectEntryCount(GUI2Object*, eGUI2Event, GUI2EventData*)
LevelSelectScreen::OnGetLevelSelectEntries(GUI2Object*, eGUI2Event, GUI2EventData*)
LevelSelectScreen::RegisterCallbacks()
LevelSelectScreen::~LevelSelectScreen()
LevelSelectEventData::~LevelSelectEventData()
MainMenuScreen::MainMenuScreen()
MainMenuScreen::SetupEntry(eMainMenuEntry, char const*)
MainMenuScreen::Init(GUI2Object*)
MainMenuScreen::RemoveMenuEntries()
MainMenuScreen::SetLanguageSelectVisibility()
MainMenuScreen::AboutToShow()
MainMenuScreen::SetMenuVisible(int)
MainMenuScreen::OnEventShow()
MainMenuScreen::SetMainMenuEntriesFromOverride(bool)
MainMenuScreen::FreePlay()
MainMenuScreen::NewGame()
MainMenuScreen::ViewTrailer()
MainMenuScreen::LoadGame()
MainMenuScreen::GoToOnlineMenu()
MainMenuScreen::OnlineGame()
MainMenuScreen::Options()
MainMenuScreen::QuitGame()
MainMenuScreen::Langauge()
MainMenuScreen::LevelSelect()
MainMenuScreen::SwitchProfile()
MainMenuScreen::Marketplace()
MainMenuScreen::ShowControls()
MainMenuScreen::MenuSelect()
MainMenuScreen::MenuBack()
MainMenuScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to MainMenuScreen::EventNotify(Event&, NuEventData&)
MainMenuScreen::OnProcess(float)
MainMenuScreen::InactivityTimeout(float)
MainMenuScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
MainMenuScreen::SetMainMenuEntriesOverride(NuVarArray<eMainMenuEntry>&, bool)
MainMenuScreen::SetMainMenuEntriesOverride(eMainMenuEntry*, bool)
MainMenuScreen::GetMenu()
MainMenuScreen::GetMenuEntry(eMainMenuEntry)
MainMenuScreen::SetTrailerMenuVisibility(bool)
MainMenuScreen::GetAllowMenuBack() const
MainMenuScreen::SetAllowMenuBack(bool)
MainMenuScreen::~MainMenuScreen()
MainMenuScreen::~MainMenuScreen()
non-virtual thunk to MainMenuScreen::~MainMenuScreen()
non-virtual thunk to MainMenuScreen::~MainMenuScreen()
NuVarArray<eMainMenuEntry>::AdjustSize(unsigned int)
FrontendViewedOptions::FrontendViewedOptions()
OptionsScreen::OptionsScreen()
OptionsScreen::GetMenu()
OptionsScreen::Init(GUI2Object*)
OptionsScreen::SetupEntry(eOptionsScreenMenuEntry, char const*)
OptionsScreen::AboutToShow()
OptionsScreen::Show()
OptionsScreen::UpdatePage()
OptionsScreen::MenuSelect()
OptionsScreen::ToggleMusic()
OptionsScreen::ToggleSubtitles()
OptionsScreen::Credits()
OptionsScreen::ShowControls()
OptionsScreen::MenuAdjust(OptionsScreen::eDirection)
OptionsScreen::AdjustVolume(OptionsScreen::eDirection)
OptionsScreen::GetGameVolume()
OptionsScreen::SetPrompts(GUI2Object*)
OptionsScreen::MenuBack()
OptionsScreen::GetGameMusicOn()
OptionsScreen::GetGameSubtitlesOn()
OptionsScreen::GetGameSafeZone()
OptionsScreen::UpdateMusicText()
OptionsScreen::UpdateSubtitlesText()
OptionsScreen::UpdateVolumeText()
OptionsScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to OptionsScreen::EventNotify(Event&, NuEventData&)
OptionsScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
OptionsEventData::OptionsEventData()
OptionsScreen::~OptionsScreen()
OptionsScreen::~OptionsScreen()
non-virtual thunk to OptionsScreen::~OptionsScreen()
non-virtual thunk to OptionsScreen::~OptionsScreen()
OptionsEventData::~OptionsEventData()
PressStartScreen::PressStartScreen()
PressStartScreen::Init(GUI2Object*)
PressStartScreen::SetInvisibleTime(float)
PressStartScreen::SetTextAlpha()
PressStartScreen::FadeUp()
PressStartScreen::UpdateAlpha(float)
PressStartScreen::SetListeningForStartPressed(unsigned char)
PressStartScreen::AboutToPlay()
PressStartScreen::OnUpdate(float)
PressStartScreen::OnPlayEvent()
PressStartScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
PressStartScreen::~PressStartScreen()
PromptsScreen::PromptsScreen()
PromptsScreen::Init()
PromptsScreen::Show(int)
PromptsScreen::SetPromptVisibility()
PromptsScreen::AnyVisible() const
PromptsScreen::SelectVisible() const
PromptsScreen::BackVisible() const
PromptsScreen::OtherVisible() const
PromptsScreen::ContinueVisible() const
PromptsScreen::AdjustVisible() const
PromptsScreen::SetOtherPromptText(char*)
PromptsScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
PromptsScreen::~PromptsScreen()
SaveSlotsScreen::SaveSlotsScreen()
SaveSlotsScreen::SetTitle()
SaveSlotsScreen::Init()
SaveSlotsScreen::OnEventAboutToShow()
SaveSlotsScreen::FillInSlotText(GUI2Object*, int)
SaveSlotsScreen::OnEventShow()
SaveSlotsScreen::SetCurrentMenu(GUI2Menu*, bool)
SaveSlotsScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to SaveSlotsScreen::EventNotify(Event&, NuEventData&)
SaveSlotsScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
SaveSlotsScreen::OnSaveSlotsMenuEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
SaveSlotsScreen::OnOptionsMenuEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
ToSimpleHours(char const*&, unsigned int&)
SaveSlotsScreen::BackPressed()
SaveSlotsScreen::OnSlotSelect(int)
SaveSlotsScreen::~SaveSlotsScreen()
SaveSlotsScreen::~SaveSlotsScreen()
SaveSlotsScreen::ViewedOverFadedBackground(APIFlowScreen::Tag)
non-virtual thunk to SaveSlotsScreen::~SaveSlotsScreen()
non-virtual thunk to SaveSlotsScreen::~SaveSlotsScreen()
StoryFreeplayScreen::StoryFreeplayScreen()
StoryFreeplayScreen::Init(GUI2Object*)
StoryFreeplayScreen::AboutToShow()
StoryFreeplayScreen::MenuSelect()
StoryFreeplayScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
StoryFreeplayScreen::~StoryFreeplayScreen()
TrailerScreen::TrailerScreen()
TrailerScreen::Init(GUI2Object*)
TrailerScreen::AboutToShow()
TrailerScreen::MenuSelect()
TrailerScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
ViewTrailerEventData::ViewTrailerEventData(int)
TrailerScreen::~TrailerScreen()
ViewTrailerEventData::~ViewTrailerEventData()
ChooseDeviceScreen::ChooseDeviceScreen()
ChooseDeviceScreen::AboutToShow()
ChooseDeviceScreen::ExitPage()
ChooseDeviceScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
ChooseDeviceScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to ChooseDeviceScreen::EventNotify(Event&, NuEventData&)
ChooseDeviceScreen::~ChooseDeviceScreen()
ChooseDeviceScreen::~ChooseDeviceScreen()
non-virtual thunk to ChooseDeviceScreen::~ChooseDeviceScreen()
non-virtual thunk to ChooseDeviceScreen::~ChooseDeviceScreen()
ConfirmSlotScreen::ConfirmSlotScreen()
ConfirmSlotScreen::AboutToShow()
ConfirmSlotScreen::MenuSelection(int)
ConfirmSlotScreen::ConfirmCancelled()
ConfirmSlotScreen::BackButtonPressed()
ConfirmSlotScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
ConfirmSlotReallyOverwriteScreen::ConfirmSlotReallyOverwriteScreen()
ConfirmSlotReallyOverwriteScreen::AboutToShow()
ConfirmSlotReallyOverwriteScreen::MenuSelection(int)
ConfirmSlotReallyOverwriteScreen::ConfirmCancelled()
ConfirmSlotReallyOverwriteScreen::BackButtonPressed()
ConfirmSlotReallyOverwriteScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
ContinueWithoutSavingScreen::AboutToShow()
ContinueWithoutSavingScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
ContinueWithoutSavingScreen::MenuSelection(int)
ControllerMappingScreen::ControllerMappingScreen()
ControllerMappingScreen::SetControlsMenuVisible(bool)
ControllerMappingScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to ControllerMappingScreen::EventNotify(Event&, NuEventData&)
ControllerMappingScreen::AboutToShow()
ControllerMappingScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
ControllerMappingScreen::~ControllerMappingScreen()
ControllerMappingScreen::~ControllerMappingScreen()
non-virtual thunk to ControllerMappingScreen::~ControllerMappingScreen()
non-virtual thunk to ControllerMappingScreen::~ControllerMappingScreen()
CreateDataScreen::AboutToShow()
CreateDataScreen::MenuSelection(int)
CreateDataScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
DemoSplashScreen::DemoSplashScreen()
DemoSplashScreen::AboutToShow()
DemoSplashScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
DemoSplashScreen::GetStage()
DemoSplashScreen::SetStage(DemoSplashStage)
DemoSplashScreen::Show(DemoSplashStage)
DemoSplashScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to DemoSplashScreen::EventNotify(Event&, NuEventData&)
DemoSplashScreen::~DemoSplashScreen()
DemoSplashScreen::~DemoSplashScreen()
non-virtual thunk to DemoSplashScreen::~DemoSplashScreen()
non-virtual thunk to DemoSplashScreen::~DemoSplashScreen()
DeviceChangedScreen::AboutToShow()
DeviceChangedScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
DeviceChangedScreen::MenuSelection(int)
DeviceChangedScreen::ViewedOverFadedBackground(APIFlowScreen::Tag)
EnumerateSlotsScreen::EnumerateSlotsScreen()
EnumerateSlotsScreen::Reset()
EnumerateSlotsScreen::AboutToShow()
EnumerateSlotsScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
EnumerateSlotsScreen::Enumerate()
EnumerateSlotsScreen::OnProcess()
EnumerateSlotsScreen::ExitPage()
EnumerateSlotsScreen::EventNotify(Event&, NuEventData&)
EnumerateSlotsScreen::Enumerated()
non-virtual thunk to EnumerateSlotsScreen::EventNotify(Event&, NuEventData&)
EnumerateSlotsScreen::~EnumerateSlotsScreen()
EnumerateSlotsScreen::~EnumerateSlotsScreen()
non-virtual thunk to EnumerateSlotsScreen::~EnumerateSlotsScreen()
non-virtual thunk to EnumerateSlotsScreen::~EnumerateSlotsScreen()
ExternalSaveUtilityScreen::ExternalSaveUtilityScreen()
ExternalSaveUtilityScreen::AboutToShow()
ExternalSaveUtilityScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
ExternalSaveUtilityScreen::OnProcess()
ExternalSaveUtilityScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to ExternalSaveUtilityScreen::EventNotify(Event&, NuEventData&)
ExternalSaveUtilityScreen::HandleSaveCoreFinishedSerialisingEvent()
ExternalSaveUtilityScreen::ViewedOverFadedBackground(APIFlowScreen::Tag)
ExternalSaveUtilityScreen::~ExternalSaveUtilityScreen()
ExternalSaveUtilityScreen::~ExternalSaveUtilityScreen()
non-virtual thunk to ExternalSaveUtilityScreen::~ExternalSaveUtilityScreen()
non-virtual thunk to ExternalSaveUtilityScreen::~ExternalSaveUtilityScreen()
MissingRequirementScreen::MissingRequirementScreen()
MissingRequirementScreen::Reset()
MissingRequirementScreen::AboutToShow()
MissingRequirementScreen::MenuSelection(int)
MissingRequirementScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
MissingRequirementScreen::SetReasonMissingProfile()
MissingRequirementScreen::SetReasonMissingDevice()
MissingRequirementScreen::SetReasonNoSpace()
MissingRequirementScreen::BackButtonPressed()
MissingRequirementScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to MissingRequirementScreen::EventNotify(Event&, NuEventData&)
MissingRequirementScreen::~MissingRequirementScreen()
MissingRequirementScreen::~MissingRequirementScreen()
non-virtual thunk to MissingRequirementScreen::~MissingRequirementScreen()
non-virtual thunk to MissingRequirementScreen::~MissingRequirementScreen()
NeedDeviceScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
NeedDeviceScreen::ViewedOverFadedBackground(APIFlowScreen::Tag)
NeedSignInScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
NeedSignInScreen::OnShow()
NeedSignInScreen::HandleNotShowingSignInScreen()
NeedSignInScreen::ViewedOverFadedBackground(APIFlowScreen::Tag)
NoSavesScreen::AboutToShow()
NoSavesScreen::MenuSelection(int)
NoSavesScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
PreStartupSaveWarningScreen::PreStartupSaveWarningScreen()
PreStartupSaveWarningScreen::Initialise()
PreStartupSaveWarningScreen::SetupMessage()
PreStartupSaveWarningScreen::GetFullState()
PreStartupSaveWarningScreen::NeedWarning()
PreStartupSaveWarningScreen::LeaveWarningFlow()
PreStartupSaveWarningScreen::AboutToShow()
PreStartupSaveWarningScreen::OnUpdate()
PreStartupSaveWarningScreen::GoToState(PreStartupSaveWarningScreen::WarningScreenState)
PreStartupSaveWarningScreen::OnShow()
PreStartupSaveWarningScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
PreStartupSaveWarningScreen::BackButtonPressed()
PreStartupSaveWarningScreen::GoBackOneState()
PreStartupSaveWarningScreen::ContinueWithoutSaving()
PreStartupSaveWarningScreen::InWarningFlow()
PreStartupSaveWarningScreen::MenuSelection(int)
QuitToDesktopScreen::QuitToDesktopScreen()
QuitToDesktopScreen::IsQuitingToOS()
QuitToDesktopScreen::AboutToShow()
QuitToDesktopScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
QuitToDesktopScreen::OnProcess()
QuitToDesktopScreen::FadeTracksToQuit()
QuitToDesktopScreen::HaveTracksStopped()
QuitToDesktopScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to QuitToDesktopScreen::EventNotify(Event&, NuEventData&)
QuitToDesktopScreen::MenuSelection(int)
QuitToDesktopScreen::~QuitToDesktopScreen()
QuitToDesktopScreen::~QuitToDesktopScreen()
non-virtual thunk to QuitToDesktopScreen::~QuitToDesktopScreen()
non-virtual thunk to QuitToDesktopScreen::~QuitToDesktopScreen()
RetrySaveScreen::AboutToShow()
RetrySaveScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
RetrySaveScreen::MenuSelection(int)
RetrySaveScreen::ViewedOverFadedBackground(APIFlowScreen::Tag)
RetrySaveCorruptScreen::RetrySaveCorruptScreen()
RetrySaveCorruptScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
RetrySaveCorruptScreen::MenuSelection(int)
SerialisingResultScreen::SerialisingResultScreen()
SerialisingResultScreen::Reset()
SerialisingResultScreen::AutoProceed()
SerialisingResultScreen::AboutToShow()
NuFixedStringT<(unsigned short)512>::Format(char const*, ...)
SerialisingResultScreen::MenuSelection(int)
SerialisingResultScreen::ProceedToNextScreen()
SerialisingResultScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
SerialisingResultScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to SerialisingResultScreen::EventNotify(Event&, NuEventData&)
SerialisingResultScreen::~SerialisingResultScreen()
SerialisingResultScreen::~SerialisingResultScreen()
non-virtual thunk to SerialisingResultScreen::~SerialisingResultScreen()
non-virtual thunk to SerialisingResultScreen::~SerialisingResultScreen()
SerialisingScreen::SerialisingScreen()
SerialisingScreen::AboutToShow()
SerialisingScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
SerialisingScreen::ViewedOverFadedBackground(APIFlowScreen::Tag)
ShowControlsScreen::ShowControlsScreen()
ShowControlsScreen::AboutToShow()
ShowControlsScreen::OnProcess(float)
ShowControlsScreen::Backup()
ShowControlsScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
ShowControlsScreen::BackButtonPressed()
ShowControlsScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to ShowControlsScreen::EventNotify(Event&, NuEventData&)
ShowControlsScreen::Show(int)
ShowControlsScreen::~ShowControlsScreen()
ShowControlsScreen::~ShowControlsScreen()
non-virtual thunk to ShowControlsScreen::~ShowControlsScreen()
non-virtual thunk to ShowControlsScreen::~ShowControlsScreen()
SignInScreen::SignInScreen()
SignInScreen::Reset()
SignInScreen::AboutToShow()
SignInScreen::ExitPage(bool)
SignInScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
SignInScreen::OnUpdate()
SignInScreen::RequestCheckSignIn()
SignInScreen::CheckSignIn()
SignInScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to SignInScreen::EventNotify(Event&, NuEventData&)
SignInScreen::ViewedOverFadedBackground(APIFlowScreen::Tag)
SignInScreen::~SignInScreen()
SignInScreen::~SignInScreen()
non-virtual thunk to SignInScreen::~SignInScreen()
non-virtual thunk to SignInScreen::~SignInScreen()
SubtitlesInfoScreen::SetExitModeToDefault()
SubtitlesInfoScreen::SetExitMode(SubtitlesInfoScreen::eExitMode)
SubtitlesInfoScreen::GetExitMode()
SubtitlesInfoScreen::AboutToShow()
SubtitlesInfoScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
SubtitlesInfoScreen::MenuSelection(int)
SubtitlesInfoScreen::ViewedOverFadedBackground(APIFlowScreen::Tag)
SubtitlesSelectionScreen::AboutToShow()
SubtitlesSelectionScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
SubtitlesSelectionScreen::MenuSelection(int)
SubtitlesSelectionScreen::SubtitlesOn(bool)
SubtitlesEventData::SubtitlesEventData(bool)
SubtitlesSelectionScreen::ViewedOverFadedBackground(APIFlowScreen::Tag)
SubtitlesEventData::~SubtitlesEventData()
SplashScreen::SplashScreen()
SplashScreen::Init(GUI2Object*)
SplashScreen::FadeOut(float)
SplashScreen::HandleFadeOut()
SplashScreen::HandleFadeOutRequest()
SplashScreen::SetFPS(SplashScreenInfo*)
SplashScreen::HandlePause()
SplashScreen::Pause()
SplashScreen::EventNotify(Event&, NuEventData&)
non-virtual thunk to SplashScreen::EventNotify(Event&, NuEventData&)
SplashScreen::HandleResume()
SplashScreen::OnGUIEvent(GUI2Object*, eGUI2Event, GUI2EventData*)
SplashScreen::ForceNoGameFade()
SplashScreen::GetState()
SplashScreen::ShowSplash(SplashScreenInfo*)
SplashScreen::SetMaterial(GUI2Material*)
SplashScreen::SetText(char const*)
SplashScreen::RegisterCallbacks()
SplashScreen::~SplashScreen()
SplashScreen::~SplashScreen()
non-virtual thunk to SplashScreen::~SplashScreen()
non-virtual thunk to SplashScreen::~SplashScreen()
FrameworkImposeSystemErrors::FrameworkImposeSystemErrors()
FrameworkImposeSystemErrors::CheckSystemErrors()
FadeBase::Update()
FadeBase::SetStage(LevelContainer const*, char)
FadeBase::GetCurrentFade()
FadeBase::SetCurrentFade(FadeBase*)
Overlay::~Overlay()
FadeBase::~FadeBase()
Overlay::Init(LevelContainer const*)
FadeBase::IsStillRenderAllowed() const
FadeBase::ShouldDoBaseUpdate() const
FrameworkPlayerProfileManager::FrameworkPlayerProfileManager()
FrameworkPlayerProfileManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
FrameworkPlayerProfileManager::~FrameworkPlayerProfileManager()
FrameworkPlayerProfileManager::GetManagerName() const
FrameworkThing::FrameworkThing()
FrameworkThing::Init()
FrameworkThing::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
FrameworkThing::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
FrameworkThing::~FrameworkThing()
FrameworkThing::GetManagerName() const
PrioritisedManagerList::PrioritisedManagerList()
PrioritisedManager::PrioritisedManager(ClassManager&, int, PrioritisedManagerList*)
PrioritisedManagerList::InsertOrdered(PrioritisedManager&)
FlowPageHandler2::FlowPageHandler2(char const*)
FlowPageHandler2::SetPreviousPageTag(APIFlowScreen::Tag)
FlowPageHandler2::GetPreviousPageTag() const
FlowPageHandler2::~FlowPageHandler2()
CfgLoader::CfgLoader(char const*, void*, LevelContainer*)
CfgLoader::SetFileName(char const*)
CfgLoader::~CfgLoader()
CfgMenu::DestroyMe(CfgMenu*)
CfgLoader::UnLoad()
CfgLoader::~CfgLoader()
CfgLoader::Init()
CfgLoader::Load()
READCFG::UnLoadCFGFile(int)
ReadCfgInfoContainerList::AddReadCfgContainer(char*)
ReadCfgInfoContainerList::AddReadCfgInfo(char*)
ReadCfgInfoContainerList::CurrentCfgReadingDone()
ReadCfgInfoContainerList::CurrentCfgContainerDone()
CfgLoader::QueryFileExistence()
CfgLoader::WriteCfgFile()
CfgLoader::StartBlock(char const*, ...)
CfgLoader::WriteLine(char const*, ...)
CfgLoader::EndBlock(char const*, ...)
CfgMenu::CfgMenu(char const*)
CfgMenu::~CfgMenu()
CfgMenu::CfgMenu(char const*, CfgMenu*)
CfgMenu::AddCfgMenu(char const*, CfgMenu*)
CfgMenu::AddCfgMenu(char const*, char const*)
CfgMenu::FindCfgMenu(char const*)
CfgMenu::AddCfgMenuElement(char const*, CfgLoader*, char const*)
CfgMenu::AddCfgMenuElement(char const*, CfgLoader*, CfgMenu*)
CfgMenu::RecurseFindCfgMenu(CfgMenu*, char const*)
CfgMenu::NoOfSiblings()
CfgMenu::NoOfChildren()
CfgMenu::Load()
CfgMenu::LoadWithFootNote(CfgLoader*)
CfgMenu::WriteWithFootNote(CfgLoader*)
readcfgAllocBuff(int, int, nuvariptr_u*, nuvariptr_u)
readcfgStringAllocBuff(char const*, nuvariptr_u*, nuvariptr_u)
CapturedReadCfgAlloc(int, int)
ReadCfgInfoContainerList::ProvideCfgMemory(unsigned int, unsigned int)
CapturedReadCfgStringAlloc(char const*)
xLoader_Include(nufpar_s*)
xLoader_CfgInclude(nufpar_s*)
READCFG::ParseCFG(char*, nufpcomjmp_s*, int, LevelContainer*)
READCFG::JustParseCFG(char*, nufpcomjmp_s*, LevelContainer*)
READCFG::ReadCFGFile(char*, nufpcomjmp_s*, nuvariptr_u*, nuvariptr_u*, int, LevelContainer*)
READCFG::ReadCfg(char*, nufpcomjmp_s*, nuvariptr_u*, nuvariptr_u*, int, LevelContainer*)
READCFG::ReadCFGFile(char*, nuvariptr_u*, nuvariptr_u*, int, LevelContainer*)
READCFG::ReadCfg(char*, nuvariptr_u*, nuvariptr_u*, int, LevelContainer*)
ReadCfgInfoContainerList::UnLoadCfgContainer(int)
CfgPoll::CfgPoll(unsigned int)
CfgPoll::CheckCfgForChange()
CfgPoll::UpdateVersionFromCfg()
CfgAlloc::CfgAlloc(unsigned long, void*)
CfgAlloc::~CfgAlloc()
CfgAlloc::GetAlloc()
CfgAlloc::GetSize()
CfgAllocList::AddCfgAlloc(unsigned long, void*)
CfgAllocList::~CfgAllocList()
MiniBuffer::MiniBuffer()
MiniBuffer::~MiniBuffer()
IsValidAlignMentNumber(unsigned int)
MiniBuffer::CalculateOffSetForAlignment(unsigned long)
MiniBuffer::CanFit(unsigned long)
MiniBuffer::Allocate(unsigned long, unsigned long)
MiniBufferList::AddCfgAlloc(unsigned long, unsigned int)
MiniBufferList::MiniBufferList()
MiniBufferList::~MiniBufferList()
CSListHeader<MiniBuffer>::Clear()
ReadCfgInfoList::~ReadCfgInfoList()
ReadCfgInfo::ReadCfgInfo(char*, ReadCfgInfo*)
ReadCfgInfo::~ReadCfgInfo()
ReadCfgInfoContainer::AddReadCfgInfo(char*)
ReadCfgInfoContainer::ReadCfgInfoContainer(char*)
ReadCfgInfoContainer::~ReadCfgInfoContainer()
ReadCfgInfoContainer::CalculateMemoryDetails()
CSListHeader<ReadCfgInfoContainer>::~CSListHeader()
ReadCfgInfoContainerList::ReadCfgInfoContainerList()
ReadCfgInfo::PrintInfo(NuFile*, unsigned int)
ReadCfgInfoContainer::PrintInfo(NuFile*)
ReadCfgInfoContainerList::PrintInfo()
CfgLoader::PostLoad()
CfgLoader::PreUnLoad()
CfgLoader::WriteCfgFileBody()
CfgLoader::WriteCfgDescription()
CfgLoader::GetCfgLoaderTypeName() const
CfgLoader::GetCfgTypeName() const
CommonString::CommonString()
CommonString::AsChar() const
CommonString::GetLength() const
CommonString::Length() const
CommonString::SetLength(int)
CommonString::SetCurrentDir() const
CommonString::FileExists() const
CommonString::Contains(char const*) const
CommonString::ContainsI(char const*) const
CommonString::Count(char const*) const
CommonString::IndexOf(char const*) const
CommonString::IndexOfI(char const*) const
CommonString::RIndexOf(char const*) const
CommonString::RIndexOfI(char const*) const
CommonString::EndsWith(char const*) const
CommonString::EndsWithI(char const*) const
CommonString::StartsWith(char const*) const
CommonString::StartsWithI(char const*) const
CommonString::ToUpper()
CommonString::ToLower()
CommonString::operator==(char const*) const
CommonString::operator==(CommonString const&) const
CommonString::operator!=(char const*) const
CommonString::operator!=(CommonString const&) const
CommonString::operator[](int) const
CommonString::SetCaseSensitiveCompare(bool)
CommonString::GetCaseSensitiveCompare()
CommonString::AToI(bool*)
CommonString::~CommonString()
DynamicString::DynamicString()
DynamicString::DynamicString(char const*)
DynamicString::Set(char const*)
DynamicString::DynamicString(char const*, int)
DynamicString::Set(char const*, int)
DynamicString::DynamicString(DynamicString const&)
DynamicString::DynamicString(FixedString const&)
DynamicString::~DynamicString()
DynamicString::~DynamicString()
DynamicString::Clear()
DynamicString::Format(char const*, ...)
DynamicString::GetSubstring(int, int) const
DynamicString::ToSubstring(int, int)
DynamicString::Remove(char const*)
DynamicString::Tokenise(CMList<DynamicString>*, char)
CMList<DynamicString>::Append(DynamicString const&, CMList<DynamicString>::ListLink*)
DynamicString::operator=(char const*)
DynamicString::operator=(DynamicString const&)
DynamicString::operator=(FixedString const&)
DynamicString::operator=(EdString const&)
DynamicString::Add(char const*, char const*, DynamicString*)
DynamicString::Add(char const*, char, DynamicString*)
DynamicString::Add(char const*, int, DynamicString*)
DynamicString::Add(char const*, float, DynamicString*)
DynamicString::operator+(DynamicString const&) const
DynamicString::operator+(FixedString const&) const
DynamicString::operator+(char const*) const
DynamicString::operator+(char) const
DynamicString::operator+(int) const
DynamicString::operator+(float) const
DynamicString::operator+=(DynamicString const&)
DynamicString::operator+=(FixedString const&)
DynamicString::operator+=(char const*)
DynamicString::operator+=(char)
DynamicString::operator+=(int)
DynamicString::operator+=(float)
DynamicString::operator<<(DynamicString const&)
DynamicString::operator<<(FixedString const&)
DynamicString::operator<<(char const*)
DynamicString::operator<<(char)
DynamicString::operator<<(int)
DynamicString::operator<<(unsigned int)
DynamicString::operator<<(float)
DynamicString::GetCurrentDir()
DynamicString::StripExtension()
DynamicString::ToPath()
DynamicString::ToFilename()
DynamicString::Prepend(char const*)
DynamicString::MakeRelativeTo(char const*)
DStringAdd(DynamicString&, char const*)
DStringContains(DynamicString&, char const*)
DStringIndexOf(DynamicString&, char const*)
DStringRIndexOf(DynamicString&, char const*)
DStringCount(DynamicString&, char const*)
DStringRemove(DynamicString&, char const*)
DStringSubStr(char const*)
DStringPrepend(DynamicString&, char const*)
FixedString::FixedString(int, char*)
FixedString::Set(char const*)
FixedString::FixedString(int, char*, char*)
FixedString::FixedString(int, char*, FixedString const&)
FixedString::FixedString(int, char*, DynamicString&)
FixedString::FixedString(int, char*, EdString const&)
FixedString::operator=(FixedString const&)
FixedString::operator=(char const*)
FixedString::Format(char const*, ...)
FixedString::ToSubstring(int, int)
FixedString::Remove(char const*)
FixedString::GetCurrentDir()
FixedString::StripExtension()
FixedString::ToPath()
FixedString::ToFilename()
FixedString::Prepend(char const*)
FixedString::MakeRelativeTo(char*)
FixedString::operator+=(char)
FixedString::operator+=(FixedString const&)
FixedString::operator+=(char const*)
FixedString::ToExtension()
FStringAdd(TFixedString<1024>&, char const*)
FStringContains(TFixedString<1024>&, char const*)
FStringIndexOf(TFixedString<1024>&, char const*)
FStringRIndexOf(TFixedString<1024>&, char const*)
FStringCount(TFixedString<1024>&, char const*)
FStringRemove(TFixedString<1024>&, char const*)
FStringSubStr(char const*)
FStringPrepend(TFixedString<1024>&, char const*)
FixedString::~FixedString()
TFixedString<64>::~TFixedString()
VuMtxTween(VuMtx&, VuMtx const&, VuMtx const&, float)
VuVecScaleAccum(VuVec*, VuVec const*, float)
NewSeekHalfLife(VuMtx&, VuMtx&, float)
NewSeekHalfLife(VuVec*, VuVec*, float)
NewSeekHalfLife(VuVec&, VuVec const&, float)
NewSeekHalfLife(short&, short, float)
NewSeekHalfLife(float&, float, float)
NewSeekHalfLife(float*, float, float)
NewSeekHalfLife(int&, int, float)
NewSeekHalfLifeLimit(short&, short, float, float)
NewSeekHalfLifeLimit(unsigned short&, short, float, float)
NewSeekHalfLifeLimit(float&, float, float, float)
NewSeekHalfLifeLimit(float*, float, float, float)
NewSeekLinear(float*, float, float, float, float)
NewSeekLinear(VuVec*, VuVec const*, float, float)
NewSeekLinear(VuMtx*, VuMtx const*, float, float)
NewSeekLinear(short*, short, float, float)
GenLocalMtx(VuMtx*, VuMtx const*, VuMtx const*)
CalculateLocalMtx(VuMtx*, VuMtx*, VuMtx*)
GenEndMtx(VuMtx*, VuMtx const*, VuMtx const*)
GenRootMtx(VuMtx*, VuMtx const*, VuMtx const*)
ProcessTimer(float&)
GenNameIdHash(NAME_ID*, char*, int)
ConvertNameToId(NAME_ID const*, char const*)
ConvertIdToName(NAME_ID const*, int)
Name_VoidStar::ConvertNameToData(Name_VoidStar const*, char const*)
VerifySafetyAndScnRemove(NuSmartPtr<NuScene, true>&)
DrawFilledLine(VuVec*, int, unsigned int)
DrawFilledQuad(VuVec&, VuVec&, VuVec&, VuVec&, unsigned int, unsigned int)
GenerateMtxZAlignedWithVector(VuVec const&, VuMtx&, VuMtx*)
ResourceInfo::~ResourceInfo()
ResourceInfo::~ResourceInfo()
ResourceInfo::ResourceInfo(ResourceType&)
Resource::Resource(ResourceInfo const&)
Resource::~Resource()
Resource::~Resource()
Resource::GetResourceAccessCriticalSection()
Resource::IsMatch(ResourceInfo const&) const
Resource::ImmediatelyLoad()
Resource::StartLoad()
Resource::ProcessLoad()
Resource::AbortLoad()
Resource::FinishLoad()
Resource::HasSuccessfullyLoaded()
Resource::ImmediatelyUnload()
Resource::StartUnload()
Resource::ProcessUnload()
Resource::AbortUnload()
Resource::FinishUnload()
Resource::GetLoad() const
Resource::OnLoaded()
Resource::OnUnloaded()
Resource::Reference()
Resource::Release()
Resource::GetProcessFilterID() const
Resource::SetProcessFilterID(int)
FileResourceInfo::FileResourceInfo(ResourceType&, char const*)
FileResourceInfo::SetupFileName(char const*)
FileResourceInfo::FileResourceInfo(ResourceType&, unsigned int)
NUHGOBJResourceInfo::~NUHGOBJResourceInfo()
FileResourceInfo::~FileResourceInfo()
FileResource::FileResource(FileResourceInfo const&)
FileResource::~FileResource()
FileResource::~FileResource()
FileResource::IsMatch(ResourceInfo const&) const
SubPakFileResourceInfo::SubPakFileResourceInfo(ResourceType&, char const*, char const*)
SubPakFileResourceInfo::SetupPakFileName(char const*)
SubPakFileResourceInfo::SubPakFileResourceInfo(ResourceType&, unsigned int, char const*)
SubPakFileResourceInfo::SubPakFileResourceInfo(ResourceType&, unsigned int, unsigned int)
SubPakFileResourceInfo::~SubPakFileResourceInfo()
SubPakFileResource::SubPakFileResource(SubPakFileResourceInfo const&)
SFXResource::~SFXResource()
SubPakFileResource::~SubPakFileResource()
SubPakFileResource::IsMatch(ResourceInfo const&) const
DynoBlockFileRequest::DynoBlockFileRequest(char const*, NuFileNotifier*)
DynoBlockFileRequest::DynoBlockFileRequest(char const*, char const*, nuvariptr_u&, nuvariptr_u&, NuFileNotifier*)
DynoBlockFileRequest::~DynoBlockFileRequest()
DynoBlockFileRequest::~DynoBlockFileRequest()
DynoBlockFileRequest::Read(bool volatile*)
DynoBlockFileRequest::ReadFromMem(void*, unsigned int, bool volatile*)
NuSceneResourceType::CreateResourceInternal(ResourceInfo const&) const
NuSceneResourceInfo::NuSceneResourceInfo(char const*)
NuSceneResourceInfo::NuSceneResourceInfo(unsigned int)
NuSceneResourceInfo::NuSceneResourceInfo(char const*, char)
NuSceneResourceInfo::NuSceneResourceInfo(char const*, LevelContainer*, bool, char)
NuSceneResourceInfo::~NuSceneResourceInfo()
NuList<NuSmartPtr<NuScene, true> >::~NuList()
NuSceneResource::DeleteScenes()
NuSceneResource::NuSceneResource(NuSceneResourceInfo const&)
NuSceneResource::~NuSceneResource()
NuSceneResource::~NuSceneResource()
NuSceneResource::ImmediatelyLoad()
NuSceneResource::StartLoad()
NuSceneResource::ProcessLoad()
NuSceneResource::AbortLoad()
NuSceneResource::FinishLoad()
NuSceneResource::HasSuccessfullyLoaded()
NuSceneResource::ImmediatelyUnload()
NuSceneResource::StartUnload()
NuSceneResource::ProcessUnload()
NuSceneResource::AbortUnload()
NuSceneResource::FinishUnload()
NuSceneResource::SetProcessFilterID(int)
NuSceneResourceHndl::NuSceneResourceHndl()
NuSceneResourceHndl::NuSceneResourceHndl(ResourceHndl const&)
NuSceneResourceHndl::GetNuScene() const
NuSceneResourceHndl::GetPartPageId() const
NUHGOBJResourceType::CreateResourceInternal(ResourceInfo const&) const
NUHGOBJResourceInfo::NUHGOBJResourceInfo(char const*)
NUHGOBJResourceInfo::NUHGOBJResourceInfo(unsigned int)
NUHGOBJResourceInfo::~NUHGOBJResourceInfo()
NUHGOBJResource::DeleteHGOBJs()
NUHGOBJResource::NUHGOBJResource(NUHGOBJResourceInfo const&)
NUHGOBJResource::~NUHGOBJResource()
NUHGOBJResource::~NUHGOBJResource()
NUHGOBJResource::ImmediatelyLoad()
NUHGOBJResource::StartLoad()
NUHGOBJResource::ProcessLoad()
NUHGOBJResource::AbortLoad()
NUHGOBJResource::FinishLoad()
NUHGOBJResource::HasSuccessfullyLoaded()
NUHGOBJResource::ImmediatelyUnload()
NUHGOBJResource::StartUnload()
NUHGOBJResource::ProcessUnload()
NUHGOBJResource::AbortUnload()
NUHGOBJResource::FinishUnload()
NUHGOBJResource::SetProcessFilterID(int)
NUHGOBJResourceHndl::NUHGOBJResourceHndl()
NUHGOBJResourceHndl::NUHGOBJResourceHndl(ResourceHndl const&)
NUHGOBJResourceHndl::GetNUHGOBJ() const
AnimDecompressionCache::AnimDecompressionCache()
AnimDecompressionCache::~AnimDecompressionCache()
AnimDecompressionCache::ClearCache()
AnimDecompressionCache::InitCache(int)
AnimDecompressionCache::ResetCache()
AnimDecompressionCache::UpdateLargestFreeBlock()
AnimDecompressionCache::LockANI2(int, NUFILETYPE, NuCompressMode, int, char const*)
AnimDecompressionCache::LockAnim(int, NUFILETYPE, NuCompressMode, int, char const*)
AnimDecompressionCache::LockANI4(int, NuCompressMode, int, char const*)
AnimDecompressionCache::FindAnim(int) const
AnimDecompressionCache::DefragCache(int)
AnimDecompressionCache::AddToCache(int, NuCompressMode, void*, int, NUFILETYPE, int, char const*)
AnimDecompressionCache::UnlockAnim(int, NuCompressMode)
AnimDecompressionCache::RemoveAnim(int, NuCompressMode)
AnimDecompressionCache::AddCachedAnim(AnimDecompressionCache::CachedAnim*)
AnimResourceType::CreateResourceInternal(ResourceInfo const&) const
AnimResourceInfo::AnimResourceInfo(char const*, NuCompressMode, bool, char const*)
AnimResourceInfo::AnimResourceInfo(int, NUFILETYPE, NuCompressMode, bool, char const*)
AnimResourceInfo::~AnimResourceInfo()
AnimResource::DeleteKrawlyAnims()
AnimResource::AnimResource(AnimResourceInfo const&)
AnimResource::~AnimResource()
AnimResource::IsMatch(ResourceInfo const&) const
AnimResource::StartLoad()
AnimResource::AbortLoad()
AnimResource::ProcessLoad()
AnimResource::FinishLoad()
AnimResource::HasSuccessfullyLoaded()
AnimResource::ImmediatelyUnload()
AnimResource::StartUnload()
AnimResource::ProcessUnload()
AnimResource::AbortUnload()
AnimResource::FinishUnload()
AnimResource::SetProcessFilterID(int)
AnimResource::LockANI2() const
AnimResource::LockANI4() const
AnimResource::UnlockAnim() const
AnimResource::GetKrawlyAnim() const
AnimResourceHndl::AnimResourceHndl()
AnimResourceHndl::AnimResourceHndl(ResourceHndl const&)
AnimResourceHndl::LockANI2() const
AnimResourceHndl::LockANI4() const
AnimResourceHndl::UnlockAnim() const
AnimResourceHndl::GetKrawlyAnim() const
SFXResourceType::CreateResourceInternal(ResourceInfo const&) const
SFXResourceInfo::SFXResourceInfo(char const*, char const*)
SFXResourceInfo::~SFXResourceInfo()
SFXResource::SFXResource(SFXResourceInfo const&)
SFXResource::~SFXResource()
SFXResource::ImmediatelyLoad()
SFXResource::HasSuccessfullyLoaded()
SFXResource::ImmediatelyUnload()
SFXResourceHndl::SFXResourceHndl()
SFXResourceHndl::SFXResourceHndl(ResourceHndl const&)
SFXResourceHndl::GetSFXSample() const
TextureResourceType::CreateResourceInternal(ResourceInfo const&) const
TextureResourceInfo::TextureResourceInfo(char const*, char const*)
TextureResourceInfo::TextureResourceInfo(unsigned int, unsigned int)
TextureResourceInfo::~TextureResourceInfo()
TextureResource::DeleteTextures()
TextureResource::TextureResource(TextureResourceInfo const&)
TextureResource::~TextureResource()
TextureResource::~TextureResource()
TextureResource::ImmediatelyLoad()
TextureResource::StartLoad()
TextureResource::ProcessLoad()
TextureResource::AbortLoad()
TextureResource::FinishLoad()
TextureResource::HasSuccessfullyLoaded()
TextureResource::ImmediatelyUnload()
TextureResource::StartUnload()
TextureResource::ProcessUnload()
TextureResource::AbortUnload()
TextureResource::FinishUnload()
TextureResource::SetProcessFilterID(int)
TextureResourceHndl::TextureResourceHndl()
TextureResourceHndl::TextureResourceHndl(ResourceHndl const&)
TextureResourceHndl::GetTexture() const
DynoBlockFileRequest::GetMemSize() const
ResourceHndl::ResourceHndl()
ResourceHndl::~ResourceHndl()
ResourceHndl::Clear()
ResourceHndl::ResourceHndl(Resource*)
ResourceHndl::ResourceHndl(ResourceHndl const&)
ResourceHndl::operator=(ResourceHndl const&)
ResourceHndl::operator==(ResourceHndl const&) const
ResourceHndl::GetStatus() const
ResourceHndl::GetType() const
ResourceHndl::WaitToLoad(bool volatile*)
ResourceHndl::GetProcessFilterID() const
ResourceHndl::SetProcessFilterID(int) const
ResourceHndlList::HaveFinishedLoading() const
ResourceHndlList::HaveSucceededLoading() const
ResourceHndlList::WaitToLoad(bool volatile*)
ResourceType::ResourceType()
CMList<ResourceType*>::Append(ResourceType* const&, CMList<ResourceType*>::ListLink*)
ResourceType::~ResourceType()
ResourceType::FindResource(ResourceInfo const&, bool, bool) const
ResourceType::AddResource(Resource&)
CMList<Resource*>::Append(Resource* const&, CMList<Resource*>::ListLink*)
ResourceType::RemoveResource(Resource&)
ResourceType::AddToDeleteList(Resource&)
ResourceType::RemoveFromDeleteList(Resource&)
ResourceType::ClearDeleteList()
CMList<ResourceType*>::~CMList()
ResourceLoader::ResourceLoader()
ResourceLoader::~ResourceLoader()
ResourceLoader::Initialise()
ResourceLoader::FindResource(ResourceInfo const&, bool, bool)
ResourceLoader::RequestLoadResource(char const*, ResourceInfo const&, bool, bool volatile*)
ResourceLoader::LoadResource(ResourceInfo const&, bool volatile*)
ResourceLoader::HasResourcesToProcess() const
ResourceLoader::WaitToProcessResources(bool volatile*)
ResourceLoader::ProcessResources(ResourceLoader::ProcessMode, bool volatile*)
ResourceLoader::WaitToLoadResources(bool volatile*)
ResourceLoader::WaitToUnloadResources(bool volatile*)
ResourceLoader::IsProcessingThread() const
ResourceLoader::IsCurrentlyProcessing() const
ResourceLoader::PushProcessFilter()
ResourceLoader::IncrementProcessFilterID()
ResourceLoader::GetProcessFilterID() const
ResourceLoader::PopProcessFilter()
ResourceLoader::DecrementProcessFilterID()
ResourceLoader::GetNextProcessingResource(Resource*)
ResourceLoader::ProcessResource(Resource*)
ResourceLoader::SetProcessing(Resource&, bool)
ResourceLoader::OnResourceLoaded(Resource&)
ResourceLoader::OnResourceUnloaded(Resource&)
ResourceLoader::SetProcessFilterID(int)
ResourceType::~ResourceType()
CMListBase::Check() const
CMListBase::GetListLink(int) const
CMListBase::FindPrevListLink(CMListLinkBase const*, bool) const
CMListBase::Count() const
CMListBase::FindNextListLink(CMListLinkBase const*, bool) const
CMListBase::Insert(CMListLinkBase*, CMListLinkBase*)
CMListBase::Append(CMListLinkBase*, CMListLinkBase*)
CMListBase::Unlink(CMListLinkBase*)
CMListBase::UnlinkAll()
CMIteratorBase::operator=(CMIteratorBase&)
CMIteratorBase::Reset()
CMIteratorBase::Next()
CMIteratorBase::_Prev(CMListLinkBase const*&)
CMIteratorBase::_Next(CMListLinkBase const*&)
CMIteratorBase::Prev()
CMIteratorBase::SetRemoved()
ClipLineState::~ClipLineState()
ClipLineManager::RotateCurrentSplitLineToNewPosition(ClipLine const&, float, VuVec const&, bool)
ClipLineManager::CalculateAngularDifference(ClipLine const&, ClipLine const&)
ClipLineManager::CalculateBlendedAngularDifference(ClipLine const&, ClipLine const&, float)
ClipLine::RotateAboutPoint(VuVec const&, int)
ClipLineManager::ShiftClipLineIn(float, VuVec const&)
ClipLine::Translate(VuVec const&)
ClipLineManager::ShiftClipLineOut(float)
ClipLineManager::ShiftClipLineAlongNormal(float)
ClipLine::GetNormal() const
ClipLineManager::MoveClipLineOutAlongNormal(float)
ClipLineManager::MoveClipLineInAlongNormal(float)
ClipLineManager::StoreClipLineOffscreenInfo()
ClipLineManager::ResetDropoutSpeed()
ClipLineManager::GetDropOutSpeed() const
ClipLine::ClipLine()
ClipLine::SetPoints(VuVec const&, VuVec const&)
ClipLine::ClipLine(VuVec const&, VuVec const&)
ClipLine::SetPoint(int, VuVec const&)
ClipLine::SetFromOriginAndOffset(VuVec const&, VuVec const&)
ClipLine::GetPoint(int) const
ClipLine::GetLineX0Y0X1Y1(float&, float&, float&, float&) const
ClipLine::GetQuadTriStripAtOffset(VuVec (&) [4], float, float) const
ClipLine::CalculateQuadTriStripAtOffset(VuVec (&) [4], VuVec const&, VuVec const&, VuVec const&, float)
ClipLine::CalculateTriSegStripAtOffset(VuVec (&) [4], VuVec const&, VuVec const&, VuVec const&, VuVec const&, float)
ClipLine::RenderQuad(VuVec const (&) [4], unsigned int, NuSmartPtr<NuMtl, true>)
ClipLine::GetClipLineParams(int, int&, float&)
ClipLine::ClampToScreen()
ClipLine::ClampPointToScreen(VuVec&)
ClipLine::GetReverse() const
ClipLine::NuPrimRender(unsigned int) const
clampToEdge(VuVec&, int)
ClipLineManager::ClipLineToScreen(ClipLine const&, ClipLine&, bool, int&)
ClipLineManager::Process(float)
ClipLineManager::IsLineOnScreen(ClipLine const&)
ClipLineManager::TranslateClipLine(VuVec const&)
ClipLineManager::SetState(ClipLineState&)
ClipLineManager::ClipClipLineToScreen()
ClipLineManager::SetClipLineClamped(ClipLine&)
ClipLineManager::GetClipLineFromNormal(VuVec const&)
ClipLineManager::CalculateOpposingNormalsToClipLine(ClipLine const&, VuVec const&, VuVec const&, VuVec&, VuVec&)
ClipLineStateStatic::Process(ClipLineManager&, float)
ClipLineStateShiftOut::Process(ClipLineManager&, float)
ClipLineStateShiftIn::Process(ClipLineManager&, float)
ClipLineStateWipe::EnterState(ClipLineManager&)
ClipLineStateWipe::MoveCliplineToWipeStartPos(ClipLineManager&)
ClipLineStateWipe::MoveCliplineToWipeEndPos(ClipLineManager&)
ClipLineStateWipe::Process(ClipLineManager&, float)
ClipLineStateWipe::ClipLineStateWipe(VuVec const&)
Rotations2D::IsShortestRouteClockwise(NuVector3Base const&, NuVector3Base const&)
Rotations2D::IsShortestRouteClockwise(NuVector3Base const&, NuVector3Base const&, NuVector3Base&)
Rotations2D::GetPercentageRotFromTo(NuVector3Base const&, NuVector3Base const&, float, bool)
ClipLineRotationInterpolator::GetInterpolatedClipLineAt(float) const
ClipLineRotationInterpolator::GetIsShortestRouteClockWise() const
ClipLineStateStatic::~ClipLineStateStatic()
ClipLineState::EnterState(ClipLineManager&)
ClipLineState::ExitState(ClipLineManager&)
ClipLineStateShiftIn::~ClipLineStateShiftIn()
ClipLineStateShiftOut::~ClipLineStateShiftOut()
ClipLineStateWipe::~ClipLineStateWipe()
cNewSplitScreenInfo::RenderNuPrim2DCircle(NuSmartPtr<NuPrimContext2D, false> const&, VuVec const&, float, int, float, VuVec const&, VuVec const&, unsigned int)
cNewSplitScreenInfo::RenderCircle(VuVec const&, float, float)
EvaluateCubicBezierFromControlPointsAtT(NuMatrixBase const&, float)
cNewSplitScreenInfo::CalculateOrb(float)
cNewSplitScreenInfo::GetSplitRatio() const
cNewSplitScreenInfo::OrbParams::UpdateFixedOrbRestParameters()
cNewSplitScreenInfo::OrbParams::GetBoundingBox(cNewSplitScreenInfo::OrbParams::eReferenceFrame, unsigned int) const
cNewSplitScreenInfo::OrbParams::SetSourceFrameToCompositeFrameTranslation(VuVec const&)
cNewSplitScreenInfo::ScreenBox::GetCentre() const
cNewSplitScreenInfo::OrbParams::GetOrbRadius() const
cNewSplitScreenInfo::OrbParams::GetFixedOrbRestPosition() const
cNewSplitScreenInfo::SetCameraParameters(VuMtx const&, float, float, float, float)
cNewSplitScreenInfo::IsOrb() const
cNewSplitScreenInfo::IsOrbOnScreen() const
cNewSplitScreenInfo::GetSrcViewportForOrb(VuVec&) const
cNewSplitScreenInfo::GetDstViewportForOrb(VuVec&) const
cNewSplitScreenInfo::SetPlayerViewportOffset(VuVec const&)
cNewSplitScreenInfo::EnsureViewportOnscreen(VuVec&, float, float)
cNewSplitScreenInfo::SetOrbState(OrbState const&)
cNewSplitScreenInfo::GetCameraInterpolant() const
cNewSplitScreenInfo::GetFOVInterpolant() const
cNewSplitScreenInfo::SetOrbTransitionDuration(float)
cNewSplitScreenInfo::GetSegmentDrawPos() const
cNewSplitScreenInfo::GetOrbClipLine(VuVec&, VuVec&, float) const
cNewSplitScreenInfo::OrbParams::GetOrbCentre(cNewSplitScreenInfo::OrbParams::eReferenceFrame, int) const
cNewSplitScreenInfo::Render()
cNewSplitScreenInfo::RenderQuad()
cNewSplitScreenInfo::Reset()
cNewSplitScreenInfo::ResetSegmentScreenPositionsToFullScreen()
cNewSplitScreenInfo::ResetDropout()
cNewSplitScreenInfo::ResetCameraBlendInterpolator()
cNewSplitScreenInfo::SetScreenUpperRatio()
cNewSplitScreenInfo::SetScreenLowerRatio()
cNewSplitScreenInfo::GetSplitDirectionDeterminationPos()
cNewSplitScreenInfo::SetSegmentPoints(VuVec const*, int)
cNewSplitScreenInfo::TransformPosToScreen(NUVEC const&, NUVEC&)
cNewSplitScreenInfo::GetNuCamera()
cNewSplitScreenInfo::TransformPosToScreen(VuVec const&, VuVec&)
cNewSplitScreenInfo::Clamp2DPointInsideScreenSafeArea(VuVec const&, eCoordSys, VuVec&, eCoordSys)
cNewSplitScreenInfo::ClampLineToScreenSafeArea(VuVec const&, VuVec const&, eCoordSys, VuVec&, VuVec&, eCoordSys, float)
cNewSplitScreenInfo::Clamp2DCursorPointInsideSegment(VuVec const&, eCoordSys, VuVec&, eCoordSys, VuVec&, float)
cNewSplitScreenInfo::Clamp2DPointInsideSegment(VuVec const&, eCoordSys, VuVec&, eCoordSys, float)
cNewSplitScreenInfo::Clamp3DPointToSegmentSafeArea(VuVec const&, VuVec&, eCoordSys, bool, float*, float)
cNewSplitScreenInfo::RenderQuadAsTriList(NuSmartPtr<NuMtl, true>, unsigned int, VuVec const&)
cNewSplitScreenInfo::RenderSegmentDbg(unsigned int, NuSmartPtr<NuMtl, true>)
cNewSplitScreenInfo::RenderScreenCentreToSplitCentre()
cNewSplitScreenInfo::CreateInstanceMaterials()
cNewSplitScreenInfo::IsCircleCentreOnScreen(VuVec&) const
cNewSplitScreenInfo::FindNearestScreenCorner(VuVec const&)
cNewSplitScreenInfo::OffsetCornerByRadius(VuVec&, float)
cNewSplitScreenInfo::ClampOrbToScreenEdges(VuVec const&, float, float)
cNewSplitScreenInfo::cNewSplitScreenInfo(cNewSplitScreenManager&)
cNewSplitScreenInfo::~cNewSplitScreenInfo()
cNewSplitScreenInfo::~cNewSplitScreenInfo()
cNewSplitScreenInfo::GetCamPos() const
cNewSplitScreenInfo::SetCamPos(VuVec const&)
cNewSplitScreenInfo::RequestSlideIn()
cNewSplitScreenInfo::ClearSlideInRequest()
cNewSplitScreenInfo::IsSlideInRequested() const
cNewSplitScreenInfo::ProcessSegmentSlideInRequests()
cNewSplitScreenInfo::GetOrbBBForCompositeScreenPostPushToBoundaryModifications() const
cNewSplitScreenInfo::ScreenBox::GetTopLeft() const
cNewSplitScreenInfo::ScreenBox::Width() const
cNewSplitScreenInfo::ScreenBox::Height() const
cNewSplitScreenInfo::GetSafeBoundaryIntersectWithCirclePath(VuVec const&, VuVec const&, float, float, VuVec&) const
cNewSplitScreenInfo::ScreenBox::IntersectLineWithBoundary(VuVec const&, VuVec const&, float&) const
cNewSplitScreenInfo::CalculateSplitInfoFromClipline(ClipLine const&, float)
cNewSplitScreenInfo::CalculateSegmentPolygonFromClipline(ClipLine const&)
WhichSideOf(VuVec const&, VuVec const&, VuVec const&)
cNewSplitScreenInfo::Is2DPointWithinSegmentPolygon(VuVec const&)
cNewSplitScreenInfo::ShouldPulseThisFrame() const
cNewSplitScreenInfo::Process(float)
cNewSplitScreenInfo::GetDropoutInterpolant() const
cNewSplitScreenInfo::UpdateDropoutTimer(float)
cNewSplitScreenInfo::IsDropoutComplete() const
cNewSplitScreenInfo::IsScreenIntersectPosOnWrongSideOfClipLine() const
cNewSplitScreenInfo::IsOrbOnRightSideOfReferenceClipLine() const
cNewSplitScreenInfo::SetSplitRatioBasedOnDistance(float)
SharedNuEffectTex2D::SharedNuEffectTex2D(int, int, int, int, NUTEXFORMAT, NuSmartPtr<NuTexture, true>*)
SharedNuEffectTex2D::~SharedNuEffectTex2D()
RCNuEffectTex2DWrapper::RCNuEffectTex2DWrapper(int, int, int, int, NUTEXFORMAT, NuSmartPtr<NuTexture, true>*)
RCNuEffectTex2DWrapper::~RCNuEffectTex2DWrapper()
RCNuEffectTex2DWrapper::~RCNuEffectTex2DWrapper()
cNewSplitScreenInfo::ScreenBox::ScreenBox(VuVec const&, VuVec const&)
cNewSplitScreenInfo::ScreenBox::ScreenBox(cNewSplitScreenInfo::ScreenBox const&)
cNewSplitScreenInfo::ScreenBox::GetBottomRight() const
cNewSplitScreenInfo::ScreenBox::Translate(VuVec const&)
cNewSplitScreenInfo::ScreenBox::Intersection(cNewSplitScreenInfo::ScreenBox const&)
cNewSplitScreenInfo::ScreenBox::IsValid(VuVec const&, VuVec const&)
cNewSplitScreenInfo::ScreenBox::SetTopLeft(VuVec const&)
cNewSplitScreenInfo::ScreenBox::SetBottomRight(VuVec const&)
cNewSplitScreenInfo::ScreenBox::RenderDebug(unsigned int) const
cNewSplitScreenInfo::ScreenBox::CircleIntersection(VuVec const&, float)
cNewSplitScreenInfo::ScreenBox::GetCorner(int) const
cNewSplitScreenInfo::ScreenBox::ContainsPoint(VuVec const&) const
GetNextMultiple(unsigned int, unsigned int)
cNewSplitScreenInfo::OrbParams::GetSourceFrameToCompositeFrameTranslation() const
cNewSplitScreenInfo::OrbParams::SetOrbSlideOffscreenDuration(float, float)
cNewSplitScreenInfo::OrbParams::UpdateOrbSlideOffscreen(float)
cNewSplitScreenInfo::OrbParams::GetOrbSlideOffscreenSpeed() const
cNewSplitScreenInfo::OrbParams::GetOrbSlideOffscreenDirection() const
cNewSplitScreenInfo::OrbParams::SetOrbSlideOffscreenDirection(float)
cNewSplitScreenInfo::OrbParams::IsOrbSlideOffscreenComplete() const
cNewSplitScreenInfo::OrbParams::OrbParams(cNewSplitScreenInfo const*)
cNewSplitScreenInfo::OrbParams::StaticInitialise()
cNewSplitScreenInfo::OrbParams::IsOrbSlideOnscreenComplete() const
cNewSplitScreenInfo::OrbParams::OrbSlideOffscreenReset()
cNewSplitScreenInfo::OrbParams::SetFixedOrbRestPosition(VuVec const&)
cNewSplitScreenInfo::OrbParams::SetFixedOrbRestRadius(float)
cNewSplitScreenInfo::OrbParams::GetOrbSlideOffscreenDistance() const
cNewSplitScreenInfo::OrbParams::GetFixedOrbRestRadius() const
cNewSplitScreenInfo::OrbParams::GetClipLineRotationInterpolator() const
cNewSplitScreenInfo::OrbParams::GetClipLineRotationInterpolator()
cNewSplitScreenInfo::OrbParams::GetScreenCircleInterpolator()
cNewSplitScreenInfo::OrbParams::SetOrbRimOuterColour(unsigned int)
cNewSplitScreenInfo::OrbParams::GetOrbRimOuterColour()
cNewSplitScreenInfo::OrbParams::SetOrbFlashType(cNewSplitScreenInfo::OrbParams::eOrbFlashType)
cNewSplitScreenInfo::OrbParams::GetOrbFlashType()
cNewSplitScreenInfo::OrbParams::GetOrbFlashValMin()
cNewSplitScreenInfo::OrbParams::GetOrbFlashValMax()
cNewSplitScreenInfo::OrbParams::PutOrbOffscreen()
cNewSplitScreenInfo::GetModifiedFOV(float)
RCPtr<RCNuEffectTex2DWrapper>::init()
SplitScreenMaterials::~SplitScreenMaterials()
RCPtr<RCNuEffectTex2DWrapper>::~RCPtr()
cNewSplitScreenManager::DestroyLevelView(LevelView*)
cNewSplitScreenManager::SetSplitStage(cNewSplitScreenManager::eSplitStage)
cNewSplitScreenManager::CreateSplitScreenLevelView(NuCamera*, short, float, float, float, float)
cNewSplitScreenManager::CreateStandardLevelView(NuCamera*, float, float, float, float)
cNewSplitScreenManager::cNewSplitScreenManager(LevelContainer&)
cNewSplitScreenManager::GetOrCreateSharedTexture()
cNewSplitScreenManager::Reset()
cNewSplitScreenManager::DestroyFades()
cNewSplitScreenManager::DestroyAllDynamicSplitScreenLevelViews()
cNewSplitScreenManager::TurnOnSplitScreen(cNewSplitScreenManager::eMode)
cNewSplitScreenManager::SetMode(cNewSplitScreenManager::eMode)
cNewSplitScreenManager::TurnOffSplitScreen()
cNewSplitScreenManager::Destroy()
cNewSplitScreenManager::DestroyMaterials()
cNewSplitScreenManager::ExitLevel()
cNewSplitScreenManager::DeregisterImposeParams()
cNewSplitScreenManager::PreModeSwitch(cNewSplitScreenManager::eMode)
cNewSplitScreenManager::ProcessSplitStageInternal(float const&)
cNewSplitScreenManager::SetState(SplitScreenState const&)
cNewSplitScreenManager::DeallocateResourcesForState(SplitScreenState&)
cNewSplitScreenManager::GetAspectRatio()
cNewSplitScreenManager::ScreenToAbsolute(VuVec const&, VuVec&)
cNewSplitScreenManager::ScreenToNormalised(VuVec const&, VuVec&)
cNewSplitScreenManager::AbsoluteToScreen(VuVec const&, VuVec&)
cNewSplitScreenManager::AbsoluteToNormalised(VuVec const&, VuVec&)
cNewSplitScreenManager::NormalisedToAbsolute(VuVec const&, VuVec&)
cNewSplitScreenManager::NormalisedToScreen(VuVec const&, VuVec&)
cNewSplitScreenManager::ConvertCoordinate(VuVec const&, eCoordSys, VuVec&, eCoordSys)
cNewSplitScreenManager::ClipTestSphere(NUVEC const*, float, NUMTX const*)
cNewSplitScreenManager::IsSplitting() const
cNewSplitScreenManager::GetSplitScreenInfoForSegmentIndex(short) const
cNewSplitScreenManager::ClipTestSphere(VuVec const*, float, VuMtx const*)
cNewSplitScreenManager::ClipTestSphere(VuVec const&, float, VuMtx const&)
cNewSplitScreenManager::RenderLine2D(float, float, float, float, NuSmartPtr<NuMtl, true>, unsigned int)
cNewSplitScreenManager::RenderLine2D(VuVec const&, VuVec const&, NuSmartPtr<NuMtl, true>, unsigned int)
cNewSplitScreenManager::RenderCross(VuVec const&, unsigned int, float)
cNewSplitScreenManager::RenderComposite(LevelView*)
cNewSplitScreenManager::RenderSplitLine(NuSmartPtr<NuMtl, true>)
cNewSplitScreenManager::GetState() const
cNewSplitScreenManager::ProcessSplitLineBlend(float const&)
cNewSplitScreenManager::GetSplitStage() const
cNewSplitScreenManager::IsSplittingInternal()
cNewSplitScreenManager::CanSplit() const
cNewSplitScreenManager::IsSplit() const
cNewSplitScreenManager::RenderQuad(VuVec const&, float, float, NuSmartPtr<NuMtl, true>, unsigned int, bool)
cNewSplitScreenManager::GetSplitScreenInfoAnyValid() const
cNewSplitScreenManager::CanGrabStillScreen() const
cNewSplitScreenManager::CanGrabStillScreenInternal() const
cNewSplitScreenManager::GetLastRenderPipeIndex() const
cNewSplitScreenManager::GetRenderPipeIndexForSplitScreenInfo(cNewSplitScreenInfo*) const
cNewSplitScreenManager::CanDoClipping() const
cNewSplitScreenManager::ClearRenderPipes()
cNewSplitScreenManager::SetSplitReferenceCam(NuCamera const&, NUVEC const&)
ProjectedScreenPositionManager::SetSplitReferenceCam(NuCamera const&)
cNewSplitScreenManager::SetSplitReferenceCamClamped(NuCamera const&)
ProjectedScreenPositionManager::SetSplitReferenceCamClamped(NuCamera const&)
ProjectedScreenPositionManager::CalculateSplitDirectionCamFull360Rot(NuCamera const&, NuCamera const&, NuCamera&, VuVec&)
ProjectedScreenPositionManager::UpdateSplitDirectionCam(cNewSplitScreenManager const&, NuCamera const&, NuCamera const&)
ProjectedScreenPositionManager::CalculateSplitDirectionCamAverageCam(NuCamera const&, NuCamera const&, NuCamera&, VuVec&)
cNewSplitScreenManager::SetDebugSplitCamera()
cNewSplitScreenManager::ToggleSplitCamDebugFlag(cNewSplitScreenManager::eSplitCamDebugFlag)
cNewSplitScreenManager::SetSplitCamDebugFlag(cNewSplitScreenManager::eSplitCamDebugFlag, bool)
cNewSplitScreenManager::IsSplitCamDebugFlagSet(cNewSplitScreenManager::eSplitCamDebugFlag)
cNewSplitScreenManager::ClearSplitCamDebugFlags()
cNewSplitScreenManager::ProcessSplitCamDebugFlags()
cNewSplitScreenManager::TransformPosToScreen(short, NUVEC const&, NUVEC&)
cNewSplitScreenManager::TransformPosToScreen(short, VuVec const&, VuVec&)
cNewSplitScreenManager::ProcessPostGameCamSetup()
cNewSplitScreenManager::CalculatePlayerPosScreen(VuVec const&, VuVec&, VuMtx const&)
cNewSplitScreenManager::StoreSegmentCamInfoIfNeeded(short)
cNewSplitScreenManager::GetPlayerCamera(short)
cNewSplitScreenManager::MiniCutActiveOnSecondPipe() const
cNewSplitScreenManager::InMiniCutStage() const
cNewSplitScreenManager::SetHorizontalSplitUpperSegmentIndex(short)
cNewSplitScreenManager::SetVerticalSplitLeftSegmentIndex(short)
UpdateAndReplaceFade(LevelViewFade*&, float)
cNewSplitScreenManager::UpdateSegmentFades(float const&)
cNewSplitScreenManager::GetLevelViewFromSplitScreenIndex(short) const
cNewSplitScreenManager::UpdateSplitPlane()
cNewSplitScreenManager::GetRenderPipeIndexFromSegmentIndex(short)
cNewSplitScreenManager::MaintainPerFrameTrackingMetrics()
cNewSplitScreenManager::Process(float const&, bool)
cNewSplitScreenManager::SetDynamicCoopSubMode(cNewSplitScreenManager::eDynamicCoopSubMode)
cNewSplitScreenManager::GetRequestedDynamicCoopSubMode()
cNewSplitScreenManager::TransitionToDynamicSplit()
cNewSplitScreenManager::GetOrbDSLevelView() const
cNewSplitScreenManager::IsInAnOrbMode() const
cNewSplitScreenManager::UpdatePulseTimers(float)
cNewSplitScreenManager::UpdateDynamicSplitSubModeInterpolator(float)
cNewSplitScreenManager::LevelViewCleanupInternal()
cNewSplitScreenManager::CollectTrackingMetrics()
cNewSplitScreenManager::ProcessSplitStage(float const&)
cNewSplitScreenManager::SetSplitStageReset()
cNewSplitScreenManager::ResetDropOutWindowInfo()
cNewSplitScreenManager::SetClipLineInitialised(bool)
cNewSplitScreenManager::ResetSplitTriggerInfo()
cNewSplitScreenManager::ResetSegmentsToFullScreen()
cNewSplitScreenManager::ResetActiveSplitScreenInfo()
cNewSplitScreenManager::UpdateSplitScreenInfo()
cNewSplitScreenManager::InitForMiniCutBlendOut()
cNewSplitScreenManager::UpdateSplitTriggerInfo(float)
cNewSplitScreenManager::SetSplitBlends(float const&)
cNewSplitScreenManager::CalcClipLineInternal(float const&, bool)
cNewSplitScreenManager::SetSplitSegments()
cNewSplitScreenManager::SetSegmentDrawPositions(float const&)
cNewSplitScreenManager::ShiftClipLine(float const&)
cNewSplitScreenManager::InitForMiniCutBlendOutInternal()
cNewSplitScreenManager::InitForMiniCutBlendIn(short, float, float)
cNewSplitScreenManager::InitForMiniCutBlendInInternal(short, float, float)
cNewSplitScreenManager::SetDropOutInfo(short)
cNewSplitScreenManager::SetDropOut(short)
cNewSplitScreenManager::SetDropOutInternal(short)
cNewSplitScreenManager::SetDropOutDir(cNewSplitScreenInfo*)
cNewSplitScreenManager::SetSegmentScreenPositions()
cNewSplitScreenManager::GetHorizontalSplitScreenPositions(short, VuVec&, VuVec&)
cNewSplitScreenManager::GetVerticalSplitScreenPositions(short, VuVec&, VuVec&)
cNewSplitScreenManager::SetMaxSplitAngle(float)
cNewSplitScreenManager::SetSplitOffsetAngle(float)
cNewSplitScreenManager::GetDynCoopSubModeState() const
cNewSplitScreenManager::GetCameraAxisFromMtx(VuMtx const&, VuVec&, VuVec&, VuVec&)
ProjectedScreenPositionManager::CalculateDistDownCamAdjustments(VuMtx const&, VuVec const&, VuVec const&, float, VuVec&, VuVec&, VuVec&)
cNewSplitScreenManager::ProjectWorldToScreenAbsolute(NUMTX const&, VuVec const&, VuVec&)
ProjectedScreenPositionManager::UpdateFocusObjectScreenSeparation(VuVec const&, VuVec const&)
cNewSplitScreenManager::RenderText2D(float, float, unsigned int, float, char const*, ...)
ShrinkBox(VuVec const&, VuVec&)
RenderBoxWireframe(VuVec const&, unsigned int)
cNewSplitScreenManager::RenderDbg2D(NuSmartPtr<NuMtl, true>)
cNewSplitScreenManager::RenderDbg3DCameras()
cNewSplitScreenManager::RenderDbg3D(LevelView*)
cNewSplitScreenManager::SetupRenderPipes()
cNewSplitScreenManager::SetupEditorRenderPipes(NuCamera*)
cNewSplitScreenManager::SetupRenderPipesInternal()
cNewSplitScreenManager::CleanupSplitScreenRenderPipesFromPreviousFrame(float&)
cNewSplitScreenManager::AssignSplitScreenViewsToRenderPipes(int&)
cNewSplitScreenManager::RegisterDRCPipe(NuRenderPipe*)
cNewSplitScreenManager::DestroySplitScreenInfoResources()
cNewSplitScreenManager::SetPlayerCamera(VirtualSplitScreenCamera*, short)
FrozenCamera::FreezeCamera(VirtualSplitScreenCamera&)
cNewSplitScreenManager::CameraChangeCheck(VirtualSplitScreenCamera const*, short)
cNewSplitScreenManager::SetPlayerSplitDecisionCamera(VirtualSplitScreenCamera*, short)
cNewSplitScreenManager::SetPlayerSplitDecisionCameraInternal(VirtualSplitScreenCamera*, short)
cNewSplitScreenManager::SetPlayerSplitFinalCamera(VirtualSplitScreenCamera*, short)
cNewSplitScreenManager::SetPlayerSplitFinalCameraInternal(VirtualSplitScreenCamera*, short)
cNewSplitScreenManager::DynamicCoopSubmodeStateToEnum(DynamicCoopSubmodeState const&)
cNewSplitScreenManager::SetRequestedDynamicCoopSubMode(cNewSplitScreenManager::eDynamicCoopSubMode)
cNewSplitScreenManager::DynamicCoopSubmodeEnumToState(cNewSplitScreenManager::eDynamicCoopSubMode)
cNewSplitScreenManager::SetDynCoopSubModeState(DynamicCoopSubmodeState const&)
cNewSplitScreenManager::ForcePermanentSplit(bool)
cNewSplitScreenManager::IsInTransition() const
cNewSplitScreenManager::FadeSegmentDownThenUp(short, float)
cNewSplitScreenManager::FadeSegment(short, float, cNewSplitScreenManager::eFadeType, unsigned int)
cNewSplitScreenManager::GetRenderPipeIndexAnyValid()
DynamicSplitScreenLevelView::~DynamicSplitScreenLevelView()
DynamicSplitScreenLevelView::~DynamicSplitScreenLevelView()
DynamicSplitScreenLevelView::GetOriginalCamera()
DynamicSplitScreenLevelView::DynamicSplitScreenLevelView(cNewSplitScreenManager&, short)
DynamicSplitScreenLevelView::IsValid() const
DynamicSplitScreenLevelView::GetNuCamera() const
WithinDistanceOf(float, float, float)
cNewSplitScreenManager::TurnOffOrbForAllSegments()
cNewSplitScreenManager::GetNonOrbDSLevelView() const
cNewSplitScreenManager::RequestTransitionToDynamicSplit()
cNewSplitScreenManager::TransitionSegmentIntoOrb(short, float)
cNewSplitScreenManager::SetOrbTransitionDuration(float)
cNewSplitScreenManager::SetOrbTargetRadius(float)
cNewSplitScreenManager::WhichOffscreenZone(VuVec const&)
cNewSplitScreenManager::MapOffscreenZoneToScreenCornersViaCCWSweep(cNewSplitScreenManager::eOutsideScreenZone, VuVec&, VuVec&)
cNewSplitScreenManager::~cNewSplitScreenManager()
cNewSplitScreenManager::DestroyAllLevelViews()
FrozenCamera::~FrozenCamera()
cNewSplitScreenManager::~cNewSplitScreenManager()
cNewSplitScreenManager::SetProcessingPaused(int)
cNewSplitScreenManager::CalculateProjectedScreenPosAbs(NuCamera const&, VuVec const&, VuVec const&, VuVec&, VuVec&)
cNewSplitScreenManager::SetNextState()
cNewSplitScreenManager::GetStateName() const
cNewSplitScreenManager::DroppingOut2ndPlayerWithOneVisibleSegment() const
cNewSplitScreenManager::InDynCoopWithOnlyOneVisibleSegment() const
cNewSplitScreenManager::SetupJustOneRenderPipe(int, DynamicSplitScreenLevelView*)
cNewSplitScreenManager::GetRenderPipeUsingInternalIndexing(int)
cNewSplitScreenManager::SegmentFullyOffscreenDuringMinicut() const
cNewSplitScreenManager::AllocateResourcesForState(SplitScreenState&)
cNewSplitScreenManager::IsStateInitialised(SplitScreenState const&)
cNewSplitScreenManager::DeallocateResources()
cNewSplitScreenManager::ReleaseUnusedResources()
cNewSplitScreenManager::CreateFadeMaterial(NuSmartPtr<NuMtl, true>&)
cNewSplitScreenManager::SetFirstGamePipe(int, NuRenderPipe*, NuRenderPipe*)
cNewSplitScreenManager::GetSharedNuEffectTexWrapper()
cNewSplitScreenManager::SetStateInitialised(SplitScreenState const&, bool)
cNewSplitScreenManager::EnterLevel()
cNewSplitScreenManager::RegisterImposeParams()
cNewSplitScreenManager::SlideInSegment(short)
cNewSplitScreenManager::CreateSplitlineMaterial(NuSmartPtr<NuMtl, true>&, char const*)
cNewSplitScreenManager::CreateGlowMaterial(NuSmartPtr<NuMtl, true>&, char const*)
cNewSplitScreenManager::GetCutsceneCameraManager()
cNewSplitScreenManager::ShouldDisableHUDPanelForSegment(short) const
cNewSplitScreenManager::SetOrbRenderPosition(cNewSplitScreenManager::eOrbRenderPosition)
cNewSplitScreenManager::GetOrbRenderPosition() const
cNewSplitScreenManager::CalculateViewportInfoForSegment(unsigned int, float&, float&, float&, float&, float&, float&, float&, float&) const
cNewSplitScreenManager::SetupPortals() const
cNewSplitScreenManager::SetupRenderPipeCameras(bool) const
cNewSplitScreenManager::GetPostEffectsLerp() const
cNewSplitScreenManager::GetDRCLevelView()
cNewSplitScreenManager::SetUsing3rdPerson(bool, NUMTX*, float, int)
cNewSplitScreenManager::IsDroppingOut() const
cNewSplitScreenManager::GetDropOutInterpolant() const
cNewSplitScreenManager::GetPercentageRotFromTo(NuVector3Base const&, NuVector3Base const&, float)
cNewSplitScreenManager::SetOrbRimOuterColour(unsigned int)
ScreenPositionInterpolator::Update(float)
ScreenPositionInterpolator::GetTargetDirectionToSeg0AbsScreenSpace() const
DynSplitInterpolator::GetCameraBlendInterpolant() const
ScreenPositionInterpolator::GetCurrentDirectionToSeg0AbsScreenSpace() const
ScreenPositionInterpolator::InitialiseUsingShortestRoute(VuVec const&, VuVec const&)
ScreenPositionInterpolator::SetTransitionDuration(float const&)
ScreenPositionInterpolator::SetTargetDirectionToSeg0AbsScreenSpace(VuVec const&)
cNewSplitScreenManager::CalculateSegmentScreenPositions(VuVec&, VuVec&)
ScreenPositionInterpolator::GetScreenPositions(VuVec&, VuVec&) const
cNewSplitScreenManager::CalculateDynamicSplitTargetBlend() const
cNewSplitScreenManager::Get2DSeperationDistPastFullSplit() const
cNewSplitScreenManager::FadeSegmentDown(short, float)
cNewSplitScreenManager::FadeSegmentUp(short, float)
cNewSplitScreenManager::MaintainFade(short)
cNewSplitScreenManager::IsFadeComplete(short) const
cNewSplitScreenManager::IsFadeComplete(short, cNewSplitScreenManager::eFadeType) const
cNewSplitScreenManager::NuColourLerp(NuColour const&, NuColour const&, float)
cNewSplitScreenManager::IsFadeInProgress() const
cNewSplitScreenManager::IsFadeInProgress(cNewSplitScreenManager::eFadeType) const
cNewSplitScreenManager::HasFadeStarted(short) const
cNewSplitScreenManager::GetDynamicCoopSubMode()
cNewSplitScreenManager::SetDownCamDistEffectRatio(float const&)
cNewSplitScreenManager::SetIgnoreDistDownCam(bool)
cNewSplitScreenManager::SetOrbFlashValue(float)
cNewSplitScreenManager::DoDynCoopSnapCameraBlend()
DynamicCoopSubmodeOrientByProjectedScreenPosition::GetCameraBlendInterpolant(cNewSplitScreenManager&) const
cNewSplitScreenManager::GetSegmentSplitBlends(float&, float&)
cNewSplitScreenManager::PreProcess(float const&)
cNewSplitScreenManager::AllocatePersistentResources()
SplitScreenMaterials::Allocate()
CutsceneCameraManager::GetState()
CutsceneCameraManager::SetState(CutsceneDualCameraManagerState const&)
CutsceneCameraManager::Process(float)
CutsceneCameraManager::GetSplitScreenManager()
CutsceneCameraManager::CalculateSplitNuCameras()
CutsceneDualCameraManagerBasicWipeState::Process(CutsceneCameraManager&, float const&)
CutsceneDualCameraManagerBasicWipeState::CalculateSplitNuCameras(CutsceneCameraManager&)
CutsceneDualCameraManagerSlideInToVerticalSplitState::Process(CutsceneCameraManager&, float const&)
CutsceneDualCameraManagerSlideInToVerticalSplitState::CalculateSplitNuCameras(CutsceneCameraManager&)
DynSplitMiniCutBlendParams::ResetToDefaults()
DynSplitMiniCutBlendParams::Update(float, DynSplitMiniCutBlendParams::eMode, float, float)
ScreenPositionInterpolator::GetInterpolant() const
ScreenPositionInterpolator::GetReferenceDirectionToSeg0AbsScreenSpace() const
ScreenPositionInterpolator::ClampToNearestVertical(VuVec const&)
ScreenPositionInterpolator::ResetTimer()
ScreenPositionInterpolator::SetReferenceDirectionToSeg0AbsScreenSpace(VuVec const&)
ScreenPositionInterpolator::LockRotationToShortestRoute()
ScreenPositionInterpolator::SetTransitionDirection(float const&)
ScreenPositionInterpolator::IsFinished() const
ScreenPositionInterpolator::GetTransitionDirection() const
ScreenPositionInterpolator::GetTransitionDuration() const
ScreenPositionInterpolator::MaxOutTimer()
DynamicCoopSubmodeOrientByProjectedScreenPosition::CalculateScreenPositions(cNewSplitScreenManager&, VuVec&, VuVec&)
DynamicCoopSubmodeBlendToHorizontal::GetCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeOrientByProjectedScreenPosition::SplitThresholdReached(cNewSplitScreenManager&) const
DynamicCoopSubmodeOrientByProjectedScreenPosition::SnapToRequestedCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeForcedHorizontal::CalculateScreenPositions(cNewSplitScreenManager&, VuVec&, VuVec&)
DynamicCoopSubmodeForcedHorizontal::EnterState(cNewSplitScreenManager&)
DynamicCoopSubmodeForcedVertical::CalculateScreenPositions(cNewSplitScreenManager&, VuVec&, VuVec&)
DynamicCoopSubmodeForcedVertical::EnterState(cNewSplitScreenManager&)
DynamicCoopSubmodeBlendToHorizontal::SplitThresholdReached(cNewSplitScreenManager&) const
DynamicCoopSubmodeBlendToHorizontal::CalculateScreenPositions(cNewSplitScreenManager&, VuVec&, VuVec&)
DynamicCoopSubmodeBlendToHorizontal::SnapToRequestedCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeBlendToForcedHorizontal::CalculateScreenPositions(cNewSplitScreenManager&, VuVec&, VuVec&)
DynamicCoopSubmodeBlendToForcedHorizontal::EnterState(cNewSplitScreenManager&)
DynamicCoopSubmodeBlendToForcedVertical::CalculateScreenPositions(cNewSplitScreenManager&, VuVec&, VuVec&)
DynamicCoopSubmodeBlendToForcedVertical::EnterState(cNewSplitScreenManager&)
DynamicCoopSubmodeStateAbstractBase::EnterState(cNewSplitScreenManager&)
DynamicCoopSubmodeStateAbstractBase::ForceInterpolatorToCurrentSettings(cNewSplitScreenManager&)
InterpolatorTimed::GetInterpolant() const
InterpolatorTimed::Update(float)
InterpolatorTimed::Reset()
InterpolatorTimed::ForceComplete()
InterpolatorTimed::GetDuration() const
InterpolatorTimed::SetDuration(float const&)
SplitScreenTrackingMetrics::Render(SplitScreenTrackingMetrics const*, NuVector3Base&, NuVector3Base&)
SplitScreenTrackingMetrics::DeleteMetricsList(SplitScreenTrackingMetrics*)
SplitScreenTrackingMetrics::SplitScreenTrackingMetrics()
SplitScreenMaterials::Deallocate()
cNewSplitScreenManager::SetDRCPipe(int, NuRenderPipe*)
cNewSplitScreenManager::CreateDRCCamera()
DRCLevelView::DRCLevelView()
DRCLevelView::~DRCLevelView()
DRCLevelView::~DRCLevelView()
DynamicCoopSubmodeStateAbstractBase::ExitState(cNewSplitScreenManager&)
DynamicCoopSubmodeForcedHorizontal::GetCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeForcedHorizontal::SplitThresholdReached(cNewSplitScreenManager&) const
DynamicCoopSubmodeForcedHorizontal::SnapToRequestedCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeForcedHorizontal::GetName()
DynamicCoopSubmodeForcedVertical::GetCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeForcedVertical::SplitThresholdReached(cNewSplitScreenManager&) const
DynamicCoopSubmodeForcedVertical::SnapToRequestedCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeForcedVertical::GetName()
DynamicCoopSubmodeOrientByProjectedScreenPosition::GetName()
DynamicCoopSubmodeBlendToHorizontal::GetName()
DynamicCoopSubmodeBlendToForcedHorizontal::GetCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeBlendToForcedHorizontal::SplitThresholdReached(cNewSplitScreenManager&) const
DynamicCoopSubmodeBlendToForcedHorizontal::SnapToRequestedCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeBlendToForcedHorizontal::GetName()
DynamicCoopSubmodeBlendToForcedVertical::GetCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeBlendToForcedVertical::SplitThresholdReached(cNewSplitScreenManager&) const
DynamicCoopSubmodeBlendToForcedVertical::SnapToRequestedCameraBlendInterpolant(cNewSplitScreenManager&) const
DynamicCoopSubmodeBlendToForcedVertical::GetName()
CutsceneDualCameraManagerBasicWipeState::ExitState(CutsceneCameraManager&)
CutsceneDualCameraManagerBasicWipeState::EnterState(CutsceneCameraManager&)
CutsceneDualCameraManagerBasicWipeState::GetStateName() const
CutsceneDualCameraManagerSlideInToVerticalSplitState::ExitState(CutsceneCameraManager&)
CutsceneDualCameraManagerSlideInToVerticalSplitState::EnterState(CutsceneCameraManager&)
CutsceneDualCameraManagerSlideInToVerticalSplitState::GetStateName() const
cNewSplitScreenManager::GetManagerName() const
FrozenCamera::~FrozenCamera()
FrozenCamera::IsValid()
FrozenCamera::GetNuCamera()
FrozenCamera::GetPosition()
FrozenCamera::GetPointOfInterestPreModifiers()
FrozenCamera::GetPointOfInterestPostModifiers()
FrozenCamera::GetSplitDeterminationPosition()
FrozenCamera::GetMtx()
FrozenCamera::GetAspect()
FrozenCamera::GetFOV()
FrozenCamera::GetFocalDepth()
FrozenCamera::GetFocalDistance()
FrozenCamera::GetNearClip()
FrozenCamera::GetFarClip()
LevelView::RenderFade(cNewSplitScreenManager const&, bool)
LevelViewFade::GetRenderOverHUD() const
LevelView::CreateStaticMaterials()
LevelView::SetupFadeMaterial(NuSmartPtr<NuMtl, true> const&)
LevelView::DestroyStaticMaterials()
LevelView::InitialiseStatics()
LevelView::FlagForDestruction()
LevelView::IsFlaggedForDestruction() const
LevelView::SetFlagForDestruction(bool)
LevelView::ResetPostEffects()
LevelView::LevelView(LevelViewType)
LevelView::~LevelView()
LevelView::~LevelView()
LevelView::Validate() const
LevelView::SetProcessColourParams(NUPROCESSCOLOURPARAMETERS const&)
LevelView::SetDOFParams(NUDOFPARAMETERS const&)
LevelView::SetLensFilterParams(NULENSFILTERPARAMETERS const&)
LevelView::SetExposureParams(NUEXPOSURECONTROLPARAMETERS const&)
LevelView::GetViewportDst(float&, float&, float&, float&) const
LevelView::GetViewportSrc(float&, float&, float&, float&) const
LevelView::SetExcludeFilterBit(LevelView::eFilterBits, bool)
LevelView::SetIncludeFilterBit(LevelView::eFilterBits, bool)
LevelView::IsExcludedByFilter(LevelContainer&)
LevelView::IsIncludedByFilter(LevelContainer&)
LevelViewFade::Update(float const&)
LevelViewFade::IsFadeComplete() const
LevelViewFade::LevelViewFade(LevelView*, float, unsigned int)
LevelViewFade::GetLevelView() const
LevelViewFade::GetAlpha() const
LevelViewFade::GetMaterial() const
LevelViewFade::GetInterpolant() const
LevelViewFade::Render() const
LevelViewFade::IsOfType(unsigned short) const
LevelViewFade::QuantizeWipeDirection(VuVec const&)
LevelViewFade::CreateStaticMaterialsIfNecessary()
LevelViewFadeDown::Update(float const&)
LevelViewFadeDown::GetNextFade() const
LevelViewFadeDown::IsOfType(unsigned short) const
LevelViewFadeDown::LevelViewFadeDown(LevelView*, float, unsigned int)
LevelViewFadeUp::Update(float const&)
LevelViewFadeUp::IsOfType(unsigned short) const
LevelViewFadeUp::LevelViewFadeUp(LevelView*, float, unsigned int)
LevelViewStillScreenFadeDown::GetNextFade() const
LevelViewStillScreenFadeDown::Update(float const&)
LevelViewStillScreenFadeDown::LevelViewStillScreenFadeDown(LevelView*, float, unsigned short)
LevelViewStillScreenFadeDown::ScreenGrabComplete(void*)
LevelViewStillScreenFadeDown::Render() const
LevelViewStillScreenFadeDown::HasFadeStarted() const
LevelViewStillScreenFadeDown::IsOfType(unsigned short) const
LevelViewStillScreenFadeUp::LevelViewStillScreenFadeUp(LevelView*, float, unsigned short, bool)
LevelViewStillScreenFadeUp::ScreenGrabComplete(void*)
LevelViewStillScreenFadeUp::GetNextFade() const
LevelViewStillScreenFadeUp::Update(float const&)
DrawScreenWipe(NuSmartPtr<NuMtl, true> const&, float, unsigned short)
LevelViewStillScreenFadeUp::Render() const
LevelViewStillScreenFadeUp::IsOfType(unsigned short) const
LevelViewFade::GetNextFade() const
LevelViewFade::~LevelViewFade()
LevelViewFade::HasFadeStarted() const
LevelViewFadeDown::~LevelViewFadeDown()
LevelViewFade::~LevelViewFade()
LevelViewStillScreenFadeDown::~LevelViewStillScreenFadeDown()
LevelViewStillScreenFadeUp::~LevelViewStillScreenFadeUp()
LevelViewStillScreenFadeUp::HasFadeStarted() const
LevelViewFadeUp::GetNextFade() const
LevelViewFadeUp::~LevelViewFadeUp()
closestValueSelect(float, float const&, float const&)
OrbStateInactive::EnterState(cNewSplitScreenInfo&)
OrbStateInactive::GetSplitRatio(cNewSplitScreenInfo const&) const
OrbStateInactive::IsSplitting(cNewSplitScreenInfo const&) const
OrbStateInactive::Process(cNewSplitScreenInfo&, float)
OrbStateInactive::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbState::GetSegmentDrawPos(cNewSplitScreenInfo const&) const
OrbStateMainSegmentForceComplete::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateMainSegmentForceComplete::GetSplitRatio(cNewSplitScreenInfo const&) const
OrbStateMainSegmentForceComplete::GetCameraInterpolant(cNewSplitScreenInfo const&) const
OrbStateMainSegmentForceComplete::Process(cNewSplitScreenInfo&, float)
OrbStateExpandingToDynamicSplit::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateExpandingToDynamicSplit::EnterState(cNewSplitScreenInfo&)
OrbStateExpandingToDynamicSplit::GetSegmentDrawPos(cNewSplitScreenInfo const&) const
OrbStateExpandingToDynamicSplit::GetSplitRatio(cNewSplitScreenInfo const&) const
OrbStateExpandingToDynamicSplit::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbStateDynamicSplitExpandingToMainSegment::EnterState(cNewSplitScreenInfo&)
OrbStateDynamicSplitExpandingToMainSegment::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateDynamicSplitExpandingToMainSegment::GetCameraInterpolant(cNewSplitScreenInfo const&) const
OrbStateDynamicSplitExpandingToMainSegment::GetSplitRatio(cNewSplitScreenInfo const&) const
OrbStateDynamicSplitExpandingToMainSegment::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbStateDynamicSplitExpandingToMainSegment::OverrideSegmentDrawPosIfNeeded(cNewSplitScreenInfo const&, VuVec&) const
OrbStateDynamicSplitExpandingToMainSegment::BlendPlayerViewportOffset(cNewSplitScreenInfo const&, VuVec&) const
OrbStateMainSegmentContractingToDynamicSplit::GetSplitRatio(cNewSplitScreenInfo const&) const
OrbStateMainSegmentContractingToDynamicSplit::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateMainSegmentContractingToDynamicSplit::EnterState(cNewSplitScreenInfo&)
OrbStateMainSegmentContractingToDynamicSplit::GetCameraInterpolant(cNewSplitScreenInfo const&) const
OrbStateMainSegmentContractingToDynamicSplit::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbStateMainSegmentContractingToDynamicSplit::OverrideSegmentDrawPosIfNeeded(cNewSplitScreenInfo const&, VuVec&) const
OrbStateMainSegmentContractingToDynamicSplit::BlendPlayerViewportOffset(cNewSplitScreenInfo const&, VuVec&) const
OrbStateMainSegmentContractingToComplete::GetSplitRatio(cNewSplitScreenInfo const&) const
OrbStateMainSegmentContractingToComplete::EnterState(cNewSplitScreenInfo&)
OrbStateMainSegmentContractingToComplete::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateMainSegmentContractingToComplete::GetCameraInterpolant(cNewSplitScreenInfo const&) const
OrbStateMainSegmentContractingToComplete::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbStateMainSegmentExpandingToComplete::GetSplitRatio(cNewSplitScreenInfo const&) const
OrbStateMainSegmentExpandingToComplete::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateMainSegmentExpandingToComplete::GetCameraInterpolant(cNewSplitScreenInfo const&) const
OrbStateMainSegmentExpandingToComplete::EnterState(cNewSplitScreenInfo&)
OrbStateMainSegmentExpandingToComplete::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbState::CalculateOrbParams(cNewSplitScreenInfo const&, VuVec&, float&, float&, VuVec&, float, float, float, VuVec&, VuVec&) const
OrbState::OverrideSegmentDrawPosIfNeeded(cNewSplitScreenInfo const&, VuVec&) const
OrbState::GetModifiedFOV(cNewSplitScreenInfo const&, float) const
OrbState::BlendPlayerViewportOffset(cNewSplitScreenInfo const&, VuVec&) const
OrbStateOrbExpandingToFullScreen::EnterState(cNewSplitScreenInfo&)
OrbStateOrbExpandingToFullScreen::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateFullScreenContractingToOrb::EnterState(cNewSplitScreenInfo&)
OrbStateFullScreenContractingToOrb::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateOrbToFullScreenTransition::GetSplitRatio(cNewSplitScreenInfo const&) const
OrbStateOrbToFullScreenTransition::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbStateOrbToFullScreenTransition::UpdateOrbCalculations(cNewSplitScreenInfo&)
OrbStateOrbToFullScreenTransition::GetCameraInterpolant(cNewSplitScreenInfo const&) const
OrbStateFixedPanelPosition::GetSplitRatio(cNewSplitScreenInfo const&) const
OrbStateFixedPanelPositionStatic::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateFixedPanelPositionStatic::EnterState(cNewSplitScreenInfo&)
OrbStateFixedPanelPosition::SetOrbTargetSplitLineForWrapRoundScreen(cNewSplitScreenInfo&)
OrbStateFixedPanelPositionStatic::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbStateFixedPanelPositionExpanding::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateFixedPanelPositionExpanding::EnterState(cNewSplitScreenInfo&)
OrbStateFixedPanelPositionExpanding::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbStateFixedPanelPositionShrinking::EnterState(cNewSplitScreenInfo&)
OrbStateFixedPanelPositionShrinking::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateFixedPanelPositionShrinking::GetFOVInterpolant(cNewSplitScreenInfo const&) const
ScreenAbsoluteToBLReferenceFrame(VuVec const&)
BLReferenceFrameToScreenAbsolute(VuVec const&)
OrbStateFixedPanelPosition::BlendPlayerViewportOffset(cNewSplitScreenInfo const&, VuVec&) const
OrbStateFixedPanelPosition::CalculateOrbLocation(cNewSplitScreenInfo const&, float, float, VuVec&, float&, VuVec&)
OrbStateFixedPanelPosition::Process(cNewSplitScreenInfo&, float)
MirrorClipLineInVertical(ClipLine const&)
OrbStateFixedPanelPosition::GetCameraInterpolant(cNewSplitScreenInfo const&) const
OrbStateFixedPanelPosition::UpdateOrbCalculations(cNewSplitScreenInfo&)
OrbStateFixedPanelPosition::GetModifiedFOV(cNewSplitScreenInfo const&, float) const
OrbStateOrbToFullScreenTransition::GetModifiedFOV(cNewSplitScreenInfo const&, float) const
OrbStateFixedPanelPositionExpandingToVerticalSplit::GetModifiedFOV(cNewSplitScreenInfo const&, float) const
OrbStateExpandingToDynamicSplit::GetModifiedFOV(cNewSplitScreenInfo const&, float) const
OrbStateFixedPanelPositionShrinkingToStatic::GetModifiedFOV(cNewSplitScreenInfo const&, float) const
OrbStateFixedPanelPositionExpandingToVerticalSplit::EnterState(cNewSplitScreenInfo&)
OrbStateFixedPanelPositionExpandingToVerticalSplit::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateFixedPanelPositionExpandingToVerticalSplit::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbStateFixedPanelPositionShrinkingToStatic::EnterState(cNewSplitScreenInfo&)
OrbStateFixedPanelPositionShrinkingToStatic::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateFixedPanelPositionShrinkingToStatic::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbStateFixedPanelPositionShrinkingToStatic::InitialiseScreenCircleInterpolator(cNewSplitScreenInfo const&, ScreenCircleInterpolator&)
OrbStateFixedPanelPositionExpandingToVerticalSplit::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbStateFixedPanelPositionExpandingToVerticalSplit::InitialiseScreenCircleInterpolator(cNewSplitScreenInfo const&, ScreenCircleInterpolator&)
OrbStateFixedPanelPositionExpandingToVerticalSplit::UpdateOrbCalculations(cNewSplitScreenInfo&)
OrbStateFixedPanelPositionExpandingToVerticalSplit::CalculateTextureOffsetForOrb(cNewSplitScreenInfo&, float, float)
OrbStateFixedPanelPositionShrinkingToStatic::UpdateOrbCalculations(cNewSplitScreenInfo&)
OrbStateInactive::GetStateName() const
OrbStateInactive::GetCameraInterpolant(cNewSplitScreenInfo const&) const
OrbStateInactive::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbState::UpdateOrbInterpolant(cNewSplitScreenInfo&, float)
OrbStateInactive::IsOrb(cNewSplitScreenInfo const&) const
OrbState::IsInTransition() const
OrbState::UpdateOrbCalculations(cNewSplitScreenInfo&)
OrbState::operator==(iOrbState const&) const
OrbState::operator!=(iOrbState const&) const
OrbStateMainSegmentForceComplete::GetStateName() const
OrbStateMainSegmentForceComplete::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbStateMainSegmentForceComplete::EnterState(cNewSplitScreenInfo&)
OrbStateMainSegmentForceComplete::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbStateMainSegmentForceComplete::IsOrb(cNewSplitScreenInfo const&) const
OrbStateMainSegmentForceComplete::IsSplitting(cNewSplitScreenInfo const&) const
OrbStateExpandingToDynamicSplit::GetStateName() const
OrbStateExpandingToDynamicSplit::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbState::Process(cNewSplitScreenInfo&, float)
OrbStateExpandingToDynamicSplit::GetCameraInterpolant(cNewSplitScreenInfo const&) const
OrbStateExpandingToDynamicSplit::IsOrb(cNewSplitScreenInfo const&) const
OrbStateExpandingToDynamicSplit::IsSplitting(cNewSplitScreenInfo const&) const
OrbStateExpandingToDynamicSplit::BlendPlayerViewportOffset(cNewSplitScreenInfo const&, VuVec&) const
OrbStateExpandingToDynamicSplit::IsInTransition() const
OrbStateDynamicSplitExpandingToMainSegment::GetStateName() const
OrbStateDynamicSplitExpandingToMainSegment::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbStateDynamicSplitExpandingToMainSegment::IsOrb(cNewSplitScreenInfo const&) const
OrbStateDynamicSplitExpandingToMainSegment::IsSplitting(cNewSplitScreenInfo const&) const
OrbStateDynamicSplitExpandingToMainSegment::IsInTransition() const
OrbStateMainSegmentContractingToDynamicSplit::GetStateName() const
OrbStateMainSegmentContractingToDynamicSplit::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbStateMainSegmentContractingToDynamicSplit::IsOrb(cNewSplitScreenInfo const&) const
OrbStateMainSegmentContractingToDynamicSplit::IsSplitting(cNewSplitScreenInfo const&) const
OrbStateMainSegmentContractingToDynamicSplit::IsInTransition() const
OrbStateMainSegmentContractingToComplete::GetStateName() const
OrbStateMainSegmentContractingToComplete::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbStateMainSegmentContractingToComplete::IsOrb(cNewSplitScreenInfo const&) const
OrbStateMainSegmentContractingToComplete::IsSplitting(cNewSplitScreenInfo const&) const
OrbStateMainSegmentContractingToComplete::IsInTransition() const
OrbStateMainSegmentExpandingToComplete::GetStateName() const
OrbStateMainSegmentExpandingToComplete::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbStateMainSegmentExpandingToComplete::IsOrb(cNewSplitScreenInfo const&) const
OrbStateMainSegmentExpandingToComplete::IsSplitting(cNewSplitScreenInfo const&) const
OrbStateMainSegmentExpandingToComplete::IsInTransition() const
OrbState::GetStateName() const
OrbState::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbState::EnterState(cNewSplitScreenInfo&)
OrbStateOrbExpandingToFullScreen::GetStateName() const
OrbStateOrbToFullScreenTransition::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbStateOrbToFullScreenTransition::IsOrb(cNewSplitScreenInfo const&) const
OrbStateOrbToFullScreenTransition::IsSplitting(cNewSplitScreenInfo const&) const
OrbStateOrbToFullScreenTransition::IsInTransition() const
OrbStateFullScreenContractingToOrb::GetStateName() const
OrbStateFixedPanelPositionStatic::GetStateName() const
OrbStateFixedPanelPositionStatic::GetFOVInterpolant(cNewSplitScreenInfo const&) const
OrbStateFixedPanelPosition::IsOrb(cNewSplitScreenInfo const&) const
OrbStateFixedPanelPosition::IsSplitting(cNewSplitScreenInfo const&) const
OrbStateFixedPanelPositionStatic::IsInTransition() const
OrbStateFixedPanelPositionExpanding::GetStateName() const
OrbStateFixedPanelPosition::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbStateFixedPanelPositionExpanding::IsInTransition() const
OrbStateFixedPanelPositionShrinking::GetStateName() const
OrbStateFixedPanelPositionShrinking::IsInTransition() const
OrbStateFixedPanelPosition::GetStateName() const
OrbStateFixedPanelPosition::EnterState(cNewSplitScreenInfo&)
OrbStateFixedPanelPositionExpandingToVerticalSplit::GetStateName() const
OrbStateFixedPanelPositionExpandingToVerticalSplit::IsInTransition() const
OrbStateFixedPanelPositionShrinkingToStatic::GetStateName() const
OrbStateFixedPanelPositionShrinkingToStatic::ExitState(cNewSplitScreenInfo&, iOrbState const&)
OrbStateFixedPanelPositionShrinkingToStatic::IsInTransition() const
SegmentCalculator::CalculateSegmentPolygonFromClipline(ClipLine const&, VuVec const&, VuVec (&) [5], int&, VuVec&)
SplitScreenDynamicCoopState::SetDropOut(cNewSplitScreenManager&, short)
SplitScreenDynamicCoopState::OverrideSegmentDrawPosIfNeeded(cNewSplitScreenManager&, VuVec&, cNewSplitScreenInfo const&, short)
SplitScreenDynamicCoopState::LevelViewCleanup(cNewSplitScreenManager&)
SplitScreenDynamicCoopState::CanGrabStillScreen(cNewSplitScreenManager const&) const
SplitScreenDynamicCoopState::BlendPlayerViewportOffset(cNewSplitScreenManager const&, VuVec&, cNewSplitScreenInfo const&)
SplitScreenDynamicCoopState::RenderComposite(cNewSplitScreenManager&, LevelView*)
SplitScreenDynamicCoopState::SetupRenderPipes(cNewSplitScreenManager&)
SplitScreenDynamicCoopState::Process(cNewSplitScreenManager&, float const&, bool)
SplitScreenDynamicCoopState::ProcessSplitStage(cNewSplitScreenManager&, float const&)
SplitScreenDynamicCoopState::InitForMiniCutBlendIn(cNewSplitScreenManager&, short, float, float)
SplitScreenDynamicCoopState::InitForMiniCutBlendOut(cNewSplitScreenManager&)
SplitScreenDynamicCoopState::EnterState(cNewSplitScreenManager&)
SplitScreenDynamicCoopState::CalculateSplitNuCameras(cNewSplitScreenManager&)
SplitScreenDynamicCoopState::IsSplitting(cNewSplitScreenManager const&) const
SplitScreenDynamicCoopState::SetSegmentScreenPositions(cNewSplitScreenManager&)
SplitScreenDynamicCoopState::SetPlayerSplitDecisionCamera(cNewSplitScreenManager&, VirtualSplitScreenCamera*, short)
SplitScreenDynamicCoopState::SetSplitBlends(cNewSplitScreenManager&, float const&)
SplitScreenDynamicCoopState::GetStateName() const
SplitScreenDynamicCoopState::AllocateResources()
SplitScreenOrbFixedPanelState::AllocateResources()
SplitScreenDynamicCoopState::IsInTransition(cNewSplitScreenManager const&) const
SplitScreenDynamicCoopState::TransitionSegmentIntoOrb(cNewSplitScreenManager&, short, float)
SplitScreenDynamicCoopState::SplitThresholdReached(cNewSplitScreenManager&) const
SplitScreenDynamicCoopState::DeallocateResources()
SplitScreenOrbFixedPanelState::DeallocateResources()
SplitScreenDynamicCoopState::ShouldSnapClipLine(cNewSplitScreenManager&) const
SplitScreenSingleCameraState::SetDropOut(cNewSplitScreenManager&, short)
SplitScreenSingleCameraState::OverrideSegmentDrawPosIfNeeded(cNewSplitScreenManager&, VuVec&, cNewSplitScreenInfo const&, short)
SplitScreenSingleCameraState::LevelViewCleanup(cNewSplitScreenManager&)
SplitScreenSingleCameraState::CanGrabStillScreen(cNewSplitScreenManager const&) const
SplitScreenSingleCameraState::BlendPlayerViewportOffset(cNewSplitScreenManager const&, VuVec&, cNewSplitScreenInfo const&)
SplitScreenSingleCameraState::RenderComposite(cNewSplitScreenManager&, LevelView*)
SplitScreenSingleCameraState::SetupRenderPipes(cNewSplitScreenManager&)
SplitScreenSingleCameraState::Process(cNewSplitScreenManager&, float const&, bool)
SplitScreenSingleCameraState::ProcessSplitStage(cNewSplitScreenManager&, float const&)
SplitScreenSingleCameraState::InitForMiniCutBlendIn(cNewSplitScreenManager&, short, float, float)
SplitScreenSingleCameraState::InitForMiniCutBlendOut(cNewSplitScreenManager&)
SplitScreenSingleCameraState::EnterState(cNewSplitScreenManager&)
SplitScreenSingleCameraState::CalculateSplitNuCameras(cNewSplitScreenManager&)
SplitScreenSingleCameraState::IsSplitting(cNewSplitScreenManager const&) const
SplitScreenSingleCameraState::SetSegmentScreenPositions(cNewSplitScreenManager&)
SplitScreenSingleCameraState::SetPlayerSplitDecisionCamera(cNewSplitScreenManager&, VirtualSplitScreenCamera*, short)
SplitScreenSingleCameraState::SetSplitBlends(cNewSplitScreenManager&, float const&)
SplitScreenSingleCameraState::AllocateResources()
SplitScreenSingleCameraState::DeallocateResources()
SplitScreenCutsceneDualCameraState::SetDropOut(cNewSplitScreenManager&, short)
SplitScreenForceVerticalSplitState::SetDropOut(cNewSplitScreenManager&, short)
SplitScreenCutsceneDualCameraState::OverrideSegmentDrawPosIfNeeded(cNewSplitScreenManager&, VuVec&, cNewSplitScreenInfo const&, short)
SplitScreenForceVerticalSplitState::OverrideSegmentDrawPosIfNeeded(cNewSplitScreenManager&, VuVec&, cNewSplitScreenInfo const&, short)
SplitScreenCutsceneDualCameraState::LevelViewCleanup(cNewSplitScreenManager&)
SplitScreenForceVerticalSplitState::LevelViewCleanup(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraState::CanGrabStillScreen(cNewSplitScreenManager const&) const
SplitScreenForceVerticalSplitState::CanGrabStillScreen(cNewSplitScreenManager const&) const
SplitScreenCutsceneDualCameraCrossFadeState::CanGrabStillScreen(cNewSplitScreenManager const&) const
SplitScreenCutsceneDualCameraState::BlendPlayerViewportOffset(cNewSplitScreenManager const&, VuVec&, cNewSplitScreenInfo const&)
SplitScreenForceVerticalSplitState::BlendPlayerViewportOffset(cNewSplitScreenManager const&, VuVec&, cNewSplitScreenInfo const&)
SplitScreenCutsceneDualCameraState::RenderComposite(cNewSplitScreenManager&, LevelView*)
SplitScreenForceVerticalSplitState::RenderComposite(cNewSplitScreenManager&, LevelView*)
SplitScreenCutsceneDualCameraCrossFadeState::RenderComposite(cNewSplitScreenManager&, LevelView*)
SplitScreenCutsceneDualCameraState::SetupRenderPipes(cNewSplitScreenManager&)
SplitScreenForceVerticalSplitState::SetupRenderPipes(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraCrossFadeState::SetupRenderPipes(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraState::Process(cNewSplitScreenManager&, float const&, bool)
SplitScreenCutsceneDualCameraCrossFadeState::Process(cNewSplitScreenManager&, float const&, bool)
SplitScreenCutsceneDualCameraState::ProcessSplitStage(cNewSplitScreenManager&, float const&)
SplitScreenForceVerticalSplitState::ProcessSplitStage(cNewSplitScreenManager&, float const&)
SplitScreenCutsceneDualCameraCrossFadeState::ProcessSplitStage(cNewSplitScreenManager&, float const&)
SplitScreenCutsceneDualCameraState::InitForMiniCutBlendIn(cNewSplitScreenManager&, short, float, float)
SplitScreenCutsceneDualCameraState::InitForMiniCutBlendOut(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraState::EnterState(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraState::CalculateSplitNuCameras(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraCrossFadeState::CalculateSplitNuCameras(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraState::IsSplitting(cNewSplitScreenManager const&) const
SplitScreenCutsceneDualCameraState::SetSegmentScreenPositions(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraCrossFadeState::SetSegmentScreenPositions(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraState::SetPlayerSplitDecisionCamera(cNewSplitScreenManager&, VirtualSplitScreenCamera*, short)
SplitScreenForceVerticalSplitState::SetPlayerSplitDecisionCamera(cNewSplitScreenManager&, VirtualSplitScreenCamera*, short)
SplitScreenCutsceneDualCameraCrossFadeState::SetPlayerSplitDecisionCamera(cNewSplitScreenManager&, VirtualSplitScreenCamera*, short)
SplitScreenCutsceneDualCameraState::SetSplitBlends(cNewSplitScreenManager&, float const&)
SplitScreenForceVerticalSplitState::SetSplitBlends(cNewSplitScreenManager&, float const&)
SplitScreenCutsceneDualCameraCrossFadeState::SetSplitBlends(cNewSplitScreenManager&, float const&)
SplitScreenCutsceneDualCameraState::AllocateResources()
SplitScreenCutsceneDualCameraState::DeallocateResources()
SplitScreenCutsceneDualCameraCrossFadeState::AllocateResources()
SplitScreenCutsceneDualCameraCrossFadeState::DeallocateResources()
SplitScreenForceVerticalSplitState::IsSplitting(cNewSplitScreenManager const&) const
SplitScreenForceVerticalSplitState::SetSegmentScreenPositions(cNewSplitScreenManager&)
SplitScreenForceVerticalSplitState::EnterState(cNewSplitScreenManager&)
SplitScreenForceVerticalSplitState::InitForMiniCutBlendIn(cNewSplitScreenManager&, short, float, float)
SplitScreenForceVerticalSplitState::InitForMiniCutBlendOut(cNewSplitScreenManager&)
SplitScreenForceVerticalSplitState::Process(cNewSplitScreenManager&, float const&, bool)
SplitScreenForceVerticalSplitState::CalculateSplitNuCameras(cNewSplitScreenManager&)
SplitScreenForceVerticalSplitState::AllocateResources()
SplitScreenForceVerticalSplitState::DeallocateResources()
SplitScreenForceHorizontalSplitState::SetSegmentScreenPositions(cNewSplitScreenManager&)
SplitScreenForceHorizontalSplitState::ShouldSnapClipLine(cNewSplitScreenManager&) const
SplitScreenForceVerticalSplitState::ShouldSnapClipLine(cNewSplitScreenManager&) const
SplitScreenForceHorizontalSplitState::EnterState(cNewSplitScreenManager&)
SplitScreenForceHorizontalSplitState::IsSplitting(cNewSplitScreenManager const&) const
SplitScreenForceHorizontalSplitState::SetSplitBlends(cNewSplitScreenManager&, float const&)
SplitScreenForceHorizontalSplitState::SplitThresholdReached(cNewSplitScreenManager&) const
SplitScreenForceVerticalSplitState::SplitThresholdReached(cNewSplitScreenManager&) const
SplitScreenForceHorizontalSplitState::ShouldMiniCutTakeOverScreen(cNewSplitScreenManager&) const
SplitScreenForceVerticalSplitState::ShouldMiniCutTakeOverScreen(cNewSplitScreenManager&) const
SplitScreenForceHorizontalSplitState::InitForMiniCutBlendIn(cNewSplitScreenManager&, short, float, float)
SplitScreenForceHorizontalSplitState::InitForMiniCutBlendOut(cNewSplitScreenManager&)
SplitScreenForceHorizontalSplitState::Process(cNewSplitScreenManager&, float const&, bool)
SplitScreenForceHorizontalSplitState::ProcessSplitStage(cNewSplitScreenManager&, float const&)
SplitScreenForceHorizontalSplitState::RenderComposite(cNewSplitScreenManager&, LevelView*)
SplitScreenForceHorizontalSplitState::SetupRenderPipes(cNewSplitScreenManager&)
SplitScreenForceHorizontalSplitState::BlendPlayerViewportOffset(cNewSplitScreenManager const&, VuVec&, cNewSplitScreenInfo const&)
SplitScreenForceHorizontalSplitState::OverrideSegmentDrawPosIfNeeded(cNewSplitScreenManager&, VuVec&, cNewSplitScreenInfo const&, short)
SplitScreenForceHorizontalSplitState::SetDropOut(cNewSplitScreenManager&, short)
SplitScreenForceHorizontalSplitState::LevelViewCleanup(cNewSplitScreenManager&)
SplitScreenForceHorizontalSplitState::CanGrabStillScreen(cNewSplitScreenManager const&) const
SplitScreenForceHorizontalSplitState::CalculateSplitNuCameras(cNewSplitScreenManager&)
SplitScreenForceHorizontalSplitState::SetPlayerSplitDecisionCamera(cNewSplitScreenManager&, VirtualSplitScreenCamera*, short)
SplitScreenForceHorizontalSplitState::AllocateResources()
SplitScreenForceHorizontalSplitState::DeallocateResources()
SplitScreenState::SplitThresholdReached(cNewSplitScreenManager&) const
SplitScreenState::GetNextFlag()
SplitScreenOrbFixedPanelState::ProcessSplitStage(cNewSplitScreenManager&, float const&)
SplitScreenOrbFixedPanelState::BlendPlayerViewportOffset(cNewSplitScreenManager const&, VuVec&, cNewSplitScreenInfo const&)
SplitScreenOrbFixedPanelState::Process(cNewSplitScreenManager&, float const&, bool)
SplitScreenOrbFixedPanelState::ExitState(cNewSplitScreenManager&)
SplitScreenOrbFixedPanelState::SetupRenderPipes(cNewSplitScreenManager&)
SplitScreenOrbFixedPanelState::RenderComposite(cNewSplitScreenManager&, LevelView*)
SplitScreenOrbFixedPanelState::OverrideSegmentDrawPosIfNeeded(cNewSplitScreenManager&, VuVec&, cNewSplitScreenInfo const&, short)
SplitScreenOrbFixedPanelState::SetDropOut(cNewSplitScreenManager&, short)
SplitScreenOrbFixedPanelState::TransitionForceComplete(cNewSplitScreenManager&)
SplitScreenOrbFixedPanelState::LevelViewCleanup(cNewSplitScreenManager&)
SplitScreenOrbFixedPanelState::UpdateClipShapes(cNewSplitScreenManager&)
SplitScreenOrbFixedPanelState::CanGrabStillScreen(cNewSplitScreenManager const&) const
SplitScreenOrbFixedPanelState::InitForMiniCutBlendIn(cNewSplitScreenManager&, short, float, float)
SplitScreenOrbFixedPanelState::InitForMiniCutBlendOut(cNewSplitScreenManager&)
SplitScreenOrbFixedPanelState::CalculateSplitNuCameras(cNewSplitScreenManager&)
SplitScreenOrbFixedPanelState::IsSplitting(cNewSplitScreenManager const&) const
SplitScreenOrbFixedPanelState::SetSegmentScreenPositions(cNewSplitScreenManager&)
SplitScreenOrbFixedPanelState::SetPlayerSplitDecisionCamera(cNewSplitScreenManager&, VirtualSplitScreenCamera*, short)
SplitScreenOrbFixedPanelState::SetSplitBlends(cNewSplitScreenManager&, float const&)
SplitScreenOrbFixedPanelState::IsInTransition(cNewSplitScreenManager const&) const
SplitScreenOrbFixedPanelState::TransitionStateUpdate(cNewSplitScreenManager&, float)
SplitScreenOrbFixedPanelState::TransitionSegmentIntoOrb(cNewSplitScreenManager&, short, float)
SplitScreenOrbFixedPanelState::DebugTriggerOrbGrowShrink(cNewSplitScreenManager&, bool)
SplitScreenOrbFixedPanelState::EnterState(cNewSplitScreenManager&)
SplitScreenState::ShouldSnapClipLine(cNewSplitScreenManager&) const
SplitScreenState::ShouldMiniCutTakeOverScreen(cNewSplitScreenManager&) const
SplitScreenState::TransitionStateUpdate(cNewSplitScreenManager&, float)
SplitScreenState::IsAnOrbMode(cNewSplitScreenManager const&) const
SplitScreenDynamicCoopState::ExitState(cNewSplitScreenManager&)
SplitScreenDynamicCoopState::UpdateClipShapes(cNewSplitScreenManager&)
SplitScreenSingleCameraState::ExitState(cNewSplitScreenManager&)
SplitScreenSingleCameraState::UpdateClipShapes(cNewSplitScreenManager&)
SplitScreenSingleCameraState::IsInTransition(cNewSplitScreenManager const&) const
SplitScreenSingleCameraState::TransitionSegmentIntoOrb(cNewSplitScreenManager&, short, float)
SplitScreenSingleCameraState::GetStateName() const
SplitScreenCutsceneDualCameraCrossFadeState::ExitState(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraCrossFadeState::EnterState(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraCrossFadeState::BlendPlayerViewportOffset(cNewSplitScreenManager const&, VuVec&, cNewSplitScreenInfo const&)
SplitScreenCutsceneDualCameraCrossFadeState::OverrideSegmentDrawPosIfNeeded(cNewSplitScreenManager&, VuVec&, cNewSplitScreenInfo const&, short)
SplitScreenCutsceneDualCameraCrossFadeState::SetDropOut(cNewSplitScreenManager&, short)
SplitScreenCutsceneDualCameraCrossFadeState::LevelViewCleanup(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraCrossFadeState::UpdateClipShapes(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraCrossFadeState::InitForMiniCutBlendIn(cNewSplitScreenManager&, short, float, float)
SplitScreenCutsceneDualCameraCrossFadeState::InitForMiniCutBlendOut(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraCrossFadeState::IsSplitting(cNewSplitScreenManager const&) const
SplitScreenCutsceneDualCameraCrossFadeState::ShouldSnapClipLine(cNewSplitScreenManager&) const
SplitScreenCutsceneDualCameraCrossFadeState::SplitThresholdReached(cNewSplitScreenManager&) const
SplitScreenCutsceneDualCameraCrossFadeState::ShouldMiniCutTakeOverScreen(cNewSplitScreenManager&) const
SplitScreenCutsceneDualCameraCrossFadeState::IsInTransition(cNewSplitScreenManager const&) const
SplitScreenCutsceneDualCameraCrossFadeState::TransitionSegmentIntoOrb(cNewSplitScreenManager&, short, float)
SplitScreenCutsceneDualCameraCrossFadeState::GetStateName() const
SplitScreenCutsceneDualCameraState::ExitState(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraState::UpdateClipShapes(cNewSplitScreenManager&)
SplitScreenCutsceneDualCameraState::ShouldSnapClipLine(cNewSplitScreenManager&) const
SplitScreenCutsceneDualCameraState::SplitThresholdReached(cNewSplitScreenManager&) const
SplitScreenCutsceneDualCameraState::ShouldMiniCutTakeOverScreen(cNewSplitScreenManager&) const
SplitScreenCutsceneDualCameraState::IsInTransition(cNewSplitScreenManager const&) const
SplitScreenCutsceneDualCameraState::TransitionSegmentIntoOrb(cNewSplitScreenManager&, short, float)
SplitScreenCutsceneDualCameraState::GetStateName() const
SplitScreenForceVerticalSplitState::ExitState(cNewSplitScreenManager&)
SplitScreenForceVerticalSplitState::UpdateClipShapes(cNewSplitScreenManager&)
SplitScreenForceVerticalSplitState::IsInTransition(cNewSplitScreenManager const&) const
SplitScreenForceVerticalSplitState::TransitionSegmentIntoOrb(cNewSplitScreenManager&, short, float)
SplitScreenForceVerticalSplitState::GetStateName() const
SplitScreenForceHorizontalSplitState::ExitState(cNewSplitScreenManager&)
SplitScreenForceHorizontalSplitState::UpdateClipShapes(cNewSplitScreenManager&)
SplitScreenForceHorizontalSplitState::IsInTransition(cNewSplitScreenManager const&) const
SplitScreenForceHorizontalSplitState::TransitionSegmentIntoOrb(cNewSplitScreenManager&, short, float)
SplitScreenForceHorizontalSplitState::GetStateName() const
SplitScreenOrbFixedPanelState::ShouldSnapClipLine(cNewSplitScreenManager&) const
SplitScreenOrbFixedPanelState::ShouldMiniCutTakeOverScreen(cNewSplitScreenManager&) const
SplitScreenOrbFixedPanelState::GetStateName() const
SplitScreenOrbFixedPanelState::IsAnOrbMode(cNewSplitScreenManager const&) const
SplitScreenCircle::RadiusCorrection(float, float)
SplitScreenCircle::GetCirclePoints(VuVec*, int, VuVec const&, float, float)
SplitScreenCircle::GetScreenAlignedSquarePoints(VuVec (&) [4], VuVec const&, float, float)
SplitScreenCircle::GetCircleSectorOnScreen(VuVec*, int, VuVec const&, float, float)
SplitScreenCircle::GetCircleArcOnScreen(VuVec*, int, VuVec const&, float, float)
SplitScreenCircle::AngleBetweenVectorsRads(VuVec const&, VuVec const&)
SplitScreenCircle::RenderScreenSpaceCliplineCircle(VuVec const&, float, float, float, NuSmartPtr<NuMtl, true>, float, unsigned int*, bool)
DrawGlowCap(VuVec const&, NuSmartPtr<NuMtl, true>, VuVec const&, float, float, float, unsigned int, float, float, float)
SplitScreenCircle::RenderGlowCircle(VuVec const&, float, float, float, NuSmartPtr<NuMtl, true>, float, unsigned int*)
SplitScreenCircle::TestAngleBetweenVectorsRads()
ScreenCircleRotator::GetCentreARSpace() const
ScreenCircleRotator::SetFromScreenSpaceCircle(VuVec const&, float, float)
ScreenCircleRotator::GetCentreScreenSpace(float) const
ScreenCircleInterpolator::GetCircleRotatorAt(float) const
SAction_RandomInt::GetName() const
SAction_RandomInt::GetInputs(SCmdParams&) const
SAction_RandomInt::GetOutputs(SCmdParams&) const
SAction_RandomInt::Exec(ScriptContext&)
SAction_RandomInt::~SAction_RandomInt()
SAction_RandomFloat::GetName() const
SAction_RandomFloat::GetInputs(SCmdParams&) const
SAction_RandomFloat::GetOutputs(SCmdParams&) const
SAction_RandomFloat::Exec(ScriptContext&)
SAction_RandomFloat::~SAction_RandomFloat()
SAction_Reference::SAction_Reference()
SAction_Reference::GetName() const
SAction_Reference::GetInputs(SCmdParams&) const
SAction_Reference::GetOutputs(SCmdParams&) const
SAction_Reference::Exec(ScriptContext&)
SAction_Reference::~SAction_Reference()
SAction_GotoRandomState::SAction_GotoRandomState()
SAction_GotoRandomState::GetName() const
SAction_GotoRandomState::GetInputs(SCmdParams&) const
SAction_GotoRandomState::GetOutputs(SCmdParams&) const
SAction_GotoRandomState::Exec(ScriptContext&)
SAction_GotoRandomState::~SAction_GotoRandomState()
SAction_IsReferenceScript::SAction_IsReferenceScript()
SAction_IsReferenceScript::GetName() const
SAction_IsReferenceScript::GetInputs(SCmdParams&) const
SAction_IsReferenceScript::GetOutputs(SCmdParams&) const
SAction_IsReferenceScript::Exec(ScriptContext&)
SAction_IsReferenceScript::~SAction_IsReferenceScript()
SAction_RegisterEvent::SAction_RegisterEvent(int)
SAction_RegisterEvent::GetName() const
SAction_RegisterEvent::GetOutputs(SCmdParams&) const
SAction_RegisterEvent::Exec(ScriptContext&)
SAction_RegisterEvent::GetInputs(SCmdParams&) const
SAction_RegisterEvent::~SAction_RegisterEvent()
ScriptFile::ScriptFile(char const*, int)
ScriptFile::ExtractShortName(char const*, char*, int)
ScriptFile::~ScriptFile()
ScriptFile::UnloadFile()
ScriptFile::LoadFile()
ScriptFile::ParseFile()
ScriptLibrary::ScriptLibrary()
ScriptLibrary::~ScriptLibrary()
ScriptLibrary::Init()
ScriptLibrary::RegisterAction(SAction*)
ScriptLibrary::GetActionStrict(char const*, SCmdParams const&)
ScriptLibrary::GetAction(char const*, int)
ScriptLibrary::GetAction(char const*, SCmdParams const&, SCmdParams const*)
ScriptLibrary::CreateEvent(char const*, ScriptContext&, ScriptScope&)
ScriptLibrary::GetNumRegisteredActions()
ScriptLibrary::GetIndexOfAction(SAction*)
ScriptLibrary::GetActionAtIndex(int)
xDebugMsg
xDebugMsgF
yyerror
vyyerror(char const*, ...)
xExit
yyalloc
yyfree
yyrealloc
xStrlen
xStrcpy
xStrcat
xIsatty
xAllocString
xFreeString
xAllocLabelText
xAllocHashText
xAllocText
xPushVarStack
ScriptParser::PushVarStack()
xPopVarStack
xMarkVarStack
xStmtPrintCtx
xStmtPrint
xParamName
xStmtHash
xStmtText
xStmtFloat
xStmtBool
xStmtVar
xStmtReturn
xStmtAssignLHS
xStmtAssignRHS
CheckAndConvertActionParams(ScriptCommand*, char const*, int)
xMarkCall
xStmtCall
xStmtGoto
xStmtCppCall
xStmtAnd
xStmtOr
xStmtAdd
xStmtSub
xStmtMul
xStmtDiv
xStmtEqual
xStmtNotEqual
xStmtLessThan
xStmtLessThanEqual
xStmtGreaterThan
xStmtGreaterThanEqual
xStmtNeg
xStmtNot
xStmtConstructType
xStmtEnd
xStmtYield
xStmtStop
xStmtHold
xPushScope
xPopScope
xPushIf
xPushElseIf
xPushElse
xPopElse
xPushWhile
xPushFunction
xFunctionCountParams
xAddParam
xAddReturn
xPushState
xPushActions
xPushConditions
xStmtBeginState
xParseFile(ScriptFile*)
xGetType
ScriptVarType::FindModifierType(char const*)
CStack<SVar, 255>::~CStack()
ScriptParser::TypeStack::~TypeStack()
CStack<SVar, 255>::~CStack()
SCmdAnd::~SCmdAnd()
SCmdAnd::GetName() const
SCmdLogicOp<SCmdAnd>::GetInputs(SCmdParams&) const
SCmdLogicOp<SCmdAnd>::GetOutputs(SCmdParams&) const
ScriptCommand::SetConditionDataIx(int&)
SCmdLogicOp<SCmdAnd>::Exec(ScriptContext&)
SCmdOr::~SCmdOr()
SCmdOr::GetName() const
SCmdLogicOp<SCmdOr>::GetInputs(SCmdParams&) const
SCmdLogicOp<SCmdOr>::GetOutputs(SCmdParams&) const
SCmdLogicOp<SCmdOr>::Exec(ScriptContext&)
SCmdAdd::~SCmdAdd()
SCmdAdd::GetName() const
SCmdArithmeticOp<SCmdAdd>::GetInputs(SCmdParams&) const
SCmdArithmeticOp<SCmdAdd>::GetOutputs(SCmdParams&) const
SCmdArithmeticOp<SCmdAdd>::Exec(ScriptContext&)
SCmdSub::~SCmdSub()
SCmdSub::GetName() const
SCmdArithmeticOp<SCmdSub>::GetInputs(SCmdParams&) const
SCmdArithmeticOp<SCmdSub>::GetOutputs(SCmdParams&) const
SCmdArithmeticOp<SCmdSub>::Exec(ScriptContext&)
SCmdMul::~SCmdMul()
SCmdMul::GetName() const
SCmdArithmeticOp<SCmdMul>::GetInputs(SCmdParams&) const
SCmdArithmeticOp<SCmdMul>::GetOutputs(SCmdParams&) const
SCmdArithmeticOp<SCmdMul>::Exec(ScriptContext&)
SCmdDiv::~SCmdDiv()
SCmdDiv::GetName() const
SCmdArithmeticOp<SCmdDiv>::GetInputs(SCmdParams&) const
SCmdArithmeticOp<SCmdDiv>::GetOutputs(SCmdParams&) const
SCmdArithmeticOp<SCmdDiv>::Exec(ScriptContext&)
SCmdLessThan::~SCmdLessThan()
SCmdLessThan::GetName() const
SCmdEqualityOp::GetInputs(SCmdParams&) const
SCmdEqualityOp::GetOutputs(SCmdParams&) const
SCmdLessThan::Op(float, float)
SCmdLessThanEqual::~SCmdLessThanEqual()
SCmdLessThanEqual::GetName() const
SCmdLessThanEqual::Op(float, float)
SCmdGreaterThan::~SCmdGreaterThan()
SCmdGreaterThan::GetName() const
SCmdGreaterThan::Op(float, float)
SCmdGreaterThanEqual::~SCmdGreaterThanEqual()
SCmdGreaterThanEqual::GetName() const
SCmdGreaterThanEqual::Op(float, float)
ScriptProgram::ScriptProgram(ScriptFile&)
ScriptProgram::~ScriptProgram()
ScriptProgram::~ScriptProgram()
ScriptProgram::GetFullName()
ScriptScope::~ScriptScope()
ScriptScope::~ScriptScope()
ScriptScope::AddParam(SVar const&)
ScriptScope::AddReturn(SVar const&)
ScriptScope::GetFunction(char const*) const
ScriptScope::GetVarOffset(char const*) const
ScriptScope::GetInputs(SCmdParams&) const
ScriptScope::GetOutputs(SCmdParams&) const
ScriptScope::Print() const
ScriptState2::Print() const
ScriptState2::SetActions(ScriptScope*)
ScriptState2::SetConditions(ScriptScope*)
ScriptState2::IndexConditions()
ScriptFunction::~ScriptFunction()
ScriptState2::~ScriptState2()
ScriptContext::ScriptContext()
ScriptContext::ScriptContext(ScriptManager&)
ScriptContext::ScriptContext(ScriptManager&, ScriptScope&)
ScriptContext::PushScope(ScriptScope&)
ScriptContext::ScriptContext(ScriptContext&)
ScriptContext::ScriptContext(ScriptScope&)
ScriptContext::~ScriptContext()
ScriptContext::Reset()
ScriptContext::~ScriptContext()
ScriptContext::FireExitEvent()
ScriptContext::FindScope(char const*, ScriptScope::SCOPE_TYPE)
ScriptContext::Run(bool)
ScriptContext::PopScope()
ScriptContext::PopVar()
ScriptContext::ResetCodeVar()
ScriptContext::DoGoto()
ScriptContext::InConditionBlock() const
ScriptContext::DoReturn()
ScriptContext::Restart()
ScriptContext::GotoScope(int, ScriptScope*)
ScriptContext::TopScope(ScriptScope::SCOPE_TYPE) const
ScriptContext::RemoveConditionScope()
ScriptContext::PushVarFromTempStack()
ScriptContext::CollapseScopeStack()
ScriptContext::SetConditionScope(ScriptScope*)
ScriptContext::PushVar(ScriptVariable&, char const*)
ScriptContext::PopVar(RefPtr<ScriptVariable>&)
ScriptContext::PopVarToTempStack()
ScriptContext::GetVar(int)
ScriptContext::GetVarABS(int) const
ScriptContext::GotoScope(char const*, NuVector<ScriptVariable*>*)
ScriptContext::GetScriptProgram() const
ScriptContext::RunFunction(char const*, NuVector<RefPtr<ScriptVariable> >&)
ScriptContext::GotoState(char const*)
ScriptContext::RegisterEvent(char const*, ScriptScope&)
ScriptContext::FindEvent(Event const&) const
ScriptContext::NotifyEvent(Event&, NuEventData&)
ScriptContext::GetParamVar(int, SCtxScope*) const
ScriptContext::GetScriptName() const
ScriptContext::GetFullScriptName() const
ScriptContext::GetLevelContainer() const
ScriptContext::SetConditionData(ActionInstanceData*)
ScriptContext::GetConditionData()
ScriptContext::SetConditionDataIx(char)
ScriptContext::GetType()
NuVector<RefPtr<ScriptVariable> >::Reserve(unsigned int, bool)
ScriptEvent::~ScriptEvent()
ScriptEvent::~ScriptEvent()
ScriptEvent::PushParam(ScriptVariable*)
ScriptEvent::CallTargetScope(NuVector<ScriptVariable*>*)
ScriptManager::ScriptManager(LevelContainer&)
ScriptManager::RegisterProcessing()
ScriptManager::RegisterRendering()
ScriptManager::~ScriptManager()
ScriptManager::DeleteEverything()
ScriptManager::~ScriptManager()
ScriptManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ScriptManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
ScriptManager::FindScript(char const*, char const*, bool)
ScriptManager::FindLocalScript(char const*, char const*)
ScriptManager::FindScripts(char const*, NuVector<ScriptProgram*>&)
ScriptManager::ValidateFullScriptName(ScriptProgram*, char const*)
ScriptManager::DebugDrawLoadedScripts(int)
ScriptManager::LoadScript(char const*)
ScriptManager::UnLoadScript(char const*)
ScriptManager::UnLoadScript(ScriptProgram*)
ScriptManager::LoadScriptsDir(char const*, LevelContainer const&)
ClassManagerAccessor<ScriptManager>::GetFromCreate(ILevelContainer const&)
ScriptManager::EventNotify(Event&, NuEventData&)
ScriptManager::SubscribeToEvent(Event const&)
ScriptManager::FindGlobal(unsigned int, char const*, ScriptVariable&, ScriptContext&, int)
ScriptManager::ResetAllContexts()
ScriptManager::ClearContextList()
ScriptManager::ReleaseGlobal(ScriptVariable*)
ScriptManager::GetManagerName() const
ScriptFileLoader::~ScriptFileLoader()
ScriptFileLoader::Read(bool volatile*)
NuVector<ScriptProgram*>::Reserve(unsigned int, bool)
NuListFind<ScriptVariable*, NuListNode<ScriptVariable*> >::Remove(NuListNode<ScriptVariable*>*, NuListNode<ScriptVariable*>*, ScriptVariable* const&)
ScriptVariable::NotifyEvent(Event&, NuEventData&)
ScriptVariable::~ScriptVariable()
ScriptVariable::~ScriptVariable()
ScriptVarType::RegisterDefaultTypes()
ScriptVarType::AddConversion(unsigned int, unsigned int)
ScriptVarType::CanConvert(unsigned int, unsigned int)
SAction_NumberToText::Exec(ScriptContext&)
SAction_TextToHash::Exec(ScriptContext&)
ScriptVariable::Set(ScriptVariable const*)
SAction_TextToHash::~SAction_TextToHash()
SAction_TextToHash::GetName() const
SAction_TextToHash::GetInputs(SCmdParams&) const
SAction_TextToHash::GetOutputs(SCmdParams&) const
SAction_NumberToText::~SAction_NumberToText()
SAction_NumberToText::GetName() const
SAction_NumberToText::GetInputs(SCmdParams&) const
SAction_NumberToText::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarFloat>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarFloat>(char const*, ScriptContext&)
ScriptVariable* CreateObject<SVarBool>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarBool>(char const*, ScriptContext&)
ScriptVariable* CreateObject<SVarText>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarText>(char const*, ScriptContext&)
ScriptVariable* CreateObject<SVarHash>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarHash>(char const*, ScriptContext&)
ScriptVariable* CreateObject<SVarTimer>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarTimer>(char const*, ScriptContext&)
ScriptVariable* CreateObject<SVarPos>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarPos>(char const*, ScriptContext&)
ScriptVariable* CreateObject<SVarScript>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarScript>(char const*, ScriptContext&)
SCtxScope::SCtxScope(ScriptScope&, int)
SCtxScope::~SCtxScope()
SCtxScope::Run(ScriptContext&)
SCtxScope::Print()
SCtxScope::AddEvent(ScriptEvent&)
SCtxScope::FindEvent(Event const&) const
SCtxScope::NotifyEvent(Event&, NuEventData&)
SVarArea::Init()
SVarArea::Equals(ScriptVariable const*)
SVarArea::LoadVariable(char const*)
SAction_Area::Exec(ScriptContext&)
SAction_Text2Area::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarArea, AIConvexArea*>(int, AIConvexArea*)
SAction_AreaToPosition::Exec(ScriptContext&)
SAction_InsideArea::Exec(ScriptContext&)
DynamicScriptVariable<AIConvexArea>::~DynamicScriptVariable()
SVarArea::~SVarArea()
SVarArea::AsBool() const
SVarArea::AsText() const
DynamicScriptVariable<AIConvexArea>::Set(ScriptVariable const*)
DynamicScriptVariable<AIConvexArea>::EventNotify(Event&, NuEventData&)
non-virtual thunk to SVarArea::~SVarArea()
non-virtual thunk to SVarArea::~SVarArea()
non-virtual thunk to DynamicScriptVariable<AIConvexArea>::EventNotify(Event&, NuEventData&)
SAction_Area::~SAction_Area()
SAction_Area::GetName() const
SAction_Area::GetInputs(SCmdParams&) const
SAction_Area::GetOutputs(SCmdParams&) const
SAction_AreaToPosition::~SAction_AreaToPosition()
SAction_AreaToPosition::GetName() const
SAction_AreaToPosition::GetInputs(SCmdParams&) const
SAction_AreaToPosition::GetOutputs(SCmdParams&) const
SAction_Text2Area::~SAction_Text2Area()
SAction_Text2Area::GetName() const
SAction_Text2Area::GetInputs(SCmdParams&) const
SAction_Text2Area::GetOutputs(SCmdParams&) const
SAction_InsideArea::~SAction_InsideArea()
SAction_InsideArea::GetName() const
SAction_InsideArea::GetInputs(SCmdParams&) const
SAction_InsideArea::GetOutputs(SCmdParams&) const
SAction_Area2Text::~SAction_Area2Text()
SAction_Area2Text::GetName() const
SAction_Area2Text::GetInputs(SCmdParams&) const
SAction_Area2Text::GetOutputs(SCmdParams&) const
SAction_Area2Text::Exec(ScriptContext&)
DynamicScriptVariable<AIConvexArea>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<AIConvexArea>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<AIConvexArea>::~DynamicScriptVariable()
ScriptVariable* CreateObject<SVarArea>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarArea>(char const*, ScriptContext&)
SVarArea::SVarArea(char const*, sDynamicVariableData&, ScriptContext&)
SVarLevel::AsBool() const
SVarLevel::AsText() const
SVarLevel::Set(ScriptVariable const*)
SVarLevel::Equals(ScriptVariable const*)
SVarLevel::Init()
SAction_Text2WorldLevel::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarLevel, StreamingLevel*>(int, StreamingLevel*)
SAction_WorldLevel2Text::Exec(ScriptContext&)
SAction_WorldLevel_IsLoaded::Exec(ScriptContext&)
SAction_WorldLevel_IsFullyLoaded::Exec(ScriptContext&)
SAction_WorldLevel_ForceLoad::Exec(ScriptContext&)
SAction_WorldLevel_Enable::Exec(ScriptContext&)
SVarLevel::~SVarLevel()
SAction_Text2WorldLevel::~SAction_Text2WorldLevel()
SAction_Text2WorldLevel::GetName() const
SAction_Text2WorldLevel::GetInputs(SCmdParams&) const
SAction_Text2WorldLevel::GetOutputs(SCmdParams&) const
SAction_WorldLevel2Text::~SAction_WorldLevel2Text()
SAction_WorldLevel2Text::GetName() const
SAction_WorldLevel2Text::GetInputs(SCmdParams&) const
SAction_WorldLevel2Text::GetOutputs(SCmdParams&) const
SAction_WorldLevel_IsLoaded::~SAction_WorldLevel_IsLoaded()
SAction_WorldLevel_IsLoaded::GetName() const
SAction_WorldLevel_IsLoaded::GetInputs(SCmdParams&) const
SAction_WorldLevel_IsLoaded::GetOutputs(SCmdParams&) const
SAction_WorldLevel_IsFullyLoaded::~SAction_WorldLevel_IsFullyLoaded()
SAction_WorldLevel_IsFullyLoaded::GetName() const
SAction_WorldLevel_IsFullyLoaded::GetInputs(SCmdParams&) const
SAction_WorldLevel_IsFullyLoaded::GetOutputs(SCmdParams&) const
SAction_WorldLevel_ForceLoad::~SAction_WorldLevel_ForceLoad()
SAction_WorldLevel_ForceLoad::GetName() const
SAction_WorldLevel_ForceLoad::GetInputs(SCmdParams&) const
SAction_WorldLevel_ForceLoad::GetOutputs(SCmdParams&) const
SAction_WorldLevel_Enable::~SAction_WorldLevel_Enable()
SAction_WorldLevel_Enable::GetName() const
SAction_WorldLevel_Enable::GetInputs(SCmdParams&) const
SAction_WorldLevel_Enable::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarLevel>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarLevel>(char const*, ScriptContext&)
SVarScript::Equals(ScriptVariable const*)
SVarScript::~SVarScript()
SVarScript::Set(ScriptVariable const*)
SVarText::Set(char const*)
SVarText::Equals(ScriptVariable const*)
SVarText::~SVarText()
SVarText::~SVarText()
SVarText::AsText() const
SVarText::Set(ScriptVariable const*)
ScriptTimer::ScriptTimer(ScriptContext const&)
ScriptTimer::SetTime(float)
SAction_Float2Timer::Exec(ScriptContext&)
SAction_Timer2Text::Exec(ScriptContext&)
ScriptTimer::GetTime() const
SAction_ResetTimer::Exec(ScriptContext&)
SAction_SetTimer::Exec(ScriptContext&)
SVarTimer::Set(ScriptVariable const*)
SVarTimer::Equals(ScriptVariable const*)
SVarTimer::~SVarTimer()
SVarTimer::~SVarTimer()
SVarTimer::AsFloat() const
SVarTimer::AsInt() const
SVarTimer::AsText() const
SAction_SetTimer::~SAction_SetTimer()
SAction_SetTimer::GetName() const
SAction_SetTimer::GetInputs(SCmdParams&) const
SAction_SetTimer::GetOutputs(SCmdParams&) const
SAction_Float2Timer::~SAction_Float2Timer()
SAction_Float2Timer::GetName() const
SAction_Float2Timer::GetInputs(SCmdParams&) const
SAction_Float2Timer::GetOutputs(SCmdParams&) const
SAction_Timer2Text::~SAction_Timer2Text()
SAction_Timer2Text::GetName() const
SAction_Timer2Text::GetInputs(SCmdParams&) const
SAction_Timer2Text::GetOutputs(SCmdParams&) const
SAction_ResetTimer::~SAction_ResetTimer()
SAction_ResetTimer::GetName() const
SAction_ResetTimer::GetInputs(SCmdParams&) const
SAction_ResetTimer::GetOutputs(SCmdParams&) const
SAction_Distance::Exec(ScriptContext&)
SAction_DistanceXZ::Exec(ScriptContext&)
PositionAction_Distance::Exec(ScriptContext&)
PositionAction_DistanceXZ::Exec(ScriptContext&)
SVarPos::Equals(ScriptVariable const*)
SAction_PositionConstructor::Exec(ScriptContext&)
PositionAction_GetX::Exec(ScriptContext&)
PositionAction_GetY::Exec(ScriptContext&)
PositionAction_GetZ::Exec(ScriptContext&)
SVarPos::~SVarPos()
SVarPos::Set(ScriptVariable const*)
SAction_Distance::~SAction_Distance()
SAction_Distance::GetName() const
SAction_Distance::GetInputs(SCmdParams&) const
SAction_Distance::GetOutputs(SCmdParams&) const
SAction_DistanceXZ::~SAction_DistanceXZ()
SAction_DistanceXZ::GetName() const
SAction_DistanceXZ::GetInputs(SCmdParams&) const
SAction_DistanceXZ::GetOutputs(SCmdParams&) const
PositionAction_Distance::~PositionAction_Distance()
PositionAction_Distance::GetName() const
PositionAction_Distance::GetInputs(SCmdParams&) const
PositionAction_Distance::GetOutputs(SCmdParams&) const
PositionAction_DistanceXZ::~PositionAction_DistanceXZ()
PositionAction_DistanceXZ::GetName() const
PositionAction_DistanceXZ::GetInputs(SCmdParams&) const
PositionAction_DistanceXZ::GetOutputs(SCmdParams&) const
SAction_PositionConstructor::~SAction_PositionConstructor()
SAction_PositionConstructor::GetName() const
SAction_PositionConstructor::GetInputs(SCmdParams&) const
SAction_PositionConstructor::GetOutputs(SCmdParams&) const
PositionAction_GetX::~PositionAction_GetX()
PositionAction_GetX::GetName() const
PositionAction_GetX::GetInputs(SCmdParams&) const
PositionAction_GetX::GetOutputs(SCmdParams&) const
PositionAction_GetY::~PositionAction_GetY()
PositionAction_GetY::GetName() const
PositionAction_GetY::GetInputs(SCmdParams&) const
PositionAction_GetY::GetOutputs(SCmdParams&) const
PositionAction_GetZ::~PositionAction_GetZ()
PositionAction_GetZ::GetName() const
PositionAction_GetZ::GetInputs(SCmdParams&) const
PositionAction_GetZ::GetOutputs(SCmdParams&) const
ScriptArrayHelpers::GetItemVariableName()
ScriptArrayObject::SharedInstance::SharedInstance(unsigned int)
ScriptArrayObject::SharedInstance::~SharedInstance()
ScriptArrayObject::SharedInstance::Clear()
ScriptArrayObject::SharedInstance::~SharedInstance()
ScriptArrayObject::ScriptArrayObject()
ScriptArrayObject::ScriptArrayObject(ScriptArrayObject const&)
ScriptArrayObject::operator=(ScriptArrayObject const&)
ScriptArrayObject::operator==(ScriptArrayObject const&) const
ScriptArrayObject::operator!=(ScriptArrayObject const&) const
ScriptArrayObject::~ScriptArrayObject()
ScriptArrayObject::IsValid() const
ScriptArrayObject::GetType() const
ScriptArrayObject::Size() const
ScriptArrayObject::Add(ScriptVariable*)
ScriptArrayObject::Remove(int)
ScriptArrayObject::Get(int) const
ScriptArrayObject::Replace(int, ScriptVariable*)
ScriptArrayObject::Clear()
ScriptArrayObject::CreateCopy() const
ScriptArrayObject::CreateForType(unsigned int)
ScriptArrayObject::IsValidType(unsigned int)
SVarArray::SVarArray(char const*, ScriptArrayObject, ScriptContext&)
SVarArray::SVarArray(char const*, ScriptContext&)
SVarArray::GetRef()
SVarArray::SetRef(ScriptArrayObject)
SVarArray::AsBool() const
SVarArray::Set(ScriptVariable const*)
SVarArray::Equals(ScriptVariable const*)
SVarArray::GetParamFrom(ScriptContext&, int)
SVarArray::ReturnToContext(ScriptArrayObject const&, ScriptContext&, int)
void ScriptContext::SetReturn<SVarArray, ScriptArrayObject>(int, ScriptArrayObject)
SVarArray::Init()
SAction_Array_NumberToArray::Exec(ScriptContext&)
SAction_Array_Create::Exec(ScriptContext&)
SAction_Array_Size::Exec(ScriptContext&)
SAction_Array_Add::Exec(ScriptContext&)
SAction_Array_Clear::Exec(ScriptContext&)
SAction_Array_Remove::Exec(ScriptContext&)
SAction_Array_Get::Exec(ScriptContext&)
SAction_Array_Set::Exec(ScriptContext&)
SAction_Array_CreateCopy::Exec(ScriptContext&)
SVarArray::~SVarArray()
SVarArray::~SVarArray()
SAction_Array_NumberToArray::~SAction_Array_NumberToArray()
SAction_Array_NumberToArray::GetName() const
SAction_Array_NumberToArray::GetInputs(SCmdParams&) const
SAction_Array_NumberToArray::GetOutputs(SCmdParams&) const
SAction_Array_Size::~SAction_Array_Size()
SAction_Array_Size::GetName() const
SAction_Array_Size::GetInputs(SCmdParams&) const
SAction_Array_Size::GetOutputs(SCmdParams&) const
SAction_Array_Create::~SAction_Array_Create()
SAction_Array_Create::GetName() const
SAction_Array_Create::GetInputs(SCmdParams&) const
SAction_Array_Create::GetOutputs(SCmdParams&) const
SAction_Array_Add::~SAction_Array_Add()
SAction_Array_Add::GetName() const
SAction_Array_Add::GetInputs(SCmdParams&) const
SAction_Array_Add::GetOutputs(SCmdParams&) const
SAction_Array_Clear::~SAction_Array_Clear()
SAction_Array_Clear::GetName() const
SAction_Array_Clear::GetInputs(SCmdParams&) const
SAction_Array_Clear::GetOutputs(SCmdParams&) const
SAction_Array_Remove::~SAction_Array_Remove()
SAction_Array_Remove::GetName() const
SAction_Array_Remove::GetInputs(SCmdParams&) const
SAction_Array_Remove::GetOutputs(SCmdParams&) const
SAction_Array_Get::~SAction_Array_Get()
SAction_Array_Get::GetName() const
SAction_Array_Get::GetInputs(SCmdParams&) const
SAction_Array_Get::GetOutputs(SCmdParams&) const
SAction_Array_Set::~SAction_Array_Set()
SAction_Array_Set::GetName() const
SAction_Array_Set::GetInputs(SCmdParams&) const
SAction_Array_Set::GetOutputs(SCmdParams&) const
SAction_Array_CreateCopy::~SAction_Array_CreateCopy()
SAction_Array_CreateCopy::GetName() const
SAction_Array_CreateCopy::GetInputs(SCmdParams&) const
SAction_Array_CreateCopy::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarArray>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarArray>(char const*, ScriptContext&)
ScriptMemory::Flush()
ScriptMemory::AllocFixedPool()
yylex()
yy_create_buffer(_IO_FILE*, int)
yyrestart(_IO_FILE*)
yy_switch_to_buffer(yy_buffer_state*)
yy_delete_buffer(yy_buffer_state*)
yy_flush_buffer(yy_buffer_state*)
yypush_buffer_state(yy_buffer_state*)
yypop_buffer_state()
yy_scan_buffer(char*, unsigned long)
yy_scan_string(char const*)
yy_scan_bytes(char const*, int)
yyget_lineno()
yyget_in()
yyget_out()
yyget_leng()
yyget_text()
yyset_lineno(int)
yyset_in(_IO_FILE*)
yyset_out(_IO_FILE*)
yyget_debug()
yyset_debug(int)
yylex_destroy()
yyparsefile(char*, int)
yyparse()
SAction_GotoState::SAction_GotoState()
SAction_GotoState::GetName() const
SAction_GotoState::GetInputs(SCmdParams&) const
SAction_GotoState::GetOutputs(SCmdParams&) const
SAction_GotoState::Exec(ScriptContext&)
SAction_GotoState::~SAction_GotoState()
SCmdParameterName::SCmdParameterName(ScriptFile*, int, char const*)
SCmdParameterName::~SCmdParameterName()
SCmdParameterName::~SCmdParameterName()
SCmdParameterName::GetName() const
SCmdParameterName::GetInputs(SCmdParams&) const
SCmdParameterName::GetOutputs(SCmdParams&) const
SCmdParameterName::Exec(ScriptContext&)
SCmdAction::SCmdAction(ScriptFile*, int, SAction&, int, int)
SCmdAction::SetConditionDataIx(int&)
SCmdAction::GetName() const
SCmdAction::GetInputs(SCmdParams&) const
SCmdAction::GetOutputs(SCmdParams&) const
SCmdAction::Exec(ScriptContext&)
SCmdAction::~SCmdAction()
SCmdAssign::Exec(ScriptContext&)
SCmdAssign::~SCmdAssign()
SCmdAssign::GetName() const
SCmdAssign::GetInputs(SCmdParams&) const
SCmdAssign::GetOutputs(SCmdParams&) const
SCmdBeginState::Exec(ScriptContext&)
SCmdBeginState::~SCmdBeginState()
SCmdBeginState::GetName() const
SCmdBeginState::GetInputs(SCmdParams&) const
SCmdBeginState::GetOutputs(SCmdParams&) const
SCmdCall::GetInputs(SCmdParams&) const
SCmdCall::GetOutputs(SCmdParams&) const
SCmdCall::Exec(ScriptContext&)
SCmdCall::~SCmdCall()
SCmdCall::GetName() const
SCmdConstructor::Exec(ScriptContext&)
SCmdConstructor::~SCmdConstructor()
SCmdConstructor::~SCmdConstructor()
SCmdConstructor::GetName() const
SCmdConstructor::GetInputs(SCmdParams&) const
SCmdConstructor::GetOutputs(SCmdParams&) const
SCmdPrintCtx::Exec(ScriptContext&)
SCmdPrint::Exec(ScriptContext&)
SCmdPrintCtx::~SCmdPrintCtx()
SCmdPrintCtx::GetName() const
SCmdPrintCtx::GetInputs(SCmdParams&) const
SCmdPrintCtx::GetOutputs(SCmdParams&) const
SCmdPrint::~SCmdPrint()
SCmdPrint::GetName() const
SCmdPrint::GetInputs(SCmdParams&) const
SCmdPrint::GetOutputs(SCmdParams&) const
SCmdEnd::Exec(ScriptContext&)
SCmdEnd::~SCmdEnd()
SCmdEnd::GetName() const
SCmdEnd::GetInputs(SCmdParams&) const
SCmdEnd::GetOutputs(SCmdParams&) const
SCmdEqualityOp::Exec(ScriptContext&)
SCmdEqual::Exec(ScriptContext&)
SCmdNotEqual::Exec(ScriptContext&)
SCmdEqualityOp::~SCmdEqualityOp()
SCmdEqual::~SCmdEqual()
SCmdEqual::GetName() const
SCmdEqual::GetInputs(SCmdParams&) const
SCmdEqual::GetOutputs(SCmdParams&) const
SCmdNotEqual::~SCmdNotEqual()
SCmdNotEqual::GetName() const
SCmdNotEqual::GetInputs(SCmdParams&) const
SCmdNotEqual::GetOutputs(SCmdParams&) const
SCmdGoto::GetInputs(SCmdParams&) const
SCmdGoto::Exec(ScriptContext&)
SCmdGoto::~SCmdGoto()
SCmdGoto::~SCmdGoto()
SCmdGoto::GetName() const
SCmdGoto::GetOutputs(SCmdParams&) const
SCmdHold::Exec(ScriptContext&)
SCmdHold::~SCmdHold()
SCmdHold::GetName() const
SCmdHold::GetInputs(SCmdParams&) const
SCmdHold::GetOutputs(SCmdParams&) const
SCmdIf::Exec(ScriptContext&)
SCmdIf::~SCmdIf()
SCmdIf::GetName() const
SCmdIf::GetInputs(SCmdParams&) const
SCmdIf::GetOutputs(SCmdParams&) const
SCmdLiteralBool::Exec(ScriptContext&)
SCmdLiteralBool::~SCmdLiteralBool()
SCmdLiteralBool::GetName() const
SCmdLiteralBool::GetInputs(SCmdParams&) const
SCmdLiteralBool::GetOutputs(SCmdParams&) const
SCmdLiteralFloat::Exec(ScriptContext&)
SCmdLiteralFloat::~SCmdLiteralFloat()
SCmdLiteralFloat::GetName() const
SCmdLiteralFloat::GetInputs(SCmdParams&) const
SCmdLiteralFloat::GetOutputs(SCmdParams&) const
SCmdLiteralText::SCmdLiteralText(ScriptFile*, int, char const*)
SCmdLiteralText::~SCmdLiteralText()
SCmdLiteralText::~SCmdLiteralText()
SCmdLiteralText::GetName() const
SCmdLiteralText::GetHashCode() const
SCmdLiteralText::GetInputs(SCmdParams&) const
SCmdLiteralText::GetOutputs(SCmdParams&) const
SCmdLiteralText::Exec(ScriptContext&)
SCmdLiteralHash::SCmdLiteralHash(ScriptFile*, int, char const*)
SCmdLiteralHash::~SCmdLiteralHash()
SCmdLiteralHash::~SCmdLiteralHash()
SCmdLiteralHash::GetName() const
SCmdLiteralHash::GetHashCode() const
SCmdLiteralHash::GetInputs(SCmdParams&) const
SCmdLiteralHash::GetOutputs(SCmdParams&) const
SCmdLiteralHash::Exec(ScriptContext&)
SCmdNegate::Exec(ScriptContext&)
SCmdNegate::~SCmdNegate()
SCmdNegate::GetName() const
SCmdNegate::GetInputs(SCmdParams&) const
SCmdNegate::GetOutputs(SCmdParams&) const
SCmdNot::Exec(ScriptContext&)
SCmdNot::~SCmdNot()
SCmdNot::GetName() const
SCmdNot::GetInputs(SCmdParams&) const
SCmdNot::GetOutputs(SCmdParams&) const
SCmdReturn::Exec(ScriptContext&)
SCmdReturn::~SCmdReturn()
SCmdReturn::GetName() const
SCmdReturn::GetInputs(SCmdParams&) const
SCmdReturn::GetOutputs(SCmdParams&) const
SCmdStop::Exec(ScriptContext&)
SCmdStop::~SCmdStop()
SCmdStop::GetName() const
SCmdStop::GetInputs(SCmdParams&) const
SCmdStop::GetOutputs(SCmdParams&) const
SCmdAddText::Exec(ScriptContext&)
SCmdAddText::~SCmdAddText()
SCmdAddText::GetName() const
SCmdAddText::GetInputs(SCmdParams&) const
SCmdAddText::GetOutputs(SCmdParams&) const
SCmdVariable::Exec(ScriptContext&)
SCmdVariable::~SCmdVariable()
SCmdVariable::~SCmdVariable()
SCmdVariable::GetName() const
SCmdVariable::GetInputs(SCmdParams&) const
SCmdVariable::GetOutputs(SCmdParams&) const
SCmdWhile::Exec(ScriptContext&)
SCmdWhile::~SCmdWhile()
SCmdWhile::GetName() const
SCmdWhile::GetInputs(SCmdParams&) const
SCmdWhile::GetOutputs(SCmdParams&) const
SCmdYield::Exec(ScriptContext&)
SCmdYield::~SCmdYield()
SCmdYield::GetName() const
SCmdYield::GetInputs(SCmdParams&) const
SCmdYield::GetOutputs(SCmdParams&) const
ScriptCommand::~ScriptCommand()
ScriptCommand::~ScriptCommand()
ScriptCommand::Error(char const*) const
ScriptCommand::Print() const
ScriptCommand::Run(ScriptContext&, int)
ScriptCommand::ConvertTypes(ScriptContext&)
ScriptCommand::AddConverter(int, SAction*)
SVar::GetTypeName() const
ScriptParser::ScriptParser()
ScriptParser::~ScriptParser()
ScriptParser::GetCurrentParams(SCmdParams&)
ScriptParser::GetFilename() const
ScriptParser::TopScope(ScriptScope::SCOPE_TYPE)
ScriptParser::AddStatement(ScriptCommand&)
ScriptParser::CheckStack(ScriptCommand&, SCmdParams&, SCmdParams&)
ScriptParser::AddParameter(SVar const&)
ScriptParser::AddReturn(SVar const&)
ScriptParser::GetScope(int)
ScriptParser::GetFunction(char const*, int)
ScriptParser::GetState(char const*, int)
ScriptParser::GetFunction(char const*)
ScriptParser::GetVarStackOffset(char const*, SVar&)
ScriptFragment::Print() const
ScriptFragment::~ScriptFragment()
ScriptFragment::~ScriptFragment()
ScriptFunction::Print() const
ScriptFunction::~ScriptFunction()
NuMechPtr<MechCharacter, 8>::~NuMechPtr()
MechAbilityReferencePriority::~MechAbilityReferencePriority()
MechAbilities::Init()
MechAbilities::ParseAbilities(char const*)
MechAbilities::RegisterAbilitiesComplete()
MechAbilities::ValidateAbilities() const
MechAbilities::RegisterAbilities()
MechAbilities::RegisterAbility(char const*, MechAbilityRegisterInfo const*)
MechAbilities::FindAbility(char const*) const
MechAbility::SetCanUseOnEdClass(int)
MechAbilityRegisterInfo::PushSubAbilityInit(MechAbilityInit const&)
MechAbilityInit::~MechAbilityInit()
MechAbilityInit::AppendParams(char const*)
MechAbilityRegisterInfo::PushAbilityToSuppress(MechAbilityInit const&)
MechAbilityRegisterInfo::PushAbilityToNotSuppress(MechAbilityInit const&)
AddOnInit::AddOnInit(nufpar_s&)
MechAbilities::FindAbilities()
MechAbilities::GetRequiredPermanentAbilitiesForClass(EdClass const&, MechAbilitiesToAddAndSuppressFlagsAndListPtrs&)
MechAbilityFlags::Set(MechAbilityHandle const&)
MechAbilities::EventNotify(Event&, NuEventData&)
MechAbilities::OnChangedHandleAbilityPreFixup(MechAbilityHandle&)
CMList<MechAbilityHandle*>::Append(MechAbilityHandle* const&, CMList<MechAbilityHandle*>::ListLink*)
MechAbilityHandle::SetAbility(MechAbility*)
MechAbility::HasAddOnsInCommonWith(MechAbility const&, AddOnInit*&) const
MechAbilities::FindAbility(HashedKey const&) const
MechAbilityInstances::FindAbilityInstance(MechAbilityHandle const&, bool)
MechAbilityInstances::DestroyInstance(MechAbilityInstance&)
MechAbilityInstances::AddAbility_Internal(MechAbilityInit const&, MechAbilityReferencePriority const&)
MechAbilityHandle::CanUseOnEdClassOfMechObject(MechObjectInterface const&, char const**) const
MechAbilityInstances::AddAbilities(MechAbilityInitList const&, MechAbilityInstanceStrongPtrsList&, FlagPriority)
MechAbilityInstances::AddAbility(MechAbilityInit const&, FlagPriority)
MechAbilityInstances::AddAbilities(MechAbilityFlags const&, MechAbilityInstanceStrongPtrsList&, FlagPriority)
MechAbilityFlags::IsSetAny() const
MechAbilityFlags::IsSet(MechAbilityHandle const&) const
MechAbilityInstances::SuppressAbilities(MechAbilityFlags const&, MechAbilityInstanceStrongPtrsList&, FlagPriority)
MechAbilityInstances::SuppressAbility(MechAbilityHandle const&, FlagPriority)
MechAbilityInstances::HasAbilitiesAll(MechAbilityFlags const&) const
MechAbilityFlags::IsSetAll(MechAbilityFlags const&) const
MechAbilityInstances::HasAbilitiesAllWithoutReferencePriority(MechAbilityFlags const&, FlagPriority) const
MechAbilityInstance::IsReferencedWithoutPriority(FlagPriority) const
MechAbilityInstances::HasAbilitiesAny(MechAbilityFlags const&) const
MechAbilityFlags::IsSetAny(MechAbilityFlags const&) const
MechAbilityEdClassInfo::IsRelatedEdClass(EdClass const&)
MechAbility::CanUseOnEdClass(EdClass const&) const
NuEListNode<MechAbilityEdClassInfo, DefaultElist>::~NuEListNode()
MechAbility::RequestAddOnResources(ResourceHndlList&, MechAbilityInit const&) const
MechAbilityInstance::MechAbilityInstance(MechAbilityHandle const&, MechAbilityInstances&)
MechAbilityInstance::~MechAbilityInstance()
MechAbilityInstanceStrongPtr::Clear(bool)
MechAbilityInstance::~MechAbilityInstance()
MechAbilityInstance::AddReference(MechAbilityInstanceStrongPtr&)
MechAbilityInstance::OnReferenceAddedOrRemoved()
MechAbilityInstance::RemoveReference(MechAbilityInstanceStrongPtr&, bool)
MechAbilityInstance::FindStrongestReference() const
MechAbilityInstance::ResolveReferences(MechAbilityInit&, MechAbilityReferencePriority&)
MechAbilityReferencePriority::operator=(MechAbilityReferencePriority const&)
MechAbilityFlags::Set(MechAbilityHandle const&, bool)
MechAbilityInit::operator=(MechAbilityInit const&)
MechAbilityReferencePriority::IsEquivalentlySuppressed(MechAbilityReferencePriority const&) const
MechAbilityInstance::ProcessSubAbilitiesList(MechAbilityInit const&, MechAbilityReferencePriority const&)
MechAbilityInstance::ProcessAbilitiesToSuppressList(MechAbilityInit const&, MechAbilityReferencePriority const&)
MechAbilityInstance::ProcessAddOnInitList(MechAbilityInit const&, MechAbilityReferencePriority const&, bool)
CSListHeader<AddOnSmartPtrWithAddOnInit>::Delete(AddOnSmartPtrWithAddOnInit*)
MechAbility::CalculateSubAbilities(MechAbilityFlags&) const
MechAbility::CanFindInInitList(CSListHeader<MechAbilityInit> const&) const
IMechAbilitiesToAddAndSuppress::IsSetAny() const
IMechAbilitiesToAddAndSuppress::CalculateAbilitiesAndSubAbilities(MechAbilityFlags&) const
MechAbilityFlags::operator|=(MechAbilityFlags const&)
MechAbilityFlags::Set(MechAbilityInitList const&)
MechAbilityFlags::CalculateSubAbilities(MechAbilityFlags&) const
MechAbilityInstances::MechAbilityInstances(MechObjectInterface const&)
MechAbilityInstances::~MechAbilityInstances()
MechAbilityInstances::DestroyAll()
MechAbilityInstances::ResetPermanentAbilities(MechObjectInterface const&, bool)
MechAbilityInstances::ResetPermanentAbilities_Internal(IMechAbilitiesToAddAndSuppress const&)
MechAbilitiesToAddAndSuppressFlagsAndListPtrs::~MechAbilitiesToAddAndSuppressFlagsAndListPtrs()
MechAbilityInstanceStrongPtrsList::TransferFrom(MechAbilityInstanceStrongPtrsList&)
MechAbilityInstances::AddPermanentAbilities(IMechAbilitiesToAddAndSuppress const&)
MechAbilityInstances::CopyPermanentAbilityStrongPtrs(MechAbilityInstanceStrongPtrsList&) const
MechAbilityInstanceStrongPtrsList::CopyFrom(MechAbilityInstanceStrongPtrsList const&)
MechAbilityInstances::AddPermanentAbilities(MechAbilityFlags const&, AddAbilityMode const&)
MechAbilityInstances::AddPermanentAbility(MechAbilityInit const&, AddAbilityMode const&)
MechAbilityInstances::AddPermanentAbilities(MechAbilityInitList const&, AddAbilityMode const&)
MechAbilityFlags::MechAbilityFlags()
MechAbilityFlags::MechAbilityFlags(MechAbilityFlags const&)
MechAbilityFlags::MechAbilityFlags(MechAbilityInitList const&)
MechAbilityFlags::operator&=(MechAbilityFlags const&)
MechAbilityFlags::operator==(MechAbilityFlags const&)
MechAbilityFlags::Clear(MechAbilityHandle const&)
MechAbilityHandle::GetAbilityId() const
MechAbilityFlags::Clear(MechAbilityFlags const&)
MechAbilityFlags::GetNumBitsSet() const
MechAbilityFlags::IsSetAll(unsigned int) const
MechAbilityHandle::MechAbilityHandle(char const*)
MechAbilityHandle::MechAbilityHandle(MechAbilityHandle const&)
MechAbilityHandle::~MechAbilityHandle()
MechAbilityHandle::CalculateSubAbilities(MechAbilityFlags&) const
MechAbilityHandle::GetDebugName() const
MechAbilityHandle::GetBaseAbilityOnly() const
MechAbilityHandle::CanUseOnEdClass(EdClass const&) const
MechAbilityHandle::HasSubAbilities() const
MechAbilityInit::MechAbilityInit(nufpar_s&, bool&)
MechAbilityInit::RequestAddOnResources(ResourceHndlList&) const
MechAbilityInit::FindSubAbility(MechAbilityHandle const&) const
MechAbilityInitList::FindAbility(MechAbilityHandle const&, int) const
MechAbilityInit::FindSubAbilityInit(MechAbilityHandle const&, MechAbilityInit&) const
MechAbilityInitList::FindAbilityInit(MechAbilityHandle const&, int, MechAbilityInit&) const
MechAbilityInitList::RequestAddOnResources(ResourceHndlList&) const
MechAbilityInitList::FindAbilityInit(MechAbilityHandle const&) const
MechAbilityInitList::operator=(MechAbilityInitList const&)
MechAbilityFlags::RequestAddOnResources(ResourceHndlList&) const
MechAbilityReferencePriority::MechAbilityReferencePriority(MechAbilityHandle const&, FlagPriority const&, AddAbilityMode const&, int)
MechAbilityReferencePriority::SetTopmostParentAbilityHandle(MechAbilityHandle const&)
MechAbilityReferencePriority::MechAbilityReferencePriority(MechAbilityReferencePriority const&, MechAbilityReferencePriority::CopyBehaviour)
MechAbilityReferencePriority::Compare(MechAbilityReferencePriority const&) const
MechAbilityInstanceStrongPtr::MechAbilityInstanceStrongPtr(MechAbilityInstanceStrongPtr const&)
MechAbilityInstanceStrongPtr::MechAbilityInstanceStrongPtr(MechAbilityInstances&, MechAbilityInit const&, MechAbilityReferencePriority const&)
MechAbilityInstanceStrongPtr::~MechAbilityInstanceStrongPtr()
MechAbilityInstanceStrongPtr::IsAbility(MechAbilityHandle const&) const
MechAbilityInstanceStrongPtr::operator=(MechAbilityInstanceStrongPtr const&)
MechAbilityInstanceStrongPtrsList::HasAbilitiesAny(MechAbilityFlags const&) const
MechAbilityInstanceStrongPtrsList::HasAbilitiesAll(MechAbilityFlags const&) const
CSListHeader<MechAbilityInstanceStrongPtr>::~CSListHeader()
MechAbilities_StrongPointerIsInList(MechAbilityHandle const&, CSListHeader<MechAbilityInstanceStrongPtr>&)
MechAbilities::MenuUpdate(MENU*)
MechAbilities::MenuDraw(MENU*)
MechAbilities::~MechAbilities()
MechEventType::GetEventDataTypeHash() const
MechAbilitiesToAddAndSuppressFlagsAndListPtrs::GetAbilitiesToAdd() const
MechAbilitiesToAddAndSuppressFlagsAndListPtrs::GetAbilitiesToSuppress() const
MechAbilitiesToAddAndSuppressFlagsAndListPtrs::GetAbilitiesListToAdd() const
MechAbilitiesToAddAndSuppressFlagsAndListPtrs::GetAbilitiesListToSuppress() const
MechAbilitiesToAddAndSuppressFlagsAndListPtrs::GetAbilitiesListsToAdd() const
NuMechPtr<MechAbilityInstance, 8>::ManagedBase::~ManagedBase()
NuMechPtr<MechAbilityInstance, 8>::ManagedBase::~ManagedBase()
MechCharacterLists::CharacterCreated(MechCharacter&)
MechCharacterLists::CharacterAddedToCritical(MechCharacter&, bool)
MechCharacterLists::CharacterRemoveFromCritical(MechCharacter&, bool)
MechCharacterLists::CharacterDestroyed(MechCharacter&)
MechCharacterLists::CharacterSetPlayer(bool, MechCharacter&)
MechCharacterLists::CharacterSetActive(MechCharacter&)
MechCharacterLists::CharacterSetInactive(MechCharacter&)
MechCharacterLists::SetPartyArrayMember(int, MechCharacter*)
MechCharacterLists::GetPartyArrayMember(int)
MechCharacterLists::Contains(NuEList<MechCharacter, MechCharacterBaseListAllPartyOrAi>&, MechCharacter&)
MechCharacterLists::Contains(NuEList<MechCharacter, MechCharacterBaseListAllPlayers>&, MechCharacter&)
MechCharacterLists::Contains(NuEList<MechCharacter, MechCharacterBaseListAll>&, MechCharacter&)
MechCharacterLists::Contains(NuEList<MechCharacter, MechCharacterBaseListAllActive>&, MechCharacter&)
MechCharacterLists::Contains(NuEList<MechCharacter, MechCharacterBaseListAllRideable>&, MechCharacter&)
MechCharacterLists::Contains(NuEList<MechCharacter, GameObjectListAllActive>&, MechCharacter&)
MechCharacterLists::Contains(NuEList<MechCharacter, GameObjectListAll>&, MechCharacter&)
MechCharacterLists::Contains(NuEList<MechCharacter, GameObjectListAllPartyOrAi>&, MechCharacter&)
MechCharacterLists::Contains(NuEList<MechCharacter, CriticalCharacterListAll>&, MechCharacter&)
MechCharacterLists::DebugRenderAllCharacters(float&, float&, char const*, NuEList<MechCharacter, MechCharacterBaseListAllPlayers>&, unsigned int, unsigned int)
MechCharacterLists::DebugRenderAllCharacters(float&, float&, char const*, NuEList<MechCharacter, MechCharacterBaseListAllRideable>&, unsigned int, unsigned int)
MechCharacterLists::DebugRenderAllCharacters(float&, float&, char const*, NuEList<MechCharacter, MechCharacterBaseListAllPartyOrAi>&, unsigned int, unsigned int)
MechCharacterLists::DebugRenderAllCharacters(float&, float&, char const*, NuEList<MechCharacter, MechCharacterBaseListAll>&, unsigned int, unsigned int)
MechCharacterLists::DebugRenderAllCharacters(float&, float&, char const*, NuEList<MechCharacter, MechCharacterBaseListAllActive>&, unsigned int, unsigned int)
MechCharacterLists::DebugRenderAllCharacters(float&, float&, char const*, NuEList<MechCharacter, GameObjectListAll>&, unsigned int, unsigned int)
MechCharacterLists::DebugRenderAllCharacters(float&, float&, char const*, NuEList<MechCharacter, GameObjectListAllActive>&, unsigned int, unsigned int)
MechCharacterLists::DebugRenderAllCharacters(float&, float&, char const*, NuEList<MechCharacter, GameObjectListAllPartyOrAi>&, unsigned int, unsigned int)
MechCharacterLists::DebugRenderAllCharacters(float&, float&, char const*, NuEList<MechCharacter, CriticalCharacterListAll>&, unsigned int, unsigned int)
MechCharacterLists::DebugRender()
CONTEXTPACKET::~CONTEXTPACKET()
MechCharacterParams::MechCharacterParams()
MechCharacterParams::MechCharacterParams(char const*, int)
MechCharacterParams::MechCharacterParams(CharDefResourceHndl const&)
MechCharacterParams::MechCharacterParams(int, int)
MechCharacterParams::FindCharDefFromId(int)
MechCharacterParams::MechCharacterParams(int, VuMtx const&, int, int)
MechCharacterParams::MechCharacterParams(int, VuVec const&, int, int, int)
MechCharacterParams::IsCharacterModelIdLoaded(int)
MechCharacter::CanHaveCameraOnMe() const
MechCharacter::GetPlayer()
MechCharacter::GetPlayer() const
MechCharacter::MechCharacter()
MechCharacter::MechCharacter(EdRegContext&, MechCharacterParams const&)
PLAYERPACKET::PLAYERPACKET()
MechCharacter::SetTargetHeading(float)
MechCharacter::SetGameFlag(GAMEOBJFLAG, bool, cGameObjFlags::Priority const&)
MechCharacter::SetupPhysicsCharacter()
MechCharacter::SetMaxHitPoints(unsigned char)
MechCharacter::SetHitPoints(signed char)
MechCharacter::GetMaxHitPoints() const
MechCharacter::ClearContext()
MechCharacter::AddInventory()
MechCharacter::GetInventory() const
MechCharacter::GetId() const
MechCharacter::SetTargetCamera(GAMECAMERA*)
MechCharacter::AddInput()
MechCharacter::ResetTurnRate()
MechCharacter::ProcessSafePosition()
MechCharacter::UpdateTrackingVariables()
MechCharacter::DispatchEvent(MechEventType const&, MechObjectEventData*)
MechCharacter::GetAI()
MechCharacter::~MechCharacter()
MechCharacter::GetRiderObj(VehicleDefSeat::SEATTYPES) const
MechCharacter::GetAnimOverrideList()
PLAYERPACKET::~PLAYERPACKET()
MechCharacter::ClearVehicle()
MechCharacter::RemoveCamHiddenInfo()
MechCharacter::DestroyCharacterMovementAddOn()
non-virtual thunk to MechCharacter::~MechCharacter()
non-virtual thunk to MechCharacter::~MechCharacter()
non-virtual thunk to MechCharacter::~MechCharacter()
non-virtual thunk to MechCharacter::~MechCharacter()
MechCharacter::~MechCharacter()
non-virtual thunk to MechCharacter::~MechCharacter()
non-virtual thunk to MechCharacter::~MechCharacter()
non-virtual thunk to MechCharacter::~MechCharacter()
non-virtual thunk to MechCharacter::~MechCharacter()
MechCharacter::Initialise()
MechCharacter::Respawn()
MechCharacter::GetLastSafePosition() const
MechCharacter::SetDeadState(eDEADSTATES)
MechCharacter::IsGameFlagSet(GAMEOBJFLAG) const
MechCharacter::SetInvulnerable(float)
MechCharacter::ClearGameFlag(GAMEOBJFLAG, cGameObjFlags::Priority const&)
MechCharacter::PlaySfx(SFXTypeID const&, NUVEC const*, NuSoundHandle*, float, float, bool, int) const
MechCharacter::GetCPos() const
MechCharacter::GetGamePad()
MechCharacter::GetTargetCamera() const
MechCharacter::InitIK()
MechCharacter::IsNetworkGhost() const
MechCharacter::GetLastSafeTakeOverCharacter()
MechCharacter::GetTakeOverCharacter()
MechCharacter::SetOldPos(VuVec const&)
MechCharacter::SetPos(NUVEC const*)
MechCharacter::GetShadowY() const
MechCharacter::Teleport(VuVec const&, unsigned short, unsigned char)
MechCharacter::GetYRot() const
MechCharacter::CalculateWhetherInLoadedRegion(bool) const
MechCharacter::GetCollisionRadiusY() const
MechCharacter::GetCharacterModel() const
MechCharacter::GetActionOverride(ActionOverrides::ACTION_OVERRIDES)
MechCharacter::GetAddOns()
MechCharacter::RequestTeleportAfterSplitFadeOut(VuVec const&, unsigned short, bool)
MechCharacter::ClearHitBit(MechCharacter*)
MechCharacter::GetMountedObject(bool)
MechCharacter::GetLastSafeMountedObject(VehicleDefSeat::SEATTYPES*)
MechCharacter::TryToMountLastSafeObject(bool)
MechCharacter::KillPlayer()
MechCharacter::GetClass() const
non-virtual thunk to MechCharacter::GetClass() const
MechCharacter::IsAttached() const
MechCharacter::IsAttachBlockingTag() const
MechCharacter::GetContextInfoFlags() const
MechCharacter::PreAvoidanceProcess(float)
MechCharacter::UpdateOldTimers(float)
MechCharacter::GetInput() const
MechCharacter::UpdatePushPriority()
non-virtual thunk to MechCharacter::PreAvoidanceProcess(float)
MechCharacter::PostAvoidanceProcess(float)
MechCharacter::UpdateAI()
MechCharacter::UpdateStateFromTerrain()
MechCharacter::ProcessKill()
MechCharacter::SetFlicker(float)
MechCharacter::GetFlicker() const
MechCharacter::CallHook(unsigned char, HookArgs*)
MechCharacter::ProcessMovement(float)
non-virtual thunk to MechCharacter::PostAvoidanceProcess(float)
MechCharacter::PrePhysicsProcess(float)
MechCharacter::UpdateAIPopulationManagerStuff()
MechCharacter::HasAbility(MechAbilityHandle const&) const
MechCharacter::GetAnimOverride(int)
MechCharacter::GetContextInfo() const
MechCharacter::SetAnim(int, CharInst::SetAnimFlags)
MechCharacter::DebugMovement()
non-virtual thunk to MechCharacter::PrePhysicsProcess(float)
MechCharacter::PostPhysicsProcess(float)
non-virtual thunk to MechCharacter::PostPhysicsProcess(float)
MechCharacter::Render()
MechCharacter::GetCharAlpha() const
MechCharacter::GetReflect()
non-virtual thunk to MechCharacter::Render()
non-virtual thunk to MechCharacter::Render()
MechCharacter::GetCharPad()
MechCharacter::SetTargetHeading(unsigned short)
MechCharacter::ProcessTrackRoot(NUVEC&, bool&)
MechCharacter::AddConveyorSpeedToVelocity(VuVec&)
MechCharacter::SetTMom(VuVec const&)
MechCharacter::SetMom(VuVec const&)
MechCharacter::SetMomXZ(VuVec const&)
MechCharacter::GetMom() const
MechCharacter::IsInMechContext(int) const
MechCharacter::SetMechContext(int, int, MechContextPacket*, MechContext::MechContextPriority)
MechCharacter::GetDefaultContextId() const
MechCharacter::SetContextAction(int, CharInst::SetAnimFlags)
MechCharacter::RequestTeleportAfterFadeOut(VuVec const&, unsigned short)
MechCharacter::RequestTeleport(VuVec const&, unsigned short, bool, bool, bool, bool, bool, bool)
MechCharacter::Teleport_Internal(VuVec const&, RequestTeleportAddon*)
MechCharacter::Teleport(VuVec const&)
MechCharacter::SetHeading(unsigned short, bool)
MechCharacter::GetPos() const
MechCharacter::SetOldCPos(NUVEC const&)
MechCharacter::SetLastSafePosition(NUVEC const&)
MechCharacter::GetContextAction() const
MechCharacter::SetContextTime(float)
MechCharacter::GetContextTime() const
MechCharacter::SetAction(short)
MechCharacter::GetAction(int)
MechCharacter::SetActionOverride(short, short)
MechCharacter::GCDataOverrideAction(ActionOverrides::ACTION_OVERRIDES, short) const
MechCharacter::SetAnimFlags(CharInst::SetAnimFlags)
MechCharacter::GetAnimFlags() const
MechCharacter::AddAnimOverride(int, int)
MechCharacter::RemoveAnimOverride(int)
MechCharacter::ResetAnimOverrides()
MechCharacter::GetActiveActionId() const
MechCharacter::GetTargetActionId() const
MechCharacter::SetActionOverridesValid(short, int)
MechCharacter::TickActionOverridesValid(short)
MechCharacter::ActionHasTrackRoot(int, CharTrackRootFlags)
MechCharacter::ActionCalcTrackRootTranslationDistXZ(int, float&)
MechCharacter::GetCharDef() const
MechCharacter::ActionCalcTrackRootTranslation(int, VuVec&)
MechCharacter::ActionCalcTrackRootMtx(int, NUMTX&, float)
MechCharacter::ActionCalcTrackRootPos(int, VuVec&, float)
MechCharacter::CanDamageAsAi() const
MechCharacter::GetActionOverridesValid(short)
MechCharacter::CanBlock(unsigned short)
MechCharacter::GetOpponent() const
MechCharacter::GetShooterObject()
MechCharacter::GetTakeOverCharacter() const
MechCharacter::SetTakeOverCharacter(MechCharacter*)
MechCharacter::SetLastSafeTakeOverCharacter(MechCharacter*)
MechCharacter::HasSafePosition() const
MechCharacter::ClearSafePosition()
MechCharacter::GetLastAlivePosition() const
MechCharacter::GetLastSafePathPosition() const
MechCharacter::SetLastAlivePosition(NUVEC const&)
MechCharacter::SetLastSafePathPosition(NUVEC const&)
MechCharacter::SetLastMountedObject(MechObjectInterface*)
MechCharacter::GetLastMountedObject()
MechCharacter::PlaySfx(short, NUVEC const*, NuSoundHandle*, float, float, bool, int) const
MechCharacter::GetOpponent_override() const
MechCharacter::SetOpponent_override(MechCharacter*)
MechCharacter::SetLegacyContext(int, MechContext::MechContextPriority)
MechCharacter::GetLegacyContextPacket()
MechCharacter::GetLegacyContextPacket() const
MechCharacter::SetLegacyContextAction(int)
MechCharacter::GetLegacyContextAction() const
MechCharacter::SetLegacyContextTime(float)
MechCharacter::GetLegacyContextTime() const
MechCharacter::GetLegacyContextOpponentObj()
MechCharacter::GetLegacyContextOpponentObj() const
MechCharacter::GetContextName() const
MechCharacter::ShouldUseSmoothedY()
AllowPhysicsYSmoothingArgs::~AllowPhysicsYSmoothingArgs()
non-virtual thunk to MechCharacter::ShouldUseSmoothedY()
MechCharacter::GetCanUse()
MechCharacter::GetCanUse() const
MechCharacter::GetRoomId() const
MechCharacter::SetRoomId(short)
MechCharacter::PartyIndexOrPlayerStateChanged()
MechCharacter::AddAbility(MechAbilityHandle const&, FlagPriority)
MechCharacter::GetRegularBrain() const
MechCharacter::Init(int, int, ePlayerAssociation)
MechCharacter::GetMechAI()
MechCharacter::IsCritical() const
MechCharacter::IsPlayer() const
MechCharacter::GetAIPos() const
MechCharacter::UpdateOnScreen()
MechCharacter::ApplyDefaultOrder()
MechCharacter::GetGameData() const
MechCharacter::GetAIDir() const
MechCharacter::GetZAxisVector() const
MechCharacter::GetSector(cAIWorldNode const*) const
MechCharacter::StartCooldownTimer(unsigned int)
MechCharacter::SetVehicle(WeakPtr<cAIVehicle>, VehicleDefSeat::SEATTYPES)
MechCharacter::IsFriend(MechCharacter*) const
MechCharacter::OnEvent(eAIEvent, WeakPtr<cAITarget>)
MechCharacter::ResetAICharType(int, int)
MechCharacter::GetGamePad() const
MechCharacter::SetGamePad(LegoGamePad*)
MechCharacter::ModifiedTargetHeading() const
MechCharacter::TargetHeading() const
MechCharacter::SetPositionNUVECEx(NUVEC const*, bool)
MechCharacter::GetGround() const
MechCharacter::IsOnGround() const
MechCharacter::RequestDestroy()
MechCharacter::GetRotOrder() const
MechCharacter::SetXRot(unsigned short)
MechCharacter::SetZRot(unsigned short)
MechCharacter::GetTrackRootScale() const
MechCharacter::GetTMom() const
MechCharacter::GetTrackRootRotScale()
MechCharacter::GetScale() const
MechCharacter::SetTargetHeading(int)
MechCharacter::GetFallTime()
MechCharacter::IsStandingOnSurfaceType(unsigned int) const
MechCharacter::DeadProcess()
MechCharacter::SetCharAlpha(float)
MechCharacter::CanRespawn() const
MechCharacter::GetGroundNormal() const
MechCharacter::CheckForSliding()
MechCharacter::Cast(Entity const*)
MechCharacter::IsDeadOrDying() const
MechCharacter::UpdateStateFromWater()
MechCharacter::SetLastSafeMountedObject(MechObjectInterface*, VehicleDefSeat::SEATTYPES const&)
MechCharacter::GetInvulnerable()
MechCharacter::IsCharacterIsStandingOnTopOfAVehicle()
MechCharacter::IsOnSlideSurface()
MechCharacter::GetContextHandler()
MechCharacter::FadeIn(float)
MechCharacter::FadeOut(float)
MechCharacter::IsFadingIn()
MechCharacter::IsFadingOut()
MechCharacter::IsInWater() const
MechCharacter::GetMaxJumpHeight() const
MechCharacter::GetHoverHeight() const
MechCharacter::SetBurnTimer(float)
MechCharacter::GetBurnTimer()
MechCharacter::DistanceToGround()
MechCharacter::GetCharPad() const
MechCharacter::GetContextHandler() const
MechCharacter::GetContextHandlerLegacy() const
MechCharacter::GetContextHandlerLegacy()
MechCharacter::GetContextRef()
MechCharacter::GetContextRef() const
MechCharacter::SystemLevelClearContext()
MechCharacter::HasContext() const
MechCharacter::GetContext() const
MechCharacter::GetCharModelID() const
MechCharacter::GetOldCPos() const
MechCharacter::GetOldPos() const
MechCharacter::SetCPos(VuVec&)
MechCharacter::GetStableCPos(VuVec&)
MechCharacter::GetCollisionHeight() const
MechCharacter::GetPosAsNuVec3() const
MechCharacter::GetLastAlivePos() const
MechCharacter::GetChanceOfBeingKilledByPartyAI()
MechCharacter::SetChanceOfBeingKilledByPartyAI(float)
MechCharacter::SetForceOffGround()
MechCharacter::SetForceOnGround()
MechCharacter::IsNearGround() const
MechCharacter::IsIntersectingWater(float*, bool) const
MechCharacter::IsIntersectingWaterVolume(float*, bool) const
MechCharacter::GetLayerY() const
MechCharacter::GetSurfaceType() const
MechCharacter::GetLayerType() const
MechCharacter::GetBestContactPoint_deprecated() const
MechCharacter::GetFirstContactPointTerrainType_deprecated() const
MechCharacter::GetContactPoint_deprecated() const
MechCharacter::GetContactPointNormal_deprecated() const
MechCharacter::IsContactPointAvailable_deprecated() const
MechCharacter::IsTouchingTerrainType(unsigned char) const
MechCharacter::GetContactEntity()
MechCharacter::GetIdle()
MechCharacter::SetIdle(IDLEPACKET)
MechCharacter::SetHoverHeight(float)
MechCharacter::IsVehicleSeated() const
MechCharacter::GetSeatPosition(int)
MechCharacter::GetDismountPosition(int)
MechCharacter::CurrentHeading() const
MechCharacter::SyncAnimPackets(MechCharacter&)
MechCharacter::SetAnimSyncSlave(MechCharacter&)
MechCharacter::SetAnimSyncMaster(MechCharacter&)
MechCharacter::ClearAnimSync()
MechCharacter::GetMomXZ() const
MechCharacter::GetTMomXZ() const
MechCharacter::SetForceMom(NUVEC const&)
MechCharacter::GetForceMom()
MechCharacter::GetMin() const
MechCharacter::GetMax() const
MechCharacter::GetCMin() const
MechCharacter::GetCMax() const
MechCharacter::GetXAxisVector() const
MechCharacter::GetScaledCollisionRadius() const
MechCharacter::GetCollisionRadius() const
non-virtual thunk to MechCharacter::GetScaledCollisionRadius() const
MechCharacter::GetMass() const
MechCharacter::SetTargetHeading_New(int)
MechCharacter::SetTargetHeading_New(float)
MechCharacter::SetTargetHeadingPosition(VuVec const&)
MechCharacter::SetMaxYRotSeek(float)
MechCharacter::GetTargetHeading() const
MechCharacter::IsPartyAvoidanceEnabled() const
MechCharacter::GetAiMoveDirUp() const
MechCharacter::GetAiMoveDirDown() const
MechCharacter::SetHeadingOverride(int)
MechCharacter::GetHeadingOverride() const
MechCharacter::SetRotOrder(unsigned char)
MechCharacter::GetXRot() const
MechCharacter::GetZRot() const
MechCharacter::SetYRot(unsigned short)
MechCharacter::IsVehicle() const
MechCharacter::SetNetworkGhost(bool)
MechCharacter::SetAnimSpeedMultiplier(float)
MechCharacter::GetAnimSpeedMultiplier() const
MechCharacter::SetCanPlayAnimBackwardsThisFrame()
MechCharacter::SetAnimParameter(float)
MechCharacter::GetAnimParameter()
MechCharacter::IsAnimFinished() const
MechCharacter::AnimFrame() const
MechCharacter::SetAnimFrame(float)
MechCharacter::RequestAnimStartFrame(float)
MechCharacter::DoesPitchRollYawGetAutoApplied() const
MechCharacter::GetLastSafePlatform() const
MechCharacter::SetLastSafePlatform(long)
MechCharacter::GetUniqueId()
MechCharacter::SetTrackRootScale(NUVEC const&)
MechCharacter::SetTrackRootRotScale(float)
MechCharacter::GetSoundHandle(eSoundHandleType)
MechCharacter::GetLastAttacker() const
MechCharacter::SetLastAttacker(MechCharacter*)
MechCharacter::GetGameObjectToSpawnOn() const
MechCharacter::SetGameObjectToSpawnOn(MechCharacter*)
MechCharacter::SetPosToGameObjectToSpawnOn()
MechCharacter::GetObjTakeoverTarget() const
MechCharacter::SetObjTakeoverTarget(MechCharacter*)
MechCharacter::GetGroundOld() const
MechCharacter::GetPlatform() const
MechCharacter::GetShadowPlatform() const
MechCharacter::GetShadowYForcedSphereCast() const
MechCharacter::GetRoofY() const
MechCharacter::GetForWaterShadowY() const
MechCharacter::GetAccurateHeightFromGroundOrWater()
MechCharacter::GetApiObject_ObjId() const
MechCharacter::GetHitPoints() const
MechCharacter::GetAttackOverride() const
MechCharacter::SetAttackOverride(unsigned char)
MechCharacter::IsDeadOrWaiting() const
MechCharacter::IsBoss() const
MechCharacter::SetBoss(bool)
MechCharacter::SetSpeedOverride(float, SPEED_OVERRIDE)
MechCharacter::GetGameFlags()
MechCharacter::GetGameFlags() const
MechCharacter::SetAttached(bool)
MechCharacter::SetAttachBlockingTag(bool)
MechCharacter::GetScriptProcessor(bool)
MechCharacter::GetAbilityFlags() const
MechCharacter::AddAbilities(MechAbilityInitList const&, MechAbilityInstanceStrongPtrsList&, FlagPriority)
MechAbilityInstances::AddAbility(MechAbilityHandle const&, FlagPriority)
MechCharacter::AddPermanentAbility(MechAbilityHandle const&, AddAbilityMode const&)
MechCharacter::CopyPermanentAbilityStrongPtrs(MechAbilityInstanceStrongPtrsList&) const
MechCharacter::SuppressAbility(MechAbilityHandle const&, FlagPriority)
MechCharacter::SetAlphaTemporarily(float)
MechCharacter::GetBlockingFlags()
MechCharacter::SetBlockingFlags(unsigned short)
MechCharacter::GetPlayerBlockExcludeFlags()
MechCharacter::SetPlayerBlockExcludeFlags(unsigned short)
MechCharacter::SetComboCount(int)
MechCharacter::GetComboCount()
MechCharacter::SetComboTimer(float)
MechCharacter::GetComboTimer()
MechCharacter::GetDefendTimer() const
MechCharacter::SetDefendTimer(float)
MechCharacter::GetOneAtOnceIndex() const
MechCharacter::SetOneAtOnceIndex(unsigned char)
MechCharacter::SetHitBit(MechCharacter*)
MechCharacter::GetObjIdMask()
MechCharacter::SetHitBit(unsigned long)
MechCharacter::ClearHitBit(unsigned long)
MechCharacter::GetHitBit(MechCharacter*)
MechCharacter::GetHitBit(unsigned long)
MechCharacter::InitObjIdMask()
MechCharacter::SetKnowsAbout(MechCharacter*)
MechCharacter::ClearKnowsAbout()
MechCharacter::ClearKnowsAbout(MechCharacter*)
MechCharacter::GetKnowsAbout(MechCharacter*)
MechCharacter::SetNoCollisionBit(MechCharacter&)
MechCharacter::SetNoCollisionBit(unsigned long)
MechCharacter::ClearNoCollisionBit(MechCharacter&)
MechCharacter::ClearNoCollisionBit(unsigned long)
MechCharacter::GetNoCollisionBit(MechCharacter&)
MechCharacter::GetNoCollisionBit(unsigned long)
MechCharacter::GetTargetArray() const
MechCharacter::SetTargetArray(TargetArray*)
MechCharacter::GetInvulnerableExceptions() const
MechCharacter::SetInvulnerableExceptions(unsigned int)
MechCharacter::DontPush()
MechCharacter::SetSuperCarryThroughDoor(GizItem*)
MechCharacter::GetSuperCarryThroughDoor()
MechCharacter::SetReflect(unsigned char)
MechCharacter::SetReflectAxis(unsigned char)
MechCharacter::GetReflectAxis()
MechCharacter::SetReflectCoord(float)
MechCharacter::GetReflectCoord()
MechCharacter::GetComboBlockSkill() const
MechCharacter::SetComboBlockSkill(unsigned char)
MechCharacter::GetNumCombosBlocked() const
MechCharacter::SetNumCombosBlocked(unsigned char)
MechCharacter::GetBlockCountResetTimer() const
MechCharacter::SetBlockCountResetTimer(float)
MechCharacter::GetWeaponPoweredUpTimer() const
MechCharacter::SetWeaponPoweredUpTimer(float)
MechCharacter::GetKillNextUpdate() const
MechCharacter::SetKillNextUpdate(eKillNextUpdateMode, MechCharacter*, bool, GameObject_KillPartsArgs*, bool)
MechCharacter::ClearKillNextUpdate()
MechCharacter::InitAddOns()
MechCharacter::GetDefaultTurnRate()
MechCharacter::DisableTerrainCheck()
MechCharacter::EnableTerrainCheck()
MechCharacter::HasTransformChangedThisFrame()
MechCharacter::GadgetOpponent(float, float, float, int, unsigned long const&, unsigned long const&, unsigned long const&)
MechCharacter::GetCapabilities() const
MechCharacter::SetCapabilities(unsigned int)
MechCharacter::ClearCapabilities()
MechCharacter::AddCapability(unsigned int)
MechCharacter::ResetAnimPacket(int)
MechCharacter::SetTargetable(bool)
MechCharacter::GetTargetable() const
MechCharacter::ShouldBeAvoided(Brain const&) const
non-virtual thunk to MechCharacter::ShouldBeAvoided(Brain const&) const
MechCharacter::UpdateBox()
non-virtual thunk to MechCharacter::UpdateBox()
non-virtual thunk to MechCharacter::UpdateBox()
MechCharacter::PrepareBrain()
non-virtual thunk to MechCharacter::PrepareBrain()
MechCharacter::RequestKill(MechRequestKillInfo const&)
MechCharacter::GetMountedVehicle(bool)
MechCharacter::GetTargetCursurInfoFlag(MechTargetCursorInfo::flags)
MechCharacter::SetTargetCursurInfoFlag(MechTargetCursorInfo::flags, bool)
MechCharacter::GetCamera() const
MechCharacter::GetOpponentObj(MechObjectData&) const
MechCharacter::GetCamHiddenInfo()
MechCharacter::GetBeenHit(BeenHit::BeenHitType, MechObjectInterface*, BoltTypeID) const
MechCharacter::SetBeenHit(BeenHit::BeenHitType, bool, MechObjectInterface*, BoltTypeID, NUVEC*)
MechCharacter::ClearIK()
MechCharacter::GetCameraEvalPosition(VuVec&, float*, bool)
MechCharacter::IsRagDollCastable() const
MechCharacter::SetRagDollCastable(bool)
MechCharacter::SetBodyFaceTargetPos(VuVec const&)
MechCharacter::IsInAction_Deprecated(short) const
MechCharacter::IsInTargetingMode()
MechCharacter::GetOpponentInterface() const
MechCharacter::IsRiddenByPlayer() const
MechCharacter::IsAIOrRiddenByAI() const
MechCharacter::DirectSetActive(bool)
MechCharacter::GetFrom(MechVehicle const&, VehicleDefSeat::SEATTYPES)
MechCharacter::Cast(RigidBody*)
MechCharacter::AddStrongRef()
MechCharacter::ReleaseStrongRef()
MechCharacter::GetRespawnPosition()
MechCharacter::IsSprinting() const
MechCharacter::IsMyMovementReallySuppressed()
MechCharacter::LowCeilingCheck(Entity*, VuVec const&)
MechCharacter::GetApiCharacter()
MechCharacter::GetAvoidableBrain() const
non-virtual thunk to MechCharacter::GetApiCharacter()
non-virtual thunk to MechCharacter::GetAvoidableBrain() const
MechObjectEventData::~MechObjectEventData()
MechObjectEventData::GetEventDataClassType() const
MechObjectEventData::IsDerivedFrom(HashedKey const&)
MechObjectEventData::GetInstanceTypeHash()
AllowPhysicsYSmoothingArgs::~AllowPhysicsYSmoothingArgs()
NuMechPtr<MechCharacter, 8>::ManagedBase::~ManagedBase()
NuMechPtr<MechCharacter, 8>::ManagedBase::~ManagedBase()
BeenHit::BeenHit(BeenHit::BeenHitType, MechObjectInterface*, BoltTypeID, MechCharacter*)
BeenHit::Initialise(BeenHit::BeenHitType, MechObjectInterface*, BoltTypeID)
BeenHit::SetBeenHit(BeenHit::BeenHitType, bool, MechObjectInterface*, BoltTypeID)
BeenHit::Update()
BeenHit::ClearBeenHitType(BeenHit::BeenHitType)
BeenHit::GetAttacker() const
BeenHit::GetBeenHit(BeenHit::BeenHitType, MechObjectInterface*, BoltTypeID, VuVec*) const
cGameObjFlags::GetFrom(MechObjectInterface&)
cGameObjFlags::OnChangedFlag(GAMEOBJFLAG const&)
MechCharacterBaseInterface::MechCharacterBaseInterface(MechCharacter&)
MechCharacterBaseInterface::~MechCharacterBaseInterface()
MechCharacterBaseInterface::~MechCharacterBaseInterface()
MechCharacterBaseInterface::operator=(MechCharacterBaseInterface const&)
MechCharacterBaseInterface::GetObjectEdClass() const
MechCharacterBaseInterface::GetTargetName() const
MechCharacterBaseInterface::GetGameType()
MechCharacterBaseInterface::GetGlowThrowType()
MechCharacterBaseInterface::GetMechCharacterBase()
MechCharacterBaseInterface::GetApiActor()
MechCharacterBaseInterface::GetMechOpponentInfo() const
MechCharacterBaseInterface::SetMechOpponentInfo(MechOpponentInfo*)
MechCharacterBaseInterface::GetPos(VuVec&, int) const
MechCharacterBaseInterface::GetDirection(VuVec&) const
MechCharacterBaseInterface::GetVelocity(VuVec&) const
MechCharacterBaseInterface::GetDimensions(VuVec&) const
MechCharacterBaseInterface::GetThrowingGlow()
MechCharacterBaseInterface::GetTargetPos(VuVec&, TARGETING_TYPE, int)
MechCharacterBaseInterface::GetTargetFloorPos(VuVec&, TARGETING_TYPE, int)
MechCharacterBaseInterface::GetIconPos(VuVec&, int)
MechCharacterBaseInterface::GetTargetHealthBarPos(VuVec&, TARGETING_TYPE, int)
MechCharacterBaseInterface::GetTargetRandomPos(VuVec&, TARGETING_TYPE, int)
MechCharacterBaseInterface::GetMtx(VuMtx&, int)
MechCharacterBaseInterface::SetMtx(VuMtx&, int)
MechCharacterBaseInterface::SetTransformExceptPhysics(VuMtx&, int)
MechCharacterBaseInterface::GetEntity() const
MechCharacterBaseInterface::DrivePhysicsToTransform(VuMtx const&, bool, bool)
MechCharacterBaseInterface::SetDriveToTransform(VuMtx&, int)
MechCharacterBaseInterface::Teleport(VuMtx const&, unsigned char)
MechCharacterBaseInterface::GetTargetMom(VuVec&, TARGETING_TYPE)
MechCharacterBaseInterface::GetRotY()
MechCharacterBaseInterface::GetTargetYRot()
MechCharacterBaseInterface::HasTerrain()
MechCharacterBaseInterface::SetAlpha(float)
MechCharacterBaseInterface::GetAlpha() const
MechCharacterBaseInterface::DoesEntityMatchTarget(Entity*)
MechCharacterBaseInterface::HandleBoltHit(Bolt*)
MechCharacterBaseInterface::GetHealthInfo()
MechCharacterBaseInterface::RequestKill(MechRequestKillInfo const&)
MechCharacterBaseInterface::SetShootAccuracy(unsigned char) const
MechCharacterBaseInterface::GetShootAccuracy() const
MechCharacterBaseInterface::CanBeHit(BeenHit const&) const
MechCharacterBaseInterface::TargetPosDoLOSCheck(NUVEC&, int&)
MechCharacterBaseInterface::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*)
MechCharacterBaseInterface::LOS_GetPoint(NUVEC&, WORLDINFO*&, TARGETING_TYPE, int) const
MechCharacterBaseInterface::IsTargetStillValid()
MechCharacterBaseInterface::GetActive()
MechCharacterBaseInterface::IsOnScreen()
MechCharacterBaseInterface::GetTagToData() const
MechCharacterBaseInterface::GetAllegiance() const
MechCharacterBaseInterface::IgnoreTerrainWhenThrowTarget() const
MechCharacterBaseInterface::SetCurrentPosition(VuVec&) const
MechCharacterBaseInterface::GetCurrentPosition(VuVec&)
MechCharacterBaseInterface::SetupLegoItemAddPart(ADDPART&, GizItem&, int)
MechCharacterBaseInterface::SetAttached(bool)
MechCharacterBaseInterface::SetAttachBlockingTag(bool)
MechCharacterBaseInterface::IsAttached() const
MechCharacterBaseInterface::IsAttachBlockingTag() const
MechCharacterBaseInterface::GetCollisionRadius()
MechCharacterBaseInterface::GetCollisionRadiusY()
MechCharacterBaseInterface::GetRadius() const
MechCharacterBaseInterface::GetCharInst() const
MechCharacterBaseInterface::GetRidingData() const
MechCharacterBaseInterface::GetOpponent() const
MechCharacterBaseInterface::GetRiddenObj() const
MechCharacterBaseInterface::GetRiderObj(VehicleDefSeat::SEATTYPES) const
MechCharacterBaseInterface::IsRideable() const
MechCharacterBaseInterface::IsCritical() const
MechCharacterBaseInterface::GetAddOns() const
MechCharacterBaseInterface::GetLevelContainer() const
MechCharacterBaseInterface::GetLocatorMtxWorld(int, VuMtx&) const
MechCharacterBaseInterface::GetAIData() const
MechCharacterBaseInterface::GetBrain() const
CharDef_GetGenericAbilitiesForVehicleType(CharDef const&, MechAbilityFlags&)
NuDynamicStringT<false>::operator<<(char const*)
CharDef_GetGenericAbilitiesForSkeleton(CharDef const&, MechAbilityFlags&)
CharDef_GetRequiredPermanentAbilities(CharDef const&, MechAbilitiesToAddAndSuppressFlagsAndListPtrs&)
MechCharacterBaseInterface::GetRequiredPermanentAbilities(MechAbilitiesToAddAndSuppressFlagsAndListPtrs&) const
MechCharacterBaseInterface::GetAbilityInstances(bool) const
MechCharacterBaseInterface::GetEventList(bool) const
MechCharacterBaseInterface::PlayScriptAnimation(int, MechScriptAnimationData*)
MechCharacterBaseInterface::StopScriptAnimation()
MechCharacterBaseInterface::IsScriptAnimationPlaying(int)
MechCharacterBaseInterface::GetScriptAnimationTimeRemaining()
MechCharacterBaseInterface::GetScriptAnimationDuration(bool)
MechCharacterBaseInterface::GetPhysicsChar()
MechCharacterBaseInterface::GetPhysicsChar() const
MechCharacterBaseInterface::GetMechCharacter() const
MechCharacterBaseInterface::GetGamePad()
MechCharacterBaseInterface::GetMechInput()
MechCharacterBaseInterface::GetTargetCamera()
MechCharacterBaseInterface::IsPlayerControlled()
MechCharacterBaseInterface::AddRidingData(MechRidingData&)
MechCharacterBaseInterface::RemoveRidingData(MechRidingData&)
MechCharacterBaseInterface::DestroyRidingData()
MechCharacterBaseInterface::GetPartyIndex()
MechCharacterBaseInterface::IsSafe() const
MechCharacterBaseHealthInfo::GetHostObject() const
MechCharacterBaseHealthInfo::IsInvulnerable(unsigned int, bool*)
MechCharacterBaseHealthInfo::SetInvulnerable(bool, unsigned int, bool)
MechCharacterBaseHealthInfo::SetHitPoints(int)
MechCharacterBaseHealthInfo::GetHitPoints()
MechCharacterBaseHealthInfo::GetMaxHitPoints()
MechCharacterBaseHealthInfo::SetMaxHitPoints(int)
MechCharacterBaseHealthInfo::GetBeenHit(BeenHit::BeenHitType, MechObjectInterface*, BoltTypeID)
MechCharacterBaseHealthInfo::SetBeenHit(BeenHit::BeenHitType, bool, MechObjectInterface*, BoltTypeID)
MechCharacterBaseHealthInfo::GetFlicker() const
MechCharacterBaseHealthInfo::GetDrawHitPointsInfo(int&, int&, bool&, int&, bool&)
MechObjectHealthInfoBase::RestoreHealth()
MechObjectHealthInfoBase::DrawHitPoints(float, float, float, float, int, float, int, HEARTPOS*)
MechCharacterBaseHealthInfo::~MechCharacterBaseHealthInfo()
MechCharacterBaseHealthInfo::~MechCharacterBaseHealthInfo()
MechCharacterBaseHealthInfo::IsHealthBarOnTwoRows()
MechCharacterBaseHealthInfo::IsDrawBossHitPointsSilver()
MechObjectInterface::SendInput(LegoGamePad const&) const
MechObjectInterface::GetNextConnectedObject(MechObjectInterface::ConnectionType, MechObjectInterface*) const
MechObjectInterface::GetTargetCursorPos(VuVec&, TARGETING_TYPE, int)
MechObjectInterface::GetLocatorMtxLocal(int, VuMtx&) const
MechObjectInterface::GetRadiusCheck(VuVec&, float)
MechObjectInterface::IsStickyTargetingEnabled() const
MechObjectInterface::ImmediateBoltDamage(MechCharacter*, BoltType const&)
MechObjectInterface::IsGizmo() const
MechObjectInterface::GetGizmo() const
MechObjectInterface::GetTargetKrawliePack()
MechObjectInterface::GetMechKrawlie() const
MechObjectInterface::GetMechVehicle() const
MechObjectInterface::GetApiVehicle() const
MechObjectInterface::GetBlowup() const
MechObjectInterface::GetObstacle()
MechObjectInterface::GetSpellIt()
MechObjectInterface::GetGrapple()
MechObjectInterface::GetGrapple() const
MechObjectInterface::GetTurret() const
MechObjectInterface::GetLedge() const
MechObjectInterface::GetComplexGizmo()
MechObjectInterface::GetBolt()
MechObjectInterface::GetItem()
MechObjectInterface::GetPlug()
MechObjectInterface::GetLegoSpecial()
MechObjectInterface::GetAIConvexLocator()
MechObjectInterface::GetPlaceable()
MechObjectInterface::IsCritical(bool) const
MechObjectInterface::DriveToMtx(VuMtx&, float)
MechObjectInterface::SetAttachedBlockingTag(bool)
MechObjectInterface::IsValidAsAttractor() const
MechObjectInterface::SetDynamic(bool, MechObjectData const&)
MechObjectInterface::DisableGravity(bool, MechObjectData const&)
MechObjectInterface::CharacterEnteredConvexNode(Brain*, ConvexNode const*)
MechCharacterBaseInterface::GetInterfaceType() const
MechObjectInterface::GetGadget() const
MechObjectInterface::GetNuUniqueObject() const
MechCharacterBaseInterface::BestToPunchIfPossible() const
MechCharacterAIData::MechCharacterAIData()
MechCharacterAIData::Reset()
MechCharacterAIData::ClearReferences(LevelContainer*)
MechCharacterAIData::ClearAIReferencesAI(LevelContainer*)
MechVehicleAIData::MechVehicleAIData()
MechVehicleAIData::Reset()
MechCharacterDynoListener::MechCharacterDynoListener(MechCharacter&)
MechCharacterDynoListener::OverlapBegin(Entity const*, Entity const*)
MechCharacterDynoListener::OverlapEnd(Entity const*, Entity const*)
MechCharacterDynoListener::Collision(BodyPair*, Array<ContactPoint>&)
MechCharacterDynoListener::Collision(Character*, Entity*, ContactPoint&)
MechCharacterDynoListener::AllowCollision(Entity const*, Entity const*)
MechCharacterDynoListener::RemoveEntity(Entity*)
MechCharacterNoCollisionListener::MechCharacterNoCollisionListener(MechCharacter&, MechCharacter&)
MechCharacterNoCollisionListener::~MechCharacterNoCollisionListener()
MechCharacterNoCollisionListener::~MechCharacterNoCollisionListener()
MechCharacterNoCollisionListener::AllowCollision(Entity const*, Entity const*)
MechCharacterNoVehicleCollisionListener::MechCharacterNoVehicleCollisionListener(ApiCharacter*, ApiVehicle*)
MechCharacterNoVehicleCollisionListener::AllowCollision(Entity const*, Entity const*)
MechCharacterNoEnityLayerCollisionListener::MechCharacterNoEnityLayerCollisionListener(MechCharacter&, Entity::EntityLayers)
MechCharacterNoEnityLayerCollisionListener::~MechCharacterNoEnityLayerCollisionListener()
MechCharacterNoEnityLayerCollisionListener::~MechCharacterNoEnityLayerCollisionListener()
MechCharacterNoEnityLayerCollisionListener::AllowCollision(Entity const*, Entity const*)
MechCharacterNoEnityLayerCollisionListener::IsOnIgnoreLayer(Entity const*) const
MechCharacterNoEntityCollisionListener::MechCharacterNoEntityCollisionListener(MechCharacter&, Entity*)
MechCharacterNoEntityCollisionListener::~MechCharacterNoEntityCollisionListener()
MechCharacterNoEntityCollisionListener::~MechCharacterNoEntityCollisionListener()
MechCharacterNoEntityCollisionListener::AllowCollision(Entity const*, Entity const*)
MechCharacterNoCollisionWithinSphereListener::MechCharacterNoCollisionWithinSphereListener(MechCharacter&, VuVec const&, float)
MechCharacterNoCollisionWithinSphereListener::~MechCharacterNoCollisionWithinSphereListener()
MechCharacterNoCollisionWithinSphereListener::~MechCharacterNoCollisionWithinSphereListener()
MechCharacterNoCollisionWithinSphereListener::Collision(Character*, Entity*, ContactPoint&)
MechCharacterDynoListenerDisjointAddOn::MechCharacterDynoListenerDisjointAddOn(MechCharacterNoEnityLayerCollisionListener*)
MechCharacterDynoListenerDisjointAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MechCharacterDynoListenerDisjointAddOn::OnHook(unsigned char, HookArgs*)
MechCharacterDynoListenerDisjointAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to MechCharacterDynoListenerDisjointAddOn::EventNotify(Event&, NuEventData&)
MechCharacterDynoListener::~MechCharacterDynoListener()
MechCharacterNoVehicleCollisionListener::~MechCharacterNoVehicleCollisionListener()
MechCharacterDynoListenerDisjointAddOn::~MechCharacterDynoListenerDisjointAddOn()
MechCharacterDynoListenerDisjointAddOn::~MechCharacterDynoListenerDisjointAddOn()
non-virtual thunk to MechCharacterDynoListenerDisjointAddOn::~MechCharacterDynoListenerDisjointAddOn()
non-virtual thunk to MechCharacterDynoListenerDisjointAddOn::~MechCharacterDynoListenerDisjointAddOn()
non-virtual thunk to MechCharacterDynoListenerDisjointAddOn::~MechCharacterDynoListenerDisjointAddOn()
non-virtual thunk to MechCharacterDynoListenerDisjointAddOn::~MechCharacterDynoListenerDisjointAddOn()
MechCharacterDynoListenerEventData::~MechCharacterDynoListenerEventData()
MechCharacterParamsHelper::RegisterClasses(EdRegistry&)
MechCharacterHelper::RegisterClasses(EdRegistry&)
Singleton<MechCharacterHelper>::Create()
MechCharacterHelper::MechCharacterHelper()
MechCharacterHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
MechCharacterHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
MechCharacterHelper::GetObjectPrams(void*, void*, int)
MechCharacterHelper::GetManNumObjects(ClassManager*, void*)
MechCharacterHelper::GetManNextObject(ClassManager*, void*, void*)
MechCharacterHelper::InitPlayers(WORLDINFO&) const
MechCharacterHelper::ResetPlayers(bool) const
MechCharacterHelper::NewPlayerCharacter(MechCharacter*, int, int, bool, bool, bool, bool)
MechCharacterHelper::~MechCharacterHelper()
MechCharacterHelper::~MechCharacterHelper()
MechCharacterParamsHelper::~MechCharacterParamsHelper()
MechCharacterIdleData::MechCharacterIdleData(MechCharacter&)
MechCharacterIdleData::~MechCharacterIdleData()
MechCharacterIdleData::UpdateIdleData(float, int)
MechCharacterIdleData::ResetIdle(short)
MechCharacterIdleData::NewIdle()
MechCharPad::MechCharPad(MechCharacter&)
MechCharPad::~MechCharPad()
MechCharPad::~MechCharPad()
MechCharPad::UpdateNuPadAssignment(int)
MechCharPad::CalcSpeedAngleFromPad(NUPAD&)
MechCharPad::Rumble(float) const
MechCharPad::Update(float)
MechCharPad::OverridePadData(MechCharPad&)
MechCharacterLists::~MechCharacterLists()
MechCharacters::MechCharacters()
MechCharacters::GetPartyMemberIfOn(int)
MechCharacters::GetRandomPartyMember(bool)
MechCharacters::SwapPartyMembers(MechCharacter&, MechCharacter&)
MechCharacters::SetPartyIndex(int, MechCharacter*, MechCharacters::SetPartyIndexAllowEventMode)
MechCharacters::SetPlayerControlled(bool, MechCharacter&)
MechCharacters::SetCharacterActive(MechCharacter&)
MechCharacters::SetCharacterInactive(MechCharacter&)
MechCharacters::Init()
MechCharacters::ShutDown()
MechCharacters::OnEnterLevel(MechLevelContainer&)
MechCharacters::OnExitLevel(MechLevelContainer&)
MechCharacters::CharacterProcessPreRender()
RenderOnlyTerrainMarkedAsKillFn(Geom::TerrExtra, unsigned char)
RenderOnlyTerrainFilteredForDebugging(Geom::TerrExtra, unsigned char)
MechCharacters::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MechCharacters_OnProcess_BlockInputForCharacter(MechCharacter&)
MechCharacters::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechCharacters::IsMovementSuppressedFor(MechCharacter&)
MechCharacters::ParseCommandLine(int, char**)
MechCharacters::GetNewMechCharacterListener(MechCharacter*)
MechCharacters::CreateAddOns(MechCharacter&)
MechCharacters::DestroyAddOns(MechCharacter&, AddOnList::eDestroyEvent)
MechCharacters::AddManagersForLevel(MechLevelContainer&)
MechCharacters::EventNotify(Event&, NuEventData&)
MechCharacters::RegisterAbilities()
MechCharacters::FindAbilities()
MechCharacters::FindNearestBoss(VuVec const&, MechCharacter const*, float)
MechCharacters::ChangePlayerCharacter(MechCharacter&, MechCharacter&, bool, bool)
MechCharacters::CreateRideData(MechCharacter&, MechCharacter&, VehicleDefSeat::SEATTYPES, unsigned int, cVehicleRidingBaseTask*)
MechCharacters::CreateMechRidingDataCharacter(MechCharacter&, MechCharacter&, VehicleDefSeat::SEATTYPES, unsigned int, MechRidingDataCharacterParams&)
MechCharacters::NotifyCharacterCreated(MechCharacter&)
ControlSuppressor::OnAdded()
ControlSuppressor::OnRemoved()
ControlSuppressor::OnHook(unsigned char, HookArgs*)
non-virtual thunk to ControlSuppressor::OnHook(unsigned char, HookArgs*)
ControlSuppressor::GetFrom(MechCharacter&)
ControlSuppressor::Touch(MechCharacter&)
MechCharacters::SuppressMovementFor(MechCharacter&)
MechCharacters::~MechCharacters()
MechSystemBase<MechCharacters, int>::Suppress(int)
MechSystemBase<MechCharacters, int>::IsSuppressed(int) const
MechCharacters::AllowedToTargetGameObject(MechCharacter*, MechCharacter*)
ControlSuppressor::~ControlSuppressor()
non-virtual thunk to ControlSuppressor::~ControlSuppressor()
non-virtual thunk to ControlSuppressor::~ControlSuppressor()
MechCharacters::EventChangedPartyMembershipData::~EventChangedPartyMembershipData()
MechContext::MechContext(MechCharacter&)
MechContext::~MechContext()
MechContext::GetObj() const
MechContext::PredictMovementForAvoidance(float)
MechContext::GetMechCharacter() const
MechContext::ProcessStandardContextBehaviour(MechContext*)
MechContext::ProcessStandardContextBehaviour(ContextBehaviourPacket&)
MechContext::ProcessNormalPadInput(ContextBehaviourPacket&)
MechContext::ProcessMovementAndHeading(ContextBehaviourPacket&)
MechContext::SeekTargetMom(VuVec&, VuVec const&, VuVec const&, VuVec const&, bool) const
MechContext::FindMoveAnim(ActionOverrides::ACTION_OVERRIDES)
MechContext::UpdateSprint()
MechContext::GetSpeedMul(float, float, float)
MechContext::GetLevelContainer() const
MechContext::GetContextId() const
MechContext::DoRegisterForHookManager()
MechContext::CreateToggleData() const
MechContext::PreToggleCollectData(ToggleDataPacket*) const
MechContext::PostToggleRestoreData(ToggleDataPacket*)
ToggleDataPacketScoped::ToggleDataPacketScoped(MechContext&)
MechContext::~MechContext()
MechContext::OnEnter(LevelContainer*)
MechContext::OnProcess(LevelContainer*, float)
operator|(CInfoFlagStruct const&, eCINFO const&)
DefaultContext::~DefaultContext()
MechContextSystem::MechContextSystem()
MechContextSystem::MechContextSystem(char const*)
MechContextSystem::Init()
MechContextSystem::GetContextInfo(int)
MechContextSystem::FindByName(char const*)
MechContextSystem::QueueForDeletion(MechContext&)
CMList<MechContext*>::Append(MechContext* const&, CMList<MechContext*>::ListLink*)
MechContextSystem::ProcessDeletionQueue()
MechContextSystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechContextSystem::ProcessObject(MechCharacter&, LevelContainer*, float)
MechContextSystem::RegisterMechContext(char const*, MechContext* (*)(MechCharacter&))
MechContextSystem::NotifyDestroyed(MechCharacter*)
MechContextSystem::~MechContextSystem()
MechContextSystem::~MechContextSystem()
MechSystemBase<MechContextSystem, int>::Suppress(int)
MechSystemBase<MechContextSystem, int>::IsSuppressed(int) const
MechContextSystem::RegisterContext(int&, char const*, MechContext* (*)(MechCharacter&), CInfoFlagStruct)
MechContextSystem::OnExitLevel(LevelContainer&)
DefaultContext::AllowLeave(int, MechContext*)
DefaultContext::OnEnter(LevelContainer*)
DefaultContext::OnLeave()
DefaultContext::InitFlags()
MechContext* MechContextConstructor<DefaultContext>(MechCharacter&)
MechContext* MechContextConstructor<JumpContext>(MechCharacter&)
MechContext* MechContextConstructor<FallContext>(MechCharacter&)
MechContext* MechContextConstructor<BigJumpContext>(MechCharacter&)
MechContext* MechContextConstructor<GlideContext>(MechCharacter&)
MechContext* MechContextConstructor<MechWallJumpWaitContext>(MechCharacter&)
MechContext* MechContextConstructor<ClimbContext>(MechCharacter&)
MechContext* MechContextConstructor<PoleClimbContext>(MechCharacter&)
MechContext* MechContextConstructor<SlideContext>(MechCharacter&)
MechContext* MechContextConstructor<SwimmingContext>(MechCharacter&)
MechContext* MechContextConstructor<DrowningContext>(MechCharacter&)
MechContext* MechContextConstructor<RunBackwardsContext>(MechCharacter&)
MechContext* MechContextConstructor<BackFlipContext>(MechCharacter&)
MechContext* MechContextConstructor<DoomedContext>(MechCharacter&)
MechContext* MechContextConstructor<DeathContext>(MechCharacter&)
MechContext* MechContextConstructor<FlattenContext>(MechCharacter&)
MechContext* MechContextConstructor<AIScriptAnimationContext>(MechCharacter&)
MechContext* MechContextConstructor<LegacyContext>(MechCharacter&)
MechContext* MechContextConstructor<GrindRailContext>(MechCharacter&)
MechContext* MechContextConstructor<JumpInContext>(MechCharacter&)
MechRidingData::SetNextRidingData(MechRidingData&)
MechRidingData::Add(MechRidingData&, MechRidingData**)
MechRidingData::Remove(MechRidingData&, MechRidingData**)
MechRidingData::OnRemoved()
MechRidingData::MechRidingData(MechObjectInterface&, VehicleDefSeat::SEATTYPES, HashedKey&, unsigned int)
MechRidingData::MechRidingData(MechObjectInterface&, MechObjectInterface&, VehicleDefSeat::SEATTYPES, HashedKey&, unsigned int)
MechRidingData::GetLevelContainer() const
non-virtual thunk to MechRidingData::GetLevelContainer() const
MechRidingData::GetSeatOccupant(MechObjectData&, VehicleDefSeat::SEATTYPES)
MechRidingData::Create(MechCharacter&, MechObjectInterface&, VehicleDefSeat::SEATTYPES, unsigned int)
MechRidingData::Destroy(MechRidingData&)
MechRidingData::NotifyRiddenObjectBeingDestroyed(MechObjectInterface&)
MechRidingData::~MechRidingData()
MechRidingData::~MechRidingData()
MechRidingData::Singleton()
MechRidingData::OnAdded()
MechRidingData::SetBlockPadOverride()
MechRidingData::CanEnterContext(int)
MechRidingData::RiderCanTakeDamage()
MechRidingData::InitiateDismount(DismountInfo const*)
MechRidingData::ForceRunPlayerAiTasks()
MechRidingData::IsDriver() const
MechRidingData::EnteredVehicle()
MechRidingData::IsMounted(bool)
MechRidingData::IsMounting()
MechRidingData::IsDismounting()
MechRidingData::PreEnterRideObject()
MechRidingData::EnteredRideObject()
MechRidingData::PostEnterRideObject()
MechRidingData::Abort()
MechRidingData::CanAbort()
non-virtual thunk to MechRidingData::~MechRidingData()
non-virtual thunk to MechRidingData::~MechRidingData()
BackFlipContext::BackFlipContext(MechCharacter&)
BackFlipContext::OnEnter(LevelContainer*)
BackFlipContext::OnProcess(LevelContainer*, float)
BackFlipContext::OnLeave()
BackFlipContext::OnHook(unsigned char, HookArgs*)
BackFlipContext::~BackFlipContext()
BackFlipContext::InitFlags()
DefaultContext::OnProcess(LevelContainer*, float)
DoomedContext::InitFlags()
DoomedContext::DoomedContext(MechCharacter&)
DoomedContext::AllowEnter(int, MechContext*)
DoomedContext::OnProcess(LevelContainer*, float)
DoomedContext::OnEnter(LevelContainer*)
DoomedContext::OnLeave()
DoomedContext::~DoomedContext()
DoomedContext::~DoomedContext()
DeathContext::InitFlags()
DeathContext::DeathContext(MechCharacter&)
DeathContext::AllowLeave(int, MechContext*)
DeathContext::AllowEnter(int, MechContext*)
DeathContext::OnLeave()
DeathContext::RespawnCharacter()
DeathContext::OnEnter(LevelContainer*)
DeathContext::SetUpDeathCamera(MechCharacter&)
DeathContext::SetUpDeathDebris(MechCharacter&, eDEADSTATES)
DeathContext::SetUpKillParts(MechCharacter&, eDEADSTATES, GameObject_KillPartsArgs&)
DeathContext::SetUpDeathAnim(MechCharacter&, eDEADSTATES, int)
DeathContext::SetUpDeathSounds(MechCharacter&, eDEADSTATES)
DeathContext::SetUpDeathPadRumble(MechCharacter&, eDEADSTATES)
DeathContext::SetUpDeathVFX(MechCharacter&, eDEADSTATES)
DeathContext::UpdateGlobalCounters(MechCharacter&, eDEADSTATES)
DeathContext::KillMovement(MechCharacter&)
DeathContext::SnakesDeath(MechCharacter&, eDEADSTATES)
DeathContext::InventoryDeath(MechCharacter&, eDEADSTATES, GameObject_KillPartsArgs&, bool)
DeathContext::VehicleDeath(MechCharacter&)
DeathContext::BoltsDeath(MechCharacter&)
DeathContext::MagicDeath(MechCharacter&)
DeathContext::TakeOverObjectDeath(MechCharacter&)
DeathContext::BuilderDeath(MechCharacter&, eDEADSTATES)
DeathContext::InstantKill(MechCharacter&, bool, GameObject_KillPartsArgs&, eDEADSTATES, MechCharacter*, bool, bool, bool, bool)
DeathContext::OnProcess(LevelContainer*, float)
DeathContext::TorpedoeDeath(MechCharacter&, eDEADSTATES)
DeathContext::~DeathContext()
JumpContext::JumpContext(MechCharacter&, bool, bool, bool, float)
JumpContext::AllowEnter(int, MechContext*)
JumpContext::AllowLeave(int, MechContext*)
JumpContext::OnEnter(LevelContainer*)
JumpContext::FrameRateCompensateInitialJumpHeight(MechCharacter&, VuVec&)
JumpContext::MakeJumpReachHeight(MechCharacter&, float, bool, float)
JumpContext::PlayJumpSfx(MechCharacter&, JumpContext::JumpSfxType)
JumpContext::OnProcess(LevelContainer*, float)
JumpContext::UpdateContextState(float)
JumpContext::TestforLanding()
JumpContext::HandleJumpButtonPressedAgain()
JumpContext::AttemptLungeAttack()
JumpContext::OnLeave()
JumpContext::InitFlags()
JumpContext::CheckForJumping(MechCharacter&)
JumpContext::CanJump(MechCharacter&)
JumpContext::StartJump(MechCharacter&, float)
JumpContext::StartLunge(MechCharacter&, float, float)
JumpContext::StartSlam(MechCharacter&, float)
JumpContext::UpdateVelocity(float)
JumpContext::CalculateDirection(MechCharPad const*)
JumpContext::CalculateSpeed(MechCharPad const*)
JumpContext::AttemptGlide()
JumpContext::AttemptDoubleJump()
JumpContext::AttemptCombatRoll()
JumpContext::Land()
JumpContext::StartJump(MechCharacter&)
JumpContext::StartTrampolineJump(MechCharacter&)
JumpContext::OnBouncyTerrain(MechCharacter&)
JumpContext::CreateToggleData() const
JumpContext::PreToggleCollectData(ToggleDataPacket*) const
JumpContext::PostToggleRestoreData(ToggleDataPacket*)
JumpContext::~JumpContext()
JumpInContext::JumpInContext(MechCharacter&)
JumpInContext::~JumpInContext()
JumpInContext::~JumpInContext()
JumpInContext::OnEnter(LevelContainer*)
JumpInContext::OnLeave()
JumpInContext::OnProcess(LevelContainer*, float)
JumpInContext::AllowLeave(int, MechContext*)
JumpInContext::OnHook(unsigned char, HookArgs*)
JumpInContext::Init(MechObjectInterface&, VehicleDefSeat::SEATTYPES)
ContextWrapperTask::ContextWrapperTask(MechContext*)
ContextWrapperTask::~ContextWrapperTask()
ContextWrapperTask::~ContextWrapperTask()
ContextWrapperTask::Activate()
ContextWrapperTask::Terminate(Brain&)
ContextWrapperTask::Process(Brain&, float const&)
JumpInContext::InitFlags()
LandContext::LandContext(MechCharacter&)
LandContext::OnEnter(LevelContainer*)
LandContext::PlayLandSfx(MechCharacter&, LandContext::LandSfxType)
LandContext::OnProcess(LevelContainer*, float)
LandContext::OnLeave()
LandContext::RegisterContexts()
LandContext::PlayerPadBreakingOut()
LandContext::AllowedToBreakOut(int, bool*)
LandContext::PerformPadBasedBreakout()
LandContext::AllowEnter(int, MechContext*)
LandContext::GetLastContextId() const
LandContext::SetCustomLandActionOverride(int)
LandContext::PostToggleRestoreData(ToggleDataPacket*)
LandJumpContext::LandJumpContext(MechCharacter&)
LandJumpContext::EnterLand(LevelContainer*)
LandJumpContext::ProcessLand(LevelContainer*, float)
LandJumpContext::SelectAnimation()
LandJumpContext::AllowEnter(int, MechContext*)
LandJumpContext::AllowLeave(int, MechContext*)
LandJumpContext::SelectLandSFX()
LandCombatRollContext::LandCombatRollContext(MechCharacter&)
LandCombatRollContext::EnterLand(LevelContainer*)
LandCombatRollContext::PlayerPadBreakingOut()
LandCombatRollContext::ProcessLand(LevelContainer*, float)
LandCombatRollContext::SelectAnimation()
LandCombatRollContext::SelectLandSFX()
LandSlamContext::LandSlamContext(MechCharacter&)
LandSlamContext::EnterLand(LevelContainer*)
LandSlamContext::CamAndRumble()
LandSlamContext::SlamFX()
LandSlamContext::ProcessLand(LevelContainer*, float)
LandSlamContext::SelectAnimation()
LandSlamContext::SelectLandSFX()
LandSlamContext::FindSlamOrigin(MechCharacter&, VuVec&, VuVec&)
LandSlamContext::AllowLeave(int, MechContext*)
LandContext::~LandContext()
LandContext::CreateToggleData() const
LandContext::SelectAnimation()
LandContext::SelectLandSFX()
LandContext::LeaveLand()
LandContext::CanJump() const
LandJumpContext::~LandJumpContext()
LandJumpContext::InitFlags()
LandCombatRollContext::~LandCombatRollContext()
LandCombatRollContext::InitFlags()
LandSlamContext::~LandSlamContext()
LandSlamContext::InitFlags()
LandSlamContext::CanJump() const
MechContext* MechContextConstructor<LandJumpContext>(MechCharacter&)
MechContext* MechContextConstructor<LandCombatRollContext>(MechCharacter&)
MechContext* MechContextConstructor<LandSlamContext>(MechCharacter&)
FallContext::FallContext(MechCharacter&)
FallContext::~FallContext()
FallContext::~FallContext()
FallContext::OnEnter(LevelContainer*)
FallContext::OnProcess(LevelContainer*, float)
FallContext::CheckForFalling(MechCharacter&)
FallContext::IsFalling(MechCharacter&)
FallContext::ForceStartFall(MechCharacter&)
FallContext::InitFlags()
SwimmingContext::SwimmingContext(MechCharacter&)
SwimmingContext::OnEnter(LevelContainer*)
SwimmingContext::CalculateSwimState(MechCharacter&)
SwimmingContext::UpdateAction(MechCharacter&)
SwimmingContext::UpdateDeepWaterTimer(MechCharacter&, float)
SwimmingContext::OnProcess(LevelContainer*, float)
SwimmingContext::UpdateSwimState(MechCharacter&, float)
SwimmingContext::HandleContextDropOut(MechCharacter&)
SwimmingContext::CalcWaterHeight(MechCharacter&)
SwimmingContext::SetWaterGravity(MechCharacter&, float)
SwimmingContext::OnLeave()
SwimmingContext::Rumble(MechCharacter&)
SwimmingContext::IsSwimming(MechCharacter&)
SwimmingContext::IsReallySwimming(MechCharacter&)
SwimmingContext::CheckForSwimming(MechCharacter&)
SwimmingContext::AddWaterSplash(MechCharacter&, bool, SwimmingContext::SplashMode, FXTypeID const&)
SwimmingContext::JumpOut(MechCharacter&)
SwimmingContext::CreateToggleData() const
SwimmingContext::PreToggleCollectData(ToggleDataPacket*) const
SwimmingContext::PostToggleRestoreData(ToggleDataPacket*)
SwimmingContext::~SwimmingContext()
SwimmingContext::InitFlags()
DrowningContext::DrowningContext(MechCharacter&)
DrowningContext::OnEnter(LevelContainer*)
DrowningContext::OnProcess(LevelContainer*, float)
DrowningContext::AllowLeave(int, MechContext*)
DrowningContext::OnLeave()
DrowningContext::Rumble(MechCharacter&)
DrowningContext::IsDrowning(MechCharacter&)
DrowningContext::CheckForDrowning(MechCharacter&)
DrowningContext::~DrowningContext()
DrowningContext::InitFlags()
BigJumpContext::BigJumpContext(MechCharacter&)
BigJumpContext::~BigJumpContext()
BigJumpContext::~BigJumpContext()
BigJumpContext::AllowEnter(int, MechContext*)
BigJumpContext::AllowLeave(int, MechContext*)
BigJumpContext::OnEnter(LevelContainer*)
BigJumpContext::SetJumpAction()
BigJumpContext::OnProcess(LevelContainer*, float)
BigJumpContext::OnLeave()
BigJumpContext::CanBigJump(MechCharacter&)
BigJumpContext::StartBigJump(MechCharacter&, VuVec const&, bool, float, float, bool, bool, bool, float, float, bool, unsigned short, MechContext::MechContextPriority)
BigJumpContext::Initialise(VuVec const&, bool, float, float, bool, bool, bool, float, float, bool, unsigned short)
BigJumpContext::IsBigJumping(MechCharacter const&, bool)
BigJumpContext::BlockEdge(ConvexEdge*)
BigJumpContext::InitFlags()
MechWallJumpWaitContext::MechWallJumpWaitContext(MechCharacter&)
MechWallJumpWaitContext::~MechWallJumpWaitContext()
MechWallJumpWaitContext::~MechWallJumpWaitContext()
MechWallJumpWaitContext::AllowEnter(int, MechContext*)
MechWallJumpWaitContext::IsInContactWithAWallJump(MechCharacter const&)
MechWallJumpWaitContext::AllowLeave(int, MechContext*)
MechWallJumpWaitContext::OnEnter(LevelContainer*)
MechWallJumpWaitContext::OnLeave()
MechWallJumpWaitContext::OnProcess(LevelContainer*, float)
MechWallJumpWaitContext::InitFlags()
SlideContext::InitFlags()
SlideContext::SlideContext(MechCharacter&)
SlideContext::OnProcess(LevelContainer*, float)
SlideContext::AllowEnter(int, MechContext*)
SlideContext::~SlideContext()
SlideContext::~SlideContext()
FlattenContext::FlattenContext(MechCharacter&)
FlattenContext::OnEnter(LevelContainer*)
FlattenContext::OnProcess(LevelContainer*, float)
FlattenContext::ExitFlatten()
FlattenContext::CalcFlattenJumpDest()
FlattenContext::CanFlatten(MechObjectInterface*, MechCharacter*)
FlattenContext::StartFlatten(MechObjectInterface*, MechCharacter*, VuVec*)
FlattenContext::~FlattenContext()
FlattenContext::~FlattenContext()
FlattenContext::InitFlags()
LegacyContext::SetLegacyContext(int, bool&)
LegacyContext::GetContextPacket()
LegacyContext::LegacyContext(MechCharacter&)
LegacyContext::~LegacyContext()
LegacyContext::~LegacyContext()
LegacyContext::CreateToggleData() const
LegacyContext::PreToggleCollectData(ToggleDataPacket*) const
LegacyContext::PostToggleRestoreData(ToggleDataPacket*)
LegacyContext::GetFlags() const
LegacyContext::InitFlags()
LegacyContext::OnEnter(LevelContainer*)
LegacyContext::OnProcess(LevelContainer*, float)
LegacyContext::OnLeave(int)
LegacyContext::OnLeave()
LegacyContext::AllowEnter(int, MechContext*)
LegacyContext::AllowLeave(int, MechContext*)
LegacyContext::OnHook(unsigned char, HookArgs*)
LegacyContext::ReleaseLegacyContexts()
LegacyContext::IsLegacyContext() const
GlideContext::GlideContext(MechCharacter&)
GlideContext::OnEnter(LevelContainer*)
GlideContext::OnLeave()
GlideContext::OnProcess(LevelContainer*, float)
GlideContext::ProcessStartGlideAnimation()
GlideContext::AttemptingSlamAttack()
GlideContext::ProcessGlide(float)
GlideContext::ProcessMovement()
GlideContext::ProcessGravity()
GlideContext::CanGlide(MechCharacter&)
GlideContext::StartGlide(MechCharacter&)
GlideContext::HandleLand()
GlideContext::HandleTiredGlide()
GlideContext::Powerup(float, float, float)
GlideContext::~GlideContext()
GlideContext::CreateToggleData() const
GlideContext::InitFlags()
ClimbContext::ClimbContext(MechCharacter&)
ClimbContext::AllowEnter(int, MechContext*)
ClimbContext::AllowLeave(int, MechContext*)
ClimbContext::OnEnter(LevelContainer*)
ClimbContext::GetClimbingContactPoint(MechCharacter const&)
ClimbContext::IsMagnetTerrain(signed char)
ClimbContext::OnProcess(LevelContainer*, float)
ClimbContext::HasClimbingContactPoint(MechCharacter const&)
ClimbContext::CanClimbTerrain(MechCharacter const&, int)
ClimbContext::IsClimbTerrain(signed char)
ClimbContext::Climb_RayCast(MechCharacter const&, int, VuVec*)
ClimbContext::OnLeave()
ClimbContext::InitFlags()
ClimbContext::CanClimb(MechCharacter const&)
ClimbContext::ShouldEnterClimb(MechCharacter const&)
ClimbContext::IsInContactWithRoof(MechCharacter*)
ClimbContext::~ClimbContext()
BlockContextTimerAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to BlockContextTimerAddOn::OnHook(unsigned char, HookArgs*)
PoleClimbContext::PoleClimbContext(MechCharacter&)
PoleClimbContext::AllowEnter(int, MechContext*)
PoleClimbContext::AllowLeave(int, MechContext*)
PoleClimbContext::OnEnter(LevelContainer*)
PoleClimbContext::GetPlayerPositionRelativeToPoleInfo(VuVec const&, VuVec&, VuVec&, float&, VuVec&, float*) const
PoleClimbContext::OnLeave()
PoleClimbContext::OnProcess(LevelContainer*, float)
PoleClimbContext::CalcCircumferencePositionAndRotation(VuVec const&, VuVec&, VuVec&, float&, VuVec&, float*) const
PoleClimbContext::SetTargetMom(float)
PoleClimbContext::IsOnPole(MechCharacter const&, GizmoPole const&)
PoleClimbContext::SetRemappedAnim(eLEGOPOLEANIM)
PoleClimbContext::RotatePlayer(MechCharacter*, int)
PoleClimbContext::StartPoleClimb(MechCharacter&, GizmoPole*)
PoleClimbContext::CanClimbPoles(MechCharacter const&)
PoleClimbContext::InitFlags()
BlockContextTimerAddOn::~BlockContextTimerAddOn()
BlockContextTimerAddOn::Singleton()
BlockContextTimerAddOn::GetLevelContainer() const
non-virtual thunk to BlockContextTimerAddOn::~BlockContextTimerAddOn()
non-virtual thunk to BlockContextTimerAddOn::~BlockContextTimerAddOn()
non-virtual thunk to BlockContextTimerAddOn::GetLevelContainer() const
PoleClimbContext::~PoleClimbContext()
AnimBlendContext::GetContextId()
AnimBlendContext::RegisterContexts()
AnimBlendContext::GetName()
MechContext* MechContextConstructor<AnimBlendContext>(MechCharacter&)
AnimBlendContext::GetFlagsStatic()
AnimBlendContext::StartAnimBlendContext(MechCharacter&, int, AnimBlendData&, bool, int*)
AnimBlendContext::SetAnimActionId(int)
AnimBlendContext::SetAnimBlendData(AnimBlendData&)
AnimBlendContext::SetCurrentState(AnimBlendContext::eAnimBlendState)
AnimBlendContext::SetStartAnimActionId(int)
AnimBlendContext::SetWaitIdleAnimActionId(int)
AnimBlendContext::AnimBlendContext(MechCharacter&)
AnimBlendContext::~AnimBlendContext()
AnimBlendContext::~AnimBlendContext()
AnimBlendContext::AllowEnter(int, MechContext*)
AnimBlendContext::AllowLeave(int, MechContext*)
AnimBlendContext::IsComplete()
AnimBlendContext::OnEnter(LevelContainer*)
AnimBlendContext::GetCurrentState() const
AnimBlendContext::GetStartAnimActionId() const
AnimBlendContext::GetAnimActionId() const
AnimBlendContext::SetStartBlendMtx(VuMtx const&)
AnimBlendContext::OnLeave()
AnimBlendContext::InitFlags()
AnimBlendContext::GetForceNoGravity() const
AnimBlendContext::GetPreviousState() const
AnimBlendContext::SetPreviousState(AnimBlendContext::eAnimBlendState)
AnimBlendContext::GetWaitIdleAnimActionId() const
AnimBlendContext::GetAnimBlendData()
AnimBlendContext::GetStartBlendMtx() const
AnimBlendContext::GetDoNotSetMtxForTrackRoot() const
AnimBlendContext::SetDoNotSetMtxForTrackRoot(bool)
AnimBlendContext::SetForceNoGravity(bool)
AnimBlendContext::OnProcess(LevelContainer*, float)
AnimBlendContext::ProcessStateMachine(float)
AnimBlendContext::ProcessStateBlendStartAnimBeforeWait(bool, float)
AnimBlendContext::ProcessStateBlendIdleWait(bool, float)
AnimBlendContext::ProcessStateBlending(bool, float)
AnimBlendContext::ProcessStateLockedToDestination(bool, float)
AnimBlendContext::ProcessStateComplete(bool, float)
LegoContextHandlerBase<AnimBlendContext>::GetInstanceId() const
LegoContextHandlerBase<AnimBlendContext>::~LegoContextHandlerBase()
AnimBlendData::AnimBlendData()
AnimBlendData::Reset()
AnimBlendData::AnimBlendData(MechObjectData const&, int, float, float, bool, VuMtx*, bool, bool, float)
AnimBlendData::SetData(MechObjectData const&)
AnimBlendData::SetLocatorId(int)
AnimBlendData::SetStartBlendFrame(float)
AnimBlendData::SetEndBlendFrame(float)
AnimBlendData::SetForceMtxUpright(bool)
AnimBlendData::SetLocalOffsetMtx(VuMtx const&)
AnimBlendData::SetForceSnapToEndFrameMtx(bool)
AnimBlendData::AnimBlendData(AnimBlendData const&)
AnimBlendData::GetData() const
AnimBlendData::GetLocatorId() const
AnimBlendData::GetStartBlendFrame() const
AnimBlendData::GetEndBlendFrame() const
AnimBlendData::GetForceMtxUpright() const
AnimBlendData::GetLocalOffsetMtx() const
AnimBlendData::~AnimBlendData()
AnimBlendData::GetForceSnapToEndFrameMtx() const
AnimBlendData::IsValid() const
AnimBlendData::GetDestinationWorldTransform(VuMtx&) const
AIScriptAnimationContext::AIScriptAnimationContext(MechCharacter&)
AIScriptAnimationContext::OnEnter(LevelContainer*)
AIScriptAnimationContext::OnProcess(LevelContainer*, float)
AIScriptAnimationContext::Enter(MechCharacter&, int)
AIScriptAnimationContext::OverrideTime(MechCharacter&, float)
AIScriptAnimationContext::GetTime(MechCharacter&)
AIScriptAnimationContext::ApplyGravity(MechCharacter&, bool)
AIScriptAnimationContext::GetApplyGravity(MechCharacter&)
AIScriptAnimationContext::AllowTag(MechCharacter&, bool)
AIScriptAnimationContext::~AIScriptAnimationContext()
AIScriptAnimationContext::InitFlags()
RunBackwardsContext::InitFlags()
RunBackwardsContext::RunBackwardsContext(MechCharacter&)
RunBackwardsContext::OnProcess(LevelContainer*, float)
RunBackwardsContext::OnHook(unsigned char, HookArgs*)
RunBackwardsContext::AllowEnter(int, MechContext*)
RunBackwardsContext::~RunBackwardsContext()
GrindRailContext::InitFlags()
GrindRailContext::GrindRailContext(MechCharacter&)
GrindRailContext::SetGrindSpline(SplineObject*, float)
GrindRailContext::SetConfig(float, float, float, float)
GrindRailContext::CheckForAttach(MechCharacter&)
GrindRailContext::CheckForAttachWithinLevel(MechCharacter&, LevelContainer&)
GrindRailContext::OnProcess(LevelContainer*, float)
GrindRailContext::ProcessAttach(LevelContainer*, float)
GrindRailContext::ProcessSlide(LevelContainer*, float)
GrindRailContext::OnEnter(LevelContainer*)
GrindRailContext::OnLeave(int)
GrindRailContext::OnHook(unsigned char, HookArgs*)
GrindRailContext::AllowEnter(int, MechContext*)
GrindRailContext::AllowLeave(int, MechContext*)
GrindRailContext::UpdatePositionOnSpline(float)
GrindRailDismountAddOn::GrindRailDismountAddOn(float, float)
GrindRailDismountAddOn::~GrindRailDismountAddOn()
non-virtual thunk to GrindRailDismountAddOn::~GrindRailDismountAddOn()
GrindRailDismountAddOn::~GrindRailDismountAddOn()
non-virtual thunk to GrindRailDismountAddOn::~GrindRailDismountAddOn()
GrindRailDismountAddOn::OnAdded()
GrindRailDismountAddOn::OnHook(unsigned char, HookArgs*)
GrindRailDismountAddOn::Process(float)
GrindRailDismountAddOn::UpdateMomentum()
non-virtual thunk to GrindRailDismountAddOn::OnHook(unsigned char, HookArgs*)
GrindRailDismountAddOn::GetLevelContainer() const
non-virtual thunk to GrindRailDismountAddOn::GetLevelContainer() const
GrindRailContext::~GrindRailContext()
GrindRailEventData::~GrindRailEventData()
ActionOverrides::InitDefaultOverrides()
ActionOverrideEventArgs::ActionOverrideEventArgs(ActionOverrides::ACTION_OVERRIDES, short)
ActionOverrideEventArgs::~ActionOverrideEventArgs()
MechAnimOverride::MechAnimOverride(int, int)
MechAnimOverride::~MechAnimOverride()
MechAnimOverride::SetAction(int)
MechAnimOverride::GetFromAction()
MechAnimOverride::SetToAction(int)
MechAnimOverride::GetToAction()
MechAnimOverride::AddAnimOverride(CSListHeader<MechAnimOverride>&, int, int)
MechAnimOverride::DoesAnimOverrideExist(CSListHeader<MechAnimOverride>&, int, int)
MechAnimOverride::RemoveAnimOverride(CSListHeader<MechAnimOverride>&, int, int)
MechAnimOverride::GetAnimOverride(CSListHeader<MechAnimOverride>&, int)
MechKrawlies::MechKrawlies()
MechKrawlies::~MechKrawlies()
MechKrawlies::~MechKrawlies()
MechKrawlies::ParseCommandLine(int, char**)
MechKrawlies::ParseLevelConfigEntry(nufpar_s*)
MechKrawlies::Init()
MechKrawlies::SetupSfx()
MechKrawlies::OnInitPostConfig()
MechKrawlies::LoadSfx()
MechKrawlies::ShutDown()
MechKrawlies::UnloadSfx()
MechKrawlies::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechKrawlies::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MechKrawlies::RegisterControllers()
void* Constructor<MechKrawlieGangerController>()
void* Constructor<MechKrawlieControllerAnimals>()
void* Constructor<MechKrawlieControllerBirds>()
void* Constructor<MechKrawlieControllerFish>()
void* Constructor<MechKrawlieRidingController>()
void* Constructor<MechKrawlieStationaryController>()
void* Constructor<MechKrawlieWanderController>()
MechKrawlies::RegisterManagerProcessing(MechLevelContainer&)
MechKrawlies::CreateManager(MechLevelContainer&)
MechKrawlies::AddManagersForLevel(MechLevelContainer&)
MechKrawlies::RemoveManagersForLevel(MechLevelContainer&)
MechKrawlies::OnEnterLevel(MechLevelContainer&)
MechKrawlies::OnResetLevel(MechLevelContainer&)
MechKrawlies::OnExitLevel(MechLevelContainer&)
MechKrawlies::ControllerSimpleHookMiniFig(MechKrawlieSimpleHook&, MechKrawlie*)
MechKrawlies::ProcessBaseSimpleHooks(MechKrawlieManager&)
MechKrawlies::FindShootTarget(WORLDINFO*, MechCharacter const&, float&, TARGET_INFO*, int, unsigned int, float, NUVEC const*, NUVEC const*)
MechKrawlies::CalculateInFrontDist(NUVEC const&, NUVEC const&, NUVEC const&, float, unsigned int)
MechKrawlies::CalculateNormalModeConeDist(VuVec const&, VuVec const&, VuVec const&, float, float, unsigned int, bool)
MechKrawlies::FindMeleeOpponent(MechCharacter*, float)
MechKrawlies::FindBoltTarget(MechCharacter*, VuVec const&, VuVec const&, float, float, int, int, BoltTypeID const&, float&)
MechKrawlies::PlaySfx(LevelContainer const&, int, VuVec const&)
MechKrawlies::PlaySfx(LevelContainer const&, SFXTypeID&, VuVec const&)
MechKrawlies::NotifyThatManagerCanBeUsedForRaycasts()
MechKrawlies::LegIKRaycastWrapper(DynoScene*, DynoRay&, FirstPointCollector&)
MechKrawlies::NotifyThatManagerCanNolongerBeUsedForRaycasts()
MechKrawlies::AddCylinderCollision(LevelContainer&, unsigned long, VuVec const&, float, float, MechKrawlieDefines::CollisionObjType, char*)
MechKrawlies::RemoveCylinderCollision(LevelContainer&, unsigned long, VuVec const&)
MechKrawlies::CreateKrawliePedestrian(MechCharacter&, bool)
MechKrawlies::CreateKrawlieRider(MechVehicle&, int, unsigned int const*)
MechKrawlies::CreateKrawliePassenger(MechVehicle&, VehicleDefSeat::SEATTYPES)
MechKrawlies::RaycastHelper(DynoScene&, DynoRay&, FirstPointCollector&, int)
MechKrawlies::RaycastHelper(MechKrawlieManager&, DynoRay&, FirstPointCollector&, int)
MechKrawlies::CreateKrawlieGameData(MechKrawlie&)
MechKrawlies::DestroyKrawlieGameData(MechKrawlie&)
MechKrawlies::GetSectorWanderController()
MechKrawlies::OverrideSectorWanderAvoidance(bool)
MechKrawlies::GetObjDescAttachmentLayerIgnoreMask() const
MechKrawliesHelper::~MechKrawliesHelper()
MechKrawlieSimpleHookPlayerClose::GetHashedKey()
MechKrawlie::MechKrawlie(MechKrawliePack&, MechKrawlieObjDesc&, VuVec const&, short)
MechKrawlie::Construction()
MechKrawlie::MechKrawlie(MechKrawlieManager&, MechKrawlieObjDesc&, VuVec const&, short)
MechKrawlie::MechKrawlie(MechKrawliePack&, MechCharacter&)
MechKrawlie::~MechKrawlie()
MechKrawlie::SimpleHook(MechKrawlieSimpleHook&)
MechKrawlie::GetController() const
MechKrawlie::EmptyNeighborsList()
MechKrawlie::RemoveSelfFromSplatterZone()
MechKrawlie::RemoveFromPack()
MechKrawlie::AddSelfToSplatterZone(MechKrawlieSplatterGridCell&, MechKrawliePlayArea&)
MechKrawlie::InitialiseNeighboursList()
MechKrawlie::ChangeKrawlieContext(void (*)(MechKrawlie&))
MechKrawlie::UpdateSplatterStuff(MechKrawlieSplatterGridCell&, bool)
MechKrawlie::UpdateNeighborsList(MechKrawliePlayArea&, int&, int&, int&, int&)
MechKrawlie::ConvertToCharacter()
MechKrawlie::ConvertToCharacter(LevelContainer&)
MechKrawlie::ModifyCharInstToMatchKrawlie(CharInst&, long*)
MechKrawlie::CreateMatchingCharInst()
MechKrawlie::CalculateRenderMatrix(VuMtx&)
MechKrawlie::FacePosition(VuVec const&)
MechKrawlie::Kill(bool, bool, bool)
MechKrawlie::CalculateFloorHeight()
MechKrawlie::PlaySfx(int)
MechKrawlie::PlaySfx(SFXTypeID&)
MechKrawlie::SpawnDeathParts(bool)
MechKrawlie::CalcShouldProcessThisFrame(int)
MechKrawlie::SectorRemoved(unsigned short)
MechKrawlie::SetAnim(int, bool, bool)
MechKrawlieAnimTriggerCollection::OnAnimEnd(MechKrawlie&, float)
MechKrawlieAnimTriggerCollection::OnAnimBegin(MechKrawlie&, float)
MechKrawlie::ProcessAnimation(float)
MechKrawlie::PlayAnim(MechKrawlieObjAnim&, float&, float)
MechKrawlieAnimTriggerCollection::Process(MechKrawlie&, float)
MechKrawlie::ScaleUpHeldItem(float)
MechKrawlie::GenAttachmentMtx(VuMtx&, int)
MechKrawlie::GenAttachmentMtx(VuMtx&, MechKrawlieAttachmentInfo const&)
MechKrawlie::DropHeldItem()
MechKrawlie::ThrowHeldItem(VuVec const&, VuVec*)
MechKrawlie::UnembedFromSpline(MechKrawlieSplatterGrid&, MechKrawlieSplatterGridCell&, float, float)
MechKrawlie::GetMechObjectInterface()
MechKrawlie::GetRidingData() const
MechKrawlie::AddKrawlieAsNeighbour(MechKrawliePlayArea&, MechKrawlie&)
MechKrawlie::AddCollisionObjAsNeighbour(MechKrawliePlayArea&, int)
MechKrawlie::RemoveKrawlieAsNeighbour(MechKrawliePlayArea&, MechKrawlie&)
MechKrawlie::RemoveCollisionObjAsNeighbour(MechKrawliePlayArea&, int)
MechKrawlie::AddKrawliesToNeighbourArrays(MechKrawliePlayArea&, MechKrawlie&, MechKrawlie&)
MechKrawlie::RemoveKrawliesFromNeighbourArrays(MechKrawliePlayArea&, MechKrawlie&, MechKrawlie&)
KrawliePlayAreaInsideSpline(MechKrawliePlayArea&, VuVec const&)
MechKrawlie::KrawlieToKrawlieCollision(MechKrawliePlayArea&, float)
MechKrawlie::KrawlieToKrawlieCollisionReaction(MechKrawlie&, float)
MechKrawlie::KrawlieToCollisionObjReaction(MechKrawlieCollisionObj&, float)
MechKrawlie::ProcessContext(float)
MechKrawlie::Render(int, MechKrawlieLightingGrid*, unsigned char)
MechKrawlie::RenderAsCharacter(VuMtx const&, MechKrawlieObjDesc::KrawlieLODModel const&, MechKrawlieLightingGrid*, unsigned char)
MechKrawlie::RenderAsSpecial(VuMtx&, MechKrawlieObjDesc::KrawlieLODModel&)
MechKrawlie::OverrideRenderMtx(VuMtx&)
MechKrawlie::OverrideRender(MechKrawlieRenderInfo const&, bool&)
MechKrawlie::GetNewNeighbours(short*, int&, int&, int&, int&, MechKrawliePlayArea&)
MechKrawlie::RemoveSelfFromNeighbours()
MechKrawlie::RelocateTo(int, MechKrawliePlayArea&, MechKrawlieSplatterGridCell&)
MechKrawlie::RelocatedFixUp(MechKrawlie*, MechKrawliePlayArea*)
MechKrawlie::AddSelfToNeighbours()
MechKrawlie::GenLocatorMtx(VuMtx&, unsigned char)
MechKrawlieSimpleHookOnDestroy::GetHashedKey()
MechKrawlieSimpleHookSectorNodeRemoved::GetHashedKey()
MechKrawlieSimpleHookCollidedWithEdge::GetHashedKey()
MechKrawlieBigGridCell::MechKrawlieBigGridCell()
MechKrawlieBigGridCell::Reset()
MechKrawlieBigGridCell::~MechKrawlieBigGridCell()
MechKrawlieBigGrid::MechKrawlieBigGrid(cAIWorldNode const&)
MechKrawlieBigGrid::GetIndex(VuVec const&) const
MechKrawlieBigGrid::~MechKrawlieBigGrid()
MechKrawlieBigGrid::Create(cAIWorldNode const*)
MechKrawlieBigGrid::GetIndexXY(VuVec const&, int&, int&) const
MechKrawlieBigGrid::GetIndex(int, int) const
MechKrawlieBigGrid::GetCell(VuVec const&) const
MechKrawlieBigGrid::GetCellMinMax(VuVec const&, VuVec&, VuVec&) const
MechKrawlieBigGrid::GetGridHeight(VuVec const&, float&) const
MechKrawlieBigGrid::GetGridHeight(VuVec const&) const
MechKrawlieObjectInterface::GetInterfaceType() const
MechKrawlieObjectInterface::GetPos(VuVec&, int) const
MechKrawlieObjectInterface::GetTargetPos(VuVec&, TARGETING_TYPE, int)
MechKrawlieObjectInterface::GetDirection(VuVec&) const
MechKrawlieObjectInterface::GetLevelContainer() const
MechKrawlieObjectInterface::GetRidingData() const
MechKrawlieObjectInterface::DestroyRidingData()
MechKrawlieObjectInterface::AddRidingData(MechRidingData&)
MechKrawlieObjectInterface::RemoveRidingData(MechRidingData&)
MechKrawlieObjectInterface::~MechKrawlieObjectInterface()
MechObjectInterface::GetObjectEdClass() const
MechObjectInterface::IsOnScreen()
MechObjectInterface::GetRotY()
MechObjectInterface::GetMtx(VuMtx&, int)
MechObjectInterface::SetMtx(VuMtx&, int)
MechObjectInterface::GetVelocity(VuVec&) const
MechObjectInterface::SetTransformExceptPhysics(VuMtx&, int)
MechObjectInterface::GetEntity() const
MechObjectInterface::DrivePhysicsToTransform(VuMtx const&, bool, bool)
MechObjectInterface::Teleport(VuMtx const&, unsigned char)
MechObjectInterface::GetCollisionRadius()
MechObjectInterface::GetCollisionRadiusY()
MechObjectInterface::GetDimensions(VuVec&) const
MechObjectInterface::GetCharInst() const
MechObjectInterface::GetOpponent() const
MechObjectInterface::GetRiddenObj() const
MechObjectInterface::GetRiderObj(VehicleDefSeat::SEATTYPES) const
MechObjectInterface::GetPhysicsChar()
MechObjectInterface::GetPhysicsChar() const
MechObjectInterface::SetAlpha(float)
MechObjectInterface::GetAlpha() const
MechObjectInterface::GetAddOns() const
MechKrawlieObjectInterface::GetTargetRandomPos(VuVec&, TARGETING_TYPE, int)
MechObjectInterface::GetIconPos(VuVec&, int)
MechObjectInterface::GetLocatorMtxWorld(int, VuMtx&) const
MechObjectInterface::IsRideable() const
MechObjectInterface::GetTagToData() const
MechObjectInterface::GetTargetHealthBarPos(VuVec&, TARGETING_TYPE, int)
MechObjectInterface::GetTargetFloorPos(VuVec&, TARGETING_TYPE, int)
MechKrawlieObjectInterface::GetTargetMom(VuVec&, TARGETING_TYPE)
MechObjectInterface::GetRadius() const
MechObjectInterface::GetTargetYRot()
MechObjectInterface::GetHealthInfo()
MechObjectInterface::CanBeHit(BeenHit const&) const
MechObjectInterface::SetShootAccuracy(unsigned char) const
MechObjectInterface::GetShootAccuracy() const
MechObjectInterface::GetAllegiance() const
MechObjectInterface::IsSafe() const
MechObjectInterface::RequestKill(MechRequestKillInfo const&)
MechObjectInterface::HasTerrain()
MechObjectInterface::DoesEntityMatchTarget(Entity*)
MechObjectInterface::HandleBoltHit(Bolt*)
MechObjectInterface::TargetPosDoLOSCheck(NUVEC&, int&)
MechObjectInterface::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*)
MechObjectInterface::LOS_GetPoint(NUVEC&, WORLDINFO*&, TARGETING_TYPE, int) const
MechObjectInterface::IsTargetStillValid()
MechObjectInterface::GetActive()
MechObjectInterface::IgnoreTerrainWhenThrowTarget() const
MechObjectInterface::GetTargetName() const
MechKrawlieObjectInterface::GetGameType()
MechObjectInterface::SetupLegoItemAddPart(ADDPART&, GizItem&, int)
MechObjectInterface::GetMechCharacterBase()
MechObjectInterface::GetMechCharacter() const
MechKrawlieObjectInterface::GetMechKrawlie() const
MechObjectInterface::GetApiActor()
MechObjectInterface::GetMechOpponentInfo() const
MechObjectInterface::SetMechOpponentInfo(MechOpponentInfo*)
MechKrawlieObjectInterface::BestToPunchIfPossible() const
MechObjectInterface::SetCurrentPosition(VuVec&) const
MechObjectInterface::GetCurrentPosition(VuVec&)
MechObjectInterface::SetAttached(bool)
MechObjectInterface::IsAttached() const
MechObjectInterface::IsAttachBlockingTag() const
MechObjectInterface::GetAIData() const
MechObjectInterface::GetBrain() const
MechObjectInterface::PlayScriptAnimation(int, MechScriptAnimationData*)
MechObjectInterface::StopScriptAnimation()
MechObjectInterface::IsScriptAnimationPlaying(int)
MechObjectInterface::GetScriptAnimationTimeRemaining()
MechObjectInterface::GetScriptAnimationDuration(bool)
MechObjectInterface::GetGamePad()
MechObjectInterface::GetMechInput()
MechObjectInterface::GetTargetCamera()
MechObjectInterface::IsPlayerControlled()
MechObjectInterface::GetPartyIndex()
MechObjectInterface::GetAbilityInstances(bool) const
MechObjectInterface::GetEventList(bool) const
MechKrawlieObjectInterface::GetKrawly()
MechKrawlieSimpleHookCollision::MechKrawlieSimpleHookCollision(MechKrawlieCollisionObj&)
MechKrawlieSimpleHookCollision::MechKrawlieSimpleHookCollision(MechKrawlie&)
MechKrawlieSimpleHook::GetFilteredKrawlies(MechKrawliePlayArea&, MechKrawlieSearchFilter&, MechKrawlie**, int)
MechKrawlieSimpleHook::SimpleHook(MechKrawliePlayArea&, MechKrawlieSearchFilter&, MechKrawlieSimpleHook&)
MechKrawlieSimpleHook::SimpleHook(MechKrawlieManager&, MechKrawlieSearchFilter&, MechKrawlieSimpleHook&)
MechKrawlieSimpleHook::GetFilteredKrawlies(MechKrawlieManager&, MechKrawlieSearchFilter&, MechKrawlie**, int)
MechKrawlieSimpleHook::RemoveFromFilteredKrawlies(MechKrawlie&, MechKrawlie**, int&)
MechKrawlieSearchFilter::SetupSpherical(VuVec const&, float)
MechKrawlieSearchFilter::SetupRadial(VuVec const&, float, float)
MechKrawlieSearchFilter::SetupCircularCircumference(VuVec const&, float, float)
MechKrawlieSearchFilter::SetupLinearCapsule(VuVec const&, VuVec const&, float, float)
MechKrawlieSearchFilter::SetupLinearRect(VuVec const&, VuVec const&, float, float)
MechKrawlieSearchFilter::SetupGridMinMax(unsigned int, unsigned int, unsigned int, unsigned int)
MechKrawlieSearchFilter::MechKrawlieSearchFilter(unsigned int, MechKrawlieSearchFilter::FilterType, bool, VuVec const&, float, float)
MechKrawlieSearchFilter::MechKrawlieSearchFilter(unsigned int, MechKrawlieSearchFilter::FilterType, bool, VuVec const&, VuVec const&, float, float)
MechKrawlieSearchFilter::MechKrawlieSearchFilter(unsigned int, MechKrawlieSearchFilter::FilterType, bool, unsigned int, unsigned int, unsigned int, unsigned int)
MechKrawlieSimpleHookHitBy::GetHitOrigin()
MechKrawlieSimpleHookTransformIntoCharacter::GetHashId()
MechKrawlieSimpleHookTransformIntoCharacter::GetHashedKey()
MechKrawlieSimpleHookTransformIntoCharacter::MechKrawlieSimpleHookTransformIntoCharacter()
MechKrawlieSimpleHookTransformIntoCharacter::SetContextToEnter(int)
MechKrawlieSimpleHookTransformIntoCharacter::GetContextToEnter() const
MechKrawlieSimpleHookTransformIntoCharacter::GetTask()
MechKrawlieSimpleHookTransformIntoCharacter::GetTaskPriority() const
MechKrawlieSimpleHookTransformIntoCharacter::GetTaskAtStart() const
MechKrawlieSimpleHookTransformIntoCharacter::ClearExistingTasks() const
MechKrawlieSimpleHookTransformIntoCharacter::SetTask(AITask*)
MechKrawlieSimpleHookTransformIntoCharacter::SetTaskPriority(Brain::TaskPriority)
MechKrawlieSimpleHookTransformIntoCharacter::SetTaskAtStart(bool)
MechKrawlieSimpleHookTransformIntoCharacter::SetClearExistingTasks(bool)
MechKrawlieSimpleHookBigScaryObjectClose::MechKrawlieSimpleHookBigScaryObjectClose(MechObjectInterface&, float, bool)
MechKrawlieSimpleHookCollision::GetHashedKey()
MechKrawlieGroup::MechKrawlieGroup(MechKrawlieManager&)
MechKrawlieGroup::MechKrawlieGroup(MechKrawlieZone&, HashedKey const&, char const*)
MechKrawlieGroup::CreatePack()
MechKrawlieGroup::~MechKrawlieGroup()
MechKrawlieGroup::Cleanup()
non-virtual thunk to MechKrawlieGroup::~MechKrawlieGroup()
MechKrawlieGroup::~MechKrawlieGroup()
non-virtual thunk to MechKrawlieGroup::~MechKrawlieGroup()
MechKrawlieGroup::GetClass() const
MechKrawlieGroupHelper::Get()
MechKrawlieGroup::Initialise()
MechKrawlieGroup::FindKrawlieZone(bool)
MechKrawlieGroup::EnterLevel()
MechKrawlieGroup::DestroyPack()
MechKrawlieGroup::DestroyController()
MechKrawlieGroup::Process(float)
MechKrawlieGroup::FloodFillPlayArea()
MechKrawlieGroup::GetCurrentKrawlies() const
MechKrawlieGroup::GetMaxKrawlies() const
MechKrawlieGroup::ActivateAllSpawners()
MechKrawlieGroup::DeactivateAllSpawners()
MechKrawlieGroup::RemoveSpawner(MechKrawlieSpawnerBase*)
MechKrawlieGroup::SetTransform(VuMtx const&)
MechKrawlieGroup::GetNextSpawner(MechKrawlieSpawnerBase*)
MechKrawlieGroup::GetNextSpawner(MechKrawlieSpawnerBase*, int)
MechKrawlieGroup::RemoveAllKrawlies()
MechKrawlieGroup::SpawnKrawlie(MechKrawlieTypeDefinitions::KrawlieType*, VuVec const&, short)
MechKrawlieGroup::GetLevelContainer() const
MechKrawlieGroup::CreateController()
MechKrawlieGroup::DestroyAllKrawlies()
MechKrawlieGroup::FloodFillRect(VuVec const&, VuVec const&, float, float, float, float, float, MechKrawlieTypeDefinitions::KrawlieGroup*)
MechKrawlieGroupHelper::MechKrawlieGroupHelper()
MechKrawlieGroupHelper::Initialise()
MechKrawlieGroupHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieGroupHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieGroupHelper::GetManNextObject(ClassManager*, void*, void*)
MechKrawlieGroupHelper::GetNextObject(void*, void*)
MechKrawlieGroupHelper::SerialiseObject(void*, EdSerialiseParams&)
MechKrawlieGroup::GetTransform(VuMtx&) const
MechKrawlieGroupHelper::~MechKrawlieGroupHelper()
MechKrawlieTypeDefinitions::KrawlieType::KrawlieType(char const*)
MechKrawlieTypeDefinitions::KrawlieType::~KrawlieType()
MechKrawlieTypeDefinitions::KrawlieType::~KrawlieType()
MechKrawlieTypeDefinitions::KrawlieType::GetAllTypes_NotExactlyQuick(NuVector<MechKrawlieTypeDefinitions::KrawlieTypeGroupBase*>&)
MechKrawlieTypeDefinitions::KrawlieGroup::KrawlieGroup()
MechKrawlieTypeDefinitions::KrawlieGroup::~KrawlieGroup()
MechKrawlieTypeDefinitions::KrawlieGroup::~KrawlieGroup()
MechKrawlieTypeDefinitions::KrawlieGroup::AddGroupEntry(MechKrawlieTypeDefinitions::KrawlieTypeGroupBase*, float)
MechKrawlieTypeDefinitions::KrawlieGroup::ChooseKrawlieType()
MechKrawlieTypeDefinitions::KrawlieGroup::NormaliseGroups()
MechKrawlieTypeDefinitions::KrawlieGroup::Contains(MechKrawlieTypeDefinitions::KrawlieType const*)
MechKrawlieTypeDefinitions::KrawlieGroup::GetAllTypes_NotExactlyQuick(NuVector<MechKrawlieTypeDefinitions::KrawlieTypeGroupBase*>&)
MechKrawlieTypeDefinitions::MechKrawlieTypeDefinitions()
MechKrawlieTypeDefinitions::~MechKrawlieTypeDefinitions()
NuHashMap<unsigned int, MechKrawlieTypeDefinitions::KrawlieGroup*>::~NuHashMap()
NuHashMap<unsigned int, MechKrawlieTypeDefinitions::KrawlieType*>::~NuHashMap()
MechKrawlieTypeDefinitions::~MechKrawlieTypeDefinitions()
MechKrawlieTypeDefinitions::Init()
MechKrawlieTypeDefinitions::OnInitPostConfig()
MechKrawlieTypeDefinitions::LoadDefinitionFile(char const*)
MechKrawlieTypeDefinitions::CreateGangerTypeDef()
MechKrawlieTypeDefinitions::ShutDown()
MechKrawlieTypeDefinitions::CheckKrawlieTypeExits(CharDef const&) const
MechKrawlieTypeDefinitions::FindKrawlieType(char const*) const
MechKrawlieTypeDefinitions::FindKrawlieGroup(char const*) const
MechKrawlieTypeDefinitions::FindKrawlieType(CharDef const&) const
MechKrawlieTypeDefinitions::FindKrawlieType(unsigned int) const
MechKrawlieTypeDefinitions::DefinitionFileFirstPass(char const*)
MechKrawlieTypeDefinitions::DefinitionFileSecondPass(char const*)
MechKrawlieTypeDefinitions::KTD_Type_CharDef(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_MechCharDef(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_YPosOffset(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_Radius(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_Height(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_AddAddon(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_DrawLodWithSpecial(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_OverrideLodDistances(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_AddAttachmentOverrideCharDef(nufpar_s*)
NuList<EdString>::PushBack(EdString const&)
MechKrawlieTypeDefinitions::KTD_Type_AddAttachmentTintOverride(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_OverrideSfx(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_SetFlag(MechKrawlieTypeDefinitions::KrawlieType::KrawlieTypeFlags)
MechKrawlieTypeDefinitions::KTD_Type_SetFlag_Ranged(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_SetFlag_Male(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_SetFlag_Female(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_SetFlag_Goodie(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_SetFlag_Baddie(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Type_SetFlag_Creature(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Group_AddType(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Group_AddGroup(nufpar_s*)
MechKrawlieTypeDefinitions::KTD_Group_SetFlag(MechKrawlieTypeDefinitions::KrawlieGroup::KrawlieGroupFlags)
MechKrawlieTypeDefinitions::KTD_Group_SetFlag_EditorAvailable(nufpar_s*)
MechKrawlieTypeDefinitions::KrawlieType::IsGroup() const
MechKrawlieTypeDefinitions::KrawlieGroup::IsGroup() const
MechKrawlieTypeDefinitions::GetGameParserKeywords()
NuVector<MechKrawlieWeightedContainerEntry<NUCOLOUR3> >::Reserve(unsigned int, bool)
NuVector<MechKrawlieTypeDefinitions::KrawlieTypeGroupBase*>::Reserve(unsigned int, bool)
NuVector<MechKrawlieTypeDefinitions::KrawlieGroup::WeightedGroupEntry>::Reserve(unsigned int, bool)
MechKrawliePackInterface::GetIconPos(VuVec&, int)
MechKrawliePackInterface::GetTargetPos(VuVec&, TARGETING_TYPE, int)
MechKrawliePackInterface::GetPos(VuVec&, int) const
MechKrawliePackInterface::GetTargetName() const
MechKrawliePackInterface::GetTargetRandomPos(VuVec&, TARGETING_TYPE, int)
MechKrawliePack::MechKrawliePack(char const*, MechKrawlieGroup&)
MechKrawliePack::~MechKrawliePack()
MechKrawliePack::AddToPack(MechKrawlie*)
MechKrawliePack::GetRandomKrawly()
MechKrawliePack::RemoveFromList(MechKrawlie*)
MechKrawliePack::Relocate(MechKrawlie*, MechKrawlie*)
MechObjectInterface::GetDirection(VuVec&) const
MechObjectInterface::GetRidingData() const
MechObjectInterface::AddRidingData(MechRidingData&)
MechObjectInterface::RemoveRidingData(MechRidingData&)
MechObjectInterface::DestroyRidingData()
MechKrawliePackInterface::~MechKrawliePackInterface()
MechKrawliePackInterface::GetTargetMom(VuVec&, TARGETING_TYPE)
MechKrawliePackInterface::GetGameType()
MechKrawliePackInterface::GetTargetKrawliePack()
MechObjectInterface::BestToPunchIfPossible() const
MechKrawlieControllerBase::MechKrawlieControllerBase(HashedKey const&)
MechKrawlieControllerBase::~MechKrawlieControllerBase()
non-virtual thunk to MechKrawlieControllerBase::~MechKrawlieControllerBase()
MechKrawlieControllerBase::~MechKrawlieControllerBase()
non-virtual thunk to MechKrawlieControllerBase::~MechKrawlieControllerBase()
MechKrawlieControllerBase::GetLevelContainer() const
non-virtual thunk to MechKrawlieControllerBase::GetLevelContainer() const
MechKrawlieControllerBase::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
MechKrawlieControllerBase::GetInteractFilterMask()
MechKrawlieControllerBase::OnKrawlieCreated(MechKrawlie*)
MechKrawlieControllerBase::OnKrawlieDestroyed(MechKrawlie*)
MechKrawliePlayAreaInit::MechKrawliePlayAreaInit(MechKrawlieManager&)
MechKrawliePlayAreaInit::Init()
MechKrawliePlayAreaInit::MechKrawliePlayAreaInit(MechKrawlieManager&, MechKrawlieZone&)
MechKrawliePlayAreaInit::AddToBigGrid()
MechKrawliePlayAreaInit::~MechKrawliePlayAreaInit()
MechKrawliePlayAreaInit::CreateKrawliePlayArea()
MechKrawliePlayAreaInit::CalcTurnRatio(short)
MechKrawliePlayAreaInit::Process(float)
MechKrawliePlayArea::ClearBigGridCell()
MechKrawliePlayArea::MechKrawliePlayArea(MechKrawlieManager&, MechKrawliePlayAreaInit&)
MechKrawlieSplatterGrid::RecalcCentre()
MechKrawliePlayArea::~MechKrawliePlayArea()
MechKrawliePlayArea::DeallocateKrawlies()
MechKrawlieSplatterGrid::~MechKrawlieSplatterGrid()
MechKrawliePlayArea::Process(float)
MechKrawliePlayArea::IsAreaValid()
MechKrawliePlayArea::ProcessKrawlies(float)
MechKrawliePlayArea::ProcessKrawlieContexts(float)
MechKrawliePlayArea::ProcessKrawliesState(float)
MechKrawliePlayArea::FillGap(int)
MechKrawliePlayArea::ProcessKillingKrawlies()
MechKrawliePlayArea::Render(MechKrawlieCameraClipping&, int)
MechKrawliePlayArea::RenderKrawlies(MechKrawlieCameraClipping&, int)
MechKrawliePlayArea::RenderKrawlie(MechKrawlieCameraClipping&, MechKrawlie&, VuVec const&, VuVec const&, int)
MechKrawliePlayArea::GetKrawlieRenderFlags(MechKrawlieCameraClipping&, MechKrawlie&, int, bool&, NuBitVector<32u, unsigned int>&)
MechKrawliePlayArea::CalcLod(MechKrawlie&, VuVec const&, VuVec const&)
MechKrawliePlayArea::CreateKrawlie(MechKrawliePack&, MechKrawlieTypeDefinitions::KrawlieType const*, VuVec const&, short, bool)
MechKrawliePlayArea::AllocateKrawlies()
MechKrawliePlayArea::CreateKrawlie(MechKrawliePack&, MechCharacter&)
MechKrawliePlayArea::UpdateSplatterGrid()
MechKrawliePlayArea::CreateSectorGroup()
MechKrawliePlayArea::CreateGangerGroup()
MechKrawliePlayArea::CreateRidersGroup()
MechKrawliePlayArea::GetFixedCylinderArrayCreate()
MechKrawliePlayArea::KillIncidental()
MechKrawliePlayArea::ClipTest(MechKrawlieCameraClipping&, int)
MechKrawliePlayArea::BuildClipMask()
MechKrawliePlayArea::ClipArea(MechKrawlieCameraClipping&, unsigned char&, int)
MechKrawliePlayArea::ClipCells(MechKrawlieCameraClipping&, unsigned char&, int)
KrawliePlayAreaList::Find(char*)
MechKrawlieSplatterGrid::MechKrawlieSplatterGrid(MechKrawliePlayArea&, MechKrawlieSplatterGridHeights&, char)
MechKrawlieSplatterGrid::AllocateMem()
MechKrawlieSplatterGrid::MechKrawlieSplatterGrid(MechKrawliePlayArea&, MechKrawlieSplatterGridHeights&, float, VuVec const&, VuVec const&, char, bool)
MechKrawlieSplatterGrid::CalcCorners(MechKrawlieZone*)
MechKrawlieSplatterGrid::GenerateSplatterZones(int, int, int, int)
MechKrawlieSplatterGrid::DebugRender(VuVec&, VuVec&, bool)
MechKrawlieSplatterGrid::ClipTestCells(MechKrawlieCameraClipping&, unsigned char&, int)
MechKrawlieSplatterGrid::Init()
MechKrawlieSplatterGridHeights::GetNewCellDataArray() const
MechKrawlieSplatterGridHeights::GetNewCellDataArray()
MechKrawlieSplatterGridHeights::GetNewCellEdgeDataArray() const
MechKrawlieSplatterGridHeights::GetNewCellEdgeDataArray()
MechKrawlieSplatterGridHeights::ShouldStoreEdgeData(unsigned char) const
MechKrawlieSplatterGridHeights::MechKrawlieSplatterGridHeights(MechKrawlieZone&)
MechKrawlieSplatterGridHeights::SetWidth(unsigned short)
MechKrawlieSplatterGridHeights::SetDepth(unsigned short)
MechKrawlieSplatterGridHeights::GetResLOD()
MechKrawlieSplatterGridHeights::SetResLOD(short)
MechKrawlieSplatterGridHeights::GetClass() const
MechKrawlieSplatterGridHeights::GetGridHeight(VuVec const&, float&) const
MechKrawlieSplatterGridHeights::GetGridCellData(VuVec const&) const
MechKrawlieSplatterGridHeights::SetNewCellData(int, unsigned char)
MechKrawlieSplatterGridHeights::UnpackHeightData(MechKrawlieSplatterGrid&)
MechKrawlieSplatterGridHeights::PointUsed(int, int)
EdRefSplatterGridHeights::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSplatterGridHeights::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
MechKrawlieSplatterGridHeights::FixupOldCharHeightData()
MechKrawlieSplatterGridHeights::PackGridHeightsAsU16(float*, int)
SplatterGridHeightsHelper::SplatterGridHeightsHelper()
SplatterGridHeightsHelper::Initialise()
SplatterGridHeightsHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
SplatterGridHeightsHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
SplatterGridHeightsHelper::GetManNextObject(ClassManager*, void*, void*)
MechKrawlieSplatterGridHeights::~MechKrawlieSplatterGridHeights()
EdNuArray<VuVec, unsigned short>::~EdNuArray()
EdNuArray<float, unsigned short>::~EdNuArray()
EdNuArray<unsigned char, unsigned short>::~EdNuArray()
EdNuArray<char, unsigned short>::~EdNuArray()
EdNuArray<unsigned short, unsigned short>::~EdNuArray()
non-virtual thunk to MechKrawlieSplatterGridHeights::~MechKrawlieSplatterGridHeights()
MechKrawlieSplatterGridHeights::~MechKrawlieSplatterGridHeights()
non-virtual thunk to MechKrawlieSplatterGridHeights::~MechKrawlieSplatterGridHeights()
EdRefSplatterGridHeights::~EdRefSplatterGridHeights()
MechKrawlieSplatterGridHeights::GetRadius() const
SplatterGridHeightsHelper::~SplatterGridHeightsHelper()
EdNuArray<unsigned char, unsigned short>::~EdNuArray()
EdNuArray<unsigned char, unsigned short>::GetAllocSize() const
EdNuArray<unsigned char, unsigned short>::GetMaxAllocSize() const
EdNuArray<unsigned char, unsigned short>::SetAllocSize(unsigned int, bool)
EdNuArray<unsigned char, unsigned short>::GetData()
EdNuArray<unsigned char, unsigned short>::GetData() const
EdArray<unsigned char>::GetGrowBy() const
EdArrayWithSize<unsigned char, unsigned short>::DoGetSize() const
EdArrayWithSize<unsigned char, unsigned short>::DoSetSize(unsigned int)
EdNuArray<unsigned short, unsigned short>::~EdNuArray()
EdNuArray<unsigned short, unsigned short>::GetAllocSize() const
EdNuArray<unsigned short, unsigned short>::GetMaxAllocSize() const
EdNuArray<unsigned short, unsigned short>::SetAllocSize(unsigned int, bool)
EdNuArray<unsigned short, unsigned short>::GetData()
EdNuArray<unsigned short, unsigned short>::GetData() const
EdArray<unsigned short>::GetGrowBy() const
EdArrayWithSize<unsigned short, unsigned short>::DoGetSize() const
EdArrayWithSize<unsigned short, unsigned short>::DoSetSize(unsigned int)
EdNuArray<char, unsigned short>::~EdNuArray()
EdNuArray<char, unsigned short>::GetAllocSize() const
EdNuArray<char, unsigned short>::GetMaxAllocSize() const
EdNuArray<char, unsigned short>::SetAllocSize(unsigned int, bool)
EdNuArray<char, unsigned short>::GetData()
EdNuArray<char, unsigned short>::GetData() const
EdNuArray<float, unsigned short>::~EdNuArray()
EdNuArray<float, unsigned short>::GetAllocSize() const
EdNuArray<float, unsigned short>::GetMaxAllocSize() const
EdNuArray<float, unsigned short>::SetAllocSize(unsigned int, bool)
EdNuArray<float, unsigned short>::GetData()
EdNuArray<float, unsigned short>::GetData() const
EdArray<float>::GetGrowBy() const
EdArrayWithSize<float, unsigned short>::DoGetSize() const
EdArrayWithSize<float, unsigned short>::DoSetSize(unsigned int)
EdNuArray<VuVec, unsigned short>::~EdNuArray()
EdNuArray<VuVec, unsigned short>::GetAllocSize() const
EdNuArray<VuVec, unsigned short>::GetMaxAllocSize() const
EdNuArray<VuVec, unsigned short>::SetAllocSize(unsigned int, bool)
EdNuArray<VuVec, unsigned short>::GetData()
EdNuArray<VuVec, unsigned short>::GetData() const
EdArray<unsigned short>::SetSize(unsigned int, bool)
EdArray<unsigned char>::SetSize(unsigned int, bool)
EdHeightArrayRef<unsigned char>::~EdHeightArrayRef()
EdHeightArrayRef<unsigned char>::GetCount(void*)
EdHeightArrayRef<unsigned char>::SetCount(void*, unsigned int)
EdHeightArrayRef<unsigned char>::GetMaxCount(void*)
EdHeightArrayRef<unsigned char>::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdHeightArrayRef<unsigned char>::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdFixedArray<unsigned char, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<unsigned char, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<unsigned char, 1u, unsigned short>::GetAllocSize() const
EdFixedArray<unsigned char, 1u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<unsigned char, 1u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<unsigned char, 1u, unsigned short>::GetData()
EdFixedArray<unsigned char, 1u, unsigned short>::GetData() const
EdArrayRef<unsigned char>::~EdArrayRef()
EdArrayRef<unsigned char>::GetCount(void*)
EdArrayRef<unsigned char>::SetCount(void*, unsigned int)
EdArrayRef<unsigned char>::GetMaxCount(void*)
EdArrayRef<unsigned char>::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdArrayRef<unsigned char>::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdArrayRef<char>::~EdArrayRef()
EdArrayRef<char>::GetCount(void*)
EdArrayRef<char>::SetCount(void*, unsigned int)
EdArrayRef<char>::GetMaxCount(void*)
EdArrayRef<char>::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdArrayRef<char>::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdArrayRef<VuVec>::~EdArrayRef()
EdArrayRef<VuVec>::GetCount(void*)
EdArrayRef<VuVec>::SetCount(void*, unsigned int)
EdArrayRef<VuVec>::GetMaxCount(void*)
EdArrayRef<VuVec>::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdArrayRef<VuVec>::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdFixedArray<VuVec, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<VuVec, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<VuVec, 1u, unsigned short>::GetAllocSize() const
EdFixedArray<VuVec, 1u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<VuVec, 1u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<VuVec, 1u, unsigned short>::GetData()
EdFixedArray<VuVec, 1u, unsigned short>::GetData() const
EdArrayRef<float>::~EdArrayRef()
EdArrayRef<float>::GetCount(void*)
EdArrayRef<float>::SetCount(void*, unsigned int)
EdArrayRef<float>::GetMaxCount(void*)
EdArrayRef<float>::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdArrayRef<float>::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdFixedArray<float, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<float, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<float, 1u, unsigned short>::GetAllocSize() const
EdFixedArray<float, 1u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<float, 1u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<float, 1u, unsigned short>::GetData()
EdFixedArray<float, 1u, unsigned short>::GetData() const
EdArray<float>::SetSize(unsigned int, bool)
EdArrayRef<unsigned short>::~EdArrayRef()
EdArrayRef<unsigned short>::GetCount(void*)
EdArrayRef<unsigned short>::SetCount(void*, unsigned int)
EdArrayRef<unsigned short>::GetMaxCount(void*)
EdArrayRef<unsigned short>::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdArrayRef<unsigned short>::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdFixedArray<unsigned short, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<unsigned short, 1u, unsigned short>::~EdFixedArray()
EdFixedArray<unsigned short, 1u, unsigned short>::GetAllocSize() const
EdFixedArray<unsigned short, 1u, unsigned short>::GetMaxAllocSize() const
EdFixedArray<unsigned short, 1u, unsigned short>::SetAllocSize(unsigned int, bool)
EdFixedArray<unsigned short, 1u, unsigned short>::GetData()
EdFixedArray<unsigned short, 1u, unsigned short>::GetData() const
MechKrawliePool::MechKrawliePool()
MechKrawliePool::AllocateKrawlies(int, int)
MechKrawliePool::DeallocateKrawlies()
MechKrawlieManager::MechKrawlieManager(LevelContainer&)
MechKrawlieManager::SetDefaultLODDistances()
MechKrawlieManager::~MechKrawlieManager()
MechKrawlieManager::~MechKrawlieManager()
MechKrawlieManager::GetPlayArea(VuVec const&)
MechKrawlieManager::GetBigGridCreate()
MechKrawlieManager::IsInCutscene()
MechKrawlieManager::FindPlayArea(char const*)
MechKrawlieManager::FindKrawlieZone(LevelContainer&, VuVec*)
MechKrawlieManager::FindLevelData(LevelContainer const&, bool)
MechKrawlieManager::GetKrawlieSize()
MechKrawlieManager::ForceObjDescLoad(MechKrawlieTypeDefinitions::KrawlieType&)
MechKrawlieManager::GetObjDesc(MechCharacter&)
MechKrawlieManager::GetUnusedGangerAreaId()
MechKrawlieManager::ReleaseUnusedGangerAreaId(unsigned char)
MechKrawlieManager::CreateZone(LevelContainer const&)
MechKrawlieManager::DestroyZone(MechKrawlieZone&, LevelContainer const&)
MechKrawlieManager::CreateGroup(LevelContainer const&)
MechKrawlieManager::CreateGroup(MechKrawlieZone&, HashedKey const&, char const*)
MechKrawlieManager::DestroyGroup(MechKrawlieGroup&, LevelContainer const&)
MechKrawlieManager::CreateController(HashedKey, MechKrawlieGroup&, char const*)
MechKrawlieManager::ConstructKrawlie(MechKrawlie*, MechKrawliePack&, MechKrawlieTypeDefinitions::KrawlieType const*, VuVec const&, short, bool)
MechKrawlieManager::ConstructKrawlie(MechKrawlie*, MechKrawliePack&, MechCharacter&)
MechKrawlieManager::MoveKrawlie(MechKrawliePlayArea&, MechKrawliePlayArea&, MechKrawlieSplatterGridCell&, MechKrawlie&)
MechKrawlieManager::GetAreaAndCell(MechKrawliePlayArea&, VuVec const&, MechKrawlieSplatterGridCell*&, MechKrawliePlayArea*&, float&, float&)
MechKrawlieManager::GetBigGridArea(MechKrawliePlayArea&, VuVec const&)
MechKrawlieManager::RaycastGround(VuVec const&, float, FirstPointCollector&, int)
MechKrawlieSplatterGridHeights::GetGridHeight(VuVec const&) const
MechKrawlieManager::AddFixedCollisionIntoAreas(unsigned long, VuVec const&, float, float, MechKrawlieDefines::CollisionObjType, char*)
MechKrawlieManager::FindAreaWithCollision(VuVec const&)
MechKrawlieManager::AddFixedCylinder(MechKrawliePlayArea&, unsigned long, VuVec const&, float, float, MechKrawlieDefines::CollisionObjType, char*)
MechKrawlieManager::RemoveFixedCollisionIntoAreas(unsigned long, VuVec const&)
MechKrawlieManager::RemoveFixedCylinder(MechKrawliePlayArea&, unsigned long, VuVec const&)
MechKrawlieManager::Reset()
MechKrawlieManager::PlaySfx(short, VuVec const*)
MechKrawlieManager::RayCastBolt(Bolt&, MechObjectData&)
MechKrawlieManager::CanTurnBackToKrawlie(MechCharacter*)
MechKrawlieManager::TurnBackToKrawlie(MechCharacter*, bool)
MechKrawlieManager::CheapBolt_Shoot(VuVec&, VuVec&, BoltTypeID const&)
MechKrawlieManager::CreateKrawlieRider(MechVehicle&, int, unsigned int const*)
MechKrawlieManager::CreateKrawliePassenger(MechVehicle&, VehicleDefSeat::SEATTYPES)
MechKrawlieManager::RegisterProcessing()
MechKrawlieManager::RegisterRendering()
MechKrawlieManager::EventNotify(Event&, NuEventData&)
MechKrawlieManager::LevelLoad(NuEventData&)
MechKrawlieManager::LevelInit(NuEventData&)
MechKrawlieManager::LevelUninit(NuEventData&)
MechKrawlieManager::LevelUnload(NuEventData&)
MechKrawlieManager::SectorUnload(NuEventData&)
MechKrawlieManager::SectorLoad(NuEventData&)
MechKrawlieManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechKrawlieManager::Process(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechKrawlieManager::ProcessPostCameras(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechKrawlieManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MechKrawlieManager::MainRender(int)
MechKrawlieManager::HudRender()
MechKrawlieManager::ProcessKrawlieAreas(float)
MechKrawlieManager::ProcessAiSectorNodeListToInitialise()
MechKrawlieManager::ProcessGangers()
MechKrawlieManager::ProcessVehicles()
MechKrawlieManager::CreateKrawliesOnAiNodes(MechKrawliePlayArea&)
MechKrawlieManager::ClipAndRenderKrawlies(MechKrawlieCameraClipping&)
MechKrawlieManager::SelectShadowLightIdx()
MechKrawlieManager::GetNeighboursFromCells(MechKrawliePlayArea&, MechKrawlieSplatterGridCell&, MechKrawlie**, int)
MechKrawlieManager::AddFixedCylinder(MechKrawliePlayArea&, MechKrawlieSplatterGridCell&, unsigned long, VuVec const&, float, float, MechKrawlieDefines::CollisionObjType, char*)
MechKrawlieManager::RemoveFixedCylinder(MechKrawliePlayArea&, MechKrawlieSplatterGridCell&, unsigned long)
MechKrawlieManager::ReInitCrawlieZones(LevelContainer*)
MechKrawlieManager::CreateLevelData(LevelContainer const&)
MechKrawlieManager::CleanupLevelData(LevelContainer const&)
MechKrawlieManager::LevelContainerSpecificData::~LevelContainerSpecificData()
MechKrawlieManager::RequestCharacterResources(MechKrawlieManager::LevelContainerSpecificData&)
MechKrawlieManager::CleanupCharacterResources(MechKrawlieManager::LevelContainerSpecificData&)
MechKrawlieManager::LoadObjDescResources(MechKrawlieManager::LevelContainerSpecificData&)
MechKrawlieManager::EnterLevel(LevelContainer*)
CMList<cAISectorNode*>::Append(cAISectorNode* const&, CMList<cAISectorNode*>::ListLink*)
MechKrawlieManager::RemoveKrawliesThatReferenceSectorNode(unsigned short)
MechKrawlieManager::RemoveAll(LevelContainer*)
MechKrawlieManager::RemoveAllCrawlieZones()
MechKrawlieManager::RemoveKrawliesThatReferenceSectorNode(MechKrawliePlayArea&, unsigned short)
MechKrawlieManager::FindKrawlieZone(char const*)
MechKrawlieManager::GetManagerName() const
MechKrawlieSimpleHookOnCreate::GetHashedKey()
MechKrawlieSimpleHookFlatten::GetHashedKey()
MechKrawlieSimpleHookStationaryVehicleClose::GetHashedKey()
NuListFind<MechKrawlieManager*, NuListNode<MechKrawlieManager*> >::Remove(NuListNode<MechKrawlieManager*>*, NuListNode<MechKrawlieManager*>*, MechKrawlieManager* const&)
NuListFind<MechKrawlieManager::LevelContainerSpecificData*, NuListNode<MechKrawlieManager::LevelContainerSpecificData*> >::Remove(NuListNode<MechKrawlieManager::LevelContainerSpecificData*>*, NuListNode<MechKrawlieManager::LevelContainerSpecificData*>*, MechKrawlieManager::LevelContainerSpecificData* const&)
NuClass_MechKrawlieZoneFixedCylinder::NuClass_MechKrawlieZoneFixedCylinder()
NuClass_MechKrawlieZoneFixedCylinder::~NuClass_MechKrawlieZoneFixedCylinder()
MechKrawlieZoneFixedCylinder::PreSerializeFixup(bool)
MechKrawlieZoneFixedCylinder::Serialize(NuSerialize&)
MechKrawlieZoneFixedCylinder::PostSerializeFixup(NuSmartPtr<NuClassAbstractInstance, false>, bool)
NuClass_NuMechKrawlieZone::NuClass_NuMechKrawlieZone()
NuClass_NuMechKrawlieZone::~NuClass_NuMechKrawlieZone()
NuMechKrawlieZone::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<MechKrawlieZoneFixedCylinder>(NuVector<MechKrawlieZoneFixedCylinder>&, char const*)
MechKrawlieZone::MechKrawlieZone(MechKrawlieManager&)
MechKrawlieZone::~MechKrawlieZone()
non-virtual thunk to MechKrawlieZone::~MechKrawlieZone()
MechKrawlieZone::~MechKrawlieZone()
non-virtual thunk to MechKrawlieZone::~MechKrawlieZone()
MechKrawlieZone::GetClass() const
MechKrawlieZoneHelper::Get()
MechKrawlieZone::CreateInit()
MechKrawlieZone::FixUp()
MechKrawlieZone::FixUpBigGrid()
MechKrawlieZone::FixUpCylindersToPlayArea()
MechKrawlieZone::CalcLightingPos()
MechKrawlieZone::AddEditableFixedCylinder(MechKrawlieZoneFixedCylinder const*)
MechKrawlieZone::GetEditableFixedCylinder(unsigned int, MechKrawlieZoneFixedCylinder*) const
MechKrawlieZone::SetEditableFixedCylinder(unsigned int, MechKrawlieZoneFixedCylinder const*)
MechKrawlieZone::RemoveEditableFixedCylinder(unsigned int)
NuVector<MechKrawlieZoneFixedCylinder>::Erase(unsigned int)
MechKrawlieZone::GetEditableFixedCylinderCount() const
MechKrawlieZoneHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
MechKrawlieZoneHelper::MechKrawlieZoneHelper()
MechKrawlieZoneHelper::Initialise()
MechKrawlieZoneHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieZoneHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieZoneHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
MechKrawlieZoneHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
MechKrawlieZoneHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
MechKrawlieZoneHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
MechKrawlieZoneHelper::SerialiseObject(void*, EdSerialiseParams&)
MechKrawlieZoneHelper::GetManNextObject(ClassManager*, void*, void*)
MechKrawlieZoneHelper::GetNextObject(void*, void*)
MechKrawlieZoneHelper::~MechKrawlieZoneHelper()
EdKrawlieGridRef::EdKrawlieGridRef(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*, NetReplicatorInst*)
EdKrawlieGridRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdKrawlieGridRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
MechKrawlieZoneHelper::~MechKrawlieZoneHelper()
non-virtual thunk to MechKrawlieZoneHelper::~MechKrawlieZoneHelper()
non-virtual thunk to MechKrawlieZoneHelper::~MechKrawlieZoneHelper()
EdKrawlieGridRef::~EdKrawlieGridRef()
NuClass_MechKrawlieZoneFixedCylinder::~NuClass_MechKrawlieZoneFixedCylinder()
NuClass_MechKrawlieZoneFixedCylinder::CreateObject() const
NuClass_MechKrawlieZoneFixedCylinder::CreateObjectArray(unsigned int) const
NuClass_MechKrawlieZoneFixedCylinder::PlacementNew(void*) const
NuClass_MechKrawlieZoneFixedCylinder::SerializeObjectIn(NuArchive&, void*) const
NuClass_MechKrawlieZoneFixedCylinder::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_MechKrawlieZoneFixedCylinder::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_MechKrawlieZoneFixedCylinder::~NuClass_MechKrawlieZoneFixedCylinder()
non-virtual thunk to NuClass_MechKrawlieZoneFixedCylinder::~NuClass_MechKrawlieZoneFixedCylinder()
NuClass_NuMechKrawlieZone::~NuClass_NuMechKrawlieZone()
NuClass_NuMechKrawlieZone::CreateObject() const
NuClass_NuMechKrawlieZone::CreateObjectArray(unsigned int) const
NuClass_NuMechKrawlieZone::PlacementNew(void*) const
NuClass_NuMechKrawlieZone::SerializeObjectIn(NuArchive&, void*) const
NuClass_NuMechKrawlieZone::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_NuMechKrawlieZone::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_NuMechKrawlieZone::~NuClass_NuMechKrawlieZone()
non-virtual thunk to NuClass_NuMechKrawlieZone::~NuClass_NuMechKrawlieZone()
NuVector<MechKrawlieZoneFixedCylinder>::ReSize(unsigned int, bool)
NuVector<MechKrawlieZoneFixedCylinder>::Reserve(unsigned int, bool)
MechKrawlieCameraClipping::ClippingVolume::DebugDraw(MechKrawlieCameraClipping::ClipResult)
MechKrawlieCameraClipping::MechKrawlieCameraClipping(int, NuCamera const&)
MechKrawlieCameraClipping::ClipMakePlanesFromCamera(NuCamera const&, MechKrawlieCameraClipping&, float, float)
MechKrawlieCameraClipping::ClipTest(MechKrawlieCameraClipping::ClippingVolume&, unsigned char, unsigned char&)
MechKrawlieCameraClipping::ClipTest(MechKrawlie&, unsigned char)
MechKrawlieCameraClipping::ClipMakePlanesInitViewCone(NuCamera const*, MechKrawlieCameraClipping&, float, float)
MechKrawlieCameraClipping::OverrideFarPlaneDistance(float)
MechKrawlieLightingGrid::MechKrawlieLightingGrid(MechKrawliePlayArea&)
MechKrawlieLightingGrid::~MechKrawlieLightingGrid()
MechKrawlieLightingGrid::GetLightingState(NuLightState&, VuVec const&)
MechKrawlieLightingGrid::CalcLightingStates()
MechKrawlieAddons::Init()
MechKrawlieAddon::ParseParamString(char const*)
MechKrawlieAddonCollection::Find(HashedKey&)
MechKrawlieAddonCollection::Process(MechKrawlie&, float)
MechKrawlieAddonCollection::OverrideRenderMtx(MechKrawlie&, VuMtx&)
MechKrawlieAddonCollection::OverrideRender(MechKrawlie&, MechKrawlieRenderInfo const&, bool&)
MechKrawlieAddonCollection::SimpleHook(MechKrawlie&, MechKrawlieSimpleHook&)
MechKrawlieAddons::MechKrawlieAddons()
MechKrawlieAddons::RegisterAddons()
MechKrawlieAddons::~MechKrawlieAddons()
MechKrawlieAddons::~MechKrawlieAddons()
MechKrawlieAddons::ShutDown()
MechSystemBase<MechKrawlieAddons, int>::Suppress(int)
MechSystemBase<MechKrawlieAddons, int>::IsSuppressed(int) const
ClassTable<MechKrawlieAddon>::~ClassTable()
ClassTable<MechKrawlieAddon>::~ClassTable()
void* Constructor<MechKrawlieAlphaBlendAddon>()
void* Constructor<MechKrawlieAvoidanceAddon>()
void* Constructor<MechKrawlieKrawlieRiderAddon>()
KrawlieObjDesc_FindCharDef(char const*)
MechKrawlieObjDescSubType::MechKrawlieObjDescSubType(CharDef*, MechKrawlieTypeDefinitions::KrawlieType*, bool)
MechKrawlieObjDescSubType::InitialiseAttachmentFromCharDef(CharDef&, MechKrawlieTypeDefinitions::KrawlieType*, bool)
MechKrawlieObjDescSubType::MechKrawlieObjDescSubType(MechCharacter&)
MechKrawlieObjDescSubType::InitialiseAttachmentFromMechChar(MechCharacter&)
MechKrawlieObjDescSubType::AttachmentNeedsOffset(VuMtx const&)
MechKrawlieObjDescSubType::FindAttachmentSpecial(CharAttachmentDef const*, nuhspecial_s&, VuMtx&, NUCOLOUR3&)
MechKrawlieObjDescSubType::FindAttachmentSpecial(CharAttachmentInst const*, nuhspecial_s&, VuMtx&)
MechKrawlieObjDescSubType::GetSpecialFromModel(NuSmartPtr<NuScene, true>, nuhspecial_s&, VuMtx&, int)
MechKrawlieObjDesc::MechKrawlieObjDesc(MechKrawlieTypeDefinitions::KrawlieType&)
MechKrawlieObjDesc::Clear(int)
MechKrawlieObjDesc::~MechKrawlieObjDesc()
MechKrawlieObjDesc::Initialise(MechKrawlieManager&)
MechKrawlieObjDesc::InitialiseLods(MechKrawlieManager&, NuSmartPtr<NuScene, true>)
MechKrawlieObjDesc::InitialiseAnims(NuSmartPtr<NuScene, true>)
MechKrawlieObjDesc::InitialiseSfx()
MechKrawlieObjDesc::GenerateNewSubType()
MechKrawlieObjDesc::PurgeUnferencedSubtypes()
MechKrawlieObjDesc::GetRandomSubType(bool)
MechKrawlieObjDesc::GetMatchingSubType(MechCharacter&)
MechKrawlieObjDesc::GetAnimByActionID(int)
MechKrawlieObjDesc::AttemptToPlaySfx(LevelContainer const&, VuVec const&, MechKrawlieDefines::KrawlieSfx)
NuVector<CharDef*>::Reserve(unsigned int, bool)
NuVector<MechKrawlieObjDescSubType*>::Reserve(unsigned int, bool)
MechKrawlieObjAnim::SetMatchRateToMoveSpeed(bool)
MechKrawlieObjAnim::InitialiseTriggers(CharAnimEntry const&, CharDef&)
MechKrawlieAnimTriggerHolder* MechKrawlieAnimTriggerCollection::AddNewTrigger<MechKrawlieAnimTrigger_Footstep, MechKrawlieAnimTrigger_Footstep::ConstructionParams>(MechKrawlieAnimTrigger_Footstep::ConstructionParams const&)
MechKrawlieAnimTriggerHolder* MechKrawlieAnimTriggerCollection::AddNewTrigger<MechKrawlieAnimTrigger_SFX, MechKrawlieAnimTrigger_SFX::ConstructionParams>(MechKrawlieAnimTrigger_SFX::ConstructionParams const&)
MechKrawlieAnimTriggerHolder* MechKrawlieAnimTriggerCollection::AddNewTrigger<MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerVFXData, MechKrawlieVFXAddon>, MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerVFXData, MechKrawlieVFXAddon>::ConstructionParams>(MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerVFXData, MechKrawlieVFXAddon>::ConstructionParams const&)
MechKrawlieAnimTriggerHolder* MechKrawlieAnimTriggerCollection::AddNewTrigger<MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerPTLData, MechKrawlieParticleEmitterAddon>, MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerPTLData, MechKrawlieParticleEmitterAddon>::ConstructionParams>(MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerPTLData, MechKrawlieParticleEmitterAddon>::ConstructionParams const&)
MechKrawlieObjAnim::ClearAnim()
MechKrawlieAnimTriggerCollection::Destroy()
MechKrawlieObjAnim::SetAnim(CharDef&, SimpleMechKrawlieCharAnimRemap&)
MechKrawlieAnimTriggerBase::~MechKrawlieAnimTriggerBase()
MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerVFXData, MechKrawlieVFXAddon>::~MechKrawlieAnimTrigger_ViaAddon()
MechKrawlieAnimTriggerBase::Create()
MechKrawlieAnimTriggerBase::Destroy()
MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerVFXData, MechKrawlieVFXAddon>::EnterTriggerRange(MechKrawlie&)
MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerVFXData, MechKrawlieVFXAddon>::ExitTriggerRange(MechKrawlie&)
MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerPTLData, MechKrawlieParticleEmitterAddon>::~MechKrawlieAnimTrigger_ViaAddon()
MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerPTLData, MechKrawlieParticleEmitterAddon>::EnterTriggerRange(MechKrawlie&)
MechKrawlieAnimTrigger_ViaAddon<CharAnimTriggerPTLData, MechKrawlieParticleEmitterAddon>::ExitTriggerRange(MechKrawlie&)
MechKrawlieAttachmentInfo::MechKrawlieAttachmentInfo()
MechKrawlieScriptSupport::FindKrawlieGroup(LevelContainer*, char const*)
MechKrawlieScriptSupport::FindKrawlieSpawner(LevelContainer*, char const*)
MechKrawlieScriptSupport::FindKrawlieSpawner(LevelContainer*, char const*, char const*)
MechKrawlieScriptSupport::ConvertKrawlieToCharacter(LevelContainer*, char const*, int, bool, EdString&)
MechKrawlieScriptSupport::ConvertCharacterToKrawlie(MechCharacter*, LevelContainer*, char const*, EdString&)
MechKrawlieScriptSupport::SetManagerRendering(LevelContainer*, bool)
MechKrawlieScriptSupport::SetManagerProcessing(LevelContainer*, bool)
MechKrawlieScriptSupport::ClearLodDistanceOverrides(LevelContainer*)
MechKrawlieScriptSupport::SetLodDistanceOverrides(LevelContainer*, float, float, float, float, float)
MechKrawlieAnimTriggerHolder::AddTriggerRange(float, float)
MechKrawlieAnimTriggerHolder::Process(MechKrawlie&, float)
MechKrawlieAnimTriggerHolder::OnAnimBegin(MechKrawlie&, float)
MechKrawlieAnimTriggerHolder::OnAnimEnd(MechKrawlie&, float)
MechKrawlieAnimTrigger_Footstep::MechKrawlieAnimTrigger_Footstep(MechKrawlieAnimTrigger_Footstep::ConstructionParams const&)
MechKrawlieAnimTrigger_Footstep::EnterTriggerRange(MechKrawlie&)
MechKrawlieAnimTrigger_SFX::MechKrawlieAnimTrigger_SFX(MechKrawlieAnimTrigger_SFX::ConstructionParams const&)
MechKrawlieAnimTrigger_SFX::Create()
MechKrawlieAnimTrigger_SFX::Destroy()
MechKrawlieAnimTrigger_SFX::EnterTriggerRange(MechKrawlie&)
MechKrawlieAnimTrigger_SFX::ExitTriggerRange(MechKrawlie&)
MechKrawlieAnimTrigger_Footstep::~MechKrawlieAnimTrigger_Footstep()
MechKrawlieAnimTriggerBase::ExitTriggerRange(MechKrawlie&)
MechKrawlieAnimTrigger_SFX::~MechKrawlieAnimTrigger_SFX()
MechKrawlieAnimTrigger_SFX::~MechKrawlieAnimTrigger_SFX()
MechKrawlieContext::GetFrom(MechKrawlie&)
MechKrawlieContextNone::MechKrawlieContextNone(MechKrawlie&)
MechKrawlieContextRequest_None(MechKrawlie&)
void KrawlieContextConstructor<MechKrawlieContextNone>(MechKrawlie&)
MechKrawlieContextNone::Process(float, MechKrawlie&)
MechKrawlieContext::~MechKrawlieContext()
MechKrawlieContextNone::~MechKrawlieContextNone()
MechKrawlieContextNone::GetSize() const
MechKrawlieContextNone::GetContextId()
MechKrawlieContextRequest_MiniFigRandomWander(MechKrawlie&, bool)
MechKrawlieContextRequest_MiniFigRandomWander(MechKrawlie&, KRAWLIEANIM, bool)
MechKrawlieContextRequest_MiniFigRandomWander(MechKrawlie&, VuVec&, bool)
MechKrawlieContextRequest_MiniFigRandomWander(MechKrawlie&, VuVec&, KRAWLIEANIM, bool)
MechKrawlieContextRequest_MiniFigRandomWanderTurnAround(MechKrawlie&, short, float, bool)
MechKrawlieContextRequest_MiniFigAiNodeWander(MechKrawlie&)
void KrawlieContextConstructor<MechKrawlieContextMiniFigAiNodeWander>(MechKrawlie&)
MechKrawlieContextRequest_MiniFigThrowItem(MechKrawlie&, int, VuVec const&)
void KrawlieContextConstructor<MechKrawlieMiniFigContextThrowItem>(MechKrawlie&)
MechKrawlieContextRequest_MiniFigTakeHit(KRAWLIEANIM, VuVec const&, float)
void KrawlieContextConstructor<MechKrawlieMiniFigContextTakeHit>(MechKrawlie&)
MechKrawlieContextRequest_MiniFigPlayAnim_DoNotUse(KRAWLIEANIM, float, bool, short)
MechKrawlieContextRequest_MiniFigPlayAnim_DoNotUse(KRAWLIEANIM, float, bool)
MechKrawlieContextRequest_MinifigDeath(bool, bool, bool)
void KrawlieContextConstructor<MechKrawlieMiniFigContextDeath>(MechKrawlie&)
MechKrawlieContextRequest_MiniFigJump()
MechKrawlieContextRequest_MiniFigFlatten(short)
MechKrawlieContextRequest_MiniFigGotoTarget(VuVec const&, float, float, float, KRAWLIEANIM, bool)
void KrawlieContextConstructor<MechKrawlieMiniFigContextGotoTarget>(MechKrawlie&)
MechKrawlieContextRequest_MiniFigGotoTarget(VuVec const&, float, float, float, KRAWLIEANIM, bool, bool)
void KrawlieContextConstructor<MechKrawlieContextMiniFigRandomWanderTurnAround>(MechKrawlie&)
MechKrawlieContextMiniFigAiNodeWander::MechKrawlieContextMiniFigAiNodeWander(MechKrawlie&)
ChooseNextAiNode(MechKrawlie&)
MechKrawlieContextMiniFigAiNodeWander::SanityCheckAvoidPos(MechKrawlie&, VuVec&)
MechKrawlieContextMiniFigAiNodeWander::Process(float, MechKrawlie&)
CalcNextNodeWeighting(MechKrawliePlayArea&, cAINode const&, cAINode const&, MechKrawlie&)
ChooseNextAiNode(MechKrawliePlayArea&, MechKrawlie&, cAINode*&, unsigned short&)
MechKrawlieContextMiniFigAiNodeWander::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie&)
MechKrawlieContextMiniFigAiNodeWander::~MechKrawlieContextMiniFigAiNodeWander()
MechKrawlieContextMiniFigAiNodeWander::GetSize() const
MechKrawlieContextMiniFigAiNodeWander::GetContextId()
MechKrawlieSimpleHookOverrideAnim::GetHashedKey()
MechKrawlieContextMiniFigRandomWander::MechKrawlieContextMiniFigRandomWander(MechKrawlie&)
MechKrawlieContextMiniFigRandomWander::GetAnim(MechKrawlie&)
MechKrawlieContextMiniFigRandomWander::OnAdded(MechKrawlie&)
MechKrawlieContextMiniFigRandomWander::OnRemoved(MechKrawlie&)
MechKrawlieContextMiniFigRandomWander::Process(float, MechKrawlie&)
MechKrawlieContextMiniFigRandomWander::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie&)
MechKrawlieContextMiniFigRandomWanderTurnAround::MechKrawlieContextMiniFigRandomWanderTurnAround(MechKrawlie&)
MechKrawlieContextMiniFigRandomWanderTurnAround::GetAnim(MechKrawlie&)
MechKrawlieContextMiniFigRandomWanderTurnAround::OnAdded(MechKrawlie&)
MechKrawlieContextMiniFigRandomWanderTurnAround::OnRemoved(MechKrawlie&)
MechKrawlieContextMiniFigRandomWanderTurnAround::Process(float, MechKrawlie&)
MechKrawlieContextMiniFigRandomWander::~MechKrawlieContextMiniFigRandomWander()
MechKrawlieContextMiniFigRandomWander::GetSize() const
MechKrawlieContextMiniFigRandomWander::GetContextId()
MechKrawlieContextMiniFigRandomWanderTurnAround::~MechKrawlieContextMiniFigRandomWanderTurnAround()
MechKrawlieContextMiniFigRandomWanderTurnAround::GetSize() const
MechKrawlieContextMiniFigRandomWanderTurnAround::GetContextId()
MechKrawlieSimpleHookOverrideTargetPos::GetHashedKey()
MechKrawliePlayAnimContext::MechKrawliePlayAnimContext(MechKrawlie&)
MechKrawliePlayAnimContext::~MechKrawliePlayAnimContext()
MechKrawliePlayAnimContext::~MechKrawliePlayAnimContext()
MechKrawliePlayAnimContext::OnAdded(MechKrawlie&)
MechKrawliePlayAnimContext::OnRemoved(MechKrawlie&)
MechKrawliePlayAnimContext::Process(float, MechKrawlie&)
MechKrawliePlayAnimContext::GetSize() const
MechKrawliePlayAnimContext::GetContextId()
MechKrawlieMiniFigContextDeath::MechKrawlieMiniFigContextDeath(MechKrawlie&)
MechKrawlieMiniFigContextDeath::~MechKrawlieMiniFigContextDeath()
MechKrawlieMiniFigContextDeath::~MechKrawlieMiniFigContextDeath()
MechKrawlieMiniFigContextDeath::Process(float, MechKrawlie&)
MechKrawlieMiniFigContextDeath::GetSize() const
MechKrawlieMiniFigContextDeath::GetContextId()
MechKrawlieMiniFigContextTakeHit::MechKrawlieMiniFigContextTakeHit(MechKrawlie&)
MechKrawlieMiniFigContextTakeHit::~MechKrawlieMiniFigContextTakeHit()
MechKrawlieMiniFigContextTakeHit::~MechKrawlieMiniFigContextTakeHit()
MechKrawlieMiniFigContextTakeHit::Process(float, MechKrawlie&)
MechKrawlieMiniFigContextTakeHit::GetSize() const
MechKrawlieMiniFigContextTakeHit::GetContextId()
MechKrawlieMiniFigContextThrowItem::MechKrawlieMiniFigContextThrowItem(MechKrawlie&)
MechKrawlieMiniFigContextThrowItem::Process(float, MechKrawlie&)
MechKrawlieMiniFigContextThrowItem::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie&)
MechKrawlieMiniFigContextThrowItem::~MechKrawlieMiniFigContextThrowItem()
MechKrawlieMiniFigContextThrowItem::GetSize() const
MechKrawlieMiniFigContextThrowItem::GetContextId()
MechKrawlieMiniFigContextJump::MechKrawlieMiniFigContextJump(MechKrawlie&)
MechKrawlieMiniFigContextJump::~MechKrawlieMiniFigContextJump()
MechKrawlieMiniFigContextJump::~MechKrawlieMiniFigContextJump()
MechKrawlieMiniFigContextJump::OnAdded(MechKrawlie&)
MechKrawlieMiniFigContextJump::OnRemoved(MechKrawlie&)
MechKrawlieMiniFigContextJump::Process(float, MechKrawlie&)
MechKrawlieMiniFigContextJump::GetSize() const
MechKrawlieMiniFigContextJump::GetContextId()
MechKrawlieMiniFigContextFlatten::MechKrawlieMiniFigContextFlatten(MechKrawlie&)
MechKrawlieMiniFigContextFlatten::CreateRigidBody(MechKrawlie&)
MechKrawlieMiniFigContextFlatten::~MechKrawlieMiniFigContextFlatten()
MechKrawlieMiniFigContextFlatten::~MechKrawlieMiniFigContextFlatten()
MechKrawlieMiniFigContextFlatten::OnRemoved(MechKrawlie&)
MechKrawlieMiniFigContextFlatten::DestroyRigidBody(MechKrawlie&)
MechKrawlieMiniFigContextFlatten::Process(float, MechKrawlie&)
MechKrawlieMiniFigContextFlatten::GetSize() const
MechKrawlieMiniFigContextFlatten::GetContextId()
MechKrawlieMiniFigContextGotoTarget::MechKrawlieMiniFigContextGotoTarget(MechKrawlie&)
MechKrawlieMiniFigContextGotoTarget::~MechKrawlieMiniFigContextGotoTarget()
MechKrawlieMiniFigContextGotoTarget::~MechKrawlieMiniFigContextGotoTarget()
MechKrawlieMiniFigContextGotoTarget::OnAdded(MechKrawlie&)
MechKrawlieMiniFigContextGotoTarget::OnRemoved(MechKrawlie&)
MechKrawlieMiniFigContextGotoTarget::Process(float, MechKrawlie&)
MechKrawlieMiniFigContextGotoTarget::GetSize() const
MechKrawlieMiniFigContextGotoTarget::GetContextId()
MechKrawlieControllerAnimals::MechKrawlieControllerAnimals()
MechKrawlieControllerAnimals::~MechKrawlieControllerAnimals()
non-virtual thunk to MechKrawlieControllerAnimals::~MechKrawlieControllerAnimals()
MechKrawlieControllerAnimals::~MechKrawlieControllerAnimals()
non-virtual thunk to MechKrawlieControllerAnimals::~MechKrawlieControllerAnimals()
MechKrawlieControllerAnimals::GetInteractFilterMask()
MechKrawlieControllerAnimals::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
MechKrawlieControllerAnimals::DetermineAnim(MechKrawlie&, MechKrawlieControllerAnimalsKrawlieData&)
MechKrawlieControllerAnimals::StateRunAround(MechKrawlie&, MechKrawlieControllerAnimalsKrawlieData&)
MechKrawlieControllerAnimals::StateGoHome(MechKrawlie&, MechKrawlieControllerAnimalsKrawlieData&)
MechKrawlieControllerAnimals::StateChill(MechKrawlie&, MechKrawlieControllerAnimalsKrawlieData&)
MechKrawlieControllerAnimals::StateRunOff(MechKrawlie&, MechKrawlieControllerAnimalsKrawlieData&, short)
DynamicArrayBase<MechKrawlieControllerAnimals::SafePosition, true>::PushBack(MechKrawlieControllerAnimals::SafePosition&)
MechKrawlieControllerAnimals::Process(float)
MechKrawlieControllerAnimals::ParseParamItem(cParseContextItem&)
ScriptError(cParseContextItem const&, char const*, ...)
MechKrawlieControllerAnimals::DetermineHomePosition(MechKrawlieControllerAnimalsKrawlieData&, VuVec&)
MechKrawlieController<MechKrawlieControllerAnimalsKrawlieData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<MechKrawlieControllerAnimalsKrawlieData>::OnKrawlieDestroyed(MechKrawlie*)
MechKrawlieControllerBirds::MechKrawlieControllerBirds()
MechKrawlieControllerBirds::~MechKrawlieControllerBirds()
non-virtual thunk to MechKrawlieControllerBirds::~MechKrawlieControllerBirds()
MechKrawlieControllerBirds::~MechKrawlieControllerBirds()
non-virtual thunk to MechKrawlieControllerBirds::~MechKrawlieControllerBirds()
MechKrawlieControllerBirds::GetInteractFilterMask()
MechKrawlieControllerBirds::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
MechKrawlieControllerBirds::DetermineAnim(MechKrawlieControllerBirdsKrawlieData&)
MechKrawlieControllerBirds::StateFlyAround(MechKrawlie&, MechKrawlieControllerBirdsKrawlieData&)
MechKrawlieControllerBirds::StateFlyHome(MechKrawlie&, MechKrawlieControllerBirdsKrawlieData&)
MechKrawlieControllerBirds::StateFlyDown(MechKrawlie&, MechKrawlieControllerBirdsKrawlieData&)
MechKrawlieControllerBirds::StateFlyUp(MechKrawlie&, MechKrawlieControllerBirdsKrawlieData&, short)
MechKrawlieControllerBirds::StateChill(MechKrawlie&, MechKrawlieControllerBirdsKrawlieData&)
DynamicArrayBase<MechKrawlieControllerBirds::SafePosition, true>::PushBack(MechKrawlieControllerBirds::SafePosition&)
MechKrawlieControllerBirds::Process(float)
MechKrawlieControllerBirds::ParseParamItem(cParseContextItem&)
MechKrawlieControllerBirds::DetermineHomePosition(MechKrawlieControllerBirdsKrawlieData&, VuVec&)
MechKrawlieControllerBirds::StateTurnAround(MechKrawlie&, MechKrawlieControllerBirdsKrawlieData&, short)
MechKrawlieController<MechKrawlieControllerBirdsKrawlieData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<MechKrawlieControllerBirdsKrawlieData>::OnKrawlieDestroyed(MechKrawlie*)
MechKrawlieControllerFish::MechKrawlieControllerFish()
MechKrawlieControllerFish::~MechKrawlieControllerFish()
non-virtual thunk to MechKrawlieControllerFish::~MechKrawlieControllerFish()
MechKrawlieControllerFish::~MechKrawlieControllerFish()
non-virtual thunk to MechKrawlieControllerFish::~MechKrawlieControllerFish()
MechKrawlieControllerFish::GetInteractFilterMask()
MechKrawlieControllerFish::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
MechKrawlieControllerFish::Flee(MechKrawlie&, VuVec const&)
MechKrawlieControllerFish::DetermineContext(MechKrawlie&)
MechKrawlieController<MechKrawlieControllerFishData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<MechKrawlieControllerFishData>::OnKrawlieDestroyed(MechKrawlie*)
MechKrawlieGangerData::~MechKrawlieGangerData()
MechKrawlieGangerData::KillAllGangers()
MechGangerControllerCharData::MechGangerControllerCharData(MechCharacter&, MechKrawlie&, unsigned char)
MechGangerControllerCharData::SetNewGangerArea(MechKrawlie&, unsigned char, unsigned char)
MechGangerControllerCharData::~MechGangerControllerCharData()
MechGangerControllerCharData::RelocateKrawlie(MechKrawlie&)
MechKrawlieContextRequest_Ganger(MechCharacter&)
void KrawlieContextConstructor<MechKrawlieContextGanger>(MechKrawlie&)
MechKrawlieGangerController::FindGangerCharData(MechKrawlieGangerData&, unsigned char)
MechKrawlieGangerController::FindCreateGangerPack(MechKrawliePlayArea&)
MechKrawlieGangerController::FindCreateGangerCharData(MechKrawliePlayArea&, MechCharacter&, MechKrawlieGangerData&)
MechKrawlieGangerController::RemoveGangerCharData(MechKrawlieGangerData&, unsigned char)
MechKrawlieGangerController::MechKrawlieGangerController()
MechKrawlieGangerController::~MechKrawlieGangerController()
non-virtual thunk to MechKrawlieGangerController::~MechKrawlieGangerController()
MechKrawlieGangerController::~MechKrawlieGangerController()
non-virtual thunk to MechKrawlieGangerController::~MechKrawlieGangerController()
MechKrawlieGangerController::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
MechKrawlieContextGanger::MechKrawlieContextGanger(MechKrawlie&)
MechKrawlieContextGanger::~MechKrawlieContextGanger()
MechKrawlieContextGanger::~MechKrawlieContextGanger()
MechKrawlieContextGanger::OnAdded(MechKrawlie&)
MechKrawlieContextGanger::OnRemoved(MechKrawlie&)
MechKrawlieContextGanger::Relocated(MechKrawlie&, MechKrawlie&)
MechKrawlieContextGanger::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie&)
MechKrawlieContextGanger::Process(float, MechKrawlie&)
MechKrawlieController<MechGangerControllerKrawlieData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<MechGangerControllerKrawlieData>::OnKrawlieDestroyed(MechKrawlie*)
MechKrawlieContextGanger::GetSize() const
MechKrawlieContextGanger::GetContextId()
MechKrawlieSimpleHookGangerLinkRemove::GetHashedKey()
MechKrawlieSimpleHookGangerInit::GetHashedKey()
MechKrawlieRidingController::MechKrawlieRidingController()
MechKrawlieRidingController::~MechKrawlieRidingController()
non-virtual thunk to MechKrawlieRidingController::~MechKrawlieRidingController()
MechKrawlieRidingController::~MechKrawlieRidingController()
non-virtual thunk to MechKrawlieRidingController::~MechKrawlieRidingController()
MechKrawlieRidingController::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
MechKrawlieRidingController::OverrideRenderMtx(MechKrawlie&, VuMtx&)
MechKrawlieRidingController::OverrideRender(MechKrawlie&, MechKrawlieRenderInfo const&, bool&)
MechKrawlieRidingController::CreateKrawlieRider(MechKrawliePlayArea&, MechObjectInterface&, unsigned int const*)
MechKrawlieRidingController::FindCreateRidingPack(MechKrawliePlayArea&)
MechKrawlieRidingController::DetermineKrawlieType(MechObjectInterface&, VehicleDefSeat::SEATTYPES)
MechKrawlieRidingController::CreateRideData(MechKrawlie&, MechObjectInterface&, VehicleDefSeat::SEATTYPES, unsigned int)
MechKrawlieRidingController::CreateKrawliePassenger(MechKrawliePlayArea&, MechObjectInterface&, VehicleDefSeat::SEATTYPES)
MechKrawlieRidingController::AddRidingData(MechRidingData&)
MechKrawlieRidingController::RemoveRidingData(MechRidingData&)
MechKrawlieRidingController::DestroyRidingData(MechKrawlie&)
MechKrawlieRidingContext::MechKrawlieRidingContext(MechKrawlie&)
MechKrawlieRidingContext::~MechKrawlieRidingContext()
MechKrawlieRidingContext::~MechKrawlieRidingContext()
MechKrawlieRidingContext::OnAdded(MechKrawlie&)
MechKrawlieRidingContext::OnRemoved(MechKrawlie&)
MechKrawlieRidingContext::Process(float, MechKrawlie&)
MechKrawlieRidingController::GetRidingData(MechKrawlie const&) const
MechKrawlieController<MechRidingControllerKrawlieData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<MechRidingControllerKrawlieData>::OnKrawlieDestroyed(MechKrawlie*)
MechKrawlieRidingContext::GetSize() const
MechKrawlieRidingContext::GetContextId()
void KrawlieContextConstructor<MechKrawlieRidingContext>(MechKrawlie&)
MechRidingDataVehicleKrawlie::MechRidingDataVehicleKrawlie(MechKrawlie&, MechVehicle&, VehicleDefSeat::SEATTYPES, unsigned int)
MechRidingDataVehicleKrawlie::DoInitwhenCurrent()
MechRidingDataVehicleKrawlie::MainProcess()
MechRidingDataVehicleKrawlie::ProcessState()
MechRidingDataVehicleKrawlie::GetRiderRenderMtx(VuMtx&)
MechRidingDataVehicleKrawlie::GetVehicle()
MechRidingDataVehicleKrawlie::InitiateDismount(DismountInfo const*)
MechRidingDataVehicleKrawlie::GetMechVehicle() const
MechRidingDataVehicleKrawlie::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MechRidingDataVehicleKrawlie::OnHook(unsigned char, HookArgs*)
MechRidingDataVehicleKrawlie::OnAdded()
MechRidingDataVehicleKrawlie::OnRemoved()
MechRidingDataVehicleKrawlie::~MechRidingDataVehicleKrawlie()
MechRidingDataVehicleKrawlie::IsMounted(bool)
non-virtual thunk to MechRidingDataVehicleKrawlie::~MechRidingDataVehicleKrawlie()
non-virtual thunk to MechRidingDataVehicleKrawlie::~MechRidingDataVehicleKrawlie()
MechKrawlieStationaryController::MechKrawlieStationaryController()
MechKrawlieStationaryController::MechKrawlieStationaryController(HashedKey&)
MechKrawlieStationaryController::~MechKrawlieStationaryController()
non-virtual thunk to MechKrawlieStationaryController::~MechKrawlieStationaryController()
MechKrawlieStationaryController::~MechKrawlieStationaryController()
non-virtual thunk to MechKrawlieStationaryController::~MechKrawlieStationaryController()
MechKrawlieStationaryController::ParseParamItem(cParseContextItem&)
MechKrawlieStationaryController::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
MechKrawlieStationaryController::SetupNextAnimation(MechKrawlie*, bool)
MechKrawlieStationaryController::ChooseAnimation(MechKrawlie*)
MechKrawlieStationaryController::NormaliseAnimWeights()
MechKrawlieStationaryController::GetInteractFilterMask()
MechKrawlieWanderController::MechKrawlieWanderController()
MechKrawlieWanderController::~MechKrawlieWanderController()
non-virtual thunk to MechKrawlieWanderController::~MechKrawlieWanderController()
MechKrawlieWanderController::~MechKrawlieWanderController()
non-virtual thunk to MechKrawlieWanderController::~MechKrawlieWanderController()
MechKrawlieWanderController::GetInteractFilterMask()
MechKrawlieWanderController::SimpleHook(MechKrawlieSimpleHook&, MechKrawlie*)
MechKrawlieWanderController::ParseParamItem(cParseContextItem&)
MechKrawlieController<MechKrawlieWanderControllerData>::OnKrawlieCreated(MechKrawlie*)
MechKrawlieController<MechKrawlieWanderControllerData>::OnKrawlieDestroyed(MechKrawlie*)
MechKrawlieAlphaBlendAddon::MechKrawlieAlphaBlendAddon()
MechKrawlieAlphaBlendAddon::~MechKrawlieAlphaBlendAddon()
MechKrawlieAlphaBlendAddon::~MechKrawlieAlphaBlendAddon()
MechKrawlieAlphaBlendAddon::OnAdded(MechKrawlie&)
MechKrawlieAlphaBlendAddon::OverrideRender(MechKrawlie&, MechKrawlieRenderInfo const&, bool&)
MechKrawlieAddon::Process(MechKrawlie&, float)
MechKrawlieAttachToAddon::MechKrawlieAttachToAddon(PlaceableBase const&)
MechKrawlieAttachToAddon::~MechKrawlieAttachToAddon()
MechKrawlieAttachToAddon::~MechKrawlieAttachToAddon()
MechKrawlieAttachToAddon::OnAdded(MechKrawlie&)
MechKrawlieAttachToAddon::OnRemoved(MechKrawlie&)
MechKrawlieAttachToAddon::Process(MechKrawlie&, float)
MechKrawlieAttachToAddon::OverrideRenderMtx(MechKrawlie&, VuMtx&)
MechKrawlieAvoidanceAddon::MechKrawlieAvoidanceAddon()
MechKrawlieAvoidanceAddon::~MechKrawlieAvoidanceAddon()
MechKrawlieAvoidanceAddon::~MechKrawlieAvoidanceAddon()
MechKrawlieAvoidanceAddon::OnAdded(MechKrawlie&)
MechKrawlieAvoidanceAddon::Process(MechKrawlie&, float)
MechKrawlieAvoidanceAddon::GatherWalls(MechKrawlie&)
MechKrawlieAvoidanceAddon::GatherNeighbours(MechKrawlie&)
MechKrawlieAvoidanceAddon::CalcVelocityPenalty(MechKrawlie&, float, float, float&, float, float, float, bool)
MechKrawlieAvoidanceAddon::SimpleHook(MechKrawlie&, MechKrawlieSimpleHook&)
MechKrawlieAvoidanceAddon::FillOutNeighbour(MechKrawlieAvoidanceAddon::AvoidanceNeighbour&, float, float, VuVec const&, VuVec const&, VuVec const&)
MechKrawlieAvoidanceAddon::CalcNeighbourMinCollisionTime(float, float, MechKrawlie&, bool&, float&)
MechKrawlieAvoidanceAddon::CalcWallsMinCollisionTime(float, float, MechKrawlie&, bool&, float, float&)
MechKrawlieAvoidanceAddon::RayDiskTimeToCollision(float, float, float, float, float, float&, bool)
MechKrawlieAvoidanceAddon::RayLineTimeToCollision(float, float, float, float, float, float, float, float, float&)
MechKrawlieKrawlieRiderAddon::MechKrawlieKrawlieRiderAddon()
MechKrawlieKrawlieRiderAddon::MechKrawlieKrawlieRiderAddon(MechKrawlieTypeDefinitions::KrawlieType*, unsigned int)
MechKrawlieKrawlieRiderAddon::MechKrawlieKrawlieRiderAddon(HashedKey&)
MechKrawlieKrawlieRiderAddon::MechKrawlieKrawlieRiderAddon(HashedKey&, MechKrawlieTypeDefinitions::KrawlieType*, unsigned int)
MechKrawlieKrawlieRiderAddon::~MechKrawlieKrawlieRiderAddon()
MechKrawlieKrawlieRiderAddon::~MechKrawlieKrawlieRiderAddon()
MechKrawlieKrawlieRiderAddon::OnAdded(MechKrawlie&)
MechKrawlieKrawlieRiderAddon::OnRemoved(MechKrawlie&)
MechKrawlieKrawlieRiderAddon::Process(MechKrawlie&, float)
MechKrawlieKrawlieRiderAddon::OverrideRender(MechKrawlie&, MechKrawlieRenderInfo const&, bool&)
MechKrawlieKrawlieRiderAddon::ParseParamItem(cParseContextItem&)
MechKrawlieParticleEmitterAddon::MechKrawlieParticleEmitterAddon(ParticleEmitterType*, unsigned char, VuMtx const&)
MechKrawlieParticleEmitterAddon::MechKrawlieParticleEmitterAddon(CharAnimTriggerPTLData const&, unsigned char)
MechKrawlieParticleEmitterAddon::~MechKrawlieParticleEmitterAddon()
MechKrawlieParticleEmitterAddon::~MechKrawlieParticleEmitterAddon()
MechKrawlieParticleEmitterAddon::OnAdded(MechKrawlie&)
MechKrawlieParticleEmitterAddon::CalculateEffectMatrix(MechKrawlie&, VuMtx&)
MechKrawlieParticleEmitterAddon::OnRemoved(MechKrawlie&)
MechKrawlieParticleEmitterAddon::Process(MechKrawlie&, float)
MechKrawlieSFXAddon::MechKrawlieSFXAddon(short)
MechKrawlieSFXAddon::~MechKrawlieSFXAddon()
MechKrawlieSFXAddon::~MechKrawlieSFXAddon()
MechKrawlieSFXAddon::OnAdded(MechKrawlie&)
MechKrawlieSFXAddon::OnRemoved(MechKrawlie&)
MechKrawlieSFXAddon::Process(MechKrawlie&, float)
MechKrawlieVFXAddon::MechKrawlieVFXAddon(long, unsigned char, VuMtx const&)
MechKrawlieVFXAddon::MechKrawlieVFXAddon(CharAnimTriggerVFXData const&, unsigned char)
MechKrawlieVFXAddon::~MechKrawlieVFXAddon()
MechKrawlieVFXAddon::~MechKrawlieVFXAddon()
MechKrawlieVFXAddon::OnAdded(MechKrawlie&)
MechKrawlieVFXAddon::CalculateVFXMatrix(MechKrawlie&, VuMtx&)
MechKrawlieVFXAddon::OnRemoved(MechKrawlie&)
MechKrawlieVFXAddon::Process(MechKrawlie&, float)
MechKrawlieUtilChooseRandomTargetPoint::Request(MechKrawlie&)
MechVehicles::GetSteeringOverride(MechVehicle&)
MechVehicles::CreateEnterVehicleTask(MechRidingDataVehicle&, MechObjectInterface&, VehicleDefSeat::SEATTYPES)
MechVehicles::CreateExitVehicleTask(MechRidingDataVehicle&, DismountInfo*)
MechVehicles::CreateRideData(MechCharacter&, ApiVehicle&, VehicleDefSeat::SEATTYPES, unsigned int, cVehicleRidingBaseTask*)
MechVehicles::CanOccupySeat(MechCharacter&, ApiVehicle&, VehicleDefSeat::SEATTYPES, unsigned int, cVehicleRidingBaseTask*)
MechVehicles::GetSeatOccupant(ApiVehicle&, VehicleDefSeat::SEATTYPES)
MechVehicles::AttachRiderToVehicleSeat(MechRidingDataVehicle&, MechVehicle&, VehicleDefSeat::SEATTYPES)
MechVehicles::RemoveRiderFromSeat(MechRidingData&)
MechVehicles::MechVehicles()
MechVehicles::ApiVehicleGeneratedCallback(ApiVehicle&)
MechVehicles::ApiVehicleDestroyedCallback(ApiVehicle&)
MechVehicles::~MechVehicles()
MechVehicles::~MechVehicles()
MechVehicles::Init()
MechVehicles::ShutDown()
MechVehicles::ProcessPreRender()
MechVehicles::ProcessKillRequests(float)
MechVehicles::KillRequest::Process(float)
CSListHeader<MechVehicles::KillRequest>::Delete(MechVehicles::KillRequest*)
CSListHeader<MechVehicles::RespawnRequest>::Delete(MechVehicles::RespawnRequest*)
MechVehicles::KillRequest::Initialise()
MechVehicles::RequestRespawn(MechVehicle&)
MechVehicles::ProcessRespawnRequests()
MechVehicles::RespawnRequest::Process()
MechVehicles::RequestKillAllInLevel(LevelContainer const&)
MechVehicles::RequestKill(MechVehicle&, MechRequestKillInfo const&)
MechVehicles::EventNotify(Event&, NuEventData&)
MechVehicles::RestorePartyVehicles()
MechVehicles::PartyVehicleInfo::CreateVehicleForPartyMember()
MechVehicles::StorePartyVehicles(int)
CSListHeader<MechVehicles::PartyVehicleInfo>::Clear()
CSListHeader<MechVehicles::PartyVehicleInfo>::Delete(MechVehicles::PartyVehicleInfo*)
MechVehicles::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechVehicles::ApiVehicleTest_Reposition(MechCharacter*, MechVehicle&)
MechVehicles::ApiVehicleTest_UpdateChaseCamera(MechVehicle&, int)
MechVehicles::OnInitPostConfig()
MechVehicles::ApiVehicleTest_ControlVehicle(MechCharacter*, MechVehicle&)
MechVehicles::CreateMechVehicle(ApiVehicle&)
MechVehicles::CreateAddOns(MechVehicle&)
MechVehicles::DestroyAddOns(MechVehicle&, AddOnList::eDestroyEvent)
MechVehicles::ParseCommandLine(int, char**)
MechVehiclesIterator::Initialise(LevelContainer const&)
MechVehiclesIterator::Next()
MechVehiclesIteratorRanged::Next(float*)
MechVehicles::ApplyDefaultOrderHook(ApiVehicle&, bool, bool, bool)
MechVehicles::GetRespawnMtxOverride(MechVehicle const&, VuMtx&)
MechObjectKilledEventData::~MechObjectKilledEventData()
MechObjectKilledEventData::IsDerivedFrom(HashedKey const&)
MechObjectKilledEventData::GetInstanceTypeHash()
OverrideVehicleDeletionEventData::~OverrideVehicleDeletionEventData()
VehicleEventData::~VehicleEventData()
PartyVehicleRestoredEventData::~PartyVehicleRestoredEventData()
MechRidingDataVehicle::MechRidingDataVehicle(MechObjectInterface&, ApiVehicle&, VehicleDefSeat::SEATTYPES, unsigned int, cVehicleRidingBaseTask*, HashedKey&)
MechRidingDataVehicle::Init()
MechRidingDataVehicle::MechRidingDataVehicle(MechObjectInterface&, MechObjectInterface&, VehicleDefSeat::SEATTYPES, unsigned int, cVehicleRidingBaseTask*, MechRidingDataCharacterParams*, HashedKey*)
MechRidingDataVehicle::DoInitwhenCurrent()
MechRidingDataVehicle::SetState(MechRidingDataVehicle::STATE)
MechRidingDataVehicle::BackUpVehicleSpecificDamageLayerFlagsOnCharacter(MechCharacter&)
MechRidingDataVehicle::SetVehicleSpecificDamageLayerFlagsOnCharacter(MechCharacter&)
MechRidingDataVehicle::RestoreVehicleSpecificDamageLayerFlagsOnCharacter(MechCharacter&)
MechRidingDataVehicle::~MechRidingDataVehicle()
non-virtual thunk to MechRidingDataVehicle::~MechRidingDataVehicle()
MechRidingDataVehicle::~MechRidingDataVehicle()
non-virtual thunk to MechRidingDataVehicle::~MechRidingDataVehicle()
MechRidingDataVehicle::OnRemoved()
MechRidingDataVehicle::EnableCollision()
MechRidingDataVehicle::OnAdded()
MechRidingDataVehicle::NotifyRiddenObjectBeingDestroyed(MechObjectInterface&)
MechRidingDataVehicle::OnHook(unsigned char, HookArgs*)
MechRidingDataVehicle::MainProcess()
MechRidingDataVehicle::UpdateRiddenObjectAnimSpeedMuliplier()
MechRidingDataVehicle::FixTransformToRidable()
non-virtual thunk to MechRidingDataVehicle::OnHook(unsigned char, HookArgs*)
MechRidingDataVehicle::ProcessState()
MechRidingDataVehicle::ProcessCollisionState()
MechRidingDataVehicle::AboutToEnterVehicle()
MechRidingDataVehicle::EnteredVehicle()
MechRidingDataVehicle::FinishedDismounting()
MechRidingDataVehicle::ExitedVehicle()
MechRidingDataVehicle::InitiateEnterVehicleTask(cVehicleRidingBaseTask*)
MechRidingDataVehicle::InitiateExitVehicleTask(cVehicleRidingBaseTask*)
MechRidingDataVehicle::PlaceOnSeat()
MechRidingDataVehicle::SetRiderAnim()
MechRidingDataVehicle::SimpleDismount()
MechRidingDataVehicle::CanAbort()
MechRidingDataVehicle::Abort()
MechRidingDataVehicle::InitiateDismount(DismountInfo const*)
MechRidingDataVehicle::InstantDismount(DismountInfo const*)
MechRidingDataVehicle::ProcessMountedStateForRidableCharacter()
MechRidingDataVehicle::DisableCollision()
MechRidingDataVehicle::EnteredRideObject()
MechRidingDataVehicle::OnDestroyEvent(AddOnList::eDestroyEvent)
MechRidingDataVehicle::ForceRunPlayerAiTasks()
MechRidingDataVehicle::IsMounted(bool)
MechRidingDataVehicle::IsMounting()
MechRidingDataVehicle::IsDismounting()
MechRidingData::RidingEventData::~RidingEventData()
MechVehicle::MechVehicle(ApiVehicle&)
MechVehicle::GetGameObjFlags()
MechVehicle::InitWeaponToFireFlags()
MechVehicle::OnAddToScene()
non-virtual thunk to MechVehicle::OnAddToScene()
MechVehicle::OnRemoveFromScene()
non-virtual thunk to MechVehicle::OnRemoveFromScene()
MechVehicle::OnPreDestroy(ApiVehicle*)
MechVehicle::DispatchEvent(MechEventType const&, MechObjectEventData*)
non-virtual thunk to MechVehicle::OnPreDestroy(ApiVehicle*)
MechVehicle::UpdateWeaponToFireFlags(int)
MechVehicle::VehicleSpecificMounting(MechCharacter*, int)
MechVehicle::VehicleSpecificRiderUpdate(MechCharacter*, int)
MechVehicle::GetRiderDriverAction(MechCharacter*) const
MechVehicle::GetRiderPassengerAction(MechCharacter*) const
MechVehicle::VehicleSpecificUnmount(MechCharacter*, int)
MechVehicle::VehicleSpecificOnRemoved(MechCharacter*, int)
MechVehicle::CreateVehicleSpecificExitTask(MechCharacter*, int, DismountInfo*)
MechVehicle::SetColour(bool, int)
MechVehicle::~MechVehicle()
non-virtual thunk to MechVehicle::~MechVehicle()
MechVehicle::~MechVehicle()
non-virtual thunk to MechVehicle::~MechVehicle()
MechVehicle::GetName()
MechVehicle::GetRiderObj(VehicleDefSeat::SEATTYPES) const
MechVehicle::IsRiddenByPlayer(bool) const
MechVehicle::RequestDebugDraw()
MechVehicle::ResetStuckAmount()
MechVehicle::SetStuckAmount(float)
MechVehicle::GetStuckAmount(bool)
MechVehicle::GetLightingInfo(NUCOLOUR3&, NUCOLOUR3&)
MechVehicle::UpdateLighting()
MechVehicle::OnProcessEarly(ApiVehicle*)
non-virtual thunk to MechVehicle::OnProcessEarly(ApiVehicle*)
MechVehicle::IsTouchingDeathTerrain() const
MechVehicle::OnProcess(ApiVehicle*)
non-virtual thunk to MechVehicle::OnProcess(ApiVehicle*)
MechVehicle::GetBrain() const
MechVehicle::GetVehicleBrain() const
MechVehicle::GetFrom(Entity const*)
MechVehicle::GetFrom(MechCharacter&)
MechVehicle::GetFrom(AddOnOwner const&)
MechVehicle::OnProcessPostDynoEvolve(ApiVehicle*)
MechVehicle::IsGameObjFlagSet(unsigned int) const
MechVehicle::IsSafe()
non-virtual thunk to MechVehicle::OnProcessPostDynoEvolve(ApiVehicle*)
MechVehicle::OnPostCreate(ApiVehicle*)
non-virtual thunk to MechVehicle::OnPostCreate(ApiVehicle*)
MechVehicle::OnImpact(ApiVehicle*, float, VuVec const&, VuVec const&, RigidBody*)
non-virtual thunk to MechVehicle::OnImpact(ApiVehicle*, float, VuVec const&, VuVec const&, RigidBody*)
MechVehicleHealthInfo::OnHitPointsChanged(int)
MechVehicleHealthInfo::UpdateDamageStage()
MechVehicleHealthInfo::CheckDislodgeOrKillRidersAtHealth(int)
MechVehicle::CanDislodgeRiders() const
MechVehicle::RequestKill(MechRequestKillInfo const&)
MechVehicleHealthInfo::MechVehicleHealthInfo(MechVehicle&)
MechVehicleHealthInfo::~MechVehicleHealthInfo()
MechVehicleHealthInfo::~MechVehicleHealthInfo()
MechVehicleHealthInfo::CheckBeenHitTimeOut()
MechVehicleHealthInfo::GetBeenHit(BeenHit::BeenHitType, MechObjectInterface*, BoltTypeID)
MechVehicleHealthInfo::SetBeenHit(BeenHit::BeenHitType, bool, MechObjectInterface*, BoltTypeID)
MechVehicleHealthInfo::GetFlicker() const
MechVehicleHealthInfo::GetHostObject() const
MechVehicleHealthInfo::RestoreHealth()
MechVehicleHealthInfo::MapHitPointsToDamageStage(int) const
MechVehicleHealthInfo::GetDislodgeRidersAtHealth(int) const
MechVehicleHealthInfo::HasActiveInvulnerableTimer() const
MechVehicleHealthInfo::SetInvulnerableTimerAllPartyRiders() const
MechVehicle::GetRiderInterface(VehicleDefSeat::SEATTYPES, bool) const
MechVehicle::AddToRidersList(MechRidingData&)
MechVehicle::DislodgeAllRiders()
MechVehicle::IsValidTarget(BoltType*, TARGET_INFO&)
MechVehicle::GetWeaponShootMtx(VuMtx&, int)
MechVehicle::ProcessInputForTargetting(MechCharacter&)
MechVehicle::RequestFireWeapon(MechCharacter&, MechObjectInterface*, MechVehicle::FireWeaponMode, VuVec const*)
MechVehicle::GetWeaponShootLocatorId(int) const
MechVehicle::GetSpecialWeaponShootLocatorId(int) const
MechVehicle::GetSpecialWeaponShootMtx(VuMtx&, int)
MechVehicle::IsWeaponReady(VuMtx&, BoltTypeID*)
MechVehicle::ProcessInputForShooting(MechCharacter&, bool&)
MechVehicle::SetWeaponIKTargetPosition(VuVec const&)
MechVehicle::IsAttached() const
MechVehicle::IsAttachBlockingTag() const
MechVehicle::Teleport(VuMtx const&, unsigned char)
MechVehicle::HandleBoltHit(Bolt*)
MechVehicleCollisionListener::Collision(BodyPair*, Array<ContactPoint>&)
MechVehicle::SetVehicleAnimationContext(int, bool)
MechVehicle::GetVehicleAnimationContext(int)
MechVehicleAnimationContext::CanBeInterrupted() const
MechVehicle::ClearVehicleAnimationContext()
MechVehicle::GetRiderDriverAction() const
MechVehicleAnimationContext::MechVehicleAnimationContext(MechVehicle&, int, bool)
MechVehicleAnimationContext::~MechVehicleAnimationContext()
MechVehicleAnimationContext::GetAnimState() const
MechVehicle::OnDamageStageChanged(unsigned int, unsigned int)
non-virtual thunk to MechVehicle::OnDamageStageChanged(unsigned int, unsigned int)
MechVehicleCollisionListener::~MechVehicleCollisionListener()
MechVehicleHealthInfo::SetHitPoints(int)
MechVehicleHealthInfo::GetHitPoints()
MechVehicleHealthInfo::IsInvulnerable(unsigned int, bool*)
MechVehicleHealthInfo::SetInvulnerable(bool, unsigned int, bool)
MechVehicleHealthInfo::SetMaxHitPoints(int)
MechVehicleHealthInfo::GetMaxHitPoints()
MechEventTypeT<OverrideVehicleDeletionEventData>::GetEventDataTypeHash() const
NuMechPtr<MechVehicle, 8>::ManagedBase::~ManagedBase()
NuMechPtr<MechVehicle, 8>::ManagedBase::~ManagedBase()
MechVehicleInterface::MechVehicleInterface(ApiVehicle&)
MechVehicleInterface::GetObjectEdClass() const
MechVehicleInterface::GetTagToData() const
MechVehicleInterface::SetCurrentPosition(VuVec&) const
MechVehicleInterface::GetCurrentPosition(VuVec&)
MechVehicleInterface::GetPos(VuVec&, int) const
MechVehicleInterface::GetDirection(VuVec&) const
MechVehicleInterface::GetVelocity(VuVec&) const
MechVehicleInterface::GetTargetPos(VuVec&, TARGETING_TYPE, int)
MechVehicleInterface::GetTargetMom(VuVec&, TARGETING_TYPE)
MechVehicleInterface::GetTargetFloorPos(VuVec&, TARGETING_TYPE, int)
MechVehicleInterface::GetMtx(VuMtx&, int)
MechVehicleInterface::SetMtx(VuMtx&, int)
MechVehicleInterface::SetTransformExceptPhysics(VuMtx&, int)
MechVehicleInterface::DrivePhysicsToTransform(VuMtx const&, bool, bool)
MechVehicleInterface::SetDriveToTransform(VuMtx&, int)
MechVehicleInterface::Teleport(VuMtx const&, unsigned char)
MechVehicleInterface::GetRadius() const
MechVehicleInterface::GetDimensions(VuVec&) const
MechVehicleInterface::GetExtents(VuVec&, VuVec&)
MechVehicleInterface::GetRotY()
MechVehicleInterface::SetAlpha(float)
MechVehicleInterface::GetAlpha() const
MechVehicleInterface::GetLocatorMtxWorld(int, VuMtx&) const
MechVehicleInterface::GetLocatorMtxLocal(int, VuMtx&) const
MechVehicleInterface::GetTargetName() const
MechVehicleInterface::GetLevelContainer() const
MechVehicleInterface::GetEntity() const
MechVehicleInterface::GetApiVehicle() const
MechVehicleInterface::GetApiActor()
MechVehicleInterface::GetCharInst() const
MechVehicleInterface::HandleBoltHit(Bolt*)
MechVehicleInterface::GetOpponent() const
MechVehicleInterface::GetRiderObj(VehicleDefSeat::SEATTYPES) const
MechVehicleInterface::GetNextConnectedObject(MechObjectInterface::ConnectionType, MechObjectInterface*) const
MechVehicleInterface::GetHealthInfo()
MechVehicleInterface::SetShootAccuracy(unsigned char) const
MechVehicleInterface::GetShootAccuracy() const
MechVehicleInterface::GetAllegiance() const
MechVehicleInterface::CanBeHit(BeenHit const&) const
MechVehicleInterface::IsSafe() const
MechVehicleInterface::RequestKill(MechRequestKillInfo const&)
MechVehicleInterface::GetAddOns() const
MechVehicleInterface::GetVehicleAIData() const
MechVehicleInterface::GetBrain() const
MechVehicleInterface::PlayScriptAnimation(int, MechScriptAnimationData*)
MechVehicleInterface::StopScriptAnimation()
MechVehicleInterface::IsScriptAnimationPlaying(int)
MechVehicleInterface::GetScriptAnimationTimeRemaining()
MechVehicleInterface::GetScriptAnimationDuration(bool)
MechVehicleInterface::IsCritical(bool) const
MechVehicleInterface::GetIconPos(VuVec&, int)
MechVehicleInterface::SetAttached(bool)
MechVehicleInterface::SetAttachBlockingTag(bool)
MechVehicleInterface::IsAttached() const
MechVehicleInterface::IsAttachBlockingTag() const
MechVehicleInterface::GetGamePad()
MechVehicleInterface::GetMechInput()
MechVehicleInterface::GetTargetCamera()
MechVehicleInterface::IsPlayerControlled()
MechVehicleInterface::GetPartyIndex()
MechVehicleHealthInfo::GetDrawHitPointsInfo(int&, int&, bool&, int&, bool&)
MechVehicleInterface::IsOnScreen()
MechVehicleInterface::IsTargetStillValid()
MechVehicleInterface::LOS_GetPoint(NUVEC&, WORLDINFO*&, TARGETING_TYPE, int) const
MechVehicleInterface::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*)
MechVehicleInterface::GetAbilityInstances(bool) const
MechVehicleInterface::GetEventList(bool) const
MechVehicleInterface::~MechVehicleInterface()
MechVehicleInterface::GetInterfaceType() const
MechObjectInterface::GetTargetRandomPos(VuVec&, TARGETING_TYPE, int)
MechVehicleInterface::IsRideable() const
MechVehicleInterface::GetGameType()
MechVehicleInterface::GetMechVehicle() const
LinearSpline::Clear()
sSteeringAssistData::~sSteeringAssistData()
sSteeringAssistData::LoadUserProfile()
ExactLaneMode(iAILink const*, VuVec const&)
LeftSideMode(iAILink const*, VuVec const&)
StayOnOwnSpline(iAILink const*, VuVec const&, VuVec const&)
BuildLookAheadSpline(SteeringAssistantAddOn*, iAILink const*, VuVec const&, VuVec const&)
sSteeringAssistData::UpdateSteeringAssist(SteeringAssistantAddOn*, MechCharacter*, MechVehicle&)
SteeringAssistantAddOn::NotifyAttachRiderToVehicleSeat(MechRidingDataVehicle&)
SteeringAssistantAddOn::SteeringAssistantAddOn()
SteeringAssistantAddOn::~SteeringAssistantAddOn()
non-virtual thunk to SteeringAssistantAddOn::~SteeringAssistantAddOn()
SteeringAssistantAddOn::~SteeringAssistantAddOn()
non-virtual thunk to SteeringAssistantAddOn::~SteeringAssistantAddOn()
SteeringAssistantAddOn::SetVehicleControls(ApiVehicleController&)
SteeringAssistantAddOn::OnAdded()
SteeringAssistantAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to SteeringAssistantAddOn::OnHook(unsigned char, HookArgs*)
SteeringAssistantAddOn::GetLevelContainer() const
non-virtual thunk to SteeringAssistantAddOn::GetLevelContainer() const
SplineBase<LinearSplineKnot>::~SplineBase()
LinearSpline::~LinearSpline()
LinearSpline::GetLength() const
LinearSpline::AddAtStart(LinearSplineKnot)
LinearSpline::AddAtEnd(LinearSplineKnot)
LinearSpline::PopStart()
LinearSpline::PopEnd()
SplineBase<LinearSplineKnot>::~SplineBase()
SplineBase<LinearSplineKnot>::Clear()
SplineBase<LinearSplineKnot>::AddAtStart(LinearSplineKnot)
SplineBase<LinearSplineKnot>::AddAtEnd(LinearSplineKnot)
SplineBase<LinearSplineKnot>::PopStart()
SplineBase<LinearSplineKnot>::PopEnd()
MechInputSystem::MechInputSystem()
MechInputSystem::OnInitPostConfig()
MechInputSystem::RegisterDefaultButtons()
MechInputSystem::RegisterInputMethod(MechInputMethodBase*)
MechInputSystem::RegisterInputTrigger(MechInputTriggerBase*)
MechInputSystem::UnRegisterInputTrigger(int)
MechInputSystem::GetInputTriggerFromHashedName(HashedKey const&) const
MechInputSystem::ShutDown()
MechInputSystem::EventNotify(Event&, NuEventData&)
MechInputDevice::SetNumMashFails(int)
MechInputDevice::MechInputDevice(MechCharacter&)
MechInputDevice::~MechInputDevice()
MechInputDevice::~MechInputDevice()
MechInputDevice::IsInputTriggered(int, unsigned int, unsigned short)
MechInputDevice::GetInputTriggerHeldTime(int) const
MechInputDevice::ResetInputTrigger(int)
MechInputDevice::GetMethodData(int)
MechInputDevice::GetInputMethodHeldTime(int) const
MechInputDevice::ResetInputMethod(int)
MechInputDevice::BlockInputMethod(int, unsigned short)
MechInputDevice::BlockInputPriority(unsigned short)
MechInputDevice::LockInputMethod(int, bool)
MechInputDevice::UnlockInputMethod(int, bool)
MechInputDevice::ClearInputMethodLocks()
MechInputDevice::SetMashSucceeded()
MechInputDevice::SetMashFailed()
MechInputDevice::GetInputTriggerMashDelay(int)
MechInputDevice::AiPressInputMethod(int)
MechInputDevice::AiHoldDownInputMethod(int, float)
MechInputDevice::AiPressInputTrigger(int)
MechInputDevice::AiHoldDownInputTrigger(int, float)
MechInputDevice::EarlyUpdate(float)
MechInputDevice::LateUpdate(float)
MechInputSystem::~MechInputSystem()
MechSystemBase<MechInputSystem, int>::Suppress(int)
MechSystemBase<MechInputSystem, int>::IsSuppressed(int) const
MechInputTriggerBase::~MechInputTriggerBase()
MechInputTriggerBase::IsTriggered(MechCharacter&, unsigned int, unsigned short)
MechInputTriggerBase::GetInputMethod(MechCharacter&) const
MechInputTriggerBase::GetHeldTime(MechCharacter&) const
MechInputTriggerBase::ResetTrigger(MechCharacter&)
MechInputMethodButton::~MechInputMethodButton()
MechInputMethodButton::CreateInputMethodData()
MechInputMethodBase::~MechInputMethodBase()
MechInputMethodBase::~MechInputMethodBase()
MechInputMethodBase::CreateInputMethodData()
MechInputMethodBase::GetState(MechCharacter&, float)
MechInputMethodSimpleButton::GetState(MechCharacter&, float)
MechInputMethodDataSimpleButton::UpdateMethodState(MechCharacter&, int, MechInputMethodBase&, float)
MechInputMethodDataSimpleButton::RequestButtonState(MechInputDevice&, int, int, unsigned short, unsigned int)
MechInputMethodDataSimpleButton::ResetOwner(bool, bool)
MechInputMethodDataSimpleButton::BlockInput(int, unsigned short)
MechInputMethodDataButton::RequestButtonState(MechInputDevice&, int, int, unsigned short, unsigned int, int, float)
MechInputMethodDataButton::UpdateMethodState(MechCharacter&, int, MechInputMethodBase&, float)
MechInputMethodDataButton::ResetOwner(bool, bool)
MechInputMethodDataButton::BlockInput(int, unsigned short)
MechInputTriggerButton::MechInputTriggerButton(char const*, unsigned short)
MechInputTriggerButton::MechInputTriggerButton(char const*, unsigned short, int, unsigned int, float)
MechInputTriggerButton::RegisterInputTrigger(char const*, unsigned short, int, unsigned int, float)
MechInputTriggerButton::IsTriggered(MechCharacter&, unsigned int, unsigned short)
MechInputTriggerButton::IsPressed(MechInputDevice&, int, unsigned short, unsigned int)
MechInputTriggerButton::IsHeldDown(MechInputDevice&, int, unsigned short, unsigned int, float)
MechInputTriggerButton::IsMashed(MechInputDevice&, int, unsigned short, unsigned int, float)
MechInputTriggerButton::GetHeldTime(MechCharacter&) const
MechInputTriggerButton::ResetTrigger(MechCharacter&)
MechInputMethodDataBase::~MechInputMethodDataBase()
MechInputMethodDataSimpleButton::~MechInputMethodDataSimpleButton()
MechInputMethodDataSimpleButton::GetMethodType()
MechInputMethodDataBase::ResetState()
MechInputMethodDataSimpleButton::HasOwner(int) const
MechInputMethodDataSimpleButton::GetOwner(int) const
MechInputMethodDataSimpleButton::GetOwnerPriority(int) const
MechInputMethodDataBase::CanTap() const
MechInputMethodDataSimpleButton::GetHeldTime() const
MechInputMethodDataSimpleButton::SetHeldTime(float)
MechInputMethodDataBase::GetUnlockWhenContextCleared()
MechInputMethodDataBase::SetUnlockWhenContextCleared(bool)
MechInputMethodSimpleButton::~MechInputMethodSimpleButton()
MechInputMethodSimpleButton::CreateInputMethodData()
MechInputMethodDataButton::~MechInputMethodDataButton()
MechInputMethodDataButton::GetMethodType()
MechInputMethodDataButton::HasOwner(int) const
MechInputMethodDataButton::GetOwner(int) const
MechInputMethodDataButton::GetOwnerPriority(int) const
MechInputMethodDataButton::CanTap() const
MechInputMethodDataButton::GetHeldTime() const
MechInputMethodDataButton::SetHeldTime(float)
MechInputTriggerButton::~MechInputTriggerButton()
MechSystems::SetLevelContainerManager(LevelContainerManager*)
MechSystems::ParseCommandLine(int, char**)
MechSystems::RegisterSystem(MechSystem&)
CMList<MechSystem*>::Append(MechSystem* const&, CMList<MechSystem*>::ListLink*)
MechSystems::InitSystems()
void InitialiseSplineHelpers<CameraRailSplineHelper, CameraRailSplineKnotHelper>(CameraRailSplineKnotHelper*&)
void InitialiseSplineHelpers<CameraSockSplineHelper, CameraSockSplineKnotHelper>(CameraSockSplineKnotHelper*&)
void InitialiseSplineHelpers<PickupSplineHelper, PickupSplineKnotHelper>(PickupSplineKnotHelper*&)
void InitialiseSplineHelpers<MechGrindRailSplineHelper, MechGrindRailSplineKnotHelper>(MechGrindRailSplineKnotHelper*&)
void InitialiseSplineHelpers<KrawlieAreaSplineHelper, KnotHelperT<KrawlieAreaKnot> >(KnotHelperT<KrawlieAreaKnot>*&)
MechSystems::InitSystemsPostConfig()
MechSystems::DestroySystems()
MechSystems::AddManagersForLevel(MechLevelContainer&)
MechSystems::RemoveManagersForLevel(MechLevelContainer&)
MechSystems::ParseGameConfigEntry(nufpar_s*)
MechSystems::ParseLevelConfigEntry(nufpar_s*)
MechSystems::MenuTwizzleValue(MENU*, int&, int)
MechSystems::MenuToggleValue(MENU*, bool&)
MechSystems::MenuToggleValue(MENU*, int&)
MechSystems::MenuSlideValue(MENU*, float&, float, float, float, bool)
MechSystems::MenuSlideValue(MENU*, int&, int, int, int, bool)
CameraRailSplineKnotHelper::~CameraRailSplineKnotHelper()
KnotHelperT<CameraRailSplineKnot>::NewKnot()
KnotHelperT<CameraRailSplineKnot>::DeleteKnot(SplineKnot*)
non-virtual thunk to CameraRailSplineKnotHelper::~CameraRailSplineKnotHelper()
non-virtual thunk to CameraRailSplineKnotHelper::~CameraRailSplineKnotHelper()
CameraSockSplineKnotHelper::~CameraSockSplineKnotHelper()
KnotHelperT<CameraSockSplineKnot>::NewKnot()
KnotHelperT<CameraSockSplineKnot>::DeleteKnot(SplineKnot*)
non-virtual thunk to CameraSockSplineKnotHelper::~CameraSockSplineKnotHelper()
non-virtual thunk to CameraSockSplineKnotHelper::~CameraSockSplineKnotHelper()
PickupSplineKnotHelper::~PickupSplineKnotHelper()
KnotHelperT<PickupSplineKnot>::NewKnot()
KnotHelperT<PickupSplineKnot>::DeleteKnot(SplineKnot*)
non-virtual thunk to PickupSplineKnotHelper::~PickupSplineKnotHelper()
non-virtual thunk to PickupSplineKnotHelper::~PickupSplineKnotHelper()
MechGrindRailSplineKnotHelper::~MechGrindRailSplineKnotHelper()
KnotHelperT<MechGrindRailSplineKnot>::NewKnot()
KnotHelperT<MechGrindRailSplineKnot>::DeleteKnot(SplineKnot*)
non-virtual thunk to MechGrindRailSplineKnotHelper::~MechGrindRailSplineKnotHelper()
non-virtual thunk to MechGrindRailSplineKnotHelper::~MechGrindRailSplineKnotHelper()
KnotHelperT<KrawlieAreaKnot>::~KnotHelperT()
KnotHelperT<KrawlieAreaKnot>::NewKnot()
KnotHelperT<KrawlieAreaKnot>::DeleteKnot(SplineKnot*)
non-virtual thunk to KnotHelperT<KrawlieAreaKnot>::~KnotHelperT()
non-virtual thunk to KnotHelperT<KrawlieAreaKnot>::~KnotHelperT()
MechHelper::FindManager(void*) const
MechHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechHelper::GetNextBaseObject(ClassObject const&) const
MechHelper::~MechHelper()
MechSystem::EventNotify(Event&, NuEventData&)
MechSystem::ShouldAddManagersForLevel(MechLevelContainer&)
MechSystem::~MechSystem()
CreateCameraRailSplineManager(LevelContainer&)
FollowPacket::FollowPacket(MechCharacter&, CameraRailSpline&)
FollowPacket::~FollowPacket()
FollowPacket::~FollowPacket()
FollowPacket::GetLevelContainer() const
FollowPacket::OnHook(unsigned char, HookArgs*)
FollowPacket::ClampToSpline(bool)
CameraRailSpline::CameraRailSpline(EdRegContext&, void*, int)
CameraRailSpline::~CameraRailSpline()
non-virtual thunk to CameraRailSpline::~CameraRailSpline()
CameraRailSpline::~CameraRailSpline()
non-virtual thunk to CameraRailSpline::~CameraRailSpline()
CameraRailSpline::GetClass() const
CameraRailSpline::SetTransform(VuMtx const&)
CameraRailSpline::SetPlaying(bool)
CameraRailSpline::Process(void*, float)
CameraRailSpline::Render()
CameraRailSpline::Process(float)
CameraRailSpline::TranslateAlongSpline(float, float&, VuMtx*)
CameraRailSpline::GetLookTarget(MechCharacter*)
CameraRailSpline::SetCurrentDistAlongSpline(float, VuMtx*)
CameraRailSplineManager::ShouldTakeoverScreen(CameraRailSpline&)
CameraRailSpline::ExtractLocalZFromMatrix(VuMtx&, int&, NUQUAT*)
CameraRailSpline::CameraFollowTarget(MechCharacter&, VuVec&, float, VuVec*, float, float, float*, VuVec*, float)
CameraRailSpline::GetNearestDistAlongSpline(VuVec const&, VuVec&, bool, float)
CameraRailSpline::GetSplineMatrix(VuVec&, float, VuMtx&, float*, float*, float*, float*, float*, CameraRailSpline::eSplineMatrixScale)
CameraRailSpline::GetSplineMatrix(float, float, VuMtx&, float*, float*, float*, float*, float*, CameraRailSpline::eSplineMatrixScale)
CameraRailSpline::SetInterpolationMatrix(float)
CameraRailSpline::SetInterpolationMatrixForSplineDistance(float, VuMtx*)
CameraRailSpline::RailCameraTween(VuMtx&, VuMtx&, CameraRailSplineKnot*, CameraRailSplineKnot*, float) const
CameraRailSpline::GenerateFromMayaSpline()
CameraRailSplineKnot::CameraRailSplineKnot()
CameraRailSplineKnot::CameraRailSplineKnot(CameraRailSplineKnot const&, SplineObject*)
CameraRailSplineKnot::GetKnotHelper() const
CameraRailSplineKnot::CloneKnot(SplineObject*) const
CameraRailSplineKnot::CopyKnot(SplineKnot const*)
CameraRailSplineKnot::SetControlPointIn(VuVec const&)
CameraRailSplineKnot::SetControlPointOut(VuVec const&)
CameraRailSplineKnot::DrawTransformAsSquare(VuMtx const&, unsigned int, bool, VuVec*)
CameraRailSplineHelper::RegisterSplineData(EdClass*)
CameraRailSplineHelper::RegisterKnotData(EdClass*)
EdRefMechSplineKnot::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefMechSplineKnot::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefMechSpline::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefMechSpline::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CameraRailSplineManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CameraRailSplineManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
CameraRailSplineManager::EventNotify(Event&, NuEventData&)
CameraRailSplineManager::CheckForAutoAttachSplines(CameraRailSpline*, VuVec const&)
CameraRailSplineManager::CheckForAutoAttachExit(CameraRailSpline*, VuVec const&)
CameraRailSplineManager::CameraRailSplineManager(LevelContainer&)
CameraRailSplineManager::RegisterProcessing()
CameraRailSplineManager::RegisterRendering()
CameraRailSplineManager::~CameraRailSplineManager()
CameraRailSplineManager::~CameraRailSplineManager()
CameraRailSplineManager::SetTakeoverScreenDefault(bool)
CameraRailSplineManager::GetTakeoverScreenDefault()
EdRefMechSplineKnot::~EdRefMechSplineKnot()
EdRefMechSpline::~EdRefMechSpline()
CameraRailSpline::SetVisibility(int)
CameraRailSpline::Activate(bool)
CameraRailSpline::GetNumOutputs()
CameraRailSpline::GetOutput(int, int)
CameraRailSpline::GetDefaultOutputIndex()
CameraRailSpline::GetOutputName(int)
CameraRailSpline::ActivateRev(int, int)
CameraRailSpline::ResetForLoop()
CameraRailSplineKnot::~CameraRailSplineKnot()
CameraBaseSplineKnot::GetPosition(VuVec&) const
CameraBaseSplineKnot::SetPosition(VuVec const&)
CameraRailSplineKnot::GetSplineHelper() const
CameraRailSplineHelper::~CameraRailSplineHelper()
SplineHelperT<CameraRailSpline>::NewSpline(EdRegContext*, void*, int) const
SplineHelperT<CameraRailSpline>::DeleteSpline(SplineObject*) const
SplineHelperT<CameraRailSpline>::GetManagerID() const
CameraRailSplineHelper::SkipPositionRefs()
CameraRailSplineHelper::GetPrefix()
CameraRailSplineHelper::GetCategory()
CameraRailSplineHelper::GetFileExt()
non-virtual thunk to CameraRailSplineHelper::~CameraRailSplineHelper()
non-virtual thunk to CameraRailSplineHelper::~CameraRailSplineHelper()
SplineManagerT<CameraRailSpline>::GetManagerName() const
SplineManagerT<CameraRailSpline>::GetClass(int)
SplineManagerT<CameraRailSpline>::GetNumClasses()
SplineManagerT<CameraRailSpline>::NewSpline(EdRegContext*, void*, int) const
SplineManagerT<CameraRailSpline>::DeleteSpline(SplineObject*) const
SplineManagerT<CameraRailSpline>::GetSplineHelper() const
CreateCameraSockSplineManager(LevelContainer&)
MechSockParams::Reset()
MechSockParams::CalculateGlobalCameraPosition(VuVec&, float)
MechSockParams::BlendLinear(MechSockParams const&, MechSockParams const&, float)
MechSockParams::BlendSmooth(MechSockParams const&, MechSockParams const&, float)
CameraSockSpline::CameraSockSpline(EdRegContext&, void*, int)
CameraSockSpline::~CameraSockSpline()
CameraSockSpline::UnregisterFromGlobalList()
non-virtual thunk to CameraSockSpline::~CameraSockSpline()
non-virtual thunk to CameraSockSpline::~CameraSockSpline()
CameraSockSpline::~CameraSockSpline()
non-virtual thunk to CameraSockSpline::~CameraSockSpline()
non-virtual thunk to CameraSockSpline::~CameraSockSpline()
CameraSockSpline::GetClass() const
CameraSockSpline::SetTransform(VuMtx const&)
CameraSockSpline::RefreshAABB()
CameraSockSpline::SetDirty()
CameraSockSpline::Process(void*, float)
CameraSockSpline::Process(float)
CameraSockSpline::SetInterpolationMatrix(float)
CameraSockSpline::SetInterpolationMatrixForSplineDistance(float)
CameraSockSpline::GetSockWeightingAtPosition(VuVec&, float, MechSockParams&, CameraSockSpline::CAMERA_TYPE, float)
CameraSockSpline::ClampCamerasToConstraintVolume(VuVec&, MechSockParams&)
CameraSockSpline::RegisterWithGlobalList(CameraSockSpline*)
CameraSockSpline::SetPriority(int)
CameraSockSplineManager::UpdatePriority()
CameraSockSpline::ClampPointToConstraintVolume(VuVec&, MechSockParams&)
CameraSockSplineKnot::CameraSockSplineKnot()
CameraSockSplineKnot::CameraSockSplineKnot(CameraSockSplineKnot const&, SplineObject*)
CameraSockSplineKnot::GetKnotHelper() const
CameraSockSplineKnot::CloneKnot(SplineObject*) const
CameraSockSplineKnot::CopyKnot(SplineKnot const*)
CameraSockSplineHelper::RegisterSplineData(EdClass*)
CameraSockSplineHelper::RegisterKnotData(EdClass*)
CameraSockSplineHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to CameraSockSplineHelper::EventNotify(Event&, NuEventData&)
EdRefSockSplineKnot::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSockSplineKnot::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSockSpline::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSockSpline::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CameraSockSplineManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CameraSockSplineManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
PerspectMidPoint(VuVec&, VuVec const&, VuVec const&, VuVec const&)
CameraSockSplineManager::EvaluateCurrentVolumes(VuVec&, float, VuVec&, float, MechSockParams&, MechCamera::BasicParams&, CameraSockSpline::CAMERA_TYPE, cAreaSplitSettings&, float, void (*)(MechSockParams&, float, int, VuVec&, char const*))
CameraSockSplineManager::EvaluateCurrentVolumes(VuVec&, float, MechSockParams&, MechCamera::BasicParams&, CameraSockSpline::CAMERA_TYPE, float, float, void (*)(MechSockParams&, float, int, VuVec&, char const*))
CameraSockSplineManager::ApplySockParamsToCamera(VuVec&, MechSockParams const&, MechCamera::BasicParams&)
CameraSockSplineManager::ShouldApplyTo(MechCharacter*)
CameraSockSplineManager::FindCamVolume(char const*)
CameraSockSplineManager::EventNotify(Event&, NuEventData&)
CameraSockSplineManager::CameraSockSplineManager(LevelContainer&)
CameraSockSplineManager::ConvertDepthOfFieldPostEffectToCamVolume()
CameraSockSplineManager::RegisterProcessing()
CameraSockSplineManager::RegisterRendering()
CameraSockSplineManager::~CameraSockSplineManager()
CameraSockSplineManager::~CameraSockSplineManager()
EdRefCustomSockHandle::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCustomSockHandle::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSockSpline::~EdRefSockSpline()
EdRefSockSplineKnot::~EdRefSockSplineKnot()
EdRefCustomSockHandle::~EdRefCustomSockHandle()
CameraSockSplineHelper::~CameraSockSplineHelper()
SplineHelperT<CameraSockSpline>::NewSpline(EdRegContext*, void*, int) const
SplineHelperT<CameraSockSpline>::DeleteSpline(SplineObject*) const
SplineHelperT<CameraSockSpline>::GetManagerID() const
CameraSockSplineHelper::SkipPositionRefs()
CameraSockSplineHelper::GetPrefix()
CameraSockSplineHelper::GetCategory()
CameraSockSplineHelper::GetFileExt()
CameraSockSplineHelper::GetNameOverrideForSpline()
CameraSockSplineHelper::GetNameOverrideForKnot()
non-virtual thunk to CameraSockSplineHelper::~CameraSockSplineHelper()
non-virtual thunk to CameraSockSplineHelper::~CameraSockSplineHelper()
CameraSockSpline::SetVisibility(int)
CameraSockSpline::Activate(bool)
CameraSockSpline::GetNumOutputs()
CameraSockSpline::GetOutput(int, int)
CameraSockSpline::GetDefaultOutputIndex()
CameraSockSpline::GetOutputName(int)
CameraSockSpline::ActivateRev(int, int)
CameraSockSpline::ResetForLoop()
CameraSockSplineKnot::~CameraSockSplineKnot()
CameraSockSplineKnot::~CameraSockSplineKnot()
CameraSockSplineKnot::GetSplineHelper() const
SplineManagerT<CameraSockSpline>::GetManagerName() const
SplineManagerT<CameraSockSpline>::GetClass(int)
SplineManagerT<CameraSockSpline>::GetNumClasses()
SplineManagerT<CameraSockSpline>::NewSpline(EdRegContext*, void*, int) const
SplineManagerT<CameraSockSpline>::DeleteSpline(SplineObject*) const
SplineManagerT<CameraSockSpline>::GetSplineHelper() const
NuMechPtr<CameraSockSpline, 680>::ManagedBase::~ManagedBase()
NuMechPtr<CameraSockSpline, 680>::ManagedBase::~ManagedBase()
CreateMechCameraManager(LevelContainer&)
MechCamera::BasicParams::ApplyToNuCamera(NuCamera&)
MechCamera::Update(MechCamera&)
MechCamera::BlendCameraPair(MechCamera&, MechCamera&, float)
MechCamera::DrawDebug()
MechCameraList::SortByPriority()
MechCameraList::BlendStack(MechCamera&, unsigned int, unsigned int, float)
MechCameraManager::RequestLetterbox(unsigned int)
MechCameraList::FindCamera(unsigned long)
MechCameraList::Process(float, bool, int)
MechCameraHelper::Initialise()
MechCameraHelper::MechCameraHelper()
MechCameraManager::MechCameraManager(LevelContainer&)
MechCameraManager::RegisterProcessing()
MechCameraManager::EventNotify(Event&, NuEventData&)
MechCameraManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechCameraManager::FadeOutObjectsNearToPlayerCamera(MechCharacter&)
MechCameraManager::HasSnapped(MechCharacter const*)
MechCameraManager::GetChaseCameraIsInUse(MechCharacter&)
MechCameraManager::SwapPlayerCameraStacks()
MechCameraManager::RequestCameraInternal(MechCharacter const*, char const*, unsigned long, MechCamera&)
MechCameraManager::Snap(MechCharacter const*)
MechCameraManager::RequestCamera(MechCharacter const&, char const*, unsigned long, int, float, VuVec const&, VuVec const&, VuVec const&, int, float, float, float, float)
MechCameraManager::RequestCamera(MechCharacter const&, char const*, unsigned long, int, float, VuVec const&, VuVec const&, NUQUAT const&, int, float, float, float, float)
MechCameraManager::RequestCamera(MechCharacter const&, char const*, unsigned long, MechCamera&)
MechCameraManager::RequestCamera(LevelContainer const&, char const*, unsigned long, int, float, VuVec const&, VuVec const&, VuVec const&, int, float, float, float, float)
MechCameraManager::RequestCamera(LevelContainer const&, char const*, unsigned long, int, float, VuVec const&, VuVec const&, NUQUAT const&, int, float, float, float, float)
MechCameraManager::RequestCamera(LevelContainer const&, char const*, unsigned long, MechCamera&)
MechCameraManager::Snap(GAMECAMERA&)
MechCameraManager::GetSplitAmount(MechCharacter const&)
MechCameraManager::GetBestCameraFocusCharForCutscene(VuVec const&, bool, float, float, MechCharacter*)
MechCameraManager::SetChaseCameraIsInUse(MechCharacter&)
MechCameraManager::GetChaseCameraIsInUseInternal(MechCharacter&)
MechCameraManager::GetChaseCamera(MechCharacter&)
MechCameraManager::GetQuatWeighting(MechCharacter&)
MechCameraManager::SetQuatWeighting(MechCharacter&, float)
MechCameraManager::BlendCameraStack(MechCamera&, int, eCamFlags, float)
MechCameraManager::~MechCameraManager()
MechCameraManager::~MechCameraManager()
MechCameraHelper::~MechCameraHelper()
MechCameraHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechCameraHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
MechCameraHelper::GetManNextObject(ClassManager*, void*, void*)
MechCameraManager::GetManagerName() const
MechCameraManager::IsChildlessManager()
FlowCommonInterface_CamBaseSpline::GetName()
FlowCommonInterface_CamBaseSpline::GetLedFile()
CameraBaseSpline::CameraBaseSpline(EdRegContext&, void*, int)
CameraBaseSpline::SmoothLinearBlendValue(float)
CameraBaseSpline::SetTransform(VuMtx const&)
CameraBaseSpline::Process(void*, float)
CameraBaseSpline::Process(float)
CameraBaseSpline::SetInterpolationMatrix(float)
CameraBaseSpline::ComputeTotalLengthOfBezierSpline() const
CameraBaseSpline::SetInterpolationMatrixForSplineDistance(float)
CameraBaseSplineKnot::CameraBaseSplineKnot()
CameraBaseSplineKnot::CameraBaseSplineKnot(CameraBaseSplineKnot const&, SplineObject*)
CameraBaseSplineKnot::GetTransform(VuMtx&) const
CameraBaseSplineKnot::SetTransform(VuMtx const&)
CameraBaseSplineKnot::GetLocalTransform(VuMtx&) const
CameraBaseSplineKnot::SetLocalTransform(VuMtx const&)
CameraBaseSplineKnot::GetClass() const
CameraBaseSplineKnot::RecomputeAllKnotsTransformsFromInOutControlPoints()
CameraBaseSplineKnot::RenderFrustumFromMtx(VuMtx const&, unsigned int, NuCamera*)
EdRefCameraBaseSplineKnot::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCameraBaseSplineKnot::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowCommonInterface_CamBaseSpline::~FlowCommonInterface_CamBaseSpline()
FlowCommonInterface_CamBaseSpline::GetObject()
FlowCommonInterface_CamBaseSpline::GetTypeName()
FlowCommonInterface_CamBaseSpline::GetGizmoPrefix()
FlowCommonInterface_CamBaseSpline::GetClass()
FlowCommonInterface_CamBaseSpline::GetNumOutputs()
FlowCommonInterface_CamBaseSpline::GetOutput(int, int)
FlowCommonInterface_CamBaseSpline::GetDefaultOutputIndex()
FlowCommonInterface_CamBaseSpline::GetOutputName(int)
FlowCommonInterface_CamBaseSpline::Activate(bool)
FlowCommonInterface_CamBaseSpline::ActivateRev(int, int)
FlowCommonInterface_CamBaseSpline::SetVisibility(int)
FlowCommonInterface_CamBaseSpline::IsActive()
FlowCommonInterface_CamBaseSpline::IsVisible()
FlowCommonInterface_CamBaseSpline::AcquireSpecials()
FlowCommonInterface_CamBaseSpline::Reset()
FlowCommonInterface_CamBaseSpline::ActivateByComplexGizmo()
FlowCommonInterface_CamBaseSpline::ResetForLoop()
FlowCommonInterface_CamBaseSpline::GetTriggeredByPlayerId()
FlowCommonInterface_CamBaseSpline::SetTriggeredByPlayerId(MechCharacter*)
FlowCommonInterface_CamBaseSpline::GetBuilderOrigin(NUVEC*)
FlowCommonInterface_CamBaseSpline::GetRotationMatrix(NUMTX&)
FlowCommonInterface_CamBaseSpline::HideFromEditor()
MechFlowInterface::CanBeAddedToComplexGizmo()
MechFlowInterface::CloneObject(LevelContainer&, NUVEC&, NUMTX&, Gizmo*)
MechFlowInterface::GetReference()
EdRefCameraBaseSplineKnot::~EdRefCameraBaseSplineKnot()
CameraBaseSpline::~CameraBaseSpline()
CameraBaseSpline::~CameraBaseSpline()
CameraBaseSpline::SetVisibility(int)
CameraBaseSpline::Activate(bool)
CameraBaseSpline::GetNumOutputs()
CameraBaseSpline::GetOutput(int, int)
CameraBaseSpline::GetDefaultOutputIndex()
CameraBaseSpline::GetOutputName(int)
CameraBaseSpline::ActivateRev(int, int)
CameraBaseSpline::ResetForLoop()
non-virtual thunk to CameraBaseSpline::~CameraBaseSpline()
non-virtual thunk to CameraBaseSpline::~CameraBaseSpline()
CameraBaseSplineKnot::~CameraBaseSplineKnot()
MechGadgetSystem::MechGadgetSystem()
MechGadgetSystem::Init()
MechGadgetSystem::FindTemplate(LevelContainer&, char const*, EdClass*)
MechGadgetSystem::FindInstance(LevelContainer&, char const*, EdClass*)
MechGadgetSystem::~MechGadgetSystem()
MechGadgetComponentParticle::GetEdClass()
MechGadgetComponentParticleHelper::Register()
MechGadgetComponentParticle::LevelInit(LevelContainer&, MechGadgetBaseTemplate&)
MechGadgetComponentParticle::CreateFiniteEmitter(LevelContainer&, VuVec&)
MechGadgetComponentParticle::CreateOneShotEmitter(LevelContainer&, VuVec&, int, float)
MechGadgetComponentParticle::~MechGadgetComponentParticle()
MechGadgetComponentParticle::~MechGadgetComponentParticle()
MechGadgetComponentParticleHelper::~MechGadgetComponentParticleHelper()
MechGadgetComponentPartHelper::Register()
MechGadgetComponentPart::GetEdClass()
MechGadgetComponentPart::LevelInit(LevelContainer&, MechGadgetBaseTemplate&)
MechGadgetComponentPart::AddFiniteShot(LevelContainer&, VuVec&)
MechGadgetComponentPart::AddVariableShot(LevelContainer&, VuVec&, float, float)
MechGadgetComponentPart::~MechGadgetComponentPart()
MechGadgetComponentPart::~MechGadgetComponentPart()
MechGadgetComponentPartHelper::~MechGadgetComponentPartHelper()
MechGadgetComponentCoinHelper::Register()
MechGadgetComponentCoin::LevelInit(LevelContainer&, MechGadgetBaseTemplate&)
MechGadgetComponentCoin::GetEdClass()
MechGadgetComponentCoin::GetEmissionOriginAndDirection(MechGadgetBaseInstance&, VuVec&, VuVec&)
MechGadgetComponentCoin::EmitCoins(LevelContainer&, MechGadgetBaseInstance&, unsigned char&, int, bool)
MechGadgetComponentCoin::~MechGadgetComponentCoin()
MechGadgetComponentCoin::~MechGadgetComponentCoin()
MechGadgetComponentCoinHelper::~MechGadgetComponentCoinHelper()
MechGadgetComponentProximityTemplate::LevelInit(LevelContainer&, MechGadgetBaseTemplate&)
MechGadgetComponentProximityTemplate::GetEdClass()
MechGadgetComponentProximityTemplate::RequiresPhantom()
MechGadgetComponentProximityTemplate::UpdatePhantomMinMax(MechGadgetBaseInstance&, float)
MechGadgetComponentProximityTemplate::IsWithin(MechGadgetBaseInstance&, MechCharacter&, float)
MechGadgetComponentProximityTemplate::GetOrigin(MechGadgetBaseInstance&, VuVec&)
MechGadgetComponentProximityTemplate::GetRadius()
MechGadgetComponentProximityTemplateHelper::Register()
MechGadgetComponentProximityTemplate::~MechGadgetComponentProximityTemplate()
MechGadgetComponentProximityTemplate::~MechGadgetComponentProximityTemplate()
MechGadgetComponentProximityTemplateHelper::~MechGadgetComponentProximityTemplateHelper()
MechGadgetComponentControllerTemplate::LevelInit(LevelContainer&, MechGadgetBaseTemplate&)
MechGadgetComponentControllerTemplate::GetEdClass()
MechGadgetComponentControllerTemplateHelper::Register()
MechGadgetComponentControllerInstance::ResetTarget(MechObjectData&)
MechGadgetComponentControllerInstance::StartControllerInput(MechObjectData&)
MechGadgetComponentControllerInstance::EndControllerInput(MechObjectData&)
MechGadgetComponentControllerInstance::GiveControllerInput(MechCharacter*, MechObjectData&)
MechGadgetComponentControllerInstance::GetZSpeed()
MechGadgetComponentControllerInstance::UpdatePlacement(MechGadgetBaseInstance&)
MechGadgetComponentControllerInstance::LevelInit(LevelContainer&, MechGadgetBaseInstance&)
MechGadgetComponentControllerInstance::FixUpControllerType()
MechGadgetComponentControllerInstance::GetEdClass()
MechGadgetComponentControllerInstanceHelper::Register()
MechGadgetControllerSystem::Init()
MechGadgetControllerSystem::RegisterTypes()
MechGadgetControllerSystem::GetControllerTypeEnumItems()
MechGadgetControllerSystem::GetControllerTypeID(MechGadgetControllerBaseTemplate*)
MechGadgetControllerSystem::GetControllerTypeID(MechGadgetControllerBaseInstance*)
MechGadgetControllerSystem::GetInstanceHelperFromTypeID(unsigned int)
MechGadgetControllerSystem::GetTemplateHelperFromTypeID(unsigned int)
MechGadgetComponentControllerTemplate::~MechGadgetComponentControllerTemplate()
MechGadgetComponentControllerTemplate::~MechGadgetComponentControllerTemplate()
MechGadgetComponentControllerInstance::~MechGadgetComponentControllerInstance()
MechGadgetComponentControllerInstance::~MechGadgetComponentControllerInstance()
MechGadgetComponentControllerInstance::SetTemplate(MechGadgetComponentTemplate*)
MechGadgetControllerSystem::~MechGadgetControllerSystem()
MechSystemBase<MechGadgetControllerSystem, int>::Suppress(int)
MechSystemBase<MechGadgetControllerSystem, int>::IsSuppressed(int) const
MechGadgetComponentControllerTemplateHelper::~MechGadgetComponentControllerTemplateHelper()
MechGadgetComponentControllerInstanceHelper::~MechGadgetComponentControllerInstanceHelper()
MechGadgetComponentTargetInstance::LevelInit(LevelContainer&, MechGadgetBaseInstance&)
MechGadgetComponentTargetInstance::GetEdClass()
MechGadgetComponentTargetInstanceHelper::Register()
MechGadgetTargetSystem::Init()
MechGadgetTargetSystem::RegisterTypes()
MechGadgetTargetSystem::GetTargetTypeEnumItems()
MechGadgetTargetSystem::GetTargetTypeID(MechGadgetTargetBaseInstance*)
MechGadgetTargetSystem::GetInstanceHelperFromTypeID(unsigned int)
MechGadgetComponentTargetInstance::SetTargetObstacle(GizmoObstacle*)
MechGadgetComponentTargetInstance::~MechGadgetComponentTargetInstance()
MechGadgetComponentTargetInstance::~MechGadgetComponentTargetInstance()
MechGadgetComponentInstance::UpdatePlacement(MechGadgetBaseInstance&)
MechGadgetComponentInstance::SetTemplate(MechGadgetComponentTemplate*)
MechGadgetTargetSystem::~MechGadgetTargetSystem()
MechSystemBase<MechGadgetTargetSystem, int>::Suppress(int)
MechSystemBase<MechGadgetTargetSystem, int>::IsSuppressed(int) const
MechGadgetComponentTargetInstanceHelper::~MechGadgetComponentTargetInstanceHelper()
MechGadgetComponentSFXTemplate::LevelInit(LevelContainer&, MechGadgetBaseTemplate&)
MechGadgetComponentSFXTemplate::Play(LevelContainer&, VuVec*)
MechGadgetComponentSFXTemplateHelper::Register()
MechGadgetComponentSFXTemplate::GetEdClass()
MechGadgetComponentSFXInstance::~MechGadgetComponentSFXInstance()
MechGadgetComponentSFXInstance::~MechGadgetComponentSFXInstance()
MechGadgetComponentSFXInstance::Play(VuVec*)
MechGadgetComponentSFXInstance::IsPlaying()
MechGadgetComponentSFXTemplate::~MechGadgetComponentSFXTemplate()
MechGadgetComponentSFXTemplate::~MechGadgetComponentSFXTemplate()
MechGadgetComponentInstance::LevelInit(LevelContainer&, MechGadgetBaseInstance&)
MechGadgetComponentSFXInstance::SetTemplate(MechGadgetComponentTemplate*)
MechGadgetComponentSFXTemplateHelper::~MechGadgetComponentSFXTemplateHelper()
MechGadgetComponentCameraInstance::MechGadgetComponentCameraInstance()
MechGadgetComponentCameraInstance::LevelInit(LevelContainer&, MechGadgetBaseInstance&)
MechGadgetComponentCameraInstanceHelper::Register()
MechGadgetComponentCameraInstance::~MechGadgetComponentCameraInstance()
MechGadgetComponentCameraInstance::~MechGadgetComponentCameraInstance()
MechGadgetComponentCameraInstanceHelper::~MechGadgetComponentCameraInstanceHelper()
MechGadgetControllerAnimationTemplateHelper::Register()
MechGadgetControllerAnimationTemplate::MechGadgetControllerAnimationTemplate(EdRegContext const&, EdClass*)
MechGadgetControllerAnimationTemplateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerAnimationTemplateHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerAnimationInstanceHelper::Register()
MechGadgetControllerAnimationInstance::MechGadgetControllerAnimationInstance(EdRegContext const&, EdClass*)
MechGadgetControllerAnimationInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerAnimationInstanceHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerAnimationInstance::MoveTarget(MechCharacter*, MechObjectData&)
MechGadgetControllerAnimationTemplateHelper::~MechGadgetControllerAnimationTemplateHelper()
MechGadgetControllerAnimationInstance::~MechGadgetControllerAnimationInstance()
MechGadgetControllerAnimationInstance::~MechGadgetControllerAnimationInstance()
MechGadgetControllerBaseInstance::StartControllerInput(MechObjectData&)
MechGadgetControllerBaseInstance::EndControllerInput(MechObjectData&)
MechGadgetControllerBaseInstance::UpdatePlacement(MechGadgetBaseInstance&)
MechGadgetControllerAnimationInstance::GetZSpeed()
MechGadgetControllerAnimationInstanceHelper::~MechGadgetControllerAnimationInstanceHelper()
MechGadgetControllerBaseTemplate::~MechGadgetControllerBaseTemplate()
MechGadgetControllerAnimationTemplate::~MechGadgetControllerAnimationTemplate()
MechShapeBase::~MechShapeBase()
MechShapeArrow::~MechShapeArrow()
MechGadgetControllerBaseTemplateHelper::Register()
MechGadgetControllerBaseInstanceHelper::Register()
MechGadgetControllerBaseTemplateHelper::~MechGadgetControllerBaseTemplateHelper()
MechGadgetControllerBaseInstanceHelper::~MechGadgetControllerBaseInstanceHelper()
MechGadgetControllerBBashTemplateHelper::Register()
MechGadgetControllerBBashTemplate::MechGadgetControllerBBashTemplate(EdRegContext const&, EdClass*)
MechGadgetControllerBBashTemplateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerBBashTemplateHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerBBashInstanceHelper::Register()
MechGadgetControllerBBashInstance::MechGadgetControllerBBashInstance(EdRegContext const&, EdClass*)
MechGadgetControllerBBashInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerBBashInstanceHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerBBashInstance::MoveTarget(MechCharacter*, MechObjectData&)
MechGadgetControllerBBashTemplateHelper::~MechGadgetControllerBBashTemplateHelper()
MechGadgetControllerBaseInstance::~MechGadgetControllerBaseInstance()
MechGadgetControllerBBashInstance::~MechGadgetControllerBBashInstance()
MechGadgetControllerBaseInstance::GetZSpeed()
MechGadgetControllerBBashInstanceHelper::~MechGadgetControllerBBashInstanceHelper()
MechGadgetControllerBBashTemplate::~MechGadgetControllerBBashTemplate()
MechGadgetControllerPlaneTemplateHelper::Register()
MechGadgetControllerPlaneTemplate::MechGadgetControllerPlaneTemplate(EdRegContext const&, EdClass*)
MechGadgetControllerPlaneTemplateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerPlaneTemplateHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerPlaneInstanceHelper::Register()
MechGadgetControllerPlaneInstance::MechGadgetControllerPlaneInstance(EdRegContext const&, EdClass*)
MechGadgetControllerPlaneInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerPlaneInstanceHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechGadgetControllerPlaneInstance::InputWorldVec(VuVec&, VuMtx&, VuVec&, float, float)
MechGadgetControllerPlaneInstance::GetClosestPointToLine(VuVec&, VuVec&, VuVec&, VuVec&)
MechGadgetControllerPlaneInstance::StartControllerInput(MechObjectData&)
MechGadgetControllerPlaneInstance::EndControllerInput(MechObjectData&)
MechGadgetControllerPlaneInstance::MoveTarget(MechCharacter*, MechObjectData&)
MechGadgetControllerPlaneTemplateHelper::~MechGadgetControllerPlaneTemplateHelper()
MechGadgetControllerPlaneInstance::~MechGadgetControllerPlaneInstance()
MechGadgetControllerPlaneInstance::~MechGadgetControllerPlaneInstance()
MechGadgetControllerPlaneInstance::GetZSpeed()
MechGadgetControllerPlaneInstanceHelper::~MechGadgetControllerPlaneInstanceHelper()
MechGadgetControllerPlaneTemplate::~MechGadgetControllerPlaneTemplate()
MechGadgetProximitySystem::Init()
MechGadgetProximitySystem::RegisterTypes()
MechGadgetProximitySystem::GetProximityTypeEnumItems()
MechGadgetProximitySystem::GetProximityTypeID(MechGadgetProximityBaseTemplate*)
MechGadgetProximitySystem::GetTemplateHelperFromTypeID(unsigned int)
MechGadgetProximitySystem::GetInstanceHelperFromTypeID(unsigned int)
MechGadgetProximitySystem::~MechGadgetProximitySystem()
MechSystemBase<MechGadgetProximitySystem, int>::Suppress(int)
MechSystemBase<MechGadgetProximitySystem, int>::IsSuppressed(int) const
MechGadgetProximityBaseTemplate::MechGadgetProximityBaseTemplate(EdRegContext const&, EdClass*)
MechGadgetProximityBaseTemplateHelper::Register()
MechGadgetProximityBaseTemplate::~MechGadgetProximityBaseTemplate()
MechGadgetProximityBaseTemplate::~MechGadgetProximityBaseTemplate()
MechGadgetProximityBaseTemplate::RequiresPhantom()
MechGadgetProximityBaseTemplate::UpdatePhantomMinMax(MechGadgetBaseInstance&, float)
MechGadgetProximityBaseTemplate::IsWithin(MechGadgetBaseInstance&, MechCharacter&, float)
MechGadgetProximityBaseTemplate::GetOrigin(MechGadgetBaseInstance&, VuVec&)
MechGadgetProximityBaseTemplate::GetRadius()
MechGadgetProximityBaseTemplateHelper::~MechGadgetProximityBaseTemplateHelper()
MechGadgetProximitySphereTemplateHelper::Register()
MechGadgetProximitySphereTemplate::MechGadgetProximitySphereTemplate(EdRegContext const&, EdClass*)
MechGadgetProximitySphereTemplate::RequiresPhantom()
MechGadgetProximitySphereTemplate::UpdatePhantomMinMax(MechGadgetBaseInstance&, float)
MechGadgetProximitySphereTemplate::IsWithin(MechGadgetBaseInstance&, MechCharacter&, float)
MechGadgetProximitySphereTemplate::GetOrigin(MechGadgetBaseInstance&, VuVec&)
MechGadgetProximitySphereTemplateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetProximitySphereTemplateHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechGadgetProximitySphereTemplate::~MechGadgetProximitySphereTemplate()
MechGadgetProximitySphereTemplate::GetRadius()
MechGadgetProximitySphereTemplateHelper::~MechGadgetProximitySphereTemplateHelper()
MechGadgetProximityBoxTemplateHelper::Register()
MechGadgetProximityBoxTemplate::MechGadgetProximityBoxTemplate(EdRegContext const&, EdClass*)
MechGadgetProximityBoxTemplate::RequiresPhantom()
MechGadgetProximityBoxTemplate::UpdatePhantomMinMax(MechGadgetBaseInstance&, float)
MechGadgetProximityBoxTemplate::IsWithin(MechGadgetBaseInstance&, MechCharacter&, float)
MechGadgetProximityBoxTemplate::GetOrigin(MechGadgetBaseInstance&, VuVec&)
MechGadgetProximityBoxTemplateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetProximityBoxTemplateHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechGadgetProximityBoxTemplate::~MechGadgetProximityBoxTemplate()
MechGadgetProximityBoxTemplate::~MechGadgetProximityBoxTemplate()
MechGadgetProximityBoxTemplateHelper::~MechGadgetProximityBoxTemplateHelper()
MechShapeBox::~MechShapeBox()
MechGadgetTargetBaseInstanceHelper::Register()
MechGadgetTargetBaseInstanceHelper::~MechGadgetTargetBaseInstanceHelper()
MechGadgetTargetGizmoInstanceHelper::MechGadgetTargetGizmoInstanceHelper()
MechGadgetTargetGizmoInstanceHelper::Register()
MechGadgetTargetGizmoInstance::MechGadgetTargetGizmoInstance(EdRegContext const&, EdClass*)
MechGadgetTargetGizmoInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetTargetGizmoInstanceHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechGadgetTargetGizmoInstanceHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to MechGadgetTargetGizmoInstanceHelper::EventNotify(Event&, NuEventData&)
MechGadgetTargetGizmoInstance::FixUpTarget(LevelContainer&, MechObjectData&)
MechGadgetTargetGizmoInstance::SetObstacle(GizmoObstacle*)
MechGadgetTargetGizmoInstance::~MechGadgetTargetGizmoInstance()
MechGadgetTargetGizmoInstance::~MechGadgetTargetGizmoInstance()
MechGadgetTargetGizmoInstanceHelper::~MechGadgetTargetGizmoInstanceHelper()
MechGadgetTargetGizmoInstanceHelper::~MechGadgetTargetGizmoInstanceHelper()
non-virtual thunk to MechGadgetTargetGizmoInstanceHelper::~MechGadgetTargetGizmoInstanceHelper()
non-virtual thunk to MechGadgetTargetGizmoInstanceHelper::~MechGadgetTargetGizmoInstanceHelper()
MechGadgetTargetLegoSpecialInstanceHelper::MechGadgetTargetLegoSpecialInstanceHelper()
MechGadgetTargetLegoSpecialInstanceHelper::Register()
MechGadgetTargetLegoSpecialInstance::MechGadgetTargetLegoSpecialInstance(EdRegContext const&, EdClass*)
MechGadgetTargetLegoSpecialInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetTargetLegoSpecialInstanceHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechGadgetTargetLegoSpecialInstance::FixUpTarget(LevelContainer&, MechObjectData&)
MechGadgetTargetLegoSpecialInstance::~MechGadgetTargetLegoSpecialInstance()
MechGadgetTargetLegoSpecialInstance::~MechGadgetTargetLegoSpecialInstance()
MechGadgetTargetLegoSpecialInstanceHelper::~MechGadgetTargetLegoSpecialInstanceHelper()
MechGadgetFloorTargetAddOn::MechGadgetFloorTargetAddOn(int, int)
MechGadgetFloorTargetAddOn::OnAdded()
MechGadgetFloorTargetAddOn::SetPosition(VuVec&)
MechGadgetFloorTargetAddOn::OnHook(unsigned char, HookArgs*)
MechGadgetFloorTargetAddOn::CalculateDrawPosition()
non-virtual thunk to MechGadgetFloorTargetAddOn::OnHook(unsigned char, HookArgs*)
MechGadgetFloorTargetAddOn::~MechGadgetFloorTargetAddOn()
MechGadgetFloorTargetAddOn::GetLevelContainer() const
non-virtual thunk to MechGadgetFloorTargetAddOn::~MechGadgetFloorTargetAddOn()
non-virtual thunk to MechGadgetFloorTargetAddOn::~MechGadgetFloorTargetAddOn()
non-virtual thunk to MechGadgetFloorTargetAddOn::GetLevelContainer() const
MechGadgetTakeHereArrowAddOn::MechGadgetTakeHereArrowAddOn(VuVec&, int, int)
MechGadgetTakeHereArrowAddOn::SetPosition(VuVec&)
MechGadgetTakeHereArrowAddOn::Create(MechGadgetBaseInstance&, VuVec&)
MechGadgetTakeHereArrowAddOn::PlayerCanUse(MechGadgetBaseInstance&, MechCharacter&)
MechGadgetTakeHereArrowAddOn::OnAdded()
MechGadgetTakeHereArrowAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MechGadgetTakeHereArrowAddOn::OnHook(unsigned char, HookArgs*)
MechGadgetTakeHereArrowAddOn::~MechGadgetTakeHereArrowAddOn()
MechGadgetTakeHereArrowAddOn::GetLevelContainer() const
non-virtual thunk to MechGadgetTakeHereArrowAddOn::~MechGadgetTakeHereArrowAddOn()
non-virtual thunk to MechGadgetTakeHereArrowAddOn::~MechGadgetTakeHereArrowAddOn()
non-virtual thunk to MechGadgetTakeHereArrowAddOn::GetLevelContainer() const
FlowCommonInterface_MechGadgetBaseInstance::GetName()
MechGadgetPhantomInterface::RequiresPhantom(bool)
MechGadgetInterface::GetObjectEdClass() const
MechGadgetBaseTemplate::MechGadgetBaseTemplate(EdRegContext&, EdClass*)
MechGadgetBaseTemplate::AddComponent(MechGadgetComponentTemplate&)
MechGadgetBaseTemplate::IsInContainer(LevelContainer&)
non-virtual thunk to MechGadgetBaseTemplate::IsInContainer(LevelContainer&)
MechGadgetBaseTemplate::EventNotify(Event&, NuEventData&)
non-virtual thunk to MechGadgetBaseTemplate::EventNotify(Event&, NuEventData&)
MechGadgetBaseTemplateHelper::MechGadgetBaseTemplateHelper()
MechGadgetBaseTemplateHelper::Initialise()
MechGadgetBaseTemplateHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to MechGadgetBaseTemplateHelper::EventNotify(Event&, NuEventData&)
MechGadgetBaseInstance::Initialise()
MechGadgetBaseInstance::Fixup(LevelContainer*)
MechGadgetBaseInstance::Clone(LevelContainer const&)
MechGadgetBaseInstance::MechGadgetBaseInstance(EdRegContext&)
MechGadgetBaseInstance::MechGadgetBaseInstance(CoreGroup&, EdRegContext&, EdClass*)
MechGadgetBaseInstance::MechGadgetBaseInstance(MechGadgetBaseInstance&, EdRegContext&, EdClass*)
MechGadgetBaseInstance::MechGadgetBaseInstance(EdString&, EdRegContext&)
MechGadgetBaseInstance::GetClass() const
MechGadgetBaseInstance::SetTransform(VuMtx const&)
MechGadgetBaseInstance::SetPosition(VuVec const&)
MechGadgetBaseInstance::AddComponent(MechGadgetComponentInstance&, MechGadgetComponentTemplate*)
MechGadgetBaseInstance::LevelInit()
MechGadgetBaseInstance::UpdatePlacement()
MechCommonPhantomInterface::UpdatePhantom(bool)
MechGadgetBaseInstance::OnStateChange()
MechGadgetBaseInstance::IsInContainer(LevelContainer&)
MechGadgetBaseInstance::SetGlowing(bool)
MechGadgetBaseInstance::CheckResetBits()
MechGadgetBaseInstance::HasForgottenProgress()
MechGadgetBaseInstanceHelper::MechGadgetBaseInstanceHelper()
MechGadgetBaseInstanceHelper::Initialise()
MechGadgetBaseInstanceHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
MechGadgetBaseInstanceHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to MechGadgetBaseInstanceHelper::EventNotify(Event&, NuEventData&)
MechGadgetBaseInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetInterface::GetThrowingGlow()
MechGadgetInterface::LOS_GetPoint(NUVEC&, WORLDINFO*&, TARGETING_TYPE, int) const
MechGadgetInterface::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*)
MechGadgetInterface::GetIconPos(VuVec&, int)
MechGadgetInterface::GetArrowPos(VuVec&, int)
MechGadgetInterface::SetAlpha(float)
MechGadgetInterface::GetAlpha() const
MechGadgetInterface::GetAddOns() const
FlowCommonInterface_MechGadgetBaseInstance::FlowCommonInterface_MechGadgetBaseInstance(LevelContainer&)
FlowCommonInterface_MechGadgetBaseInstance::CloneObject(LevelContainer&, NUVEC&, NUMTX&, Gizmo*)
FlowCommonInterface_MechGadgetBaseInstance::GetLedFile()
FlowCommonInterface_MechGadgetBaseInstance::FadeIn(float)
FlowCommonInterface_MechGadgetBaseInstance::FadeOut(float)
MechGadgetBaseInstance::SerialiseProgressData(EdStream&)
FlowCommonInterface_MechGadgetBaseInstance::~FlowCommonInterface_MechGadgetBaseInstance()
FlowCommonInterface_MechGadgetBaseInstance::GetObject()
FlowCommonInterface_MechGadgetBaseInstance::GetTypeName()
FlowCommonInterface_MechGadgetBaseInstance::GetGizmoPrefix()
FlowCommonInterface_MechGadgetBaseInstance::GetClass()
FlowCommonInterface_MechGadgetBaseInstance::GetNumOutputs()
FlowCommonInterface_MechGadgetBaseInstance::GetOutput(int, int)
FlowCommonInterface_MechGadgetBaseInstance::GetDefaultOutputIndex()
FlowCommonInterface_MechGadgetBaseInstance::GetOutputName(int)
FlowCommonInterface_MechGadgetBaseInstance::Activate(bool)
FlowCommonInterface_MechGadgetBaseInstance::ActivateRev(int, int)
FlowCommonInterface_MechGadgetBaseInstance::SetVisibility(int)
FlowCommonInterface_MechGadgetBaseInstance::IsActive()
FlowCommonInterface_MechGadgetBaseInstance::IsVisible()
FlowCommonInterface_MechGadgetBaseInstance::AcquireSpecials()
FlowCommonInterface_MechGadgetBaseInstance::Reset()
FlowCommonInterface_MechGadgetBaseInstance::ActivateByComplexGizmo()
FlowCommonInterface_MechGadgetBaseInstance::ResetForLoop()
FlowCommonInterface_MechGadgetBaseInstance::GetTriggeredByPlayerId()
FlowCommonInterface_MechGadgetBaseInstance::SetTriggeredByPlayerId(MechCharacter*)
FlowCommonInterface_MechGadgetBaseInstance::GetBuilderOrigin(NUVEC*)
FlowCommonInterface_MechGadgetBaseInstance::GetRotationMatrix(NUMTX&)
FlowCommonInterface_MechGadgetBaseInstance::HideFromEditor()
FlowCommonInterface_MechGadgetBaseInstance::SetGlowing(bool)
FlowCommonInterface_MechGadgetBaseInstance::CanBeAddedToComplexGizmo()
FlowCommonInterface_MechGadgetBaseInstance::GetReference()
FlowCommonInterface_MechGadgetBaseInstance::JumpToComplete()
FlowCommonInterface_MechGadgetBaseInstance::TagAsInvolvedInFlow()
FlowCommonInterface_MechGadgetBaseInstance::IsInvolvedInFlow()
FlowCommonInterface_MechGadgetBaseInstance::SerialiseProgressData(EdStream&)
MechGadgetPhantomInterface::~MechGadgetPhantomInterface()
MechGadgetPhantomInterface::UpdatePhantomMinMax()
MechGadgetPhantomInterface::EvaluateInteraction(MechCharacter&)
MechGadgetPhantomInterface::StartInteraction(MechCharacter&)
MechGadgetPhantomInterface::GetContainer()
MechGadgetPhantomInterface::GetBaseObject()
MechGadgetInterface::~MechGadgetInterface()
MechGadgetInterface::GetInterfaceType() const
MechGadgetInterface::GetPos(VuVec&, int) const
MechGadgetInterface::GetTargetPos(VuVec&, TARGETING_TYPE, int)
MechGadgetInterface::GetTargetMom(VuVec&, TARGETING_TYPE)
MechGadgetInterface::GetTargetName() const
MechGadgetInterface::GetGameType()
MechGadgetInterface::GetLevelContainer() const
MechGadgetInterface::GetGadget() const
MechGadgetInterface::GetNuUniqueObject() const
MechGadgetInterface::BestToPunchIfPossible() const
MechGadgetBaseInstance::~MechGadgetBaseInstance()
MechGadgetBaseInstance::SetVisibility(int)
MechGadgetBaseInstance::IsGadgetSimpleProp(Entity*)
MechGadgetBaseInstance::Reset()
MechGadgetBaseInstance::RequiresKrawlieCollision()
MechGadgetBaseInstance::GetKrawlieCollisionRadius()
MechGadgetBaseInstance::IsPunchable(MechCharacter&, VuVec&, float&)
MechGadgetBaseInstance::Punch(MechCharacter&)
MechGadgetBaseInstance::GetNumOutputs()
MechGadgetBaseInstance::GetOutput(int, int)
MechGadgetBaseInstance::GetDefaultOutputIndex()
MechGadgetBaseInstance::GetOutputName(int)
MechGadgetBaseInstance::ActivateRev(int, int)
MechGadgetBaseInstance::RequiresPhantom()
MechGadgetBaseInstance::UpdatePhantomMinMax()
MechGadgetBaseInstance::IsPotentialBoltTarget(BoltTypeID const&)
MechGadgetBaseInstance::BeenHitByBolt(Bolt*)
non-virtual thunk to MechGadgetBaseInstance::~MechGadgetBaseInstance()
non-virtual thunk to MechGadgetBaseInstance::~MechGadgetBaseInstance()
MechGadgetBaseTemplate::~MechGadgetBaseTemplate()
MechGadgetBaseTemplate::~MechGadgetBaseTemplate()
non-virtual thunk to MechGadgetBaseTemplate::~MechGadgetBaseTemplate()
non-virtual thunk to MechGadgetBaseTemplate::~MechGadgetBaseTemplate()
non-virtual thunk to MechGadgetBaseTemplate::~MechGadgetBaseTemplate()
non-virtual thunk to MechGadgetBaseTemplate::~MechGadgetBaseTemplate()
MechGadgetBaseTemplateHelper::~MechGadgetBaseTemplateHelper()
non-virtual thunk to MechGadgetBaseTemplateHelper::~MechGadgetBaseTemplateHelper()
non-virtual thunk to MechGadgetBaseTemplateHelper::~MechGadgetBaseTemplateHelper()
MechGadgetBaseInstanceHelper::~MechGadgetBaseInstanceHelper()
non-virtual thunk to MechGadgetBaseInstanceHelper::~MechGadgetBaseInstanceHelper()
non-virtual thunk to MechGadgetBaseInstanceHelper::~MechGadgetBaseInstanceHelper()
MechCommonPhantomInterface::PhantomAddToScene()
MechGadgetScriptVariable::Init()
MechGadgetScriptVariable::Equals(ScriptVariable const*)
MechGadgetScriptVariable::LoadVariable(char const*)
SAction_MechGadget::Exec(ScriptContext&)
void ScriptContext::SetReturn<MechGadgetScriptVariable, MechGadgetBaseInstance*>(int, MechGadgetBaseInstance*)
SAction_LevelMechGadget::Exec(ScriptContext&)
MechGadgetAction::Exec(ScriptContext&)
MechGadgetAction_MechGadgetToText::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
MechGadgetAction_MechGadgetToPosition::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
void ScriptContext::SetReturn<SVarPos, VuVec&>(int, VuVec&)
MechGadgetAction_SetActive::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
MechGadgetAction_SetVisible::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
MechGadgetAction_GetOutput::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
MechGadgetAction_HasFinished::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
MechGadgetAction_Reset::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
MechGadgetAction_JumpToComplete::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
MechGadgetAction_GetPosition::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
MechGadgetAction_GetDirection::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
MechGadgetAction_BlowUp::MechGadgetExec(ScriptContext&, MechGadgetBaseInstance*)
DynamicScriptVariable<MechGadgetBaseInstance>::~DynamicScriptVariable()
MechGadgetScriptVariable::~MechGadgetScriptVariable()
MechGadgetScriptVariable::AsBool() const
MechGadgetScriptVariable::AsText() const
DynamicScriptVariable<MechGadgetBaseInstance>::Set(ScriptVariable const*)
DynamicScriptVariable<MechGadgetBaseInstance>::EventNotify(Event&, NuEventData&)
non-virtual thunk to MechGadgetScriptVariable::~MechGadgetScriptVariable()
non-virtual thunk to MechGadgetScriptVariable::~MechGadgetScriptVariable()
non-virtual thunk to DynamicScriptVariable<MechGadgetBaseInstance>::EventNotify(Event&, NuEventData&)
SAction_MechGadget::~SAction_MechGadget()
SAction_MechGadget::GetName() const
SAction_MechGadget::GetInputs(SCmdParams&) const
SAction_MechGadget::GetOutputs(SCmdParams&) const
SAction_LevelMechGadget::~SAction_LevelMechGadget()
SAction_LevelMechGadget::GetName() const
SAction_LevelMechGadget::GetInputs(SCmdParams&) const
SAction_LevelMechGadget::GetOutputs(SCmdParams&) const
MechGadgetAction::~MechGadgetAction()
MechGadgetAction_MechGadgetToText::~MechGadgetAction_MechGadgetToText()
MechGadgetAction_MechGadgetToText::GetName() const
MechGadgetAction_MechGadgetToText::GetInputs(SCmdParams&) const
MechGadgetAction_MechGadgetToText::GetOutputs(SCmdParams&) const
MechGadgetAction_MechGadgetToPosition::~MechGadgetAction_MechGadgetToPosition()
MechGadgetAction_MechGadgetToPosition::GetName() const
MechGadgetAction_MechGadgetToPosition::GetInputs(SCmdParams&) const
MechGadgetAction_MechGadgetToPosition::GetOutputs(SCmdParams&) const
MechGadgetAction_SetActive::~MechGadgetAction_SetActive()
MechGadgetAction_SetActive::GetName() const
MechGadgetAction_SetActive::GetInputs(SCmdParams&) const
MechGadgetAction_SetActive::GetOutputs(SCmdParams&) const
MechGadgetAction_SetVisible::~MechGadgetAction_SetVisible()
MechGadgetAction_SetVisible::GetName() const
MechGadgetAction_SetVisible::GetInputs(SCmdParams&) const
MechGadgetAction_SetVisible::GetOutputs(SCmdParams&) const
MechGadgetAction_GetOutput::~MechGadgetAction_GetOutput()
MechGadgetAction_GetOutput::GetName() const
MechGadgetAction_GetOutput::GetInputs(SCmdParams&) const
MechGadgetAction_GetOutput::GetOutputs(SCmdParams&) const
MechGadgetAction_HasFinished::~MechGadgetAction_HasFinished()
MechGadgetAction_HasFinished::GetName() const
MechGadgetAction_HasFinished::GetInputs(SCmdParams&) const
MechGadgetAction_HasFinished::GetOutputs(SCmdParams&) const
MechGadgetAction_Reset::~MechGadgetAction_Reset()
MechGadgetAction_Reset::GetName() const
MechGadgetAction_Reset::GetInputs(SCmdParams&) const
MechGadgetAction_Reset::GetOutputs(SCmdParams&) const
MechGadgetAction_JumpToComplete::~MechGadgetAction_JumpToComplete()
MechGadgetAction_JumpToComplete::GetName() const
MechGadgetAction_JumpToComplete::GetInputs(SCmdParams&) const
MechGadgetAction_JumpToComplete::GetOutputs(SCmdParams&) const
MechGadgetAction_GetPosition::~MechGadgetAction_GetPosition()
MechGadgetAction_GetPosition::GetName() const
MechGadgetAction_GetPosition::GetInputs(SCmdParams&) const
MechGadgetAction_GetPosition::GetOutputs(SCmdParams&) const
MechGadgetAction_GetDirection::~MechGadgetAction_GetDirection()
MechGadgetAction_GetDirection::GetName() const
MechGadgetAction_GetDirection::GetInputs(SCmdParams&) const
MechGadgetAction_GetDirection::GetOutputs(SCmdParams&) const
MechGadgetAction_BlowUp::~MechGadgetAction_BlowUp()
MechGadgetAction_BlowUp::GetName() const
MechGadgetAction_BlowUp::GetInputs(SCmdParams&) const
MechGadgetAction_BlowUp::GetOutputs(SCmdParams&) const
DynamicScriptVariable<MechGadgetBaseInstance>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<MechGadgetBaseInstance>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<MechGadgetBaseInstance>::~DynamicScriptVariable()
ScriptVariable* CreateObject<MechGadgetScriptVariable>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<MechGadgetScriptVariable>(char const*, ScriptContext&)
MechGadgetScriptVariable::MechGadgetScriptVariable(char const*, sDynamicVariableData&, ScriptContext&)
MechGadgetSimpleProps::Init()
MechGadgetSimplePropTemplateHelper::Initialise()
MechGadgetSimplePropInstanceHelper::Initialise()
MechGadgetSimpleProps::CreatePropTemplate(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetSimpleProps::CreatePropInstance(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetSimpleProps::IsPotentialExplosionVictim(MechGadgetSimplePropInstance&, MechCharacter*, unsigned int)
MechGadgetSimpleProps::BeenHitByExplosion(MechGadgetSimplePropInstance&, MechCharacter*, unsigned int)
MechGadgetSimplePropInstance::IsIndestructible()
MechGadgetSimplePropInstance::TakeHit(unsigned char, int)
MechGadgetSimplePropInstance::BlowUp(int, bool)
MechGadgetSimplePropTemplate::MechGadgetSimplePropTemplate(EdRegContext&)
MechGadgetSimplePropTemplate::GetClass() const
MechGadgetSimplePropTemplate::AddStates()
MechGadgetSimplePropTemplateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetSimplePropInstance::MechGadgetSimplePropInstance(EdRegContext&)
MechGadgetSimplePropInstance::MechGadgetSimplePropInstance(CoreGroup&, EdRegContext&)
MechGadgetSimplePropInstance::MechGadgetSimplePropInstance(MechGadgetSimplePropInstance&, EdRegContext&)
MechGadgetSimplePropInstance::MechGadgetSimplePropInstance(EdString&, EdRegContext&)
MechGadgetSimplePropInstance::GetClass() const
MechGadgetSimplePropInstance::Reset()
MechGadgetSimplePropInstance::RequiresKrawlieCollision()
MechGadgetSimplePropInstance::RequiresPhantom()
MechGadgetSimplePropInstance::UpdatePhantomMinMax()
MechGadgetSimplePropInstance::EvaluateInteraction(MechCharacter&)
MechGadgetSimplePropInstance::CanBeInteractedWith() const
MechGadgetSimplePropInstance::IsPotentialBoltTarget(BoltTypeID const&)
MechGadgetSimplePropInstance::BeenHitByBolt(Bolt*)
MechGadgetSimplePropInstance::IsPotentialExplosionVictim(MechCharacter*, unsigned int)
MechGadgetSimplePropInstance::BeenHitByExplosion(MechCharacter*, unsigned int)
MechGadgetSimplePropInstance::OnCollision(Entity*, Entity*)
MechGadgetSimplePropInstance::IsGadgetSimpleProp(Entity*)
MechGadgetSimplePropInstance::AllowSweepCollision(Entity const*, Entity const*)
MechGadgetSimplePropInstance::OnCollision(Entity*, Entity*, Array<ContactPoint>&)
MechGadgetSimplePropInstance::OnCollision(Entity*, Character*, ContactPoint&)
MechGadgetSimplePropInstance::IsPunchable(MechCharacter&, VuVec&, float&)
MechGadgetSimplePropInstance::Punch(MechCharacter&)
MechGadgetSimplePropInstance::SetNewMode(MechGadgetSimplePropInstance::eModes)
MechGadgetSimplePropInstance::OnAnimationComplete(CoreGroupState::eStateAnimPosition)
MechGadgetSimplePropInstance::ReallyReset()
MechGadgetSimplePropInstance::GetBlowupEvent()
MechGadgetSimplePropInstance::Respawn()
MechGadgetSimplePropInstance::StartHop()
MechGadgetSimplePropInstance::GetNumOutputs()
MechGadgetSimplePropInstance::GetOutput(int, int)
MechGadgetSimplePropInstance::GetOutputName(int)
MechGadgetSimplePropInstance::SetVisibility(int)
MechGadgetSimplePropInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetSimplePropChangeModeAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MechGadgetSimplePropChangeModeAddon::OnHook(unsigned char, HookArgs*)
MechGadgetSimplePropInstance::SerialiseProgressData(EdStream&)
MechGadgetSimplePropTemplateHelper::~MechGadgetSimplePropTemplateHelper()
non-virtual thunk to MechGadgetSimplePropTemplateHelper::~MechGadgetSimplePropTemplateHelper()
non-virtual thunk to MechGadgetSimplePropTemplateHelper::~MechGadgetSimplePropTemplateHelper()
MechGadgetSimplePropInstanceHelper::~MechGadgetSimplePropInstanceHelper()
non-virtual thunk to MechGadgetSimplePropInstanceHelper::~MechGadgetSimplePropInstanceHelper()
non-virtual thunk to MechGadgetSimplePropInstanceHelper::~MechGadgetSimplePropInstanceHelper()
MechGadgetSimplePropTemplate::~MechGadgetSimplePropTemplate()
MechGadgetSimplePropTemplate::AddBlowUpEffects(LevelContainer&, MechGadgetSimplePropInstance&)
non-virtual thunk to MechGadgetSimplePropTemplate::~MechGadgetSimplePropTemplate()
non-virtual thunk to MechGadgetSimplePropTemplate::~MechGadgetSimplePropTemplate()
non-virtual thunk to MechGadgetSimplePropTemplate::~MechGadgetSimplePropTemplate()
non-virtual thunk to MechGadgetSimplePropTemplate::~MechGadgetSimplePropTemplate()
MechGadgetSimplePropInstance::~MechGadgetSimplePropInstance()
non-virtual thunk to MechGadgetSimplePropInstance::~MechGadgetSimplePropInstance()
non-virtual thunk to MechGadgetSimplePropInstance::~MechGadgetSimplePropInstance()
MechGadgetSimpleProps::~MechGadgetSimpleProps()
MechGadgetSimpleProps::GetBoltDamage(MechGadgetSimplePropInstance&, Bolt&, bool&)
MechGadgetSimpleProps::GetVehicleHitDamage(MechGadgetSimplePropInstance&, MechCharacter&, bool&)
MechGadgetSimpleProps::GetVehicleHitDamage(MechGadgetSimplePropInstance&, ApiVehicle&, bool&)
MechGadgetSimpleProps::GetCharacterHitDamage(MechGadgetSimplePropInstance&, MechCharacter&, bool&)
MechGadgetSimpleProps::GetInstanceHelper() const
MechGadgetSimpleProps::FadeOutWhenDestroyed()
MechGadgetSimpleProps::RequestPunchHint(MechGadgetSimplePropInstance&, MechCharacter&)
MechGadgetSimpleProps::SetPunchHintComplete(MechGadgetSimplePropInstance&, MechCharacter&)
MechGadgetSimplePropChangeModeAddon::~MechGadgetSimplePropChangeModeAddon()
MechGadgetSimplePropChangeModeAddon::GetLevelContainer() const
non-virtual thunk to MechGadgetSimplePropChangeModeAddon::~MechGadgetSimplePropChangeModeAddon()
non-virtual thunk to MechGadgetSimplePropChangeModeAddon::~MechGadgetSimplePropChangeModeAddon()
non-virtual thunk to MechGadgetSimplePropChangeModeAddon::GetLevelContainer() const
MechGadgetSimplePropEventdata::~MechGadgetSimplePropEventdata()
MechGadgetAnimBlowUp::~MechGadgetAnimBlowUp()
MechGadgetAnimBlowUp::GetLength() const
MechGadgetAnimBlowUp::GetFrameRate() const
MechGadgetAnimBlowUp::OnStart(ProcAnimInterface&)
MechGadgetAnimBlowUp::OnStop(ProcAnimInterface&)
MechGadgetAnimBlowUp::OnPlaying(ProcAnimInterface&, float, float)
MechGadgetRemoteTemplate::MechGadgetRemoteTemplate(EdRegContext&)
MechGadgetRemoteTemplate::GetClass() const
MechGadgetRemoteTemplate::AddStates()
MechGadgetRemoteTemplateHelper::Initialise()
MechGadgetRemoteTemplateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetRemoteInstance::MechGadgetRemoteInstance(EdRegContext&)
MechGadgetRemoteInstance::MechGadgetRemoteInstance(CoreGroup&, EdRegContext&)
MechGadgetRemoteInstance::MechGadgetRemoteInstance(MechGadgetRemoteInstance&, EdRegContext&)
MechGadgetRemoteInstance::MechGadgetRemoteInstance(EdString&, EdRegContext&)
MechGadgetRemoteInstance::~MechGadgetRemoteInstance()
non-virtual thunk to MechGadgetRemoteInstance::~MechGadgetRemoteInstance()
MechGadgetRemoteInstance::~MechGadgetRemoteInstance()
non-virtual thunk to MechGadgetRemoteInstance::~MechGadgetRemoteInstance()
MechGadgetRemoteInstance::GetClass() const
MechGadgetRemoteInstance::OnStateChange()
MechGadgetRemoteInstance::UpdatePlacement()
MechGadgetRemoteInstance::AddComponents()
MechGadgetRemoteInstance::RequiresPhantom()
MechGadgetRemoteInstance::UpdatePhantomMinMax()
MechGadgetRemoteInstance::Reset()
MechGadgetRemoteInstance::GetHiddenObjectMask()
MechGadgetRemoteInstance::GetPadDirection()
MechGadgetRemoteInstance::GetUser()
MechGadgetRemoteInstance::GetNumOutputs()
MechGadgetRemoteInstance::GetOutput(int, int)
MechGadgetRemoteInstance::GetOutputName(int)
MechGadgetRemoteInstance::Activate(bool)
MechGadgetRemoteInstance::SetTargetState(unsigned int)
MechGadgetRemoteInstance::ActivateRev(int, int)
MechGadgetRemoteInstance::SetVisibility(int)
MechGadgetRemoteInstance::GetFloorTargetAlpha()
MechGadgetRemoteInstance::GetFloorTargetPos(VuVec&)
MechGadgetRemoteInstance::GetIconPos(VuVec&, int)
MechGadgetRemoteInstance::GetArrowPos(VuVec&, int)
MechGadgetRemoteInstance::GetHandlePos(VuVec&)
MechGadgetRemoteInstance::ShowTakeHereArrow(MechGadgetBaseInstance&, MechCharacter&)
MechGadgetRemoteInstance::DisplayItemRetrieveIcon(MechGadgetBaseInstance&)
MechGadgetRemoteInstanceHelper::Initialise()
MechGadgetRemoteInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetRemoteInstance::TriggerProximityReaction()
MechGadgetRemoteInstance::SetBeingUsed(MechCharacter*)
MechGadgetRemoteInstance::RecentlyBeenUsed()
MechGadgetRemoteInstance::EvaluateInteraction(MechCharacter&)
MechGadgetRemoteInstance::StartInteraction(MechCharacter&)
MechGadgetRemoteInstance::CanUseRemote(MechCharacter&)
MechGadgetRemoteInstance::ActivateRemote(MechCharacter&)
MechGadgetRemotes::SetRemoteContext(MechGadgetRemoteInstance&, MechCharacter&)
MechGadgetRemotes::IsInRemoteContext(MechGadgetRemoteInstance&, MechCharacter&)
MechGadgetRemotes::ClearRemoteContextPointers(LegoContextHandler*, MechGadgetRemoteInstance*)
MechGadgetRemotes::AllowedToExitRemoteBarrelContext(MechGadgetRemoteInstance*, MechCharacter&)
MechGadgetRemotes::ShouldExitRemoteBarrelContext(MechGadgetRemoteInstance*, MechCharacter&)
MechGadgetRemotes::ExitRemoteBarrelContext(MechGadgetRemoteInstance*, MechCharacter&)
MechGadgetRemotes::StartUsingRemote(MechGadgetRemoteInstance*, MechCharacter&)
MechGadgetRemotes::IsProvidingPadInput(MechGadgetRemoteInstance&, MechCharacter&)
MechGadgetRemotes::HasAbilityToUse(MechGadgetRemoteInstance*, MechCharacter&)
MechGadgetRemotes::GetFloorTargetIcons(MechGadgetRemoteInstance&, int&, int&)
MechGadgetRemotes::GetPromptPosition(MechGadgetRemoteInstance&, NUVEC&)
MechGadgetRemotes::GetArrowPosition(MechGadgetRemoteInstance&, NUVEC&)
MechGadgetRemoteInstance::ActivateCamera(bool, MechCharacter*)
RemoteAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to RemoteAddon::OnHook(unsigned char, HookArgs*)
RemoteAddon::OnAdded()
RemoteAddon::OnRemoved()
MechGadgetRemoteInstance::SerialiseProgressData(EdStream&)
MechGadgetRemoteTemplateHelper::~MechGadgetRemoteTemplateHelper()
non-virtual thunk to MechGadgetRemoteTemplateHelper::~MechGadgetRemoteTemplateHelper()
non-virtual thunk to MechGadgetRemoteTemplateHelper::~MechGadgetRemoteTemplateHelper()
MechGadgetRemoteInstanceHelper::~MechGadgetRemoteInstanceHelper()
non-virtual thunk to MechGadgetRemoteInstanceHelper::~MechGadgetRemoteInstanceHelper()
non-virtual thunk to MechGadgetRemoteInstanceHelper::~MechGadgetRemoteInstanceHelper()
MechGadgetRemoteTemplate::~MechGadgetRemoteTemplate()
MechGadgetRemoteTemplate::~MechGadgetRemoteTemplate()
non-virtual thunk to MechGadgetRemoteTemplate::~MechGadgetRemoteTemplate()
non-virtual thunk to MechGadgetRemoteTemplate::~MechGadgetRemoteTemplate()
non-virtual thunk to MechGadgetRemoteTemplate::~MechGadgetRemoteTemplate()
non-virtual thunk to MechGadgetRemoteTemplate::~MechGadgetRemoteTemplate()
MechGadgetRemotes::~MechGadgetRemotes()
MechGadgetRemotes::GetBarrelRiderRunAnim(GameObject&)
MechGadgetRemotes::DeactivateAtEnd(MechGadgetRemoteInstance&)
RemoteAddon::~RemoteAddon()
RemoteAddon::~RemoteAddon()
RemoteAddon::GetLevelContainer() const
non-virtual thunk to RemoteAddon::~RemoteAddon()
non-virtual thunk to RemoteAddon::~RemoteAddon()
non-virtual thunk to RemoteAddon::GetLevelContainer() const
MechGadgetRemoteInstance::GetHiddenMask()
MechGadgetRemoteInstance::GetDefaultOutputIndex()
MechGadgetTrafficLights::Init()
MechGadgetTrafficLightTemplateHelper::Initialise()
MechGadgetTrafficLightInstanceHelper::Initialise()
MechGadgetTrafficLights::CreateTrafficLightTemplate(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetTrafficLights::CreateTrafficLightInstance(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetTrafficLightTemplate::MechGadgetTrafficLightTemplate(EdRegContext&)
MechGadgetTrafficLightTemplate::GetClass() const
MechGadgetTrafficLightTemplate::AddStates()
MechGadgetTrafficLightTemplateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetTrafficLightTemplateHelper::MechGadgetTrafficLightTemplateHelper()
MechGadgetTrafficLightInstance::MechGadgetTrafficLightInstance(EdRegContext&)
MechGadgetTrafficLightInstance::MechGadgetTrafficLightInstance(CoreGroup&, EdRegContext&)
MechGadgetTrafficLightInstance::MechGadgetTrafficLightInstance(MechGadgetTrafficLightInstance&, EdRegContext&)
MechGadgetTrafficLightInstance::MechGadgetTrafficLightInstance(EdString&, EdRegContext&)
MechGadgetTrafficLightInstance::GetClass() const
MechGadgetTrafficLightInstance::GetHiddenMask()
MechGadgetTrafficLightInstance::SetLightStates(bool, bool, bool)
MechGadgetTrafficLightInstance::Reset()
MechGadgetTrafficLightInstance::RequiresKrawlieCollision()
MechGadgetTrafficLightInstance::RequiresPhantom()
MechGadgetTrafficLightInstance::UpdatePhantomMinMax()
MechGadgetTrafficLightInstance::CanBeInteractedWith() const
MechGadgetTrafficLightInstance::IsPotentialBoltTarget(BoltTypeID const&)
MechGadgetTrafficLightInstance::BeenHitByBolt(Bolt*)
MechGadgetTrafficLightInstance::BlowUp(int)
MechGadgetTrafficLightInstance::TakeHit(unsigned char)
MechGadgetTrafficLightInstance::OnCollision(Entity*, Entity*)
MechGadgetTrafficLightInstance::IsGadgetSimpleProp(Entity*)
MechGadgetTrafficLightInstance::OnCollision(Entity*, Entity*, Array<ContactPoint>&)
MechGadgetTrafficLightInstance::OnCollision(Entity*, Character*, ContactPoint&)
MechGadgetTrafficLightInstance::IsPunchable(MechCharacter&, VuVec&, float&)
MechGadgetTrafficLightInstance::Punch(MechCharacter&)
MechGadgetTrafficLightInstance::SetNewMode(MechGadgetTrafficLightInstance::eModes)
MechGadgetTrafficLightInstance::OnAnimationComplete(CoreGroupState::eStateAnimPosition)
MechGadgetTrafficLightInstance::ReallyReset()
MechGadgetTrafficLightInstance::Respawn()
MechGadgetTrafficLightInstance::GetNumOutputs()
MechGadgetTrafficLightInstance::GetOutput(int, int)
MechGadgetTrafficLightInstance::GetOutputName(int)
MechGadgetTrafficLightInstance::SetVisibility(int)
MechGadgetTrafficLightInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetTrafficLightAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MechGadgetTrafficLightAddon::OnHook(unsigned char, HookArgs*)
MechGadgetTrafficLightInstance::SerialiseProgressData(EdStream&)
MechGadgetTrafficLightInstanceHelper::~MechGadgetTrafficLightInstanceHelper()
non-virtual thunk to MechGadgetTrafficLightInstanceHelper::~MechGadgetTrafficLightInstanceHelper()
non-virtual thunk to MechGadgetTrafficLightInstanceHelper::~MechGadgetTrafficLightInstanceHelper()
MechGadgetTrafficLightTemplate::~MechGadgetTrafficLightTemplate()
MechGadgetTrafficLightTemplate::AddBlowUpEffects(LevelContainer&, MechGadgetTrafficLightInstance&)
non-virtual thunk to MechGadgetTrafficLightTemplate::~MechGadgetTrafficLightTemplate()
non-virtual thunk to MechGadgetTrafficLightTemplate::~MechGadgetTrafficLightTemplate()
non-virtual thunk to MechGadgetTrafficLightTemplate::~MechGadgetTrafficLightTemplate()
non-virtual thunk to MechGadgetTrafficLightTemplate::~MechGadgetTrafficLightTemplate()
MechGadgetTrafficLightInstance::~MechGadgetTrafficLightInstance()
non-virtual thunk to MechGadgetTrafficLightInstance::~MechGadgetTrafficLightInstance()
non-virtual thunk to MechGadgetTrafficLightInstance::~MechGadgetTrafficLightInstance()
MechGadgetTrafficLights::~MechGadgetTrafficLights()
MechGadgetTrafficLights::GetBoltDamage(MechGadgetTrafficLightInstance&, Bolt&, bool&)
MechGadgetTrafficLights::GetVehicleHitDamage(MechGadgetTrafficLightInstance&, MechCharacter&, bool&)
MechGadgetTrafficLights::GetVehicleHitDamage(MechGadgetTrafficLightInstance&, ApiVehicle&, bool&)
MechGadgetTrafficLights::GetCharacterHitDamage(MechGadgetTrafficLightInstance&, MechCharacter&, bool&)
MechGadgetTrafficLights::GetInstanceHelper() const
MechGadgetTrafficLightAddon::~MechGadgetTrafficLightAddon()
MechGadgetTrafficLightAddon::GetLevelContainer() const
non-virtual thunk to MechGadgetTrafficLightAddon::~MechGadgetTrafficLightAddon()
non-virtual thunk to MechGadgetTrafficLightAddon::~MechGadgetTrafficLightAddon()
non-virtual thunk to MechGadgetTrafficLightAddon::GetLevelContainer() const
MechGadgetTrafficLightTemplateHelper::~MechGadgetTrafficLightTemplateHelper()
non-virtual thunk to MechGadgetTrafficLightTemplateHelper::~MechGadgetTrafficLightTemplateHelper()
non-virtual thunk to MechGadgetTrafficLightTemplateHelper::~MechGadgetTrafficLightTemplateHelper()
MechGadgetAnimRespawn::GetLength() const
MechGadgetAnimRespawn::GetFrameRate() const
MechGadgetAnimRespawn::OnStart(ProcAnimInterface&)
MechGadgetAnimRespawn::OnStop(ProcAnimInterface&)
MechGadgetAnimRespawn::OnPlaying(ProcAnimInterface&, float, float)
MechGadgetAnimRespawn::~MechGadgetAnimRespawn()
MechGadgetAnimHop::GetLength() const
MechGadgetAnimHop::GetFrameRate() const
MechGadgetAnimHop::OnStart(ProcAnimInterface&)
MechGadgetAnimHop::OnStop(ProcAnimInterface&)
MechGadgetAnimHop::OnPlaying(ProcAnimInterface&, float, float)
MechGadgetAnimHop::~MechGadgetAnimHop()
MechGadgetAnimHitShake::GetLength() const
MechGadgetAnimHitShake::GetFrameRate() const
MechGadgetAnimHitShake::OnStart(ProcAnimInterface&)
MechGadgetAnimHitShake::OnStop(ProcAnimInterface&)
MechGadgetAnimHitShake::OnPlaying(ProcAnimInterface&, float, float)
MechGadgetAnimHitShake::~MechGadgetAnimHitShake()
MechGadgetAnimHitSpin::GetLength() const
MechGadgetAnimHitSpin::GetFrameRate() const
MechGadgetAnimHitSpin::OnStart(ProcAnimInterface&)
MechGadgetAnimHitSpin::OnStop(ProcAnimInterface&)
MechGadgetAnimHitSpin::OnPlaying(ProcAnimInterface&, float, float)
MechGadgetAnimHitSpin::~MechGadgetAnimHitSpin()
MechGadgetBeenHitAddOn::Create(MechGadgetBaseInstance&, unsigned int)
MechGadgetBeenHitAddOn::MechGadgetBeenHitAddOn(unsigned int)
MechGadgetBeenHitAddOn::OnAdded()
MechGadgetBeenHitAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MechGadgetBeenHitAddOn::OnHook(unsigned char, HookArgs*)
MechGadgetBeenHitAddOn::OnRemoved()
MechGadgetBeenHitAddOn::~MechGadgetBeenHitAddOn()
MechGadgetBeenHitAddOn::GetLevelContainer() const
non-virtual thunk to MechGadgetBeenHitAddOn::~MechGadgetBeenHitAddOn()
non-virtual thunk to MechGadgetBeenHitAddOn::~MechGadgetBeenHitAddOn()
non-virtual thunk to MechGadgetBeenHitAddOn::GetLevelContainer() const
StrongPtr<cAIVehicle>::operator new(unsigned long, void*)
StrongPtr<cAIVehicle>::operator delete(void*, void*)
StrongPtr<cAIVehicle>::operator new(unsigned long)
StrongPtr<cAIVehicle>::operator new(unsigned long, unsigned long)
StrongPtr<cAIVehicle>::operator new[](unsigned long)
StrongPtr<cAIVehicle>::operator new[](unsigned long, unsigned long)
StrongPtr<cAIVehicle>::operator delete(void*)
StrongPtr<cAIVehicle>::operator delete[](void*)
StrongPtr<cAIVehicle>::StrongPtr()
StrongPtr<cAIVehicle>::StrongPtr(StrongPtr<cAIVehicle> const&)
StrongPtr<cAIVehicle>::operator=(StrongPtr<cAIVehicle> const&)
StrongPtr<cAIVehicle>::releaseRef()
StrongPtr<cAIVehicle>::operator=(Null)
StrongPtr<cAIVehicle>::~StrongPtr()
StrongPtr<cAIVehicle>::operator*() const
StrongPtr<cAIVehicle>::operator->() const
StrongPtr<cAIVehicle>::get() const
StrongPtr<cAIVehicle>::StrongRefCount() const
StrongPtr<cAIVehicle>::WeakRefCount() const
StrongPtr<cAIVehicle>::IsNull() const
StrongPtr<cAIVehicle>::FudgeStrongRefCount()
StrongPtr<cAIVehicle>::StrongPtr(cAIVehicle*, RefCounts*)
WeakPtr<cAIVehicle>::WeakPtr()
WeakPtr<cAIVehicle>::WeakPtr(WeakPtr<cAIVehicle> const&)
WeakPtr<cAIVehicle>::operator=(WeakPtr<cAIVehicle> const&)
WeakPtr<cAIVehicle>::get() const
WeakPtr<cAIVehicle>::releaseRef()
WeakPtr<cAIVehicle>::operator=(Null)
WeakPtr<cAIVehicle>::~WeakPtr()
WeakPtr<cAIVehicle>::operator*() const
WeakPtr<cAIVehicle>::operator->() const
WeakPtr<cAIVehicle>::StrongRefCount() const
WeakPtr<cAIVehicle>::WeakRefCount() const
WeakPtr<cAIVehicle>::WeakPtr(cAIVehicle*, RefCounts*)
WeakPtr<cAIVehicle>::isNull() const
StrongPtr<cAITarget>::operator new(unsigned long, void*)
StrongPtr<cAITarget>::operator delete(void*, void*)
StrongPtr<cAITarget>::operator new(unsigned long)
StrongPtr<cAITarget>::operator new(unsigned long, unsigned long)
StrongPtr<cAITarget>::operator new[](unsigned long)
StrongPtr<cAITarget>::operator new[](unsigned long, unsigned long)
StrongPtr<cAITarget>::operator delete(void*)
StrongPtr<cAITarget>::operator delete[](void*)
StrongPtr<cAITarget>::StrongPtr()
StrongPtr<cAITarget>::StrongPtr(StrongPtr<cAITarget> const&)
StrongPtr<cAITarget>::operator=(StrongPtr<cAITarget> const&)
StrongPtr<cAITarget>::releaseRef()
StrongPtr<cAITarget>::operator=(Null)
StrongPtr<cAITarget>::~StrongPtr()
StrongPtr<cAITarget>::operator*() const
StrongPtr<cAITarget>::operator->() const
StrongPtr<cAITarget>::get() const
StrongPtr<cAITarget>::StrongRefCount() const
StrongPtr<cAITarget>::WeakRefCount() const
StrongPtr<cAITarget>::IsNull() const
StrongPtr<cAITarget>::FudgeStrongRefCount()
StrongPtr<cAITarget>::StrongPtr(cAITarget*, RefCounts*)
WeakPtr<cAITarget>::WeakPtr()
WeakPtr<cAITarget>::WeakPtr(WeakPtr<cAITarget> const&)
WeakPtr<cAITarget>::operator=(WeakPtr<cAITarget> const&)
WeakPtr<cAITarget>::get() const
WeakPtr<cAITarget>::releaseRef()
WeakPtr<cAITarget>::operator=(Null)
WeakPtr<cAITarget>::~WeakPtr()
WeakPtr<cAITarget>::operator*() const
WeakPtr<cAITarget>::operator->() const
WeakPtr<cAITarget>::StrongRefCount() const
WeakPtr<cAITarget>::WeakRefCount() const
WeakPtr<cAITarget>::WeakPtr(cAITarget*, RefCounts*)
WeakPtr<cAITarget>::isNull() const
StrongPtr<cAISectorNode>::operator new(unsigned long, void*)
StrongPtr<cAISectorNode>::operator delete(void*, void*)
StrongPtr<cAISectorNode>::operator new(unsigned long)
StrongPtr<cAISectorNode>::operator new(unsigned long, unsigned long)
StrongPtr<cAISectorNode>::operator new[](unsigned long)
StrongPtr<cAISectorNode>::operator new[](unsigned long, unsigned long)
StrongPtr<cAISectorNode>::operator delete(void*)
StrongPtr<cAISectorNode>::operator delete[](void*)
StrongPtr<cAISectorNode>::StrongPtr()
StrongPtr<cAISectorNode>::StrongPtr(StrongPtr<cAISectorNode> const&)
StrongPtr<cAISectorNode>::operator=(StrongPtr<cAISectorNode> const&)
StrongPtr<cAISectorNode>::releaseRef()
StrongPtr<cAISectorNode>::operator=(Null)
StrongPtr<cAISectorNode>::~StrongPtr()
StrongPtr<cAISectorNode>::operator*() const
StrongPtr<cAISectorNode>::operator->() const
StrongPtr<cAISectorNode>::get() const
StrongPtr<cAISectorNode>::StrongRefCount() const
StrongPtr<cAISectorNode>::WeakRefCount() const
StrongPtr<cAISectorNode>::IsNull() const
StrongPtr<cAISectorNode>::FudgeStrongRefCount()
StrongPtr<cAISectorNode>::StrongPtr(cAISectorNode*, RefCounts*)
WeakPtr<cAISectorNode>::WeakPtr()
WeakPtr<cAISectorNode>::WeakPtr(WeakPtr<cAISectorNode> const&)
WeakPtr<cAISectorNode>::operator=(WeakPtr<cAISectorNode> const&)
WeakPtr<cAISectorNode>::get() const
WeakPtr<cAISectorNode>::releaseRef()
WeakPtr<cAISectorNode>::operator=(Null)
WeakPtr<cAISectorNode>::~WeakPtr()
WeakPtr<cAISectorNode>::operator*() const
WeakPtr<cAISectorNode>::operator->() const
WeakPtr<cAISectorNode>::StrongRefCount() const
WeakPtr<cAISectorNode>::WeakRefCount() const
WeakPtr<cAISectorNode>::WeakPtr(cAISectorNode*, RefCounts*)
WeakPtr<cAISectorNode>::isNull() const
StrongPtr<cAIPathQuery>::operator new(unsigned long, void*)
StrongPtr<cAIPathQuery>::operator delete(void*, void*)
StrongPtr<cAIPathQuery>::operator new(unsigned long)
StrongPtr<cAIPathQuery>::operator new(unsigned long, unsigned long)
StrongPtr<cAIPathQuery>::operator new[](unsigned long)
StrongPtr<cAIPathQuery>::operator new[](unsigned long, unsigned long)
StrongPtr<cAIPathQuery>::operator delete(void*)
StrongPtr<cAIPathQuery>::operator delete[](void*)
StrongPtr<cAIPathQuery>::StrongPtr()
StrongPtr<cAIPathQuery>::StrongPtr(StrongPtr<cAIPathQuery> const&)
StrongPtr<cAIPathQuery>::operator=(StrongPtr<cAIPathQuery> const&)
StrongPtr<cAIPathQuery>::releaseRef()
StrongPtr<cAIPathQuery>::operator=(Null)
StrongPtr<cAIPathQuery>::~StrongPtr()
StrongPtr<cAIPathQuery>::operator*() const
StrongPtr<cAIPathQuery>::operator->() const
StrongPtr<cAIPathQuery>::get() const
StrongPtr<cAIPathQuery>::StrongRefCount() const
StrongPtr<cAIPathQuery>::WeakRefCount() const
StrongPtr<cAIPathQuery>::IsNull() const
StrongPtr<cAIPathQuery>::FudgeStrongRefCount()
StrongPtr<cAIPathQuery>::StrongPtr(cAIPathQuery*, RefCounts*)
WeakPtr<cAIPathQuery>::WeakPtr()
WeakPtr<cAIPathQuery>::WeakPtr(WeakPtr<cAIPathQuery> const&)
WeakPtr<cAIPathQuery>::operator=(WeakPtr<cAIPathQuery> const&)
WeakPtr<cAIPathQuery>::get() const
WeakPtr<cAIPathQuery>::releaseRef()
WeakPtr<cAIPathQuery>::operator=(Null)
WeakPtr<cAIPathQuery>::~WeakPtr()
WeakPtr<cAIPathQuery>::operator*() const
WeakPtr<cAIPathQuery>::operator->() const
WeakPtr<cAIPathQuery>::StrongRefCount() const
WeakPtr<cAIPathQuery>::WeakRefCount() const
WeakPtr<cAIPathQuery>::WeakPtr(cAIPathQuery*, RefCounts*)
WeakPtr<cAIPathQuery>::isNull() const
StrongPtr<cAIAttractor>::operator new(unsigned long, void*)
StrongPtr<cAIAttractor>::operator delete(void*, void*)
StrongPtr<cAIAttractor>::operator new(unsigned long)
StrongPtr<cAIAttractor>::operator new(unsigned long, unsigned long)
StrongPtr<cAIAttractor>::operator new[](unsigned long)
StrongPtr<cAIAttractor>::operator new[](unsigned long, unsigned long)
StrongPtr<cAIAttractor>::operator delete(void*)
StrongPtr<cAIAttractor>::operator delete[](void*)
StrongPtr<cAIAttractor>::StrongPtr()
StrongPtr<cAIAttractor>::StrongPtr(StrongPtr<cAIAttractor> const&)
StrongPtr<cAIAttractor>::operator=(StrongPtr<cAIAttractor> const&)
StrongPtr<cAIAttractor>::releaseRef()
StrongPtr<cAIAttractor>::operator=(Null)
StrongPtr<cAIAttractor>::~StrongPtr()
StrongPtr<cAIAttractor>::operator*() const
StrongPtr<cAIAttractor>::operator->() const
StrongPtr<cAIAttractor>::get() const
StrongPtr<cAIAttractor>::StrongRefCount() const
StrongPtr<cAIAttractor>::WeakRefCount() const
StrongPtr<cAIAttractor>::IsNull() const
StrongPtr<cAIAttractor>::FudgeStrongRefCount()
StrongPtr<cAIAttractor>::StrongPtr(cAIAttractor*, RefCounts*)
WeakPtr<cAIAttractor>::WeakPtr()
WeakPtr<cAIAttractor>::WeakPtr(WeakPtr<cAIAttractor> const&)
WeakPtr<cAIAttractor>::operator=(WeakPtr<cAIAttractor> const&)
WeakPtr<cAIAttractor>::get() const
WeakPtr<cAIAttractor>::releaseRef()
WeakPtr<cAIAttractor>::operator=(Null)
WeakPtr<cAIAttractor>::~WeakPtr()
WeakPtr<cAIAttractor>::operator*() const
WeakPtr<cAIAttractor>::operator->() const
WeakPtr<cAIAttractor>::StrongRefCount() const
WeakPtr<cAIAttractor>::WeakRefCount() const
WeakPtr<cAIAttractor>::WeakPtr(cAIAttractor*, RefCounts*)
WeakPtr<cAIAttractor>::isNull() const
StrongPtr<cAnimAttractor>::operator new(unsigned long, void*)
StrongPtr<cAnimAttractor>::operator delete(void*, void*)
StrongPtr<cAnimAttractor>::operator new(unsigned long)
StrongPtr<cAnimAttractor>::operator new(unsigned long, unsigned long)
StrongPtr<cAnimAttractor>::operator new[](unsigned long)
StrongPtr<cAnimAttractor>::operator new[](unsigned long, unsigned long)
StrongPtr<cAnimAttractor>::operator delete(void*)
StrongPtr<cAnimAttractor>::operator delete[](void*)
StrongPtr<cAnimAttractor>::StrongPtr()
StrongPtr<cAnimAttractor>::StrongPtr(StrongPtr<cAnimAttractor> const&)
StrongPtr<cAnimAttractor>::operator=(StrongPtr<cAnimAttractor> const&)
StrongPtr<cAnimAttractor>::releaseRef()
StrongPtr<cAnimAttractor>::operator=(Null)
StrongPtr<cAnimAttractor>::~StrongPtr()
StrongPtr<cAnimAttractor>::operator*() const
StrongPtr<cAnimAttractor>::operator->() const
StrongPtr<cAnimAttractor>::get() const
StrongPtr<cAnimAttractor>::StrongRefCount() const
StrongPtr<cAnimAttractor>::WeakRefCount() const
StrongPtr<cAnimAttractor>::IsNull() const
StrongPtr<cAnimAttractor>::FudgeStrongRefCount()
StrongPtr<cAnimAttractor>::StrongPtr(cAnimAttractor*, RefCounts*)
WeakPtr<cAnimAttractor>::WeakPtr()
WeakPtr<cAnimAttractor>::WeakPtr(WeakPtr<cAnimAttractor> const&)
WeakPtr<cAnimAttractor>::operator=(WeakPtr<cAnimAttractor> const&)
WeakPtr<cAnimAttractor>::get() const
WeakPtr<cAnimAttractor>::releaseRef()
WeakPtr<cAnimAttractor>::operator=(Null)
WeakPtr<cAnimAttractor>::~WeakPtr()
WeakPtr<cAnimAttractor>::operator*() const
WeakPtr<cAnimAttractor>::operator->() const
WeakPtr<cAnimAttractor>::StrongRefCount() const
WeakPtr<cAnimAttractor>::WeakRefCount() const
WeakPtr<cAnimAttractor>::WeakPtr(cAnimAttractor*, RefCounts*)
WeakPtr<cAnimAttractor>::isNull() const
StrongPtr<cAIRingAttractor>::operator new(unsigned long, void*)
StrongPtr<cAIRingAttractor>::operator delete(void*, void*)
StrongPtr<cAIRingAttractor>::operator new(unsigned long)
StrongPtr<cAIRingAttractor>::operator new(unsigned long, unsigned long)
StrongPtr<cAIRingAttractor>::operator new[](unsigned long)
StrongPtr<cAIRingAttractor>::operator new[](unsigned long, unsigned long)
StrongPtr<cAIRingAttractor>::operator delete(void*)
StrongPtr<cAIRingAttractor>::operator delete[](void*)
StrongPtr<cAIRingAttractor>::StrongPtr()
StrongPtr<cAIRingAttractor>::StrongPtr(StrongPtr<cAIRingAttractor> const&)
StrongPtr<cAIRingAttractor>::operator=(StrongPtr<cAIRingAttractor> const&)
StrongPtr<cAIRingAttractor>::releaseRef()
StrongPtr<cAIRingAttractor>::operator=(Null)
StrongPtr<cAIRingAttractor>::~StrongPtr()
StrongPtr<cAIRingAttractor>::operator*() const
StrongPtr<cAIRingAttractor>::operator->() const
StrongPtr<cAIRingAttractor>::get() const
StrongPtr<cAIRingAttractor>::StrongRefCount() const
StrongPtr<cAIRingAttractor>::WeakRefCount() const
StrongPtr<cAIRingAttractor>::IsNull() const
StrongPtr<cAIRingAttractor>::FudgeStrongRefCount()
StrongPtr<cAIRingAttractor>::StrongPtr(cAIRingAttractor*, RefCounts*)
WeakPtr<cAIRingAttractor>::WeakPtr()
WeakPtr<cAIRingAttractor>::WeakPtr(WeakPtr<cAIRingAttractor> const&)
WeakPtr<cAIRingAttractor>::operator=(WeakPtr<cAIRingAttractor> const&)
WeakPtr<cAIRingAttractor>::get() const
WeakPtr<cAIRingAttractor>::releaseRef()
WeakPtr<cAIRingAttractor>::operator=(Null)
WeakPtr<cAIRingAttractor>::~WeakPtr()
WeakPtr<cAIRingAttractor>::operator*() const
WeakPtr<cAIRingAttractor>::operator->() const
WeakPtr<cAIRingAttractor>::StrongRefCount() const
WeakPtr<cAIRingAttractor>::WeakRefCount() const
WeakPtr<cAIRingAttractor>::WeakPtr(cAIRingAttractor*, RefCounts*)
WeakPtr<cAIRingAttractor>::isNull() const
StrongPtr<cAIQueueAttractor>::operator new(unsigned long, void*)
StrongPtr<cAIQueueAttractor>::operator delete(void*, void*)
StrongPtr<cAIQueueAttractor>::operator new(unsigned long)
StrongPtr<cAIQueueAttractor>::operator new(unsigned long, unsigned long)
StrongPtr<cAIQueueAttractor>::operator new[](unsigned long)
StrongPtr<cAIQueueAttractor>::operator new[](unsigned long, unsigned long)
StrongPtr<cAIQueueAttractor>::operator delete(void*)
StrongPtr<cAIQueueAttractor>::operator delete[](void*)
StrongPtr<cAIQueueAttractor>::StrongPtr()
StrongPtr<cAIQueueAttractor>::StrongPtr(StrongPtr<cAIQueueAttractor> const&)
StrongPtr<cAIQueueAttractor>::operator=(StrongPtr<cAIQueueAttractor> const&)
StrongPtr<cAIQueueAttractor>::releaseRef()
StrongPtr<cAIQueueAttractor>::operator=(Null)
StrongPtr<cAIQueueAttractor>::~StrongPtr()
StrongPtr<cAIQueueAttractor>::operator*() const
StrongPtr<cAIQueueAttractor>::operator->() const
StrongPtr<cAIQueueAttractor>::get() const
StrongPtr<cAIQueueAttractor>::StrongRefCount() const
StrongPtr<cAIQueueAttractor>::WeakRefCount() const
StrongPtr<cAIQueueAttractor>::IsNull() const
StrongPtr<cAIQueueAttractor>::FudgeStrongRefCount()
StrongPtr<cAIQueueAttractor>::StrongPtr(cAIQueueAttractor*, RefCounts*)
WeakPtr<cAIQueueAttractor>::WeakPtr()
WeakPtr<cAIQueueAttractor>::WeakPtr(WeakPtr<cAIQueueAttractor> const&)
WeakPtr<cAIQueueAttractor>::operator=(WeakPtr<cAIQueueAttractor> const&)
WeakPtr<cAIQueueAttractor>::get() const
WeakPtr<cAIQueueAttractor>::releaseRef()
WeakPtr<cAIQueueAttractor>::operator=(Null)
WeakPtr<cAIQueueAttractor>::~WeakPtr()
WeakPtr<cAIQueueAttractor>::operator*() const
WeakPtr<cAIQueueAttractor>::operator->() const
WeakPtr<cAIQueueAttractor>::StrongRefCount() const
WeakPtr<cAIQueueAttractor>::WeakRefCount() const
WeakPtr<cAIQueueAttractor>::WeakPtr(cAIQueueAttractor*, RefCounts*)
WeakPtr<cAIQueueAttractor>::isNull() const
StrongPtr<cAISingleAttractor>::operator new(unsigned long, void*)
StrongPtr<cAISingleAttractor>::operator delete(void*, void*)
StrongPtr<cAISingleAttractor>::operator new(unsigned long)
StrongPtr<cAISingleAttractor>::operator new(unsigned long, unsigned long)
StrongPtr<cAISingleAttractor>::operator new[](unsigned long)
StrongPtr<cAISingleAttractor>::operator new[](unsigned long, unsigned long)
StrongPtr<cAISingleAttractor>::operator delete(void*)
StrongPtr<cAISingleAttractor>::operator delete[](void*)
StrongPtr<cAISingleAttractor>::StrongPtr()
StrongPtr<cAISingleAttractor>::StrongPtr(StrongPtr<cAISingleAttractor> const&)
StrongPtr<cAISingleAttractor>::operator=(StrongPtr<cAISingleAttractor> const&)
StrongPtr<cAISingleAttractor>::releaseRef()
StrongPtr<cAISingleAttractor>::operator=(Null)
StrongPtr<cAISingleAttractor>::~StrongPtr()
StrongPtr<cAISingleAttractor>::operator*() const
StrongPtr<cAISingleAttractor>::operator->() const
StrongPtr<cAISingleAttractor>::get() const
StrongPtr<cAISingleAttractor>::StrongRefCount() const
StrongPtr<cAISingleAttractor>::WeakRefCount() const
StrongPtr<cAISingleAttractor>::IsNull() const
StrongPtr<cAISingleAttractor>::FudgeStrongRefCount()
StrongPtr<cAISingleAttractor>::StrongPtr(cAISingleAttractor*, RefCounts*)
WeakPtr<cAISingleAttractor>::WeakPtr()
WeakPtr<cAISingleAttractor>::WeakPtr(WeakPtr<cAISingleAttractor> const&)
WeakPtr<cAISingleAttractor>::operator=(WeakPtr<cAISingleAttractor> const&)
WeakPtr<cAISingleAttractor>::get() const
WeakPtr<cAISingleAttractor>::releaseRef()
WeakPtr<cAISingleAttractor>::operator=(Null)
WeakPtr<cAISingleAttractor>::~WeakPtr()
WeakPtr<cAISingleAttractor>::operator*() const
WeakPtr<cAISingleAttractor>::operator->() const
WeakPtr<cAISingleAttractor>::StrongRefCount() const
WeakPtr<cAISingleAttractor>::WeakRefCount() const
WeakPtr<cAISingleAttractor>::WeakPtr(cAISingleAttractor*, RefCounts*)
WeakPtr<cAISingleAttractor>::isNull() const
TrailerModelIdsCache::Clear()
TrailerModelIdsCache::Add(short, unsigned short)
TrailerModelIdsCache::Find(short)
cAINode::cAINode(eAINodeType)
cAINode::cAINode()
cAINode::~cAINode()
cAINode::RemoveNeighour(iAILink*, bool) const
cAINode::~cAINode()
cAINode::IsVehicleNode() const
cAINode::AddNeighbour(iAILink*)
cAINode::Load(AIManager&, NuArchive&, int const&, bool)
cAINode::SimpleLoad(NuArchive&, int const&)
cAINode::FullLoad(AIManager&, NuArchive&, int const&)
cAINode::IsNeighbour(cAINode const*, unsigned int) const
cAINode::Update()
cAISectorNode::cAISectorNode(cAIWorldNode*)
cAISectorNode::~cAISectorNode()
cAISectorNode::~cAISectorNode()
cAISectorNode::Init(StrongPtr<cAISectorNode>)
cAISectorNode::RequestLoad()
cAISectorNode::FullLoad(AIManager&, unsigned int, unsigned int)
cAISectorNode::DoDynamicLoad(void*)
cAISectorNode::DoDynamicActivate(void*)
cAISectorNode::FullActivate()
cAISectorNode::RequestUnload()
cAISectorNode::RequestActivate()
cAISectorNode::RequestDeactivate()
cAISectorNode::GetConnectingPortals(cAISectorNode const*, unsigned int) const
cAISectorNode::GetPortalIndex(cAIPortalNode const&) const
cAISectorNode::AddPortal(cAIPortalNode*)
cAISectorNode::RemovePortal(cAIPortalNode*)
cAISectorNode::AddJunction(cAIJunctionNode*)
cAISectorNode::RemoveJunction(cAIJunctionNode*)
cAISectorNode::FindJunction(cAINode*)
cAISectorNode::AddLane(AIRoadLane*)
cAISectorNode::RemoveLane(AIRoadLane*)
cAISectorNode::AddTrafficLightNode(AITrafficLightNode*)
cAISectorNode::RemoveTrafficLightNode(AITrafficLightNode*)
cAISectorNode::InvalidateWorldNode()
cAISectorNode::DestroyLanes()
cAISectorNode::DestroyTrafficLights()
cAISectorNode::IsInArea(ConvexArea*) const
cAISectorNode::EnableNetworkInArea(ConvexArea*, unsigned int)
cAISectorNode::EnableRoad(cAIRoadLink*)
cAISectorNode::DisableNetworkInArea(ConvexArea*, unsigned int)
cAISectorNode::DisableRoad(cAIRoadLink*, bool, bool)
cAISectorNode::DoLoad(AIManager&, NuArchive&, int const&)
cAISectorNode::GetNodeInstanceByType(eAINodeType)
cAISectorNode::RouteablePortalSet::Deserialize(NuArchive&, int const&)
cAISectorNode::Update()
cAISectorNode::RouteablePortalSet::Get(unsigned int, unsigned int) const
cAISectorNode::RouteablePortalSet::GetWeight(unsigned int, unsigned int) const
cAISectorNode::RouteablePortalSet::GetFlags(unsigned int, unsigned int) const
cAISectorNode::RouteablePortalSet::RouteablePortalSet()
cAISectorNode::RouteablePortalSet::~RouteablePortalSet()
cAISectorNode::GetNodeInstanceByTypeHook(eAINodeType)
cAISectorNode::SectorEventData::~SectorEventData()
cAIWorldNode::cAIWorldNode(LevelContainer*)
cAIWorldNode::~cAIWorldNode()
cAIWorldNode::Destroy()
cAIWorldNode::~cAIWorldNode()
cAIWorldNode::GetFrom(LevelContainer const&)
cAIWorldNode::Setup(LevelContainer*)
cAIWorldNode::RemoveAllDisabledAreas()
cAIWorldNode::AddSector(StrongPtr<cAISectorNode>, bool)
cAIWorldNode::CalculateSectorIndex(VuVec const&, cAIWorldNode const&)
cAIWorldNode::RemoveSector(WeakPtr<cAISectorNode>, bool)
cAIWorldNode::AddPortalLink(cAIPortalLink*)
cAIWorldNode::RemovePortalLink(cAIPortalLink*)
cAIWorldNode::GetSector(int) const
cAIWorldNode::GetSector(VuVec const&) const
cAIWorldNode::GetSectorIndex(cAIWorldNode const&, VuVec const&)
cAIWorldNode::GetNearestLink(VuVec const&, VuVec const&, unsigned int, bool) const
cAIWorldNode::GetSectorCell(VuVec const&, int&, int&, cAIWorldNode const&)
cAIWorldNode::GetNearestLink(WeakPtr<cAISectorNode>, VuVec const&, VuVec const&, unsigned int, bool, float) const
cAIWorldNode::GetNearestRoadLink(WeakPtr<cAISectorNode>, VuVec const&, VuVec const&, float, bool) const
cAIWorldNode::GetNearestNode(VuVec const&, VuVec const&, unsigned int, bool, bool&, unsigned int, char) const
cAIWorldNode::GetNearestNode(WeakPtr<cAISectorNode>, VuVec const&, VuVec const&, unsigned int, bool, unsigned int, char) const
cAIWorldNode::CanSpawn(cAINode const*, MechCharacter*, bool, float, float, float) const
cAIWorldNode::GetRandomNode(MechCharacter*, float, float, bool, float, unsigned int) const
cAIWorldNode::IsOnRoad(VuVec const&, VuVec const&, float, float, bool) const
cAIWorldNode::IsOnRoadLane(VuVec const&) const
cAIWorldNode::DoLoad(unsigned int, StreamingLevelInfo const&)
cAIWorldNode::Update()
cAIWorldNode::EnableNetworkInArea(ConvexArea*, unsigned int)
cAIWorldNode::RemoveDisabledArea(ConvexArea*, unsigned int)
cAIWorldNode::DisableNetworkInArea(ConvexArea*, unsigned int)
cAIWorldNode::CheckNetworkDisabled(WeakPtr<cAISectorNode>)
cAIWorldNode::OnStreamingLevelAreaInitialised(StreamingLevel*, VuVec const&, float)
cAIWorldNode::GetSectorPosFromIndex(cAIWorldNode const&, unsigned int)
cAIWorldNode::CalculateSectorPos(unsigned int, cAIWorldNode const&)
cAIWorldNode::GetStrongSector(unsigned int) const
cAIWorldNode::CreateSectorNode()
StrongPtr<cAISectorNode> create<cAISectorNode, cAIWorldNode*>(cAIWorldNode*)
NuListFind<cAIPortalLink*, NuListNode<cAIPortalLink*> >::Remove(NuListNode<cAIPortalLink*>*, NuListNode<cAIPortalLink*>*, cAIPortalLink* const&)
NuListFind<sNetworkArea*, NuListNode<sNetworkArea*> >::Remove(NuListNode<sNetworkArea*>*, NuListNode<sNetworkArea*>*, sNetworkArea* const&)
cAIRoadLink::cAIRoadLink()
cAIRoadLink::cAIRoadLink(cAINode const*, cAINode const*)
cAIRoadLink::~cAIRoadLink()
cAIRoadLink::~cAIRoadLink()
cAIRoadLink::SetRoadLane(AIRoadLane const*)
cAIRoadLink::Load(NuArchive&, int const&, NuList<cAINode const*> const&, NuList<cAIPortalNode*> const&)
cAINodeLink::NodeA() const
cAINodeLink::NodeB() const
cAINodeLink::GetWeight() const
cAINodeLink::GetTraversalCost() const
cAIRoadNode::cAIRoadNode()
cAIRoadNode::~cAIRoadNode()
cAIRoadNode::~cAIRoadNode()
cAIJunctionNode::cAIJunctionNode(WeakPtr<cAISectorNode>)
cAIJunctionNode::~cAIJunctionNode()
cAIJunctionNode::RemoveSemaphore(iSemaphoreBase const*)
cAIJunctionNode::~cAIJunctionNode()
cAIJunctionNode::AddSemaphore(iSemaphoreBase const*)
cAIJunctionNode::UpdateTrafficLightState(unsigned int)
cAIJunctionNode::GetTrafficLightNodeByIndex(unsigned int) const
cAIJunctionNode::Update()
cAIJunctionNode::GetSemaphoreByIndex(unsigned int) const
cAIJunctionNode::IsActiveSemaphore(iSemaphoreBase const*) const
cAIJunctionNode::GetSemaphorePortalFromList(NuList<cAIPortalNode*> const&, int)
cAIJunctionNode::GetSemaphoreFromList(NuList<cAINode const*> const&, int)
cAIJunctionNode::DoLoad(AIManager&, NuArchive&, int const&, NuList<cAINode const*> const&, NuList<cAIPortalNode*> const&)
cAIJunctionNode::DoLoadHook(AIManager&, NuArchive&, NuList<cAINode const*> const&, NuList<cAIPortalNode*> const&)
cAISemaphoreNode::cAISemaphoreNode(eAINodeType)
cAISemaphoreNode::~cAISemaphoreNode()
non-virtual thunk to cAISemaphoreNode::~cAISemaphoreNode()
cAISemaphoreNode::~cAISemaphoreNode()
non-virtual thunk to cAISemaphoreNode::~cAISemaphoreNode()
cAISemaphoreNode::Activate()
non-virtual thunk to cAISemaphoreNode::Activate()
cAISemaphoreNode::Deactivate()
non-virtual thunk to cAISemaphoreNode::Deactivate()
cAISemaphoreNode::EnableAllLinks() const
non-virtual thunk to cAISemaphoreNode::EnableAllLinks() const
cAISemaphoreNode::DisableAllLinks() const
non-virtual thunk to cAISemaphoreNode::DisableAllLinks() const
cAISemaphoreNode::Load(AIManager&, NuArchive&, int const&, bool)
cAISemaphoreNode::IsVehicleSemaphore() const
non-virtual thunk to cAISemaphoreNode::IsVehicleSemaphore() const
cAISemaphorePortal::cAISemaphorePortal(WeakPtr<cAISectorNode>, eAINodeType)
cAISemaphorePortal::~cAISemaphorePortal()
non-virtual thunk to cAISemaphorePortal::~cAISemaphorePortal()
cAISemaphorePortal::~cAISemaphorePortal()
non-virtual thunk to cAISemaphorePortal::~cAISemaphorePortal()
cAISemaphorePortal::Load(AIManager&, NuArchive&, int const&, bool)
cAISemaphorePortal::Activate()
non-virtual thunk to cAISemaphorePortal::Activate()
cAISemaphorePortal::Deactivate()
non-virtual thunk to cAISemaphorePortal::Deactivate()
cAISemaphorePortal::EnableAllLinks() const
non-virtual thunk to cAISemaphorePortal::EnableAllLinks() const
cAISemaphorePortal::DisableAllLinks() const
non-virtual thunk to cAISemaphorePortal::DisableAllLinks() const
cAISemaphorePortal::IsVehicleSemaphore() const
non-virtual thunk to cAISemaphorePortal::IsVehicleSemaphore() const
cAIPortalNode::IsPortal() const
AIRoadLane::AIRoadLane(WeakPtr<cAISectorNode>)
AIRoadLane::~AIRoadLane()
AIRoadLane::Clear()
AIRoadLane::~AIRoadLane()
GetAILinkByIndex(NuList<iAILink*>&, NuList<cAIPortalLink*>&, AIRoadLaneLinkHandle)
AIRoadLane::Load(NuArchive&, NuList<iAILink*>&, NuList<cAIPortalLink*>&)
AIRoadLane::GetStartingNode() const
AIRoadLane::GetClosingNode() const
AITrafficLightNode::AITrafficLightNode(WeakPtr<cAISectorNode>)
AITrafficLightNode::~AITrafficLightNode()
AITrafficLightNode::~AITrafficLightNode()
AITrafficLightNode::Load(NuArchive&)
AITrafficLightNode::FindTrafficLightGadget()
SatNavNode::SatNavNode()
SatNavNode::~SatNavNode()
SatNavNode::Deserialise(NuArchive&)
SatNavLink::SatNavLink()
SatNavLink::~SatNavLink()
SatNavLink::Deserialise(NuArchive&, int const&)
SatNavQuadTreeNode::SatNavQuadTreeNode()
SatNavQuadTreeNode::~SatNavQuadTreeNode()
SatNavQuadTreeNode::Deserialise(NuArchive&)
QuadTreeNodeIntersect::Classify(float, float, float, float, float, float)
SatNavQuadTreeNode::IntersectTest(VuVec const&, float, VuVec const&, VuVec const&)
SatNavQuadTreeNode::GetNearestLink(SatNavQuadTreeNode::SatNavNearestLinkQuery const&, unsigned int, float, float&, short&)
sAIQueryHeader::sAIQueryHeader()
sAIQueryHeader::~sAIQueryHeader()
sPath::sPath()
sPath::~sPath()
sQueryData::sQueryData()
sQueryData::~sQueryData()
cAIPathQuery::cAIPathQuery()
cAIPathQuery::~cAIPathQuery()
cAIPathQuery::Setup(WeakPtr<cAITarget>, WeakPtr<cAITarget>, unsigned int)
cAIPathQuery::Reset(NuList<cAINode const*> const*, cAIWorldNode const*, NuList<StrongPtr<cAISectorNode> > const*)
cAIPathQuery::IsValid() const
cAIPathQuery::BuildAndSetRoughPath(NuList<cAINode const*> const&, cAIWorldNode const&)
cAIPathQuery::SetExplicitPath(NuList<cAINode const*>&, cAIWorldNode const&)
cAIPathQuery::UpdatePath(NuList<cAINode const*>&)
cAIPathQuery::GetCurrentLink(NuList<cAINode const*> const&, cAINode const*, unsigned int)
cAIPathQuery::SetPathStepCompleted(cAIWorldNode const&)
cAIPathQuery::GetNextPathNode(cAINode const&) const
cAIPathQuery::ValidStrongSectors() const
cAIPathQuery::Matches(WeakPtr<cAITarget>, WeakPtr<cAITarget>, unsigned int) const
cAIPathQuery::Start()
cAIPathQuery::Invalidate()
NuList<cAINode const*>::operator=(NuList<cAINode const*> const&)
cAIPathQuery::CouldDoWithAnUpdate() const
cAIPathQuery::SetRoughPath(NuList<cAINode const*>&, cAIWorldNode const&)
cAIPathQuery::IsTraversingSector(WeakPtr<cAISectorNode>) const
NuList<WeakPtr<cAISectorNode> >::DeleteNode(NuListNode<WeakPtr<cAISectorNode> >*)
cAIPathfinder::cAIPathfinder()
cAIPathfinder::~cAIPathfinder()
cAIPathfinder::~cAIPathfinder()
cAIPathfinder::Clear()
cAIPathfinder::SetWorldNode(cAIWorldNode*)
cAIPathfinder::NotifySectorUnloaded(WeakPtr<cAISectorNode>, cAIWorldNode const&)
cAIPathfinder::DoQueryPreChecks(cAIWorldNode&)
FinalPathPushBack(NuList<cAINode const*>&, cAINode const*)
cAIPathfinder::RoughPath(cAIWorldNode&, cAISectorNode const&, cAISectorNode const&, WeakPtr<cAIPathQuery>, NuList<cAINode const*>&)
cAIPathfinder::AStar(cAINode const*, cAINode const*, cAIWorldNode&, unsigned int, NuList<cAINode const*>*, float*)
cAIPathfinder::AStar(cAINode const*, cAITarget*, cAIWorldNode&, unsigned int, NuList<cAINode const*>*, float*)
cAIPathfinder::CreateAStarNode(cAStarNode::AStarNodeType)
cAIPathfinder::AStarInternal(short, short, cAIWorldNode&, unsigned int, NuList<cAINode const*>*, float*)
cAIPathfinder::ComputePath(cAIWorldNode&, WeakPtr<cAIPathQuery>)
cAIPathfinder::AStar(cAITarget*, cAITarget*, cAIWorldNode&, unsigned int, NuList<cAINode const*>*)
cAIPathfinder::AStar(cAINode const*, VuVec const&, float, cAIWorldNode&, unsigned int, NuList<cAINode const*>*)
cAIPathfinder::ListContains(cAINode const*, AStarNodeIndexList const&, cAStarNode const*, unsigned int)
cAIPathfinder::GetBestNode(AStarNodeIndexList const&, cAStarNode const*, unsigned int)
cAIPathfinder::ReconstructPath(AStarNodeIndexList&, short, cAStarNode const*, unsigned int)
cAIPathfinder::MakeAINodePath(AStarNodeIndexList&, cAStarNode const*, unsigned int, NuList<cAINode const*>*, float*)
cAIPathfinder::CreateAStarNode(cAITarget*, cAIWorldNode const&)
cAIPathfinder::GetFreeAStarNode()
cAIPathfinder::CreateAStarNode(cAINode const*)
cAIPathfinder::CreateAStarNode(VuVec const&, float, cAIWorldNode const&, unsigned int)
cAIPathfinder::GetAStarWeight(unsigned int, cAStarNode const&, cAStarNode const&) const
cAIPathfinder::GetAStarCostFactor(unsigned int, cAStarNode const&, cAStarNode const&) const
cAStarNode::SetG(float, cAStarNode*, unsigned int)
cAStarNode::SetH(float, cAStarNode*, unsigned int)
cAIPathfinder::Process(cAIWorldNode&)
cAIPathfinder::FindPath(WeakPtr<cAITarget>, WeakPtr<cAITarget>, unsigned int)
StrongPtr<cAIPathQuery> create<cAIPathQuery>()
NuList<WeakPtr<cAIPathQuery> >::DeleteNode(NuListNode<WeakPtr<cAIPathQuery> >*)
NuList<cAIPortalNode*>::operator=(NuList<cAIPortalNode*> const&)
cLAK::cLAK()
cLAK::~cLAK()
cLAK::~cLAK()
cLAK::PreUpdate()
cLAK::UnregisterCharacter(MechCharacter*, NuBiDirectionalIterator<MechWeakPtr<MechCharacter, 8>, NuListIteratorBase<MechWeakPtr<MechCharacter, 8>, NuListNode<MechWeakPtr<MechCharacter, 8> >, 1> > const&)
cLAK::UnregisterVehicle(WeakPtr<cAIVehicle>, NuBiDirectionalIterator<WeakPtr<cAIVehicle>, NuListIteratorBase<WeakPtr<cAIVehicle>, NuListNode<WeakPtr<cAIVehicle> >, 1> > const&)
cLAK::UnregisterAttractor(WeakPtr<cAIAttractor>, NuBiDirectionalIterator<WeakPtr<cAIAttractor>, NuListIteratorBase<WeakPtr<cAIAttractor>, NuListNode<WeakPtr<cAIAttractor> >, 1> > const&)
cLAK::OnEvent(eAIEvent, WeakPtr<cAITarget>)
cLAK::RegisterCharacter(MechCharacter*)
cLAK::RegisterVehicle(WeakPtr<cAIVehicle>)
cLAK::RegisterAttractor(WeakPtr<cAIAttractor>)
cLAK::UpdateAll()
cLAK::GetNearestCharacter(unsigned int, unsigned int) const
cLAK::GetNearestAttractor(bool) const
cLAK::GetNearestVehicle(unsigned int, unsigned int) const
cLAK::GetNearestCharacterHook(MechCharacter*, unsigned int) const
cLAK::GetNearestVehicleHook(WeakPtr<cAIVehicle>, unsigned int) const
NuList<WeakPtr<cAIVehicle> >::DeleteNode(NuListNode<WeakPtr<cAIVehicle> >*)
NuList<WeakPtr<cAIAttractor> >::DeleteNode(NuListNode<WeakPtr<cAIAttractor> >*)
cAITarget::cAITarget()
cAITarget::~cAITarget()
cAITarget::Set(VuVec const&, unsigned int, cAIWorldNode const&)
cAITarget::Set(VuVec const&, unsigned int)
cAITarget::Set(MechObjectInterface&, unsigned int)
cAITarget::Set(WeakPtr<cAIVehicle>, unsigned int, VehicleDefSeat::SEATTYPES)
cAITarget::Set(MechCharacter*, unsigned int)
cAITarget::Set(cAINode const*, unsigned int, cAIWorldNode const&)
cAITarget::Set(WeakPtr<cAIAttractor>, unsigned int, cAIWorldNode const&)
cAITarget::SetFlags(unsigned int)
cAITarget::IsValid() const
cAITarget::IsCritical() const
cAITarget::operator==(cAITarget const&) const
cAITarget::GetRadius() const
cAITarget::operator==(cAINode const&) const
cAITarget::GetNearestAINode(cAIWorldNode const&)
cAITarget::IsStationary()
cAITarget::GetPosition()
cAITarget::GetSector(cAIWorldNode const&)
cAITarget::GetCharacterPosition(MechCharacter&)
cAITarget::GetDirection()
cAITarget::SetRadius(float)
cAITarget::GetConvexNode()
cAITarget::ContainerRemoved(LevelContainer*)
MechPopulationAISystem::MechPopulationAISystem()
MechPopulationAISystem::~MechPopulationAISystem()
MechPopulationAISystem::~MechPopulationAISystem()
MechPopulationAISystem::Init()
MechPopulationAISystem::CreateAIWorldNode(LevelContainer&) const
MechPopulationAISystem::EventNotify(Event&, NuEventData&)
MechPopulationAISystem::LoadAIWorld(LevelContainer&, StreamingLevelInfo const&)
MechPopulationAISystem::Update(LevelContainer&)
sGameActionSetup::sGameActionSetup()
sGameActionSetup::~sGameActionSetup()
cAnimationTask::cAnimationTask()
cAnimationTask::~cAnimationTask()
cAnimationTask::~cAnimationTask()
cAnimationTask::ClearTasks(Brain&)
cAnimationTask::Activate()
cAnimationTask::Terminate(Brain&)
cAnimationTask::Process(Brain&, float const&)
cAnimationTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cAnimationTask::Init(MechCharacter*, sGameActionSetup&)
iSlaveTask::iSlaveTask()
iSlaveTask::~iSlaveTask()
iSlaveTask::~iSlaveTask()
iSlaveTask::ClearTasks(Brain&)
iSlaveTask::Activate()
iSlaveTask::Terminate(Brain&)
iSlaveTask::Disconnect()
iSlaveTask::Process(Brain&, float const&)
iSlaveTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
iSlaveTask::Connect(iMasterTask*)
iSlaveTask::OnMasterDisconnected()
cUseAttractor::cUseAttractor(WeakPtr<cAIAttractor>, unsigned int)
cUseAttractor::~cUseAttractor()
cUseAttractor::~cUseAttractor()
cUseAttractor::ClearTasks(Brain&)
cUseAttractor::Activate()
cUseAttractor::Terminate(Brain&)
cUseAttractor::Process(Brain&, float const&)
cUseAttractor::HandleAttractorSlotBooking(MechCharacter*)
cUseAttractor::HandleWaitToUseAttractor(MechCharacter*)
cUseAttractor::HandleUseAttractor(MechCharacter*)
cUseAttractor::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cUseAttractor::HandleAttractorSlotUnBooking(MechCharacter*)
cUseAttractor::GetActionTask(WeakPtr<cAnimAttractor>, MechCharacter*)
cFaceTargetTask::cFaceTargetTask(StrongPtr<cAITarget>)
cFaceTargetTask::cFaceTargetTask()
cFaceTargetTask::~cFaceTargetTask()
cFaceTargetTask::~cFaceTargetTask()
cFaceTargetTask::ClearTasks(Brain&)
cFaceTargetTask::Activate()
cFaceTargetTask::Terminate(Brain&)
cFaceTargetTask::Process(Brain&, float const&)
cFaceTargetTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cFaceTargetTask::Setup(StrongPtr<cAITarget>)
cGotoTargetOnFoot::cGotoTargetOnFoot()
cGotoTargetOnFoot::cGotoTargetOnFoot(StrongPtr<cAITarget>, unsigned int)
cGotoTargetOnFoot::cGotoTargetOnFoot(WeakPtr<cAITarget>, cAIWorldNode const&, NuList<cAINode const*>&, unsigned int)
cGotoTargetOnFoot::cGotoTargetOnFoot(WeakPtr<cAITarget>, StrongPtr<cAITarget>, cAIWorldNode const&, NuList<cAINode const*>&, unsigned int)
cGotoTargetOnFoot::~cGotoTargetOnFoot()
cGotoTargetOnFoot::~cGotoTargetOnFoot()
cGotoTargetOnFoot::Setup(StrongPtr<cAITarget>, unsigned int)
cGotoTargetOnFoot::UpdateSpeed(int)
cGotoTargetOnFoot::ClearTasks(Brain&)
cGotoTargetOnFoot::Activate()
cGotoTargetOnFoot::Terminate(Brain&)
cGotoTargetOnFoot::Process(Brain&, float const&)
cGotoTargetOnFoot::CheckTargetCloserThanPathNode(Brain&)
cGotoTargetOnFoot::LimitPace(Brain&)
cGotoTargetOnFoot::CreateTraverseTask(StrongPtr<cAITarget>&, Brain&)
cGotoTargetOnFoot::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cWanderOnFoot::cWanderOnFoot()
cWanderOnFoot::cWanderOnFoot(unsigned int)
cWanderOnFoot::~cWanderOnFoot()
cWanderOnFoot::~cWanderOnFoot()
cWanderOnFoot::ClearTasks(Brain&)
cWanderOnFoot::Activate()
cWanderOnFoot::Terminate(Brain&)
cWanderOnFoot::Process(Brain&, float const&)
cWanderOnFoot::GetWanderNode(cAINode const*, VuVec const&, unsigned int&, NuList<cAINode const*>&)
cWanderOnFoot::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cWanderOnFoot::GetLinkFromIndex(NuList<iAILink*> const&, unsigned int)
cFleeOnFoot::cFleeOnFoot()
cFleeOnFoot::~cFleeOnFoot()
cFleeOnFoot::~cFleeOnFoot()
cFleeOnFoot::Setup(unsigned int, StrongPtr<cAITarget>, int)
cFleeOnFoot::SetupTo(unsigned int, StrongPtr<cAITarget>, StrongPtr<cAITarget>, int)
cFleeOnFoot::SetupToDirect(unsigned int, StrongPtr<cAITarget>, StrongPtr<cAITarget>, int)
cFleeOnFoot::SetupInArea(unsigned int, StrongPtr<cAITarget>, StrongPtr<cAITarget>, int)
cFleeOnFoot::ClearTasks(Brain&)
cFleeOnFoot::Activate()
cFleeOnFoot::Terminate(Brain&)
cFleeOnFoot::SwitchToState(cFleeOnFoot::eState, Brain&)
cFleeOnFoot::Process(Brain&, float const&)
cFleeOnFoot::UpdateUnset(Brain&, float)
cFleeOnFoot::UpdateRunAway(Brain&, float)
cFleeOnFoot::UpdateWait(Brain&, float)
cFleeOnFoot::DestroyPfx(MechCharacter&)
cFleeOnFoot::BuildFleePathAndSubTask(MechCharacter&)
cFleeOnFoot::SpeedupRequired(MechCharacter&)
cFleeOnFoot::UpdateSpeed(MechCharacter&, float)
cFleeOnFoot::UpdatePfx(MechCharacter&, float)
cFleeOnFoot::ShouldStop(MechCharacter&)
cFleeOnFoot::ShouldRun(MechCharacter&)
cFleeOnFoot::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cFleeOnFoot::SprintNow()
cFleeOnFoot::ImmuneToTackle()
cFleeOnFoot::Init()
cFleeOnFoot::OnEnterLevel(LegoLevelContainer&)
cFleeOnFoot::BuildFleePathFreeForm(MechCharacter&)
cFleeOnFoot::BuildFleePathTo(MechCharacter&)
cFleeOnFoot::BuildFleePathAtArea(MechCharacter&)
cFleeOnFoot::BuildFleePathToDirect(MechCharacter&)
cFleeOnFoot::GetStartNode(MechCharacter&)
AStarFunctor_Flee_FreeForm::SetConfigData(float, VuVec const&, float, float, float, unsigned int)
AStarFunctor_Flee_FreeForm::AddEnemyPos(VuVec const&)
cFleeOnFoot::StripUnneededPathPoints(MechCharacter&)
AStarFunctor_Flee_To::SetConfigData(VuVec const&, float, float, float, unsigned int)
AStarFunctor_Flee_To::AddEnemyPos(VuVec const&)
AStarFunctor_Flee_InArea::SetConfigData(float, VuVec const&, float, float, float, VuVec const&, float, float, unsigned int)
AStarFunctor_Flee_InArea::AddEnemyPos(VuVec const&)
MPMMath::DistancePointToSegment(VuVec const&, VuVec const&, VuVec const&)
cFleeOnFoot::CreatePfx(MechCharacter&)
AStarFunctor_Flee_FreeForm::AStarFunctor_Flee_FreeForm()
AStarFunctor_Flee_FreeForm::~AStarFunctor_Flee_FreeForm()
AStarFunctor_Flee_FreeForm::~AStarFunctor_Flee_FreeForm()
AStarFunctor_Flee_FreeForm::LinkCost(cAINode const*, cAINode const*, cAINodeLink const*) const
AStarFunctor_Flee_FreeForm::GoalAchieved(cAINode const*) const
AStarFunctor_Flee_FreeForm::CostToGoal(cAINode const*) const
AStarFunctor_Flee_To::AStarFunctor_Flee_To()
AStarFunctor_Flee_To::~AStarFunctor_Flee_To()
AStarFunctor_Flee_To::~AStarFunctor_Flee_To()
AStarFunctor_Flee_To::LinkCost(cAINode const*, cAINode const*, cAINodeLink const*) const
AStarFunctor_Flee_InArea::AStarFunctor_Flee_InArea()
AStarFunctor_Flee_InArea::~AStarFunctor_Flee_InArea()
AStarFunctor_Flee_InArea::~AStarFunctor_Flee_InArea()
AStarFunctor_Flee_InArea::GoalAchieved(cAINode const*) const
AStarFunctor_Flee_InArea::CostToGoal(cAINode const*) const
AStarFunctor_Flee_InArea::LinkCost(cAINode const*, cAINode const*, cAINodeLink const*) const
NuVector<VuVec>::Reserve(unsigned int, bool)
cPlayerOnFoot::cPlayerOnFoot()
cPlayerOnFoot::~cPlayerOnFoot()
cPlayerOnFoot::~cPlayerOnFoot()
cPlayerOnFoot::ClearTasks(Brain&)
cPlayerOnFoot::Activate()
cPlayerOnFoot::Terminate(Brain&)
cPlayerOnFoot::Process(Brain&, float const&)
cPlayerOnFoot::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cEnterVehiclePlayer::cEnterVehiclePlayer()
cEnterVehiclePlayer::cEnterVehiclePlayer(MechRidingDataVehicle&, MechVehicle&, VehicleDefSeat::SEATTYPES, unsigned int)
cEnterVehiclePlayer::SetupCollisionListener()
cEnterVehiclePlayer::cEnterVehiclePlayer(MechRidingDataVehicle&, MechObjectInterface&, VehicleDefSeat::SEATTYPES, unsigned int)
cEnterVehiclePlayer::~cEnterVehiclePlayer()
cEnterVehiclePlayer::~cEnterVehiclePlayer()
cEnterVehiclePlayer::ClearTasks(Brain&)
cEnterVehiclePlayer::Activate()
cEnterVehiclePlayer::Terminate(Brain&)
cEnterVehiclePlayer::Process(Brain&, float const&)
cEnterVehiclePlayer::OnFailed(Brain&)
cEnterVehiclePlayer::GetSeats()
MechCharacter::SetRiderObj(MechObjectInterface*, VehicleDefSeat::SEATTYPES)
cEnterVehiclePlayer::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cEnterVehiclePlayer::SetGiveUpTime(float)
cEnterVehiclePlayer::CanAbort()
cExitVehiclePlayer::cExitVehiclePlayer(MechRidingDataVehicle&, DismountInfo*)
cExitVehiclePlayer::cExitVehiclePlayer()
cExitVehiclePlayer::~cExitVehiclePlayer()
cExitVehiclePlayer::~cExitVehiclePlayer()
cExitVehiclePlayer::ClearTasks(Brain&)
cExitVehiclePlayer::Activate()
cExitVehiclePlayer::Terminate(Brain&)
cExitVehiclePlayer::Process(Brain&, float const&)
cExitVehiclePlayer::InitSubTask(Brain&, MechCharacter*, MechObjectInterface&)
cExitVehiclePlayer::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cVehicleRidingBaseTask::CanAbort()
sSeats::HasOccupant(VehicleDefSeat::SEATTYPES) const
sSeats::GetOccupant(VehicleDefSeat::SEATTYPES) const
sSeats::SetOccupant(MechCharacter*, VehicleDefSeat::SEATTYPES)
sSeats::ClearOccupant(VehicleDefSeat::SEATTYPES)
sSeats::GetSeat(MechCharacter*) const
sSeats::GetFirstFreeSeat(ApiVehicle*)
sSeats::GetFirstFreeSeatForPassenger(ApiVehicle*)
sSeats::GetFirstFreeSeatForFriend(ApiVehicle*, MechCharacter*)
cAIVehicle::cAIVehicle(ApiVehicle*, ePlayerAssociation)
cAIVehicle::~cAIVehicle()
cAIVehicle::RemoveAllOccupants()
cAIVehicle::Init(WeakPtr<cAIVehicle>, int, int)
cAIVehicle::Update(float)
cAIVehicle::ApplyDefaultOrder(bool)
cAIVehicle::GetPos() const
cAIVehicle::GetDir() const
cAIVehicle::GetSector(cAIWorldNode const*) const
cAIVehicle::SetSeatBlocked(VehicleDefSeat::SEATTYPES, bool)
cAIVehicle::IsSeatBlocked(VehicleDefSeat::SEATTYPES) const
cAIVehicle::AddOccupant(MechCharacter*, VehicleDefSeat::SEATTYPES)
cAIVehicle::RemoveOccupant(MechCharacter*)
cAIVehicle::RemoveOccupant(VehicleDefSeat::SEATTYPES)
cAIVehicle::CanRemove() const
cAIVehicle::GetOccupant(VehicleDefSeat::SEATTYPES) const
cAIVehicle::GetDriver() const
cAIVehicle::GetBrain()
cAIVehicle::GetBrain() const
GetAICharTypeFromName(char const*, bool)
GetAICharTypeFromHash(unsigned int, bool)
GetAIVehicleTypeFromName(char const*)
GetAIVehicleTypeFromHash(unsigned int)
GetAICharacterTypeFromId(int, int&, int&, bool)
sAICharModel::SubTypeByID(int) const
GetAIVehicleTypeFromId(int, int&, int&)
sAIVehicleModel::SubTypeByID(int) const
GetAICharacterTypeFromModelName(char const*, int&, int&, bool)
sAICharModel::SubTypeByNameHash(unsigned int)
GetAIVehicleTypeFromModelName(char const*, int&, int&)
GetAIVehicleTypeFromModelNameHash(unsigned int, int&, int&)
sAIVehicleModel::SubTypeByNameHash(unsigned int)
sAICharModel::SubType(int) const
sAICharModel::CharDefHash(int) const
sAICharModel::Add(int, unsigned int, unsigned int)
sAICharModel::SubTypeByName(char*)
sAIVehicleModel::SubType(int) const
sAIVehicleModel::Add(int, unsigned int, unsigned int)
sAIVehicleModel::SubTypeByName(char*)
sCharacterStats::Clear()
sAICharDataEntry::Clear()
sCharacterStats::Find(int)
sAIZoneStats::sAIZoneStats()
sAIZoneStats::~sAIZoneStats()
sZoneStats::Clear()
sZoneStats::~sZoneStats()
PopulationVehicleStats::Clear()
sAIZoneStats::Import(NuArchive&, cAIWorldNode const&, unsigned int)
sCharacterStats::Import(NuArchive&)
PopulationVehicleStats::Import(NuArchive&, unsigned int)
sAICharDataEntry::Import(NuArchive&)
NuVector<VehicleDataType>::ReSize(unsigned int, bool)
VehicleDataType::Import(NuArchive&, unsigned int)
PopulationVehicleStats::Find(int) const
sAICharDataEntry::~sAICharDataEntry()
sAICharSubTypeEntry::Import(NuArchive&)
VehicleDataType::~VehicleDataType()
VehicleDataSubType::Import(NuArchive&, unsigned int)
VehicleDataType::Clear()
sAICharDataEntry::Find(int)
VehicleDataType::Find(int) const
NuVector<VehicleDataType>::Reserve(unsigned int, bool)
NuVector<VehicleDataSubType>::Reserve(unsigned int, bool)
NuListFind<sAICharSubTypeEntry*, NuListNode<sAICharSubTypeEntry*> >::Remove(NuListNode<sAICharSubTypeEntry*>*, NuListNode<sAICharSubTypeEntry*>*, sAICharSubTypeEntry* const&)
sPopStats::sPopStats()
sPopStats::~sPopStats()
sPopStats::Init(unsigned int, unsigned int)
sPopStats::CharCount() const
sPopStats::CharCount(int) const
sPopStats::CharSpawnCount() const
sPopStats::CharSpawnCount(int) const
sPopStats::GetNextAssociatedPlayer()
StreamedCharacterManager::StreamedCharacterManager()
StreamedCharacterManager::~StreamedCharacterManager()
StreamedCharacterManager::Clear()
StreamedCharacterManager::~StreamedCharacterManager()
StreamedCharacterManager::Init()
StreamedCharacterManager::ShutDown()
StreamedCharacterManager::Enable(bool)
StreamedCharacterManager::OnEnterLevel(MechLevelContainer&)
StreamedCharacterManager::OnExitLevel(MechLevelContainer&)
StreamedCharacterManager::OnResetLevel(MechLevelContainer&)
StreamedCharacterManager::EventNotify(Event&, NuEventData&)
StreamedCharacterManager::HintRequest(int const*, unsigned int, StreamedCharacterManager::RequestPriority, StreamedCharacterManager::CharacterLifetime, unsigned long)
StreamedCharacterManager::FindExistingRequest(int)
NuHashMap<int, unsigned int>::Erase(int const&)
StreamedCharacterManager::CharacterStreamRequest::Create(int const*, unsigned int, StreamedCharacterManager::RequestPriority, StreamedCharacterManager::CharacterLifetime, void (*)(int const*, unsigned int, void const*), unsigned long)
StreamedCharacterManager::Track(int)
StreamedCharacterManager::FindExisting(int) const
StreamedCharacterManager::ReleaseStrongRef(int, unsigned long)
StreamedCharacterManager::DemoteCharacter(unsigned int)
StreamedCharacterManager::ReleaseStrongRefs(unsigned long)
StreamedCharacterManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
StreamedCharacterManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
StreamedCharacterManager::PreProcessCharacterSlots()
StreamedCharacterManager::ProcessCharacters()
StreamedCharacterManager::ProcessVehicles()
StreamedCharacterManager::ProcessCharacterSlots(float)
StreamedCharacterManager::ProcessRequestSlots(float)
StreamedCharacterManager::IsLoaded(int)
StreamedCharacterManager::IsLoading(int)
StreamedCharacterManager::HandleRequest(StreamedCharacterManager::CharacterStreamRequest&, float)
StreamedCharacterManager::PromoteCharacter(unsigned int)
StreamedCharacterManager::RelocateCharacter(unsigned int, unsigned int)
StreamedCharacterManager::DefaultVehicleCallback(int const*, unsigned int, void const*)
MechSystemBase<StreamedCharacterManager, int>::Suppress(int)
MechSystemBase<StreamedCharacterManager, int>::IsSuppressed(int) const
MechManager::GetClass(int)
PursuitTarget::operator=(PursuitTarget const&)
PursuitTargetList::PursuitTargetList(unsigned int)
PursuitTargetList::~PursuitTargetList()
PursuitTargetList::~PursuitTargetList()
PursuitTargetList::AddAtEnd(PursuitTarget const&)
PursuitTargetList::PopFront()
PursuitTargetList::Clear()
PursuitTargetList::Get(unsigned int) const
PursuitTargetList::Remove(unsigned int)
AggressiveVehicle::operator=(AggressiveVehicle const&)
AggressiveVehicleList::AggressiveVehicleList(unsigned int)
AggressiveVehicleList::~AggressiveVehicleList()
AggressiveVehicleList::~AggressiveVehicleList()
AggressiveVehicleList::AddAtEnd(AggressiveVehicle const&)
AggressiveVehicleList::PopFront()
AggressiveVehicleList::Clear()
AggressiveVehicleList::Get(unsigned int) const
AggressiveVehicleList::Remove(unsigned int)
VehicleAITypeMap::VehicleAITypeMap(unsigned int)
VehicleAITypeMap::Clear()
VehicleAITypeMap::~VehicleAITypeMap()
VehicleAITypeMap::Add(short, unsigned short)
VehicleAITypeMap::Remove(short)
VehicleAITypeMap::Find(short) const
cPopulationManager::sPopManCharType::CanUse()
cPopulationManager::cPopulationManager(LevelContainer&)
PopulationManagers::GetHelper()
cPopulationManager::RegisterProcessing()
cPopulationManager::RegisterRendering()
cPopulationManager::~cPopulationManager()
cPopulationManager::~cPopulationManager()
cPopulationManager::GetOnly(LevelContainer const*)
cPopulationManager::GlobalInit()
cPopulationManager::ImportAIData()
cPopulationManager::GetErrorMsgString(cPopulationManager::ERRORMSG)
cPopulationManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
cPopulationManager::GetPlayer(unsigned int)
cPopulationManager::PreUpdatePopulation()
cPopulationManager::UpdateSpawnPopulation(float)
cPopulationManager::IsPopMgrMovingTrafficDeprecated()
cPopulationManager::IsTrafficEnabled()
cPopulationManager::GetModelTypeIDFromAIVehicleType(int, int)
cPopulationManager::ProcessPursuitTargets(float)
cPopulationManager::HasFreeCharacterSlot() const
cPopulationManager::ForceFreeCharacterSlot()
cPopulationManager::CreateScriptAICharacter(LevelContainer&, int, int, VuVec const&, int const&, cPopulationManager::ERRORMSG&, bool, bool, unsigned int)
cPopulationManager::CreateScriptAICharacter(LevelContainer&, int, int, VuVec const&, VuVec const&, cPopulationManager::ERRORMSG&, bool, bool, unsigned int)
cPopulationManager::GetRandomCharacterSubType(int) const
cPopulationManager::GetModelTypeIDFromAIType(int, int)
cPopulationManager::CreateScriptAIVehicle(LevelContainer&, int, int, VuVec const&, int const&, cPopulationManager::ERRORMSG&, bool, unsigned int)
cPopulationManager::CreateScriptAIVehicle(LevelContainer&, int, int, VuVec const&, VuVec const&, cPopulationManager::ERRORMSG&, bool, unsigned int)
cPopulationManager::GetNumFreeVehicleSlots() const
cPopulationManager::ForceFreeVehicleSlots(int)
cPopulationManager::RegisterCriticalVehicle(StrongPtr<cAIVehicle>)
cPopulationManager::IsLevelCriticalVehicle(WeakPtr<cAIVehicle>) const
cPopulationManager::InitCharacterModelPool()
cPopulationManager::GetClosestAIZone(VuVec const&) const
cPopulationManager::GetNextCharSpawnType(VuVec const&, bool)
cPopulationManager::LoadCharacterModelPool()
cPopulationManager::UpdateCharacterModelPool()
cPopulationManager::ValidateCharacterType(VuVec const&, cPopulationManager::sPopManCharType*)
cPopulationManager::UpdateCharacterSpawn()
cPopulationManager::GetNextSpawnType(VuVec const&, sCharacterType&, float&, bool)
cPopulationManager::GetVehicleSpawnLocation(VuVec const&, VuVec const&, GridlockMapHandle, short, NuCamera const*, float, float, VuVec&, VuVec&, bool, bool) const
cPopulationManager::ClassifySpawnPosition(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float, NuCamera const*, cPopulationManager::SpawnZone&) const
cPopulationManager::VerifySpawnPosition(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float, float, float, MechAIAvoidableList const&) const
cPopulationManager::ClassifySpawnPointPosition(VuVec const&, VuVec const&, VuVec const&, float, bool, NuCamera const*, cPopulationManager::SpawnZone&) const
cPopulationManager::GetRandomVehicle(int&, int&, unsigned int, int, int, int&, int&, int&, char&) const
cPopulationManager::UpdateVehicleSpawn()
cPopulationManager::GetPursuitTarget(int, int) const
cPopulationManager::GetAggressiveVehicleData(int, int) const
cPopulationManager::GetCharDefHashFromAIType(int, int)
cPopulationManager::GetKrawlieDensity(VuVec const&) const
cPopulationManager::GetKrawlieDensity(VuVec const&, VuVec const&) const
cPopulationManager::RegisterKrawlieTypesInRange(VuVec const&, VuVec const&)
cPopulationManager::DisableOverridenAIZones(sAIZoneStats*)
cPopulationManager::EnableOverridenAIZones(sAIZoneStats*)
cPopulationManager::AddScriptAIZone(sAIZoneStats*)
cPopulationManager::RemoveScriptAIZone(sAIZoneStats*)
cPopulationManager::ResetDefaultAIZone(sAIZoneStats*)
cPopulationManager::EnableVehicleAIType(int, bool)
cPopulationManager::EnableVehicleAISubType(int, bool)
cPopulationManager::DestroyRandomPopulation()
cPopulationManager::IsCollidingWithAnyVehicleInArea(ConvexArea*, WeakPtr<cAIVehicle>)
cPopulationManager::CountAllCharactersInArea(ConvexArea*) const
cPopulationManager::CountAllVehiclesInArea(ConvexArea*) const
cPopulationManager::DestroyVehicles(int, int)
cPopulationManager::AddVehicleToPool(int, int, int, bool, float, unsigned int)
cPopulationManager::ClearVehicleFromPool(int)
cPopulationManager::SpawnParkedVehicle(LevelContainer&, int, int, VuVec const&, VuVec const&, bool, cPopulationManager::SpawnParkedVehicleResult&)
cPopulationManager::RegisterLevelCriticalVehicle(WeakPtr<cAIVehicle>, LevelContainer const&)
cPopulationManager::CalculateSafeRoadPosition(VuVec const&, VuVec const&, float, float, float, MechVehicle const*, GridlockMapHandle, float, VuVec&, VuVec&)
cPopulationManager::FindFirstVehicleInArea(ConvexArea*)
cPopulationManager::DestroyAllVehiclesInArea(ConvexArea*, WeakPtr<cAIVehicle>, bool, bool)
cPopulationManager::DestroyAllCharactersInArea(ConvexArea*, MechCharacter*, bool, bool)
cPopulationManager::RemoveCharacter(MechCharacter*)
cPopulationManager::HasFreeVehicleSlot() const
cPopulationManager::ForceFreeVehicleSlot()
cPopulationManager::RegisterVehicle(WeakPtr<cAIVehicle>)
cPopulationManager::UnregisterVehicle(WeakPtr<cAIVehicle>)
cPopulationManager::UnregisterLevelCriticalVehicle(WeakPtr<cAIVehicle>)
cPopulationManager::UnregisterLevelCriticalVehicles(LevelContainer const&)
cPopulationManager::UnregisterCriticalVehicle(WeakPtr<cAIVehicle>)
cPopulationManager::RemoveVehicle(WeakPtr<cAIVehicle>)
cPopulationManager::GetNearestPlayer(VuVec const&, float&)
cPopulationManager::SwapAICharacters(MechCharacter*, MechCharacter*)
cPopulationManager::EventNotify(Event&, NuEventData&)
cPopulationManager::SetPlayerVehicle(WeakPtr<cAIVehicle>, int)
cPopulationManager::RegisterCharacter(MechCharacter*)
cPopulationManager::UnregisterCharacter(MechCharacter*)
cPopulationManager::IsSpatiallySignificant(VuVec const&, float, float, float) const
cPopulationManager::FindFreeCharacterType()
cPopulationManager::FindCharacterType(int)
cPopulationManager::AddPursuitTarget(DriveTarget&, int, int, bool, bool)
cPopulationManager::EnableNonPursuitTraffic(bool)
cPopulationManager::SetPursuitTargetColour(int, int, int, char)
cPopulationManager::SetPursuitTargetDriver(int, int, int, int, int, int)
cPopulationManager::RemovePursuitTarget(int, int, bool, bool)
cPopulationManager::AddAggressiveVehicle(int, int, float, bool)
cPopulationManager::RemoveAggressiveVehicle(int, int)
cPopulationManager::CheatModeIsActive(unsigned int)
cPopulationManager::CheatZoneIsLoaded(unsigned int)
cPopulationManager::IsFromZone(cPopulationManager::sPopManCharType*, sAIZoneStats const*)
cPopulationManager::CheatZoneIsUnloaded(unsigned int)
cPopulationManager::GetNextKrawlieSpawnType(VuVec const&)
cPopulationManager::GetAIVehicleSubType(int, int)
cPopulationManager::GetRandomCharacterType() const
cPopulationManager::GetCharacterTypeFromVehicleType(sVehicleType const&) const
cPopulationManager::GetCharacterDefHashFromVehicleType(int, int)
cPopulationManager::GetCharacterDefHashCheatOverride(unsigned int)
cPopulationManager::OverrideTrafficDensity(float)
cPopulationManager::RegisterKrawlie(MechKrawlie*)
cPopulationManager::UnregisterKrawlie(MechKrawlie*)
cPopulationManager::TryPickLoadedCharacter()
FindFirstDelimiter(char const*, char)
TryParseTypeString(char const*)
TryParseCharacterType(char const*)
TryParseVehicleType(char const*)
TryFindOpeningBrace(nufpar_s*)
TryAddElement(char const*, int, int, unsigned int)
TryParseElements(nufpar_s*, int, int)
PopulationManagers::LoadAITypes()
PopulationManagers::SupportsPassengers(int, int) const
PopulationManagers::RandomKrawliePassenger(int, int) const
PopulationManagers::GetGridlockMap(int, int) const
PopulationManagers::GetGridlockRoadGroup(int, int) const
PopulationManagers::GetMaxSpeed(int, int) const
PopulationManagers::IsTraffic(Brain*) const
PopulationManagers::AreYouReady(int, int) const
PopulationManagers::GetFarClip(int, int) const
PopulationManagers::IsVisible(NuVector3Base const&, float, float) const
PopulationManagers::PopulationManagers()
PopulationManagers::PopulationManagers(char const*)
PopulationManagers::~PopulationManagers()
PopulationManagers::~PopulationManagers()
PopulationManagers::Init()
PopulationManagers::EventNotify(Event&, NuEventData&)
PopulationManagers::RegisterScriptFunctionality()
PopulationManagers::ShouldAddManagersForLevel(MechLevelContainer&)
PopulationManagers::AddManagersForLevel(MechLevelContainer&)
PopulationManagers::RemoveManagersForLevel(MechLevelContainer&)
PopulationManagers::GetPartyMemberTypeInfo(MechCharacter const&, int&, int&)
SAction_SetGridlockRoadMap::Exec(ScriptContext&)
SAction_SetGridlockBoatMap::Exec(ScriptContext&)
SAction_SetDefaultRoadGridlockRoadGroup::Exec(ScriptContext&)
SAction_SetDefaultBoatGridlockRoadGroup::Exec(ScriptContext&)
MechManager::GetNumClasses()
SAction_SetGridlockRoadMap::~SAction_SetGridlockRoadMap()
SAction_SetGridlockRoadMap::GetName() const
SAction_SetGridlockRoadMap::GetInputs(SCmdParams&) const
SAction_SetGridlockRoadMap::GetOutputs(SCmdParams&) const
SAction_SetGridlockRoadMap::GetHashName() const
SAction_SetGridlockRoadMap::SetHashName()
SAction_SetGridlockBoatMap::~SAction_SetGridlockBoatMap()
SAction_SetGridlockBoatMap::GetName() const
SAction_SetGridlockBoatMap::GetInputs(SCmdParams&) const
SAction_SetGridlockBoatMap::GetOutputs(SCmdParams&) const
SAction_SetGridlockBoatMap::GetHashName() const
SAction_SetGridlockBoatMap::SetHashName()
SAction_SetDefaultRoadGridlockRoadGroup::~SAction_SetDefaultRoadGridlockRoadGroup()
SAction_SetDefaultRoadGridlockRoadGroup::GetName() const
SAction_SetDefaultRoadGridlockRoadGroup::GetInputs(SCmdParams&) const
SAction_SetDefaultRoadGridlockRoadGroup::GetOutputs(SCmdParams&) const
SAction_SetDefaultRoadGridlockRoadGroup::GetHashName() const
SAction_SetDefaultRoadGridlockRoadGroup::SetHashName()
SAction_SetDefaultBoatGridlockRoadGroup::~SAction_SetDefaultBoatGridlockRoadGroup()
SAction_SetDefaultBoatGridlockRoadGroup::GetName() const
SAction_SetDefaultBoatGridlockRoadGroup::GetInputs(SCmdParams&) const
SAction_SetDefaultBoatGridlockRoadGroup::GetOutputs(SCmdParams&) const
SAction_SetDefaultBoatGridlockRoadGroup::GetHashName() const
SAction_SetDefaultBoatGridlockRoadGroup::SetHashName()
cPopulationManager::GetManagerName() const
PopulationManagers::CreateGamePopulationData(cPopulationManager&) const
PopulationManagers::GetGlobalInfo(unsigned int&, unsigned int&, sEdAICharacter*&, sEdAIVehicle*&) const
PopulationManagers::GetOverrideVehicleSpawnRefPos(VuVec&, VuVec&) const
PopulationManagers::AllowMovingVehicleSpawn(int, int) const
PopulationManagers::LoadLevelVehicleModels(LevelContainer&) const
PopulationManagers::EnablePursuer(WeakPtr<cAIVehicle>, PursuitTarget const&) const
PopulationManagers::DisablePursuer(WeakPtr<cAIVehicle>, PursuitTarget const&) const
PopulationManagerHelper::~PopulationManagerHelper()
ClassManagerProxy::~ClassManagerProxy()
ClassManagerProxy::GetManagerName() const
NuListFind<sAIZoneStats*, NuListNode<sAIZoneStats*> >::Remove(NuListNode<sAIZoneStats*>*, NuListNode<sAIZoneStats*>*, sAIZoneStats* const&)
VehicleModelPool::VehicleModelPool(cPopulationManager&, unsigned int)
VehicleModelPool::~VehicleModelPool()
VehicleModelPool::Process(float)
VehicleModelPool::ProcessBlocked()
VehicleModelPool::Get(unsigned int) const
VehicleModelPool::Purge(PopulationVehicleStats const&)
VehicleModelPool::PurgeAll()
VehicleModelPool::AddToPool(int, int, int, float, unsigned int, bool, bool, bool)
VehicleModelPool::AddToPool(VehicleModel const&, bool)
VehicleModelPool::RemoveOldest()
VehicleModelPool::RemoveById(int, bool)
VehicleModelPool::SetColour(int, int, int, char)
VehicleModelPool::SetDriver(int, int, int, int, int, int)
VehicleModelPool::Block(unsigned int)
VehicleModelPool::Remove(unsigned int)
VehicleModelPool::IsFull(bool) const
VehicleModelPool::AddAtEnd(VehicleModel const&)
VehicleModelPool::IsOverBooked() const
VehicleModelPool::IsLoaded(int) const
VehicleModelPool::Hello(int, int)
VehicleModelPool::Goodbye(int, int)
VehicleModelPool::Strike(int)
VehicleModelPool::YoureOut()
VehicleModelPool::DustOff()
VehicleModelPool::GetNumUsableTrafficModels() const
VehicleModelPool::GetNumUsableTrafficModelSlots() const
MPMMath::Quadractic(float, float, float, float&, float&)
MPMMath::ClosestPointsOnSegments(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float&, float&)
cAIAttractor::cAIAttractor(eAIAttractorType)
cAIAttractor::~cAIAttractor()
cAIAttractor::~cAIAttractor()
cAIAttractor::CanUseAttractor(MechCharacter*) const
cAIAttractor::GetPos() const
cAIAttractor::GetDirection() const
cAIAttractor::HasFreeSlot() const
cAIAttractor::HasUser(MechCharacter*) const
cAIAttractor::AddUser(MechCharacter*)
cAIAttractor::RemoveUser(MechCharacter*)
cAIAttractor::GetSlotIndex(MechCharacter*) const
cAIAttractor::GetSlotPosition(unsigned int) const
cAIAttractor::IsValid() const
cAIAttractor::Update()
cAINodeLink::cAINodeLink(eAILinkType)
cAINodeLink::cAINodeLink(eAILinkType, cAINode const*, cAINode const*)
cAINodeLink::~cAINodeLink()
cAINodeLink::~cAINodeLink()
cAINodeLink::Setup(cAINode const*, cAINode const*)
cAINodeLink::SetNodeA(cAINode const*)
cAINodeLink::SetNodeB(cAINode const*)
cAINodeLink::GetOtherNode(cAINode const*) const
cAINodeLink::LinkLength() const
cAINodeLink::LinkLengthSqr() const
cAINodeLink::GetClosestNode(VuVec const&, cAINode const*) const
GetNodeIndex(NuList<cAINode const*> const&, cAINode const*)
GetPortalNodeIndex(NuList<cAIPortalNode*> const&, cAINode const*)
GetPortalNodeFromList(NuList<cAIPortalNode*> const&, int)
GetNodeFromList(NuList<cAINode const*> const&, int)
cAINodeLink::Load(NuArchive&, int const&, NuList<cAINode const*> const&, NuList<cAIPortalNode*> const&)
cAINodeLink::Invalidate(cAINode const*)
cAINodeLink::GetClosestPoint(VuVec const&) const
cAINodeLink::DistToPoint(VuVec const&) const
cAINodeLink::GetDirection() const
cAIPortalLink::cAIPortalLink()
cAIPortalLink::~cAIPortalLink()
cAIPortalLink::~cAIPortalLink()
cAIPortalLink::Setup(cAINode const*, cAINode const*)
cAIPortalLink::SetNodeA(cAINode const*)
cAIPortalLink::SetNodeB(cAINode const*)
cAIPortalLink::GetRoadLane(cAIPortalNode const*) const
cAIPortalLink::SetRoadLane(cAIPortalNode const*, AIRoadLane const*)
cAIPortalLink::ClearRoadLane(cAIPortalNode const*)
cAIPortalLink::LoadPortalLink(NuArchive&, int const&, cAIWorldNode*)
cAIPortalLink::Invalidate(cAINode const*)
cAIPortalNode::cAIPortalNode(WeakPtr<cAISectorNode>, eAINodeType)
cAIPortalNode::~cAIPortalNode()
cAIPortalNode::ClearPortalLink(bool) const
cAIPortalNode::~cAIPortalNode()
cAIPortalNode::SetPortalType(eAINodeType)
cAIPortalNode::GetLinkedPortal() const
cAIPortalNode::SetPortalLink(cAIPortalLink*) const
cAIPortalNode::InvalidateParent()
cAIPortalNode::Load(AIManager&, NuArchive&, int const&, bool)
cAIPortalNode::IsNeighbour(cAINode const*, unsigned int) const
iSemaphoreBase::iSemaphoreBase(eAISemaphoreType)
iSemaphoreBase::~iSemaphoreBase()
iSemaphoreBase::~iSemaphoreBase()
iSemaphoreBase::IsActiveSemaphore() const
cAStarNode::cAStarNode()
cAStarNode::~cAStarNode()
cAStarNode::Create(cAStarNode::AStarNodeType)
cAStarNode::SetInOpenList(bool, AStarNodeIndexList&, short, cAStarNode*, unsigned int)
cAStarNode::SetInClosedList(bool, AStarNodeIndexList&, short, cAStarNode*, unsigned int)
cAStarNode::EstimateDistanceTo(cAStarNode const&, cAStarNode const*, unsigned int) const
cAStarNode::IsNeighbour(cAStarNode const&, cAStarNode const*, unsigned int, cAIWorldNode&, unsigned int) const
cAStarNode::GetLinks(cAStarLink*, unsigned int, cAStarNode const*, unsigned int, unsigned int) const
cAStarLink::Create(cAStarLink::AStarLinkType)
cAStarLink::cAStarLink()
cAStarLink::~cAStarLink()
AStarFunctorBase::AStarFunctorBase()
AStarFunctorBase::Process(NuList<cAINode const*>&)
AStarFunctorBase::AddToOpenList(short)
AStarFunctorBase::GetBestOpenNode() const
AStarFunctorBase::BuildPath(NuList<cAINode const*>&, short)
AStarFunctorBase::RemoveFromOpenList(short)
AStarFunctorBase::AddToClosedList(short)
AStarFunctorBase::CheckLinkAndAddNode(unsigned short, cAINodeLink const*)
AStarFunctorBase::CalcLinkTestFlags(bool, bool, bool, bool, bool, bool, bool, bool, bool)
AStarFunctorBase::SetLinkTest(bool, bool, bool, bool, bool, bool, bool, bool, bool)
AStarFunctorBase::SetStartNode(cAINode const*)
AStarFunctorBase::IsLinkValid(cAINode const*, cAINode const*, cAINodeLink const*) const
AStarFunctorBase::ValidateData() const
AStarFunctorBase::LinkCost(cAINode const*, cAINode const*, cAINodeLink const*) const
AStarFunctorBase::FindInfo(cAINode const*)
AStarFunctorBase::RemoveFromClosedList(short)
AStarFunctor_FromTo::AStarFunctor_FromTo()
AStarFunctor_FromTo::SetEndNode(cAINode const*)
AStarFunctor_FromTo::GoalAchieved(cAINode const*) const
AStarFunctor_FromTo::CostToGoal(cAINode const*) const
AStarFunctor_FromTo::ValidateData() const
AStarFunctorBase::~AStarFunctorBase()
AStarFunctorBase::~AStarFunctorBase()
AStarFunctor_FromTo::~AStarFunctor_FromTo()
cAttractorTask::cAttractorTask()
cAttractorTask::~cAttractorTask()
cAttractorTask::~cAttractorTask()
cAttractorTask::ClearTasks(Brain&)
cAttractorTask::Activate()
cAttractorTask::Terminate(Brain&)
cAttractorTask::Process(Brain&, float const&)
cAttractorTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cAttractorTask::Init(MechCharacter*, WeakPtr<cAIAttractor>)
iMasterTask::iMasterTask()
iMasterTask::~iMasterTask()
iMasterTask::~iMasterTask()
iMasterTask::ClearTasks(Brain&)
iMasterTask::Activate()
iMasterTask::Terminate(Brain&)
iMasterTask::Disconnect()
iMasterTask::Process(Brain&, float const&)
iMasterTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
iMasterTask::OnSlaveDisconnected()
cVehicleRidingBaseTask::~cVehicleRidingBaseTask()
cVehicleRidingBaseTask::~cVehicleRidingBaseTask()
cVehicleRidingBaseTask::GetJumpOutPosition(MechObjectInterface*, MechObjectInterface*)
sAICharacterSubTypeData::Import(NuArchive&)
sAICharacterMainTypeData::Import(NuArchive&)
sAICharacterMainTypeData::Clear()
sAIVehicleSubTypeData::Import(NuArchive&)
sAIVehicleSubTypeData::Clear()
sAIVehicleMainTypeData::Import(NuArchive&)
sAIVehicleMainTypeData::Clear()
sAIVehicleDriverData::Import(NuArchive&)
sAIVehicleDriverData::Clear()
sAIVehicleData::Import(NuArchive&)
sAIVehicleData::Clear()
sAIVehicleData::GetDriverFromVehicleType(int, int, int&, int&) const
sAIVehicleMainTypeData::GetDriverFromVehicleType(int, int&, int&) const
sAIVehicleSubTypeData::GetDriverType(int&, int&) const
NuVector<sAICharacterSubTypeData*>::Reserve(unsigned int, bool)
NuVector<sAICharacterMainTypeData*>::Reserve(unsigned int, bool)
NuVector<sAIVehicleSubTypeData*>::Reserve(unsigned int, bool)
NuVector<sAIVehicleMainTypeData*>::Reserve(unsigned int, bool)
sUserSubType::Import(NuArchive&)
sUserMainType::~sUserMainType()
sUserMainType::Import(NuArchive&)
sAttractorBaseData::sAttractorBaseData()
sAttractorBaseData::~sAttractorBaseData()
sAttractorBaseData::Import(NuArchive&)
GLFencePost::Serialize(NuArchive&)
GLFence::Serialize(NuArchive&)
GLFenceList::GLFenceList(unsigned short)
GLFenceList::~GLFenceList()
GLFenceList::~GLFenceList()
GLFenceList::AddAtEnd(GLFence const&)
GLFenceList::PopFront()
GLFenceList::Clear()
GLFenceList::Get(unsigned int) const
GLFenceList::Remove(unsigned int)
GLHelper::GetRoadGroup(GLMap const&, char const*)
GLHelper::GetRoadGroup(GLMap const&, unsigned int)
GLHelper::GetToggleLayer(GLMap const&, char const*)
GLHelper::FindRoadGroup(GLMap const&, unsigned int)
GLHelper::GetLanesInRadius(GLLaneList&, GLMap const&, short, VuVec const&, float, short)
GLHelper::GetLanesInRadius(GLLaneList&, NvRTreeNode const*, unsigned int, GLMap const&, short, short, VuVec const&, float)
GLHelper::GetNodeLinksInRadius(GLNodeLinkList&, GLMap const&, VuVec const&, float)
GLHelper::GetNodeLinksInRadius(GLNodeLinkList&, NvRTreeNode const*, unsigned int, GLMap const&, VuVec const&, float)
GLHelper::GetDistanceToMap(GLMap const&, VuVec const&, float, float&)
GLHelper::GetNearestNodeLink(NvRTreeNode const*, unsigned int, GLMap const&, VuVec const&, float, float&, GLNodeLink const*&)
GLHelper::GetNearestNodeLink(GLMap const&, VuVec const&, float, GLNodeLink const*&)
GLHelper::GetLowLODGroundPlane(GLMap const*, VuVec const&, float, float, float, VuVec&, VuVec&)
GLHelper::GetLowLODGroundPlane(NvRTreeNode const*, unsigned int, GLMap const&, VuVec const&, float, float, float, float&, VuVec&, VuVec&)
GLHelper::GetRoadWallPlanes(GLMap const&, NuVec2 const&, float, NuVec2 const&, float, float, float, NuVec2&, float&, NuVec2&, float&)
GLHelper::GetBestNodeLink(NvRTreeNode const*, unsigned int, GLMap const&, VuVec const&, float, float, float, float&, GLNodeLink const*&)
GLHelper::GetClosestPointOnLaneForward(GLClosestPointLanePacket const&, float&, VuVec&, VuVec&, unsigned int&, float&, unsigned short, unsigned short)
GLHelper::GetRoadWallPlanes(NuVec2 const&, NuVec2 const&, NuVec2 const&, NuVec2 const&, float, NuVec2 const&, NuVec2 const&, float, NuVec2&, float&, NuVec2&, float&)
GLHelper::GetRoadWalls(GLMap const&, NuVec2 const&, float, VuVec const&, float, float, float, short&, bool&, short&, bool&)
GLHelper::GetFencesInCylinder(GLFenceList&, GLMap const&, VuVec const&, float, float, float)
GLHelper::GetFencesInCylinder(GLFenceList&, NvRTreeNode const*, unsigned int, GLMap const&, NuVec2 const&, float, float, float)
GLHelper::GetSpawnPointsInRadius(GLSpawnPointList&, GLMap const&, short, VuVec const&, float)
GLHelper::GetSpawnPointsInRadius(GLSpawnPointList&, unsigned int, GLMap const&, short, VuVec const&, float)
GLHelper::GetRampZonesInRadius(GLRampZoneList&, GLMap const&, VuVec const&, float)
GLHelper::GetRampZonesInRadius(GLRampZoneList&, unsigned int, GLMap const&, VuVec const&, float)
GLHelper::FrustumClipLane(GLLane const&, GLMap const&, NuCamera const&, float)
GLHelper::GetPointOnLane(GLLane const&, GLMap const&, float, VuVec&, VuVec&)
GLHelper::GetPointOnLane(GLLane const&, GLMap const&, float, VuVec&, VuVec&, unsigned int&, float&)
GLHelper::GetClosestPointOnLane(GLClosestPointLanePacket const&, float&, VuVec&, VuVec&, short, short)
GLHelper::GetClosestPointOnLane2(GLClosestPointLanePacket const&, float&, VuVec&, VuVec&, unsigned int&, float&, short, short)
GLHelper::GetClosestPointOnLaneReverse(GLClosestPointLanePacket const&, float&, VuVec&, VuVec&, unsigned int&, float&, unsigned short, unsigned short)
GLHelper::GetNodeLinkDistSqr(GLNodeLink const&, GLMap const&, VuVec const&)
GLHelper::GetClosestPointOnNodeLink(GLNodeLink const&, GLMap const&, VuVec const&, float&, VuVec&)
GLHelper::GetViewDistance(VuVec const&)
GLHelper::GetVehicleSpawnInfo(ApiVehicle&, float&, float&, float&)
GLHelper::GetVehicleSpawnInfo(CharDef*, CharDef*, float&, float&, float&)
GLHelper::RampZoneEnabled(GLRampZone const&)
GLHelper::TestOverlapRampZone(GLRampZone const&, VuVec const&, NuVec2 const&, NuVec2 const&, float)
GLLane::Serialize(NuArchive&)
GLLaneNode::Serialize(NuArchive&)
GLLaneNodeList::GLLaneNodeList(unsigned short)
GLLaneNodeList::~GLLaneNodeList()
GLLaneNodeList::~GLLaneNodeList()
GLLaneNodeList::AddAtEnd(GLLaneNode const&)
GLLaneNodeList::Clear()
GLLaneNodeList::Get(unsigned int) const
GLLaneList::GLLaneList(unsigned short)
GLLaneList::~GLLaneList()
GLLaneList::~GLLaneList()
GLLaneList::AddAtEnd(GLLane const&)
GLLaneList::PopFront()
GLLaneList::Clear()
GLLaneList::Get(unsigned int) const
GLLaneList::Remove(unsigned int)
GLToggleLane::Serialize(NuArchive&)
GLToggleJunctionLane::Serialize(NuArchive&)
GLNodeLink::Serialize(NuArchive&)
GLNodeLinkList::GLNodeLinkList(unsigned short)
GLNodeLinkList::~GLNodeLinkList()
GLNodeLinkList::~GLNodeLinkList()
GLNodeLinkList::AddAtEnd(GLNodeLink const&)
GLNodeLinkList::PopFront()
GLNodeLinkList::Clear()
GLNodeLinkList::Get(unsigned int) const
GLNodeLinkList::Remove(unsigned int)
GLToggleNodeLink::Serialize(NuArchive&)
GLRampZone::Serialize(NuArchive&)
GLRampZoneList::GLRampZoneList(unsigned short)
GLRampZoneList::~GLRampZoneList()
GLRampZoneList::~GLRampZoneList()
GLRampZoneList::AddAtEnd(GLRampZone const&)
GLRampZoneList::PopFront()
GLRampZoneList::Clear()
GLRampZoneList::Get(unsigned int) const
GLRampZoneList::Remove(unsigned int)
GLSpawnPoint::Serialize(NuArchive&, int)
GLSpawnPointList::GLSpawnPointList(unsigned short)
GLSpawnPointList::~GLSpawnPointList()
GLSpawnPointList::~GLSpawnPointList()
GLSpawnPointList::AddAtEnd(GLSpawnPoint const&)
GLSpawnPointList::PopFront()
GLSpawnPointList::Clear()
GLSpawnPointList::Get(unsigned int) const
GLSpawnPointList::Remove(unsigned int)
GridlockSystem::GridlockSystem()
GridlockSystem::~GridlockSystem()
GridlockSystem::~GridlockSystem()
GridlockSystem::GetHelper()
GridlockSystem::Init()
GridlockSystem::EventNotify(Event&, NuEventData&)
GridlockSystem::ShutDown()
GridlockSystem::AddManagersForLevel(MechLevelContainer&)
GridlockSystem::RemoveManagersForLevel(MechLevelContainer&)
GridlockSystem::OnEnterLevel(MechLevelContainer&)
GridlockSystem::OnExitLevel(MechLevelContainer&)
GridlockSystem::OnResetLevel(MechLevelContainer&)
GridlockSystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
GridlockSystem::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
GridlockSystem::ShouldAddManagersForLevel(MechLevelContainer&)
GridlockSystem::RegisterScriptFunctionality()
GridlockSystem::ParseCommandLine(int, char**)
GridlockSystem::GetMap(LevelContainer*, char const*) const
GridlockManager::GetMap(char const*) const
GridlockSystem::GetMap(LevelContainer*, unsigned int) const
GridlockManager::GetMap(unsigned int) const
GridlockSystem::GetMap(GridlockMapHandle const&) const
GridlockManager::GetFromHandle(GridlockMapHandle const&)
GridlockManager::GetMap(GridlockMapHandle const&) const
GridlockManager::GridlockManager()
GridlockManager::~GridlockManager()
GridlockManager::DestroyMaps()
GridlockManager::~GridlockManager()
GridlockManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
GridlockManager::RegisterRendering()
GridlockManager::EventNotify(Event&, NuEventData&)
GridlockManager::CreateMaps(void*)
GridlockManager::GetMap(GLMap const&) const
GridlockManager::LoadMap(GridlockMapHandle const&)
GridlockManager::UnloadMap(GridlockMapHandle const&)
GridlockManager::UnloadAllMaps()
GridlockManager::GetLoadedMapCount() const
GridlockManager::GetFromLevelOrParent(LevelContainer*)
MechManager::GetManagerName() const
MechSystemBase<GridlockSystem, int>::Suppress(int)
MechSystemBase<GridlockSystem, int>::IsSuppressed(int) const
GridlockManagerHelper::~GridlockManagerHelper()
AITask* CreateObject<AITask*, TrafficTask>()
AITask* CreateObject<AITask*, StopTask>()
AITask* CreateObject<AITask*, DriveToTask>()
AITask* CreateObject<AITask*, FleeTask>()
AITask* CreateObject<AITask*, FleeToTask>()
AITask* CreateObject<AITask*, ChaseTask>()
Steering::Pipeline::Pipeline()
Steering::Pipeline::~Pipeline()
Steering::Pipeline::SetActuator(Steering::Actuator*)
Steering::Pipeline::AddTargeter(Steering::Targeter*)
Steering::Pipeline::AddDecomposer(Steering::Decomposer*)
Steering::Pipeline::AddConstraint(Steering::Constraint*)
Steering::Pipeline::GetSteering(Steering::SteeringOutput&, Steering::Actor const&, GLMap const*, float)
ActorAvoidConstraint::ActorAvoidConstraint(short const&)
ActorAvoidConstraint::~ActorAvoidConstraint()
ActorAvoidConstraint::~ActorAvoidConstraint()
ActorAvoidConstraint::TestViolatesPath(Steering::Actor const&, Steering::Path&, GLMap const*, float, float)
ActorAvoidConstraint::SuggestPath(Steering::Actor const&, Steering::Path const&, GLMap const*)
ActorAvoidConstraint::AddIgnoredAvoidableHandle(short)
ActorAvoidConstraint::RemoveIgnoredAvoidableHandle(short)
ActorStopConstraint::ActorStopConstraint(short const&)
ActorStopConstraint::~ActorStopConstraint()
ActorStopConstraint::~ActorStopConstraint()
ActorStopConstraint::TestViolatesPath(Steering::Actor const&, Steering::Path&, GLMap const*, float, float)
ActorStopConstraint::SuggestPath(Steering::Actor const&, Steering::Path const&, GLMap const*)
ActorStopConstraint::AddIgnoredAvoidableHandle(short)
ActorStopConstraint::RemoveIgnoredAvoidableHandle(short)
PathClipPlaneList::PathClipPlaneList(unsigned short)
PathClipPlaneList::~PathClipPlaneList()
PathClipPlaneList::~PathClipPlaneList()
PathClipPlaneList::AddAtEnd(NuVec2 const&, NuVec2 const&)
PathClipPlaneList::Clear()
PathClipPlaneList::Get(unsigned int) const
CorneringDecomposer::DecomposeGoal(Steering::Actor const&, GLMap const*, Steering::Goal const&, Steering::Path&, float)
Steering::Decomposer::~Decomposer()
CorneringDecomposer::~CorneringDecomposer()
PlanningDecomposer::~PlanningDecomposer()
PlanningDecomposer::~PlanningDecomposer()
PlanningDecomposer::DecomposeGoal(Steering::Actor const&, GLMap const*, Steering::Goal const&, Steering::Path&, float)
PlanningDecomposer::BuildPath(Steering::Actor const&, GLMap const&, Steering::Goal const&)
PlanningDecomposer::UpdatePathProgress(Steering::Actor const&, GLMap const&, VehiclePath&)
PlanningDecomposer::UpdateTargetProgress(Steering::Actor const&, GLMap const&, VehiclePath&)
PlanningDecomposer::BuildNodeLinkList(NodeLinkPath&, unsigned int, unsigned int, unsigned int, unsigned int, GLMap const&) const
PlanningDecomposer::ChangeLane(float, float, float) const
PlanningDecomposer::GoalBlocked(Steering::Actor const&, GLMap const&, GLFenceList const*) const
SteerDecisionArc::SteerDecisionArc(unsigned int)
SteerDecisionArc::~SteerDecisionArc()
SteerDecisionArc::AddRange(float, float, float, float, float, float, float, float, float, float, float, float, float, float, bool)
SteerDecisionArc::GetValue(float, float, float, float&, float&, float&) const
SteerDecisionArc::Get(unsigned int) const
SteerDecisionArcRange::GetValue(float, float, float, float&, float&, float&) const
VehicleActuator::~VehicleActuator()
VehicleActuator::~VehicleActuator()
VehicleActuator::CreatePath()
VehicleActuator::GetPath(Steering::Path&, Steering::Goal const&)
VehicleActuator::GetSteering(Steering::SteeringOutput&, Steering::Path const&, Steering::Actor const&, float)
VehicleActuator::SmoothSeek(float, float, float&, float, float, float)
VehicleActuator::GetVehicleSteering(Steering::SteeringOutput&, Steering::Actor const&, float)
VehicleActuator::GetVehicleVelocity(ApiVehicle&)
VehicleActuator::GetVehicleSpeed(ApiVehicle&)
VehicleActuator::GetVehicle(ApiCharacter*)
Steering::Path::~Path()
Steering::Path::~Path()
Steering::Path::GetPriority() const
ZoneConstraint::ZoneConstraint()
ZoneConstraint::~ZoneConstraint()
ZoneConstraint::~ZoneConstraint()
ZoneConstraint::TestViolatesPath(Steering::Actor const&, Steering::Path&, GLMap const*, float, float)
ZoneConstraint::SuggestPath(Steering::Actor const&, Steering::Path const&, GLMap const*)
ChaseLanePathFunctor::GetLinkCost(LanePathLink&, GLMap const&, LanePathTargetData const&, LanePathTargetData const*) const
ChaseLanePathFunctor::GetRoadCost(short) const
ChaseLanePathFunctor::GoalAchieved(short, LanePathNode const*, GLMap const&, LanePathTargetData const&, LanePathTargetData const&) const
ChaseLanePathFunctor::CostToGoal(short, short, GLMap const&, VuVec const&) const
ChaseGoalTargeter::GetGoal()
ChasePlanningDecomposer::DecomposeGoal(Steering::Actor const&, GLMap const*, Steering::Goal const&, Steering::Path&, float)
ChasePlanningDecomposer::WithinGoalRange(VuVec const&, VuVec const&, float) const
ChasePlanningDecomposer::UpdateGoalProgress(Steering::Actor const&, GLMap const&, VehiclePath&)
ChasePlanningDecomposer::BuildPath(Steering::Actor const&, GLMap const&, Steering::Goal const&)
ChasePlanningDecomposer::ChangeLane(float, float, float, bool) const
ChaseTask::ChaseTask()
ChaseTask::~ChaseTask()
ChaseTask::~ChaseTask()
ChaseTask::ClearTasks(Brain&)
ChaseTask::Activate()
ChaseTask::Terminate(Brain&)
ChaseTask::Process(Brain&, float const&)
ChaseTask::Initialise(Brain&)
ChaseTask::ProcessChaseBehaviour(GLMap const*, VuVec const&, VuVec const&, float)
ChaseTask::UpdateGoal(VuVec const&, VuVec const&, Steering::Actor const&, DriveTarget const&)
ChaseTask::Drive(GLMap const*, Steering::SteeringOutput&, float)
ChaseTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
ChaseTask::SetTarget(DriveTarget const&)
ChaseTask::GetLevelContainer() const
ChaseTask::InitialisePipeline(GLMap const*)
ChaseTask::AddTargetAvoidableHandle(short)
ChaseTask::CanAttack(NuVec2 const&, NuVec2 const&, NuVec2 const&, NuVec2 const&, float, GLMap const*) const
ChaseTask::IgnoreTargetAvoidableHandles(bool)
ChaseLanePathFunctor::~ChaseLanePathFunctor()
ChaseGoalTargeter::~ChaseGoalTargeter()
ChasePlanningDecomposer::~ChasePlanningDecomposer()
DriveToLanePathFunctor::GetLinkCost(LanePathLink&, GLMap const&, LanePathTargetData const&, LanePathTargetData const*) const
DriveToLanePathFunctor::GetRoadCost(short, LanePathLink::LaneDirection, float&) const
DriveToLanePathFunctor::GoalAchieved(short, LanePathNode const*, GLMap const&, LanePathTargetData const&, LanePathTargetData const&) const
DriveToLanePathFunctor::CostToGoal(short, short, GLMap const&, VuVec const&) const
DriveToGoalTargeter::GetGoal()
DriveToPlanningDecomposer::DecomposeGoal(Steering::Actor const&, GLMap const*, Steering::Goal const&, Steering::Path&, float)
DriveToPlanningDecomposer::WithinGoalRange(VuVec const&, VuVec const&, float) const
DriveToPlanningDecomposer::GoalMoved(VuVec const&) const
DriveToPlanningDecomposer::BuildPath(Steering::Actor const&, GLMap const&, Steering::Goal const&)
DriveToPlanningDecomposer::ChangeLane(float, float, float, bool) const
DriveToLanePathFunctor::~DriveToLanePathFunctor()
DriveToTask::DriveToTask()
DriveToTask::~DriveToTask()
DriveToTask::~DriveToTask()
DriveToTask::ClearTasks(Brain&)
DriveToTask::Activate()
DriveToTask::Terminate(Brain&)
DriveToTask::Process(Brain&, float const&)
DriveToTask::Initialise(Brain&)
DriveToTask::ProcessWaypoints(VuVec const&)
DriveToTask::ProcessRubberBands(VuVec const&)
DriveToTask::Drive(GLMap const*, Steering::SteeringOutput&, float)
DriveToTask::DispatchEventArrived(ApiCharacter*) const
DriveToTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
DriveToTask::AddWaypoint(DriveTarget const&)
DriveToTask::ClearWaypoints()
DriveToTask::SetWaypointSpeed(DriveTarget const&, float)
DriveToTask::AddRubberBand(ApiCharacter&, float, float)
DriveToTask::AddRubberBand(ApiVehicle&, float, float)
DriveToTask::InitialisePipeline(GLMap const*)
DriveToTask::TestArrived(VuVec const&, float, VuVec const&, float, float, float) const
DriveToTask::DispatchWaypointEventArrived(ApiCharacter*) const
DriveToTask::UpdateGoal(DriveTarget const&, VuVec const&, bool)
DriveToLanePathFunctor::~DriveToLanePathFunctor()
DriveToGoalTargeter::~DriveToGoalTargeter()
DriveToPlanningDecomposer::~DriveToPlanningDecomposer()
FleeLanePathFunctor::GetLinkCost(LanePathLink&, GLMap const&, LanePathTargetData const&, LanePathTargetData const*) const
FleeLanePathFunctor::GetRoadCost(short) const
FleeLanePathFunctor::GoalAchieved(short, LanePathNode const*, GLMap const&, LanePathTargetData const&, LanePathTargetData const&) const
FleeLanePathFunctor::CostToGoal(short, short, GLMap const&, VuVec const&) const
FleeGoalTargeter::GetGoal()
FleePlanningDecomposer::DecomposeGoal(Steering::Actor const&, GLMap const*, Steering::Goal const&, Steering::Path&, float)
FleePlanningDecomposer::BuildPath(Steering::Actor const&, GLMap const&, Steering::Goal const&)
FleePlanningDecomposer::ChangeLane(float, float, float, bool) const
FleeTask::FleeTask()
FleeTask::~FleeTask()
FleeTask::~FleeTask()
FleeTask::ClearTasks(Brain&)
FleeTask::Activate()
FleeTask::Terminate(Brain&)
FleeTask::Process(Brain&, float const&)
FleeTask::Initialise(Brain&)
FleeTask::ProcessRubberBands(VuVec const&)
FleeTask::Drive(GLMap const*, Steering::SteeringOutput&, float)
FleeTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
FleeTask::AddRubberBand(ApiCharacter&, float, float)
FleeTask::AddRubberBand(ApiVehicle&, float, float)
FleeTask::InitialisePipeline(GLMap const*)
FleeLanePathFunctor::~FleeLanePathFunctor()
FleeGoalTargeter::~FleeGoalTargeter()
FleePlanningDecomposer::~FleePlanningDecomposer()
FleeToLanePathFunctor::GetLinkCost(LanePathLink&, GLMap const&, LanePathTargetData const&, LanePathTargetData const*) const
FleeToLanePathFunctor::GetRoadCost(short) const
FleeToLanePathFunctor::GoalAchieved(short, LanePathNode const*, GLMap const&, LanePathTargetData const&, LanePathTargetData const&) const
FleeToLanePathFunctor::CostToGoal(short, short, GLMap const&, VuVec const&) const
FleeToGoalTargeter::GetGoal()
FleeToPlanningDecomposer::DecomposeGoal(Steering::Actor const&, GLMap const*, Steering::Goal const&, Steering::Path&, float)
FleeToPlanningDecomposer::WithinGoalRange(VuVec const&, VuVec const&, float) const
FleeToPlanningDecomposer::GoalMoved(VuVec const&) const
FleeToPlanningDecomposer::BuildPath(Steering::Actor const&, GLMap const&, Steering::Goal const&)
FleeToPlanningDecomposer::ChangeLane(float, float, float, bool) const
FleeToTask::FleeToTask()
FleeToTask::~FleeToTask()
FleeToTask::~FleeToTask()
FleeToTask::ClearTasks(Brain&)
FleeToTask::Activate()
FleeToTask::Terminate(Brain&)
FleeToTask::Process(Brain&, float const&)
FleeToTask::Initialise(Brain&)
FleeToTask::ProcessRubberBands(VuVec const&)
FleeToTask::Drive(GLMap const*, Steering::SteeringOutput&, float)
FleeToTask::DispatchEventArrived(ApiCharacter*) const
FleeToTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
FleeToTask::AddRubberBand(ApiCharacter&, float, float)
FleeToTask::AddRubberBand(ApiVehicle&, float, float)
FleeToTask::InitialisePipeline(GLMap const*)
FleeToTask::UpdateGoal(DriveTarget const&, VuVec const&, bool)
FleeToLanePathFunctor::~FleeToLanePathFunctor()
FleeToGoalTargeter::~FleeToGoalTargeter()
FleeToPlanningDecomposer::~FleeToPlanningDecomposer()
StopGoalTargeter::GetGoal()
StopTask::StopTask()
StopTask::~StopTask()
StopTask::~StopTask()
StopTask::ClearTasks(Brain&)
StopTask::Activate()
StopTask::Terminate(Brain&)
StopTask::Process(Brain&, float const&)
StopTask::Initialise(Brain&)
StopTask::Drive(GLMap const*, Steering::SteeringOutput&, float)
StopTask::InitialisePipeline(GLMap const*)
StopGoalTargeter::~StopGoalTargeter()
TrafficLanePathFunctor::GetLinkCost(LanePathLink&, GLMap const&, LanePathTargetData const&, LanePathTargetData const*) const
TrafficLanePathFunctor::GoalAchieved(short, LanePathNode const*, GLMap const&, LanePathTargetData const&, LanePathTargetData const&) const
TrafficLanePathFunctor::CostToGoal(short, short, GLMap const&, VuVec const&) const
TrafficPlanningDecomposer::DecomposeGoal(Steering::Actor const&, GLMap const*, Steering::Goal const&, Steering::Path&, float)
TrafficPlanningDecomposer::BuildPath(Steering::Actor const&, GLMap const&, Steering::Goal const&)
BeepList::BeepList(unsigned short)
BeepList::~BeepList()
BeepList::~BeepList()
BeepList::Process(float)
BeepList::PopFront()
BeepList::AddAtEnd(float, float)
BeepList::Clear()
BeepList::ShouldBeep() const
TrafficTask::TrafficTask()
TrafficTask::~TrafficTask()
TrafficTask::~TrafficTask()
TrafficTask::ClearTasks(Brain&)
TrafficTask::Activate()
TrafficTask::Terminate(Brain&)
TrafficTask::Process(Brain&, float const&)
TrafficTask::Initialise(Brain&)
TrafficTask::Drive(GLMap const*, Steering::SteeringOutput&, float)
TrafficTask::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
TrafficTask::InitialisePipeline(GLMap const*)
TrafficLanePathFunctor::~TrafficLanePathFunctor()
TrafficPlanningDecomposer::~TrafficPlanningDecomposer()
DriveTarget::DriveTarget()
DriveTarget::DriveTarget(VuVec const&, float, unsigned int, float)
DriveTarget::DriveTarget(ApiVehicle&, unsigned int, float)
DriveTarget::DriveTarget(ApiCharacter&, unsigned int, float)
DriveTarget::Set(VuVec const&, float, unsigned int, float)
DriveTarget::Set(ApiVehicle&, unsigned int, float)
DriveTarget::Set(ApiCharacter&, unsigned int, float)
DriveTarget::IsValid() const
DriveTarget::GetPosition(VuVec&) const
DriveTarget::GetDirection(VuVec&) const
DriveTarget::GetVelocity(VuVec&) const
DriveTarget::GetDimensions(float&, float&, float&) const
DriveTarget::CalculateRelativeSpeedXZ(NuVec2 const&, float) const
DriveTarget::GetHitPoints() const
DriveTarget::operator=(DriveTarget const&)
DriveTarget::operator==(DriveTarget const&) const
DriveTarget::operator!=(DriveTarget const&) const
DriveTargetList::DriveTargetList(unsigned short)
DriveTargetList::~DriveTargetList()
DriveTargetList::~DriveTargetList()
DriveTargetList::AddAtEnd(DriveTarget const&)
DriveTargetList::PopFront()
DriveTargetList::Clear()
DriveTargetList::Get(unsigned int) const
DriveTargetList::Remove(unsigned int)
LanePathTargetData::LanePathTargetData(unsigned int)
LanePathTargetData::~LanePathTargetData()
LanePathTargetData::~LanePathTargetData()
LanePathTargetData::AddTarget(short, float, float)
LanePathTargetData::Clear()
LanePathTargetData::Get(unsigned int) const
LanePathTargetData::Find(short) const
LaneFinderTicket::LaneFinderTicket()
LaneFinderTicket::~LaneFinderTicket()
LaneFinderTicket::Clear()
LaneFinder::LaneFinder(unsigned short)
LaneFinder::~LaneFinder()
LaneFinder::Clear()
LaneFinder::SortTickets(float)
LaneFinder::Calculate(LaneFinderContext&)
LaneFinder::CalculateInternal(LaneFinderContext&)
LaneFinder::RequestPathTicket(LaneFinderTicket&, LaneFinderTicket::Priority)
LaneFinder::RemovePathTicket(LaneFinderTicket&)
LaneFinder::RequestPath(LaneFinderTicket&)
LaneFinder::CreateNode(short, short, bool&)
LaneFinder::SetInOpenList(short, bool)
LaneFinder::GetBestNode()
LaneFinder::ConstructPath(LaneFinderContext&, short)
LaneFinder::SetInClosedList(short, bool)
LaneFinder::BuildLinks(short, LaneFinderContext&)
LaneFinder::GetFreeNode()
LanePath::LanePath(unsigned short)
LanePath::~LanePath()
LanePath::~LanePath()
LanePath::AddAtEnd(GLMap const&, short, bool)
LanePath::AddAtEnd(GLMap const&, short, float, float, bool)
LanePath::PopFront(GLMap const&)
LanePath::PopBack(GLMap const&)
LanePath::Clear()
LanePath::Get(unsigned int) const
NodeLinkPath::NodeLinkPath(unsigned short)
NodeLinkPath::~NodeLinkPath()
NodeLinkPath::~NodeLinkPath()
NodeLinkPath::AddAtEnd(GLMap const&, short, bool)
NodeLinkPath::GetPosition(VuVec&, float, GLMap const&) const
NodeLinkPath::GetPositionAndDirection(VuVec&, VuVec&, float, GLMap const&) const
NodeLinkPath::GetDirection(VuVec&, float, GLMap const&) const
NodeLinkPath::GetPositionDirectionAndHalfWidth(VuVec&, VuVec&, float&, float, GLMap const&) const
NodeLinkPath::Get(unsigned int) const
NodeLinkPath::TestOOB(float&, float, float, MechAIAvoidance::OOB2D const&, GLMap const&) const
NodeLinkPath::Clear()
NodeMap::NodeMap(unsigned int)
NodeMap::Clear()
NodeMap::~NodeMap()
NodeMap::Add(short, unsigned short)
NodeMap::Find(short) const
ChaseTarget::ChaseTarget()
ChaseTarget::Clear()
ChaseTarget::~ChaseTarget()
ChaseTarget::Init(DriveTarget const&)
ChaseTarget::AddChaser(DriveTarget const&)
ChaseTarget::RemoveChaser(DriveTarget const&)
ChaseTarget::GetChaseSlot(NuVec2 const&, NuVec2 const&) const
ChaseTarget::LockChaseSlot(ChaseTarget::ChaseSlot)
ChaseTarget::UnlockChaseSlot(ChaseTarget::ChaseSlot)
ChaseTarget::IsAttackSlotLocked() const
ChaseTarget::LockAttackSlot()
ChaseTarget::UnlockAttackSlot()
ChaseTarget::CalculateChasePosition(VuVec const&, VuVec const&, float, ChaseTarget::ChaseSlot, VuVec&) const
ChaseTarget::GetNumChasers() const
ChaseTarget::GetHealth() const
ChaseManager::GetFrom(LevelContainer*)
ChaseManager::GetFrom(ChaseTask const&)
ChaseManager::ChaseManager(unsigned int)
ChaseManager::~ChaseManager()
ChaseManager::~ChaseManager()
ChaseManager::AddChaseTarget(DriveTarget const&)
ChaseManager::Find(DriveTarget const&) const
ChaseManager::Get(unsigned int) const
ChaseManager::RemoveChaseTarget(DriveTarget const&)
ChaseManager::Clear()
RubberBand::RubberBand()
RubberBand::RubberBand(ApiCharacter&, float, float)
RubberBand::RubberBand(ApiVehicle&, float, float)
RubberBand::IsValid() const
RubberBand::operator=(RubberBand const&)
RubberBandList::RubberBandList(unsigned short)
RubberBandList::~RubberBandList()
RubberBandList::~RubberBandList()
RubberBandList::AddAtEnd(RubberBand const&)
RubberBandList::Clear()
RubberBandList::Get(unsigned int) const
RubberBandList::Remove(unsigned int)
VehiclePath::GetPriority() const
VehiclePath::~VehiclePath()
VehiclePath::~VehiclePath()
GLToggleLayerSVar::AsBool() const
GLToggleLayerSVar::Initialise()
SAction_GridlockToggleLayer::Exec(ScriptContext&)
GridlockToggleLayerAction::Exec(ScriptContext&)
GridlockToggleLayerAction_Toggle::GetInputs(SCmdParams&) const
GridlockToggleLayerAction_Toggle::ToggleLayerExec(ScriptContext&, GLToggleLayerSVarData&)
GLToggleLayerSVar::~GLToggleLayerSVar()
GLToggleLayerSVar::Equals(ScriptVariable const*)
GLToggleLayerSVar::Set(ScriptVariable const*)
GridlockToggleLayerAction::~GridlockToggleLayerAction()
GridlockToggleLayerAction_Toggle::~GridlockToggleLayerAction_Toggle()
GridlockToggleLayerAction_Toggle::GetName() const
GridlockToggleLayerAction_Toggle::GetOutputs(SCmdParams&) const
SAction_GridlockToggleLayer::~SAction_GridlockToggleLayer()
SAction_GridlockToggleLayer::GetName() const
SAction_GridlockToggleLayer::GetInputs(SCmdParams&) const
SAction_GridlockToggleLayer::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<GLToggleLayerSVar>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<GLToggleLayerSVar>(char const*, ScriptContext&)
GLMapSVar::AsBool() const
GLMapSVar::Initialise()
SAction_GridlockMap::Exec(ScriptContext&)
GridlockMapAction::Exec(ScriptContext&)
GridlockMapAction_IsLoaded::MapExec(ScriptContext&, GLMapSVarData&)
GridlockMapAction_Load::MapExec(ScriptContext&, GLMapSVarData&)
GridlockMapAction_Unload::MapExec(ScriptContext&, GLMapSVarData&)
GLMapSVar::~GLMapSVar()
GLMapSVar::Equals(ScriptVariable const*)
GLMapSVar::Set(ScriptVariable const*)
SAction_GridlockMap::~SAction_GridlockMap()
SAction_GridlockMap::GetName() const
SAction_GridlockMap::GetInputs(SCmdParams&) const
SAction_GridlockMap::GetOutputs(SCmdParams&) const
GridlockMapAction::~GridlockMapAction()
GridlockMapAction_IsLoaded::~GridlockMapAction_IsLoaded()
GridlockMapAction_IsLoaded::GetName() const
GridlockMapAction_IsLoaded::GetInputs(SCmdParams&) const
GridlockMapAction_IsLoaded::GetOutputs(SCmdParams&) const
GridlockMapAction_Load::~GridlockMapAction_Load()
GridlockMapAction_Load::GetName() const
GridlockMapAction_Load::GetInputs(SCmdParams&) const
GridlockMapAction_Load::GetOutputs(SCmdParams&) const
GridlockMapAction_Unload::~GridlockMapAction_Unload()
GridlockMapAction_Unload::GetName() const
GridlockMapAction_Unload::GetInputs(SCmdParams&) const
GridlockMapAction_Unload::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<GLMapSVar>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<GLMapSVar>(char const*, ScriptContext&)
GLMap::GLMap(GridlockManager&)
GLMap::~GLMap()
GLMap::Destroy()
GLMap::Create(char const*)
GLMap::Load()
GLMap::DoLoad(void*)
GLMapEventData::~GLMapEventData()
GLNode::Serialize(NuArchive&)
GLRoad::Serialize(NuArchive&)
GLRoadGroup::Serialize(NuArchive&)
GLToggleRoad::Serialize(NuArchive&)
GLLayer::GLLayer()
GLLayer::~GLLayer()
GLLayer::Serialize(NuArchive&)
GLLayer::Enable(GLMap&)
GLLayer::Disable(GLMap&)
GLToggleLayer::~GLToggleLayer()
GLToggleLayer::Serialize(NuArchive&)
GLToggleLayer::SetState(GLToggleLayer::ToggleLayerState, GLMap&)
IndexList::IndexList(unsigned int)
IndexList::~IndexList()
IndexList::Add(short)
IndexList::GetNextFree()
IndexList::Remove(short)
GLJunction::Serialize(NuArchive&)
MechTrafficParser::PK_BeginVehicleModelGroup(nufpar_s*)
MechTrafficSystem::AddVehicleModelGroup(char const*)
MechTrafficParser::PK_EndVehicleModelGroup(nufpar_s*)
MechTrafficParser::PK_Vehicle(nufpar_s*)
MechTrafficSystem::AddVehicleModelGroupVehicle(int, char const*)
MechTrafficSystem::MechTrafficSystem()
MechTrafficSystem::~MechTrafficSystem()
NuHashMap<unsigned int, int>::~NuHashMap()
MechTrafficSystem::~MechTrafficSystem()
MechTrafficSystem::GetHelper()
MechTrafficSystem::Init()
void* Constructor<MechTrafficAddOn>()
MechTrafficSystem::ShutDown()
MechTrafficSystem::OnLoadPermComplete()
MechTrafficSystem::RemoveManagersForLevel(MechLevelContainer&)
MechTrafficSystem::OnEnterLevel(MechLevelContainer&)
MechTrafficSystem::OnExitLevel(MechLevelContainer&)
MechTrafficSystem::OnResetLevel(MechLevelContainer&)
MechTrafficSystem::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MechTrafficSystem::ShouldAddManagersForLevel(MechLevelContainer&)
MechTrafficSystem::GetVehicleModelGroup(HashedKey const&) const
MechTrafficSystem::FindCachedVehicleModelId(char const*) const
MechTrafficSystem::CacheVehicleModelId(char const*)
VehicleModelGroup::VehicleModelGroup()
VehicleModelGroup::VehicleModelGroup(char const*)
VehicleModelGroup::VehicleModelGroup(HashedKey const&)
VehicleModelGroup::~VehicleModelGroup()
TrafficModel::TrafficModel()
ActiveTrafficModel::ActiveTrafficModel()
TrafficSpawnHistoryList::TrafficSpawnHistoryList()
TrafficSpawnHistoryList::~TrafficSpawnHistoryList()
TrafficSpawnHistoryList::~TrafficSpawnHistoryList()
TrafficSpawnHistoryList::Push(short)
TrafficSpawnHistoryList::GetWeight(short) const
TrafficZone::TrafficZone()
TrafficZone::TrafficZone(char const*)
TrafficZone::TrafficZone(HashedKey const&)
TrafficZone::~TrafficZone()
NuHashMap<int, float>::~NuHashMap()
TrafficZone::AddConvexArea(AIConvexArea const&)
TrafficZone::TestOverlap(VuVec const&, float, float&) const
TrafficZone::GetModelWeight(int, float&) const
PlayerTrafficZoneList::PlayerTrafficZoneList()
PlayerTrafficZoneList::~PlayerTrafficZoneList()
PlayerTrafficZoneList::Clear()
PlayerTrafficZoneList::AddTrafficZone(TrafficZone const&, float)
PlayerTrafficZoneList::CalculateWeight(int) const
InactiveTrafficVehicle::InactiveTrafficVehicle()
InactiveTrafficVehicle::~InactiveTrafficVehicle()
InactiveTrafficVehicle::~InactiveTrafficVehicle()
InactiveTrafficVehicle::Initialise(ApiVehicle&, int)
InactiveTrafficVehicle::Clear()
InactiveTrafficVehicle::Activate(ApiVehicleManager&, VuMtx const&)
MechTrafficManager::MechTrafficManager(LevelContainer&)
MechTrafficManager::~MechTrafficManager()
NuVector<TrafficZone*>::DeleteAll()
MechTrafficManager::~MechTrafficManager()
MechTrafficManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechTrafficManager::ProcessPlayers()
MechTrafficManager::PreProcessActiveModels(float)
MechTrafficManager::ProcessActiveModels(float)
MechTrafficManager::ProcessSpawning(float)
MechTrafficManager::IsInactiveVehicleProcIdle()
MechTrafficManager::IsModelResourceLoaded(ActiveTrafficModel const&) const
MechTrafficManager::CreateInactiveVehiclesProc(void*)
MechTrafficManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MechTrafficManager::RegisterProcessing()
MechTrafficManager::RegisterRendering()
MechTrafficManager::EventNotify(Event&, NuEventData&)
MechTrafficManager::EnableTraffic(bool)
MechTrafficManager::BuildPlayerTrafficZones(PlayerTrafficZoneList&, NuCamera const*) const
TrafficList<ActiveTrafficModel>::Remove(unsigned int)
MechTrafficManager::GetNextUniqueModelId() const
MechTrafficManager::AddActiveVehicleModel(TrafficModel const&, bool, bool, bool)
MechTrafficManager::ReleaseModelResource(ActiveTrafficModel&, bool)
MechTrafficManager::IsModelResourceLoading(ActiveTrafficModel const&) const
MechTrafficManager::LoadModelResource(ActiveTrafficModel&)
MechTrafficManager::GetPlayerTrafficZoneList(int) const
MechTrafficManager::GetActivePlayerRefIndex() const
MechTrafficManager::GetNextTrafficSpawn() const
MechTrafficManager::DoSpawn(ActiveTrafficModel&, TrafficSpawnLocation const&, bool, bool)
MechTrafficManager::ClearTrafficModels()
MechTrafficManager::SetDefaultMap(GridlockMapHandle, short)
MechTrafficManager::SetMinMaxSpeed(float, float)
MechTrafficManager::SetUniqueModels(unsigned int, float)
MechTrafficManager::SetMaxActive(unsigned int)
MechTrafficManager::SetMaxActiveScale(float)
MechTrafficManager::IsSpatiallySignificant(VuVec const&, float, float, float) const
MechTrafficManager::AddTrafficZone(HashedKey const&)
MechTrafficManager::GetTrafficZoneIndex(HashedKey const&) const
MechTrafficManager::RemoveTrafficZone(HashedKey const&)
MechTrafficManager::EnableTrafficZone(HashedKey const&, bool)
MechTrafficManager::AddVehicleToTrafficZone(HashedKey const&, int, float)
MechTrafficManager::RemoveVehicleFromTrafficZone(HashedKey const&, int)
NuHashMap<int, float>::Erase(int const&)
MechTrafficManager::FindCachedVehicleModelId(char const*) const
MechTrafficManager::AddVehicleModel(TrafficModel const&, bool, bool, bool)
MechTrafficManager::RemoveVehicleModel(int)
MechTrafficManager::EnableVehicleModel(int, MechTrafficManager::EnableMode)
MechTrafficManager::SetVehicleModelEnabled(int, MechTrafficManager::EnableMode, bool)
MechTrafficManager::DisableVehicleModel(int, MechTrafficManager::EnableMode, bool)
MechTrafficManager::ProcessOptionallyCommonVehicleModels(unsigned int, unsigned int)
MechTrafficManager::GetDriverNameHash(MechVehicle&, unsigned int&) const
MechTrafficManager::DestroyInactiveVehicles(ActiveTrafficModel&, bool)
MechTrafficManager::GetActiveRefCamera() const
MechTrafficManager::GetRandomActiveVehicle(GridlockMapHandle, float, float) const
MechTrafficManager::GetSpawnLocation(TrafficSpawnLocation&, ActiveTrafficModel const&) const
MechTrafficManager::GetLaneSpawnLocation(TrafficSpawnLocation&, GLLane const&, GLMap const&, ActiveTrafficModel const&, float, unsigned int, float const*, float const*) const
MechTrafficManager::GetSpawnPointSpawnLocation(TrafficSpawnLocation&, GLSpawnPoint const&, ActiveTrafficModel const&) const
MechTrafficManager::BuildSpawnTransform(VuMtx&, TrafficSpawnLocation const&, float)
MechTrafficManager::OnMechVehicleSpawned(MechVehicle&, ActiveTrafficModel&, TrafficSpawnLocation const&, bool, bool) const
MechTrafficManager::SpawnVehicleForPlayer(GridlockMapHandle, VuVec const&, VuVec const&, float, float)
MechTrafficManager::CreateInactiveVehicles(ActiveTrafficModel&, ApiVehicleManager&, bool)
MechTrafficManager::CreateInactiveVehicle(ApiVehicleManager&, bool&)
MechTrafficManager::GetLaneSpawnLocation(TrafficSpawnLocation&, VuVec const&, VuVec const&, float, float, float const*, float const*) const
MechTrafficManager::ClassifyLaneSpawnLocation(VuVec const&, VuVec const&, NuCamera const&, float, MechTrafficManager::TrafficSpawnZone&) const
MechTrafficManager::VerifySpawnLocationZone(VuVec const&, float, MechTrafficManager::TrafficSpawnZone, float const*, float const*) const
MechTrafficManager::VerifySpawnLocation(TrafficSpawnLocation const&, float) const
MechTrafficManager::ClassifySpawnPointSpawnLocation(VuVec const&, VuVec const&, NuCamera const&, float, bool, MechTrafficManager::TrafficSpawnZone&) const
MechTrafficManager::CreateOccupantsForSpawnedVehicle(MechVehicle&, ActiveTrafficModel const&, TrafficSpawnLocation const&, bool) const
MechTrafficManager::CreateInitialAiTaskForSpawnedVehicle(MechVehicle&, ActiveTrafficModel const&, TrafficSpawnLocation const&) const
MechSystemBase<MechTrafficSystem, int>::Suppress(int)
MechSystemBase<MechTrafficSystem, int>::IsSuppressed(int) const
MechTrafficManagerHelper::~MechTrafficManagerHelper()
ActiveTrafficModelCompareFunctor::Compare(ActiveTrafficModel const&) const
TrafficModelCompareFunctor::Compare(TrafficModel const&) const
NuVector<VehicleModelGroup>::ReSize(unsigned int, bool)
NuVector<VehicleModelGroup>::Reserve(unsigned int, bool)
NuVector<AIConvexArea const*>::Reserve(unsigned int, bool)
NuVector<PlayerTrafficZoneList::PrioritisedTrafficZone>::Reserve(unsigned int, bool)
TrafficList<ActiveTrafficModel>::~TrafficList()
TrafficList<ActiveTrafficModel>::~TrafficList()
TrafficList<TrafficModel>::~TrafficList()
TrafficList<TrafficModel>::~TrafficList()
NuVector<InactiveTrafficVehicle*>::Reserve(unsigned int, bool)
NuVector<TrafficZone*>::Reserve(unsigned int, bool)
NuVector<MechTrafficManager::OptionalModelIndex>::Reserve(unsigned int, bool)
ClassManagerAccessor<ApiVehicleManager>::GetFromCreate(ILevelContainer const&)
IsAIControlledTraffic(ApiVehicle&, VehicleBrain&)
MechTrafficAddOn::MechTrafficAddOn(MechTrafficManager const*)
MechTrafficAddOn::~MechTrafficAddOn()
non-virtual thunk to MechTrafficAddOn::~MechTrafficAddOn()
non-virtual thunk to MechTrafficAddOn::~MechTrafficAddOn()
MechTrafficAddOn::~MechTrafficAddOn()
non-virtual thunk to MechTrafficAddOn::~MechTrafficAddOn()
non-virtual thunk to MechTrafficAddOn::~MechTrafficAddOn()
MechTrafficAddOn::StaticInit()
MechTrafficAddOn::OnHook(unsigned char, HookArgs*)
MechTrafficAddOn::OnProcess(float)
non-virtual thunk to MechTrafficAddOn::OnHook(unsigned char, HookArgs*)
MechTrafficAddOn::GetLevelContainer() const
non-virtual thunk to MechTrafficAddOn::GetLevelContainer() const
MechTrafficAddOn::OnAdded()
MechTrafficAddOn::ForceDesirability(MechTrafficAddOn::Desirability)
MechTrafficAddOn::OnRemoved()
MechTrafficAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to MechTrafficAddOn::EventNotify(Event&, NuEventData&)
MechTrafficAddOn::GetDesirabilityRangeAccessAmount(MechTrafficAddOn::Desirability) const
MechTrafficAddOn::GetDesirabilityTimer(MechTrafficAddOn::Desirability) const
MechTrafficAddOn::CanRemove() const
NvRTreeNode::Serialize(NuArchive&)
MechScripts::MechScriptInit()
InitCharacterActions()
CharacterAction_BeenKilled::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_BeenKilled::~CharacterAction_BeenKilled()
CharacterAction_BeenKilled::GetName() const
CharacterAction_BeenKilled::GetInputs(SCmdParams&) const
CharacterAction_BeenKilled::GetOutputs(SCmdParams&) const
CharacterAction_GetHealth::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_GetHealth::~CharacterAction_GetHealth()
CharacterAction_GetHealth::GetName() const
CharacterAction_GetHealth::GetInputs(SCmdParams&) const
CharacterAction_GetHealth::GetOutputs(SCmdParams&) const
CharacterAction_GetSpeed::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_GetSpeed::~CharacterAction_GetSpeed()
CharacterAction_GetSpeed::GetName() const
CharacterAction_GetSpeed::GetInputs(SCmdParams&) const
CharacterAction_GetSpeed::GetOutputs(SCmdParams&) const
CharacterAction_InContext::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_InContext::~CharacterAction_InContext()
CharacterAction_InContext::GetName() const
CharacterAction_InContext::GetInputs(SCmdParams&) const
CharacterAction_InContext::GetOutputs(SCmdParams&) const
CharacterAction_IsPlayer::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_IsPlayer::~CharacterAction_IsPlayer()
CharacterAction_IsPlayer::GetName() const
CharacterAction_IsPlayer::GetInputs(SCmdParams&) const
CharacterAction_IsPlayer::GetOutputs(SCmdParams&) const
CharacterAction_Kill::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_Kill::~CharacterAction_Kill()
CharacterAction_Kill::GetName() const
CharacterAction_Kill::GetInputs(SCmdParams&) const
CharacterAction_Kill::GetOutputs(SCmdParams&) const
CharacterAction_SetHealth::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetHealth::~CharacterAction_SetHealth()
CharacterAction_SetHealth::GetName() const
CharacterAction_SetHealth::GetInputs(SCmdParams&) const
CharacterAction_SetHealth::GetOutputs(SCmdParams&) const
MechCharacterNoEnityLayersCollisionListener::MechCharacterNoEnityLayersCollisionListener(MechCharacter&)
MechCharacterNoEnityLayersCollisionListener::~MechCharacterNoEnityLayersCollisionListener()
MechCharacterNoEnityLayersCollisionListener::~MechCharacterNoEnityLayersCollisionListener()
MechCharacterNoEnityLayersCollisionListener::AllowCollision(Entity const*, Entity const*)
MechCharacterNoEnityLayersCollisionListener::IsOnIgnoreLayer(Entity const*) const
CharacterNoCollisionAddOn::CharacterNoCollisionAddOn(DynoListener*)
CharacterNoCollisionAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CharacterNoCollisionAddOn::OnHook(unsigned char, HookArgs*)
CharacterAction_SetNoCollision::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterNoCollisionAddOn::~CharacterNoCollisionAddOn()
CharacterNoCollisionAddOn::OnAdded()
non-virtual thunk to CharacterNoCollisionAddOn::~CharacterNoCollisionAddOn()
non-virtual thunk to CharacterNoCollisionAddOn::~CharacterNoCollisionAddOn()
CharacterAction_SetNoCollision::~CharacterAction_SetNoCollision()
CharacterAction_SetNoCollision::GetName() const
CharacterAction_SetNoCollision::GetInputs(SCmdParams&) const
CharacterAction_SetNoCollision::GetOutputs(SCmdParams&) const
NuVector<Entity::EntityLayers>::Reserve(unsigned int, bool)
CharacterAction_SetPushable::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetMoveWithGround::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetUnEmbed::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetAvoidance::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetPushable::~CharacterAction_SetPushable()
CharacterAction_SetPushable::GetName() const
CharacterAction_SetPushable::GetInputs(SCmdParams&) const
CharacterAction_SetPushable::GetOutputs(SCmdParams&) const
CharacterAction_SetMoveWithGround::~CharacterAction_SetMoveWithGround()
CharacterAction_SetMoveWithGround::GetName() const
CharacterAction_SetMoveWithGround::GetInputs(SCmdParams&) const
CharacterAction_SetMoveWithGround::GetOutputs(SCmdParams&) const
CharacterAction_SetUnEmbed::~CharacterAction_SetUnEmbed()
CharacterAction_SetUnEmbed::GetName() const
CharacterAction_SetUnEmbed::GetInputs(SCmdParams&) const
CharacterAction_SetUnEmbed::GetOutputs(SCmdParams&) const
CharacterAction_SetAvoidance::~CharacterAction_SetAvoidance()
CharacterAction_SetAvoidance::GetName() const
CharacterAction_SetAvoidance::GetInputs(SCmdParams&) const
CharacterAction_SetAvoidance::GetOutputs(SCmdParams&) const
CharacterAction_SetIgnoreCamVolumes::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetIgnoreCamVolumes::~CharacterAction_SetIgnoreCamVolumes()
CharacterAction_SetIgnoreCamVolumes::GetName() const
CharacterAction_SetIgnoreCamVolumes::GetInputs(SCmdParams&) const
CharacterAction_SetIgnoreCamVolumes::GetOutputs(SCmdParams&) const
InitGenericActions()
SAction_NearestPlayer::Exec(ScriptContext&)
SAction_NearestPlayer::~SAction_NearestPlayer()
SAction_NearestPlayer::GetName() const
SAction_NearestPlayer::GetInputs(SCmdParams&) const
SAction_NearestPlayer::GetOutputs(SCmdParams&) const
SAction_SpawnScript::Exec(ScriptContext&)
SAction_SpawnScript::~SAction_SpawnScript()
SAction_SpawnScript::GetName() const
SAction_SpawnScript::GetInputs(SCmdParams&) const
SAction_SpawnScript::GetOutputs(SCmdParams&) const
SAction_Wait::Exec(ScriptContext&)
SAction_Wait::~SAction_Wait()
SAction_Wait::GetName() const
SAction_Wait::GetInputs(SCmdParams&) const
SAction_Wait::GetOutputs(SCmdParams&) const
WeightedEnum::NormaliseWeightedEnumList()
WeightedEnum::ChooseFromWeightedEnumList()
MechFrustrumEntityIterator::MechFrustrumEntityIterator(DynoScene*, ApiCharacterLak*, MechFrustum const&, AllPointCollector*)
MechFrustrumEntityIterator::~MechFrustrumEntityIterator()
MechFrustrumEntityIterator::GetNext(MechFrustrumEntityIterator::EntityInfo*)
MechLookupSplineByName(LevelContainer&, char*)
MechIcons::AddIcon(MechObjectInterface&, eMechIconType, nuhspecial_s*, int, char*, int, eMechIconPriority, float)
MechIconInstance::MechIconInstance(MechObjectInterface&, eMechIconType, nuhspecial_s*, int, char*, int, eMechIconPriority, float)
MechIcons::MechIcons()
MechIcons::Display()
DrawCharacterIcon(int, VuVec&, float)
MechIcons::Clear()
CSListHeader<MechIconInstance>::Clear()
OverHeadIcon_DrawIcon(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
MechIcons::~MechIcons()
MechIcons::~MechIcons()
MechIcons::Init()
MechIcons::Suppress(int)
MechIcons::IsSuppressed(int) const
MechAddOnRegister()
void* Constructor<InvulnerableAddon>()
void* Constructor<CamRailMovementAddOn>()
void* Constructor<SimpleCamRailMovementAddOn>()
void* Constructor<GizmoProgressMeterAddonHelper>()
void* Constructor<GizmoCoopPuzzleButtonPrompt>()
void* Constructor<HealthBarAddOn>()
void* Constructor<HealthBarLevelAddOn>()
void* Constructor<ButtonPromptAddOn>()
void* Constructor<CameraPlayerPosAddOn>()
void* Constructor<CameraTowerAddOn>()
void* Constructor<CameraAttachAddOn>()
void* Constructor<MechOverrideRenderStageAddon>()
AddOn::AddOn(char const*)
AddOn::AddOn(HashedKey const&)
AddOn::~AddOn()
non-virtual thunk to AddOn::~AddOn()
AddOn::~AddOn()
non-virtual thunk to AddOn::~AddOn()
AddOn::GetName() const
AddOn::SetName(char const*)
AddOn::SetLedFile(short)
AddOn::GetLedFile() const
AddOn::GetClass() const
AddOn::Activate()
AddOn::Deactivate()
AddOn::IsActive() const
MechAddOns::MechAddOns()
MechAddOns::CreateAddOnInit(nufpar_s&)
MechAddOns::CreateAddOnInit(char const*, char const*)
MechAddOns::CreateAddOnInit(HashedKey const&, char const*)
AddOnInit::AddOnInit(HashedKey const&, char const*)
MechAddOns::GetLevelAddOns(LevelContainer const&)
MechAddOns::CreateManager(LevelContainer&)
MechAddOns::FindAddOnType(HashedKey const&)
NuDynamicString_AppendRemoveWhiteSpacesAndBrackets(NuDynamicStringT<false>&, char const*)
AddOnInit::AppendParams(NuDynamicStringT<false>&, char const*)
NuDynamicStringT<false>::PushBack(char)
AddOnInit::RequestResources(ResourceHndlList*, char const*, AddOn*, MechObjectInterface const*)
AddOnsManager::AddOnsManager(LevelContainer&)
AddOnsManager::~AddOnsManager()
AddOnsManager::~AddOnsManager()
AddOnsManager::Initialise()
AddOnsManager::EventNotify(Event&, NuEventData&)
AddOnsManager::DestroyAll(AddOnList::eDestroyEvent)
AddOnListHolder::DestroyAll(AddOnList::eDestroyEvent)
AddOnsManager::CanHaveAddOns(LevelContainer&)
AddOnsManager::GetAbilityInstances(bool)
AddOnsManager::GetEventList(bool)
AddOnList::~AddOnList()
AddOnList::CreateAddOns(CSListHeader<AddOnInit> const&, char const*)
AddOnList::Add(AddOn&)
AddOnList::DestroyInternal(AddOn&)
AddOnList::Destroy(AddOn&)
AddOnList::IsInHookStack(AddOn&)
AddOnList::SendToDeletionQueue(AddOn&)
AddOnList::DestroyAll(AddOnList::eDestroyEvent)
AddOnList::Find(HashedKey const&) const
AddOnList::Contains(AddOn const&, bool) const
AddOnList::FindByType(HashedKey const&, AddOn*) const
AddOnList::SetBroadcaster(IAddOnBroadcaster*)
AddOnList::RemoveRef(AddOn&, Node*)
AddOnList::VerifiedDestroy(AddOn&)
AddOnList::CallHook(unsigned char, HookArgs*)
AddOnList::IsInHookStack(AddOnOwner const&)
AddOnList::____CantDestroyAddOnDuringItsOwnHook____(AddOn&)
AddOnList::HookStackPush(AddOn*)
AddOnList::HookStackPop()
LightAddOnList::LightAddOnList(HashedKey const&, void*)
LightAddOnList::Add(AddOn&)
LightAddOnList::CallHookInternal(unsigned char, HookArgs*)
LightAddOnList::RebuildUsedHooks()
LightAddOnList::DestroyInternal(AddOn&)
HeavyAddOnList::AlreadyInDeletionQueue(AddOn&)
LightAddOnList::DestroyAll(AddOnList::eDestroyEvent)
CMList<NodeInfo*>::~CMList()
HeavyAddOnList::HeavyAddOnList(HashedKey const&, void*, unsigned char)
HeavyAddOnList::~HeavyAddOnList()
HeavyAddOnList::~HeavyAddOnList()
HeavyAddOnList::Add(AddOn&)
HeavyAddOnList::CallHookInternal(unsigned char, HookArgs*)
HeavyAddOnList::RedoRef(AddOn&)
HeavyAddOnList::AddToDeletionQueue(Node*, AddOn*, unsigned char, HeavyAddOnList*, bool, int)
HeavyAddOnList::ProcessDeletionQueue(int)
HeavyAddOnList::DestroyInternal(AddOn&)
HeavyAddOnList::DestroyAll(AddOnList::eDestroyEvent)
HeavyAddOnList::UnLinkFromHookList(Node*, int)
HeavyAddOnList::AddRef(AddOn&)
non-virtual thunk to HeavyAddOnList::AddRef(AddOn&)
HeavyAddOnList::RemoveRef(AddOn&, Node*)
non-virtual thunk to HeavyAddOnList::RemoveRef(AddOn&, Node*)
HeavyAddOnList::RemoveFromDeletionQueue(AddOn&)
CMList<NodeInfo*>::Delete(CMList<NodeInfo*>::ListLink*)
CMList<NodeInfo*>::Append(NodeInfo* const&, CMList<NodeInfo*>::ListLink*)
CMList<NodeInfo*>::Insert(NodeInfo* const&, CMList<NodeInfo*>::ListLink*)
HeavyAddOnList::AddToDeletionQueueForSafeDeletion(AddOn&, AddOnList&)
non-virtual thunk to HeavyAddOnList::AddToDeletionQueueForSafeDeletion(AddOn&, AddOnList&)
HeavyAddOnList::RequestProcessDeletionQueue()
non-virtual thunk to HeavyAddOnList::RequestProcessDeletionQueue()
HeavyAddOnList::RemoveFromSafeDeletionQueue(AddOn&)
non-virtual thunk to HeavyAddOnList::RemoveFromSafeDeletionQueue(AddOn&)
AddOn::ParseItem(GameScriptContext&, cParseContextItem&)
AddOn::ParseParamString(char const*)
IAddOnBroadcaster::GetFrom(LevelContainer&)
AddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
AddOn::DestroySelf(AddOn&)
AddOnListHolder::CreateAddOns(CSListHeader<AddOnInit> const&)
AddOnListHolder::CreateLightAddOnsList()
AddOnListHolder::Add(AddOn&)
AddOnListHolder::Destroy(AddOn&)
AddOnListHolder::DestroyLightAddOnsList(bool)
AddOnListHolder::Find(char const*) const
AddOnListHolder::Find(HashedKey const&) const
AddOnListHolder::Contains(AddOn const&) const
AddOnListHolder::FindByType(char const*, AddOn*) const
AddOnListHolder::FindByType(HashedKey const&, AddOn*) const
AddOnListHolder::SetBroadcaster(IAddOnBroadcaster*)
AddOnListHolder::CallHook(unsigned char, HookArgs*)
MechAddOns::~MechAddOns()
MechAddOns::~MechAddOns()
MechSystemBase<MechAddOns, int>::Suppress(int)
MechSystemBase<MechAddOns, int>::IsSuppressed(int) const
AddOnList::~AddOnList()
LightAddOnList::~LightAddOnList()
ClassTable<AddOn>::~ClassTable()
ClassTable<AddOn>::~ClassTable()
NuMechPtr<AddOn, 16>::ManagedBase::~ManagedBase()
NuMechPtr<AddOn, 16>::ManagedBase::~ManagedBase()
NuListFind<AddOnsManager*, NuListNode<AddOnsManager*> >::Remove(NuListNode<AddOnsManager*>*, NuListNode<AddOnsManager*>*, AddOnsManager* const&)
BeingRiddenAddon::GetTypeId()
BeingRiddenAddon::BeingRiddenAddon(MechCharacter&, MechCharacter&)
BeingRiddenAddon::~BeingRiddenAddon()
non-virtual thunk to BeingRiddenAddon::~BeingRiddenAddon()
BeingRiddenAddon::~BeingRiddenAddon()
non-virtual thunk to BeingRiddenAddon::~BeingRiddenAddon()
BeingRiddenAddon::OnAdded()
BeingRiddenAddon::OnRemoved()
BeingRiddenAddon::GetRidden()
BeingRiddenAddon::GetRider()
BeingRiddenAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to BeingRiddenAddon::OnHook(unsigned char, HookArgs*)
BeingRiddenAddon::OnDestroyEvent(AddOnList::eDestroyEvent)
BodyFaceHeadingAddOn::BodyFaceHeadingAddOn(VuVec const&)
BodyFaceHeadingAddOn::~BodyFaceHeadingAddOn()
non-virtual thunk to BodyFaceHeadingAddOn::~BodyFaceHeadingAddOn()
non-virtual thunk to BodyFaceHeadingAddOn::~BodyFaceHeadingAddOn()
BodyFaceHeadingAddOn::~BodyFaceHeadingAddOn()
non-virtual thunk to BodyFaceHeadingAddOn::~BodyFaceHeadingAddOn()
non-virtual thunk to BodyFaceHeadingAddOn::~BodyFaceHeadingAddOn()
BodyFaceHeadingAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to BodyFaceHeadingAddOn::OnHook(unsigned char, HookArgs*)
BodyFaceHeadingAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to BodyFaceHeadingAddOn::EventNotify(Event&, NuEventData&)
BodyFaceHeadingAddOn::GetBodyFaceHeadingAddOn()
BodyFaceHeadingAddOn::OverrideHeading(HookArgsYRot*)
BodyFaceHeadingAddOn::OverrideAnimation()
BodyFaceHeadingAddOn::WantToMoveBackwards()
BodyFaceHeadingAddOn::SetVelocity(VuVec const&)
BodyFaceHeadingAddOn::OverrideVelocity()
BodyFaceHeadingAddOn::GetVelocity()
BodyFaceHeadingAddOn::SetHeadingFocusPoint(VuVec const&)
CameraAttachAddOn::CameraAttachAddOn()
CameraAttachAddOn::~CameraAttachAddOn()
non-virtual thunk to CameraAttachAddOn::~CameraAttachAddOn()
CameraAttachAddOn::~CameraAttachAddOn()
non-virtual thunk to CameraAttachAddOn::~CameraAttachAddOn()
CameraAttachAddOn::OnAdded()
CameraAttachAddOn::OnRemoved()
CameraAttachAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CameraAttachAddOn::OnHook(unsigned char, HookArgs*)
CameraAttachAddOn::Process(float)
CameraAttachAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
CameraAttachAddOn::ParseParamItem(cParseContextItem&)
CameraAttachAddOn::Singleton()
CameraTowerAddOn::CameraTowerAddOn()
CameraTowerAddOn::~CameraTowerAddOn()
non-virtual thunk to CameraTowerAddOn::~CameraTowerAddOn()
CameraTowerAddOn::~CameraTowerAddOn()
non-virtual thunk to CameraTowerAddOn::~CameraTowerAddOn()
CameraTowerAddOn::OnAdded()
CameraTowerAddOn::OnRemoved()
CameraTowerAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CameraTowerAddOn::OnHook(unsigned char, HookArgs*)
CameraTowerAddOn::Process(float)
CameraTowerAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
CameraTowerAddOn::ParseParamItem(cParseContextItem&)
CameraTowerAddOn::Singleton()
CameraTweakAddOn::CameraTweakAddOn(unsigned long, float, float)
CameraTweakAddOn::~CameraTweakAddOn()
non-virtual thunk to CameraTweakAddOn::~CameraTweakAddOn()
CameraTweakAddOn::~CameraTweakAddOn()
non-virtual thunk to CameraTweakAddOn::~CameraTweakAddOn()
CameraTweakAddOn::OnAdded()
CameraTweakAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CameraTweakAddOn::OnHook(unsigned char, HookArgs*)
CameraTweakAddOn::Process(float)
CameraTweakAddOn::GetLevelContainer() const
non-virtual thunk to CameraTweakAddOn::GetLevelContainer() const
CameraTweakAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
CameraTweakAddOn::Singleton()
CameraPlayerPosAddOn::CameraPlayerPosAddOn()
CameraPlayerPosAddOn::~CameraPlayerPosAddOn()
non-virtual thunk to CameraPlayerPosAddOn::~CameraPlayerPosAddOn()
CameraPlayerPosAddOn::~CameraPlayerPosAddOn()
non-virtual thunk to CameraPlayerPosAddOn::~CameraPlayerPosAddOn()
CameraPlayerPosAddOn::OnAdded()
CameraPlayerPosAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CameraPlayerPosAddOn::OnHook(unsigned char, HookArgs*)
CameraPlayerPosAddOn::Process(float)
CameraPlayerPosAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
CameraPlayerPosAddOn::ParseParamItem(cParseContextItem&)
CameraPlayerPosAddOn::GetLevelContainer() const
non-virtual thunk to CameraPlayerPosAddOn::GetLevelContainer() const
CameraPlayerPosAddOn::Singleton()
CharMovementBaseAddOn::CharMovementBaseAddOn(HashedKey&)
CharMovementBaseAddOn::~CharMovementBaseAddOn()
non-virtual thunk to CharMovementBaseAddOn::~CharMovementBaseAddOn()
non-virtual thunk to CharMovementBaseAddOn::~CharMovementBaseAddOn()
CharMovementBaseAddOn::~CharMovementBaseAddOn()
non-virtual thunk to CharMovementBaseAddOn::~CharMovementBaseAddOn()
non-virtual thunk to CharMovementBaseAddOn::~CharMovementBaseAddOn()
CharMovementBaseAddOn::GetLevelContainer() const
non-virtual thunk to CharMovementBaseAddOn::GetLevelContainer() const
CharMovementBaseAddOn::OnAdded()
CharMovementBaseAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CharMovementBaseAddOn::OnHook(unsigned char, HookArgs*)
CharMovementBaseAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to CharMovementBaseAddOn::EventNotify(Event&, NuEventData&)
CharMovementBaseAddOn::GetCharacter()
CharMovementBaseAddOn::GetBodyFaceHeadingAddOn()
FadeAddOn::FadeAddOn()
FadeAddOn::~FadeAddOn()
non-virtual thunk to FadeAddOn::~FadeAddOn()
FadeAddOn::~FadeAddOn()
non-virtual thunk to FadeAddOn::~FadeAddOn()
FadeAddOn::OnAdded()
FadeAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to FadeAddOn::OnHook(unsigned char, HookArgs*)
FadeAddOn::Process(float)
FadeAddOn::GetLevelContainer() const
non-virtual thunk to FadeAddOn::GetLevelContainer() const
FadeAddOn::FadeIn(float, bool)
FadeAddOn::FadeOut(float, bool)
FadeAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
FallMonitorAddOn::FallMonitorAddOn()
FallMonitorAddOn::~FallMonitorAddOn()
non-virtual thunk to FallMonitorAddOn::~FallMonitorAddOn()
non-virtual thunk to FallMonitorAddOn::~FallMonitorAddOn()
FallMonitorAddOn::~FallMonitorAddOn()
non-virtual thunk to FallMonitorAddOn::~FallMonitorAddOn()
non-virtual thunk to FallMonitorAddOn::~FallMonitorAddOn()
FallMonitorAddOn::OnAdded()
FallMonitorAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to FallMonitorAddOn::OnHook(unsigned char, HookArgs*)
FallMonitorAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to FallMonitorAddOn::EventNotify(Event&, NuEventData&)
FallMonitorAddOn::Process(float)
FallMonitorAddOn::Render()
FallMonitorAddOn::GetLevelContainer() const
non-virtual thunk to FallMonitorAddOn::GetLevelContainer() const
InvulnerableAddon::InvulnerableAddon()
InvulnerableAddon::~InvulnerableAddon()
non-virtual thunk to InvulnerableAddon::~InvulnerableAddon()
InvulnerableAddon::~InvulnerableAddon()
non-virtual thunk to InvulnerableAddon::~InvulnerableAddon()
InvulnerableAddon::SetOwnerMechCharacter(MechCharacter*)
InvulnerableAddon::OnRemoved()
InvulnerableAddon::OnHook(unsigned char, HookArgs*)
InvulnerableAddon::Process(float)
non-virtual thunk to InvulnerableAddon::OnHook(unsigned char, HookArgs*)
CharacterMoveSpeedAddon::CharacterMoveSpeedAddon()
CharacterMoveSpeedAddon::SetOverride(SPEED_OVERRIDE, float)
CharacterMoveSpeedAddon::GetOverride(SPEED_OVERRIDE) const
CharacterMoveSpeedAddon::~CharacterMoveSpeedAddon()
non-virtual thunk to CharacterMoveSpeedAddon::~CharacterMoveSpeedAddon()
CharacterMoveSpeedAddon::~CharacterMoveSpeedAddon()
non-virtual thunk to CharacterMoveSpeedAddon::~CharacterMoveSpeedAddon()
CharacterMoveSpeedAddon::OnRemoved()
CharacterMoveSpeedAddon::OnHook(unsigned char, HookArgs*)
CharacterMoveSpeedAddon::Process(float)
non-virtual thunk to CharacterMoveSpeedAddon::OnHook(unsigned char, HookArgs*)
RequestTeleportAddon::Create(MechCharacter&, VuVec const&, unsigned short, unsigned short)
RequestTeleportAddon::GetFrom(MechCharacter&)
RequestTeleportAddon::GetLastRequest() const
RequestTeleportAddon::SetPrevRequest(RequestTeleportAddon&)
RequestTeleportAddon::IsInstantTeleportAllowed(MechCharacter&, RequestTeleportAddon const*)
RequestTeleportAddon::RequestTeleportAddon(VuVec const&, unsigned short, unsigned short)
RequestTeleportAddon::~RequestTeleportAddon()
non-virtual thunk to RequestTeleportAddon::~RequestTeleportAddon()
RequestTeleportAddon::~RequestTeleportAddon()
non-virtual thunk to RequestTeleportAddon::~RequestTeleportAddon()
RequestTeleportAddon::OnAdded()
RequestTeleportAddon::OnHook(unsigned char, HookArgs*)
RequestTeleportAddon::Process(float)
non-virtual thunk to RequestTeleportAddon::OnHook(unsigned char, HookArgs*)
RequestTeleportAddon::GetLevelContainer() const
non-virtual thunk to RequestTeleportAddon::GetLevelContainer() const
RequestTeleportAddon::SetDestinationGizmoTeleport(char const*, char const*)
RequestTeleportAddon::GetDestinationGizmoTeleport() const
RequestTeleportAddon::OnDestroyEvent(AddOnList::eDestroyEvent)
RequestTeleportAddon::GetSplitScreenSegmentInterface() const
RequestTeleportAddon::RequestMaintainFade()
RequestTeleportAddon::SetStreamingWaitIconVisible(bool)
RequestTeleportAddon::FindClosestPlayerTeleportRequest() const
RequestTeleportAddon::AreAllPlayersTeleporting() const
RequestTeleportAddon::ProcessStageStart()
RequestTeleportAddon::PrepareCharacterForTeleport(RequestTeleportAddon::PrepareMode)
RequestTeleportAddon::ProcessStagePrepareForTeleport()
RequestTeleportAddon::ProcessStageDoTeleport()
RequestTeleportAddon::ProcessStageWaitForSubLevels()
RequestTeleportAddon::SetCharacterToGoalHeading() const
RequestTeleportAddon::ProcessStageFinish()
RequestTeleportAddon::DoSuppressSystems() const
RequestTeleportAddon::Singleton()
TaggingEffectAddon::TaggingEffectAddon(MechCharacter&)
TaggingEffectAddon::GetChar()
TaggingEffectAddon::GetChar() const
TaggingEffectAddon::GetLevelContainer() const
non-virtual thunk to TaggingEffectAddon::GetLevelContainer() const
TaggingEffectAddon::OnAdded()
TaggingEffectAddon::ProcessCameraLookAtPosition()
TaggingEffectAddon::CreateParticleEmitter()
TaggingEffectAddon::OnRemoved()
TaggingEffectAddon::EndParticleEmitter()
TaggingEffectAddon::OnHook(unsigned char, HookArgs*)
TaggingEffectAddon::Process(float)
non-virtual thunk to TaggingEffectAddon::OnHook(unsigned char, HookArgs*)
TaggingEffectAddon::UpdateParticleEmitter()
TaggingEffectAddon::GetParticleManager()
TaggingEffectAddon::GetParticlesPos(VuVec&, int)
TaggingEffectAddon::GetParticlesOriginForCharacer(VuVec&, MechCharacter&, int)
TaggingEffectAddon::~TaggingEffectAddon()
TaggingEffectAddon::Singleton()
non-virtual thunk to TaggingEffectAddon::~TaggingEffectAddon()
non-virtual thunk to TaggingEffectAddon::~TaggingEffectAddon()
TickerAddOn::TickerAddOn(HashedKey&)
TickerAddOn::~TickerAddOn()
non-virtual thunk to TickerAddOn::~TickerAddOn()
TickerAddOn::~TickerAddOn()
non-virtual thunk to TickerAddOn::~TickerAddOn()
TickerAddOn::OnHook(unsigned char, HookArgs*)
TickerAddOn::TickTock()
TickerAddOn::GetStillAlive()
non-virtual thunk to TickerAddOn::OnHook(unsigned char, HookArgs*)
TickerAddOn::SetStillAlive()
VfxAttachToLocatorAddOn_GetLocatorMtx(MechObjectInterface const&, int, VuMtx&)
VfxAttachToLocatorAddOn::VfxAttachToLocatorAddOn(MechObjectInterface&, int, VfxAttachToLocatorInfo const&, float)
VfxAttachToLocatorAddOn::Reset(float)
VfxAttachToLocatorAddOn::~VfxAttachToLocatorAddOn()
non-virtual thunk to VfxAttachToLocatorAddOn::~VfxAttachToLocatorAddOn()
VfxAttachToLocatorAddOn::~VfxAttachToLocatorAddOn()
non-virtual thunk to VfxAttachToLocatorAddOn::~VfxAttachToLocatorAddOn()
VfxAttachToLocatorAddOn::TriggerIntro(VfxThing*, VuMtx&)
VfxAttachToLocatorAddOn::FindExisting(MechObjectInterface&, int, VfxAttachToLocatorInfo const&)
VfxAttachToLocatorAddOn::HasSettings(MechObjectInterface&, int, VfxAttachToLocatorInfo const&)
VfxAttachToLocatorAddOn::Process(HookArgs*)
VfxAttachToLocatorAddOn::TriggerLoop(VfxThing*, VuMtx&)
VfxAttachToLocatorAddOn::TriggerOutro(VfxThing*, VuMtx&)
VfxAttachToLocatorAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to VfxAttachToLocatorAddOn::OnHook(unsigned char, HookArgs*)
VfxAttachToLocatorAddOn::Create(MechObjectInterface&, int, VfxAttachToLocatorInfo const&, VfxAttachToLocatorAddOn::FoundExistingAction, float)
VfxAttachToLocatorAddOn::GetLevelContainer() const
non-virtual thunk to VfxAttachToLocatorAddOn::GetLevelContainer() const
VfxAttachToLocatorAddOn::OnRemoved()
ButtonPromptAddOn::ButtonPromptAddOn()
ButtonPromptAddOn::Construct(MechCharacter*)
ButtonPromptAddOn::ButtonPromptAddOn(MechCharacter&)
ButtonPromptAddOn::ButtonPromptAddOn(MechCharacter&, char const*)
ButtonPromptAddOn::StaticInit()
ButtonPromptAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
cParseContextItem::GetHash() const
ButtonPromptAddOn::SetButtonPromptType(ButtonPromptAddOn::eButtonPromptType, bool)
ButtonPromptAddOn::ParseConditions(GameScriptContext&, cParseContextItem&)
ButtonPromptAddOn::~ButtonPromptAddOn()
non-virtual thunk to ButtonPromptAddOn::~ButtonPromptAddOn()
non-virtual thunk to ButtonPromptAddOn::~ButtonPromptAddOn()
ButtonPromptAddOn::~ButtonPromptAddOn()
non-virtual thunk to ButtonPromptAddOn::~ButtonPromptAddOn()
non-virtual thunk to ButtonPromptAddOn::~ButtonPromptAddOn()
ButtonPromptAddOn::OnAdded()
ButtonPromptAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to ButtonPromptAddOn::OnHook(unsigned char, HookArgs*)
ButtonPromptAddOn::Process(float)
ButtonPromptAddOn::UpdateButtonMessage()
ButtonPromptAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to ButtonPromptAddOn::EventNotify(Event&, NuEventData&)
ButtonPromptAddOn::GetRandomType(bool)
ButtonPromptAddOn::GetRandomType(bool, ButtonPromptAddOn::eButtonPromptType*, int)
ButtonPromptAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
BroomRider::BroomRider(MechCharacter*)
BroomRider::~BroomRider()
BroomRider::StaticInit()
BroomRider::Process(float)
BroomRider::SetState(BROOM_STATE)
BroomRider::Collision(Entity*, ContactPoint&)
BroomRider::CharacterCollision(Entity const*, Entity const*)
BroomRider::SetPlayer(MechCharacter*)
CamRailMovementAddOn::CamRailMovementAddOn()
CamRailMovementAddOn::~CamRailMovementAddOn()
CamRailMovement::~CamRailMovement()
non-virtual thunk to CamRailMovementAddOn::~CamRailMovementAddOn()
non-virtual thunk to CamRailMovementAddOn::~CamRailMovementAddOn()
CamRailMovementAddOn::~CamRailMovementAddOn()
non-virtual thunk to CamRailMovementAddOn::~CamRailMovementAddOn()
non-virtual thunk to CamRailMovementAddOn::~CamRailMovementAddOn()
CamRailMovementAddOn::OnAdded()
CamRailMovementAddOn::OnRemoved()
CamRailMovementAddOn::OnHook(unsigned char, HookArgs*)
CamRailMovementAddOn::DebugRender()
CamRailMovementAddOn::DebugRenderPanel()
non-virtual thunk to CamRailMovementAddOn::OnHook(unsigned char, HookArgs*)
CamRailMovementAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to CamRailMovementAddOn::EventNotify(Event&, NuEventData&)
CamRailMovementAddOn::Process(float)
CamRailMovementAddOn::ProcessBroomRider(float)
CamRailMovementAddOn::ProcessCameraRailSpline(float)
CamRailMovementAddOn::MainProcess(float)
CamRailMovementAddOn::ProcessPreCharacterMove()
CamRailMovementAddOn::ChoosePad(MechCharacter*)
CamRailMovementAddOn::CheckForAutoAttachSplines(float)
CamRailMovementAddOn::CalcRailCamMtx(VuMtx&)
CamRailMovementAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
CamRailMovementAddOn::ParseConditions(GameScriptContext&, cParseContextItem&)
CamRailMovementAddOn::ProcessStateMachine(float)
CamRailMovementAddOn::ProcessState_Setup(bool, float)
CamRailMovementAddOn::ProcessState_MovingCharacter(bool, float)
CamRailMovementAddOn::ProcessState_FollowCharacter(bool, float)
CamRailMovementAddOn::CreateVehicle()
CamRailMovement::InitPosition(CameraRailSpline*, MechCharacter&)
CamRailMovement::Process(CameraRailSpline*, CameraRailSpline*, float, LegoGamePad*, bool, MechCharacter*, CamRailMovementAddOn*, VuMtx*, VuMtx*)
CamRailMovementAddOn::FixVehicle(MechCharacter*, float)
CamRailMovement::SetupCharacter(MechCharacter*, CamRailMovementAddOn*)
CamRailMovementAddOn::RenderInfoText()
CamRailMovementAddOn::Collision(MechCharacter*, Entity*, ContactPoint&)
CamRailMovement::Collision(MechCharacter*, Entity*, ContactPoint&)
CamRailMovementAddOn::CheckSplineMessage(CameraRailSpline*)
CamRailMovement::CalcFlyRotFromMtx(VuMtx const&, VuMtx const&, short&, short&, short&)
CamRailMovement::CalcCameraPlaneInfo(CameraRailSpline*, CameraRailSpline*, float, VuMtx*, VuMtx*)
CamRailMovement::CalcCentreCamPlane(VuVec&)
CamRailMovement::PanCamera(CameraRailSpline*, CameraRailSpline*)
CamRailMovement::NewMoveCharacter(LegoGamePad*, MechCharacter&, CamRailMovementAddOn*)
CamRailMovement::MoveBroom(LegoGamePad*, MechCharacter&, CamRailMovementAddOn*)
CamRailMovement::Move(LegoGamePad*, MechCharacter*, CamRailMovementAddOn*)
CamRailMovement::CalcDistFromPlane()
CamRailMovement::CalcMoveExtents()
CamRailMovement::GenerateTransform()
CamRailMovement::ControlCameraSpeed(CameraRailSpline&, CameraRailSpline*)
CamRailMovement::ProcessTether(MechCharacter&, CamRailMovementAddOn*)
CamRailMovement::ClampToCamPlane(MechCharacter*)
CamRailMovement::CamAdjIsSmall()
CamRailMovement::~CamRailMovement()
CamRailMovement::AdjustPhysicsTransform(VuMtx&)
CamRailMovementAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
CamRailMovementAddOn::ParseSingleItem(GameScriptContext&, cParseContextItem&)
CamRailMovementAddOn::GetMovement()
SimpleCamRailMovementAddOn::SimpleCamRailMovementAddOn()
SimpleCamRailMovementAddOn::~SimpleCamRailMovementAddOn()
non-virtual thunk to SimpleCamRailMovementAddOn::~SimpleCamRailMovementAddOn()
non-virtual thunk to SimpleCamRailMovementAddOn::~SimpleCamRailMovementAddOn()
SimpleCamRailMovementAddOn::~SimpleCamRailMovementAddOn()
non-virtual thunk to SimpleCamRailMovementAddOn::~SimpleCamRailMovementAddOn()
non-virtual thunk to SimpleCamRailMovementAddOn::~SimpleCamRailMovementAddOn()
SimpleCamRailMovementAddOn::OnAdded()
SimpleCamRailMovementAddOn::OnRemoved()
SimpleCamRailMovementAddOn::OnHook(unsigned char, HookArgs*)
SimpleCamRailMovementAddOn::DebugRender()
SimpleCamRailMovementAddOn::DebugRenderPanel()
non-virtual thunk to SimpleCamRailMovementAddOn::OnHook(unsigned char, HookArgs*)
SimpleCamRailMovementAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to SimpleCamRailMovementAddOn::EventNotify(Event&, NuEventData&)
SimpleCamRailMovementAddOn::Process(float)
SimpleCamRailMovementAddOn::CalcRailTargetPos(float)
SimpleCamRailMovementAddOn::MainProcess(float)
SimpleCamRailMovementAddOn::ProcessPreCharacterMove()
SimpleCamRailMovementAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
SimpleCamRailMovementAddOn::ParseConditions(GameScriptContext&, cParseContextItem&)
SimpleCamRailMovementAddOn::ProcessStateMachine(float)
SimpleCamRailMovementAddOn::ProcessState_Setup(bool, float)
SimpleCamRailMovementAddOn::ProcessState_MovingCharacter(bool, float)
SimpleCamRailMovementAddOn::ChoosePad(MechCharacter*)
SimpleCamRailMovementAddOn::RenderInfoText()
SimpleCamRailMovementAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
SimpleCamRailMovementAddOn::ParseSingleItem(GameScriptContext&, cParseContextItem&)
GizmoCoopPuzzleButtonPrompt::GizmoCoopPuzzleButtonPrompt()
GizmoCoopPuzzleButtonPrompt::~GizmoCoopPuzzleButtonPrompt()
non-virtual thunk to GizmoCoopPuzzleButtonPrompt::~GizmoCoopPuzzleButtonPrompt()
GizmoCoopPuzzleButtonPrompt::~GizmoCoopPuzzleButtonPrompt()
non-virtual thunk to GizmoCoopPuzzleButtonPrompt::~GizmoCoopPuzzleButtonPrompt()
GizmoCoopPuzzleButtonPrompt::ParseItem(GameScriptContext&, cParseContextItem&)
GizmoCoopPuzzleButtonPrompt::CanAddTrackedGizmo(Gizmo*)
GizmoCoopPuzzleButtonPrompt::AddTrackedGizmo(Gizmo*)
GizmoCoopPuzzleButtonPrompt::Process(float)
GizmoCoopPuzzleButtonPrompt::GetActiveCharacter(Gizmo*)
GizmoCoopPuzzleButtonPrompt::OnHook(unsigned char, HookArgs*)
non-virtual thunk to GizmoCoopPuzzleButtonPrompt::OnHook(unsigned char, HookArgs*)
GizmoProgressMeterAddonHelper::GizmoProgressMeterAddonHelper()
GizmoProgressMeterAddonHelper::~GizmoProgressMeterAddonHelper()
non-virtual thunk to GizmoProgressMeterAddonHelper::~GizmoProgressMeterAddonHelper()
GizmoProgressMeterAddonHelper::~GizmoProgressMeterAddonHelper()
non-virtual thunk to GizmoProgressMeterAddonHelper::~GizmoProgressMeterAddonHelper()
GizmoProgressMeterAddonHelper::ParseItem(GameScriptContext&, cParseContextItem&)
GizmoProgressMeterAddonHelper::OnHook(unsigned char, HookArgs*)
GizmoProgressMeterAddonHelper::Process(float)
non-virtual thunk to GizmoProgressMeterAddonHelper::OnHook(unsigned char, HookArgs*)
HealthBarLevelAddOn::HealthBarLevelAddOn()
HealthBarLevelAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
HealthBarLevelAddOn::OnHook(unsigned char, HookArgs*)
HealthBarLevelAddOn::Process(float)
non-virtual thunk to HealthBarLevelAddOn::OnHook(unsigned char, HookArgs*)
HealthBarAddOn::SetSfx(short)
HealthBarLevelAddOn::~HealthBarLevelAddOn()
non-virtual thunk to HealthBarLevelAddOn::~HealthBarLevelAddOn()
HealthBarLevelAddOn::~HealthBarLevelAddOn()
non-virtual thunk to HealthBarLevelAddOn::~HealthBarLevelAddOn()
HealthBarAddOn::HealthBarAddOn()
HealthBarAddOn::~HealthBarAddOn()
non-virtual thunk to HealthBarAddOn::~HealthBarAddOn()
non-virtual thunk to HealthBarAddOn::~HealthBarAddOn()
HealthBarAddOn::~HealthBarAddOn()
non-virtual thunk to HealthBarAddOn::~HealthBarAddOn()
non-virtual thunk to HealthBarAddOn::~HealthBarAddOn()
HealthBarAddOn::Process(float)
HealthBarAddOn::GetObjectPos(VuVec&)
HealthBarAddOn::TriggerSFXFadeUp()
HealthBarAddOn::DrawHealthBar(VuVec&, float, float, unsigned int*, bool)
HealthBarAddOn::TriggerSFXFill()
HealthBarAddOn::TriggerHitSFX(bool)
HealthBarAddOn::EventNotify(Event&, NuEventData&)
HealthBarAddOn::DecrementHitPoints(float, MechObjectInterface*, MechObjectInterface*)
non-virtual thunk to HealthBarAddOn::EventNotify(Event&, NuEventData&)
HealthBarAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
HealthBarAddOn::TriggerSFXComplete()
HealthBarAddOn::Render()
HealthBarAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to HealthBarAddOn::OnHook(unsigned char, HookArgs*)
Callback_DrawHealthBar(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
FloatDieCharacterAttachmentAddOn::FloatDieCharacterAttachmentAddOn(int)
FloatDieCharacterAttachmentAddOn::GetChar()
FloatDieCharacterAttachmentAddOn::GetChar() const
FloatDieCharacterAttachmentAddOn::GetLevelContainer() const
non-virtual thunk to FloatDieCharacterAttachmentAddOn::GetLevelContainer() const
FloatDieCharacterAttachmentAddOn::OnAdded()
FloatDieCharacterAttachmentAddOn::OnRemoved()
FloatDieCharacterAttachmentAddOn::OnHook(unsigned char, HookArgs*)
FloatDieCharacterAttachmentAddOn::Process(float)
FloatDieCharacterAttachmentAddOn::Render()
non-virtual thunk to FloatDieCharacterAttachmentAddOn::OnHook(unsigned char, HookArgs*)
FloatDieCharacterAttachmentAddOn::~FloatDieCharacterAttachmentAddOn()
FloatDieCharacterAttachmentAddOn::~FloatDieCharacterAttachmentAddOn()
non-virtual thunk to FloatDieCharacterAttachmentAddOn::~FloatDieCharacterAttachmentAddOn()
non-virtual thunk to FloatDieCharacterAttachmentAddOn::~FloatDieCharacterAttachmentAddOn()
MechOverrideRenderStageAddon::MechOverrideRenderStageAddon()
MechOverrideRenderStageAddon::~MechOverrideRenderStageAddon()
non-virtual thunk to MechOverrideRenderStageAddon::~MechOverrideRenderStageAddon()
MechOverrideRenderStageAddon::~MechOverrideRenderStageAddon()
non-virtual thunk to MechOverrideRenderStageAddon::~MechOverrideRenderStageAddon()
MechOverrideRenderStageAddon::OnAdded()
MechOverrideRenderStageAddon::OnRemoved()
MechOverrideRenderStageAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MechOverrideRenderStageAddon::OnHook(unsigned char, HookArgs*)
MechOverrideRenderStageAddon::GetLevelContainer() const
non-virtual thunk to MechOverrideRenderStageAddon::GetLevelContainer() const
MechOverrideRenderStageAddon::ParseItem(GameScriptContext&, cParseContextItem&)
SlideAngleAddOn::SlideAngleAddOn()
SlideAngleAddOn::~SlideAngleAddOn()
SlideAngleAddOn::FlattenChar(MechCharacter*)
non-virtual thunk to SlideAngleAddOn::~SlideAngleAddOn()
SlideAngleAddOn::~SlideAngleAddOn()
non-virtual thunk to SlideAngleAddOn::~SlideAngleAddOn()
SlideAngleAddOn::OnAdded()
SlideAngleAddOn::GetLevelContainer() const
non-virtual thunk to SlideAngleAddOn::GetLevelContainer() const
SlideAngleAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to SlideAngleAddOn::OnHook(unsigned char, HookArgs*)
SlideAngleAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
MechFlowInterface::FullActivate(int, int)
MechFlowInterface::FullActivateReverse(int, int, int)
MechFlowInterface::FullSetVisibility(int, int)
MechFlowInterface::MechFlowInterface(LevelContainer&, bool)
ClassManagerAccessor<MechFlowManager>::GetFromCreate(ILevelContainer const&)
MechFlowInterface::~MechFlowInterface()
MechFlowInterface::~MechFlowInterface()
MechFlowInterface::GetLevelContainer() const
MechFlowInterface::FadeIn(float)
MechFlowInterface::FadeOut(float)
MechFlowInterface::SetGlowing(bool)
MechFlowInterface::GetProgressHashedKey()
MechFlowSystem::AddManagersForLevel(MechLevelContainer&)
MechFlowSystem::Init()
MechFlowSystem::~MechFlowSystem()
MechFlowSystem::FindByNameAndClass(LevelContainer&, char const*, EdClass*)
MechFlowSystem::FindByHashedKey(LevelContainer&, unsigned int)
MechFlowSystem::MechFlowInterfaceDestroy(MechFlowInterface&)
MechFlowManager::MechFlowManager(LevelContainer&)
MechFlowManager::GetManagerName() const
MechFlowManager::AddMechFlowInterface(MechFlowInterface&)
MechFlowManager::RemoveMechFlowInterface(MechFlowInterface&)
MechFlowManager::FindByName(char const*)
MechFlowManager::FindByHashedKey(unsigned int)
MechFlowManager::FindByProgressHashedKey(unsigned int)
MechFlowManager::Reset(bool)
MechFlowHelper::MechFlowHelper()
MechFlowHelper::Initialise()
MechFlowHelper::GetManNextObject(ClassManager*, void*, void*)
MechFlowHelper::Get()
MechEdRef::GetMemberData(ClassObject, int, void*, int, EDREG_FLAGS, EdRefContextData*)
MechEdRef::SetMemberData(ClassObject, int, void*, int, EDREG_FLAGS, EdRefContextData*)
MechEdRef::~MechEdRef()
MechFlowManager::~MechFlowManager()
MechFlowManager::~MechFlowManager()
MechFlowHelper::~MechFlowHelper()
MechFlowHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechFlowHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
MechFlowInterfaceProgressSystem::MechFlowInterfaceProgressSystem()
MechFlowInterfaceProgressSystem::EvaluateProgressDataSize(MechFlowInterface&)
MechFlowInterfaceProgressSystem::Store(MechFlowManager&)
MechFlowInterfaceProgressSystem::Reset(MechFlowManager&)
MechFlowInterfaceProgressSystem::~MechFlowInterfaceProgressSystem()
MechSystemBase<MechFlowInterfaceProgressSystem, int>::Suppress(int)
MechSystemBase<MechFlowInterfaceProgressSystem, int>::IsSuppressed(int) const
MechTaggingRetroData::MechTaggingRetroData(MechCharacter&)
MechTaggingRetroData::SetTaggerIdent(MechCharacter&)
MechTaggingToData::MechTaggingToData(MechObjectInterface&)
MechTaggingToData::~MechTaggingToData()
MechTaggingToData::SetTaggerIdent(MechObjectInterface&)
MechTaggingFromData::MechTaggingFromData(MechObjectInterface&)
MechTaggingFromData::~MechTaggingFromData()
MechTagging::MechTagging()
MechTagging::Init()
MechTagging::OnInitPostConfig()
MechTagging::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechTagging::LookForRidableToTagTo()
MechTagging::UpdateAllTaggingData()
MechTagging::DrawTaggingIcons()
MechTagging::UpdateTagging()
MechTagging::DrawRetroTaggingIcons()
MechTagging::GetDefaultRidingFlags()
MechTagging::GetTagChooserPriority(MechCharacter&) const
MechTagging::SetupTagMode(MechTagging::TagModes, float, float, unsigned int)
MechTagging::InitiateTag(MechObjectInterface&, MechObjectInterface&, bool, bool)
MechTagging::InitiateTag(MechObjectInterface&, MechObjectInterface&, VehicleDefSeat::SEATTYPES, bool, bool)
MechTagging::InitiateRidableTag(MechCharacter&, MechObjectInterface&, VehicleDefSeat::SEATTYPES)
MechTagging::InitiateCharacterTag(MechCharacter&, MechCharacter&, bool, bool)
MechTagging::IsTaggingEnabled()
MechTagging::CanCurrentlyTag(MechCharacter&)
MechTagging::CanTagToCharacter(MechCharacter&, MechCharacter&)
MechTagging::CanUseTagChooser(MechCharacter&)
MechTagging::ChooseNextTagTarget(MechCharacter&)
MechTagging::FindTagTargetTransfer(MechCharacter&)
MechTagging::FindTagTargetToggle(MechCharacter&)
MechTagging::FindTagTargetHubToggle(MechCharacter&)
MechTagging::CanCurrentlyTagToRidable(MechCharacter&)
MechTagging::CanTagToVehicle(MechCharacter&, MechVehicle&)
MechTagging::CanTagToVehicleSeat(MechCharacter&, MechVehicle&, VehicleDefSeat::SEATTYPES)
MechTagging::CanDismountRidable(MechCharacter&, MechRidingData&)
MechTagging::UpdateTagData(MechTaggingToData&)
MechTagging::DrawTagData(MechTaggingToData&)
MechTagging::CalculateTagIconDrawPos(MechTaggingToData&)
MechTagging::AttemptTagToRidable(MechCharacter&, MechObjectInterface&, VehicleDefSeat::SEATTYPES)
MechTagging::AttemptTagToCharacter(MechCharacter&, MechCharacter&, bool, bool)
MechTagging::LookForBestVehicleToTagTo(MechCharacter&, int&, float&)
MechTagging::FindStoodOnVehicle(MechCharacter&, int&)
MechTagging::LookForBestRideonToTagTo(MechCharacter&, int&, float&)
MechTagging::RequestTagLink(MechCharacter&, MechObjectInterface&, VehicleDefSeat::SEATTYPES)
MechTaggingFromData::SetTaggingTargetObj(MechObjectInterface&, VehicleDefSeat::SEATTYPES)
MechTagging::ChooseBestVehicleSeat(MechCharacter&, MechVehicle&, float&)
MechTagging::PerformVehicleLOSCheck(MechCharacter&, MechVehicle&)
MechTagging::PerformCharacterLOSCheck(MechCharacter&, MechCharacter&)
MechTagging::ProcessTaggingToRidable(MechCharacter&)
MechTagging::ProcessDismountingRidable(MechCharacter&)
MechTagging::GatherAllTagLinks(MechCharacter&, NuList<MechTagging::TagLink>&)
MechTagging::DrawRetroTagIcon(MechTaggingRetroData&)
MechTagging::UpdateRetroTaggingIcons()
MechTagging::UpdateRetroTagIcon(MechTaggingRetroData&)
MechTagging::~MechTagging()
MechTagging::CanTagFromRidableToRidable(MechCharacter&)
MechTagging::GetMaxRidableTagDistance(MechCharacter&)
MechTagging::GetRidableMaxYOffset(MechCharacter*, MechVehicle*)
MechTagging::GetVehicleDriverSeatWeightMod(MechVehicle&)
MechTagging::OnTaggedToRidable(MechCharacter&, MechObjectInterface&, VehicleDefSeat::SEATTYPES)
MechTagging::OnFailedToTagToRidable(MechCharacter&, MechObjectInterface&, VehicleDefSeat::SEATTYPES)
MechTagging::AllowTag(MechCharacter&, MechObjectInterface&)
MechToggling::MechToggling()
MechToggling::Init()
MechToggling::OnInitPostConfig()
MechToggling::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechToggling::UpdateToggling()
MechToggling::TogglePlayer(MechCharacter&, MechToggling::ToggleDirection, bool)
MechToggling::ToggleSubCharacter(MechCharacter&, MechToggling::ToggleDirection, bool)
MechToggling::ToggledCharacter(MechCharacter&, int, MechToggling::ToggleDirection)
MechToggling::CanToggleCharacter(MechCharacter&, CHARACTERDATA*, int, MechToggling::ToggleDirection, MechToggling::ToggleInfo const&)
MechToggling::GetNextToggleCharacter(MechCharacter&, MechToggling::ToggleDirection, MechToggling::ToggleInfo const&)
MechToggling::GetNextModel(CharDefGameData*, CMList<CharDefGameData*>&, bool)
MechToggling::~MechToggling()
MechToggling::AllowCharGrid(MechCharacter&)
MechToggling::AllowPrevNextToggle(MechCharacter&)
MechToggling::ForceToggleIfSameModel(MechCharacter&)
MechOpponentInfo::MechOpponentInfo(MechOpponentManager*, MechObjectData&, int, int)
MechOpponentInfo::ResetDefaultType()
MechOpponentInfo::~MechOpponentInfo()
MechOpponentInfo::ForciblyClearOpponent()
MechOpponentInfo::ForciblyClearAllOpponentsToMe()
MechOpponentInfo::RemoveAllOpponentTypeListcontainers()
MechOpponentInfo::~MechOpponentInfo()
MechOpponentInfo::CreateOpponentTypeListContainers(int, int)
MechOpponentInfo::GetOpponentTypeListContainer(MechOpponentTypeListContainer::eOpponentType)
MechOpponentInfo::GetMyManager()
MechOpponentInfo::CanIAttackOpponent(MechOpponentTypeListContainer::eOpponentType)
MechOpponentInfo::GetMyOpponent() const
MechOpponentInfo::GetAttackNotAllowed(MechOpponentInfo*)
MechOpponentInfo::IsSomeoneElseWaitingToAttackMyOpponent(MechOpponentTypeListContainer::eOpponentType)
MechOpponentInfo::GetKeepAttackingOpponent()
MechOpponentInfo::SetMyOpponent(MechOpponentInfo*)
MechOpponentInfo::GetMyOpponentOverride()
MechOpponentInfo::IsNoOpponentAllowed()
MechOpponentInfo::GetType()
MechOpponentInfo::AttemptClearMyOpponent()
MechOpponentInfo::SetMyOpponent(MechObjectData&)
MechOpponentInfo::GetKeepLockedOnOpponentTimer()
MechOpponentInfo::SetMyOpponentOverride(MechOpponentInfo*, MechOpponentTypeListContainer::eOpponentType)
MechOpponentInfo::SetKeepLockedOnOpponentTimer(float)
MechOpponentInfo::GetOwnerData()
MechOpponentInfo::ClearKeepLockedOnOpponent()
MechOpponentInfo::SetMyOpponentOverride(MechObjectData&, MechOpponentTypeListContainer::eOpponentType)
MechOpponentInfo::SetNoOpponentAllowed(bool)
MechOpponentInfo::GetDistanceToMyOpponent()
MechOpponentInfo::GetOwnerPosition(VuVec&) const
MechOpponentInfo::GetKeepLockedOnOpponent()
MechOpponentInfo::ClearKeepLockedOnOpponentTimer()
MechOpponentInfo::TickKeepLockedOnOpponentTimer(float)
MechOpponentInfo::GetKeepAttackingOpponentTimer()
MechOpponentInfo::SetKeepAttackingOpponentTimer(float)
MechOpponentInfo::TickKeepAttackingOpponentTimer(float)
MechOpponentInfo::ClearKeepAttackingOpponent()
MechOpponentInfo::GetAttackNotAllowedTimer()
MechOpponentInfo::SetAttackNotAllowedTimer(float)
MechOpponentInfo::TickAttackNotAllowedTimer(float)
MechOpponentInfo::InvisibleToOpponentSelection()
MechOpponentInfo::IsOpponentToMe(MechOpponentInfo&)
MechOpponentInfo::IsOpponentToMe(MechObjectData&)
MechOpponentInfo::IsOpponentDeadOrDying()
MechOpponentInfo::GetOpponentPosition(VuVec&) const
MechOpponentInfo::GetOwnerRadius() const
MechOpponentInfo::SetType(MechOpponentTypeListContainer::eOpponentType)
MechOpponentInfo::SetTypeOverride(MechOpponentTypeListContainer::eOpponentType, float)
MechOpponentInfo::TickTypeOverrideTimer(float)
MechOpponentInfo::AttemptClearAllOpponentsToMe()
MechOpponentInfo::GetNumOpponentsTargetingMe(bool, MechOpponentTypeListContainer::eOpponentType)
MechOpponentInfo::operator<(MechOpponentInfo const&) const
MechOpponentInfo::PrioritySortCompare(MechOpponentInfo const&) const
MechOpponentInfo::Process(float)
MechOpponentInfo::DebugRender()
MechOpponentManager::MechOpponentManager()
MechOpponentManager::~MechOpponentManager()
MechOpponentManager::~MechOpponentManager()
MechOpponentManager::Init()
MechOpponentManager::CreateOpponentChooser()
MechOpponentManager::GetOpponentChooser()
MechOpponentManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechOpponentManager::ProcessMainOpponentChoosing(float)
MechOpponentManager::ProcessIndividualMechOpponents(float)
MechOpponentManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MechOpponentManager::EventNotify(Event&, NuEventData&)
MechOpponentManager::GetOpponentList()
MechOpponentManager::AddNewMechOpponentToSystem(MechObjectData&, int, int)
MechOpponentManager::RemoveMechOpponentFromSystem(MechOpponentInfo&)
MechOpponentManager::RemoveMechOpponentFromSystem(MechObjectData&)
MechOpponentManager::DebugProcess(float)
MechOpponentManager::DebugRender()
MechOpponentManager::MenuDraw(char*, int)
MechOpponentManager::MenuUpdate(MENU*, int)
MechOpponentManager::ParseCommandLine(int, char**)
MechSystemBase<MechOpponentManager, int>::Suppress(int)
MechSystemBase<MechOpponentManager, int>::IsSuppressed(int) const
MechOpponentTypeListContainer::MechOpponentTypeListContainer(MechOpponentInfo&, MechOpponentTypeListContainer::eOpponentType, int, int)
MechOpponentTypeListContainer::~MechOpponentTypeListContainer()
MechOpponentTypeListContainer::~MechOpponentTypeListContainer()
MechOpponentTypeListContainer::GetOpponentOwner() const
MechOpponentTypeListContainer::GetListType() const
MechOpponentTypeListContainer::GetOpponentsToMeList()
MechOpponentTypeListContainer::GetNumOpponentsTargetingMe(bool)
MechOpponentTypeListContainer::GetMaxAllowedToBeLockedOnBy()
MechOpponentTypeListContainer::GetMaxAllowedToBeAttackedBy()
MechOpponentTypeListContainer::CanBeLockedOnByAnother()
MechOpponentTypeListContainer::GetCanBeLockedOnByList()
MechOpponentTypeListContainer::GetNumBeingLockedOnBy()
MechOpponentTypeListContainer::CanBeAttackedByAnother(int*)
MechOpponentTypeListContainer::GetNumBeingAttackedBy()
MechOpponentTypeListContainer::AddCanBeAttackedByOpponent(MechOpponentInfo&)
MechOpponentTypeListContainer::RemoveCanBeAttackedByOpponent(MechOpponentInfo&)
MechOpponentTypeListContainer::CanBeAttackedBy(MechOpponentInfo&)
MechOpponentTypeListContainer::RemoveMyLowestPriorityAttackingOpponent()
MechOpponentTypeListContainer::ClearCanBeAttackedByList()
MechOpponentTypeListContainer::AddOpponentToMe(MechOpponentInfo&)
MechOpponentTypeListContainer::RemoveOpponentToMe(MechOpponentInfo&)
MechOpponentTypeListContainer::AttemptClearAllOpponents()
MechOpponentTypeListContainer::ForciblyClearAllOpponentsToMe()
MechOpponentTypeListContainer::SortOpponentListInTermsOfPriority()
MechOpponentTypeListContainer::ChooseAttackersFromOpponents(float)
MechOpponentTypeListContainer::GetOpponentTypeName(MechOpponentTypeListContainer::eOpponentType)
NuEListSort<MechOpponentInfo, MechOpponentInfo, MechOpponentInfoOpponentList>::DefaultLessThanCompare(MechOpponentInfo const&, MechOpponentInfo const&)
MechOpponentInfo* NuEListSort<MechOpponentInfo, MechOpponentInfo, MechOpponentInfoOpponentList>::MergeSort<bool (*)(MechOpponentInfo const&, MechOpponentInfo const&)>(bool (*)(MechOpponentInfo const&, MechOpponentInfo const&), MechOpponentInfo*, unsigned int)
MechDropInOut::MechDropInOut()
MechDropInOut::Init()
MechDropInOut::OnInitPostConfig()
MechDropInOut::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechDropInOut::SystemEnabled()
MechDropInOut::LookForPlayersAttemptingToDropIn()
MechDropInOut::ProcessDropInQueue(float)
MechDropInOut::ParseCommandLine(int, char**)
MechDropInOut::DropOut(MechCharacter&, bool, bool, bool)
MechDropInOut::DropInEnabled()
MechDropInOut::ChooseDropInCharacter(int)
MechDropInOut::IsCharacterQueuedForDropIn(MechCharacter&)
MechDropInOut::AllowDropOut(MechCharacter&)
MechDropInOut::AttemptDropIn(int, int, NUPAD*)
MechDropInOut::DropIn(MechDropInOut::DropInData&)
MechDropInOut::QueueDropIn(MechCharacter&, int, int, NUPAD*)
MechDropInOut::Suppress(bool)
MechDropInOut::IsSuppressed(bool) const
MechDropInOut::~MechDropInOut()
MechDropInOut::~MechDropInOut()
MechDropInOut::AllowDropIn(MechDropInOut::DropInData&, VuVec&)
MechDropInOut::OnDropIn(MechDropInOut::DropInData&)
MechDropInOut::OnDropOut(MechCharacter&)
DropInOutEventData::~DropInOutEventData()
FlowCommonInterface_PickupSpline::GetName()
FlowCommonInterface_PickupSpline::GetLedFile()
PickupSplineManager::PickupSplineManager(LevelContainer&)
PickupSplineManager::~PickupSplineManager()
PickupSplineManager::~PickupSplineManager()
PickupSplineManager::RegisterRendering()
PickupSplineManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
PackedPickupSpline::ProcessPickups(float)
PackedPickupSpline::DePopulatePickups()
PackedPickupSpline::ShouldBeActive()
PackedPickupSpline::PopulatePickups()
PickupSplineManager::CollideTest(MechCharacter&)
PackedPickupSpline::CollideTest(MechCharacter&, LegoPickupManager&)
PickupSplineManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
PickupSplineManager::DrawPickups(float)
PackedPickupSpline::DrawPickups(WORLDINFO*, float, LegoPickupManager&) const
PickupSplineManager::FindPickupSpline(char const*)
PickupSplineManager::EventNotify(Event&, NuEventData&)
PickupSpline::FixupName()
PickupSpline::PackData()
CreatePickupSplineManager(LevelContainer&)
EdRefPickupSpline::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefPickupSpline::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
PickupSpline::GenerateFromMayaSpline(char*)
PickupSplineHelper::RegisterSplineData(EdClass*)
PickupSplineHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to PickupSplineHelper::EventNotify(Event&, NuEventData&)
FloatToShort(float, float)
ShortToFloat(unsigned short, float)
PackedPickupSpline::PackedPickupSpline(short, char const*, float, float, int)
PackedPickupSpline::~PackedPickupSpline()
PackedPickupSpline::PackDataRelease()
PackedPickupSpline::~PackedPickupSpline()
PackedPickupSpline::AllocatePackedData(int)
PackedPickupSpline::IsPointInsideAABB(VuVec&, float) const
PackedPickupSpline::UpdateCollected(MechCharacter&, int)
PackedPickupSpline::AddPackedPickup(VuVec const&, char)
PackedPickupSpline::Activate(bool)
PickupSpline::PickupSpline(EdRegContext&, void*, int)
PickupSpline::AllocatePackedSpline()
PickupSpline::~PickupSpline()
non-virtual thunk to PickupSpline::~PickupSpline()
PickupSpline::~PickupSpline()
non-virtual thunk to PickupSpline::~PickupSpline()
PickupSpline::GetClass() const
PickupSpline::RebuildSpline(bool)
PickupSpline::FixUp()
PickupSpline::GetNextPickupLetterInSequence()
CountPickupCallback(VuVec const&, VuVec const&, int, float, float, void*)
AddPackedPickupCallback(VuVec const&, VuVec const&, int, float, float, void*)
PickupSpline::PopulateSplineUsingCallback(void (*)(VuVec const&, VuVec const&, int, float, float, void*))
PickupSpline::CalcClipRange()
PickupSpline::PackedSplineRelease()
PickupSpline::Draw(EdRenderWindowInfo const&, int) const
PickupSplineKnot::PickupSplineKnot()
PickupSplineKnot::PickupSplineKnot(PickupSplineKnot const&, SplineObject*)
PickupSplineKnot::PickupSplineKnot(SplineObject*)
PickupSplineKnot::CloneKnot(SplineObject*) const
PickupSplineKnot::CopyKnot(SplineKnot const*)
FlowCommonInterface_PickupSpline::~FlowCommonInterface_PickupSpline()
FlowCommonInterface_PickupSpline::GetObject()
FlowCommonInterface_PickupSpline::GetTypeName()
FlowCommonInterface_PickupSpline::GetGizmoPrefix()
FlowCommonInterface_PickupSpline::GetClass()
FlowCommonInterface_PickupSpline::GetNumOutputs()
FlowCommonInterface_PickupSpline::GetOutput(int, int)
FlowCommonInterface_PickupSpline::GetDefaultOutputIndex()
FlowCommonInterface_PickupSpline::GetOutputName(int)
FlowCommonInterface_PickupSpline::Activate(bool)
FlowCommonInterface_PickupSpline::ActivateRev(int, int)
FlowCommonInterface_PickupSpline::SetVisibility(int)
FlowCommonInterface_PickupSpline::IsActive()
FlowCommonInterface_PickupSpline::IsVisible()
FlowCommonInterface_PickupSpline::AcquireSpecials()
FlowCommonInterface_PickupSpline::Reset()
FlowCommonInterface_PickupSpline::ActivateByComplexGizmo()
FlowCommonInterface_PickupSpline::ResetForLoop()
FlowCommonInterface_PickupSpline::GetTriggeredByPlayerId()
FlowCommonInterface_PickupSpline::SetTriggeredByPlayerId(MechCharacter*)
FlowCommonInterface_PickupSpline::GetBuilderOrigin(NUVEC*)
FlowCommonInterface_PickupSpline::GetRotationMatrix(NUMTX&)
FlowCommonInterface_PickupSpline::HideFromEditor()
EdRefPickupSpline::~EdRefPickupSpline()
SplineManagerT<PickupSpline>::GetManagerName() const
SplineManagerT<PickupSpline>::GetClass(int)
SplineManagerT<PickupSpline>::GetNumClasses()
SplineManagerT<PickupSpline>::NewSpline(EdRegContext*, void*, int) const
SplineManagerT<PickupSpline>::DeleteSpline(SplineObject*) const
SplineManagerT<PickupSpline>::GetSplineHelper() const
PickupSplineHelper::~PickupSplineHelper()
SplineHelperT<PickupSpline>::NewSpline(EdRegContext*, void*, int) const
SplineHelperT<PickupSpline>::DeleteSpline(SplineObject*) const
SplineHelperT<PickupSpline>::GetManagerID() const
PickupSplineHelper::GetPrefix()
PickupSplineHelper::GetCategory()
PickupSplineHelper::GetFileExt()
non-virtual thunk to PickupSplineHelper::~PickupSplineHelper()
non-virtual thunk to PickupSplineHelper::~PickupSplineHelper()
PackedPickupSpline::GetNumOutputs()
PackedPickupSpline::GetOutput(int, int)
PackedPickupSpline::GetDefaultOutputIndex()
PackedPickupSpline::GetOutputName(int)
PackedPickupSpline::ActivateRev(int, int)
PackedPickupSpline::SetVisibility(int)
PackedPickupSpline::ResetForLoop()
PickupSplineKnot::~PickupSplineKnot()
CreateMechGrindRailSplineManager(LevelContainer&)
MechGrindRailSpline::MechGrindRailSpline(EdRegContext&, void*, int)
MechGrindRailSpline::~MechGrindRailSpline()
non-virtual thunk to MechGrindRailSpline::~MechGrindRailSpline()
MechGrindRailSpline::~MechGrindRailSpline()
non-virtual thunk to MechGrindRailSpline::~MechGrindRailSpline()
MechGrindRailSpline::GetClass() const
MechGrindRailSpline::SetTransform(VuMtx const&)
MechGrindRailSpline::Process(void*, float)
MechGrindRailSpline::Render()
MechGrindRailSpline::Process(float)
MechGrindRailSpline::GetNearestDistAlongSpline(VuVec const&, VuVec&, bool, float)
MechGrindRailSpline::RailCameraTween(VuMtx&, VuMtx&, CameraRailSplineKnot*, CameraRailSplineKnot*, float) const
MechGrindRailSpline::GenerateFromMayaSpline()
MechGrindRailSplineKnot::MechGrindRailSplineKnot()
MechGrindRailSplineKnot::MechGrindRailSplineKnot(MechGrindRailSplineKnot const&, SplineObject*)
MechGrindRailSplineKnot::GetKnotHelper() const
MechGrindRailSplineKnot::CloneKnot(SplineObject*) const
MechGrindRailSplineKnot::CopyKnot(SplineKnot const*)
MechGrindRailSplineKnot::SetControlPointIn(VuVec const&)
MechGrindRailSplineKnot::SetControlPointOut(VuVec const&)
MechGrindRailSplineKnot::DrawTransformAsSquare(VuMtx const&, unsigned int, bool, VuVec*)
MechGrindRailSplineHelper::RegisterSplineData(EdClass*)
MechGrindRailSplineHelper::RegisterKnotData(EdClass*)
EdRefMechGrindSplineKnot::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefMechGrindSplineKnot::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefMechGrindSpline::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefMechGrindSpline::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
MechGrindRailSplineManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechGrindRailSplineManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MechGrindRailSplineManager::EventNotify(Event&, NuEventData&)
MechGrindRailSplineManager::MechGrindRailSplineManager(LevelContainer&)
MechGrindRailSplineManager::RegisterProcessing()
MechGrindRailSplineManager::RegisterRendering()
MechGrindRailSplineManager::~MechGrindRailSplineManager()
MechGrindRailSplineManager::~MechGrindRailSplineManager()
EdRefMechGrindSplineKnot::~EdRefMechGrindSplineKnot()
EdRefMechGrindSpline::~EdRefMechGrindSpline()
MechGrindRailSpline::SetVisibility(int)
MechGrindRailSpline::Activate(bool)
MechGrindRailSpline::GetNumOutputs()
MechGrindRailSpline::GetOutput(int, int)
MechGrindRailSpline::GetDefaultOutputIndex()
MechGrindRailSpline::GetOutputName(int)
MechGrindRailSpline::ActivateRev(int, int)
MechGrindRailSplineKnot::~MechGrindRailSplineKnot()
MechGrindRailSplineKnot::GetSplineHelper() const
MechGrindRailSplineHelper::~MechGrindRailSplineHelper()
SplineHelperT<MechGrindRailSpline>::NewSpline(EdRegContext*, void*, int) const
SplineHelperT<MechGrindRailSpline>::DeleteSpline(SplineObject*) const
SplineHelperT<MechGrindRailSpline>::GetManagerID() const
MechGrindRailSplineHelper::GetPrefix()
MechGrindRailSplineHelper::GetCategory()
MechGrindRailSplineHelper::GetFileExt()
non-virtual thunk to MechGrindRailSplineHelper::~MechGrindRailSplineHelper()
non-virtual thunk to MechGrindRailSplineHelper::~MechGrindRailSplineHelper()
SplineManagerT<MechGrindRailSpline>::GetManagerName() const
SplineManagerT<MechGrindRailSpline>::GetClass(int)
SplineManagerT<MechGrindRailSpline>::GetNumClasses()
SplineManagerT<MechGrindRailSpline>::NewSpline(EdRegContext*, void*, int) const
SplineManagerT<MechGrindRailSpline>::DeleteSpline(SplineObject*) const
SplineManagerT<MechGrindRailSpline>::GetSplineHelper() const
MechOpponentChooser::MechOpponentChooser(MechOpponentManager*)
MechOpponentChooser::~MechOpponentChooser()
MechOpponentChooser::~MechOpponentChooser()
MechOpponentChooser::ProcessMainOpponentChoosing(float)
MechOpponentChooser::ClearAllOpponentInfoAFresh(float)
MechOpponentChooser::ProcessNonPartyMemberOpponentChoosing(float)
MechOpponentChooser::ProcessPartyMemberOpponentChoosing(float)
MechOpponentChooser::EnsurePlayerIsTargetedAsAnOpponent(float)
MechOpponentChooser::CalculateWeighting(MechCharacter&, MechCharacter&)
MechOpponentChooser::PlayerOrPartyMemberWithMoreOpponentsThan(MechCharacter&, MechOpponentTypeListContainer::eOpponentType, bool, bool)
MechOpponentChooser::GetClosestBaddieToCharacter(MechCharacter&, bool, float*, bool)
MechOpponentChooser::AreEnemies(MechCharacter&, MechCharacter&)
MechAIAvoidance::OOB2D::GetPoints(NuVec2*, float) const
MechAIAvoidance::OOB2D::ClosestPoint(NuVec2 const&) const
MechAIAvoidance::OOB2D::FindSeparatingAxis(MechAIAvoidance::OOB2D const&) const
MechAIAvoidance::OOB2D::FindSeparatingAxis(MechAIAvoidance::LineSegment2D const&) const
MechAIAvoidance::AvoidanceActor::CalculateBoundingOOB2D(float) const
MechAIAvoidance::AvoidanceActorList::AvoidanceActorList(unsigned int)
MechAIAvoidance::AvoidanceActorList::~AvoidanceActorList()
MechAIAvoidance::AvoidanceActorList::~AvoidanceActorList()
MechAIAvoidance::AvoidanceActorList::Add(MechAIAvoidance::AvoidanceActor const&)
MechAIAvoidance::AvoidanceActorList::Add(NuVec2 const&, NuVec2 const&, float, float, float)
MechAIAvoidance::AvoidanceActorList::Remove(unsigned int)
MechAIAvoidance::Interval::Interval(NuVec2 const*, unsigned int, NuVec2 const&)
MechAIAvoidanceHelper::Project2DToAxis(NuVec2 const&, NuVec2 const&, NuVec2&)
MechAIAvoidance::ConvexHull::ConvexHull()
MechAIAvoidance::ConvexHull::ConvexHull(MechAIAvoidance::OOB2D const&, MechAIAvoidance::OOB2D const&)
MechAIAvoidance::ConvexHull::Create(MechAIAvoidance::OOB2D const&, MechAIAvoidance::OOB2D const&, float)
MechAIAvoidance::ConvexHull::Create(MechAIAvoidance::OOB2D const&)
MechAIAvoidance::ConvexHull::CalculateNormal(NuVec2 const&, MechAIAvoidance::ConvexHull::ConvexHullEdge)
MechAIAvoidance::ConvexHull::Create(NuVec2 const&, NuVec2 const&, float, float, MechAIAvoidance::OOB2D const&)
MechAIAvoidance::ConvexHull::RayIntersect(NuVec2 const&, NuVec2 const&, float&, NuVec2&, NuVec2&) const
MechAIAvoidance::ConvexHull::ClassifyEdge(NuVec2 const&, NuVec2 const&, NuVec2 const&, NuVec2 const&, bool)
MechAIAvoidable::Refresh()
MechAIAvoidanceHelper::GetVehicleVelocity(ApiVehicle&)
MechAIAvoidableList::Clear()
MechAIAvoidableList::Add(void const*, MechAIAvoidable::AvoidableType const&, float)
MechAIAvoidableList::GetNextFree()
MechAIAvoidableList::Remove(short)
MechAIAvoidableMap::Clear()
MechAIAvoidableMap::Add(short, unsigned short)
MechAIAvoidableMap::Remove(short)
MechAIAvoidableMap::Find(short) const
MechAIAvoidableHandleList::Add(short*, unsigned short&, unsigned int, short const&)
MechAIAvoidableHandleList::Remove(short*, unsigned short&, unsigned int, short const&)
MechAIAvoidableHandleList::Contains(short const*, unsigned short, unsigned int, short const&)
MechAIAvoidables::MechAIAvoidables()
MechAIAvoidables::~MechAIAvoidables()
MechAIAvoidables::Clear()
MechAIAvoidables::~MechAIAvoidables()
MechAIAvoidables::Add(short)
MechAIAvoidables::Get(unsigned int) const
MechAIAvoidanceSystem::GetAvoidable(short) const
MechAIAvoidables::GetHandle(unsigned int) const
MechAIAvoidanceSystem::MechAIAvoidanceSystem()
MechAIAvoidanceSystem::~MechAIAvoidanceSystem()
MechAIAvoidanceSystem::~MechAIAvoidanceSystem()
MechAIAvoidanceSystem::OnEnterLevel(MechLevelContainer&)
MechAIAvoidanceSystem::OnExitLevel(MechLevelContainer&)
MechAIAvoidanceSystem::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MechAIAvoidanceSystem::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechAIAvoidanceSystem::Sweep()
MechAIAvoidanceSystem::Prune()
MechAIAvoidanceSystem::CreateAvoidable(ApiVehicle const&)
MechAIAvoidanceSystem::CreateAvoidable(ApiCharacter const&)
MechAIAvoidanceSystem::CreateAvoidableProbe(VuVec const&, float)
MechAIAvoidanceSystem::ReleaseAvoidable(short const&)
MechAIAvoidanceSystem::GetOverlapHandle(short, short, short&) const
MechAIAvoidanceSystem::GetOverlaps(short, short const*, unsigned short, unsigned int, bool, bool, bool) const
MechAIAvoidanceHelper::IsAvoidable(MechAIAvoidable const&, MechAIAvoidable const&, bool)
MechAIAvoidanceHelper::TestCylinderOverlap(MechAIAvoidable const&, MechAIAvoidable const&, bool)
MechAIAvoidanceSystem::GetNearestCollision(MechAIAvoidance::OOB2D const&, float, MechAIAvoidables const&, MechAIAvoidance::CollisionPacket&) const
MechAIAvoidanceSystem::GetNearestCollision(MechAIAvoidance::OOB2D const&, float, MechAIAvoidance::AvoidanceActorList const&, float&, bool) const
MechAIAvoidanceSystem::CalculateAvoidance(MechAIAvoidance::OOB2D const&, float, MechAIAvoidables const&, unsigned int, unsigned int, float, float) const
MechAIAvoidanceSystem::CalculateAvoidanceAngles(MechAIAvoidance::OOB2D const&, MechAIAvoidance::AvoidanceActor const&, float&, float&) const
MechAIAvoidanceHelper::Rotate(NuVec2 const&, float)
MechAIAvoidanceSystem::CalculateAvoidance(MechAIAvoidance::OOB2D const&, float, MechAIAvoidance::AvoidanceActorList const&, GLFenceList const*, GLMap const&, unsigned int, unsigned int, float, float) const
MechAIAvoidanceHelper::GetFenceIntersection(GLFenceList const*, GLMap const&, MechAIAvoidance::OOB2D const&, float&)
MechAIAvoidanceHelper::SignedAngle(NuVec2 const&, NuVec2 const&)
MechAIAvoidanceSystem::PushOverlapStack(short, MechAIAvoidable::Axis const&)
MechAIAvoidanceSystem::PopOverlapStack(short, MechAIAvoidable::Axis const&)
MechAIAvoidanceHelper::ClosestPointOnSegment2D(NuVec2 const&, NuVec2 const&, NuVec2 const&, float&, NuVec2&)
MechAIAvoidanceHelper::Project2D(NuVec2 const&, NuVec2 const&, NuVec2&)
MechAIAvoidanceHelper::PerpDot(NuVec2 const&, NuVec2 const&)
MechAIAvoidanceHelper::GetVehicleSpeed(ApiVehicle&)
MechAIAvoidanceHelper::ConvexHullRayIntersection(MechAIAvoidance::ConvexHull const&, MechAIAvoidance::Ray2D const*, unsigned int, NuVec2 const&, float&, float&, NuVec2&, NuVec2&)
MechAIAvoidanceHelper::CalculateAvoidance(MechAIAvoidance::ConvexHull const&, MechAIAvoidance::OOB2D const&, NuVec2&, NuVec2&)
MechAIAvoidanceHelper::FenceRayIntersect(GLFence const&, GLMap const&, NuVec2 const&, NuVec2 const&, float&, NuVec2&)
MechAIAvoidanceHelper::GetFenceIntersection(GLFenceList const*, GLMap const&, MechAIAvoidance::Ray2D const*, unsigned int const&)
MechAIAvoidanceHelper::FenceRayIntersection(GLFence const&, GLMap const&, MechAIAvoidance::Ray2D const*, unsigned int, NuVec2 const&, float&, float&, NuVec2&, NuVec2&)
MechSystemBase<MechAIAvoidanceSystem, int>::Suppress(int)
MechSystemBase<MechAIAvoidanceSystem, int>::IsSuppressed(int) const
Task_ConvertToKrawlie::Task_ConvertToKrawlie(bool)
Task_ConvertToKrawlie::~Task_ConvertToKrawlie()
Task_ConvertToKrawlie::~Task_ConvertToKrawlie()
Task_ConvertToKrawlie::Activate()
Task_ConvertToKrawlie::Process(Brain&, float const&)
Task_KrawlieDismountBoat::Task_KrawlieDismountBoat(MechVehicle*)
Task_KrawlieDismountBoat::~Task_KrawlieDismountBoat()
Task_KrawlieDismountBoat::~Task_KrawlieDismountBoat()
Task_KrawlieDismountBoat::Process(Brain&, float const&)
Task_KrawlieDismountBoat::SetPhase(Task_KrawlieDismountBoat::DismountBoatPhase)
Task_KrawlieDismountVehicle::Task_KrawlieDismountVehicle(MechVehicle*)
Task_KrawlieDismountVehicle::~Task_KrawlieDismountVehicle()
Task_KrawlieDismountVehicle::~Task_KrawlieDismountVehicle()
Task_KrawlieDismountVehicle::Activate()
Task_KrawlieDismountVehicle::Process(Brain&, float const&)
Task_KrawlieDismountVehicle::Init(Brain&)
Task_KrawlieDismountVehicle::SetPhase(Task_KrawlieDismountVehicle::DismountVehiclePhase)
Task_FindKrawlieNetwork::Task_FindKrawlieNetwork()
Task_FindKrawlieNetwork::~Task_FindKrawlieNetwork()
Task_FindKrawlieNetwork::~Task_FindKrawlieNetwork()
Task_FindKrawlieNetwork::Process(Brain&, float const&)
Task_FindKrawlieNetwork::DetermineNearestNode(Brain&, unsigned int, char) const
Task_FindKrawlieNetwork::IsValidKrawlieNode(cAINode const*) const
Task_FindKrawlieNetwork::CreateGotoTask(Brain&, cAINode const&)
Task_FindKrawlieNetwork::GotoNextNode(Brain&)
MechShapeBoxHelper::Register()
MechShapeBox::IsWithin(VuVec&)
MechShapeBox::IsWithin(VuMtx&, VuVec&)
MechShapeBoxHelper::~MechShapeBoxHelper()
NaffMechGameInterface::GetLevelLoaderActiveMasterLevelContainer()
NaffMechGameInterface::GetTestCharDef()
NaffMechGameInterface::GetFrameTime()
NaffMechGameInterface::SetCustomCamera(VuVec*, VuVec*, bool, int, float, float, bool)
NaffMechGameInterface::CopyPlayerToMechCharacter(MechLevelContainer&, int)
NaffMechGameInterface::CopyGameObjToMechCharacter(MechLevelContainer&, GameObject&)
NaffMechGameInterface::UpdatePlayer1Player2()
NaffMechGameInterface::SetPlayerArray(int, MechCharacter*)
NaffMechGameInterface::GetCharIdFromCharDef(CharDef const&)
NaffMechGameInterface::GetCDataFromCharDef(CharDef const&)
NaffMechGameInterface::GetAddOnBroadcaster(LevelContainer&)
NaffMechGameInterface::HasCameraOverride(MechCharacter&)
NaffMechGameInterface::GetCameraOverride(MechCharacter&)
NaffMechGameInterface::GetCamLookOverride(MechCharacter&)
NaffMechGameInterface::CreateCustomGameObjectData(MechCharacter*)
NaffMechGameInterface::KillMechCharacter(MechCharacter*, int, MechCharacter*, bool)
NaffMechGameInterface::DoOldResetEveryFrameCode(MechCharacter&, float)
NaffMechGameInterface::DoOldMoveCodeForMechCharacter(MechCharacter&, float)
RunBackwardsContext::MoveCode(MechCharacter&)
NaffMechGameInterface::DoOldAwkwardShapeCode(MechCharacter*)
NaffMechGameInterface::DoOldPostAnimationCode(MechCharacter&)
NaffMechGameInterface::DrawParaphernalia(MechCharacter&)
NaffMechGameInterface::DrawColdBreath(MechCharacter&)
NaffMechGameInterface::UpdateOldDefaultActions(MechCharacter&)
NaffMechGameInterface::AddAmbientMechCharacterBase(LevelContainer&, int, VuVec const&, int)
NaffMechGameInterface::GetDefaultGameCamera()
NaffMechGameInterface::AddPickups(LegoLevelContainer&, long, int, int, int, NUVEC const*, NUVEC*, float, int, float, float, int, int, bool, bool, int)
NaffMechGameInterface::GadgetSetGlowing(MechGadgetBaseInstance&, bool)
NaffMechGameInterface::SetContextRemoteZorb(MechCharacter&, MechGadgetRemoteInstance*)
NaffMechGameInterface::ClearContextRemoteZorbPointers(MechContextRemoteZorbHandler*, MechGadgetRemoteInstance*)
NaffMechGameInterface::IsInContextRemoteZorb(MechCharacter&)
NaffMechGameInterface::SetContextRemoteWinch(MechCharacter&, MechGadgetRemoteInstance*)
NaffMechGameInterface::ClearContextRemoteWinchPointers(MechContextRemoteWinchHandler*, MechGadgetRemoteInstance*)
NaffMechGameInterface::IsInContextRemoteWinch(MechCharacter&)
NaffMechGameInterface::IsProvidingPadInputToWinch(MechCharacter&)
NaffMechGameInterface::SetContextRemoteBarrel(MechCharacter&, MechGadgetRemoteInstance*)
NaffMechGameInterface::ClearContextRemoteBarrelPointers(MechContextRemoteBarrelHandler*, MechGadgetRemoteInstance*)
NaffMechGameInterface::IsInContextRemoteBarrel(MechCharacter&)
NaffMechGameInterface::ObstacleSetPosition(GizmoObstacle*, VuVec&)
NaffMechGameInterface::ObstacleGetPosition(GizmoObstacle*, VuVec&)
NaffMechGameInterface::ObstacleGetPlacedPosition(GizmoObstacle*, VuVec&)
NaffMechGameInterface::ObstacleGetFromName(EdString, LevelContainer*)
NaffMechGameInterface::ObstacleGetName(GizmoObstacle&)
NaffMechGameInterface::ObstacleGetProgress(GizmoObstacle*)
NaffMechGameInterface::UpdateCharactersGamePad(MechCharacter&)
NaffMechGameInterface::SetUpDefaultActions(MechCharacter&)
NaffMechGameInterface::NaffPlayJumpSfx(MechCharacter&, int)
NaffMechGameInterface::NaffPlayLandSfx(MechCharacter&, int)
NaffMechGameInterface::PlaySfx(short, NUVEC const*, NuSoundHandle*, float, float, bool, int)
NaffMechGameInterface::PlaySfx(SFXTypeID const&, NUVEC const*, NuSoundHandle*, float, float, bool, int)
NaffMechGameInterface::SFXGetSample(short)
NaffMechGameInterface::SFXRequestResourceLoad(SoundEventData*)
NaffMechGameInterface::SFXPlaySample(LevelContainer const&, short, VuVec*, NuSoundHandle*, float, float, bool, int)
NaffMechGameInterface::GetDefaultBlowupSFXId()
NaffMechGameInterface::GetDefaultBlowupDamageSFXId()
NaffMechGameInterface::CanLunge(MechCharacter&, bool)
NaffMechGameInterface::GetAreaPartyMassCoefficient(LevelContainer&)
NaffMechGameInterface::BoltType2DAngleCheck(BoltTypeID const&)
NaffMechGameInterface::BoltTypeTargetDistNear2(BoltTypeID const&)
NaffMechGameInterface::BoltTypeTargetDistMid2(BoltTypeID const&)
NaffMechGameInterface::BoltTypeTargetDegNear(BoltTypeID const&)
NaffMechGameInterface::BoltTypeTargetDegMid(BoltTypeID const&)
NaffMechGameInterface::BoltTypeTargetDegFar(BoltTypeID const&)
NaffMechGameInterface::GetAnimSpeedXZ(MechCharacter const&, float*, float*)
NaffMechGameInterface::GetAnimSpeedXZFromAnimEntry(CharAnimEntry const*, float*, float*)
NaffMechGameInterface::GetAnimSpeedXZ(MechCharacter const&, int, float*, float*)
NaffMechGameInterface::GetAnimStopFrame(CharDefGameData const*, int)
NaffMechGameInterface::Callback_DrawButtonBashBar(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
NaffMechGameInterface::PlayObstacle(GizmoObstacle*, bool)
NaffMechGameInterface::AddFlowBox(void*, int)
NaffMechGameInterface::NotifyDestroyed(MechCharacter&)
NaffMechGameInterface::IsDamageTerrain(MechCharacter*, int, NUVEC const*, NUVEC const*)
NaffMechGameInterface::CreateCharSelectionGrid(MechCharacter&)
NaffMechGameInterface::CallLegacyToggleSubCharacterFn(MechCharacter*, int, bool)
NaffMechGameInterface::CallLegacyToggledCharacterFn(MechCharacter*, int, int)
NaffMechGameInterface::GetFreePlayModelCount()
NaffMechGameInterface::GetFreePlayModelList()
NaffMechGameInterface::IsJumpButtonPressed(MechCharacter&)
NaffMechGameInterface::IsJumpButtonHeld(MechCharacter&)
NaffMechGameInterface::IsAirAttackButtonPressed(MechCharacter&)
NaffMechGameInterface::IsAirAttackButtonHeld(MechCharacter&)
NaffMechGameInterface::NaffGameObjectOrigin(MechCharacter*)
NaffMechGameInterface::NaffResetPlayer(MechCharacter*, bool, NUVEC const*, bool, bool)
NaffMechGameInterface::GamePadsStartPressed(int&, NUPAD**, int&, bool, NUPAD**, int, int)
NaffMechGameInterface::GetMudGravity()
NaffMechGameInterface::WorkInactiveVehiclePlayer(MechCharacter*)
NaffMechGameInterface::WorkInactiveVehiclePlayer(MechCharacter*, bool)
NaffMechGameInterface::IsFreePlayEnabled()
NaffMechGameInterface::IsLiftPlayerEnabled()
NaffMechGameInterface::UpdateSwitchFloorTargetsInXZRange(LevelContainer&, VuVec&, float)
NaffMechGameInterface::LungeHit(MechCharacter*, MechObjectData*)
NaffMechGameInterface::SelectLungeOpponent(MechCharacter*, MechObjectData&)
NaffMechGameInterface::CanSlideOnSurface(MechCharacter*, char)
NaffMechGameInterface::WriteDataToSerialisedProgressDataBlock(LevelContainer&, int, void*, int)
NaffMechGameInterface::GetDataFromSerialisedProgressDataBlock(LevelContainer&, int, int&)
NaffMechGameInterface::ProgressHdrTypeMechFlowInterface()
NaffMechGameInterface::LegacyRespawnCode(MechCharacter&)
MechObjectData::Set(MechCharacter&)
MechObjectData::Set(PART&)
MechObjectData::Set(Bolt&)
MechObjectData::Set(BlowUp&)
MechObjectData::Set(GizmoGrapple&)
MechObjectData::Set(GizmoLedge&)
MechObjectData::Set(GizmoObstacle&)
MechObjectData::Set(GizmoPlug&)
MechObjectData::Set(GizItem&)
MechObjectData::Set(GizmoSpellIt&)
MechObjectData::Set(GizmoTeleport&)
MechObjectData::Set(GizmoTurret&)
MechObjectData::Set(ComplexGizmo&)
MechObjectData::Set(NUVEC&)
MechObjectData::Set(MechObjectInterface&)
MechObjectData::Set(LegoSpecial&)
MechObjectData::Set(AIConvexLocator&)
MechObjectData::Set(Gizmo&)
MechObjectData::Set(MechGadgetInterface&)
MechObjectData::SetCustom(void*, int, int)
MechObjectData::GetScaledCollisionRadius() const
MechObjectData::HasTerrain()
TargetData_GetIconPos(NUVEC&, MechObjectData const&)
MechObjectData::GetApiVehicle() const
MechObjectData::IsRideable() const
MechObjectDataAutoCleanStore::GetTargetDataAutoCleanListCS()
MechObjectEventData::GetEventOwnerMechCharacter() const
MechObjectEventData::GetOtherMechCharacter() const
MechEventType::IsTypeOfEvent(Event const&) const
MechEvent::Cast(Event const&)
MechEventType::IsTypeOfEvent(MechEvent const&) const
MechEvent::MechEvent(MechEventType const&)
MechEvent::Cast(Event&)
MechEventList::FindEvent(MechEventType const&) const
MechEventList::SubscribeToEvent(MechEventType const&, IEventListener&)
MechEventList::UnsubscribeFromEvent(MechEventType const&, IEventListener&)
MechEventList::DispatchEvent(MechEventType const&, MechObjectInterface const&)
MechEventList::DispatchEvent(MechEventType const&, MechObjectEventData&)
MechEventList::DispatchEventToListener(IEventListener&, MechEventType const&, MechObjectEventData&)
MechEventList::Clear()
MechObjectInterface::GetThrowingGlow()
MechObjectInterface::GetOpponent()
MechObjectInterface::GetMechVehicleSelfOrMounted() const
MechObjectInterface::GetMechCharacterSelfOrRider(VehicleDefSeat::SEATTYPES)
MechObjectInterface::GetBrainMountedOrSelf() const
MechObjectInterface::GetObjectInterfaceMountedOrSelf()
MechObjectInterface::RequestAlphaFade(MechObjectInterface::AlphaFadeMode, float, MechObjectInterface::AlphaFadeForce)
MechObjectInterface::GetRequiredPermanentAbilities(MechAbilitiesToAddAndSuppressFlagsAndListPtrs&) const
MechObjectInterface::AddAbilities(MechAbilityInitList const&, MechAbilityInstanceStrongPtrsList&, FlagPriority)
MechObjectInterface::AddAbilities(MechAbilityFlags const&, MechAbilityInstanceStrongPtrsList&, FlagPriority)
MechObjectInterface::SuppressAbilities(MechAbilityFlags const&, MechAbilityInstanceStrongPtrsList&, FlagPriority)
MechObjectInterface::ResetPermanentAbilities(bool) const
MechObjectInterface::AddAbility(MechAbilityHandle const&, FlagPriority) const
MechObjectInterface::HasAbility(MechAbilityHandle const&) const
MechObjectInterface::HasAbilitiesAll(MechAbilityFlags const&) const
MechObjectInterface::HasAbilitiesAny(MechAbilityFlags const&) const
MechObjectInterface::HasAbilitiesAllWithoutReferencePriority(MechAbilityFlags const&, FlagPriority) const
MechObjectInterface::SuppressAbility(MechAbilityHandle const&, FlagPriority) const
MechObjectInterface::SubscribeToEvent(MechEventType const&, IEventListener&) const
MechObjectInterface::UnsubscribeFromEvent(MechEventType const&, IEventListener&) const
MechObjectInterface::DispatchEvent(MechEventType const&) const
MechObjectInterface::DispatchEvent(MechEventType const&, MechObjectEventData&)
MechObjectInterface::DispatchEventToListener(IEventListener&, MechEventType const&, MechObjectEventData&)
MechObjectInterface::CallCanBeHitHooks(BeenHit const&) const
MechTargetableIteratorFrustrum::TargetablesFilterCollector::SetWorldHitData(float, Geom const*, VuVec const&, VuVec const&)
MechTargetableIteratorFrustrum::MechTargetableIteratorFrustrum(MechObjectInterface&, MechFrustum const&, BeenHit const*)
MechTargetableIteratorFrustrum::GetNext(MechTargetableIteratorFrustrum::TargetableInfo*)
MechObjectInterfaces::MechObjectInterfaces()
MechObjectInterfaces::~MechObjectInterfaces()
MechObjectInterfaces::~MechObjectInterfaces()
MechObjectInterfaces::Init()
MechObjectInterfaces::OnInitPostConfig()
MechObjectInterfaces::ShutDown()
MechObjectInterfaces::EventNotify(Event&, NuEventData&)
MechObjectInterfaces::DeleteMObjInterfaces(LevelContainer const&)
MechObjectInterfaces::OnDestroyObjectEvent(PlaceableBase*)
MechObjectInterfaces::FindMObjInterface(PlaceableBase&)
MechObjectInterfaces::DeleteMObjInterface(MechObjectInterface&)
MechObjectInterfaces::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechObjectInterfaces::GetMechObjectInterface(PlaceableBase*)
MechObjectInterfaces::AddMObjInterface(MechObjectInterface&)
MechObjectHealthInfoBase::SetHitPointsFraction(float, bool)
MechObjectHealthInfoBase::ClampHitPointsToDraw(int&, int&)
MechObjectHealthInfoBase::OnHitPointsChanged(int)
MechObjectsConnectedIterator::Next()
MechObjectInterfaces::RequestKillConnectedObjects(MechObjectInterface&, MechRequestKillInfo const&)
MechObjectsConnectedIterator::MechObjectsConnectedIterator(MechObjectInterface&, MechObjectInterface::ConnectionType, MechObjectsConnectedIterator::Mode)
MechObjectsConnectedIterator::FindConnectedObjects(MechObjectInterface&)
MechObjectHealthInfoBase::GetBeenHit(BeenHit::BeenHitType, MechObjectInterface*, BoltTypeID)
MechObjectHealthInfoBase::SetBeenHit(BeenHit::BeenHitType, bool, MechObjectInterface*, BoltTypeID)
MechObjectHealthInfoBase::GetFlicker() const
MechTargetableIteratorFrustrum::TargetablesFilterCollector::~TargetablesFilterCollector()
MechSystemBase<MechObjectInterfaces, int>::Suppress(int)
MechSystemBase<MechObjectInterfaces, int>::IsSuppressed(int) const
MechEvent::~MechEvent()
MechEvent::~MechEvent()
MechEvent::GetEventClassType() const
MechEventTypeT<MechObjectKilledEventData>::GetEventDataTypeHash() const
MechStreamingLevelInterface::MechStreamingLevelInterface(StreamingLevel&)
MechStreamingLevelInterface::MechStreamingLevelInterface(LevelContainer&)
MechStreamingLevelInterface::GetFrom(LevelContainer const&)
MechStreamingLevelInterface::HasAbility(LevelContainer const&, MechAbilityHandle const&)
MechStreamingLevelInterface::HasAbilityCheckParents(LevelContainer const*, MechAbilityHandle const&)
MechStreamingLevelInterface::GetLevelContainer() const
MechStreamingLevelInterface::GetTargetName() const
MechStreamingLevelInterface::GetObjectEdClass() const
MechStreamingLevelInterface::GetPos(VuVec&, int) const
MechStreamingLevelInterface::GetRadius() const
MechStreamingLevelInterface::GetExtents(VuVec&, VuVec&)
MechStreamingLevelInterface::GetAddOns() const
MechStreamingLevelInterface::GetEventList(bool) const
MechStreamingLevelInterface::GetRequiredPermanentAbilities(MechAbilitiesToAddAndSuppressFlagsAndListPtrs&) const
MechStreamingLevelInterface::GetAbilityInstances(bool) const
MechStreamingLevelInterface::~MechStreamingLevelInterface()
MechStreamingLevelInterface::GetInterfaceType() const
MechObjectInterface::GetTargetPos(VuVec&, TARGETING_TYPE, int)
MechObjectInterface::GetTargetMom(VuVec&, TARGETING_TYPE)
MechObjectInterface::GetGameType()
MechStreamingLevelInterface::GetPlaceable()
operator|(HookBits const&, MechHooks::AddOnHooks const&)
HookListener::RegisterForHookManager()
HookListener::UnregisterForHookManager()
HookListener::RegisterForHook(unsigned char)
HookListener::UnregisterHook(unsigned char)
HookListener::UnregisterAllHooks()
MechHooks::CallHookInternal(LevelContainer*, unsigned char, HookArgs*)
HookListenerManager::CallHook(unsigned char, HookArgs*)
MechHooks::CallHook(LevelContainer*, unsigned char, HookArgs*)
MechHooks::CallHookRecurseToSubLevels(LevelContainer*, unsigned char, HookArgs*)
MechHooks::Init()
HookListenerManager::EventNotify(Event&, NuEventData&)
HookListenerManager::RemoveChildManager(HookListenerManager&)
HookListenerManager::RegisterProcessing()
HookListenerManager::AddChildManager(HookListenerManager&)
HookListenerManager::RegisterRendering()
HookListenerManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
HookListenerManager::OnProcessInternal(LevelContainer&, MechHooks&, HookArgsProcess&, bool)
HookListenerManager::ResetOnScreen(NURENDERSTAGE, LevelViewType, ClassManager::eRenderingPriority const&)
HookListenerManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MechHooks::~MechHooks()
MechSystemBase<MechHooks, int>::Suppress(int)
MechSystemBase<MechHooks, int>::IsSuppressed(int) const
HookListenerManager::~HookListenerManager()
HookListenerManager::~HookListenerManager()
CMList<HookListener*>::Append(HookListener* const&, CMList<HookListener*>::ListLink*)
NuVector<HookListenerManager*>::Reserve(unsigned int, bool)
LegoScript::LegoScriptInit()
LegoScript_Auxiliary::GetDamageFlag(int)
InitLegoCharacterActions()
CharacterAction_SetInvulnerable::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetInvulnerable::~CharacterAction_SetInvulnerable()
CharacterAction_SetInvulnerable::GetName() const
CharacterAction_SetInvulnerable::GetInputs(SCmdParams&) const
CharacterAction_SetInvulnerable::GetOutputs(SCmdParams&) const
CharacterAction_SetNoTag::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetNoTag::~CharacterAction_SetNoTag()
CharacterAction_SetNoTag::GetName() const
CharacterAction_SetNoTag::GetInputs(SCmdParams&) const
CharacterAction_SetNoTag::GetOutputs(SCmdParams&) const
CharacterAction_SetNoTagRelease::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetNoTagRelease::~CharacterAction_SetNoTagRelease()
CharacterAction_SetNoTagRelease::GetName() const
CharacterAction_SetNoTagRelease::GetInputs(SCmdParams&) const
CharacterAction_SetNoTagRelease::GetOutputs(SCmdParams&) const
CharacterAction_SetTaggable::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetTaggable::~CharacterAction_SetTaggable()
CharacterAction_SetTaggable::GetName() const
CharacterAction_SetTaggable::GetInputs(SCmdParams&) const
CharacterAction_SetTaggable::GetOutputs(SCmdParams&) const
CharacterAction_SetNoTerrainCollision::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetNoTerrainCollision::~CharacterAction_SetNoTerrainCollision()
CharacterAction_SetNoTerrainCollision::GetName() const
CharacterAction_SetNoTerrainCollision::GetInputs(SCmdParams&) const
CharacterAction_SetNoTerrainCollision::GetOutputs(SCmdParams&) const
Init_GenericActions()
GenericAction_FreePlay::Exec(ScriptContext&)
GenericAction_FreePlay::~GenericAction_FreePlay()
GenericAction_FreePlay::GetName() const
GenericAction_FreePlay::GetInputs(SCmdParams&) const
GenericAction_FreePlay::GetOutputs(SCmdParams&) const
TargetingInterfaceAIConvexLocator::TargetingInterfaceAIConvexLocator(AIConvexLocator&)
TargetingInterfaceAIConvexLocator::~TargetingInterfaceAIConvexLocator()
TargetingInterfaceAIConvexLocator::~TargetingInterfaceAIConvexLocator()
TargetingInterfaceAIConvexLocator::operator=(TargetingInterfaceAIConvexLocator const&)
TargetingInterfaceAIConvexLocator::GetTargetName() const
TargetingInterfaceAIConvexLocator::GetGameType()
TargetingInterfaceAIConvexLocator::GetLevelContainer() const
TargetingInterfaceAIConvexLocator::GetPos(VuVec&, int) const
TargetingInterfaceAIConvexLocator::GetRadius() const
TargetingInterfaceAIConvexLocator::GetTargetYRot()
TargetingInterfaceAIConvexLocator::GetTargetPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceAIConvexLocator::GetMtx(VuMtx&, int)
TargetingInterfaceAIConvexLocator::GetTargetFloorPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceAIConvexLocator::GetTargetMom(VuVec&, TARGETING_TYPE)
TargetingInterfaceAIConvexLocator::GetTargetCursorPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceAIConvexLocator::GetTargetRandomPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceAIConvexLocator::SetTransformExceptPhysics(VuMtx&, int)
TargetingInterfaceAIConvexLocator::DrivePhysicsToTransform(VuMtx const&, bool, bool)
TargetingInterfaceAIConvexLocator::Teleport(VuMtx const&, unsigned char)
TargetingInterfaceAIConvexLocator::GetInterfaceType() const
TargetingInterfaceAIConvexLocator::GetThrowingGlow()
TargetingInterfaceAIConvexLocator::GetAIConvexLocator()
TargetingInterfaceAIConvexLocator::GetPlaceable()
LegoGizmoManager::FixUp_AI(AIManager&)
LegoGizmoManager::FixUp_AI_Nodes(AIManager&)
LegoGizmoManager::PostGroupGenerationFixUp_AI(AIManager&)
LegoGizmoManager::AIFixUpLinks_AddLinks_FourWaysInOut_FirstValid(AIManager&, Gizmo&, EdgeGroup*&, ConvexNode&, float const&, float const&, float const&, int const&, float const&, float const&, int const&, int const&, VuVec const*, bool const&, float const&, int const&, int)
LegoAI::LegoAI()
LegoAI::Init()
LegoAI::RegisterScriptActions() const
LegoAI::RegisterPathCnxType(char const*, char const*, unsigned int, unsigned int*)
LegoAI::FindBrain(char const*, LevelContainer const*)
LegoAI::FindApiCharacter(char const*, LevelContainer const*)
LegoAI::GetCameraForAI(Brain const&) const
non-virtual thunk to LegoAI::GetCameraForAI(Brain const&) const
LegoAI::GetAIAvoidable(Entity*)
non-virtual thunk to LegoAI::GetAIAvoidable(Entity*)
LegoAI::PreSpecialMove(APIOBJECT* const&, int)
LEGO_GetCurrentRoutePoint(MechCharacter*)
LEGO_GetCurrentEdgeFlags(MechCharacter*)
TryToTeleportToPosition(MechCharacter*, NUVEC, int, int (*)(MechCharacter*))
non-virtual thunk to LegoAI::PreSpecialMove(APIOBJECT* const&, int)
LegoAI::MidSpecialMove(AIManager&, APIOBJECT* const&)
LEGO_TeleportFn(MechCharacter*)
ClearSpecialMove(MechCharacter*)
non-virtual thunk to LegoAI::MidSpecialMove(AIManager&, APIOBJECT* const&)
LegoAI::UpdateLocatorSetAssignments(AIConvexLocatorSet*)
LegoAI::AIAddedToGroup(Brain&, AIGroup&)
LegoAI::AIRemovedFromGroup(Brain&, AIGroup&)
LegoAI::IsOnScreen(VuVec const&, float) const
non-virtual thunk to LegoAI::IsOnScreen(VuVec const&, float) const
LegoAI::Teleport(Brain&, VuVec const&)
non-virtual thunk to LegoAI::Teleport(Brain&, VuVec const&)
LegoAI::OnEnterLevel(LegoLevelContainer&)
LegoAI::OnExitLevel(LegoLevelContainer&)
LegoAI::GetPlayerOne() const
LegoAI::GetPlayerTwo() const
LegoAI::GetNearestPlayer(VuVec const&) const
LegoAI::BrainRemoved(Brain const&)
non-virtual thunk to LegoAI::BrainRemoved(Brain const&)
LegoAI::EventNotify(Event&, NuEventData&)
LegoAI::SetUpScatterBehaviour(Brain&, LegoAIBehaviourScatterEventData&) const
LegoAI::TurnOffScatterBehaviour(Brain&) const
LegoAI::CollectExtraAvoidables(Brain&, VuVec const&, VuVec const&)
non-virtual thunk to LegoAI::CollectExtraAvoidables(Brain&, VuVec const&, VuVec const&)
LegoAI::Jump(Brain&)
non-virtual thunk to LegoAI::Jump(Brain&)
LegoAI::InitialiseBrain(Brain&)
non-virtual thunk to LegoAI::InitialiseBrain(Brain&)
LegoAI::SetPlayer1(Brain*)
LegoAI::SetPlayer2(Brain*)
LegoAI::TriggerReq_JustPlayer1(Trigger&)
LegoAI::TriggerReq_JustPlayer2(Trigger&)
LegoAI::TriggerReq_AnyPlayerIn(Trigger&)
LegoAI::TriggerReq_AnyPlayerOut(Trigger&)
LegoAI::TriggerReq_AllPlayersIn(Trigger&)
LegoAI::TriggerReq_AllPlayersOut(Trigger&)
LegoAI::TriggerReq_AnyPartyIn(Trigger&)
LegoAI::TriggerReq_AnyPartyOut(Trigger&)
LegoAI::TriggerReq_AllPartyIn(Trigger&)
LegoAI::TriggerReq_AllPartyOut(Trigger&)
LegoAI::TriggerReq_Nobody(Trigger&)
LegoAI::GetName(APIOBJECT* const&) const
non-virtual thunk to LegoAI::GetName(APIOBJECT* const&) const
LegoAI::GetAIPacketForLegacyScript(ApiCharacter const*) const
non-virtual thunk to LegoAI::GetAIPacketForLegacyScript(ApiCharacter const*) const
SetSpecialMove(MechCharacter*, NUVEC const&, NUVEC const*, char)
WithinRouteDestination(MechCharacter*)
RouteDestinationOccupied(MechCharacter*)
DestinationCheckCylinder(MechCharacter const&, VuVec const&, float, float)
LEGO_MidSpecialMove_Default(AIManager&, ApiCharacter&)
LEGO_MidSpecialMove_StartJump(AIManager&, ApiCharacter&)
LEGO_PrepareJump(ApiCharacter&, int)
LegoAI::GetTeleportPathCnxFlag(GizmoTeleport&, GizmoTeleport&)
LEGO_PrepareHatch(ApiCharacter&, int)
LEGO_MidSpecialMove_UseHatch(AIManager&, ApiCharacter&)
LEGO_PrepareBigJump(ApiCharacter&, int)
LEGO_GetCurrentLink(ApiCharacter&, VuVec&, VuVec&)
LEGO_MidSpecialMove_BigJump(AIManager&, ApiCharacter&)
LEGO_PrepareObstacle(ApiCharacter&, int)
LEGO_MidSpecialMove_BigJumpToLedge(AIManager&, ApiCharacter&)
LEGO_PrepareJumpToLedgeMove(ApiCharacter&, int)
LEGO_PrepareLedgeMove(ApiCharacter&, int)
LEGO_MidSpecialMove_Ledge(AIManager&, ApiCharacter&)
LEGO_PrepareHoverTube(ApiCharacter&, int)
LEGO_PrepareContextLink(ApiCharacter&, int)
LEGO_PreparePoleClimb(ApiCharacter&, int)
LEGO_PrepareTakeOverJump(ApiCharacter&, int)
LEGO_PrepareZipup(ApiCharacter&, int)
LEGO_PrepareCWGrapple(ApiCharacter&, int)
LEGO_PrepareTightrope(ApiCharacter&, int)
LEGO_MidSpecialMove_JumpToTightrope(AIManager&, ApiCharacter&)
LEGO_PrepareClimb(ApiCharacter&, int)
LEGO_MidSpecialMove_WallClimb(AIManager&, ApiCharacter&)
LEGO_PrepareSuperHeroesGrapple(ApiCharacter&, int)
LEGO_MidSpecialMove_SuperHeroesGrapple(AIManager&, ApiCharacter&)
LEGO_MidSpecialMove_Grapple(AIManager&, ApiCharacter&)
LEGO_MidSpecialMove_ClimbUpLadder(AIManager&, ApiCharacter&)
LEGO_MidSpecialMove_ClimbDownLadder(AIManager&, ApiCharacter&)
LEGO_PreareTwirlLedge(ApiCharacter&, int)
LEGO_MidSpecialMove_TwirlLedge(AIManager&, ApiCharacter&)
LEGO_PrepareBatmanGrapple(ApiCharacter&, int)
LEGO_MidSpecialMove_BatmanGrapple(AIManager&, ApiCharacter&)
LEGO_PrepareIndyGrapple(ApiCharacter&, int)
LEGO_MidSpecialMove_JumpToIndyGrapple(AIManager&, ApiCharacter&)
LEGO_MidSpecialMove_IndyGrappleAdjustHeight(AIManager&, ApiCharacter&)
LEGO_MidSpecialMove_JumpFromIndyGrapple(AIManager&, ApiCharacter&)
LEGO_SnapToSpecialMove_IndyGrapple(ApiCharacter&, int)
LEGO_GetCurrentLink(ApiCharacter&)
LEGO_PrepareJustWalk(ApiCharacter&, int)
RigidBodyAIAvoidable::RigidBodyAIAvoidable(RigidBody const&, unsigned int)
RigidBodyAIAvoidable::GetAiObstacles(Array<VuVec>&)
RigidBodyAIAvoidable::UpdateBox()
CloneWarsWalkerAvoidable::ShouldBeAvoided(Brain const&) const
RigidBodyAIAvoidable::ShouldBeAvoided(Brain const&) const
LegoAI::InitPlayerAI(MechCharacter&, bool)
LegoAI::InitCreature(MechCharacter&, bool)
LegoAI::DoAINodeCallBack(Brain*)
non-virtual thunk to LegoAI::DoAINodeCallBack(Brain*)
LegoAI::DoAvoidance(Brain*, Brain*)
non-virtual thunk to LegoAI::DoAvoidance(Brain*, Brain*)
LegoAI::GetAvoidanceWeighting(Brain const*, Brain const*)
non-virtual thunk to LegoAI::GetAvoidanceWeighting(Brain const*, Brain const*)
LegoAI::CalculateNormalAvoidanceWeighting(Brain const&, MechCharacter const&, Brain const&, MechCharacter const&)
LegoAI::FixupAIData(AIAutoCreatedInterface&)
non-virtual thunk to LegoAI::FixupAIData(AIAutoCreatedInterface&)
RigidBodyAIAvoidable::~RigidBodyAIAvoidable()
CloneWarsWalkerAvoidable::~CloneWarsWalkerAvoidable()
LegoAI::~LegoAI()
LegoAI::SetGameObjectCapabilities(MechCharacter*)
SActionDebugMsg::~SActionDebugMsg()
SActionDebugMsg::GetName() const
SActionDebugMsg::GetInputs(SCmdParams&) const
SActionDebugMsg::GetOutputs(SCmdParams&) const
SActionDebugMsg::Exec(ScriptContext&)
AITask* CreateObject<AITask*, cWanderOnFoot>()
AITask* CreateObject<AITask*, cGotoTargetOnFoot>()
AITask* CreateObject<AITask*, cFleeOnFoot>()
AITask* CreateObject<AITask*, cGotoTargetStraightLine>()
AITask* CreateObject<AITask*, cEnterVehiclePlayer>()
AITask* CreateObject<AITask*, cExitVehiclePlayer>()
AITask* CreateObject<AITask*, cDailyRoutine>()
AITask* CreateObject<AITask*, cTalkMaster>()
AITask* CreateObject<AITask*, cTalkSlave>()
AITask* CreateObject<AITask*, cIdle>()
AITask* CreateObject<AITask*, cAnimationTask>()
AITask* CreateObject<AITask*, cAttractorTask>()
AITask* CreateObject<AITask*, cFaceTargetTask>()
AITask* CreateObject<AITask*, cPlayerOnFoot>()
AITask* CreateObject<AITask*, cPlayerInVehicle>()
GenericEventCreator<GameObjectHitScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<AreaCompleteScriptEvent>::Create(ScriptContext&, ScriptScope&)
GenericEventCreator<CutsceneFinishedScriptEvent>::Create(ScriptContext&, ScriptScope&)
LegoAreaManager::LegoAreaManager()
LegoAreaManager::ShouldLoadAreaDataForLevel(StreamingLevel const&) const
LegoAreaManager::IsLevelInMostRecentlyPlayingArea(StreamingLevel const&)
LegoAreaManager::IsLevelInMostRecentlyPlayingEpisode(StreamingLevel const&)
LegoAreaManager::ObtainPartyResourceHandles()
LegoAreaManager::ClearPartyResourceHandles()
LegoAreaManager::GetCurrentAreaName(char*, int) const
LegoAreaContext::Reference(StreamingLevel const&)
CMList<StreamingLevel const*>::Append(StreamingLevel const* const&, CMList<StreamingLevel const*>::ListLink*)
LegoAreaContext::Release(StreamingLevel const&)
LegoAreaManager::CreateLevelContextData(StreamingLevel const&)
LegoAreaContext::Initialise()
LegoAreaContext::DoLoad(StreamingLevel const&)
LegoAreaManager::NotifyMasterLevelPlaying(LevelContainer const&)
LegoAreaManager::DestroyLevelContextData(StreamingLevel const&)
LegoAreaContext::IsSameAreaAs(StreamingLevel const&, LegoAreaContext::TreatGlobalAs) const
LegoAreaContext::DoUnload()
LegoAreaContext::Uninitialise()
LegoAreaContext::LegoAreaContext(AREADATA const*)
LegoAreaManager::~LegoAreaManager()
LegoAreaManager::~LegoAreaManager()
LegoAreaEventData::~LegoAreaEventData()
BlowUp_UpdateHint(WORLDINFO*, HINT_s*)
LegoBlowUps::LegoBlowUps()
LegoBlowUps::CreateGizmoManager()
non-virtual thunk to LegoBlowUps::CreateGizmoManager()
LegoBlowUps::CreateHelper()
LegoBlowUps::OnInit()
BlowupTriggerOnCollisionListener::~BlowupTriggerOnCollisionListener()
BlowupTriggerOnCollisionListener::~BlowupTriggerOnCollisionListener()
BlowupTriggerOnCollisionListener::AddEntity(Entity*)
BlowupTriggerOnCollisionListener::RemoveEntity(Entity*)
BlowupTriggerOnCollisionListener::OverlapBegin(Entity const*, Entity const*)
BlowupTriggerOnCollisionListener::OverlapEnd(Entity const*, Entity const*)
BlowupTriggerOnCollisionListener::AllowCollision(Entity const*, Entity const*)
BlowupTriggerOnCollisionListener::Collision(BodyPair*, Array<ContactPoint>&)
BlowupTriggerOnCollisionListener::AttemptBlowup(Gizmo*)
BlowupTriggerOnCollisionListener::Collision(EntityPair*)
BlowupTriggerOnCollisionListener::Collision(Character*, Entity*, ContactPoint&)
BlowUp::BlowUp()
BlowUp::~BlowUp()
BlowUp::FixUpKrawlieCollision(bool)
BlowUp::RemoveCollisionListener()
non-virtual thunk to BlowUp::~BlowUp()
BlowUp::~BlowUp()
non-virtual thunk to BlowUp::~BlowUp()
BlowUp::GetMechObjectInterface()
BlowUp::AddCollisionListener()
BlowUpManager::~BlowUpManager()
BlowUpManager::~BlowUpManager()
BlowUpManager::GizmoHasBeenDestroyed(Gizmo*)
BlowUpManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
BlowUp::Init(WORLDINFO*)
BlowUp::InstanceMovedEx()
BlowUp::CalculateMidPos(bool)
BlowUp::GetBuilderOrigin(NUVEC*)
BlowUpManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
BlowUp::operator=(BlowUp const&)
BlowUpManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
BlowUpManager::DestroyGizmoEx(Gizmo*)
GizBlowUp_InitAfterLoad(BlowUp*)
BlowUp::LoadEx(WORLDINFO*, int)
BlowUp::SetupDecalSplat(int)
BlowUpManager::ActivateLevel()
BlowUpManager::DeactivateLevel()
BlowUpManager::Draw(float, ClassManager::eRenderingPriority)
BlowUpManager::PreLoad()
GizBlowUp_FindNearest(WORLDINFO*, NUVEC*, float*, bool)
BlowUpManager::FindNearest(MechCharacter*, NUVEC const*, float*, float*, bool, unsigned int, unsigned int)
BlowUp_VerifyLOS(BlowUp*, NUVEC const*, NUVEC const*, NUVEC const*, FirstPointCollector*, float)
BlowUpManager::DestroyBlowUps(NUVEC const&, float)
BlowUpManager::FindNext(BlowUp*)
BlowUpManager::UpdateProximityList()
BlowUpManager::TotalScore()
BlowUpManager::PostLoad()
BlowUp::LoadInstanceDataEx(WORLDINFO*, int)
BlowUp::SaveInstanceDataEx(WORLDINFO*)
BlowUpManager::RequestSfx()
BlowUpManager::ReleaseSfx()
BlowUpManager::BlowUp_CheckProximity(WORLDINFO*, MechCharacter*)
BlowUpManager::BlowUp_CheckProximityNonRecursive(MechCharacter*)
BlowUp::Reset()
BlowUp::ResetFunction(bool)
BlowUp::CreateColouredLegoInstance()
BlowUp::ResetPosition(WORLDINFO*)
LegoBlowUps::CreateBlowUp()
BlowUpManager::AllocateProgressData(WORLDINFO*)
BlowUpManager::ClearProgress(WORLDINFO*, void*)
BlowUpManager::StoreProgress(WORLDINFO*, void*)
BlowUpManager::Reset(WORLDINFO*, void*)
BlowUp::Respawn(WORLDINFO*)
BlowUpManager::IsHiddenLayerCullingEnabled()
BlowUpManager::DoHiddenLayerCulling(int, GAMECAMERA&, int, int, int)
BlowUpManager::EarlyUpdate(float)
BlowUpManager::LateUpdate(float)
BlowUp::Despawn(float, bool, bool)
BlowUpManager::ShinyCast(BlowUp&, NUVEC const&, NUVEC const&, NUVEC&)
LegoBlowUps::CreateShinyEffect(BlowUp&, NUVEC&)
LegoBlowUps::GetShinyParticle(BlowUp&) const
BlowUpManager::HitGeneral(WORLDINFO*, MechCharacter*, NUVEC const*, int, float, NUVEC*, NUVEC*, Bolt*, eHITBLOWUPTYPE, unsigned char)
LegoBlowUps::OnBoltHit(WORLDINFO*, BlowUp*, NUVEC*, int, int, Bolt*)
BlowUp::ApplyNudgeMomentum(VuVec&)
BlowUpManager::FindFromPlatID(long)
BlowUpManager::FindFromRigidBody(RigidBody*)
BlowUpManager::BoltHitPlat(Bolt*)
LegoBlowUps::HandleBoltHit(WORLDINFO*, BlowUp&, Bolt&, NUVEC&, MechCharacter*)
BlowUpManager::GetBestBoltTarget(float*, NUVEC*, NUVEC*, void*, NUVEC*, NUVEC*, float, float, int, int, BoltTypeID const&, MechObjectData&)
BlowUpManager::BoltHit(WORLDINFO*, void*, NUVEC*, int, float, NUVEC*, NUVEC*, Bolt*, unsigned int)
BlowUpManager::BlowUpOpponent(MechCharacter*, float, float, float, int, unsigned long const&, unsigned long const&, unsigned long const&, BlowUp*)
BlowUpManager::BlowUpOpponentNonRecursive(MechCharacter*, float, float, float, int, unsigned long const&, unsigned long const&, unsigned long const&, BlowUp*)
BlowUp::PlayBlowupSfx(bool)
BlowUp::Blowup(Bolt*, bool, bool, bool)
BlowUp::AddEffects(WORLDINFO*, unsigned int, int)
BlowUp_FindFromName(WORLDINFO*, char const*, int, int)
BlowupType::BlowupType()
BlowUpType_AddDebris(BlowupType*, NUVEC*, LevelContainer*)
BlowUp::CreatePickups(int, int, int, NUVEC)
GizmoBlowupAddDefaultExplosionDebris(LegoLevelContainer&, NUVEC*)
BlowUp::GetNumOutputs()
BlowUp::GetOutput(int, int)
BlowUp::GetOutputName(int)
BlowUp::Activate(bool)
BlowUp::SetReference(BlowUp*)
BlowUp::SetVisibility(int)
BlowUp::SetAIAvoid(bool)
BlowUp::Hide(unsigned char, bool)
BlowUp::GetClass() const
BlowUp::SetGamePos(NUVEC&)
BlowUp::SetGameMtx(NUMTX&)
BlowUp::JumpToComplete()
BlowUp::ActivateRev(int, int)
BlowUp::HitCharacter(GameObject&)
BlowUp::TurnOffCastability()
BlowUp::CanInteract(APIOBJECT* const&)
non-virtual thunk to BlowUp::CanInteract(APIOBJECT* const&)
BlowUp::Actuate()
GizNewBlowUpTypeBlowUp(WORLDINFO*, GizmoLink*, NUVEC*)
GizBlowup_InitLOS()
GizBlowup_RestAllLOS()
GizBlowup_ResetLOS(MechCharacter*)
LegoBlowUps::GetLineOfSightMaxRange(WORLDINFO*, MechCharacter*, float&, float&)
LegoBlowUps::GetExplosionFlags(BlowUp&, int&)
BlowUpManager::Blowup_UpdateLOS(WORLDINFO*, MechCharacter*)
BlowUpManager::CheckForAIAssistance(MechCharacter**, int&, MechCharacter&) const
BlowUp::AddKrawlieCollision()
BlowUp::RemoveKrawlieCollision()
BlowUpManager::SaveVersion()
LegoBlowUps::~LegoBlowUps()
LegoBlowUps::OnBlowUpPunched(BlowUp&, MechCharacter*)
LegoBlowUps::UpdateBlowup(BlowUp*)
LegoBlowUps::CheckGameFlags(MechCharacter&, BlowUp&, int, unsigned long const&)
BlowUp::SetInstanceData(Gizmo*)
BlowUp::IsColouredCorrectly()
BlowUp::ColourCorrectly()
GizBlowupHelper::~GizBlowupHelper()
BlowUpCollisionListener::~BlowUpCollisionListener()
BlowUpCollisionListener::~BlowUpCollisionListener()
BlowUpCollisionListener::Collision(BodyPair*, Array<ContactPoint>&)
BlowUpCollisionListener::Collision(Character*, Entity*, ContactPoint&)
TargetingInterfaceBlowup::TargetingInterfaceBlowup(BlowUp&)
TargetingInterfaceBlowup::~TargetingInterfaceBlowup()
TargetingInterfaceBlowup::~TargetingInterfaceBlowup()
TargetingInterfaceBlowup::operator=(TargetingInterfaceBlowup const&)
TargetingInterfaceBlowup::GetBlowup() const
TargetingInterfaceBlowup::GetTargetName() const
TargetingInterfaceBlowup::GetGameType()
TargetingInterfaceBlowup::GetTargetPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceBlowup::GetTargetMom(VuVec&, TARGETING_TYPE)
TargetingInterfaceBlowup::GetRadius() const
TargetingInterfaceBlowup::HandleBoltHit(Bolt*)
TargetingInterfaceBlowup::CanBeHit(BeenHit const&) const
TargetingInterfaceBlowup::TargetPosDoLOSCheck(NUVEC&, int&)
TargetingInterfaceBlowup::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*)
TargetingInterfaceBlowup::IsTargetStillValid()
TargetingInterfaceBlowup::GetActive()
GizmoInterface::GetInterfaceType() const
GizmoInterface::Teleport(VuMtx const&, unsigned char)
TargetingInterfaceBlowup::GetThrowingGlow()
TargetingInterfaceBlowup::BestToPunchIfPossible() const
GizmoInterface::GizmoInterface(Gizmo&)
GizmoInterface::~GizmoInterface()
GizmoInterface::~GizmoInterface()
GizmoInterface::GetObjectEdClass() const
GizmoInterface::operator=(GizmoInterface const&)
GizmoInterface::IsGizmo() const
GizmoInterface::GetGizmo() const
GizmoInterface::GetTargetName() const
GizmoInterface::GetGameType()
GizmoInterface::GetLevelContainer() const
GizmoInterface::GetPos(VuVec&, int) const
GizmoInterface::GetIconPos(VuVec&, int)
GizmoInterface::GetTargetPos(VuVec&, TARGETING_TYPE, int)
GizmoInterface::GetMtx(VuMtx&, int)
GizmoInterface::GetTargetMom(VuVec&, TARGETING_TYPE)
GizmoInterface::GetRadius() const
GizmoInterface::GetRotY()
GizmoInterface::GetTargetYRot()
GizmoInterface::HasTerrain()
GizmoInterface::DoesEntityMatchTarget(Entity*)
GizmoInterface::HandleBoltHit(Bolt*)
GizmoInterface::TargetPosDoLOSCheck(NUVEC&, int&)
GizmoInterface::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*)
GizmoInterface::LOS_GetPoint(NUVEC&, WORLDINFO*&, TARGETING_TYPE, int) const
GizmoInterface::IsTargetStillValid()
GizmoInterface::GetActive()
GizmoInterface::IsOnScreen()
GizmoInterface::IgnoreTerrainWhenThrowTarget() const
GizmoInterface::GetTargetFloorPos(VuVec&, TARGETING_TYPE, int)
GizmoInterface::SetCurrentPosition(VuVec&) const
GizmoInterface::DriveToMtx(VuMtx&, float)
GizmoInterface::GetCurrentPosition(VuVec&)
GizmoInterface::GetAddOns() const
GizmoInterface::SetupLegoItemAddPart(ADDPART&, GizItem&, int)
GizmoInterface::SetMtx(VuMtx&, int)
GizmoInterface::SetTransformExceptPhysics(VuMtx&, int)
GizmoInterface::DrivePhysicsToTransform(VuMtx const&, bool, bool)
TargetingInterfaceGrapple::TargetingInterfaceGrapple(GizmoGrapple&)
TargetingInterfaceGrapple::~TargetingInterfaceGrapple()
TargetingInterfaceGrapple::~TargetingInterfaceGrapple()
TargetingInterfaceGrapple::operator=(TargetingInterfaceGrapple const&)
TargetingInterfaceGrapple::GetGrapple()
TargetingInterfaceGrapple::GetGrapple() const
TargetingInterfaceGrapple::GetTargetName() const
TargetingInterfaceGrapple::GetGameType()
TargetingInterfaceGrapple::GetRadiusCheck(VuVec&, float)
TargetingInterfaceGrapple::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*)
TargetingInterfaceGrapple::GetCurrentPosition(VuVec&)
TargetingInterfaceGrapple::ShouldAddBoomerangTarget(bool&, int, MechCharacter*) const
BoltTypeID::GetDefault()
LegoBoltsManager::LegoBoltsManager()
LegoBoltsManager::LegoBoltsManager(MechHelper&)
LegoBoltsManager::~LegoBoltsManager()
LegoBoltsManager::~LegoBoltsManager()
LegoBoltsManager::Reset()
LegoBoltsManager::DestroyBolt(Bolt*)
LegoBoltsManager::OnExitLevel(LegoLevelContainer&)
LegoBoltsManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
Bolt::SetOwner(MechObjectInterface&)
LegoBoltsManager::NotifyCreated(Bolt&)
LegoBoltsManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
LegoBoltsManager::NotifyDestroyed(Bolt&)
LegoBolts::NotifyPartCreated(PART&) const
LegoBoltsManager::NotifyPartCreated(PART&)
CMList<PART*>::Append(PART* const&, CMList<PART*>::ListLink*)
LegoBolts::NotifyPartDestroyed(PART&) const
LegoBoltsManager::NotifyPartDestroyed(PART&)
LegoBoltsManager::GetNumObjects(void*)
LegoBoltsManager::GetNextObject(void*, void*)
LegoBolts::LegoBolts()
LegoBolts::~LegoBolts()
ClassTable<BoltType>::~ClassTable()
LegoPointerHandleTable<BoltType*, signed char, BoltTypeID>::~LegoPointerHandleTable()
LegoBolts::~LegoBolts()
LegoBolts::Init()
LegoBolts::AddManagersForLevel(LegoLevelContainer&)
LegoBolts::RemoveManagersForLevel(LegoLevelContainer&)
LegoBolts::OnEnterLevel(LegoLevelContainer&)
LegoBolts::OnExitLevel(LegoLevelContainer&)
LegoBolts::CreateBoltType(char*)
LegoBolts::CreateBolt(short)
Bolt::Bolt(short)
LegoBolts::TriggerAlert(MechCharacter*, NUVEC const*, bool)
LegoBolts::OnResetLevel(LegoLevelContainer&)
LegoBoltsManager::RayCastBolt(Bolt*, NUVEC*, NUVEC*, float)
LegoBolts::IsSuperFastBolt(Bolt*)
LegoBoltsManager::BoltHitGameObject(Bolt*, MechCharacter*, NUVEC*, int)
LegoBoltsManager::OrientateBolt(Bolt*)
LegoBolts::OnHitVehicle(Bolt&, ApiVehicle&)
LegoBoltsManager::BoltHitPlatform(Bolt*)
Bolt::PlayHitSfx()
Bolt::GetSpecialHit() const
Bolt::GetGizmoHit() const
LegoBoltsManager::AddDeflectedBolt(Bolt*, NUVEC*, NUVEC*)
LegoBolts::NotifyEntityRemoved(Entity&)
LegoBoltsManager::NotifyEntityDestroyed(Entity&)
LegoBoltsManager::BoltHitGameObjectLocal(Bolt*, MechCharacter*, NUVEC*, int, int)
LegoBoltsManager::BoltCheckHitGameObject(Bolt*, MechCharacter*, NUVEC*, NUVEC*, NUVEC*, float, bool)
LegoBolts::BoltShouldBeBlocked(Bolt*, MechCharacter*, int, int, bool)
LegoBolts::BoltShouldBeDeflected(Bolt*, MechCharacter*, int)
LegoBolts::BoltShouldPerfectDeflect(Bolt*, MechCharacter*, int, int)
Bolt::PlayHitGameObjectSfx()
LegoBolts::TriggerDebrisWithArray(Bolt*, NUVEC*, int, NUVEC const*)
LegoBoltsManager::AddNewBolt(MechObjectInterface*, NUVEC*, NUMTX*, BoltTypeID const&, int, unsigned char, MechObjectData*)
LegoBolts::BoltWasAimedAtGameObject(Bolt*, MechCharacter*)
LegoBolts::BoltHitGameObject(Bolt*, MechCharacter*, NUVEC*, int)
Bolt::GetManager() const
LegoBolts::BoltCheckHitGameObjects(Bolt*, NUVEC*, NUVEC*, NUVEC*, float)
LegoBoltsManager::BoltCheckHitGameObjects(Bolt*, NUVEC*, NUVEC*, NUVEC*, float)
LegoBolts::BoltInitModifyFlags(Bolt&)
LegoBoltsManager::BoltInitLocal(Bolt*, MechCharacter*, NUVEC*, NUMTX*, BoltTypeID const&, int, MechObjectData*)
Bolt::GetGadgetHit() const
Bolt::OnHitGizmo()
LegoBoltsManager::BoltHasHitParts(Bolt*, NUVEC*, NUVEC*, NUVEC*, float, int)
LegoBoltsManager::GetHitPartMode(Bolt*)
LegoBoltsManager::EndBolt(Bolt*, bool, bool)
LegoBolts::AddNewBolt(MechCharacter*, VuVec&, VuVec&, BoltTypeID const&, int, MechObjectData*)
LegoBolts::AddNewBolt(MechCharacter*, NUVEC*, NUMTX*, BoltTypeID const&, int, MechObjectData*)
LegoBolts::AddNewBolt(LevelContainer*, NUVEC*, NUMTX*, BoltTypeID const&, int, MechObjectData*)
LegoBolts::AddNewBoltInterface(MechObjectInterface*, NUVEC*, NUMTX*, BoltTypeID const&, int, MechObjectData*)
LegoBoltsManager::NotifyPreInit(Bolt&)
LegoBoltsManager::BoltInit(Bolt*, MechCharacter*, NUVEC*, NUMTX*, BoltTypeID const&, int, MechObjectData*)
LegoBoltsManager::NotifyInitialised(Bolt&)
LegoBoltsManager::Reflect(NUVEC*, NUVEC*, NUVEC*)
LegoBolts::AddDeflectedBolt(Bolt*, NUVEC*, NUVEC*)
Bolt::GetHostWorldInfo() const
Bolt::AddDecal(LegoLevelContainer*)
TurnOffGodRaysOnNonPlayerControlledBolts(VfxThing*, Bolt*, VfxHandle&)
LegoBoltsManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoBoltsManager::SeekTarget(Bolt*, float)
Bolt::GetHostLevelContainer() const
LegoBoltsManager::GenerateBoltMatrix(Bolt*, VuMtx&)
LegoBolts::FindIncomingBolt(MechCharacter*, bool, bool)
LegoBoltsManager::FindIncomingBolt(MechCharacter*, bool, bool) const
LegoBolts::FindBolt(LevelContainer const&, BoltTypeID const&, NUVEC*, MechCharacter*, unsigned long)
LegoBoltsManager::FindBolt(BoltTypeID const&, NUVEC*, MechCharacter*, unsigned long) const
LegoBoltsManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoBoltsManager::SimpleRender()
LegoBoltsManager::DetonateBolt(Bolt*)
LegoBolts::EndBolt(Bolt*, bool)
LegoBolts::IsEnemyBolt(Bolt*, MechCharacter*)
LegoBolts::FindTypeByName(char const*) const
LegoBolts::FindTypeIDByName(char const*) const
LegoBolts::FindTypeIDByName(HashedKey&) const
LegoBolts::BoltHitParts(Bolt*, NUVEC*, NUVEC*, NUVEC*, float, int, bool)
LegoBolts::TriggerDebris(Bolt*)
LegoBolts::GetBoltDamage(BeenHit const&, MechObjectInterface const&) const
BoltTypeID::GetBoltType() const
LegoBolts::ResetCharacterBoltTypes()
LegoBolts::FindTypeIDByCreature(MechCharacter*) const
LegoBolts_GetCurrentParseBolt()
LegoBolts::RegisterTypeClass(char const*, void* (*)(), bool)
LegoBolts::ParseBoltTypes(char const*)
LegoBolts::RequestSfxForLevel(LevelContainer&)
LegoBolts::InvalidateTarget(LevelContainer const&, MechObjectInterface*)
LegoBoltsManager::InvalidateTarget(MechObjectInterface*)
BoltType::SetDefaultTargetAngles(unsigned short, unsigned short, unsigned short)
BoltType::GetRandBoltAction(BoltType*)
BoltType::BoltType()
BoltType::~BoltType()
BoltType::~BoltType()
LegoBolts::InvalidateOwner(MechCharacter*)
LegoBoltsManager::InvalidateOwner(MechCharacter*)
LegoBolts::ForEachBolt(LegoLevelContainer const&, bool (*)(Bolt*, void*), void*)
LegoBoltsManager::ForEachBolt(bool (*)(Bolt*, void*), void*)
LegoBolts::FindDefaultDecal()
LegoBolts::IsSuperFastBolt(BoltType*)
LegoBoltsManager::RegisterProcessing()
LegoBoltsManager::RegisterRendering()
Bolt::~Bolt()
Bolt::~Bolt()
Bolt::GetMechObjectInterface()
Bolt::GetGameObjectHit() const
LegoBolts::ShouldIgnoreVehicles(BoltTypeID)
LegoBolts::ShouldCauseDismount(Bolt&, MechRidingData&)
LegoBolts::GetConfigKeywords()
LegoBoltsHelper::~LegoBoltsHelper()
LegoBoltsHelper::SetObjectGuid(void*, int)
LegoBoltsHelper::GetObjectGuid(void*)
LegoBoltsHelper::Initialise()
WeakReferable::~WeakReferable()
WeakReferable::~WeakReferable()
BoltCustomCollector::SetWorldHitData(float, Geom const*, VuVec const&, VuVec const&)
BoltCustomCollector::~BoltCustomCollector()
BoltTypesParser::ParseClass(nufpar_s*)
BoltTypesParser::ParseName(nufpar_s*)
LegoPointerHandleTable<BoltType*, signed char, BoltTypeID>::~LegoPointerHandleTable()
LegoHandleTable<BoltType*, signed char, BoltTypeID>::~LegoHandleTable()
LegoHandleTable<BoltType*, signed char, BoltTypeID>::~LegoHandleTable()
ClassTable<BoltType>::~ClassTable()
TargetingInterfaceBolt::TargetingInterfaceBolt(Bolt&)
TargetingInterfaceBolt::~TargetingInterfaceBolt()
TargetingInterfaceBolt::~TargetingInterfaceBolt()
TargetingInterfaceBolt::operator=(TargetingInterfaceBolt const&)
TargetingInterfaceBolt::GetObjectEdClass() const
TargetingInterfaceBolt::GetLevelContainer() const
TargetingInterfaceBolt::GetBolt()
TargetingInterfaceBolt::GetTargetName() const
TargetingInterfaceBolt::GetGameType()
TargetingInterfaceBolt::GetPos(VuVec&, int) const
TargetingInterfaceBolt::GetRadius() const
TargetingInterfaceBolt::GetTargetYRot()
TargetingInterfaceBolt::GetTargetPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceBolt::GetMtx(VuMtx&, int)
TargetingInterfaceBolt::GetTargetFloorPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceBolt::GetTargetMom(VuVec&, TARGETING_TYPE)
TargetingInterfaceBolt::GetTargetCursorPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceBolt::GetLevelContainer()
TargetingInterfaceBolt::GetInterfaceType() const
LegoCharacters::LegoCharacters()
LegoCharacters::CreateIconMaterial()
LegoCharacters::OnLoadGame(int, void (*)(MechCharacter*))
LegoCharacters::ShutDown()
LegoCharacters::GetCharDefFile(int) const
LegoCharacters::GetCharDefResourceHndl(int) const
LegoCharacters::GetCharDefFileByName(char const*) const
LegoCharacters::GetCDataFromName(char const*) const
LegoCharacters::GetCharacterModel(int, int) const
LegoCharacters::IsCharacterLoaded(int, int) const
LegoCharacters::FindCharacterModel(bool (*)(CharDefGameData const&, CHARACTERDATA const&, void*), void*, int)
LegoCharacters::DoForEachCharacterModel(void (*)(CharDefGameData const&, CHARACTERDATA const&, void*), void*, int)
LegoCharacters::GetCharacterModels(CMList<CharDefGameData*>&, int)
LegoCharacters::ExtraCharInstCreate(GameObject&)
LegoCharacters::ExtraCharInstRelease(GameObject&)
LegoCharacters::UnloadingCharacterData(CharDefGameData*)
LegoCharacters::FindCharacterTexture(int, LegoCharacters::IconDrawType) const
LegoCharacters::DrawCharacterIcon(int, VuMtx const&, float, LegoCharacters::IconDrawType)
LegoCharacters::DrawCharacterIcon(int, VuVec const&, float, float, LegoCharacters::IconDrawType)
LegoCharacters::GetCharacterDef(int, int) const
CHARACTERDATA::CHARACTERDATA(CharDefFile const&, int)
CHARACTERDATA::~CHARACTERDATA()
CHARACTERDATA::~CHARACTERDATA()
CHARACTERDATA::GetIconFilePath(char*, int, bool) const
CHARACTERDATA::GetFrom(CharDefGameData const&)
CHARACTERDATA::GetFrom(CharDef const&)
GAMECHARACTERDATA::GetFrom(CharDefGameData const&)
CHARACTERDATA::GetFrom(MechVehicle const&)
CHARACTERDATA::GetFrom(MechCharacter const&)
CHARACTERDATA::GetFrom(MechObjectInterface&)
GAMECHARACTERDATA::GetFrom(MechVehicle const&)
GAMECHARACTERDATA::GetFrom(MechCharacter const&)
GAMECHARACTERDATA::GetFrom(MechObjectInterface&)
CHARACTERDATA::IsVehicle() const
CHARACTERDATA::AddAbility(MechAbilityInit const&)
CHARACTERDATA::SuppressAbility(MechAbilityInit const&)
CHARACTERDATA::RequestAbilityAddOnResources(ResourceHndlList&) const
CHARACTERDATA::CalculateAbilityFlags(int, MechAbilityFlags&) const
CHARACTERDATA::GetAbilitiesToAddAndSuppress() const
CHARACTERDATA::GetUnsetMechAbilitiesToAddAndSuppressFlags()
MechAbilitiesToAddAndSuppressFlags::~MechAbilitiesToAddAndSuppressFlags()
CHARACTERDATA::FindAbility(MechAbilityHandle const&, int) const
CHARACTERDATA::FindAbilityInit(MechAbilityHandle const&, int, MechAbilityInit&) const
CHARACTERDATA::HasAnyOfAbilityFlags(MechAbilityFlags const&, int, MechAbilityFlags&) const
LegoCharacters::LoadCharacters(LegoCharactersLoadInfo const&, bool volatile*)
LegoCharacters::LoadCharacters_Internal(LegoCharactersLoadInfo const&)
LegoCharacters::ExtraCharacterFixUpAfterConfig()
LegoCharacters::ParseAbility(nufpar_s*)
LegoCharacters::ParseAddOn(nufpar_s*)
LegoCharacters::SetupCharacterData()
LegoCharacters::GetCIDFromName(char const*) const
LegoCharacters::GetNameFromCID(int) const
LegoCharacters::GetCornwallNameFromCID(int) const
LegoCharacters::CreateCData(CharDefFile const&, int)
LegoCharacters::GetGameParseTable() const
LegoCharacters::GetVariantFixUpTable()
LegoCharactersLoadInfo::LegoCharactersLoadInfo(LegoCharactersLoadInfo::LoadDelayInfo, APICHARACTERMODELLIST*, ResourceHndlList&, int, CharAnimSetFileList const*, unsigned char)
LegoCharactersLoadInfo::~LegoCharactersLoadInfo()
LegoCharacters::~LegoCharacters()
LegoCharacters::~LegoCharacters()
LegoCharacters::AdjustChosenPlayerList(short*, int, LevelContainer const&)
LegoCharacters::OnCharacterCollected(int)
LegoCharacters::OnCharacterUnlocked(int)
LegoCharacters::CreateCustomCollections()
LegoCharacters::GetCharFixUpTable()
MechAbilitiesToAddAndSuppressFlags::~MechAbilitiesToAddAndSuppressFlags()
MechAbilitiesToAddAndSuppressFlags::GetAbilitiesToAdd() const
MechAbilitiesToAddAndSuppressFlags::GetAbilitiesToSuppress() const
MechAbilitiesToAddAndSuppressFlags::GetAbilitiesListToAdd() const
MechAbilitiesToAddAndSuppressFlags::GetAbilitiesListToSuppress() const
LegoComplexGizmos::LegoComplexGizmos()
LegoComplexGizmos::CreateGizmoManager()
non-virtual thunk to LegoComplexGizmos::CreateGizmoManager()
LegoComplexGizmos::CreateHelper()
ComplexGizmoManager::DestroyFlow()
ComplexGizmoManager::DestroyOutputLists()
CMList<ComplexOutput*>::DeleteAll()
ComplexGizmoManager::CreateTemplate()
CMList<ComplexTemplate*>::Append(ComplexTemplate* const&, CMList<ComplexTemplate*>::ListLink*)
ComplexGizmoManager::DestroyTemplate(ComplexTemplate*)
ComplexGizmoManager::FindTemplate(char*)
ComplexGizmo::ComplexGizmo()
ComplexGizmo::~ComplexGizmo()
non-virtual thunk to ComplexGizmo::~ComplexGizmo()
ComplexGizmo::~ComplexGizmo()
non-virtual thunk to ComplexGizmo::~ComplexGizmo()
ComplexGizmo::GetClass() const
ComplexGizmo::GetNumOutputs()
ComplexGizmo::GetOutput(int, int)
ComplexGizmo::GetOutputName(int)
ComplexGizmo::Activate(bool)
ComplexGizmo::AcquireSpecials()
ComplexGizmo::ForAllSpecials(void (*)(Gizmo&, Gizmo&, LegoSpecial&, void*), void*)
ComplexGizmo::FindJointByName(char const*) const
ComplexGizmo::GetFirstObstacleFromComplexGizmo(unsigned int, unsigned int)
ComplexGizmo::SetVisibility(int)
ComplexGizmo::SetGameMtx(NUMTX&)
ComplexTemplate::GetBuilderOrigin(NUVEC*)
ComplexGizmo::SetGamePos(NUVEC&)
ComplexGizmo::JumpToComplete()
ComplexGizmo::SetAIAvoid(bool)
ComplexGizmo::GetMechObjectInterface()
ComplexGizmo::ResetAutoClippingFlag()
ComplexGizmo::Reset()
ComplexGizmoManager::AllocateProgressData(WORLDINFO*)
ComplexGizmoManager::ClearProgress(WORLDINFO*, void*)
ComplexGizmoManager::StoreProgress(WORLDINFO*, void*)
ComplexGizmoManager::Reset(WORLDINFO*, void*)
ComplexGizmo::LoadEx(WORLDINFO*, int)
ComplexGizmo::LoadInstanceDataEx(WORLDINFO*, int)
ComplexGizmo::SaveInstanceDataEx(WORLDINFO*)
ComplexGizmo::Hide(unsigned char, bool)
ComplexGizmo::HideLegoSpecials(unsigned char, bool)
ComplexGizmo::SetRayCastable(int)
ComplexGizmo::SetDynamic(bool)
ComplexGizmo::SetStoreMatrixProgress()
ComplexGizmo::LegoSpecialPropertyCount(int)
ComplexGizmo::ApplyDrawDistance(unsigned short, bool)
ComplexGizmo::SetGizmoFlickerOff(float, float, float, float)
ComplexGizmo::SetLightingGlow(NuColour const&)
ComplexGizmo::SetAlpha(float)
ComplexGizmo::GetAlpha()
ComplexGizmo::InstanceMovedEx()
ComplexGizmo::IsToggleable()
ComplexGizmo::GetToggleState()
ComplexGizmo::SetToggleState(int)
ComplexGizmo::ToggleToggleState()
ComplexGizmoManager::RegisterProcessing()
ComplexGizmoManager::HideClippedGizmos()
ComplexGizmoManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ComplexGizmoManager::LateUpdate(float)
ComplexGizmo::BeenBlownUp(bool)
ComplexGizmoManager::Draw(float, ClassManager::eRenderingPriority)
ComplexGizmoManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
ComplexGizmoManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
ComplexTemplate::Render(WORLDINFO&, NUVEC*, unsigned short, unsigned short, unsigned short, int, int, int)
ComplexGizmoManager::BuilderDrawPlacedCreatures(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, int)
ComplexTemplate::BuilderDrawPlacedCreatures(WORLDINFO*, NUVEC*, int, int, int, int)
ComplexGizmoManager::Load(WORLDINFO*, int, int)
ComplexGizmoManager::EdSave(WORLDINFO*, int)
ComplexGizmoSys_FixUpGizmos(GIZMOSYS*, GIZFLOW*)
ComplexTemplate::ResetOutputList()
ComplexGizmo::CreateGizmosAndFlow(WORLDINFO*, int*)
GizmoListItem::~GizmoListItem()
CMList<ComplexOutput*>::Append(ComplexOutput* const&, CMList<ComplexOutput*>::ListLink*)
ComplexGizmo::FindInstance(Gizmo*)
ComplexGizmo::FindInstanceByName(char const*)
ComplexGizmo::FindFirstInstanceWithType(IGizmoType const&, bool)
ComplexGizmo::FindFlowInterfaceByName(char const*)
ComplexGizmoSys_GenerateInstancesAndFlow(WORLDINFO*, int)
ComplexGizmoSys_DestroyInstancesAndFlow(WORLDINFO*)
ComplexGizmoSys_ProcessGizFlow(GIZMOSYS*, float)
ComplexGizmoSys_StoreFlowProgress(GIZMOSYS*, GizmoProgress*)
ComplexGizmoSys_ResetGizFlow(GIZMOSYS*, GizmoProgress*)
ComplexTemplate::GizmoAlreadyInTemplate(Gizmo*)
ComplexGizmo::Blowup()
ComplexGizmo::ActivateAllContainingBlowups(bool)
ComplexGizmo::GetFirstConstituentBlowup()
ComplexGizmo_BeenBlownUp(Gizmo*)
ComplexGizmoSys_FindGizmoInComplexGizmo(GIZMOSYS*, char*, char*)
ComplexGizmoSys_FindMechFlowInterfaceInComplexGizmo(GIZMOSYS*, char*, char*)
ComplexGizmo::AIInteract(APIOBJECT* const&, float)
non-virtual thunk to ComplexGizmo::AIInteract(APIOBJECT* const&, float)
ComplexGizmo::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to ComplexGizmo::SetupInteractFocus(Task_PathTo&, AIManager const&)
ComplexGizmo::CanInteract(APIOBJECT* const&)
non-virtual thunk to ComplexGizmo::CanInteract(APIOBJECT* const&)
ComplexGizmoManager::GizmoHasBeenDestroyed(Gizmo*)
ComplexGizmoManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
ComplexGizmoManager::DestroyGizmoEx(Gizmo*)
ComplexGizmoManager::~ComplexGizmoManager()
ComplexGizmoManager::~ComplexGizmoManager()
ComplexGizmoManager::SaveVersion()
LegoComplexGizmos::~LegoComplexGizmos()
LegoGizmoSystemBase<LegoComplexGizmos>::ShutDown()
LegoGizmoSystemBase<LegoComplexGizmos>::ShouldAddManagersForLevel(MechLevelContainer&)
ComplexGizmo::GetMechObjectInterfacePtr()
ComplexGizmoHelper::~ComplexGizmoHelper()
GizmoList::~GizmoList()
GizmoList::~GizmoList()
FLOWLINK::~FLOWLINK()
CMList<MechFlowInterface*>::Append(MechFlowInterface* const&, CMList<MechFlowInterface*>::ListLink*)
GizmoListItem::~GizmoListItem()
FLOWCONDITION_BOX::~FLOWCONDITION_BOX()
FLOWNUMBERPROCESSOR_BOX::~FLOWNUMBERPROCESSOR_BOX()
CMList<ComplexTemplate*>::DeleteAll()
ComplexTemplate::~ComplexTemplate()
CMList<ComplexTemplate*>::Delete(CMList<ComplexTemplate*>::ListLink*)
BitArray::IsAnyBitSet() const
BitArray::IsAnyBitSet(BitArray const&) const
BitArray::IsAllBitSet(BitArray const&) const
BitArray::GetNumBitsSet() const
BitArray::ClearBits(BitArray const&)
BitArray::operator&=(BitArray const&) const
BitArray::operator|=(BitArray const&)
BitArray::operator==(BitArray const&) const
LegoMemoryFileParser::LegoMemoryFileParser(char*)
LegoMemoryFileParser::~LegoMemoryFileParser()
LegoCreatures::LegoCreatures()
LegoCreatures::~LegoCreatures()
LegoCreatures::DrawGlowParaphernalia(MechCharacter*, float)
LegoCreatures::IsTooSmallForActionMusic(int)
LegoCreatures::DrawFrozenEffect(MechCharacter*)
LegoCreatures::InitPhobiaTypes()
LegoCutSceneGizmos::LegoCutSceneGizmos()
LegoCutSceneGizmos::CreateGizmoManager()
non-virtual thunk to LegoCutSceneGizmos::CreateGizmoManager()
LegoCutSceneGizmos::CreateHelper()
GizmoCutscene::GizmoCutscene()
GizmoCutscene::~GizmoCutscene()
CMList<GizCutPlaylistItem*>::DeleteAll()
non-virtual thunk to GizmoCutscene::~GizmoCutscene()
GizmoCutscene::~GizmoCutscene()
non-virtual thunk to GizmoCutscene::~GizmoCutscene()
GizmoCutscene::GetClass() const
GizmoCutsceneManager::EarlyUpdate(float)
GizmoCutscene::EarlyUpdate(float)
GizmoCutscene::OnDestroyCutsceneInstance(CutsceneInstance const&)
GizmoCutscene::ProcessPlaylist()
GizmoCutsceneManager::OnDestroyCutsceneInstance(CutsceneInstance const&)
GizmoCutscene::SetDoInGameRender(bool)
GizmoCutscene::SetAllowControlGameCamera(bool)
GizmoCutscene::RemovePlaylistItems(GizCutPlaylistItem::PlaybackType)
GizmoCutscene::SetNextClipToPlay(unsigned int, int, GizCutPlaylistItem::PlaybackType)
CMList<GizCutPlaylistItem*>::Append(GizCutPlaylistItem* const&, CMList<GizCutPlaylistItem*>::ListLink*)
GizmoCutscene::SetNextClipToPlay(unsigned int, float, GizCutPlaylistItem::PlaybackType)
GizmoCutscene::SortClips_CutListOrder()
CMList<CutsceneSeedInfo const*>::Sort(int (*)(void const*, void const*))
GizmoCutscene::UpdateEvents()
GizCutsceneEvent::Update(unsigned int, CutsceneInstance const&)
GizmoCutscene::StopPlayingCutscene(bool)
GizmoCutscene::SyncCutsceneMatrix()
GizmoCutsceneManager::UsesCutscene(CutsceneSeedInfo const&) const
GizmoCutsceneManager::AllocateProgressData(WORLDINFO*)
GizmoCutsceneManager::StoreProgress(WORLDINFO*, void*)
GizmoCutscene::GetPlayingClipFrame() const
GizmoCutscene::GetEventsProgress() const
GizmoCutscene::SetProgress(GizmoProgress*, int)
GizmoCutscene::SetEventsProgress(unsigned char, char)
GizmoCutscene::Activate(bool)
GizmoCutscene::Reset()
GizmoCutsceneManager::Reset(WORLDINFO*, void*)
GizmoCutscene::GetCameraInfo(VuMtx&, float&, float&, int) const
GizmoCutscene::SetGameMtx(NUMTX&)
GizmoCutscene::LoadEx(WORLDINFO*, int)
GizmoCutscene::ClearClipsList()
GizmoCutscene::GetStatusString(char*, int) const
GizmoCutscene::GetErrorString(char*, int) const
GizmoCutscene::GetNumOutputs()
GizmoCutscene::FindClipIdByNameEnd(char const*) const
GizmoCutscene::GetClipId(CutsceneSeedInfo const&) const
GizmoCutscene::RemoveEventsUsing(CutsceneSeedInfo const&)
GizmoCutsceneManager::~GizmoCutsceneManager()
LegoGizmoManager::ClearProgress(WORLDINFO*, void*)
GizmoCutsceneManager::SaveVersion()
GizmoCutsceneManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
LegoCutSceneGizmos::~LegoCutSceneGizmos()
LegoGizmoSystemBase<LegoCutSceneGizmos>::ShutDown()
LegoGizmoSystemBase<LegoCutSceneGizmos>::ShouldAddManagersForLevel(MechLevelContainer&)
GizmoCutscene::SetPos(NUVEC*)
GizmoCutscene::GetOutput(int, int)
GizmoCutscene::GetOutputName(int)
CutSceneGizmoHelper::~CutSceneGizmoHelper()
CMList<CutsceneSeedInfo const*>::Append(CutsceneSeedInfo const* const&, CMList<CutsceneSeedInfo const*>::ListLink*)
LegoCutscenePlayer::WriteInfoToFileCSV(char const*) const
LegoCutscenePlayer::NotifyCutsceneSystemInitialized()
LegoCutscenePlayer::CalculateNumClips(bool) const
LegoCutscenePlayer::NotifyInstanceOnFirstFrame(CutsceneInstance const&)
LegoCutscenePlayer::NotifyCreateInstance(CutsceneInstance const&)
LegoCutscenePlayer::IsActive(LegoCutscenePlayer::IsActiveFlag) const
LegoClipHandle::NotifyDestroyInstance(CutsceneInstance const&)
LegoCutscenePlayer::NotifyDestroyInstance(CutsceneInstance const&, bool)
LegoClipHandle::RequestPlay(LegoLevelContainer const&, LegoClipHandle::RequestPlayMode, bool)
LegoCutscenePlayer::RequestPlayClip(LegoLevelContainer const&, LegoClipHandle const&)
LegoClipHandle::FindNext() const
LegoCutscenePlayer::FindFirstClip(bool) const
LegoCutscenePlayer::FindFirstClip(LEVELDATA const&, int&, bool) const
LegoCutscenePlayer::FindFirstClip(AREADATA const&, int&, bool) const
LegoCutscenePlayer::FindClip(int, bool) const
LegoCutscenePlayer::LegoCutscenePlayer()
LegoCutscenePlayer::EventNotify(Event&, NuEventData&)
LegoCutscenePlayer::GetNumClips(bool) const
LegoCutscenePlayer::HasClips() const
LegoCutscenePlayer::IsPlayingSequenceContaining(CutsceneSeedInfo const&) const
LegoClipHandle::GetName(char*, int) const
LegoClipHandle::GetRealName(char*, int) const
LegoClipHandle::GetLevelFileName(char*, int) const
LegoClipHandle::GetTypeName(char*, int) const
LegoCutscenePlayer::~LegoCutscenePlayer()
LegoCutscenePlayer::OnEnterLevel(LegoLevelContainer&)
NuFmvSubtitlesI::DrawSubtitles(float)
CutscenePlaylistItem::CutscenePlaylistItem(CutsceneSeedInfo const&, int, bool, CutsceneSequenceTimer*)
CutscenePlaylistItem::DisableStreamingLevelAreaManager(StreamingLevelAreaManager&)
CutscenePlaylistItem::KeepActiveStreamingLevel(StreamingLevel&)
CutscenePlaylistItem::~CutscenePlaylistItem()
CutscenePlaylistItem::~CutscenePlaylistItem()
CutsceneInstance::SetVisible(bool)
CutsceneInstance::SetupCutscenePlayerObjects() const
CutsceneInstance::GetCameraInfo(VuMtx&, float&, float&, int) const
CutsceneInstance::GetCameraResults() const
CutsceneInstance::GetNearclip() const
LegoCutscenes::LegoCutscenes()
LegoCutscenes::~LegoCutscenes()
CutsceneResourcePacketHandleList::DeleteHandles()
LegoCutscenes::~LegoCutscenes()
LegoCutscenes::EventNotify(Event&, NuEventData&)
LegoCutscenes::ParseCommandLine(int, char**)
LegoCutscenes::ValidateSeedItems() const
CutsceneSeedInfo::ValidateInfo() const
Levels_FixupContinueToCutsceneInfo()
LegoCutscenes::FindCutscene(char const*, CutsceneSeedInfo const*) const
LegoCutscenes::OnGameLoad(char const*)
LegoCutscenes::AddSeedItemsFromFile(char const*)
LegoCutscenes::FixupFlowInfo()
AttachTextToSceneObjectAddOn::StaticInit()
LegoCutscenes::ObtainCutsceneResource(CutsceneSeedInfo const&, bool)
LegoCutscenes::FindCutsceneResource(CutsceneSeedInfo const&)
LegoCutscenes::RequestDumpResourcePacket(CutsceneResourcePacket&)
CutsceneResourcePacketHandleList::FindHandle(CutsceneSeedInfo const&, bool)
CSListHeader<CutsceneResourcePacketHandle>::Delete(CutsceneResourcePacketHandle*)
CutsceneResourcePacketHandleList::AppendHandle(CutsceneResourcePacketHandle&)
CutsceneResourcePacketHandleList::DeleteHandle(CutsceneResourcePacketHandle&)
CSListHeader<CutsceneResourcePacketHandle>::Clear()
CutsceneResourcePacketHandleList::DeleteAllManuallyLoadedExceptSequence(CutsceneSeedInfo const&)
CutsceneSeedInfo::IsInSameSequenceAs(CutsceneSeedInfo const&) const
CutsceneResourcePacketHandleList::~CutsceneResourcePacketHandleList()
LegoCutscenes::RequestDynamicallyLoadCutscene_Internal(CutsceneSeedInfo const&, bool)
LegoCutscenes::RequestDynamicallyLoadCutscene(CutsceneSeedInfo const&, LegoCutscenes::DynamicallyLoadCutsceneFlag, bool)
LegoCutscenes::OnAreaDump()
LegoCutscenes::WaitToDumpAllResources()
LegoCutscenes::ProcessDumpedResources()
LegoCutscenes::GetLevelIntroCutscene(StreamingLevel const&, bool) const
LegoCutscenes::GetLevelIntroCutscene(int, bool, bool) const
CutsceneSeedInfo::GetNextLevelInSequence(bool*) const
LegoCutscenes::IsAnyCutsceneLoading()
LegoCutscenes::IsPlayingSequenceToOtherLevel(LEVELDATA const&) const
LegoCutscenesManager::RequestPlayInitialCutscene()
LegoCutscenesManager::AddPlaylistItem(CutscenePlaylistItem&)
LegoCutscenes::PlayCutscene(CutsceneSeedInfo const&, char const*, int, bool, CutsceneSequenceTimer*, bool)
CutscenePlaylist::ContainsGameStoppingCutscene() const
LegoCutscenes::GetCommonObjectNameInPool(char const*)
LegoCutscenes::AddSeedItem(CutsceneSeedInfo&)
CutsceneFileParser::InterpreterError(nufpar_s*)
LegoCutscenesManager::PauseAllCutscenes(bool, bool)
LegoCutscenes::IsOptionFlagSet(LegoCutscenes::CutsceneDebugOption) const
LegoCutscenes::SetOptionFlag(LegoCutscenes::CutsceneDebugOption, bool)
LegoCutscenes::ToggleOptionFlag(LegoCutscenes::CutsceneDebugOption)
LegoCutscenes::DoForEachSeedItem(CutsceneSeedLoopResult (*)(CutsceneSeedInfo const&, void*), void*) const
CutsceneSeedInfo::GetFirstInSequence(bool) const
LegoCutscenes::Init()
LegoCutscenes::AddManagersForLevel(MechLevelContainer&)
LegoCutscenesManager::OnLevelActivate()
LegoCutscenesManager::ProcessPlaylist()
LegoCutscenesManager::OnLevelActivateLate()
LegoCutscenesManager::RegisterProcessing()
LegoCutscenesManager::RegisterRendering()
LegoCutscenesManager::StartCutscene(CutscenePlaylistItem&, CutsceneInstance*)
LegoCutscenesManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoCutscenesManager::OnProcess(bool, LegoCutscenesManager::ProcessStage)
LegoCutscenesManager::ResetOnScreen(NURENDERSTAGE, LevelViewType, ClassManager::eRenderingPriority const&)
LegoCutscenesManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoCutscenesManager::OnRender3d()
LegoCutscenesManager::EventNotify(Event&, NuEventData&)
LegoCutscenesManager::LoadCutscenes()
LegoCutscenesManager::BuildShadowBoxes()
CutsceneInstance::ProcessCuedAudio()
LegoCutscenesManager::OnLevelDeactivate()
LegoCutscenesManager::DumpAllResources()
LegoCutscenes::GetNextLevelInSequence() const
LegoCutscenesManager::FindCutsceneInstance(instNUGCUTSCENE const&) const
LegoCutscenesManager::FindCutsceneInstance(CutsceneSeedInfo const&) const
LegoCutscenesManager::FindCutsceneInstance(char const*) const
LegoCutscenesManager::PlayCutsceneNow(CutsceneSeedInfo const&, CutsceneInstance*)
LegoCutscenes::PlayCutscene(char const*, char const*, int, bool)
LegoCutscenesManager::GetFromSeedInfo(CutsceneSeedInfo const&)
LegoCutscenesManager::IsAllreadyRequestedOrPlaying(CutsceneSeedInfo const&)
CutsceneSeedInfo::FindStreamingLevel() const
LegoCutscenesManager::ProcessAnimatorInput(bool)
LegoCutscenes::OnGeneralProcess(bool)
CutsceneSequenceTimer::GetSequenceAudioTrack() const
CutsceneSequenceTimer::GetSequenceDialogueTrack() const
CutsceneSequenceTimer::RecordCutsceneEndTime(CutsceneInstance const&)
CutsceneSequenceTimer::Update(float, bool, bool)
CutsceneInstance::UpdateBorders() const
LegoCutscenes::DrawBorders()
CutsceneInstance::IsSkippable() const
CutsceneSeedInfo::IsInTitlesCutsceneSequence() const
LegoCutscenes::AlwaysAllowSkip() const
CutsceneInstance::GetCurrentFadeInfo(CutsceneCurrentFadeInfo&) const
CutsceneSeedInfo::SortFadesByStartTime()
CutsceneInstance::DrawFade() const
CutsceneInstanceBase::DrawSubtitles()
LegoCutscenes::GetSkipPromptText(char*, int) const
LegoCutscenes::GetSkipPromptPos(float&, float&, int&, CutsceneSeedInfo const*) const
LegoCutscenes::SetAlwaysAllowSkip(bool)
LegoCutscenes::ToggleAlwaysAllowSkip()
LegoCutscenes::NotifyCutsceneStarted(LevelContainer*, CutsceneSeedInfo&)
LegoCutscenes::NotifyCutsceneFinished(LevelContainer*, CutsceneSeedInfo&)
CutsceneInstanceBase::UpdateSkipPrompt()
CutsceneInstanceBase::CutsceneInstanceBase(LevelContainer&)
AttachTextToSceneObjectAddOn::CreateAll(LevelContainer&, AddOnList&)
CutsceneInstanceBase::~CutsceneInstanceBase()
CutsceneInstanceBase::~CutsceneInstanceBase()
CutsceneInstanceBase::Initialise()
CutsceneInstanceBase::OnProcess()
CutsceneInstanceBase::ResetOnScreen()
CutsceneInstanceBase::OnRender()
CutsceneInstanceBase::DrawSkipPrompt(bool) const
CutsceneInstanceBase::GetSkipPromptAlpha() const
CutsceneInstance::DrawHud() const
LegoCutscenes::DrawHudItem(char const*, float&) const
LegoCutscenes::OnRenderPanel()
LegoCutscenesManager::OnRenderPanel(float&)
CutsceneInstance::SetupRigidCallbacks()
CutsceneInstance::FindRigidCallback(instNUGCUTRIGID const&) const
CutsceneInstance::AddRigidCallback(CutsceneRigidCallbackBase&)
CutsceneInstance::FindRigidObjects(char const*, CMList<instNUGCUTRIGID*>&) const
CMList<instNUGCUTRIGID*>::Append(instNUGCUTRIGID* const&, CMList<instNUGCUTRIGID*>::ListLink*)
LegoCutscenes::GetNearClip() const
LegoCutscenes::GetFarClip() const
CutsceneInstance::GetFarclip() const
LegoCutscenes::SetupNearClip(NuCamera*) const
LegoCutscenes::SetupFarClip(NuCamera*) const
LegoCutscenes::GetRequiredLSVScale(float&) const
LegoCutscenes::GetShadowFocusLocatorPos(NUVEC&) const
LegoCutscenesManager::StartFMV(CutscenePlaylistItem const&)
CutsceneSeedInfo::HasPlayed() const
CutsceneSeedInfo::SetSequencePlayed() const
LegoCutscenesManager::SetProcessFMV(bool)
CutsceneSeedInfo::GetLastInSequence() const
LegoCutscenes::OnPlayCutsceneAsFmv(CutscenePlaylistItem const&)
LegoCutscenesManager::ProcessStepThrough()
LegoCutscenesManager::OnProcessFMV()
CutsceneInstance::HackDeactivateSubLevel()
CutsceneInstance::GetFrom(instNUGCUTSCENE const&)
CutsceneInstance::GetContainer() const
CutsceneInstance::GetErrorString(char*, int) const
CutsceneInstance::GetWarningString(char*, int) const
CutsceneInstance::RequestSkip()
CutsceneInstanceBase::ProcessSkipButton()
CutsceneInstance::ProcessSfx() const
LegoCutscenes::TitlesPlayFMV(eTRAILER)
CutsceneInstance::OnFinishTitlesCutscene_ProcessGameFlow()
CutsceneInstance::OnFinish_ProcessGameFlow()
CutsceneSeedInfo::IsSequenceWithLevelChange() const
CutsceneInstance::OnFinish_ProcessAudio()
CutsceneInstance::OnFinish_ProcessFade()
CutsceneInstance::ProcessAudio() const
CutsceneInstance::ProcessKrawlieVisibility()
CutsceneInstance::SetupKrawlieVisibility(bool) const
CutsceneInstance::SetupSequenceTimer()
CutsceneInstance::OnProcess()
CutsceneInstance::SetupFadeSystem()
CutsceneInstance::GetCutsceneSequenceTimer()
CutsceneInstance::StoreSpecialObjectStates(NuCutSceneRaw const&)
CutsceneInstance::CutsceneInstance(LegoCutscenesManager&, CutscenePlaylistItem&, CutsceneInstance*)
CutsceneSeedInfo::ShouldDumpOnComplete() const
CutsceneResourcePacketHandle::operator=(CutsceneResourcePacketHandle const&)
NuList<NuFrameworkResourceHndl>::operator=(NuList<NuFrameworkResourceHndl> const&)
CutsceneResourcePacket::FixupResources(LevelContainer const&, NuList<NuFrameworkResourceHndl>&) const
CutsceneInstance::SetupAudio()
CutsceneInstance::SetupGizmoVisibility(bool, LevelContainer&) const
CutsceneInstance::SetupRopesVisibility(bool, LevelContainer&) const
CutsceneInstance::SetupSpecialsVisibility(bool, LevelContainer&) const
CutsceneInstance::SetupGadgetVisibility(bool, LevelContainer&) const
CutsceneInstanceBase::SetupMotionBlur() const
CutsceneSeedInfo::SetPlayed() const
LegoCutscenes::OnCreateCutsceneInstance(CutsceneInstance&)
CutsceneInstance::~CutsceneInstance()
LegoCutscenes::OnDestroyCutsceneInstance(CutsceneInstance const&)
CSListHeader<CutsceneSpecialObjectState>::Clear()
CutsceneInstance::~CutsceneInstance()
LegoCutscenesManager::DestroyCutsceneInstanceStoppingGameplay()
CutsceneInstance_GizmoUnhideByRefObjectHashedName(Gizmo&, void*)
LevelResourceIterator::Current()
LevelResourceIterator::Next()
CutsceneInstance::ResetParticles() const
CutsceneInstance::ResetCharacters()
CutsceneSeedInfo::IsNextCutsceneInSameLevel() const
LegoCutscenes::IsControllingCamera() const
LegoCutscenes::IsGizFlowProcessAllowed() const
LegoCutscenes::IsStoppingGameplay(CutsceneInstance**) const
LegoCutscenes::IsPauseGameAllowed() const
LegoCutscenes::IsFirstCuedGameStoppingCutsceneInLevel(StreamingLevel const&) const
CutsceneSeedInfo::IsInLevel(StreamingLevel const&) const
LegoCutscenes::IsAnyGameStoppingCutsceneCued() const
LegoCutscenes::IsLevelContainingCutscenes(LEVELDATA const&) const
LegoCutscenes::ShouldAddManagersForLevel(MechLevelContainer&)
LegoCutscenes::ClearGameStoppingCutscene()
CommonScene::CommonScene(LevelContainer&, char const*, CommonScene::CommonSceneType)
CommonScene::~CommonScene()
CutsceneSeedInfo::CutsceneFlags::CutsceneFlags()
CutsceneSeedInfo::ShouldPreloadWithLevel(WORLDINFO*) const
CutsceneSeedInfo::HasPlayedInArea() const
CutsceneSeedInfo::HasFadeAtStart(CutFade const**) const
CutsceneSeedInfo::RemapCharacterName(char const*) const
CutsceneSeedInfo::GetCharacterActionGroup(unsigned int) const
CutsceneSeedInfo::HasProblems(int*) const
CutsceneSeedInfo::GetFilePath(char*, int) const
CutsceneSeedInfo::IsSequenceWithSingleLevelThatGoesToOtherLevel(int) const
CutsceneSeedInfo::GetPostSequenceLevel() const
CutsceneResourcePacket::CutsceneResourcePacket(CutsceneSeedInfo const&)
CutsceneResourcePacket::~CutsceneResourcePacket()
CutsceneResourcePacket::Release()
CutsceneResourcePacket::Reference(bool)
CutsceneResourcePacket::DoLoad()
CutsceneResourcePacket::DoLoad(void*)
CutsceneResourcePacket::GetLoadStatusString() const
CutsceneResourcePacket::LoadCommonObjectScenes()
CutsceneResourcePacket::LoadPreloadScenes()
CutsceneResourcePacket::LoadCharacters(NuCutSceneRaw const&)
CutsceneResourcePacket::LoadSoundEffects()
CutsceneResourcePacket::CheckForAfterEarlyColourRigids(NuCutSceneRaw&)
CutsceneResourcePacket::BuildShadowBoxes(LevelContainer*)
LegoArrayBuilder<APICHARACTERMODELLIST>::Finalise(int&, FinaliseMode)
LegoCutscenesManager::GetProcessFMV()
CutsceneFileParser::cutscene_start(nufpar_s*)
CutsceneFileParser::cutscene_end(nufpar_s*)
CutsceneFileParser::path(nufpar_s*)
CutsceneFileParser::name(nufpar_s*)
CutsceneFileParser::subfile(nufpar_s*)
CutsceneFileParser::playerFile(nufpar_s*)
CutsceneFileParser::level(nufpar_s*)
CutsceneFileParser::next_playlevel(nufpar_s*)
CutsceneFileParser::show_demo_advert(nufpar_s*)
CutsceneFileParser::next_playcutscene(nufpar_s*)
CutsceneFileParser::allow_sharing(nufpar_s*)
CutsceneFileParser::dynamicload_cutscenesequence(nufpar_s*)
CutsceneFileParser::arrival_door(nufpar_s*)
CutsceneFileParser::can_be_gizcutscene(nufpar_s*)
CutsceneFileParser::loopingaudiotrack(nufpar_s*)
CutsceneFileParser::audiotrack(nufpar_s*)
CutsceneFileParser::dialoguetrack(nufpar_s*)
CutsceneFileParser::trackbank(nufpar_s*)
CutsceneFileParser::cutsceneplayerobj(nufpar_s*)
CutsceneFileParser::stop_parts(nufpar_s*)
CutsceneFileParser::stop_debris(nufpar_s*)
CutsceneFileParser::disable_debris_type(nufpar_s*)
CutsceneFileParser::camera_blur_exposure(nufpar_s*)
CutsceneFileParser::character_blur_exposure(nufpar_s*)
CutsceneFileParser::blend_duration(nufpar_s*)
CutsceneFileParser::replace_character(nufpar_s*)
CutsceneFileParser::anim_ix(nufpar_s*)
CMList<int>::Append(int const&, CMList<int>::ListLink*)
CutsceneFileParser::after_early_colour(nufpar_s*)
CutsceneFileParser::DontDrawGizmos_GatherExceptions(nufpar_s*)
CutsceneFileParser::dont_draw_any_gizmos(nufpar_s*)
CutsceneFileParser::dont_draw_any_ropes(nufpar_s*)
CutsceneFileParser::dont_draw_gadget(nufpar_s*)
CutsceneFileParser::dont_draw_gadget_type(nufpar_s*)
CutsceneFileParser::dont_draw_any_gadgets(nufpar_s*)
CutsceneFileParser::skip_prompt(nufpar_s*)
CutsceneFileParser::blend_camera_to_gameplay(nufpar_s*)
CutsceneFileParser::draw_krawlies(nufpar_s*)
CutsceneFileParser::draw_krawlies_start(nufpar_s*)
CutsceneFileParser::draw_krawlies_stop(nufpar_s*)
CutsceneFileParser::dont_draw_gizmo(nufpar_s*)
CutsceneFileParser::dont_draw_gizmo_type(nufpar_s*)
CutsceneFileParser::dont_draw_special(nufpar_s*)
CutsceneFileParser::nearclip(nufpar_s*)
CutsceneFileParser::farclip(nufpar_s*)
CutsceneFileParser::fade_screen(nufpar_s*)
CutsceneFileParser::fade_at_start(nufpar_s*)
CutsceneFileParser::fade_at_end(nufpar_s*)
CutsceneFileParser::disable_crossfadetogameplay(nufpar_s*)
CutsceneFileParser::lsv_scale(nufpar_s*)
CutsceneFileParser::fpsec(nufpar_s*)
CutsceneFileParser::audio_end_frame(nufpar_s*)
CutsceneFileParser::in_game(nufpar_s*)
CutsceneFileParser::level_intro(nufpar_s*)
CutsceneFileParser::looping(nufpar_s*)
CutsceneFileParser::titles_cutscene(nufpar_s*)
CutsceneFileParser::disable_borders(nufpar_s*)
CutsceneFileParser::movie(nufpar_s*)
CutsceneFileParser::cutscene_player_movie(nufpar_s*)
CutsceneFileParser::common_object(nufpar_s*)
CutsceneFileParser::charitem(nufpar_s*)
CutsceneFileParser::preload_scene(nufpar_s*)
CutsceneFileParser::process_streaming_level_areas(nufpar_s*)
CutsceneFileParser::allowed_in_freeplay(nufpar_s*)
CutsceneFileParser::play_once(nufpar_s*)
CutsceneFileParser::play_always_in_area(nufpar_s*)
CutsceneFileParser::disable_rigid_callbacks(nufpar_s*)
CutsceneFileParser::name_tag(nufpar_s*)
CutsceneFileParser::play_sfx(nufpar_s*)
CutsceneFileParser::txt_file(nufpar_s*)
CutsceneFileParser::rigid_callbacks_start(nufpar_s*)
CutsceneCustomRigidCallback::AddConfigItem(char const*)
CutsceneFileParser::global_nearclip(nufpar_s*)
CutsceneFileParser::global_farclip(nufpar_s*)
CutsceneFileParser::addon(nufpar_s*)
CutsceneFileParser::_IGNORE_DEPRECATED(nufpar_s*)
AttachTextToSceneObjectAddOn::AttachTextToSceneObjectAddOn(LevelContainer&, SceneObject&, char const*)
AttachTextToSceneObjectAddOn::~AttachTextToSceneObjectAddOn()
non-virtual thunk to AttachTextToSceneObjectAddOn::~AttachTextToSceneObjectAddOn()
AttachTextToSceneObjectAddOn::~AttachTextToSceneObjectAddOn()
non-virtual thunk to AttachTextToSceneObjectAddOn::~AttachTextToSceneObjectAddOn()
AttachTextToSceneObjectAddOn::Render()
AttachTextToSceneObjectAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to AttachTextToSceneObjectAddOn::OnHook(unsigned char, HookArgs*)
CutsceneRateExternalControlAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to CutsceneRateExternalControlAddOn::OnHook(unsigned char, HookArgs*)
LevelResourceIterator::LevelResourceIterator(LevelContainer*)
CutsceneRateExternalControlAddOn::~CutsceneRateExternalControlAddOn()
CutsceneRateExternalControlAddOn::GetLevelContainer() const
non-virtual thunk to CutsceneRateExternalControlAddOn::~CutsceneRateExternalControlAddOn()
non-virtual thunk to CutsceneRateExternalControlAddOn::~CutsceneRateExternalControlAddOn()
non-virtual thunk to CutsceneRateExternalControlAddOn::GetLevelContainer() const
LegoCutscenesManager::~LegoCutscenesManager()
LegoCutscenesManager::~LegoCutscenesManager()
LegoCutscenesManager::GetManagerName() const
LegoCutscenes::CreateCustomRigidCallback(CutsceneInstance const&, instNUGCUTRIGID&)
LegoCutscenes::GetAllowedInFreeplayByDefault() const
CutsceneInstanceBase::GetCutsceneSequenceTimer()
CutsceneInstance::GetSeedInfo() const
CutsceneInstance::IsFinished() const
CutsceneInstance::GetCutsceneResourcePacket()
AttachTextToSceneObjectAddOn::GetLevelContainer() const
non-virtual thunk to AttachTextToSceneObjectAddOn::GetLevelContainer() const
LegoCutsceneEventData::~LegoCutsceneEventData()
CutscenePlayerItemRigidCallback::ConfigData::ConfigData(char const*, char const*, bool)
NuMechPtr<CutscenePlaylistItem, 8>::ManagedBase::~ManagedBase()
NuMechPtr<CutscenePlaylistItem, 8>::ManagedBase::~ManagedBase()
CMList<APICHARACTERMODELLIST*>::Append(APICHARACTERMODELLIST* const&, CMList<APICHARACTERMODELLIST*>::ListLink*)
LegoDigging::LegoDigging()
LegoDigging::CreateGizmoManager()
non-virtual thunk to LegoDigging::CreateGizmoManager()
LegoDigging::CreateHelper()
LegoDigging::OnInit()
LegoDigging::CreateDig() const
LegoDigging::OnInitPostConfig()
GizDig_ResetLOS(MechCharacter*)
GizmoDig::~GizmoDig()
non-virtual thunk to GizmoDig::~GizmoDig()
GizmoDig::~GizmoDig()
non-virtual thunk to GizmoDig::~GizmoDig()
GizmoDig::GetClass() const
GizmoDig::Init(WORLDINFO*)
GizmoDig::Reset()
GizmoDig::DigSparkles(float)
GizDig_UpdateHint(WORLDINFO*, HINT_s*)
GizmoDigManager::FindNearest(MechCharacter*, DIG_FIND_ENUM, int)
GizDig_AnimComplete(GizmoDig*)
GizDig_Complete(GizmoDig*)
GizDig_GameObjUsingdig(MechCharacter*, GizmoDig*)
GizmoDig::GetNumOutputs()
GizmoDig::GetOutput(int, int)
GizmoDig::GetOutputName(int)
GizmoDig::Activate(bool)
GizmoDig::SetVisibility(int)
GizmoDig::LoadEx(WORLDINFO*, int)
GizmoDig::GetRatioThroughNextStep() const
GizDigMul(MechCharacter*)
GizmoDig::GetFloatScoopsDone() const
GizmoDig::InstanceMovedEx()
GizmoDig::GetBuilderOrigin(NUVEC*)
GizmoDig::GetCameraTgt(NUVEC*)
GizmoDig::SetGamePos(NUVEC&)
GizmoDig::SetGameMtx(NUMTX&)
GizmoDigManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoDigManager::DestroyGizmoEx(Gizmo*)
GizmoDigManager::EarlyUpdate(float)
GizmoDigManager::LateUpdate(float)
GizmoDigManager::Draw(float, ClassManager::eRenderingPriority)
GizmoDigManager::AllocateProgressData(WORLDINFO*)
GizmoDigManager::ClearProgress(WORLDINFO*, void*)
GizmoDigManager::StoreProgress(WORLDINFO*, void*)
GizmoDigManager::Reset(WORLDINFO*, void*)
GizmoDigManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoDig::operator=(GizmoDig&)
GizmoDigManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoDigManager::PostLoad()
GizmoDigManager::RequestSfx()
GizmoDigManager::ReleaseSfx()
GizmoDigManager::SetStoreMatrixProgress(WORLDINFO*)
GizmoDigManager::GizmoHasBeenDestroyed(Gizmo*)
GizDig_CreateDig(WORLDINFO*, char*, Gizmo*)
GizDigs_FindDig(WORLDINFO*, char*)
GizDig_TotalScore(WORLDINFO*)
Dig_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Dig_MoveCode(MechCharacter*)
Search_MoveCode(MechCharacter*, int)
GizmoDig::GetGameAnimSet() const
GizmoDig::UpdateDisplay(float)
GizmoDig::LateUpdate(float)
GizmoDigManager::~GizmoDigManager()
GizmoDigManager::SaveVersion()
LegoDigging::~LegoDigging()
LegoDigging::OnDigScoop(GizmoDig&, MechCharacter&)
LegoDigging::OnDigComplete(GizmoDig&, MechCharacter&)
GizDigHelper::~GizDigHelper()
DoorNetwork::ContainsDoor(GizmoDoor const&) const
GizmoDoor::GetDoorManager() const
DoorNetworkList::GetNetworkContainingDoor(GizmoDoor const&) const
GizmoDoorManager::GizmoDoorManager()
LegoDoors::LegoDoors()
LegoDoors::GetDoorCollisionFixedName()
LegoDoors::Reset()
LegoDoors::CreateGizmoManager()
non-virtual thunk to LegoDoors::CreateGizmoManager()
LegoDoors::CreateHelper()
LegoDoors::~LegoDoors()
CMList<DoorNetwork*>::DeleteAll()
LegoDoors::~LegoDoors()
LegoDoors::InitializePerm(char const*)
CMList<DoorNetwork*>::Append(DoorNetwork* const&, CMList<DoorNetwork*>::ListLink*)
LegoDoors::InitializeLevel(WORLDINFO*)
GizmoDoorManager::Initialize(WORLDINFO*)
LegoDoors::IsDoorCollisionEntity(Entity const*)
LegoDoors::InitializeCutCamera(WORLDINFO*)
LegoDoors::SetCutCam(GizmoDoor*)
GizmoDoor::Configure()
GizmoDoor::CreatePartyAICollision()
GizmoDoor::GetLocalWidthHeight(float&, float&) const
GizmoDoor::UpdatePartyAICollisionTransform()
GizmoDoor::ActivatePartyAICollision(bool)
GizmoDoor::DestroyPartyAICollision()
GizmoDoorManager::DeactivateLevel()
GizmoDoor::LoadEx(WORLDINFO*, int)
GizmoDoor::PostLoad()
GizmoDoor::ConfigureInstance(NUVEC*)
GizmoDoor::GetCutScene() const
GizmoDoor::GetDestinationCutsceneLevel() const
GizmoDoor::GetDestinationLevel() const
DoorNetworkDoor::GetGizmoDoor(WORLDINFO*)
GizmoDoor::ComeOutOf()
GizmoDoor::ComeOutOf(MechCharacter*)
GizmoDoor::GoThrough(WORLDINFO*, MechCharacter*, int, int, int)
GizmoDoorManager::StoreCurrentParty()
GizmoDoor::AllowGamePlaySelectMenu()
GizmoDoor::SetPlayerStartToArrivalPoints()
GizmoDoor::ChangeLevel(int)
LegoDoors::EventNotify(Event&, NuEventData&)
CSListHeader<GizmoDoorCharacterPair>::Clear()
LegoDoors::NotifyCharacterNearDoor(GizmoDoor&, MechCharacter&)
LegoDoors::CanObjectUseDoors(MechCharacter*)
LegoDoors::Check()
GizmoDoor::CheckGoneThrough(MechCharacter&)
CSListHeader<GizmoDoorCharacterPair>::Delete(GizmoDoorCharacterPair*)
GizmoDoorManager::DisableDoorsByPrefix(char const*)
GizmoDoorManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoDoorManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoDoor::IsPlayer1FlagSet()
GizmoDoor::IsPlayer2FlagSet()
GizmoDoor::InstanceMovedEx()
GizmoDoor::CheckOnMat(MechCharacter*)
GizmoDoor::GetDoorMatPosition(NUVEC*, VuVec*, VuVec*) const
GizmoDoorManager::FindStartDoor() const
GizmoDoorManager::InitializePlayerStartPos()
GizmoDoorManager::FindByIndex(int, int, NUVEC*)
GizmoDoorManager::FindById(int)
GizmoDoorManager::HasDoorRelevantToStreamingTest() const
GizmoDoorManager::GetBestDoorToOtherLevel(VuVec const&, VuVec const&, float&, int&)
GizmoDoorManager::IsAnyPlayerOnAnyMat(GizmoDoor**, unsigned int)
GizmoDoor::DrawDoorMarker()
GizmoDoor::DrawEx()
GizmoDoorManager::PostLoad()
GizmoDoorManager::EdPreSave(WORLDINFO*, int)
GizmoDoorManager::GizmoHasBeenDestroyed(Gizmo*)
GizmoDoorManager::Draw(float, ClassManager::eRenderingPriority)
GizmoDoorManager::EarlyUpdate(float)
GizmoDoorManager::LateUpdate(float)
GizmoDoorManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoDoorManager::DestroyGizmoEx(Gizmo*)
LegoDoors::IsAnyPlayerOnAnyMat(WORLDINFO*, GizmoDoor**, unsigned int)
LegoDoors::FindByName(WORLDINFO*, char const*)
LegoDoors::FindNearest(WORLDINFO*, NUVEC const*)
GizmoDoorManager::FindNearest(NUVEC const*, float*)
LegoDoors::FindByIndex(WORLDINFO*, int, int, NUVEC*)
Doors_FindById(WORLDINFO*, int)
LegoDoors::InitializePlayerStartPos(WORLDINFO*)
MenuDrawGotoDoor(MENU*)
GizmoDoorManager::MenuDrawGotoDoors(MENU*)
GizmoDoor::GetOutput(int, int)
GizmoDoor::GetOutputName(int)
GizmoDoor::GetNumOutputs()
GizmoDoor::GizmoDoor()
GizmoDoor::~GizmoDoor()
non-virtual thunk to GizmoDoor::~GizmoDoor()
GizmoDoor::~GizmoDoor()
non-virtual thunk to GizmoDoor::~GizmoDoor()
GizmoDoor::GetClass() const
GizmoDoor::Reset()
GizmoDoor::Activate(bool)
GizmoDoor::ActivateRev(int, int)
GizmoDoor::Actuate()
GizmoDoor::ResetForLoop()
GizmoDoor::Cast(AIConvexLocatorLink*)
GizmoDoorManager::AllocateProgressData(WORLDINFO*)
GizmoDoorManager::ClearProgress(WORLDINFO*, void*)
GizmoDoorManager::StoreProgress(WORLDINFO*, void*)
GizmoDoorManager::Reset(WORLDINFO*, void*)
CSListHeader<DoorsMenuItem>::~CSListHeader()
MenuInitGotoDoor(MENU*)
CSListHeader<DoorsMenuItem>::Clear()
MenuExitGotoDoor(MENU*)
MenuUpdateGotoDoor(MENU*)
GizmoDoorManager::FindBySetFlag(unsigned int) const
GizmoDoorManager::FindDoorInRange(NUVEC const&)
DoorHintTrigger::Reset()
GizmoDoorManager::UpdateHint(HINT_s*)
GizmoDoorManager::CanEnterDoor()
GizmoDoorManager::ArrivalPointFindNearest(NUVEC*, float*, GizmoDoor**)
GizmoDoorManager::DoorMarkerFindNearest(NUVEC*, float*)
GizmoDoorManager::FixUp_AI(AIManager&)
GizmoDoorManager::ClearCurrentParty()
GizmoDoorManager::AddObjToPartyList(MechCharacter*)
GizmoDoorManager::WasPartyMember(short, char*)
GizmoDoorManager::EventNotify(Event&, NuEventData&)
PlayersInRangeOfContinueStoryDoor(WORLDINFO*, char*, float, float*)
DoorTeleport_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
DoorTeleport_MoveCode(MechCharacter*)
GizmoDoorManager::~GizmoDoorManager()
GizmoDoorManager::SaveVersion()
LegoDoors::OnInitializePlayerStartPos(GizmoDoorManager const&)
LegoDoors::OnAreaChange_ShouldResetDoorHistory(int, int) const
LegoDoors::ShouldIgnoreDefaultStartDoor(WORLDINFO*)
GizmoDoorHelper::~GizmoDoorHelper()
CMList<DoorNetworkDoor*>::Append(DoorNetworkDoor* const&, CMList<DoorNetworkDoor*>::ListLink*)
GizmoDoorPartyAICollisionListener::~GizmoDoorPartyAICollisionListener()
GizmoDoorPartyAICollisionListener::AllowCollision(Entity const*, Entity const*)
GizmoDoorPartyAICollisionListener::Collision(Character*, Entity*, ContactPoint&)
GizmoDoorPartyAICollisionListener::ShouldAllowCollision(Character const&)
cLegoDoorEventData::~cLegoDoorEventData()
DoorEventData::~DoorEventData()
CMList<DoorNetworkDoor*>::DeleteAll()
LegoExplosions::LegoExplosions()
LegoExplosions::Reset()
LegoExplosions::AddExplosion(WORLDINFO&, NUVEC const*, float, float, MechCharacter*, FXTypeID const&, int, int, BoltType*)
LegoExplosions::AddPhysicsSlam(WORLDINFO&, VuVec const&, float, MechCharacter*, int)
LegoExplosions::Init()
LegoExplosions::AddZapEffect(EXPLOSION&, MechCharacter&)
LegoExplosions::Update(WORLDINFO&)
LegoExplosions::UpdateExplosion(WORLDINFO&, EXPLOSION*, bool)
LegoExplosions::Draw()
EXPLOSION::GetAllObjHitObjFlags() const
AabbTreeIterator::GetNext()
LegoExplosions::Detonate(WORLDINFO&, NUVEC const*, unsigned int, float, MechCharacter*, BoltType*)
ShockWaveAttack::ShockWaveAttack(VuVec const&, float, float, float, char*, int, bool, float, float, bool, WORLDINFO*, bool)
ShockWaveAttack::~ShockWaveAttack()
ShockWaveAttack::~ShockWaveAttack()
ShockWaveAttack::Process(float)
ShockWaveAttack::DamageGameObjs()
ShockWaveAttack::Render()
ShockWaveAttack::RadialDamageGameObj(MechCharacter*, VuVec const&, float, float, int, float, float, bool)
ShockWaveAttack::DamageGameObj(MechCharacter*, VuVec const&, float, float, int, float, float, bool)
LegoExplosions::~LegoExplosions()
LegoExplosions::OnUpdate(LegoLevelContainer&, EXPLOSION*)
LegoFX::LegoFX()
LegoFX::GetDebrisID(FXTypeID const&) const
LegoFX::RegisterType(char const*)
LegoFX::Init()
LegoFX::LoadGameData()
LegoFX::LoadFXTypes(char const*)
LegoFX::EventNotify(Event&, NuEventData&)
LegoFX::CreateOneShotParticleEmitter(LevelContainer const&, FXTypeID const&, NUVEC const*, int, float, short, short)
LegoFX::CreateFiniteParticleEmitter(LevelContainer const&, int*, FXTypeID const&, NUVEC*, int)
LegoFX::CreateOneShotParticleEmitter(LevelContainer const&, FXTypeID const&, NUVEC const*, NUVEC*, int, float, NUMTX*, NUMTX*)
LegoFX::CreateOneShotParticleEmitter(LevelContainer const&, FXTypeID const&, NUVEC const*, NUVEC*, NUVEC*, int, float, NUMTX*, NUMTX*, unsigned short, char)
LegoFX::CreateParticleEmitter(LevelContainer const&, int*, FXTypeID const&, float, float, float)
LegoFX::FindType(char const*) const
LegoFX::StartParticles(WORLDINFO*)
LegoFX::StopParticles(WORLDINFO*)
LegoFX::SetEffectVisibility(WORLDINFO&, char*, int)
LegoFX::AddCameraRain(WORLDINFO*, FXTypeID const&)
LegoFX::CreateEffect(LevelContainer const&, FXTypeID const&, NUVEC const*, int, LegoFXHandle*, MechCharacter*)
LegoFX::CreateEffect(LevelContainer const&, FXTypeID const&, NUMTX const*, int, LegoFXHandle*, MechCharacter*)
LegoFX::CreateLoopingEffect(LevelContainer const&, FXTypeID const&, NUVEC const*, int, LegoFXHandle*, MechCharacter*, bool)
LegoFX::CreateLoopingEffect(LevelContainer const&, FXTypeID const&, NUMTX const*, int, LegoFXHandle*, MechCharacter*, bool, NUVEC*)
LegoFX::StopEffect(LevelContainer const&, FXTypeID const&, LegoFXHandle&, bool, NUMTX const*)
LegoFX::GetVFXID(FXTypeID const&)
LegoFX::CreateEffect(LevelContainer const&, FXTypeID const&, float, float, float, int)
LegoFX::CreateFiniteParticleEmitter(LevelContainer const&, int*, FXTypeID const&, NUVEC*, NUVEC*, NUVEC*, int)
LegoFX::CreateOneShotParticleEmitter(LevelContainer const&, FXTypeID const&, NUVEC const*, int, unsigned short, unsigned short)
LegoFX::CreateOneShotParticleEmitter(LevelContainer const&, FXTypeID const&, NUVEC const*, int, NUMTX*)
LegoFX::CreateOneShotParticleEmitter(LevelContainer const&, FXTypeID const&, NUVEC const*, int, NUVEC*)
LegoFX::~LegoFX()
Action_UpdateHint(WORLDINFO*, HINT_s*)
LegoFighting::LegoFighting()
LegoFighting::Init()
LegoFighting::ParseGameConfigEntry(nufpar_s*)
LegoFighting::OnInitPostConfig()
LegoFighting::IsBlockButtonPressed(MechCharacter&, int)
LegoFighting::IsBlockButtonHeld(MechCharacter&, int)
LegoFighting::IsPunchButtonPressed(MechCharacter&)
LegoFighting::IsPunchButtonHeld(MechCharacter&)
LegoFighting::IsSwipeButtonPressed(MechCharacter&)
LegoFighting::CanPunch(MechCharacter&)
LegoFighting::CanStartPunch(MechCharacter&, bool)
LegoFighting::CanLunge(MechCharacter&)
LegoFighting::CanBlock(MechCharacter&, unsigned short, Bolt*)
LegoFighting::OnPunch(MechCharacter&, NUVEC const*)
LegoFighting::GetPunchGaps(MechCharacter&, float*, float*, float*)
LegoFighting::CanPunchBlowUp(MechCharacter&, BlowUp&)
LegoFighting::RagDollMeleeHit(LegoLevelContainer&, GameObject*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, Entity*)
LegoFighting::CharacterMeleeHit(LegoLevelContainer&, GameObject*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, GameObject*)
LegoFighting::RigidBodyMeleeHit(LegoLevelContainer&, GameObject*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, Entity*)
LegoFighting::GizmoMeleeHit(LegoLevelContainer&, GameObject*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, Entity*)
LegoFighting::VehicleMeleeHit(LegoLevelContainer&, GameObject*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, Entity*)
LegoFighting::SelectOpponent(MechCharacter*, float, float, MELEE_ATTACK, int, MechObjectData&, unsigned int)
FaceOpponent(MechCharacter*, NUVEC const*, int, bool)
LegoFighting::ObjOpponentStillThere(MechCharacter*, MechCharacter*, float)
NewBlockAction(MechCharacter*)
StartBlock(MechCharacter&)
BlockSfx(MechCharacter*, MechCharacter*)
CanStepBack(GameObject*)
StepBackFromTarget(MechCharacter*)
ComboHitFrame(MechCharacter*, int)
StartHold(MechCharacter*)
UpdateHoldAction(MechCharacter*, NUVEC const*)
HoldCode(MechCharacter*)
HoldCode_Copy(MechCharacter*)
LegoFighting::CountActiveOpponents(MechCharacter&, int, float*, MechCharacter*, unsigned int, int)
LegoFighting::Punch_Hit(MechCharacter*, MechCharacter*, float, float, MechObjectData*)
Fight_MakeNextActionList(MechCharacter*, int, ACTIONINFO*, int, short*, int, unsigned int)
ReleaseEat(GameObject*)
GrabVictim(GameObject*, GameObject*)
GrabCode(GameObject*)
EatCode(GameObject*)
EatVictim(GameObject*)
HitStuffInfrontOfMe(GameObject*, int)
LiabilityAnim(GameObject*)
LegoFighting::BlockCode(MechCharacter&, int, int, int, int)
LegoFighting::CanPunchObstacle(MechCharacter&, GizmoObstacle&)
LegoFighting::OnPunchObstacle(MechCharacter&, GizmoObstacle&)
LegoFighting::StartSpecialMoveCamera(MechCharacter&)
LegoFighting::GetSpecialMoveCameraPos(MechCharacter&, NUVEC&)
ComboContextHandler::InitFlags()
ComboContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
ComboContextHandler::SetTargetYRot()
LegoFighting::SelectSpecialMoveOpponent(MechCharacter&, MechObjectData&, int, int)
LegoFighting::GetWeaponPunchModes(MechCharacter&, int&, int&)
ComboContextHandler::~ComboContextHandler()
LegoContextHandlerBase<ComboContextHandler>::GetInstanceId() const
LegoFighting::~LegoFighting()
LegoFighting::Punch_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoFloating::LegoFloating()
LegoFloating::FullUnderWaterMovement(GameObject&) const
LegoFloating::CanTurn(GameObject&)
LegoFloating::StartTurn(GameObject&)
LegoFloating::UpdateTurn(GameObject&)
LegoFloating::GetHeightRatio(GameObject&) const
LegoFloating::PossibleHere(GameObject&)
LegoFloating::RoomForDive(GameObject&)
LegoFloating::IsObjDiving(MechCharacter&, bool) const
LegoFloating::DrawFloatDieCharAttachment(GameObject*)
LegoFloating::MoveCode(GameObject&)
LegoFloating::Rumble(GameObject&)
LegoFloating::SetAction(GameObject&)
LegoFloating::IsObjWading(MechCharacter&) const
LegoFloating::PaddlesInWater(GameObject&)
LegoFloating::GetCurrent(GameObject&, NUVEC*)
LegoFloating::ApplyCurrent(GameObject&)
LegoFloating::GetSpeed(MechCharacter&) const
Float_UpdateHint(WORLDINFO*, HINT_s*)
LegoFloating::~LegoFloating()
LegoFloating::GetFloatDieAttachChar(WORLDINFO*)
LegoFlowSystem::FindByNameAndClass(LevelContainer&, char const*, EdClass*)
LegoFlowSystem::FindByHashedKey(LevelContainer&, unsigned int)
LegoFlowSystem::MechFlowInterfaceDestroy(MechFlowInterface&)
LegoFlowSystem::~LegoFlowSystem()
SubtitleResourceType::GetName() const
GameFrameworkCreate(int, char**)
LegoGameBase::LegoGameBase()
LegoGameBase::~LegoGameBase()
LegoGameBase::~LegoGameBase()
LegoGameBase::OnInit()
LegoGameBase::TriggerAutoSave()
LegoGameBase::CreateGameFrontend()
LegoGameBase::GetFrontend() const
LegoGameBase::OnConfigUpdated()
LegoGameBase::OnNuInitHardwareComplete()
LegoGameBase::OnSystemsInitComplete()
LegoGameBase::SetHasMovingCharacterIcons(bool)
LegoGameBase::ShouldIgnoreStartDoor(WORLDINFO&)
LegoGameBase::GetAreaFixUpTable() const
LegoGameBase::GetLevelFixUpTable() const
LegoGameBase::GetBigPartyActiveFn() const
LegoGameBase::InitTagMode(WORLDINFO*, bool)
LegoGameBase::DropInTextDisabled()
LegoGameBase::InitAbilities()
LegoGameBase::CalculateTotalCompletionPoints()
LegoGameBase::ReCalculateCompletionPoints()
LegoGameBase::GetCheatList()
LegoGameBase::GetHubLevel()
LegoGameBase::AnyPlayerSetToBlendToVertical()
LegoGameBase::AnyPlayerSetToForceToVertical()
LegoGameBase::UpdateDynamicCoopSplitSubMode(WORLDINFO&)
LegoGameBase::UpdateHorizontalSplitUpperSegmentIndex(WORLDINFO&)
LegoGameBase::GetOptions()
LegoGameBase::UpdateVerticalSplitLeftSegmentIndex(WORLDINFO&)
LegoGameBase::UpdateSplitSegmentTargetObjectsForPlayerToPlayerTag()
LegoGameBase::UpdateSplitSegmentTargetObjects(LevelContainer&)
LegoGameBase::SpecifyMemorySettings(LegoMemorySettings&, LegoMemorySettings&) const
LegoGameBase::CreateLevelContainer(char const*, bool, LevelContainer::LevelContainerMemory, StreamingLevel*)
LegoGameBase::CreateLevelContextData(StreamingLevel const&)
LegoGameBase::DestroyLevelContextData(StreamingLevel const&)
LegoGameBase::AllocateGameRenderPipes()
LegoGameBase::GetLegoMemorySettings() const
LegoGameBase::GetPlayerControl(int)
LegoGameBase::GetPlayerPresent(int)
LegoGameBase::ReportPadRemoval()
LegoGameBase::GetStreakColour(int, unsigned char&, unsigned char&, unsigned char&)
LegoGameBase::Close()
LegoGameBase::SetupLegoLightingModifier(WORLDINFO&)
LegoGameBase::ParseCommandLine()
LegoGameBase::ConfigureMemorySettings()
LegoGameBase::ConfigureCharSys()
LegoGameBase::GetLevelToPreloadFromTitles() const
LegoGameBase::ResetProgressWhenLevelChange(WORLDINFO*)
LegoGameBase::EventNotify(Event&, NuEventData&)
LegoGameBase::HandleStartPressedRequest(StartPressedRequestEventData&)
LegoGameBase::UpdateScene(short, float)
LegoGameBase::PostProcessUpdate(short, float)
LegoGameBase::OnLevelProcess(LevelContainer const&)
LegoGameBase::LoadGameData(void*)
LegoGameBase::RegisterSaveLoadManagers(cLoadSaveManager&)
LegoGameBase::IsTwoPlayerMode() const
LegoGameBase::ShouldAdjustPanelElementAlphaOnInvade()
LegoGameBase::GetPartyFollowIndex(MechCharacter&) const
LegoGameBase::GetSuperCharMaterialNames() const
LegoGameBase::CanAddStatusScreenPhase(unsigned int) const
LegoGameBase::CheckIfPotentiallyUnderCover(WORLDINFO*, int)
LegoGameBase::GetNumAITriggerPlayers(LevelContainer&) const
LegoGameBase::PausedShowStats(WORLDINFO&, int, int)
LegoGameBase::CanMeleeHurtPlayer(MechCharacter*, MechCharacter&, unsigned long)
LegoGameBase::GoldBrickTotalStatsEnabledWhilePaused(WORLDINFO&, int, int)
LegoGameBase::MiniKitTotalStatsEnabledWhilePaused(WORLDINFO&, int, int)
LegoGameBase::RedBrickTotalStatsEnabledWhilePaused(WORLDINFO&, int, int)
LegoGameBase::PowerBrickTotalStatsEnabledWhilePaused(WORLDINFO&, int, int)
LegoGameBase::TrueHeroStatsEnabledWhilePaused(WORLDINFO&, int, int)
LegoGameBase::PerilTotalStatsEnabledWhilePaused(WORLDINFO&, int, int)
LegoGameBase::InActiveGameplay()
LegoGameBase::IsSaveMenuImposeAllowed()
LegoGameBase::GetTempOptions()
LegoGameBase::ShouldForceLoadCollectionIcons(WORLDINFO const&) const
LegoGameBase::ShouldDrawHudHearts(WORLDINFO&, MechCharacter*)
LegoGameBase::OnRenderScreenGrab()
LegoGameBase::GetAvailableTitlesImageNamesArray(LangTitlesName*&, int&)
LegoGameBase::GetTitlesImageNames(char*, char*)
LegoGameBase::GetDefaultLoadingScreens(StreamingLevel::LevelVector&) const
LegoGameBase::GetDefaultLevel() const
LegoGameBase::GetDefaultLevelData() const
LegoGameBase::GetLevelMenuId(WORLDINFO*)
LegoGameBase::ShouldGameCameraSetDoF(WORLDINFO&)
LegoGameBase::GameInWideScreenMode() const
LegoGameBase::GetInhibitDropOut()
LegoGameBase::CanDoDoomedRecovery(MechCharacter&)
LegoGameBase::GetCustomCameraActive(int)
LegoGameBase::GetCustomCameraPosAndTarget(NUVEC*, NUVEC*, bool*, int)
LegoGameBase::GetCustomCameraFOVMul(float*, int)
LegoGameBase::AreCustomCameraPostEffectsDisabled(int)
LegoGameBase::GetCustomCameraBlendDuration(int)
LegoGameBase::SetCustomCamera(VuVec*, VuVec*, bool, int, float, float, bool)
LegoGameBase::SetCustomCameraMtx(int, VuMtx*)
LegoGameBase::GetCustomCameraMtxActive(int)
LegoGameBase::GetCustomCameraMtx(int, VuMtx*)
LegoGameBase::GetLookRotFovMul(MechCharacter&)
LegoGameBase::IsPlayerAllowedToSwapChar(MechCharacter*)
LegoGameBase::CalcRideOnMtx_Override(GameObject&, NUMTX&)
LegoGameBase::CalcRideOnMtx_Override(MechCharacter&, NUMTX&)
LegoGameBase::MenuDrawDueling(MENU*)
LegoGameBase::MenuUpdateDueling(MENU*)
LegoGameBase::MenuDrawTestOptimisation(MENU*)
LegoGameBase::MenuUpdateTestOptimisation(MENU*)
LegoGameBase::ScriptSupportProcess(float)
LegoGameBase::CreateCollisionCallBack()
LegoGameBase::CreateFlowManager(LevelContainer&)
LegoGameBase::OnInitPostConfig()
void* Constructor<BlowUpToObstacleDriver>()
LegoGameBase::LoadGlobalLegoSets()
LegoGameBase::OnLoadPermComplete(void*)
LegoGameBase::RegisterLegoGameGizActions()
LegoGameBase::GetJumpHeight(MechCharacter&)
LegoGameBase::NotifyAreaComplete(WORLDINFO&)
LegoGameBase::IsCutSceneInProgress()
LegoGameBase::CreateFrontendSaveData()
LegoGameBase::GetFrontendSaveData()
SubtitleResourceType::~SubtitleResourceType()
LegoGameBase::ShouldDrawLevelName(WORLDINFO&)
LegoGameBase::OnCreateCutsceneInstance(CutsceneInstance&) const
LegoGameBase::OverridePlayerFrameObjId(int, int&)
LegoGameBase::ShouldProcessPlayerLOSDuringDropOutDisappear()
LegoGameBase::ShouldCamVolumesApplyTo(MechCharacter*)
LegoGameBase::ReCalculateGameCompletionPoints()
LegoGameBase::CalculateGameTotalCompletionPoints()
LegoGameBase::AddAdditionalCharacters(WORLDINFO*, TempCharacterData&)
LegoGameBase::InitNewGame()
LegoGameBase::InitGlobalMessages()
LegoGameBase::CreateSystems()
LegoGameBase::ConfigureSystems()
LegoGameBase::OnActivateLevel(WORLDINFO*)
LegoGameBase::OnDeactivateLevel(WORLDINFO*)
LegoGameBase::MiniCutStarted()
LegoGameBase::AddAdditionalGoldBrickTotal(int&)
LegoGameBase::LoadPermData()
LegoGameBase::DrawPanel(WORLDINFO&)
LegoGameBase::UpdateTrueHeroTotal(WORLDINFO&, unsigned long&)
LegoGameBase::IsPauseAllowed()
LegoGameBase::IsUnpauseAllowed()
LegoGameBase::OnUnpauseGame()
LegoGameBase::RegisterHelpers()
LegoGameBase::RegisterGizActions()
LegoGameBase::CreateFlowHelper()
LegoGameBase::OnEnterNewArea(LegoLevelContainer const&)
LegoGameBase::UpdateFrameworkConfig(FrameworkConfig&) const
LegoGameBase::WorldInfoDump(WORLDINFO*)
LegoGameBase::SetNewGameLevel()
LegoGameBase::RequestProceedToGameplay()
LegoGameBase::ResetSaveGame()
LegoGameBase::GetInhibitDropIn()
LegoGameBase::InitStatusScreen(WORLDINFO*, STATUSPACKET*)
LegoGameBase::GetStatusStages() const
LegoGameBase::RecalcGamePercentage()
LegoGameBase::GetPlayerHUDIconAlpha(MechCharacter*)
LegoGameBase::GameParseCommandLine(int*, char***)
LegoGameBase::CreateCustomCollections()
LegoGameBase::GameSecretCode(char*, char const**)
LegoGameBase::ParseGameConfigEntry(nufpar_s*)
LegoGameBase::RequiresSplitScreenMenuOption()
LegoGameBase::OnGrappleWhipTarget(MechCharacter&, GizmoGrapple&)
LegoGameBase::OnGrappleWhipTarget(MechCharacter&, GizmoObstacle*)
LegoGameBase::ModeUsesChaseCamera(ChaseCamera*, ChaseCameraState*, MechCharacter*)
LegoGameBase::UpdateGameObjectGameActions(MechCharacter*, int)
LegoGameBase::CanShowProgressLostMessage(LegoLevelContainer const&)
LegoGameBase::IsPlayerGameObjectSelfThinking() const
AreaCompleteEventData::~AreaCompleteEventData()
LegoGameCommandLineArgs::GetNextArg()
LegoGameCommandLine::GetNextArg()
LegoGameCommandLineArgs::DummyCommandLineArg()
LegoGameCommandLine::LegoGameCommandLine()
LegoGameCommandLine::Finished()
LegoGameCommandLine::ParseCommandLine(int, char**)
LegoGameCommandLine::ParseArg(char*)
GetLayerTypeName(int)
GetSurfaceTypeName(int)
CAN_USE_WHIP(MechCharacter*)
GameObject::CastNonNullAPTest_DO_NOT_USE(MechCharacter*)
GameObject::CastNonNullAPTestTemp(MechCharacter*)
GameObject_UpdateHint(WORLDINFO*, HINT_s*)
cShootFlash::Init(MechCharacter&, long, float, signed char)
cShootFlash::Clear(MechCharacter&)
cShootFlash::Process(MechCharacter&, float)
ToggleEventData::GetNewCData() const
ToggleEventData::GetNewCModel() const
LegoGameObjects::LegoGameObjects()
LegoGameObjects::NotifyGameObjectAdded(MechCharacter&)
LegoGameObjects::NotifyAboutToBeKilled(MechCharacter&, MechCharacter*)
LegoGameObjects::NotifyGameObjectKilled(MechCharacter&, MechCharacter*)
LegoGameObjects::NotifyLostAsTarget(MechCharacter&)
LegoGameObjects::NotifyRelocated(MechCharacter&)
LegoGameObjects::NotifyTakeOverChanged(MechCharacter&)
LegoGameObjects::NotifyJoinedParty(MechCharacter&)
LegoGameObjects::NotifyTagged(MechCharacter&, MechCharacter&, bool)
LegoGameObjects::NotifyTagging(MechCharacter&, MechCharacter&, bool)
LegoGameObjects::NotifyPlayerControl(MechCharacter&)
LegoGameObjects::NotifyToggling(MechCharacter&, int)
LegoGameObjects::NotifyPostToggling(MechCharacter&, int)
LegoGameObjects::NotifyTakenDamage(MechCharacter&)
LegoGameObjects::NotifyDestroyed(MechCharacter&)
LegoGameObjects::NotifyObjHitObj(MechCharacter&, int, unsigned long, MechCharacter*, Bolt*)
LegoGameObjects::NotifyShouldBeKilled(MechCharacter&, bool&)
LegoGameObjects::NotifyStartBlock(MechCharacter&)
LegoGameObjects::ClearGameObjects(GAMEOBJECTSYS*)
LegoGameObjects::NotifyEntityRemoved(Entity&)
LegoGameObjects::FindNearbyGameObject(LevelContainer&, VuVec const&, float, GameObject*) const
LegoGameObjects::IsAPlayerInRange(VuVec const&, float) const
LegoGameObjects::FindByName(char const*) const
FindGameObject(int, unsigned int, int, int, int)
LegoGameObjects::GetBurnDamageTime(MechCharacter&)
LegoGameObjects::GetBurnDamageHitPoints(MechCharacter&)
LegoGameObjects::DisableCharacterAnimation(GameObject&)
LegoGameObjects::FindByName(char const*, unsigned int, int, int, int) const
LegoGameObjects::CanSpawnHats(WORLDINFO*, GameObject*)
LegoGameObjects::IsDeadOrDying(MechCharacter const&) const
LegoGameObjects::CanToggle(MechCharacter const&) const
LegoGameObjects::GetNextToggleCharacter(MechCharacter const&, LegoGameObjects::ToggleDirection, LegoGameObjects::ToggleInfo const&) const
LegoGameObjects::OnPostPlayersInit()
LegoGameObjects::GetDieWait(MechCharacter&)
LegoGameObjects::BuildPartyMemberList(GameObject**, GameObject*) const
LegoGameObjects::BuildPartyMemberList(MechCharacter**, MechCharacter*) const
LegoGameObjects::VerifyLOS(MechCharacter&, NUVEC&, NUVEC&, NUVEC&, long)
LegoGameObjects::VerifyLOS(MechCharacter&, NUVEC&, NUVEC&, NUVEC&, Entity*)
LegoGameObjects::GetNewGameObjectListener()
GameObjectListener::GetTakeOverTargetObj(MechCharacter&)
GameObjectListener::OverlapBegin(Entity const*, Entity const*)
GameObject::GetTakeOverTargetObj()
GameObject::GameObject(EdRegContext&, ApiCharacterParams const&)
GameObject::~GameObject()
GameObject::DestroyRenderOverrideBoltOn()
GameObject::RemoveGameObjectFromParty()
GameObject::ClearVehicle()
non-virtual thunk to GameObject::~GameObject()
non-virtual thunk to GameObject::~GameObject()
non-virtual thunk to GameObject::~GameObject()
non-virtual thunk to GameObject::~GameObject()
GameObject::~GameObject()
non-virtual thunk to GameObject::~GameObject()
non-virtual thunk to GameObject::~GameObject()
non-virtual thunk to GameObject::~GameObject()
non-virtual thunk to GameObject::~GameObject()
GameObject::AddInventory()
GameObject::AddInput()
GameObject::TryToMountLastSafeObject(bool)
GameObject::IsAttached() const
GameObject::IsAttachBlockingTag() const
GameObject::GetOpponent_override() const
GameObject::SetOpponent_override(MechCharacter*)
GameObject::GadgetOpponent(float, float, float, int, unsigned long const&, unsigned long const&, unsigned long const&)
GameObject::PlayTerrainChangeSfx(eSURFACE, eSURFACE, float)
GameObject::PlaySfx(SFXTypeID&, NUVEC const*, NuSoundHandle*, float, float, bool, int) const
GameObject::PlayTerrainTouchingSfx(eSURFACE, float)
GameObject::ProcessTerrainCallbacks(eSURFACE, eSURFACE, float)
GameObject::SetAction(short)
GameObject::GetAction(int)
GameObject::SetActionOverride(short, short)
GameObject::GetActionOverride(ActionOverrides::ACTION_OVERRIDES)
GameObject::SetActionOverridesValid(short, int)
GameObject::CanBlock(unsigned short)
GameObject::TickActionOverridesValid(short)
GameObject::GetActionOverridesValid(short)
GameObject::AddAnimOverride(int, int)
GameObject::GetAnimOverride(int)
GameObject::RemoveAnimOverride(int)
GameObject::ResetAnimOverrides()
GameObject::GetAnimOverrideList()
GameObject::IsActionPlaying(short, bool, bool)
GameObject::IsExperiencingFade() const
GameObject::UpdateBeenHitPacket()
GameObject::PlaySfx(short, NUVEC const*, NuSoundHandle*, float, float, bool, int) const
GameObject::BringBackToLife(bool)
CountGameObjects()
GameObject::FilterPhysicsLayer(int, bool)
GameObject::ConsiderForCollisions()
GameObject::GetFirstJointDelta(NUVEC&)
GameObject::SetupPhysicsCharacter()
GameObject::ActiveStateChanged()
GameObject::SetPositionNUVECEx(NUVEC const*, bool)
GameObject::SetTransformEx(VuMtx const&, bool, bool)
GameObjectOrigin(MechCharacter*)
GameObject::HasDriver(bool) const
GameObject::SetChanceOfBeingKilledByPartyAI(float)
GameObject::IsStandingOnSurfaceType(unsigned int) const
GameObject::IsStrafing() const
GameObject::IsStrafingWithAnims()
GameObject::IsWithinShootingRange()
GameObject::CheckForStrafeTargetLock()
GameObject::RequestTeleportAfterFadeOut(VuVec const&, unsigned short)
GameObject::RequestTeleport(VuVec const&, unsigned short, bool, bool, bool, bool, bool)
GameObject::RequestTeleport_Internal(VuVec const&, unsigned short, unsigned short)
GameObject::PrePhysicsProcess(float)
non-virtual thunk to GameObject::PrePhysicsProcess(float)
GameObject::ProcessTeleportRequest_Internal()
GameObject::Teleport(NUVEC const*)
GameObject::AddToTriggerProcessQueue()
GameObject::SetNetworkGhost(bool)
GameObject::ActionHasTrackRoot(int, CharTrackRootFlags)
GameObject::ActionCalcTrackRootTranslationDistXZ(int, float&)
GameObject::ActionCalcTrackRootTranslation(int, VuVec&)
GameObject::ActionCalcTrackRootMtx(int, NUMTX&, float)
GameObject::ActionCalcTrackRootPos(int, VuVec&, float)
GameObject::SetAddPurchaser(unsigned int)
GameObject::TargetLockedModifiedHeading() const
GameObject::IsLegoDynoVehicle() const
GameObject::GetLegoDynoVehicleType()
GameObject::IsVehicleOrLarge()
GameObject::IsVehicle() const
GameObject::SetVehicleDamageStage(int)
GameObject::SetVehicleDamageStage(int, cVehicleDamageStageInfo&)
GameObject::GetVehicleDamageStage(int)
GameObject::CanTag(MechCharacter&)
GameObject::CanDropIn(bool)
GameObject::IsRidingVehicle() const
GameObject::HasControlledPlayerInVehicle() const
GameObject::HasCoupledObjGotVehicleToTurretTagging()
GameObject::IsAttachedToAVehicle() const
GameObject::IsAttachedToAGameObject() const
GameObject::CanFlatten() const
GameObject::IsInAVehicle() const
GameObject::GetVehicleCanAim() const
GameObject::UpdateLastSafeTakeOverJumpToPos()
GameObject::LoseHatOnDeath()
GameObject::LoseHatOnHit(VuVec*)
GameObject::LoseHat(VuVec*, bool)
GameObject::AddGameObjectToParty()
GameObject::SetPosToGameObjectToSpawnOn()
GameObject::CanDamageAsAi() const
GameObject::ShouldBeAvoided(Brain const&) const
non-virtual thunk to GameObject::ShouldBeAvoided(Brain const&) const
GameObject::UpdateBox()
non-virtual thunk to GameObject::UpdateBox()
non-virtual thunk to GameObject::UpdateBox()
GameObject::PrepareBrain(WORLDINFO&)
GameObject::GetCapabilities() const
GameObject::IsInWater() const
GameObject::GetMaxJumpHeight() const
GameObject::GetShooterObject()
GameObject::SetClampToSpecial(LegoSpecial*, bool)
GameObject::GetClampToSpecial(float&) const
GameObject::CreateRenderOverrideBoltOn()
GameObject::OverrideAlbedoTint(NUCOLOUR3 const&)
GameObject::OverrideLightingGlow(NUCOLOUR3 const&)
GameObject::GetOverrideAlbedoTint()
GameObject::GetOverrideLightingGlow()
GameObject::ResetOverrideRenderBoltOn()
RenderOverrideBoltOn::Reset()
GameObject::ResetOverrideAlbedoTint()
RenderOverrideBoltOn::ResetTint()
GameObject::ResetOverrideLightingGlow()
RenderOverrideBoltOn::ResetGlow()
GameObject::ApplyOverrideLighting()
GameObject::ApplyOverrideLightingFromObj(GameObject*)
GameObject::Dislodge(VuVec const&, float, float)
GameObject::DislodgeDriver(VuVec const&, float, float)
GameObject::HasRegisteredScriptEvent(Event const&)
GameObject::GetTriggerManager() const
LegacySetContext(int, MechCharacter*, CONTEXTPACKET&, bool&)
GameObject::SetContext(int)
GameObject::RemoveAllInLevel(LevelContainer const&)
GameObjectDimensions(MechCharacter*)
ScaleGameObject(GameObject*)
GetTopBot(MechCharacter*)
SetToLastSafePos(MechCharacter*)
UnderPlayerControl(MechCharacter*)
FindNearestGameObject(NUVEC*, GameObject*, unsigned int, float, float, int, int, int, float*, int, int (*)(GameObject*))
GameObjectNearFloor(MechCharacter*, float, float*, float*)
GameObjectRotation(GameObject*, int)
PortalGameObject(MechCharacter*, int, int, short, NuSmartPtr<NuScene, true>)
SnapCreaturePos(MechCharacter*, NUVEC const*, int, int)
UpdateLastSafePosition(GameObject*, WORLDINFO*)
GameObjectSetCanUse(MechCharacter*, Gizmo*, unsigned char, unsigned char, float)
GameObj_GetName(int, MechCharacter*, char*, int)
TargetGameObject(MechCharacter*, NUVEC const*, NUVEC*, float, float, unsigned int, int, int, BoltTypeID const&, float, MechCharacter*, int, float, unsigned long)
GameObjectGetRealPos(GameObject*, NUVEC*)
Obj_SetFlicker(MechCharacter*, float)
AICreatureResumeScript(MechCharacter*, bool)
Obj_FindWobbleTop(MechCharacter*, NUVEC*, float)
FindLocatorMtx(MechCharacter*, int, NUMTX*)
FindLocatorPos(MechCharacter*, int, NUVEC*)
FindTiedUpLocator(MechCharacter*, NUVEC*)
FindPantsLocator(MechCharacter*, NUVEC*)
Burn_Update(MechCharacter*, float)
Burn_GetDamage(MechCharacter*)
Burn_GetCompleteUnit(MechCharacter*)
FootPrint_CheckForValidLayer(eLAYER_TYPE)
FootPrint_Update(MechCharacter*, float)
GhostAttack_Update(GameObject*)
UpdateSnapToGround(WORLDINFO*, GameObject*)
UpdatePhysicsCharFlags(GameObject*)
DismountCharactersOnVehicles_Update(GameObject*, float)
RenderOverrideBoltOn::RenderOverrideBoltOn()
cVehicleDamageStageInfo::Set(long, long, bool)
GameObject::GetTagRange()
GameObject::OnCannonSpyglass()
LegoGameObjects::SetInvulnerableTime(MechCharacter&)
LegoGameObjects::CheckInvulnerable(MechCharacter*, unsigned long, MechCharacter*)
LegoGameObjects::IsOnlyActiveWhenTakenOver(MechCharacter&)
LegoGameObjects::OnlyTakesDamageWhenTakenOver(MechCharacter&)
LegoGameObjects::StopCollidingCharacterPushingMe(MechCharacter&, MechCharacter&)
LegoGameObjects::SetIsTaggable(MechCharacter&)
LegoGameObjects::KillNextUpdate(GameObject&, eKillNextUpdateMode)
GameObject::SetKillNextUpdate(eKillNextUpdateMode, MechCharacter*, bool, GameObject_KillPartsArgs*, bool)
LegoGameObjects::EventNotify(Event&, NuEventData&)
LegoGameObjects::DestroyAddOns(AddOnList::eDestroyEvent)
LegoGameObjects::ProcessTakeHit(MechCharacter*, int)
LegoGameObjects::ShouldChangeContextOnHit(MechCharacter&, MechCharacter*, unsigned long, bool)
LegoGameObjects::DoHeadIK(MechCharacter&, NUVEC const&, bool)
GameObject::SetCantFocusCamOnMe(bool)
GameObject::CanHaveCameraOnMe() const
GameObject::PartyIndexOrPlayerStateChanged()
GameObject::FadeIn(float)
GameObject::FadeOut(float)
GameObject::IsFadingIn()
GameObject::IsFadingOut()
GameObject::IsFullyOnNavMesh(float)
GameObject::Cast_Recorded_DO_NOT_USE(MechCharacter*, char const*)
GameObject::Cast_Recorded_DO_NOT_USE(MechCharacter const*, char const*)
GameObject::CastNonNull_Recorded_DO_NOT_USE(MechCharacter*, char const*)
GameObject::CastNonNullAPTest_Recorded_DO_NOT_USE(MechCharacter*, char const*)
GameObject::Cast_Recorded_DO_NOT_USE(ApiCharacter const*, char const*)
GameObject::GetCamera()
GameObject::GetCameraEvalPosition(VuVec&, float*)
GameObject::GetCharacterMovementAddOn()
GameObject::DestroyCharacterMovementAddOn()
GameObject::ClearCharacterMovementAddOn()
GameObject::SetBodyFaceTargetPos(VuVec const&)
GameObject::HasTakeOverTargetObj()
GameObject::IsInTargetingMode()
GameObject::ResetAnimPacket(int)
GameObject::SetCapabilities(unsigned int)
GameObject::ClearCapabilities()
GameObject::AddCapability(unsigned int)
GameObject::GetKillNextUpdate() const
GameObject::ClearKillNextUpdate()
GameObject::Init(int, int, ePlayerAssociation)
GameObject::IsCritical() const
GameObject::UpdateAIPopulationManagerStuff()
GameObject::IsPlayer() const
GameObject::GetAIPos() const
GameObject::UpdateOnScreen()
GameObject::ApplyDefaultOrder()
GameObject::GetAIDir() const
GameObject::GetSector(cAIWorldNode const*) const
GameObject::StartCooldownTimer(unsigned int)
GameObject::SetVehicle(WeakPtr<cAIVehicle>, VehicleDefSeat::SEATTYPES)
GameObject::IsFriend(MechCharacter*) const
GameObject::OnEvent(eAIEvent, WeakPtr<cAITarget>)
GameObject::ResetAICharType(int, int)
GameObjectListener::~GameObjectListener()
LegoGameObjects::~LegoGameObjects()
LegoGameObjects::OverrideVehicleExitPosition(MechObjectInterface*, MechObjectInterface*, VehicleDefSeat::SEATTYPES, VuVec&, float, int, float, VuVec*)
LegoGameObjects::PreUpdateGameObjects()
LegoGameObjects::EarlyMoveCode(MechCharacter&)
LegoGameObjects::MoveCode(MechCharacter&)
LegoGameObjects::AnimateCharacter(MechCharacter&)
LegoGameObjects::OnObjectMoved(MechCharacter&)
LegoGameObjects::OverriveCharacterPhysicsCapsule(MechCharacter&)
LegoGameObjects::OnObjHitObj(MechCharacter*, MechCharacter*, Bolt*, int&, unsigned long&, bool, bool)
LegoGameObjects::OnObjHitShield(GameObject*, GameObject*, Bolt*, int&, unsigned long)
LegoGameObjects::CanTag(MechCharacter&, MechCharacter&)
LegoGameObjects::CanTagToVehicle(MechCharacter&, MechVehicle&)
LegoGameObjects::CanToggle(MechCharacter const&, int)
LegoGameObjects::OnPreToggle(MechCharacter&, int, bool)
LegoGameObjects::OnPostToggle(MechCharacter&, int, bool)
LegoGameObjects::OnCreateGameObject(GameObject&)
LegoGameObjects::OnDestroyGameObject(GameObject&)
LegoGameObjects::OnPostInitCreature(MechCharacter&)
LegoGameObjects::OnPostInitPlayer(MechCharacter&)
LegoGameObjects::TakeOverActionOverride(int&, GameObject&, GameObject&)
LegoGameObjects::IsCharacterAllowedToRideOnTopOfVehicles(MechCharacter&)
LegoGameObjects::OnDrawParaphernalia(MechCharacter*)
LegoGameObjects::OnLoseCoins(unsigned long&, eLOSECOINS, MechCharacter&)
LegoGameObjects::IsAllowedToFlicker(MechCharacter&)
LegoGameObjects::StartShrugIcon(MechCharacter&, int, int)
LegoGameObjects::EndShrugIcon(MechCharacter&)
LegoGameObjects::GetShrugIcons(Gizmo&, MechCharacter&, int&, int&)
LegoGameObjects::StartShrugHint(Gizmo&, MechCharacter&)
LegoGameObjects::AdjustLayerBits(long&, MechCharacter*)
LegoGameObjects::GetGameSpecificContextDrillShockId()
LegoGameObjects::NotifyGameObjectRespawn(MechCharacter&)
LegoGameObjects::CreateGameData(MechCharacter&) const
GameObject::GetApiCharacter()
GameObject::GetScaledCollisionRadius() const
GameObject::GetAvoidableBrain() const
GameObject::SetTransform(VuMtx const&)
GameObject::SetForceMom(NUVEC const&)
GameObject::GetForceMom()
GameObject::GetHoverHeight() const
GameObject::SetHoverHeight(float)
GameObject::GetTargetHeading() const
GameObject::GetLastSafePlatform() const
GameObject::SetLastSafePlatform(long)
GameObject::GetNextShootLocator()
GameObject::SetNextShootLocator(int)
GameObject::GetShootAccuracy()
GameObject::SetShootAccuracy(unsigned char)
non-virtual thunk to GameObject::SetTransform(VuMtx const&)
non-virtual thunk to GameObject::GetApiCharacter()
non-virtual thunk to GameObject::GetScaledCollisionRadius() const
non-virtual thunk to GameObject::GetAvoidableBrain() const
GameObjectAddedEventData::~GameObjectAddedEventData()
GameObjectKilledEventData::~GameObjectKilledEventData()
TagEventData::~TagEventData()
ToggleEventData::~ToggleEventData()
ObjHitObjEventData::~ObjHitObjEventData()
GameObjectShouldBeKilled::~GameObjectShouldBeKilled()
GamePad_Allocate()
GamePads_InGameToFrontEndFixup()
GamePads_Init()
GamePads_ClearNuPads()
GamePad_Rotate(GameObject*)
GamePad_Waggle(LegoGamePad*)
GamePad_GetPadIndex(LegoGamePad*)
FindPlayerIndexFromPad(NUPAD*)
ResetRumble(RUMBLEPACKET*)
UpdateRumble(RUMBLEPACKET*)
NewRumble(NUPAD*, float, int)
NewBuzz(NUPAD*, float, int)
StopRumble(NUPAD*)
NewBuzzFrames(NUPAD*, int, int)
NewRumbleAllPlayers(MechCharacter*, float, float, int, int)
DieRumble(MechCharacter*)
KillRumble(MechCharacter*)
HitRumble(MechCharacter*)
CustomRumble(MechCharacter*, float, int)
TakeHitRumble(MechCharacter*)
ConstantRumble(MechCharacter*, float, float)
NoPad(int, int)
Init_MotionSensorPad(LegoGamePad*)
Read_MotionSensorPad(LegoGamePad*, int)
Process_MotionSensorPad(LegoGamePad*)
ReadPad(WORLDINFO*, int)
ReadPads(WORLDINFO*)
AllowCallPlayersDropInOut(WORLDINFO*)
DebugSelectButtonPause(int)
TakeDebugScreenDump(NUPAD*)
AllowPause(WORLDINFO*)
AllowResume(int)
AllowPauseResume(WORLDINFO*)
HandlePauseButton(int, WORLDINFO*)
DoInput(WORLDINFO&)
GamePad_InputAngle(MechCharacter*, LegoGamePad*)
GamePad_WorldAngleToInputAngle(MechCharacter*, unsigned short)
Movie_ShouldSkip(unsigned int)
ReScalePadSpeed(GameObject*, LegoGamePad*)
IsPadAssignedToPlayer(NUPAD*, bool, NUPAD**, int)
PC_HasPlayerGotController(int)
GamePads_StartPressed(int&, NUPAD**, int&, bool, NUPAD**, int, int)
GamePad_SaveAndClear(LegoGamePad*, LegoGamePad*)
LegoGameThing::GetActiveMasterWorldInfo() const
LegoGameThing::GetActiveMasterLevelContainer() const
RenderHUD(WORLDINFO*, int)
LegoGameThing::GameObjectsProcessDraw()
LegoGameThing::GameObjectsAnimate(WORLDINFO&)
LegoGameThing::MainLevelProcess(WORLDINFO*, int*)
LegoGameThing::AfterLoadPerm()
LegoGameThing::LegoGameThing()
LegoGameThing::TitlesLoading()
LegoGameThing::TitlesPlaying()
LegoGameThing::TitlesLoadingOrPlaying()
LegoGameThing::InCredits(WORLDINFO*)
LegoGameThing::IsPauseAllowed() const
LegoGameThing::RequestPause(int, bool, int, bool)
LegoGameThing::PauseRequestSuccess()
LegoGameThing::RequestUnpause(bool, bool)
LegoGameThing::ProcessPauseRequests()
LegoGameThing::IsInStartSequence()
LegoGameThing::EventNotify(Event&, NuEventData&)
LegoGameThing::OnObjectDestroyedEvent(ClassObject&)
LegoGameThing::InitializeNewGame()
LegoGameThing::StartNewGame()
LegoGameThing::OnProcess_GameStatePlayingSubLevel(WORLDINFO&)
LegoGameThing::OnProcess_GameStatePlayingMainLevel(WORLDINFO&)
LegoGameThing::StartFrontendRequested()
LegoGameThing::SetStartFrontendRequested(bool)
LegoGameThing::LoadFrontendRequested()
LegoGameThing::LoadFrontendRequested(bool, bool)
BuilderOnline_BackupLastLData()
BuilderOnline_FixLevelFailed()
LegoGameThing::OnProcess_SecondaryContext(ClassManager::eProcessingPriority const&)
LegoGameThing::LoadFrontendWhenNotPlayingLevel()
LegoGameThing::OnProcess_GameStateActivateLevel(LegoLevelContainer const&)
LegoGameThing::OnProcess_GameStateNewMode(WORLDINFO&)
LegoGameThing::OnProcess_GameStateWaitingForMusicCue(LevelContainer&)
LegoGameThing::OnProcess_GameStateNewLevel()
LegoGameThing::OnProcess_GameStateNetworkSyncing()
LegoGameThing::OnProcess_GameStateResetting_PreNewModeCheck(WORLDINFO*)
LegoGameThing::OnProcess_GameStateResetting_DeactivateLevel(WORLDINFO*)
LegoGameThing::OnProcess_GameStateResetting(WORLDINFO&)
DrawTitlesPanel(WORLDINFO&)
LegoGameThing::PrintMemoryInfoToText()
LegoGameThing::PrintDisplayListsInfoToText()
LegoGameThing::SetPanelCamera(float)
LegoGameThing::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoGameThing::RenderAll(ClassManager::eRenderingPriority const&, ManagerRenderData*)
LegoGameThing::AllowProcessFMV()
LegoGameThing::ProcessFMV()
Print2d_DetailsofSubscribers()
LegoGameThing::~LegoGameThing()
LegoGameThing::GetManagerName() const
GameID_SetByName(char*)
CreateLegoGame()
LegoGizmos::LegoGizmos()
LegoGizmos::~LegoGizmos()
LegoGizmos::~LegoGizmos()
LegoGizmos::Init()
LegoGizmos::DoHiddenLayerCulling(LegoLevelContainer&)
LegoGizmos::EventNotify(Event&, NuEventData&)
LegoGizmos::NotifyGizmoDestroyed(Gizmo&)
LegoGizmos::NotifyLostAsTarget(Gizmo&)
LegoGizmos::GetType(int) const
LegoGizmos::GetManager(GIZMOSYS*, int, bool)
LegoGizmos::CreateAndInitialiseGizmoManager(GIZMOSYS&, int)
LegoGizmos::RegisterGizmoType(IGizmoType&)
LegoGizmos::FindTypeByClass(EdClass*) const
LegoGizmos::FindTypeIDByClass(EdClass*) const
LegoGizmos::FindClassByTypeID(int) const
LegoGizmos::FindTypeByName(char const*) const
LegoGizmos::FindTypeIDByName(char const*) const
LegoGizmos::CreateGizmoSys(WORLDINFO*)
LegoGizmos::DestroyGizmoSys(GIZMOSYS*&)
LegoGizmos::ClearGizmoSys(WORLDINFO*)
LegoGizmos::FindAttachedToSpecial(GIZMOSYS*, int, LegoSpecial*)
LegoGizmos::FindNearest(GIZMOSYS&, VuVec const&, float*, Gizmo*, bool)
LegoGizmos::Draw(LegoLevelContainer&, float, LegoGizmos::DrawMode)
LegoGizmos::EarlyUpdate(LegoLevelContainer&, float)
LegoGizmos::LateUpdate(LegoLevelContainer&, float)
LegoGizmos::BoltHitPlat(LegoLevelContainer const&, Bolt&)
LegoGizmos::FindByName(GIZMOSYS*, char const*, int)
LegoGizmos::GizmoExtraSaveVersion()
LegoGizmos::GizmoExtraSave(Gizmo&)
LegoGizmos::GizmoExtraLoad(Gizmo&, int)
LegoGizmos::GizmoExtraCreateInstance(Gizmo&, Gizmo&)
ReadExclusionLists(char const*, NuList<NuDynamicStringT<false> >&, NuList<NuDynamicStringT<false> >&)
LegoSetsAuto_Dump(char const*, NuList<short>)
LegoGizmoSystem::Init()
LegoGizmoSystem::~LegoGizmoSystem()
LegoGizmoSystem::~LegoGizmoSystem()
LegoGizmoHelper::GetManager(GIZMOSYS*) const
EvaluateGizmoDataBlockSize_Start()
EvaluateGizmoDataBlockSize_End()
GizmoFileWrite(void const*, int)
GizmoFileWriteFloat(float)
GizmoFileWriteInt(int)
GizmoFileWriteUnsignedInt(unsigned int)
GizmoFileWriteShort(short)
GizmoFileWriteUnsignedShort(unsigned short)
GizmoFileWriteChar(char)
GizmoFileWriteUnsignedChar(unsigned char)
GizmoFileWriteUnsignedInt64(unsigned long)
GizmoFileReadUnsignedInt64()
GizmoFileWriteNuVec(NUVEC*)
GizmoFileWriteName(char const*)
GizmoFileReadName(char*)
GizmoBufferAlloc(nuvariptr_u*, nuvariptr_u*, int)
Gizmo::Gizmo()
Gizmo::Init()
Gizmo::Gizmo(EdRegContext&)
Gizmo::GetClass() const
FlowCommonInterface_Gizmo::SetGizmo(Gizmo*)
Gizmo::FixupNodeGroup()
Gizmo::ComplexGizmoDirtyDrawHack(WORLDINFO*, float)
Gizmo::Release()
LegoGizmoManager::~LegoGizmoManager()
LegoGizmoManager::~LegoGizmoManager()
LegoGizmoManager::Destructor()
Gizmo::PreRelease()
LegoGizmoManager::OnSetInUse()
LegoGizmoManager::OnSetIdle()
LegoGizmoManager::GetItem(unsigned int)
LegoGizmoManager::NumItems() const
Gizmo::Load(WORLDINFO*, int, int, int)
Gizmo::AttachTo_Load(WORLDINFO*, int)
LegoGizmoManager::Load(WORLDINFO*, int, int)
LegoGizmoManager::CreateGizmo(WORLDINFO*, NUVEC*, int, int)
LegoGizmoManager::DestroyGizmo(Gizmo*, int)
Gizmo::GetMtx(NUMTX&) const
Gizmo::SetOrientationAndPositionFromMtx(NUMTX&)
Gizmo::GetMinMax(NUVEC&, NUVEC&)
Gizmo::GetMinMax(NuVector3Base&, NuVector3Base&)
Gizmo::GetOriginalReference()
Gizmo::LoadInstanceData(WORLDINFO*, int)
Gizmo::SaveInstanceData(WORLDINFO*)
Gizmo::AttachTo_Save()
Gizmo::GetCreator() const
Gizmo::InstanceMoved(int)
Gizmo::SetLayerID(unsigned char, bool)
Gizmo::ApplyHiddenLayers(unsigned long)
Gizmo::Hide(unsigned char, bool)
Gizmo::HideLegoSpecials(unsigned char, bool)
Gizmo::SetRayCastable(int)
Gizmo::SetAlpha(float)
Gizmo::GetAlpha()
Gizmo::ApplyDrawDistance(unsigned short, bool)
Gizmo::GetAnimEndFrame() const
Gizmo::GetAnimCurrentFrame() const
Gizmo::SetDynamic(bool)
Gizmo::EnableCharacterCollision(bool)
Gizmo::SetGizmoFlickerOff(float, float, float, float)
Gizmo::SetStoreMatrixProgress()
Gizmo::LegoSpecialPropertyCount(int)
Gizmo::Activate(bool)
Gizmo::SetVisibility(int)
Gizmo::SetTriggeredByPlayerId(MechCharacter*)
Gizmo::SetAlbedoTint(NUCOLOUR3 const&)
Gizmo::SetLightingGlow(NuColour const&)
Gizmo::AcquireSpecials()
Gizmo::ReleaseSpecials()
Gizmo::GetSpecialMatchingEntity(Entity&) const
Gizmo::SetAIAvoid(bool)
Gizmo::ComplexFixUp(WORLDINFO*, ComplexGizmo*)
Gizmo::AttachTo_Special(LegoSpecial*, int)
GizmoMakeMtxUsingAngles(NUMTX*, unsigned short, unsigned short, unsigned short)
Gizmo::AddPickups(long, int, int, int, float, int, float, float, GameObject*, int, int, NUVEC const&, NUVEC const&, unsigned short&, unsigned short&, bool, int)
Gizmo::GetWorldInfo() const
Gizmo::GotGroupAction(int)
Gizmo::GetGroupActionGizmo(int)
Gizmo::GetGroupPrimaryGizmo()
Gizmo::ToggleGroupAction(int)
GizmoCreateInstance(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, short, int, Gizmo*, int, bool)
Gizmo::IsGroupActionEnabled(int)
LegoGizmoManager::LegoGizmoManager(int, EdClassHelper&, char const*)
LegoGizmoManager::EventNotify(Event&, NuEventData&)
LegoGizmoManager::NotifyItemsAddedOrRemoved(bool)
LegoGizmoManager::GetNumObjects(void*)
LegoGizmoManager::DoForEachRecursiveRanged_DEPRECATED(bool (*)(LegoGizmoManager&, void*), VuVec const&, float, void*, bool)
GizmoManagerIteratorRangedBase::Next()
LegoGizmoManager::GetNextObject(void*, void*)
LegoGizmoManager::GetParentManager(bool) const
LegoGizmoManager::FindByName(char const*) const
LegoGizmoManager::FindByHashedName(HashedKey const&) const
LegoGizmoManager::FindByNameWithWildcard(char const*, Gizmo*) const
LegoGizmoManager::FindByID(unsigned short) const
LegoGizmoManager::FindByReferenceName(char const*, CMList<Gizmo*>&) const
LegoGizmoManager::Draw(float, ClassManager::eRenderingPriority)
LegoGizmoManager::RegisterGizmo(Gizmo*, int)
LegoGizmoManager::AddRefCountLevelAndSubLevelInstance()
GIZMOSYS::NotifyItemsAddedOrRemoved(LegoGizmoManager&, bool)
LegoGizmoManager::UpdateBoltHitList()
LegoGizmoManager::ActivateLevel()
LegoGizmoManager::DeactivateLevel()
LegoGizmoManager::CreateInstance(WORLDINFO*, Gizmo*, NUVEC const*, int, int, int, short, int, Gizmo*, int, bool)
GizmoGetUniqueName(GIZMOSYS*, char const*, char const*, char*, int)
LegoGizmoManager::BuilderCreateInstance(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, short, int, Gizmo*)
LegoGizmoManager::GetOwnerName()
LegoGizmoManager::HideAll(unsigned char, bool)
GIZMOSYS::GIZMOSYS(LevelContainer&)
GIZMOSYS::~GIZMOSYS()
GIZMOSYS::~GIZMOSYS()
GIZMOSYS::EventNotify(Event&, NuEventData&)
GIZMOSYS::DoForEachGizmo(void (*)(Gizmo&, void*), void*)
GIZMOSYS::HideAll(unsigned char, bool)
GIZMOSYS::ApplyHiddenLayers()
LegoGizmoManager::ApplyHiddenLayers(unsigned long)
LegoGizmoManager::EdSave(WORLDINFO*, int)
LegoGizmoManager::DestroyCreatedByComplexGizmoSys(WORLDINFO*)
LegoGizmoManager::BuilderDestroyGizmo(Gizmo*)
LegoGizmoManager::FindBestPhysicsLaunchTarget(NUVEC const&, NUVEC const&, float, float, float, float*, float*)
LoadGizmoSys(GIZMOSYS*, WORLDINFO*, char*)
GizmoSysAllocateProgress(WORLDINFO*)
GizmoSysDestroyProgress(GizmoProgress**)
GizmoSysStoreProgress(WORLDINFO*, GizmoProgress**)
GizmoSysRequestSfx(GIZMOSYS*)
GizmoSysReleaseSfx(GIZMOSYS*)
GizmoSysAddGizmos(GIZMOSYS*, GIZFLOW*, WORLDINFO*)
GizmoProgressItem::AllocBitArray(int)
GizmoProgressItem::SetAllBits(int)
GizmoProgressItem::SetBit(int, int)
GizmoProgressItem::GetBit(int)
GizmoProgressItem::AllocCharArray(int)
GizmoProgressItem::SetAllChars(unsigned char)
GizmoProgressItem::SetChar(int, unsigned char)
GizmoProgressItem::CopyString(int, char*, int)
GizmoProgressItem::GetChar(int)
GizmoProgressItem::GetString(int)
GizmoProgressItem::AllocShortArray(int)
GizmoProgressItem::SetAllShorts(unsigned short)
GizmoProgressItem::SetShort(int, unsigned short)
GizmoProgressItem::GetShort(int)
GizmoProgressItem::AllocIntArray(int)
GizmoProgressItem::SetAllInts(unsigned int)
GizmoProgressItem::SetInt(int, unsigned int)
GizmoProgressItem::GetInt(int)
GizmoProgressItem::AllocFloatArray(int)
GizmoProgressItem::SetAllFloats(float)
GizmoProgressItem::SetFloat(int, float)
GizmoProgressItem::GetFloat(int)
GizmoProgressItem::AllocHalfArray(int)
GizmoProgressItem::SetAllHalfs(NuHalf)
GizmoProgressItem::SetHalf(int, NuHalf)
GizmoProgressItem::GetHalf(int)
GizmoProgressItem::Serialise(EdStream&)
GizmoProgressItem::~GizmoProgressItem()
GizmoProgressItem::~GizmoProgressItem()
GizmoProgress::GizmoProgress(int)
GizmoProgress::~GizmoProgress()
non-virtual thunk to GizmoProgress::~GizmoProgress()
GizmoProgress::~GizmoProgress()
non-virtual thunk to GizmoProgress::~GizmoProgress()
GizmoProgress::Serialise(EdStream&)
GizmoSysClearLevelProgress(WORLDINFO*, int)
GizmoTypeStoreProgress(WORLDINFO*, int, int)
Gizmo::PostResetAcquireLegoSpecialCheck(LegoSpecial&)
Gizmo::GetNavObstacleNodeGroupName(char*) const
LegoGizmoManager::PostResetAcquireLegoSpecialsChecks()
GizmoSysReset(GIZMOSYS*, WORLDINFO*)
GizmoSysResetForBuilder(WORLDINFO*)
GizmoSysSetStoreMatrixProgress(WORLDINFO*)
GizmoSysActivateLevel(GIZMOSYS*)
GizmoSysDeactivateLevel(GIZMOSYS*)
GizmoSysPanelDraw(GIZMOSYS*, float)
GizmoSysApplyDrawDistance(WORLDINFO*)
GizmoFindByHashedName(GIZMOSYS*, HashedKey const&)
GizmoFindByNameWithWildcard(GIZMOSYS*, char const*, Gizmo*)
GizmoFindByName(GIZMOSYS*, int, char const*)
GizmoFindBrickUsers(GIZMOSYS*, CMList<Gizmo*>&)
GizmoFindByBricksUser(GIZMOSYS*, BricksUser*)
GizmoSetPhysicsLaunchTarget(GIZMOSYS*, Gizmo*, int, int)
GizmoCreateDynamicInstance(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, short, int, Gizmo*, int, bool)
Gizmo::SetDynoLayer(char)
Gizmo::FadeIn(float)
Gizmo::FadeOut(float)
Gizmo::IsFadingIn()
Gizmo::IsFadingOut()
Gizmo::SetGlowing(bool)
GizmoSetDynoLayers(GIZMOSYS*)
GizmoIsNameUnique(GIZMOSYS*, char*)
GizmoNameUsesPrefix(char const*, char const*)
GizmoGetUniqueName_NewVersionTM(GIZMOSYS*, char const*, char const*, char*, int)
Gizmo_FindLegoSpecial(SpecialSystem*, char const*, GIZMOSYS*, char const*, char const*)
InGizmoList(Gizmo*, Gizmo**, int)
AddToGizmoList(Gizmo*, Gizmo**, int*, int)
Gizmo::DestroyBase()
Gizmo::AttachTo_Destroy()
Gizmo::PlaySfx(short, NUVEC const*, NuSoundHandle*, float, float, int, int) const
Gizmo::PlaySfx(SFXTypeID&, NUVEC*, NuSoundHandle*, float, float, int, int) const
Gizmo::CheckForAIAssistance(MechCharacter**, int&, MechCharacter&)
Gizmo::SetMaterialMap(unsigned char, NuSmartPtr<NuMtl, true>*)
Gizmo::AttachTo_Create()
GizmoAttachTo::SetName(char const*)
Gizmo::AttachTo_SetTempName(char const*)
Gizmo::AttachTo_CalcOffset(NUVEC const*)
Gizmo::AttachTo_IsVisible()
Gizmo::AttachTo_Reset()
Gizmo::AttachTo_HasMoved()
Gizmo::AttachTo_GetMtx(NUMTX*)
Gizmo::AttachTo_VisibilityHasChanged()
Gizmo::AttachTo_TransformGizmoRotMtx(NUMTX*, NUVEC*, int)
Gizmo::AttachTo_FixUp(WORLDINFO*)
Gizmo::AttachTo_Character(WORLDINFO*, char const*, unsigned char)
LegoGizmoManager::BelongsToLegoSet() const
LegoGizmoManager::AttachTo_FixUp(WORLDINFO*)
LegoGizmoManager::CheckForAIAssistance(MechCharacter&) const
LegoGizmoManager::CheckForAIAssistanceInternal(MechCharacter**, int&, MechCharacter&) const
LegoGizmoManager::DestroyAddOns()
LegoGizmoManager::RemoveRefCountLevelAndSubLevelInstance()
Gizmo::AttachTo_Special(WORLDINFO*, char const*, int)
Gizmo::AttachTo_Character(GameObject*, unsigned char, unsigned char)
Gizmo::AttachTo_Gizmo(Gizmo*, int)
GizmoLink::GizmoLink(Gizmo*, char*)
GizmoLink::~GizmoLink()
GizmoLinkCopy(GizmoLink*, GizmoLink*)
EdRefGizmo::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefGizmo::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
LegoGizmoHelper::Initialise()
LegoGizmoHelper::CreateInstance(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, short, int, Gizmo*, int)
LegoGizmoHelper::GetObjectPrams(void*, void*, int)
LegoGizmoHelper::DestroyGizmo(Gizmo*, int)
LegoGizmoHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoGizmoHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
LegoGizmoHelper::SetObjectGuid(void*, int)
LegoGizmoHelper::GetObjectGuid(void*)
Gizmo::ForAllSpecials(void (*)(Gizmo&, Gizmo&, LegoSpecial&, void*), void*)
Gizmo::FindJointByName(char const*) const
Gizmo::GetLegoLevelContainer() const
Gizmo::Cast(Entity const&)
Gizmo::GetEntityList(Array<Entity*>&) const
Gizmo::GetTransform(VuMtx&) const
Gizmo::AnyLegoSpecialsOnScreen() const
GizmoManagerIteratorRecursiveBase_SLOW::Next()
NuIterator<LevelContainer*, LevelContainerChildList::ChildLevelIteratorBase>::operator++(int)
GizmoIteratorRecursiveBase_SLOW::FindByName(char const*)
GizmoManagerIteratorRangedBase::GizmoManagerIteratorRangedBase(LegoGizmoManager&, VuVec const&, float, bool)
GizmoIteratorRangedLAKBase::GetPhantomRadius(Phantom const&)
GizmoIteratorRangedLAKBase::Next()
GizmoIteratorRangedAABBBase::GizmoIteratorRangedAABBBase(int, DynoScene&, NuVector3Base&, NuVector3Base&)
GizmoIteratorRangedAABBBase::Next()
FlowCommonInterface_Gizmo::FlowCommonInterface_Gizmo()
FlowCommonInterface_Gizmo::CloneObject(LevelContainer&, NUVEC&, NUMTX&, Gizmo*)
FlowCommonInterface_Gizmo::GetLedFile()
FlowCommonInterface_Gizmo::FadeIn(float)
FlowCommonInterface_Gizmo::FadeOut(float)
GizmoFileResource::LoadResource()
GizmoFileResource::ReadFileIntoBuffer(char*)
FixupRequiredResourcesForGizmoSys(WORLDINFO*)
GizmoFileResource::Fixup()
Gizmo::~Gizmo()
Gizmo::LoadEx(WORLDINFO*, int)
non-virtual thunk to Gizmo::~Gizmo()
non-virtual thunk to Gizmo::~Gizmo()
LegoGizmoHelper::~LegoGizmoHelper()
GizmoFileResource::~GizmoFileResource()
GizmoFileResource::~GizmoFileResource()
GizmoFileResource::UnloadResource()
LegoGizmoSystem::ShutDown()
EdRefGizmo::~EdRefGizmo()
LegoGizmoManager::Reset(WORLDINFO*, void*)
LegoGizmoManager::StoreProgress(WORLDINFO*, void*)
LegoGizmoManager::SaveVersion()
LegoGizmoManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GIZMOSYS::GetManagerName() const
LegoGizmoLayerController::Initialise()
LegoGizmoLayerController::Reset()
LegoGizmoLayerController::ForceLayerOn(unsigned int, bool)
LegoGizmoLayerController::ForceLayerOff(unsigned int, bool)
LegoGizmoLayerController::Update()
LegoGizmoGroups::LegoGizmoGroups()
LegoGizmoGroups::CreateGizmoManager()
non-virtual thunk to LegoGizmoGroups::CreateGizmoManager()
LegoGizmoGroups::CreateHelper()
GizmoGroupSys_CreateTemplate(WORLDINFO*, char*)
GizmoGroupManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoGroupTemplate::SetPrimaryGizmo(GizmoListItem*)
GizmoGroupTemplate::LoadEx(WORLDINFO*, int)
GizmoGroupTemplate::RemoveGizmo(Gizmo*)
GizmoGroupTemplate::AddGizmo(Gizmo*, int, int)
GizmoGroup::RemoveObject(MechFlowInterface*, int)
GizmoGroup_ResolveConflicts(WORLDINFO*)
GizmoGroupManager::CreateGroup(GizmoGroupTemplate*, short)
GizmoGroup_GenerateGizFlow(WORLDINFO*)
GizmoGroup_ReFixUpFlow(WORLDINFO*)
GizmoGroupManager::ReassignGroupIds()
GizmoGroups_ReassignGroupIds(GIZMOSYS*)
GizmoGroupManager::PostLoad()
GizmoGroupManager::FindNextUnassignedGroupId()
GizmoGroup::~GizmoGroup()
GizmoGroup::~GizmoGroup()
CMList<GizmoGroup*>::Append(GizmoGroup* const&, CMList<GizmoGroup*>::ListLink*)
CMList<GizmoListItem*>::Append(GizmoListItem* const&, CMList<GizmoListItem*>::ListLink*)
GizmoGroup_AllocateGroup(WORLDINFO*, Gizmo*, short, int)
GizmosInSameGizmoGroup(Gizmo*, Gizmo*)
GizmoGroup::ResetForBuilder()
GizmoGroupsResetForBuilder(WORLDINFO*)
GizmoGroupTemplate::~GizmoGroupTemplate()
GizmoGroupTemplate::~GizmoGroupTemplate()
GizmoGroupTemplate::GetClass() const
non-virtual thunk to GizmoGroupTemplate::~GizmoGroupTemplate()
non-virtual thunk to GizmoGroupTemplate::~GizmoGroupTemplate()
GizmoGroupManager::~GizmoGroupManager()
GizmoGroupManager::~GizmoGroupManager()
GizmoGroupManager::AllocateProgressData(WORLDINFO*)
GizmoGroupManager::SaveVersion()
LegoGizmoGroups::~LegoGizmoGroups()
LegoGizmoSystemBase<LegoGizmoGroups>::ShutDown()
LegoGizmoSystemBase<LegoGizmoGroups>::ShouldAddManagersForLevel(MechLevelContainer&)
GroupHelper::~GroupHelper()
LegoGlowTargeting::LegoGlowTargeting()
LegoGlowTargeting::Init()
LegoGlowTargeting::EventNotify(Event&, NuEventData&)
LegoGlowTargeting::ClearCharacterGlowTargets()
LegoGlowTargeting::RenderForObject(MechCharacter*)
Glow_HasTarget(MechCharacter*)
Glow_IsCurrentTarget(MechCharacter*, void*)
Glow_CanSetTarget(MechCharacter*, eGlowType, float)
Glow_FindObjWithGlow(eGlowType, void*, int)
MultiTargetTypeExistsInTargetArray(MechCharacter*)
RemoveMultiTargetsFromTargetArray(MechCharacter*, bool)
Glow_SetTarget(MechCharacter*, eGlowType, void*, int, int, float)
LegoGlowTargeting::UpdateGlowForObject(MechCharacter*)
Glow_GetTargetPos(MechCharacter&, NUVEC&)
Glow_GetTargetItem(MechCharacter*)
Glow_GetTargetPlug(MechCharacter*)
Glow_GetTargetGrapple(MechCharacter*)
LegoGlowTargeting::InvalidateGlowTarget(void*, MechCharacter*)
LegoGlowTargeting::ShouldDrawGrappleOverPlayersHead(MechCharacter&) const
Glow_GetTargetGameObject(MechCharacter&)
Glow_GetTargetBlowup_NEWBLOWUP(MechCharacter*)
Glow_GetTargetGadget(MechCharacter&)
Glow_GetTargetObstacle(MechCharacter*)
Glow_GetTargetPart(MechCharacter*)
Glow_GetTargetBolt(MechCharacter*)
Glow_GetTargetSpellIt(MechCharacter*)
Glow_GetTargetSwitch(MechCharacter*)
Glow_GetTargetDig(MechCharacter*)
Glow_GetTargetGizPuzzle(MechCharacter*)
Glow_GetTargetTechno(MechCharacter*)
Glow_GetTargetMagicObject(MechCharacter*)
Glow_GetTargetTeleport(MechCharacter*)
Glow_GetTargetLightBeam(MechCharacter*)
Glow_GetCurrentType(MechCharacter&)
Glow_GetTargetNoType(MechCharacter&)
GlowTargetScale()
sGlowPacket::Reset()
sGlowPacket::HasTarget()
sGlowPacket::CanSetTarget(eGlowType)
sGlowPacket::SetTarget(eGlowType, void*, int, int)
LegoGlowTargeting::~LegoGlowTargeting()
LegoGlowTargeting::CanDrawTargetGlow(MechCharacter&) const
LegoGlowTargeting::DrawButtonWhipOffscreen(MechCharacter*)
LegoGrapples::LegoGrapples()
LegoGrapples::CreateGrapple()
LegoGrapples::CreateGizmoManager()
non-virtual thunk to LegoGrapples::CreateGizmoManager()
LegoGrapples::CreateHelper()
GizmoGrappleManager::OnInit()
LegoGrapples::OnInitPostConfig()
LegoGrapples::GetGrabOffset(MechCharacter&)
LegoGrapples::CanWhipGrapple(MechCharacter*)
GrappleTexFromName(char const*, int)
GizmoGrapple::AIInteract(APIOBJECT* const&, float)
Grapple_Occupied(GizmoGrapple*, MechCharacter*)
non-virtual thunk to GizmoGrapple::AIInteract(APIOBJECT* const&, float)
GizmoGrapple::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to GizmoGrapple::SetupInteractFocus(Task_PathTo&, AIManager const&)
GizmoGrappleManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoGrapple::LoadEx(WORLDINFO*, int)
GizmoGrapple::LoadInstanceDataEx(WORLDINFO*, int)
GizmoGrapple::SaveInstanceDataEx(WORLDINFO*)
GizmoGrapple::ComplexFixUpEx(WORLDINFO*, ComplexGizmo*)
GizmoGrapple::GetNumBuilderHotspots()
GizmoGrapple::GetBuilderStretchHotspotIndex()
GizmoGrapple::GetBuilerHotspotPos(int, NUVEC*)
GizmoGrapple::GetBuilderHotspotValue(int)
GizmoGrapple::SetBuilderHotspotValue(int, float)
GizmoGrapple::BuilderHotspotMoveCode(int, LegoGamePad*, int, int, int, int)
GizmoGrapple::NewPos(NUVEC*, int, NUVEC*)
GizmoGrapple::SetStartPosY()
GizmoGrapple::Reset()
LegoGrapples::IsGameObjectUsingGrapple(MechCharacter*, GizmoGrapple*, bool)
Grapple_RopeSwingTethered(GizmoGrapple*)
Grapple_Valid(GizmoGrapple*)
Grapple_ForceRopeLengthChecks(int)
Grapple_FindNearestCallback(LegoGizmoManager&, void*)
GizmoGrappleManager::FindNearest(NUVEC const*, MechCharacter*, float, float*, int, int, unsigned char)
Grapple_FindNearest(WORLDINFO*, NUVEC const*, MechCharacter*, float, float*, int, int, unsigned char)
Grapple_FindNearestToPos(WORLDINFO*, NUVEC*, int)
Grapple_FindNearestByScreenPosCallback(LegoGizmoManager&, void*)
GizmoGrappleManager::FindNearestByScreenPos(NUVEC*, MechCharacter*, float*, unsigned char)
Grapple_FindNearestByScreenPos(WORLDINFO*, NUVEC*, MechCharacter*, float*, unsigned char, VuVec const&, float)
GizmoGrappleManager::Draw(float, ClassManager::eRenderingPriority)
Grapple_DrawLine(MechCharacter*, MechCharacter*)
InitGrappleMtls()
GizmoGrapple::Activate(bool)
GizmoGrapple::ActivateLevel()
LegoGrapples::CheckXZDistance(GizmoGrapple&, NUVEC const*)
LegoGrapples::GetRequiredInventoryItem(MechCharacter&, GizmoGrapple*)
LegoGrapples::OnReleaseContext(MechCharacter&)
LegoGrapples::JumpAtTopOfGRapple(MechCharacter*, GizmoGrapple*)
LegoGrapples::AutoJumpAtTopOfGRapple(MechCharacter*, GizmoGrapple*)
LegoGrapples::SetAutoJumpForwardSpeed(MechCharacter*)
LegoGrapples::GetGrappleDrawPoint(GizmoGrapple&, VuVec&)
GizmoGrapple::GetOutput(int, int)
GizmoGrapple::GetOutputName(int)
GizmoGrapple::GetNumOutputs()
GizmoGrapple::GizmoGrapple()
GizmoGrapple::GetClass() const
GizmoGrapple::GetTargetPos(VuVec&)
GizmoGrapple::Targeting_GetTargetPos(NUVEC&, TARGETING_TYPE, int)
GizmoGrapple::SetGameMtx(NUMTX&)
GizmoGrapple::SetGamePos(NUVEC&)
GizmoGrappleManager::AllocateProgressData(WORLDINFO*)
GizmoGrappleManager::ClearProgress(WORLDINFO*, void*)
GizmoGrappleManager::StoreProgress(WORLDINFO*, void*)
GizmoGrappleManager::Reset(WORLDINFO*, void*)
GizmoGrappleManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoGrapple::operator=(GizmoGrapple const&)
GizmoGrappleManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoGrappleManager::FixUp_AI(AIManager&)
GizmoGrappleManager::PostLinkGenerationFixUp_AI(AIManager&)
Grapples_UpdateHint(WORLDINFO*, HINT_s*)
GizmoGrappleManager::EarlyUpdate(float)
GizmoGrappleManager::AutoGrappleAttachCharactersClose(GizmoGrapple&)
GizmoGrappleManager::LateUpdate(float)
GizmoGrappleManager::GizmoGrappleManager()
GizmoGrappleManager::OnSetInUse()
Grapple_AddDynamic(void*, int)
Grapple_InitRopeSwingAngle(MechCharacter*, int, unsigned short)
GizmoGrappleManager::IsCharacterWithinAutoAttachRange(MechCharacter&, GizmoGrapple&, bool)
GizmoGrappleManager::IsGrappleInAutoAttachRangeForCharacter(MechCharacter&)
Grapple_Attach(MechCharacter*, GizmoGrapple*)
Grapple_MoveCode(MechCharacter*)
ClearGrappleDropWait(MechCharacter*)
Grapple_VerifyLOS(GizmoGrapple*, NUVEC const*, NUVEC const*, NUVEC const*, FirstPointCollector*)
Grapple_ReachedTop(MechCharacter*)
Grapple_SetPlayerTargetPoint(MechCharacter*, NUVEC*)
Grapple_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Grapple_SetRotOrder(MechCharacter*)
Grapple_LookAtPos(MechCharacter*, NUVEC*)
Grapple_GetDrawPos(MechCharacter*, NUVEC*)
Grapple_GetTiltRefPos(MechCharacter*, NUVEC*)
Grapple_DrawGrab(MechCharacter*, NUVEC*, float)
GizmoGrappleManager::EventNotify(Event&, NuEventData&)
GizmoGrappleManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
DrawWhipGrabRope(MechCharacter*)
GizmoGrapple::~GizmoGrapple()
GizmoGrapple::SetInstanceData(Gizmo*)
non-virtual thunk to GizmoGrapple::~GizmoGrapple()
non-virtual thunk to GizmoGrapple::~GizmoGrapple()
GizmoGrappleManager::~GizmoGrappleManager()
GizmoGrappleManager::SaveVersion()
LegoGrapples::~LegoGrapples()
LegoGrapples::DrawFloorTarget(GizmoGrapple&)
LegoGrapples::GetMaxWhipLength()
LegoGrapples::GetRopeMtl(GizmoGrapple*, MechCharacter&, int&)
LegoGrapples::IsGrappleValid(MechCharacter*, GizmoGrapple*)
LegoGrapples::CanUseGrapple(MechCharacter*, GizmoGrapple*)
LegoGrapples::GetBigJumpAtTopHeight(GizmoGrapple&)
LegoGrapples::GameGrappleDrawGrab(GizmoGrapple*, VuVec&, VuVec&)
GrappleHelper::~GrappleHelper()
LegoHintGizmos::LegoHintGizmos()
LegoHintGizmos::CreateGizmoManager()
non-virtual thunk to LegoHintGizmos::CreateGizmoManager()
LegoHintGizmos::CreateHelper()
GizHint_MoveCode(WORLDINFO*, MechCharacter*)
GizmoHintManager::MoveCode(WORLDINFO*, MechCharacter*)
GizmoHint::~GizmoHint()
non-virtual thunk to GizmoHint::~GizmoHint()
GizmoHint::~GizmoHint()
non-virtual thunk to GizmoHint::~GizmoHint()
GizmoHint::LoadEx(WORLDINFO*, int)
GizmoHintManager::EventNotify(Event&, NuEventData&)
GizmoHint::Reset()
GizmoHint::GetClass() const
GizmoHint::Activate(bool)
GizmoHint::SetComplete(int)
GizmoHint::GetOutput(int, int)
GizmoHint::GetOutputName(int)
GizmoHint::SetName(char*)
GizmoHintManager::GizmoHintManager()
GizmoHintManager::~GizmoHintManager()
GizmoHintManager::~GizmoHintManager()
GizmoHintManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoHintManager::DestroyGizmoEx(Gizmo*)
GizmoHintManager::AllocateProgressData(WORLDINFO*)
GizmoHintManager::StoreProgress(WORLDINFO*, void*)
GizmoHintManager::ClearProgress(WORLDINFO*, void*)
GizmoHintManager::Reset(WORLDINFO*, void*)
GizmoHintManager::LateUpdate(float)
GizmoHintManager::Draw(float, ClassManager::eRenderingPriority)
GizmoHintManager::FindHint(char const*)
GizmoHintManager::FindNearest(WORLDINFO*, MechCharacter*, GIZHINT_FIND_ENUM)
GizmoHintManager::GetBObjName(char*, char*, int)
GizmoHintManager::FindSwitchObject(GizmoHint*)
GizmoHintManager::GameObjUsingdig(MechCharacter*, GizmoHint*)
GizmoHintManager::ResetLOS(MechCharacter*)
GizmoHint::GetNumOutputs()
LegoHintGizmos::~LegoHintGizmos()
LegoGizmoSystemBase<LegoHintGizmos>::ShutDown()
LegoGizmoSystemBase<LegoHintGizmos>::ShouldAddManagersForLevel(MechLevelContainer&)
GizmoHintManager::SaveVersion()
GizHintHelper::~GizHintHelper()
LegoHints::LegoHints()
LegoHints::DisplaySpecialButtonPrompt(LevelContainer*, NUVEC&, float, float, int)
LegoHints::DrawHintForLoadScreen(WORLDINFO&, HINT_s*, float, float)
LegoHints::GetRandomLoadingHint(LevelContainer*, HINT_s*, bool&)
LegoHints::~LegoHints()
LegoHints::FixUpEnums()
LegoHints::GetHintFunctions()
LegoHints::DisplayButtonPrompt(Gizmo&, MechCharacter&, float)
LegoHints::DrawProgressBar(VuVec&, float, float, unsigned int*, bool, MechCharacter*)
LegoHints::GetHintIcon(WORLDINFO&, short)
LegoHints::GetDefaultHintColour()
LegoHints::OnHintSet(WORLDINFO*, HINT_s*)
LegoHints::HintsSuppressed()
GizItems_UpdateHint(WORLDINFO*, HINT_s*)
LegoItems::LegoItems()
LegoItems::CreateGizmoManager()
non-virtual thunk to LegoItems::CreateGizmoManager()
LegoItems::CreateHelper()
LegoItems::GetItemShootDirection(MechCharacter&, int*, NUVEC*)
LegoItems::GetLedgeItemDrawMtx(VuMtx&, GizmoLedge&, GizItem&)
LegoItems::SetItemScenePath(char const*, int)
LegoItems::OnInit()
LegoItems::ShutDown()
LegoItems::OnInitPostConfig()
LegoItems::EventNotify(Event&, NuEventData&)
LegoItems::SetFixUpTables(char const**, LegoItems::sActionRemapTable const*, char const**)
LegoItems::CanTagOut(MechCharacter&)
LegoItems::CanLookForItemToPickUp(MechCharacter&)
LegoItems::CanLookForItemPlugs(MechCharacter&)
LegoItems::CanPickUpItem(MechCharacter&, GizItem&)
LegoItems::FindNearestByType(LevelContainer&, VuVec const&, LegoItemType*) const
LegoItems::FindNearestByType(WORLDINFO&, VuVec const&, LegoItemType*) const
LegoItem_UpdateGlowLightMul(int, float)
LegoItem_ShowTakeHereArrow(NUVEC*, float, int, float, int, int, int)
GizItem::GizItem()
GizItem::~GizItem()
GizItem::ResetFxHandles(int, int)
GizItem::DeleteLegoSpecial()
GizItem::FreeResources()
Serialisable::~Serialisable()
non-virtual thunk to GizItem::~GizItem()
GizItem::~GizItem()
non-virtual thunk to GizItem::~GizItem()
GizItem::GetClass() const
GizItemPlacement::Serialise(EdStream&)
GizItemPlacement::Copy(GizItemPlacement&)
GizItemPlacement::Reset()
LegoItem_Plug_FindMySpawnItem(WORLDINFO*, GizmoPlug*)
LegoItems::GetTopLevelItem(GizItem&, bool)
LegoItem_CreateFromType(WORLDINFO*, LegoItemType const*, int, int, NUVEC*)
LegoItems::GetSubLevelItem(GizItem&)
LegoItem_DestroyOrRespawnHome(GizItem*, int, LegoInventoryItem*)
LegoItems::FindTopLevelItem(GizItem&)
LegoItems::FindSubLevelItem(GizItem&)
LegoItems::FindPlacementLevel(GizItem&)
GizItem::CreateFromLevelSpecial(WORLDINFO*, LegoSpecial*, LegoItemType*)
GizItem::SetLegoSpecial(LegoSpecial&)
GizItem::ResetStreaks()
GizItem::ResetEffects()
LegoItem_GetPlugIds(GizItem const*)
LegoItem_CheckForVehicleInWayOfRespawningItem(GizItem&)
GizItemManager::EarlyUpdate(float)
GizItem::GetSceneResourceHndl()
GizItem::GetCharDefResourceHndl()
GizItem::CreateItemSceneSpecial(Gizmo*)
LegoItems::FindSpecial(WORLDINFO*, LegoItemType*, GizItem*, GizItem*, bool)
GizItemManager::Draw(float, ClassManager::eRenderingPriority)
GizItem::LoadEx(WORLDINFO*, int)
GizItemManager::GetNewItemName(WORLDINFO*, char const*)
GizItem::InitAfterCreation(WORLDINFO*)
GizItemManager::EdSave(WORLDINFO*, int)
GizItem::LoadInstanceDataEx(WORLDINFO*, int)
GizItem::SaveInstanceDataEx(WORLDINFO*)
GizItem::Init()
GizItem::SpecialChanged()
GizItemManager::SetStoreMatrixProgress(WORLDINFO*)
GizItemManager::AllocateProgressData(WORLDINFO*)
GizItemManager::ClearProgress(WORLDINFO*, void*)
GizItemManager::StoreProgress(WORLDINFO*, void*)
GizItemManager::DeactivateLevel()
GizItemManager::Reset(WORLDINFO*, void*)
GizItemManager::GetNewReferenceName(WORLDINFO*, char const*)
GizItemManager::CountItemsWithFlagsSet(unsigned long)
GizItemManager::ResetFxHandles()
GizItemManager::GizItemManager()
GizItemManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizItemManager::DestroyGizmoEx(Gizmo*)
GizItemManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizItem::InstanceMovedEx()
GizItem::GetMtx(NUMTX&) const
GizItem::SetGamePos(NUVEC&)
GizItem::SetGameMtx(NUMTX&)
GizItem::DrawAt(NUMTX&)
GizItem::SetObjVisibility(int)
GizItem::SetRespawnPos(NUVEC&)
GizItem::AddResource(ResourceHndl const&)
GizItem::HasResources()
GizItem::HaveResourcesFinishedLoading()
LegoItems::GetFullScenePath(LegoItemType&, char*, int, int)
LegoItems::GetSearchRange(MechCharacter*)
GizItemManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizItem::ResetMtx()
GizItem::Reset()
GizItem::SetVisibility(int)
GizItem::ActivateRev(int, int)
GizItem::GetOutput(int, int)
GizItem::GetOutputName(int)
GizItem::GetNumOutputs()
GizItem::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to GizItem::SetupInteractFocus(Task_PathTo&, AIManager const&)
GizItem::AIInteract(APIOBJECT* const&, float)
LegoItem_PickUpItem(MechCharacter&, GizItem*, NUMTX*, int)
non-virtual thunk to GizItem::AIInteract(APIOBJECT* const&, float)
GizItem::CanInteract(APIOBJECT* const&)
LegoItem_CanStillPickUpItem(GizItem*, float, int)
non-virtual thunk to GizItem::CanInteract(APIOBJECT* const&)
GizItem::Release()
cGizItemHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
cGizItemHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
LegoItem_Feedback_PickUp(MechCharacter&, LegoItemType*)
LegoItem_Feedback_Throw(MechCharacter&)
LegoItem_IsSpentGun(GizItem*)
LegoItem_Stopped_ClutterManagement(GizItem*)
LegoItem_AutoCollect(MechCharacter*, GizItem*)
LegoItem_ClearAutoCollect(MechCharacter&, unsigned long)
LegoItem_PutIntoLevel(GizItem*, int, NUMTX*, VuVec*, VuVec*, MechObjectData*, MechCharacter*, float)
LegoItems::GetBestThrowableItem(MechCharacter&, LegoItems::ThrowMode)
LegoItems::CanThrowItems(MechCharacter&)
LegoItems::CanThrowInventoryItem(MechCharacter&, LegoInventoryItem&, LegoItems::ThrowMode)
LegoItems::CanThrowItem(MechCharacter&, GizItem&, LegoItems::ThrowMode)
LegoItem_PlayImpactSFX(GizItem*, NUVEC*)
LegoItem_PlayDroppedSFX(GizItem*, NUVEC*)
LegoItems::CreateItem()
LegoItems::CalcThrowMom(VuVec&, GizItem&, VuVec const&, VuVec const&, int, VuVec*, VuVec*, MechObjectData*)
LegoItem_BuilderDestroySpawnedItems(WORLDINFO*)
LegoItem_AddMomentum(GizItem*, int, NUMTX*, VuVec*, VuVec*, MechObjectData*, MechCharacter*, float)
LegoItems::GetDefaultThrowMom(GizItem&, float&, float&)
LegoItems::GetThrowSpeed(GizItem*)
LegoItems::ThrowFromLevel(MechCharacter&, GizItem&, MechObjectData*, VuMtx*)
LegoItem_VerifyLOS(GizItem*, NUVEC const*, NUVEC const*, NUVEC const*, long, float)
LegoItem_GetBestGlowItem(MechCharacter&, NUVEC const*, float*, float, int, unsigned long, unsigned long, LegoItemType*)
LegoItem_GetItemInWorld(WORLDINFO&, NUVEC*, float*, unsigned long, unsigned long, LegoItemType*, int, int)
LegoItems::CanBlowUp(BlowUp&, GizItem&, int)
LegoItem_InRangeBlowUp(BlowUp*, GizItem*, int)
LegoItems::OnHitBlowUp(BlowUp*, MechCharacter*, LegoInventoryItem*, GizItem*, int)
LegoItem_InRangePlug(GizmoPlug*, GizItem*, int)
LegoItems::OnHitPlug(GizmoPlug*, MechCharacter*, LegoInventoryItem*, GizItem*, int)
LegoItems::DrawThrowTargetMsg(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoItems::ProcessCharacter(MechCharacter&, float, int)
LegoItem_TargetingCode(MechCharacter&)
LegoItem_DrawThrowTargetMsg(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoItem_KillDebris(WORLDINFO&, GizItem*, LegoItemType*, NUVEC*)
LegoItem_LateUpdateGameObjects()
LegoItems::ShouldDrawStreaks(MechCharacter&, LegoInventoryItem*)
LegoItems::UpdateInventoryItemAfterAnim(MechCharacter&, LegoInventoryItem*)
LegoItems::DoImpactItem(GizItem*)
LegoItems::InvalidateInventoryItem(MechCharacter&, void*)
LegoItems::InvalidateItem(GizItem*, MechCharacter*)
LegoItems::DestroyItemFeedback(LegoInventoryItem*, GizItem*, LegoItemType*, WORLDINFO*, NUMTX*, MechCharacter*, int)
LegoItems::CanTakeThroughDoor(MechCharacter&, LegoInventoryItem&, bool)
LegoItems::OnPartyGoingThroughDoor(WORLDINFO*, short)
LegoItems::OnPostTeleport(MechCharacter&)
LegoItems::FindByPlugId(WORLDINFO*, short)
LegoItems::SelectStreakForItem(MechCharacter&, LegoInventoryItem*)
LegoItems::DrawItemFX(WORLDINFO&, MechCharacter*, LegoInventoryItem*, GizItem*, LegoItemType*, NUMTX const*, float, bool, int)
LegoDefaultInventoryItem::FindTypeGlobal()
LegoDefaultInventoryItem::FindType(LevelContainer&)
GizItemManager::~GizItemManager()
cGizItemHelper::~cGizItemHelper()
LegoItems::~LegoItems()
LegoItems::OnPostAddDefaultItems(MechCharacter&)
LegoItems::UpdateItem(WORLDINFO&, MechCharacter*, LegoInventoryItem*, GizItem*, LegoItemType*, NUMTX const*, float, bool, int)
LegoItems::AllowItemSwitching(MechCharacter&)
LegoItems::IgnoreInputThisFrame(MechCharacter&, int)
LegoItems::OnItemHitObject(GizItem*, MechCharacter*, MechCharacter*)
LegoItems::OnInventoryItemStateChanged(MechCharacter&, LegoInventoryItem&)
LegoItems::CanThrowItemAtTarget(MechCharacter&, GizItem&, MechObjectData&)
LegoItems::AllowPickUpItem(MechCharacter&, GizItem&)
LegoItems::OnDropItemOverride(MechCharacter&, LegoInventoryItem&, int, VuVec*, float, GizItem**)
GizItemPlacement::~GizItemPlacement()
GizItem::GetRadius() const
GizItem::GetLegoSpecial() const
GizItem::Targeting_GetTargetPos(NUVEC&, TARGETING_TYPE, int)
GizItem::Targeting_GetCursorPos(NUVEC&, TARGETING_TYPE, int)
GizItem::LOS_GetPoint(NUVEC&, TARGETING_TYPE, int)
GizItem::isAIInteractSupported()
GizItem::Glow_GetTargetPos(NUVEC&, int)
GizItem::GetIconIndex() const
LegoItemRespawnEventData::~LegoItemRespawnEventData()
TargetingInterfaceItem::TargetingInterfaceItem(GizItem&)
TargetingInterfaceItem::~TargetingInterfaceItem()
TargetingInterfaceItem::~TargetingInterfaceItem()
TargetingInterfaceItem::operator=(TargetingInterfaceItem const&)
TargetingInterfaceItem::GetItem()
TargetingInterfaceItem::GetTargetName() const
TargetingInterfaceItem::GetGameType()
TargetingInterfaceItem::GetRadiusCheck(VuVec&, float)
TargetingInterfaceItem::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*)
TargetingInterfaceItem::HasTerrain()
LegoItemType::Init()
LegoItemType::SetItemSceneName(char const*)
LegoItemType::SetSpecialName(char const*)
LegoItemType::Allocate(int, int)
LegoItemType::Destroy()
LegoItemType::Copy(LegoItemType const&)
LegoItemType::ProcessType()
LegoItemType::GetAction(short, MechCharacter*, short)
LegoItemType::GetHoldLocatorIndexFromDefinedLocator(int)
LegoItemType::GetActionIndex(short)
LegoItemType::GetActionFromIndex(int)
LegoItemType::GetSfx(short, MechCharacter*)
LegoItemType::FindLocator(int)
LegoItemTypeSys::Init()
LegoItemTypeSys::Destroy()
LegoItemTypeSys::Reset(WORLDINFO*)
LegoItemTypeSys::FindFromName(WORLDINFO*, char const*)
LegoItemTypeSys::FindFromHashedName(WORLDINFO*, HashedKey const&)
LegoItemTypeSys::FindFromNameThisSysOnly(char const*)
LegoItemTypeSys::FindFromHashedNameThisSysOnly(HashedKey const&)
LegoItemTypeSys::ContainsType(LegoItemType*)
LegoItemTypeSys::FindFromIndex(WORLDINFO*, int)
LegoItemTypeSys::SetIndexMaskFromFlags(WORLDINFO*, unsigned long const&, unsigned int*)
LegoItemTypeSys::FixUpItems(WORLDINFO*, int*, int)
LegoItemTypeSys::ParseFlag(char const*, unsigned long*)
LegoItemTypeSys::ParseFlag2(char const*, unsigned long*)
LegoItemTypeSys::ParseCharLayer(char const*, unsigned char*)
LegoItemTypeSys::ParseAction(nufpar_s*, LegoItemType*)
LegoItemTypeSys::ParseStreakData(nufpar_s*, LegoItemType*)
LegoItemTypeSys::ParseSfx(nufpar_s*, LegoItemType*)
LegoItemTypeSys::SetLocatorDefaults(int, LegoItemTypeSys*, LegoItemLocator*)
LegoItemTypeSys::ParseLocator(nufpar_s*, int, LegoItemType*)
LegoItemType_FindFromName(LevelContainer*, char const*)
LegoItemTypeSys::ParseColour(nufpar_s*, char const*, char&)
LegoItemTypeSys::Load(char*, NUPAKFILEHNDL const&)
LegoItemTypeSys::CreateReferenceItems(LevelContainer&)
LegoItemTypeSys::RequestSfx(WORLDINFO*)
LegoItemTypeSys::ReleaseSfx(WORLDINFO*)
LegoInventory::SetCurrentItem(LegoInventoryItem*)
LegoInventory::Init()
LegoInventory::SetThrowConfig(LegoInventory::ThrowConfig const*)
LegoInventory::GetCannotBePutAwayFlag(LegoInventoryItem&)
LegoInventory::DestroyItem(LegoInventoryItem*)
LegoInventory::ResetCharacterAttachment(LegoInventoryItem&)
LegoInventory::Destroy()
LegoInventory::Create(MechCharacter&)
LegoInventory::Append(LegoInventoryItem*)
LegoInventory::Remove(LegoInventoryItem*, bool)
LegoInventory::Unlink(LegoInventoryItem*)
LegoInventory::FindItemByPlugID(int)
LegoInventory::EvalFlags()
LegoInventory::ResetEffects()
LegoInventory::SetLocatorScale(LegoInventoryItem&, float)
LegoInventory::UpdateLocatorScale(LegoInventoryItem*)
LegoInventory::SetItemState(LegoInventoryItem*, int, int, int)
LegoInventory::AddItemAbility(LegoInventoryItem*)
LegoInventory::RemoveItemAbility(LegoInventoryItem*)
LegoInventory::RestoreDroppedDefaultItems()
LegoInventory::ResetHoldTime(unsigned long)
LegoInventoryItem::GotAmmo()
LegoInventoryItem::GetLocatorScale()
LegoInventoryItem::GetScale(NUVEC&)
LegoInventoryItem::GetMaxScale()
LegoInventory::DropItem_Release()
LegoInventory::DropItem(LegoInventoryItem*, int, VuVec*, float, GizItem**)
LegoInventory::CalcItemMtx(LegoInventoryItem*, NUMTX*, int, int)
LegoInventory::PutIntoLevel(LegoInventoryItem*, int, NUMTX*, VuVec*, VuVec*, MechObjectData*, MechCharacter*, VuVec*, float, float)
LegoInventory::SetItemContextMode(LegoInventory::eItemContextMode, LegoInventoryItem&)
LegoInventory::SetItemActionMode(LegoInventory::eItemActionMode, LegoInventoryItem&)
LegoInventory::PutItemsAwayForContext(bool)
LegoInventory::IsHoldingItem()
LegoInventory::GetHeldItemFromFlags(unsigned long, unsigned long, LegoInventoryItem*)
LegoInventory::GetItemOutForContext(LegoInventoryItem&, bool, bool, bool)
LegoInventory::GetItemOut(LegoInventoryItem*, LegoInventory::eAnimMode, int, int)
LegoInventory::GetItemOutForContext(unsigned long const&, unsigned long const&, bool, bool, bool)
LegoInventory::FindItemFromFlags(unsigned long, unsigned long, int, int, LegoInventoryItem*)
LegoInventory::SetItemContextMode(LegoInventory::eItemContextMode, unsigned long const&, unsigned long const&, int)
LegoInventory::SetItemActionMode(LegoInventory::eItemActionMode, unsigned long const&, unsigned long const&, int)
LegoInventory::DropItems(unsigned long, unsigned long, int, int, int)
LegoInventory::DoorReset()
LegoInventory::GameObjectBeenKilled(int)
LegoInventory::RemoveItems(int, int, int, unsigned long)
LegoInventory::DropItem_Forced(LegoInventoryItem*, int, VuVec*, GizItem**)
LegoInventory::DropItem_BeenHit(int)
LegoInventory::DontPickUpItemType(LegoItemType*)
LegoInventory::ShootItem(int)
LegoInventory::AiUseItem(LegoInventory::eUseAction, VuVec*, MechObjectData*)
LegoInventory::AiUseItem(LegoInventoryItem&, VuVec*, MechObjectData*)
LegoInventory::StartThrow(LegoInventoryItem*, GizItem*, int, VuVec*, VuVec*, MechObjectData*, VuVec*, VuVec*, float)
LegoInventoryItem::Init()
LegoInventoryItem::Destroy()
LegoInventory::InitNewItem(LegoInventoryItem*, GizItem*)
LegoInventory::GetHeadLink(LegoInventoryItem*)
LegoInventory::GetParentLink(LegoInventoryItem*)
LegoInventory::GetLastLink(LegoInventoryItem*)
LegoInventory::LinkItem(LegoInventoryItem*, GizItem*, int, int, int)
LegoInventory::FindFreeLinkType(LegoInventoryItem*, LegoItemType*)
LegoInventory::FindFreePutAwayLocator(LegoInventoryItem*, LegoInventoryItem*)
LegoInventory::ReLinkItem(LegoInventoryItem*, LegoInventoryItem*, int, int)
LegoInventory::RemoveLinkedItem(LegoInventoryItem*, int)
LegoInventory::RemoveItem(LegoInventoryItem*, int, int, bool)
LegoInventory::CanPutAwayItem(LegoInventoryItem*, LegoInventoryItem*)
LegoInventory::IsHoldingTemporaryItem()
LegoInventory::IsHoldLocatorOccupied(LegoInventoryItem*, LegoInventoryItem*)
LegoInventory::FindFreeLinkLocator(LegoInventoryItem*, LegoItemType*)
LegoInventory::ReallyGetItemOut(LegoInventoryItem*, LegoInventory::eAnimMode, int, int)
LegoInventory::ReallyPutItemAway(LegoInventoryItem*, LegoInventory::eAnimMode, int, int)
LegoInventory::GetNewLinkType(GizItem*)
LegoInventory::FindItemFromLinkId(signed char)
LegoInventory::GetItemForLevel(LegoInventoryItem*, int, int, int)
LegoInventory::CanThrow()
LegoInventory::ThrowConfig::ThrowConfig()
LegoInventory::ThrowConfig::SetDefaults()
LegoInventory::ThrowConfig::SquareValues()
LegoInventory::FindThrowTarget(MechObjectData&, unsigned long, LegoInventoryItem&)
LegoInventory::FindThrowGlowTarget(LegoInventoryItem&)
LegoInventory::GetThrowTargetFromGlow(MechObjectData&)
LegoInventory::SetBreakouts(LegoInventoryItem*, int)
LegoInventory::StartCatch(GizItem*)
LegoInventory::AddItem(GizItem*, int, int, int, float, int, int)
LegoInventory::FindItem(GizItem*)
LegoInventoryItem::GetAction(short, MechCharacter*, short) const
LegoInventory::ThrowItem(LegoInventoryItem*, int, VuVec*, VuVec*, MechObjectData*, VuVec*, VuVec*, float)
LegoInventory::CompleteCurrentAnimation(bool, LegoInventoryItem*)
LegoInventory::NoFightingZonePutAway(LegoInventoryItem*)
LegoInventory::PutHeldItemsAwayForNewCurrentItem(LegoItemType*, LegoInventoryItem*, LegoInventory::eAnimMode, int, int)
LegoInventory::PutItemAway(LegoInventoryItem*, LegoInventory::eAnimMode, int, int, int, int)
LegoInventory::GetItemOutFromFlags(unsigned long, unsigned long, LegoInventory::eAnimMode, int, int)
LegoInventory::GetItemOutFromGameFlags(unsigned long, unsigned long, LegoInventory::eAnimMode, int, int)
LegoInventory::FindItemFromTypeIndex(int, int, int)
LegoInventory::FindItemFromName(char const*)
LegoInventory::FindItemFromDefinedLocator(int, int, int, LegoInventoryItem*)
LegoInventory::FindItemFromDefinedHoldLocator(int, int, int)
LegoInventory::CycleItems(LegoInventory::eAnimMode, int, int)
LegoInventory::PutAllItemsAway(LegoInventory::eAnimMode, int, int, int, bool)
LegoInventory::CanAddItem(LegoItemType*, GizItem*, int, int)
LegoInventory::HasItemFinishedScalingInOut(LegoInventoryItem&)
LegoInventory::GetDefaultItemOut(LegoInventory::eAnimMode, int, int, int)
LegoInventory::AddDefaultItems(int, int)
LegoInventory::GetItemLocator(LegoInventoryItem*)
LegoInventory::CalcItemPos(LegoInventoryItem*, NUVEC*, int, int)
LegoInventory::CalcItemMtx(int, NUVEC*, NUANGVEC*, float, NUMTX&, int)
LegoInventory::UpdateCharacterAttachment(LegoInventoryItem&, bool)
LegoInventory::UpdateItem(LegoInventoryItem*, int)
LegoInventory::RemoveItemsByTypeIndex(int, int, int)
LegoInventory::GetBoltType(LegoInventoryItem*, LegoItemType*)
LegoInventory::GetShootPos(NUVEC&, int, int)
LegoInventory::IsHoldingItemType(LegoItemType*)
LegoInventory::CanUseTargetableItem(int, int, unsigned long)
LegoInventory::CanUseGun()
LegoInventory::ThrowItemUpwards(LegoInventoryItem*)
LegoInventory::PutItemAwayScale(LegoInventoryItem*, float*, float, float)
LegoInventory::GetItemOutScale(LegoInventoryItem*, float*, float, float)
LegoInventory::LateUpdate()
LegoInventory::ResetEveryFrame()
LegoInventory::GetStreakPoints(LegoInventoryItem*, NUVEC*, int)
LegoInventory::EndItemContextMode(LegoInventoryItem&)
LegoInventory::OnContextChange()
LegoInventory::EndItemActionMode(LegoInventoryItem&)
LegoInventory::OnPreAnimChange(short, short)
LegoInventory::OnPostAnimChange(short, short)
LegoInventory::AdjustLayerBits(long&, long, long, long)
LegoInventoryItem_SyncAnimPacket(CharDefGameData*, ANIMPACKET&, ANIMPACKET&, LegoInventoryItem&, short)
LegoInventory::PreCharAnimUpdate(float, float, float)
LegoInventory::AnimateItem(LegoInventoryItem*)
LegoInventory::PostCharAnimUpdate()
LegoInventory::DrawItem(LegoInventoryItem*, int)
LegoInventory::ClearAllMotionBlur()
LegoInventory::DrawItems(int)
LegoItemContextHandler::Register()
MechContext* MechContextConstructor<LegoItemContextHandler>(MechCharacter&)
LegoItemContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoItemContextHandler::SetTargetYRot()
LegoItemContextHandler::OnLeave()
LegoItemContextHandler::ReleaseContext(MechCharacter&)
LegoItemContextHandler::LegoItemContextHandler(MechCharacter&)
LegoItemContextHandler::~LegoItemContextHandler()
LegoItemContextHandler::~LegoItemContextHandler()
LegoItemContextHandler::InitFlags()
LegoItemContextHandler::OnEnter(LevelContainer*)
LegoItemContextHandler::AllowLeave(int, MechContext*)
LegoItemContextHandler::SetPhase(LegoInventory::eContextPhase)
LegoItemContextHandler::OnProcess(LevelContainer*, float)
LegoInventory::OverrideItemInOut()
LegoInventory::EventNotify(Event&, NuEventData&)
LegoItemContextHandler::Process(MechCharacter&, float, int)
LegoInventory::~LegoInventory()
LegoInventory::~LegoInventory()
LegoContextHandlerBase<LegoItemContextHandler>::GetInstanceId() const
ItemRemovedFromInventoryEventData::~ItemRemovedFromInventoryEventData()
LegoItemStateChangeEventData::~LegoItemStateChangeEventData()
LegoItemEventData::~LegoItemEventData()
LegoContextHandlerBase<LegoItemContextHandler>::~LegoContextHandlerBase()
LegoItemTrackerData::Serialise(EdStream&)
LegoItemTrackerData::Reset()
LegoItemTrackerData::Copy(LegoItemTrackerData&)
LegoItemTracker::LegoItemTracker()
LegoItemTracker::Serialise(EdStream&)
LegoItemTracker::Copy(LegoItemTracker&)
LegoItemTracker::Allocate()
LegoItemTracker::Destroy()
LegoItemTracker::ClearProgress()
LegoItemTracker::GetFreeSlot()
LegoItemTracker::StoreProgress(WORLDINFO*)
LegoItemTracker::ResetProgress(WORLDINFO&)
LegoItemTracker::FindFromPlacement(WORLDINFO const&, GizItemPlacement&, bool)
LegoItemTracker::SetItemPlugged(GizItem&, Gizmo&, bool, bool)
LegoItemTracker::AddItem(GizItem&, unsigned int, LegoItemTrackerData**)
LegoItemTracker::RemoveItem(GizItem&)
LegoItemTracker::RemoveItem(GizItemPlacement&)
LegoItemTracker::FindPlacementLevel(WORLDINFO const&, GizItemPlacement&)
LegoItemTracker::GetPlacementIndex(GizItemPlacement&)
LegoItemTracker::GetPlacementFromIndex(int, GizItemPlacement&)
LegoItemTracker::CheckForUnpluggedTechnos(GizmoTechnoManager&)
LegoItemTracker::CheckForUnpluggedPlugs(GizmoPlugManager&)
LegoItemTracker::~LegoItemTracker()
LegoItemTrackerData::~LegoItemTrackerData()
LegoItemTrackerData::~LegoItemTrackerData()
ClimbInBarrel_UpdateHint(WORLDINFO*, HINT_s*)
LegoItem_InBarrel_Release(MechCharacter&)
LegoItem_InBarrel_InvalidateInventoryItem(MechCharacter&, void*)
LegoItem_InBarrel_SetTargetYRot(MechCharacter&)
LegoItem_InBarrel_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoItem_InBarrel_MoveCode(MechCharacter&)
LegoItem_Part_MoveMagicPull(PART*, float)
LegoItem_Part_MoveSpear(PART*, float)
LegoItem_Part_DestroyOrRespawnHome(GizItem*, int)
LegoItem_Part_MoveTowardsTarget(PART*, float)
LegoItem_Part_HitObj(PART*, MechCharacter*)
LegoItem_Part_Update(PART*)
LegoItem_Part_EarlyUpdate(PART*)
LegoItem_Part_RemoveFromLevel(PART*)
LegoItem_Part_Stopped(PART*)
LegoItem_Part_Impact(PART*)
LegoItem_Part_DrawFlickerer(PART*)
LegoItem_Part_Kill(PART*, int)
LegoItem_Part_WhipSnatchItem(MechCharacter*, GizItem*)
LegoItemPhysicsPartDynoListener::Collision(BodyPair*, Array<ContactPoint>&)
LegoItemPhysicsPartDynoListener::JustEnteredWater(VuVec const&, VuVec const&)
LegoItem_Part_CreatePart(MechCharacter*, GizItem*, int, NUMTX*, VuVec*, VuVec*, MechObjectData*, VuVec*, float, float)
LegoItemPhysicsPartDynoListener::~LegoItemPhysicsPartDynoListener()
LegoItem_SuperCarry_Release(MechCharacter*)
LegoItem_SuperCarry_Throw(MechCharacter*, int)
LegoItem_SuperCarry_GetHoldLocator(MechCharacter*)
LegoItem_SuperCarry_CollisionCode(MechCharacter*)
LegoItem_SuperCarry_GetObjectPos(MechCharacter*, NUVEC*, NUVEC*)
LegoItem_SuperCarry_GetHandsMidPos(MechCharacter*, NUVEC*, float)
LegoItem_SuperCarry_GetAlignedCarryEdge(MechCharacter*, GizItem*, unsigned short, NUVEC*, NUVEC*, unsigned short*, float*)
LegoItem_SuperCarry_PutIntoLevel(MechCharacter*, GizItem*, NUVEC*, unsigned short, signed char, NUVEC*)
LegoItem_SuperCarry_CalculateMatrixAndOffset(MechCharacter*, NUMTX*, NUVEC*, int)
LegoItem_SuperCarry_DrawObject(MechCharacter*)
LegoItem_SuperCarry_Possible(MechCharacter*, int)
LegoItem_SuperCarry_TransferItem(MechCharacter*)
LegoItem_SuperCarry_StoreProgress(WORLDINFO*)
LegoItem_SuperCarry_PickUpItem(MechCharacter*, GizItem*, NUMTX*, int)
SuperCarryAddon::GetTypeId()
LegoItem_SuperCarry_MoveCode(WORLDINFO*, MechCharacter*)
LegoItem_SuperCarry_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoItem_SuperCarry_YRotation(MechCharacter*, unsigned short)
LegoItem_SuperCarry_IsCarrying(MechCharacter*)
LegoItem_SuperCarry_PickUp_UpdateHint(WORLDINFO*, HINT_s*)
LegoItem_SuperCarry_UpdateHint(WORLDINFO*, HINT_s*)
LegoItem_SuperCarry_CarryingType(MechCharacter*, LegoItemType*)
SuperCarryAddon::SuperCarryAddon(MechCharacter&)
SuperCarryAddon::~SuperCarryAddon()
non-virtual thunk to SuperCarryAddon::~SuperCarryAddon()
SuperCarryAddon::~SuperCarryAddon()
non-virtual thunk to SuperCarryAddon::~SuperCarryAddon()
SuperCarryAddon::OnAdded()
SuperCarryAddon::OnRemoved()
SuperCarryAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to SuperCarryAddon::OnHook(unsigned char, HookArgs*)
LegoItem_SuperCarry_Part_Stopped(PART*)
LegoItem_SuperCarry_Part_Impact(PART*)
LegoItem_SuperCarry_Part_Kill(PART*, int)
LegoItem_SuperCarry_Part_Update(PART*)
LegoItem_SuperCarry_Part_Draw(PART*)
LegoItem_SuperCarry_Part_CreatePart(GizItem*, NUMTX*, NUVEC*, MechCharacter*, int)
LegoItem_CalcSnatchMom(NUVEC*, NUVEC*, NUVEC*)
LegoInventory_WhipSnatchCurrentItem(GameObject*, GameObject*, int)
LegoItem_WhipSnatchPlacedItem(MechCharacter*, GizItem*)
LegoItem_GetBestWhipTarget(MechCharacter*, float, float, float, int, unsigned long, unsigned long, int, GizItem*)
SetGameSetBrawlerClassCallback(void (*)(MechCharacter*, unsigned int))
SetGameBrawlerQueryCallback(bool (*)(MechCharacter*, MechCharacter*, BrawlerQueryType))
SetBrawlerClass(MechCharacter*, unsigned int)
BrawlerQuery(MechCharacter*, MechCharacter*, BrawlerQueryType)
LegoLadders::LegoLadders()
LegoLadders::OnInit()
LegoLadders::CreateGizmoManager()
non-virtual thunk to LegoLadders::CreateGizmoManager()
LegoLadders::CreateHelper()
LegoLadders::CreateGizmoLadder()
LadderSys_Init(LADDERTYPE_s*)
LadderType_FindByName(char*)
GizmoLadder_FindNearestCallback(LegoGizmoManager&, void*)
GizmoLadderManager::FindNearestNonRecursive(NUVEC const*, MechCharacter*, float*, NUVEC*, int)
GizmoLadderManager::FindNearest(NUVEC const*, MechCharacter*, float*, NUVEC*, int)
GizmoLadderManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoLadder::LoadEx(WORLDINFO*, int)
GizmoLadder::LoadInstanceDataEx(WORLDINFO*, int)
GizmoLadder::SaveInstanceDataEx(WORLDINFO*)
GizmoLadder::Activate(bool)
GizmoLadder::GetNumBuilderHotspots()
GizmoLadder::GetBuilderStretchHotspotIndex()
GizmoLadder::Reshape(NUVEC*)
GizmoLadder::GetBuilerHotspotPos(int, NUVEC*)
GizmoLadder::GetBuilderHotspotName(int)
GizmoLadder::GetBuilderHotspotValue(int)
GizmoLadder::SetBuilderHotspotValue(int, float)
GizmoLadder::BuilderHotspotMoveCode(int, LegoGamePad*, int, int, int, int)
GizmoLadder::Reset()
GizmoLadder::FindBigJumpLocator()
GizmoLadder::CreateCollisionEntity()
GizmoLadder::DeactivateLevel()
GizmoLadder::DestroyCollisionEntity()
GizmoLadderManager::~GizmoLadderManager()
GizmoLadderManager::~GizmoLadderManager()
GizmoLadderManager::AllocateProgressData(WORLDINFO*)
GizmoLadderManager::ClearProgress(WORLDINFO*, void*)
GizmoLadderManager::StoreProgress(WORLDINFO*, void*)
GizmoLadderManager::Reset(WORLDINFO*, void*)
GizmoLadderManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoLadder::GizmoLadder()
GizmoLadder::~GizmoLadder()
non-virtual thunk to GizmoLadder::~GizmoLadder()
GizmoLadder::~GizmoLadder()
non-virtual thunk to GizmoLadder::~GizmoLadder()
GizmoLadder::GetClass() const
GizmoLadderManager::DestroyGizmoEx(Gizmo*)
GizmoLadderManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoLadderManager::LateUpdate(float)
GizmoLadderManager::Draw(float, ClassManager::eRenderingPriority)
GizmoLadder::GetOutput(int, int)
GizmoLadder::GetOutputName(int)
GizmoLadder::GetNumOutputs()
GizmoLadder::IsPlayerAttaching(MechCharacter*, float const&)
GizmoLadder::StopPlayerMovingThroughLadder(MechCharacter*)
GizmoLadder::InstanceMovedEx()
GizmoLadderManager::FixUp_AI(AIManager&)
Ladder_MoveCode(WORLDINFO*, MechCharacter*, LegoGamePad*)
Ladder_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
GizmoLadderManager::OnInit()
LegoLadders::GetLadderCollisionFixedName()
GizmoLadderManager::SaveVersion()
LegoLadders::~LegoLadders()
LegoGizmoSystemBase<LegoLadders>::ShutDown()
LegoGizmoSystemBase<LegoLadders>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoLadders::GameSpecificCheck(MechCharacter*, GizmoLadder*)
GizmoLadderHelper::~GizmoLadderHelper()
LegoLedges::CreateGizmoManager()
non-virtual thunk to LegoLedges::CreateGizmoManager()
LegoLedges::CreateHelper()
LegoLedges::OnInit()
LegoLedges::OnInitPostConfig()
LegoLedges::LegoLedges()
LegoLedges::SetLedgePieces(LEDGEPIECE*, int)
LegoLedges::Release(MechCharacter&)
GizmoLedge::ClearDynoListener(MechCharacter*)
LegoLedges::LeaveLedgeContext(MechCharacter*, int)
GizmoLedge::FixupType()
GizmoLedge::UpdateTransforms(bool)
GizmoLedge::Reset()
GizmoLedge::LoadEx(WORLDINFO*, int)
LegoLedges::FindNearest(WORLDINFO*, NUVEC const&, MechCharacter*, float*, float)
GizmoLedge::ComplexFixUpEx(WORLDINFO*, ComplexGizmo*)
GizmoLedgeManager::GizmoLedgeManager()
GizmoLedgeManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoLedgeManager::DestroyGizmoEx(Gizmo*)
GizmoLedgeManager::EarlyUpdate(float)
GizmoLedgeManager::Draw(float, ClassManager::eRenderingPriority)
GizmoLedgeManager::GizmoHasBeenDestroyed(Gizmo*)
GizmoLedge::GetNumOutputs()
GizmoLedge::GetOutputName(int)
GizmoLedge::GetOutput(int, int)
GizmoLedgeManager::AllocateProgressData(WORLDINFO*)
GizmoLedgeManager::ClearProgress(WORLDINFO*, void*)
GizmoLedgeManager::StoreProgress(WORLDINFO*, void*)
GizmoLedgeManager::FixUpLedgePieces()
GizmoLedgeManager::Reset(WORLDINFO*, void*)
GizmoLedgeManager::PostLoad()
GizmoLedge::UpdatePiecesConnected()
GizmoLedge::InstanceMovedEx()
GizmoLedge::SetGamePos(NUVEC&)
GizmoLedge::SetGameMtx(NUMTX&)
GizmoLedge::PositionNextPiece(GizmoLedge*)
GizmoLedge::PositionPrevPiece(GizmoLedge*)
GizmoLedge::GizmoLedge()
GizmoLedge::GetClass() const
GizmoLedge::Activate(bool)
GizmoLedge::SetupDynoListener(MechCharacter*)
GizmoLedgeManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoLedge::operator=(GizmoLedge const&)
GizmoLedgeManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoLedgeManager::FindLedgeFromPtr(void*)
GizmoLedgeManager::FixUp_AI(AIManager&)
GizmoLedgeManager::FixUp_AI_Nodes(AIManager&)
GizmoLedgeManager::EventNotify(Event&, NuEventData&)
LegoLedges::SetPlayerAttach(MechCharacter*, NUVEC*, unsigned short)
LegoLedges::IsUsingTrackRootAnim(MechCharacter&)
LegoLedges::AttachPoint(MechCharacter*, WORLDINFO*, NUVEC*, NUVEC*, NUVEC*, unsigned short*, int*, int*, int*, int*, GizmoLedge*, bool*)
LegoLedges::AttachTo(MechCharacter*, GizmoLedge*, NUVEC*, unsigned short)
LegoLedges::MoveCode(WORLDINFO*, MechCharacter*)
Ledge_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoLedges::SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoLedges::GetDrawPos(MechCharacter*, NUVEC*)
LegoLedges::GetTargetPos(MechCharacter*, NUVEC*, int)
LegoLedges::FixUp_AI_Nodes(GizmoLedge*, AIManager&)
CMList<VuVec const*>::~CMList()
LegoLedges::FixUp_AI(GizmoLedgeManager&, AIManager&)
GizmoLedge::AIInteract(APIOBJECT* const&, float)
non-virtual thunk to GizmoLedge::AIInteract(APIOBJECT* const&, float)
GizmoLedge::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to GizmoLedge::SetupInteractFocus(Task_PathTo&, AIManager const&)
LedgeDynoListener::LedgeDynoListener(MechCharacter*, GizmoLedge*)
LedgeDynoListener::OverlapBegin(Entity const*, Entity const*)
LegoLedges::GetMinimumSeparationForCharactersOnLedge(MechCharacter const&, MechCharacter const*)
GizmoLedge::~GizmoLedge()
GizmoLedge::~GizmoLedge()
GizmoLedge::IsTwirlLedge()
non-virtual thunk to GizmoLedge::~GizmoLedge()
non-virtual thunk to GizmoLedge::~GizmoLedge()
GizmoLedgeManager::~GizmoLedgeManager()
LegoLedges::~LegoLedges()
LedgeDynoListener::~LedgeDynoListener()
LedgeDynoListener::~LedgeDynoListener()
GizLedgeHelper::~GizLedgeHelper()
LegoLedges::TargetingParameters::TargetingParameters()
LegoLedges::TargetingParameters::SetToDefault()
LegoLedges::CanTwirl(MechCharacter*)
LegoLedges::TwirlLedge_MoveCode(WORLDINFO*, MechCharacter*)
LegoLedges::TwirlLedge_UpdateLoopPadAngle(MechCharacter*)
LegoLedges::TwirlLedge_FlipLoopPadAngle(MechCharacter*)
LegoLedges::TwirlLedge_FindJumpTarget(WORLDINFO*, MechCharacter*, NUVEC*, int*, int*)
LegoLedges::TwirlLedge_GetLoopPadAngle(MechCharacter*)
LegoLedges::TwirlLedge_TurnInput(MechCharacter*)
LegoLedges::TwirlLedge_CheckLedgeForTarget(GizmoLedge*, MechCharacter*, GizmoLedge*, NUVEC*, int*, int*, float*, float*)
TwirlJumpContext::Init()
MechContext* MechContextConstructor<TwirlJumpContext>(MechCharacter&)
TwirlJumpContext::ShutDown()
TwirlJumpContext::TwirlJumpContext(MechCharacter&)
TwirlJumpContext::~TwirlJumpContext()
TwirlJumpContext::~TwirlJumpContext()
TwirlJumpContext::AllowEnter(int, MechContext*)
TwirlJumpContext::AllowLeave(int, MechContext*)
TwirlJumpContext::OnEnter(LevelContainer*)
TwirlJumpContext::UpdateTrackRootScale()
TwirlJumpContext::UpdateJump(bool)
TwirlJumpContext::OnProcess(LevelContainer*, float)
TwirlJumpContext::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
TwirlJumpContext::OnLeave()
TwirlJumpContext::Initialise(GizmoLedge*, NUVEC const&, int const&, short)
LegoContextHandlerBase<TwirlJumpContext>::GetInstanceId() const
LegoContextHandlerBase<TwirlJumpContext>::~LegoContextHandlerBase()
TargetingInterfaceLedge::TargetingInterfaceLedge(GizmoLedge&)
TargetingInterfaceLedge::~TargetingInterfaceLedge()
TargetingInterfaceLedge::~TargetingInterfaceLedge()
TargetingInterfaceLedge::operator=(TargetingInterfaceLedge const&)
TargetingInterfaceLedge::GetRotY()
TargetingInterfaceLedge::GetOwner() const
TargetingInterfaceLedge::GetTargetName() const
TargetingInterfaceLedge::GetGameType()
TargetingInterfaceLedge::GetLedge() const
LegoLevelContainer::LegoLevelContainer(char const*, bool, LevelContainer::LevelContainerMemory, StreamingLevel*)
LegoLevelContainer::~LegoLevelContainer()
non-virtual thunk to LegoLevelContainer::~LegoLevelContainer()
LegoLevelContainer::~LegoLevelContainer()
non-virtual thunk to LegoLevelContainer::~LegoLevelContainer()
LegoLevelContainer::OnReset()
LegoLevelContainer::AddLegoManager(LegoManager&)
LegoLevelContainer::RemoveLegoManager(LegoManager&)
LegoLevelContainer::PreAnimUpdate(bool)
LegoLevelContainer::IsLegoLevelContainer(LevelContainer const&)
LegoLevelThing::ShouldCreateForLevel(StreamingLevel const&)
LegoLevelContainer::AddManagers()
LegoLevelContainer::IsGamePlayLevel() const
LegoLevelContainer::IsLegoSet() const
LegoLevelContainer::CameraPropertiesOverride(int&, int&, int&, NUVEC&, NUMTX&, GAMECAMERA*, NUVEC const&, bool, MechCharacter*, MechCharacter*)
LegoLevelContainer::GetBigBossManager() const
LegoLevelContainer::InitialiseBigBossManager()
LegoLevelContainer::AddFootStep(int, MechCharacter*)
LegoLevelContainer::ParseSkyDiveDeathObject(nufpar_s*)
LegoLevelContainer::CreateMeleeAttackSetManager()
LegoLevelContainer::GetGlobalSettings() const
LegoLevelContainer::OnExitToLevelSetStartDoorName(LEVELDATA const&) const
LegoLevelContainer::OnContinueToLevelSetStartDoorName(LEVELDATA const&) const
LegoLevelContainer::GetExitToLevelMenuText(LegoLevelContainer::ExitTextMode, ExitItemIndex&) const
LegoLevelContainer::GetSaveAndExitToLevel() const
LegoLevelContainer::GetExitToLevel(ExitItemIndex) const
LegoLevelContainer::GetContinueToLevel() const
WORLDINFO::WORLDINFO(LegoLevelContainer&)
WORLDINFO::~WORLDINFO()
WORLDINFO::FindSpline(char const*)
WORLDINFO::FindSplinesBeginningWith(char const*, NuSpline**, int)
WORLDINFO::FindSplineObject(char*)
WORLDINFO::PlaySfx(short, NUVEC const*, NuSoundHandle*, float, float, int, int) const
WORLDINFO::PlaySfx(SFXTypeID const&, NUVEC const*, NuSoundHandle*, float, float, int, int) const
WORLDINFO::CreateScriptProcessor(char const*)
WORLDINFO::GetNextObject(void*, void*)
WORLDINFO::GetCommonPathFull(char*, int) const
WORLDINFO::GetCommonFileFull(char*, int) const
WORLDINFO::GetCommonArtPathFull(char*, int) const
WORLDINFO::GetCommonArtFileFull(char*, int) const
WORLDINFO::GetPathFull(char*, int) const
WORLDINFO::GetFileFull(char*, int) const
WORLDINFO::IsSubLevel() const
WORLDINFO::IsLoadingScreenLevel() const
WORLDINFO::GetParentWorldInfo() const
WORLDINFO::GetFrom(MechCharacter const*)
WORLDINFO::GetFrom(MechCharacter const&)
WORLDINFO::GetFrom(MechVehicle const&)
WORLDINFO::GetFrom(MechObjectInterface&)
LegoLevelContainer::PostLoadInit(cHubContainer*)
LegoLevelContainer::AddAdditionalResident(char const*, unsigned int)
LegoLevelContainer::GetBeforeLoadConfigKeywords() const
LegoLevelContainer::GetAfterLoadConfigKeywords() const
LegoLightBeams::LegoLightBeams()
LegoLightBeams::CreateLightBeam()
LegoLightBeams::CreateGizmoManager()
non-virtual thunk to LegoLightBeams::CreateGizmoManager()
LegoLightBeams::CreateHelper()
LegoLightBeams::OnInit()
LegoLightBeams::OnEnterLevel(LegoLevelContainer&)
LegoLightBeams::GetLightBeamMaterial(GizmoLightBeam*)
LegoLightBeams::GetLightBeamColour(GizmoLightBeam*, nucolour_s&)
LegoLightBeams::OnHitCharacter(MechCharacter&, GizmoLightBeam*, GizmoLightBeam*, NUVEC&, NUVEC&, NUVEC&, float)
LegoLightBeams::CanDamageCharacter(MechCharacter&, GizmoLightBeam*)
LegoLightBeams::OnHitBlowup(GizmoLightBeam&, BlowUp&)
LegoLightBeams::OnHitObstacle(GizmoLightBeam&, GizmoObstacle&)
GizmoLightBeam::~GizmoLightBeam()
non-virtual thunk to GizmoLightBeam::~GizmoLightBeam()
GizmoLightBeam::~GizmoLightBeam()
non-virtual thunk to GizmoLightBeam::~GizmoLightBeam()
GizmoLightBeam::GetClass() const
GizmoLightBeamManager::GizmoLightBeamManager()
GizmoLightBeamManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoLightBeam::CreateLegoSpecials(WORLDINFO*)
GizmoLightBeamManager::LateUpdate(float)
LightBeam_UpdateAllEmitters(WORLDINFO&)
GizmoLightBeamManager::ProcessBeam(GizmoLightBeam*)
GizmoLightBeamManager::ShouldUpdate(GizmoLightBeam*)
GizmoLightBeamManager::UpdateBeam(GizmoLightBeam*)
GizmoLightBeamManager::RenderLightBeam(WORLDINFO&, VuVec*, float, float, nucolour_s, float, float, NuSmartPtr<NuMtl, true>)
GizmoLightBeamManager::DrawBeam(GizmoLightBeam*)
LIGHTBEAMTARGET::GetType()
LightBeam_UpdateBeam(WORLDINFO*, GizmoLightBeam*)
GizmoLightBeamManager::RequestSfx()
GizmoLightBeamManager::ReleaseSfx()
GizmoLightBeam::UpdateFadeOut()
GizmoLightBeam::LoadEx(WORLDINFO*, int)
GizmoLightBeamManager::AllocateProgressData(WORLDINFO*)
GizmoLightBeamManager::ClearProgress(WORLDINFO*, void*)
GizmoLightBeamManager::StoreProgress(WORLDINFO*, void*)
GizmoLightBeamManager::Reset(WORLDINFO*, void*)
GizmoLightBeamManager::Draw(float, ClassManager::eRenderingPriority)
GizmoLightBeam::InstanceMovedEx()
GizmoLightBeamManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoLightBeamManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoLightBeam::Reset()
LightBeam_Release(MechCharacter*)
GizmoLightBeam::SetVisibility(int)
GizmoLightBeam::Activate(bool)
GizmoLightBeam::ActivateRev(int, int)
GizmoLightBeamManager::FindNearest(NUVEC const*, GameObject*, float*, bool)
GizmoLightBeamManager::IsTargetInChain(GizmoLightBeam*, unsigned char, void*)
GizmoLightBeam::GetOutput(int, int)
GizmoLightBeam::GetOutputName(int)
GizmoLightBeam::GetNumOutputs()
LightBeam_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LightBeam_SetLightBeamContext(GameObject*, GizmoLightBeam*)
LightBeam_IncRotation(GameObject*, int)
LightBeam_SetRotation(GameObject*, int)
LightBeam_SetXRotation(GameObject*, int)
LightBeam_SetDirection(GameObject*, NUVEC*)
LightBeam_DrawGameObject(GameObject*)
LightBeam_MoveCode(WORLDINFO*, GameObject*)
GizmoLightBeam::LimitSnap()
GizmoLightBeamManager::~GizmoLightBeamManager()
GizmoLightBeamManager::CheckRayresultForUpdate(LIGHTBEAMTARGET*, FirstPointCollector&)
LegoLightBeams::~LegoLightBeams()
LegoLightBeams::~LegoLightBeams()
LegoLightBeams::CanReflectOffEntity(Entity&, GizmoLightBeam*)
cLightBeamHelper::~cLightBeamHelper()
LegoManager::GetWorldInfo() const
LegoManager::GetLegoLevelContainerPtr() const
CheckpointInitVal::CheckpointInitVal(char const*)
LEGOMessage::~LEGOMessage()
LEGOMessage::~LEGOMessage()
LEGOMessage::IsVal(char const*)
LegoMessages::LegoMessages()
LegoMessages::OnInit()
LegoMessages::~LegoMessages()
LegoMessages::~LegoMessages()
LegoMessages::CreateGizmoManager()
non-virtual thunk to LegoMessages::CreateGizmoManager()
LegoMessages::CreateHelper()
LegoMessages::MessageScopeString(LegoMessages::MessageScope)
LegoMessages::DeleteAreaMessages()
LegoMessages::GetAiMessageManagerFromScope(LegoMessages::MessageScope, WORLDINFO*)
LegoMessages::ResetAllNonGlobalMessages(WORLDINFO*)
LegoMessages::ResetAllMessagesScoped(WORLDINFO*, LegoMessages::MessageScope)
LegoMessages::DeleteLevelMessages(WORLDINFO*, void*)
LegoMessages::ResetLevelMessages(WORLDINFO*, void*)
LegoMessages::ResetProcessorMessages(WORLDINFO*)
LegoMessages::SetMessageEx(WORLDINFO*, char const*, void*, LegoMessages::MessageScope, float, LEGOMessage*)
LegoMessages::CheckMessageEx(WORLDINFO*, char const*, void*, LegoMessages::MessageScope, LEGOMessage*)
LegoMessages::CreateMessageFlowInterfaceForLegoSetFlow(WORLDINFO*, char const*)
LegoMessages::GetNameAndOwnerAndScope(WORLDINFO*, char const*, void**, LegoMessages::MessageScope&, ScriptProcessor*, AIPACKET*)
LegoMessages::ParseCommandLine(int, char**)
LegoMessages::ParseTextFileEntry(WORLDINFO*, LegoMessages::MessageScope, nufpar_s*)
GizmoAIMessageManager::PostLoad()
GizmoAIMessageManager::IsEmpty()
GizmoAIMessageManager::AllocateProgressData(WORLDINFO*)
LegoMessages::ClearProgress(void*)
LegoMessages::DumpMessageProgressInfo(WORLDINFO*, AreaProgress*)
GizmoAIMessageManager::StoreProgress(WORLDINFO*, void*)
GizmoAIMessageManager::ClearProgress(WORLDINFO*, void*)
GizmoAIMessageManager::Reset(WORLDINFO*, void*)
GizmoAIMessageManager::~GizmoAIMessageManager()
GizmoAIMessageManager::~GizmoAIMessageManager()
GizmoAIMessageManager::DestructorEx()
GizmoAIMessageManager::Load(WORLDINFO*, int, int)
GizmoAIMessageManager::EdSave(WORLDINFO*, int)
LegoGizmoSystemBase<LegoMessages>::ShutDown()
LegoGizmoSystemBase<LegoMessages>::ShouldAddManagersForLevel(MechLevelContainer&)
LEGOMessageFlowInterfaceHelper::~LEGOMessageFlowInterfaceHelper()
MessageHelper::~MessageHelper()
LEGOMessageFlowInterfaceHelper::Register()
LEGOMessageFlowInterfaceHelper::CreateInterface(LevelContainer&)
LEGOMessageFlowInterface::LEGOMessageFlowInterface(LevelContainer&)
LEGOMessageFlowInterface::~LEGOMessageFlowInterface()
LEGOMessageFlowInterface::~LEGOMessageFlowInterface()
LEGOMessageFlowInterface::GetClass()
LEGOMessageFlowInterface::GetName()
LEGOMessageFlowInterface::GetNumOutputs()
LEGOMessageFlowInterface::GetOutput(int, int)
LEGOMessageFlowInterface::GetOutputName(int)
LEGOMessageFlowInterface::CloneObject(LevelContainer&, NUVEC&, NUMTX&, Gizmo*)
LEGOMessageFlowInterface::SerialiseProgressData(EdStream&)
LEGOMessageFlowInterface::GetObject()
LEGOMessageFlowInterface::GetHashedNameKey()
LEGOMessageFlowInterface::GetLedFile()
LEGOMessageFlowInterface::GetTypeName()
LEGOMessageFlowInterface::GetGizmoPrefix()
LEGOMessageFlowInterface::GetDefaultOutputIndex()
LEGOMessageFlowInterface::Activate(bool)
LEGOMessageFlowInterface::ActivateRev(int, int)
LEGOMessageFlowInterface::SetVisibility(int)
LEGOMessageFlowInterface::IsActive()
LEGOMessageFlowInterface::IsVisible()
LEGOMessageFlowInterface::AcquireSpecials()
LEGOMessageFlowInterface::Reset()
LEGOMessageFlowInterface::ActivateByComplexGizmo()
LEGOMessageFlowInterface::ResetForLoop()
LEGOMessageFlowInterface::GetTriggeredByPlayerId()
LEGOMessageFlowInterface::SetTriggeredByPlayerId(MechCharacter*)
LEGOMessageFlowInterface::GetBuilderOrigin(NUVEC*)
LEGOMessageFlowInterface::GetRotationMatrix(NUMTX&)
LEGOMessageFlowInterface::HideFromEditor()
LEGOMessageFlowInterface::CanBeAddedToComplexGizmo()
LEGOMessageFlowInterface::GetReference()
SVarMessage::Init()
SVarMessage::Equals(ScriptVariable const*)
SVarMessage::LoadVariable(char const*)
SVarMessage::AsBool() const
SVarMessage::AsFloat() const
SAction_Text2LegoMessage::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarMessage, LEGOMessage*>(int, LEGOMessage*)
SAction_LegoMessage::Exec(ScriptContext&)
SAction_Message2Text::Exec(ScriptContext&)
SAction_MessageSet::Exec(ScriptContext&)
DynamicScriptVariable<LEGOMessage>::~DynamicScriptVariable()
SVarMessage::~SVarMessage()
DynamicScriptVariable<LEGOMessage>::Set(ScriptVariable const*)
DynamicScriptVariable<LEGOMessage>::EventNotify(Event&, NuEventData&)
non-virtual thunk to SVarMessage::~SVarMessage()
non-virtual thunk to SVarMessage::~SVarMessage()
non-virtual thunk to DynamicScriptVariable<LEGOMessage>::EventNotify(Event&, NuEventData&)
SAction_Text2LegoMessage::~SAction_Text2LegoMessage()
SAction_Text2LegoMessage::GetName() const
SAction_Text2LegoMessage::GetInputs(SCmdParams&) const
SAction_Text2LegoMessage::GetOutputs(SCmdParams&) const
SAction_LegoMessage::~SAction_LegoMessage()
SAction_LegoMessage::GetName() const
SAction_LegoMessage::GetInputs(SCmdParams&) const
SAction_LegoMessage::GetOutputs(SCmdParams&) const
SAction_MessageSet::~SAction_MessageSet()
SAction_MessageSet::GetName() const
SAction_MessageSet::GetInputs(SCmdParams&) const
SAction_MessageSet::GetOutputs(SCmdParams&) const
SAction_Message2Text::~SAction_Message2Text()
SAction_Message2Text::GetName() const
SAction_Message2Text::GetInputs(SCmdParams&) const
SAction_Message2Text::GetOutputs(SCmdParams&) const
DynamicScriptVariable<LEGOMessage>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<LEGOMessage>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<LEGOMessage>::~DynamicScriptVariable()
ScriptVariable* CreateObject<SVarMessage>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarMessage>(char const*, ScriptContext&)
SVarMessage::SVarMessage(char const*, sDynamicVariableData, ScriptContext&)
LegoMiniCuts::LegoMiniCuts()
LegoMiniCuts::CreateGizmoManager()
non-virtual thunk to LegoMiniCuts::CreateGizmoManager()
LegoMiniCuts::CreateHelper()
LegoMiniCuts::OnInit()
LegoMiniCuts::OnEnterLevel(LegoLevelContainer&)
LegoMiniCuts::ShouldTakeoverScreen(GizmoMiniCut const&)
LegoMiniCuts::SuppressPlayerControlFor(GizmoMiniCut&, MechCharacter&)
LegoMiniCuts::IsPlayingFor(int)
LegoMiniCuts::SetTakeoverScreenDefault(bool)
LegoMiniCuts::GetTakeoverScreenDefault()
LegoMinicut_IsFullscreenMiniCutInProgress()
GizmoMiniCutManager::FindNearest(NUVEC const*, WORLDINFO*, GizmoMiniCut**, GizmoMinicutPoint**)
GizmoMiniCut::LoadEx(WORLDINFO*, int)
GizmoMinicutPoint::Update_LookAtSpecial(GizmoMinicutPoint&)
GizmoMinicutPoint::SetTargetSpecial(GizmoMiniCut&, LegoSpecial&)
GizmoMiniCut::GetOutput(int, int)
GizmoMiniCut::IsPlaying()
GizmoMiniCut::LateUpdate(float)
GizmoMiniCutManager::LateUpdate(float)
GizmoMiniCut::GetNumOutputs()
GizmoMiniCutManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoMiniCut::GetPos()
GizmoMiniCut::GetOutputName(int)
SetMiniCutGameCam(VuVec const&, float, float, int, bool)
GetPlayerIndexForMiniCut(GizmoMiniCut*, bool*)
CanStartMiniCut(GizmoMiniCut*)
GizmoMiniCut::Activate(bool)
GizmoMiniCut::ActivateRev(int, int)
GizMiniCut_GetGuid(Gizmo*)
GizmoMiniCut::Reset()
GizmoMiniCut::EndStage(int)
GizmoMiniCutManager::AllocateProgressData(WORLDINFO*)
GizmoMiniCutManager::ClearProgress(WORLDINFO*, void*)
GizmoMiniCutManager::StoreProgress(WORLDINFO*, void*)
GizmoMiniCutManager::Reset(WORLDINFO*, void*)
GizmoMiniCut::~GizmoMiniCut()
GizmoMiniCut::GetClass() const
non-virtual thunk to GizmoMiniCut::~GizmoMiniCut()
non-virtual thunk to GizmoMiniCut::~GizmoMiniCut()
GizmoMiniCutManager::~GizmoMiniCutManager()
GizmoMiniCutManager::SaveVersion()
LegoMiniCuts::~LegoMiniCuts()
LegoGizmoSystemBase<LegoMiniCuts>::ShutDown()
LegoGizmoSystemBase<LegoMiniCuts>::ShouldAddManagersForLevel(MechLevelContainer&)
LegoMiniCuts::IsMiniCutInProgress()
GizMiniCutHelper::~GizMiniCutHelper()
LegoMoves::LegoMoves()
LegoMoves::OnInitPostConfig()
LegoMoves::IsJumpButtonPressed(MechCharacter&)
LegoMoves::IsJumpButtonHeld(MechCharacter&)
LegoMoves::IsAirAttackButtonPressed(MechCharacter&)
LegoMoves::IsAirAttackButtonHeld(MechCharacter&)
LegoMoves::GetUsingSprint(MechCharacter const*) const
LegoMoves::~LegoMoves()
GizObst_UpdateHint(WORLDINFO*, HINT_s*)
LegoObstacles::LegoObstacles()
LegoObstacles::CanBeAITrigger(GizmoObstacle*)
LegoObstacles::CanPushObstacle(MechCharacter&, GizmoObstacle*, int)
LegoObstacles::CreateGizmoManager()
non-virtual thunk to LegoObstacles::CreateGizmoManager()
LegoObstacles::CreateHelper()
LegoObstacles::CreateObstacle(EdRegContext&)
LegoObstacles::OnInit()
LegoObstacles::OnInitPostConfig()
LegoObstacles::EventNotify(Event&, NuEventData&)
GizmoObstacleManager::GizmoObstacleManager()
GizmoObstacleManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoObstacle::Init(WORLDINFO*)
GizmoObstacleManager::DestroyGizmoEx(Gizmo*)
GizmoObstacleManager::GizmoHasBeenDestroyed(Gizmo*)
GizmoObstacle::ActivateLevel()
GizmoObstacle::LoadEx(WORLDINFO*, int)
GizmoObstacle::LoadInstanceDataEx(WORLDINFO*, int)
GizmoObstacle::SaveInstanceDataEx(WORLDINFO*)
GizmoObstacle::ComplexFixUpEx(WORLDINFO*, ComplexGizmo*)
GizmoObstacleManager::PostLoad()
GizmoObstacleManager::RequestSfx()
GizmoObstacleManager::ReleaseSfx()
GizObstacle_EvalAveragePosAndRadius(GizmoObstacle*, int)
GizmoObstacle::GetNumOutputs()
GizmoObstacle::GetDefaultOutputIndex()
GizmoObstacle::GetOutput(int, int)
GizmoObstacle::GetOutputName(int)
GizmoObstacle::Activate(bool)
GizmoObstacle::AttachTo_UpdateObstacle()
GizObstacle_StopLooping(GizmoObstacle*, int)
GizObstacle_Stop(GizmoObstacle*)
GizmoObstacle::FixUpKrawlieCollision(bool)
GizmoObstacle::ActivateRev(int, int)
GizObstacle_PlayForwards(GizmoObstacle*, bool, int)
GizObstacle_PlayBackwards(GizmoObstacle*, bool)
GizmoObstacleManager::AllocateProgressData(WORLDINFO*)
GizmoObstacleManager::ClearProgress(WORLDINFO*, void*)
GizmoObstacleManager::StoreProgress(WORLDINFO*, void*)
GizmoObstacle::Reset()
GizmoObstacle::InstanceMovedEx()
GizmoObstacle::GetBuilderOrigin(NUVEC*)
GizmoObstacle::GetLegoSpecialByIndex(int) const
GizmoObstacle::GetNumBuilderHotspots()
GizmoObstacle::GetBuilderStretchHotspotIndex()
GizmoObstacle::GetBuilderHotspotValue(int)
GizmoObstacle::SetBuilderHotspotValue(int, float)
GizmoObstacle::BuilderHotspotMoveCode(int, LegoGamePad*, int, int, int, int)
GizmoObstacle::Blowup(WORLDINFO const*)
GizmoObstacle::EmitCoins()
GizmoObstacle::Targeting_GetCursorPos(NUVEC&, TARGETING_TYPE, int)
GizmoObstacleManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoObstacle::operator=(GizmoObstacle&)
GizmoObstacleManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoObstacle::SetVisibility(int)
GizmoObstacle::Hide(unsigned char, bool)
GizmoObstacle::JumpToComplete()
GizObstacle_JumpToEnd(GizmoObstacle*)
GizmoObstacle::SetGamePos(NUVEC&)
GizmoObstacle::SetGameMtx(NUMTX&)
GizmoObstacle::DriveToMtx(VuMtx&, float)
GizmoObstacle::GetGameMtxNotTranslation(VuMtx&)
GizmoObstacle::SetPhysicsDynamic(bool)
GizmoObstacle::SetPhysicsVelocity(VuVec&)
GizmoObstacle::SetPhysicsJointsActive(bool)
GizmoObstacle::RemainingAnimTime()
GizmoObstacle::GetMinMax(NUVEC&, NUVEC&)
GizmoObstacle::IsPlayingForwards() const
GizmoObstacle::IsPlayingBackwards() const
GizmoObstacle::IsAtEnd()
GizmoObstacle::IsAtStart()
GizmoObstacle::JumpToStart()
GizObstacle_JumpToStart(GizmoObstacle*)
GizmoObstacle::JumpToEnd()
GizmoObstacle::GizmoObstacle(EdRegContext&)
GizmoObstacle::~GizmoObstacle()
non-virtual thunk to GizmoObstacle::~GizmoObstacle()
GizmoObstacle::~GizmoObstacle()
non-virtual thunk to GizmoObstacle::~GizmoObstacle()
GizmoObstacle::GetClass() const
GizmoObstacleManager::Reset(WORLDINFO*, void*)
GizmoObstacleManager::ObstacleOpponent(MechCharacter*, float, float, float, int, unsigned long const&, unsigned long const&, unsigned long const&, GizmoObstacle*)
GizObstacle_PlayToFrame(GizmoObstacle*, float)
GizObstacle_PosWithinBox(GizmoObstacle*, NUVEC const*, float, float)
GizObstacle_SatisfyingTerrainChecks(GizmoObstacle*, MechCharacter*)
GizObstacle_PlatIDInObst(GizmoObstacle*, long)
LegoObstacles::SetCameraFocus(MechCharacter&)
LegoObstacles::GetWorldMinMaxBox(GizmoObstacle&, VuVec&, VuVec&)
LegoObstacles::IsPunchable(GizmoObstacle*)
Obst_CamShake(GizmoObstacle*)
GizmoObstacleManager::IsHiddenLayerCullingEnabled()
GizmoObstacleManager::DoHiddenLayerCulling(int, GAMECAMERA&, int, int, int)
GizmoObstacleManager::LateUpdate(float)
GizObstacles_AddTrigger(NUVEC*, int, Gizmo*)
GizObstacle_SetTechnoControlled(GizmoObstacle*, float)
GizObstacle_SetPushControlled(GizmoObstacle*, MechCharacter*, float)
GizObstacle_FindNearestByGameFlags(WORLDINFO*, NUVEC*, MechCharacter*, unsigned int, float*, NUVEC*, int, GizmoObstacle*)
GizmoObstacleManager::FindNearestByGameFlags(NUVEC*, MechCharacter*, unsigned int, float*, NUVEC*, int, GizmoObstacle*)
GizObstacle_FindNearest(WORLDINFO*, NUVEC const&, MechCharacter*, float*, int, ObstacleSearchRecursion, float)
GizmoObstacleManager::FindNearest(NUVEC const*, MechCharacter*, float*, int, float)
GizObstacle_FindByName(WORLDINFO*, char const*, int)
GizmoObstacleManager::FindObstacleByName(char const*, int)
GizObstacle_FindPushObst(WORLDINFO*, MechCharacter*, int)
GizmoObstacleManager::FindPushObst(MechCharacter*, int, float*)
GizmoObstacleManager::TotalScore()
GizmoObstacleManager::Draw(float, ClassManager::eRenderingPriority)
GizmoObstacleManager::ActivateLevel()
GizmoObstacleManager::DeactivateLevel()
GizmoObstacleManager::EventNotify(Event&, NuEventData&)
GizObstacles_Hit(WORLDINFO const*, GizmoObstacle*, NUVEC*, int, int, Bolt*)
GizmoObstacle_VerifyLOS(GizmoObstacle*, NUVEC const*, NUVEC const*, NUVEC const*, long)
GizmoObstacleManager::BoltHitPlat(Bolt*)
GizmoObstacleManager::GetBestBoltTarget(float*, NUVEC*, NUVEC*, void*, NUVEC*, NUVEC*, float, float, int, int, BoltTypeID const&, MechObjectData&)
GizmoObstacleManager::BoltHit(WORLDINFO*, void*, NUVEC*, int, float, NUVEC*, NUVEC*, Bolt*, unsigned int)
GizmoObstacle::CalcGrappleFacing() const
GizmoObstacle::AIInteract(APIOBJECT* const&, float)
non-virtual thunk to GizmoObstacle::AIInteract(APIOBJECT* const&, float)
GizmoObstacle::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to GizmoObstacle::SetupInteractFocus(Task_PathTo&, AIManager const&)
GizmoObstacle::CanInteract(APIOBJECT* const&)
non-virtual thunk to GizmoObstacle::CanInteract(APIOBJECT* const&)
GizmoObstacle::GetMechObjectInterface()
GizmoObstacle::BlendForwardSpeed(float, float)
GizmoObstacle::BlendBackwardSpeed(float, float)
GizmoObstacle::IsForwardBlending() const
GizmoObstacle::IsBackwardBlending() const
GizmoObstacle::AddKrawlieCollision()
GizmoObstacle::RemoveKrawlieCollision()
GizmoObstacle::IncrementPullObstButtonBashTimer()
GizmoObstacle::DecrementPullObstButtonBashTimer(float)
GizmoObstacle::GetPullObstOnScreenProgress()
GizmoObstacleManager::~GizmoObstacleManager()
LegoObstacles::~LegoObstacles()
LegoObstacles::CanBeGrappled(GizmoObstacle*)
LegoObstacles::OnPushObstacleFinished(MechCharacter&, GizmoObstacle&)
LegoObstacles::OnPushObstacleFailed(MechCharacter&, GizmoObstacle&)
LegoObstacles::OnPushObstacleUpdate(MechCharacter&, GizmoObstacle&)
LegoObstacles::CanTriggerProximity(GizmoObstacle&, MechCharacter&)
LegoObstacles::MoveCode(MechCharacter&, LegoLevelContainer*)
LegoObstacles::CanTriggerProximityObstacleWhileDead(GizmoObstacle*, MechCharacter*)
LegoObstacles::DontAddKrawlieCollision(GizmoObstacle*)
LegoObstacles::PullObstRequiredButtonBash(GizmoObstacle&)
LegoObstacles::ExtraObstacleCheck(MechCharacter&, GizmoObstacle&)
LegoObstacles::ShouldAllowCameraShakeOverride(GizmoObstacle const&) const
LegoObstacles::GetPushAnimationSpeed(MechCharacter&)
GizmoObstacle::SetInstanceData(GizmoObstacle*)
GizmoObstacle::IsColouredCorrectly()
GizmoObstacle::ColourCorrectly()
GizmoObstacle::IsSkyDiveIndestructableFlagSet()
GizmoObstacle::CharacterEnteredConvexNode(Brain*, ConvexNode const*)
GizmoObstacle::CharacterBouncedOnObstacle(MechCharacter&) const
GizObstacleHelper::~GizObstacleHelper()
LegoPaintings::LegoPaintings()
LegoPaintings::CreateGizmoManager()
non-virtual thunk to LegoPaintings::CreateGizmoManager()
LegoPaintings::CreateHelper()
LegoPaintings::OnInit()
LegoPaintings::EventNotify(Event&, NuEventData&)
GizmoPaintingManager::NotifyDeleteSpecial(LegoSpecial*)
GizmoPainting::GizmoPainting()
GizmoPainting::~GizmoPainting()
non-virtual thunk to GizmoPainting::~GizmoPainting()
GizmoPainting::~GizmoPainting()
non-virtual thunk to GizmoPainting::~GizmoPainting()
GizmoPainting::GetClass() const
GizmoPainting::InitDefaultMaterial()
GizmoPainting::SetMaterialMode(GizmoPainting::MaterialMode)
GizmoPainting::ActivateLevel()
GizmoPainting::DeactivateLevel()
GizmoPainting::FireBolt(GameObject*, VuVec const&, VuVec const&, BoltTypeID const&)
LegoPaintings::GetVuMtxFromDirection(VuMtx&, VuVec const&)
GizmoPainting::FireBolt(char*, VuVec const&, BoltTypeID const&)
GizmoPainting::TransformPaintingWorldToRealWorld(VuVec const&, VuVec&)
GizmoPainting::DrawSceneSpecials(WORLDINFO*)
CMList<LegoSpecial*>::Append(LegoSpecial* const&, CMList<LegoSpecial*>::ListLink*)
GizmoPainting::GetMirrorCamera(NuCamera const&, NuCamera&)
GizmoPainting::GetHostSpecialNormal(VuVec&)
GizmoPainting::GetHostSpecialCornersWS(VuVec*)
GizmoPainting::RenderImpostorCallback(void*, NURENDERSTAGE)
GizmoPainting::IsVisible() const
GizmoPainting::CreateImpostor()
GizmoPainting::DestroyImpostor(NuImpostor*)
GizmoPainting::SetupImpostor(NuImpostor*)
GizmoPainting::ComputeImpostorLOD(NuImpostor*, NuCamera const*, VuVec const*)
GizmoPainting::GetSpecialGeometry(VuMtx&, VuVec*) const
GizmoPainting::RenderImpostor(float)
GizmoPainting::GetSpecialEllipseMatrix(VuMtx&) const
LegoPaintings::GetLightingState(NuLightState&, float)
GizmoPainting::RenderToTexture()
GizmoPainting::GetHostSpecialAspect()
GizmoPaintingManager::FindPainting(LegoSpecial*) const
GizmoPainting::TransformPaintingWorldToPaintingScreen(VuVec const&, VuVec&)
GizmoPaintingManager::EdSave(WORLDINFO*, int)
GizmoPainting::ComputeLOD(NuCamera const*, VuVec const*)
GizmoPainting::DrawPainting()
GizmoPaintingManager::MakeHighestResolution(char*)
GizmoPaintingManager::AllocateProgressData(WORLDINFO*)
GizmoPaintingManager::ClearProgress(WORLDINFO*, void*)
GizmoPaintingManager::StoreProgress(WORLDINFO*, void*)
GizmoPaintingManager::Reset(WORLDINFO*, void*)
GizmoPaintingManager::ComputeLODs(NuCamera const*, VuVec const*)
GizmoPaintingManager::Draw(float, ClassManager::eRenderingPriority)
GizmoPainting::LoadEx(WORLDINFO*, int)
GizmoPaintingManager::~GizmoPaintingManager()
GizmoPaintingManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
LegoPaintings::~LegoPaintings()
LegoGizmoSystemBase<LegoPaintings>::ShutDown()
PaintingHelper::~PaintingHelper()
CreatePartInterface(PART&)
KillPartInterface(PART&)
TargetingInterfacePart::TargetingInterfacePart(PART&)
TargetingInterfacePart::~TargetingInterfacePart()
TargetingInterfacePart::~TargetingInterfacePart()
TargetingInterfacePart::operator=(TargetingInterfacePart const&)
TargetingInterfacePart::GetPart()
TargetingInterfacePart::GetTargetName() const
TargetingInterfacePart::GetGameType()
TargetingInterfacePart::GetPos(VuVec&, int) const
TargetingInterfacePart::GetRadius() const
TargetingInterfacePart::GetTargetYRot()
TargetingInterfacePart::GetTargetPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfacePart::GetMtx(VuMtx&, int)
TargetingInterfacePart::GetTargetFloorPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfacePart::GetTargetMom(VuVec&, TARGETING_TYPE)
TargetingInterfacePart::GetTargetCursorPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfacePart::GetLevelContainer() const
TargetingInterfacePart::IsTargetStillValid()
TargetingInterfacePart::GetInterfaceType() const
TargetingInterfacePart::GetThrowingGlow()
LegoPickups::LegoPickups()
LegoPickups::CreateGizmoManager()
non-virtual thunk to LegoPickups::CreateGizmoManager()
LegoPickups::CreateHelper()
LegoPickups::FindByPID(WORLDINFO&, int) const
LegoPickupManager::FindByPID(int) const
LegoPickups::GetGamePickupSize()
LegoPickups::SetNextPickupAllocateAddress(void*)
LegoPickups::CreatePickup()
LegoPickups::OnInit()
LegoPickupManager::OnInit()
LegoPickups::GetPickupRange(WORLDINFO*, bool)
LegoPickups::GetPickupScale(WORLDINFO*, bool)
LegoPickups::GetPickupGravity(WORLDINFO*, bool)
LegoPickups::Do2DCollision(MechCharacter&, float&)
LegoPickupManager::DoForEachPickup(void (*)(GizmoPickup&, void*), void*)
GizmoPickup::GetNUHSpecial() const
GizPickup_InitVFX(GIZPICKUPVFXTABLE_s*, int)
PickupsToPanel(WORLDINFO*)
ReleaseHearts()
AddMiscPickups(WORLDINFO*, NUVEC const*, int, int, int, int, bool)
AddPickups(WORLDINFO*, long, int, int, int, NUVEC const*, NUVEC*, float, int, float, float, MechCharacter*, int, int, bool, bool, int, bool)
GetRandomCoinType()
FillInCoinTally(long, unsigned char*, int)
ReduceTally(int&, unsigned char*)
AddCoinsToPanel(WORLDINFO*, long, NUVEC const*, int, float, MechCharacter*, int, bool, int, NUVEC*)
AddCoinsToLevel(WORLDINFO*, unsigned char*, NUVEC*, NUVEC const*, float, float, bool, bool, bool)
AddHeartAsPart(MechCharacter*, NUVEC const*, NUVEC*, float, bool, int, void (*)(PART*))
GizmoPickup_FindByName(WORLDINFO*, char*)
LegoPickupManager::GetTemplateFromLetter(char)
LegoPickupManager::FindGizmoPickupByName(char*)
LegoPickupManager::FindNearest(NUVEC const*, float*)
GizmoPickup::RenderPickupSpecial(WORLDINFO*, NUMTX&, int, float)
LegoPickupManager::Draw(float, ClassManager::eRenderingPriority)
LegoPickupManager::DrawPickup(float, GizmoPickup*, NUVEC*, int, int, int, int)
LegoPickupManager::DrawPickupSimple(WORLDINFO*, float, GizmoPickupSimple&, float)
GizmoPickup::GizmoPickup()
GizmoPickup::~GizmoPickup()
non-virtual thunk to GizmoPickup::~GizmoPickup()
GizmoPickup::~GizmoPickup()
non-virtual thunk to GizmoPickup::~GizmoPickup()
GizmoPickup::GetClass() const
GizmoPickup::GetOutput(int, int)
GizmoPickup::GetOutputName(int)
GizmoPickup::GetLightPos(NUVEC*)
GizmoPickup::GetNumOutputs()
GizmoPickup::Activate(bool)
GizmoPickup::ActivatePeril(WORLDINFO*)
GizmoPickup::ActivateRev(int, int)
LegoPickups::GetDefaultSmallPickupScale(WORLDINFO*)
LegoPickups::GetDefaultSmallPickupRange(WORLDINFO*)
LegoPickups::GetDefaultSmallPickupGravity(WORLDINFO*)
LegoPickups::GetDefaultBigPickupScale(WORLDINFO*)
LegoPickups::GetDefaultBigPickupRange(WORLDINFO*)
LegoPickups::GetDefaultBigPickupGravity(WORLDINFO*)
Pickups_SetGravity(WORLDINFO*)
Pickups_SetAreaGlobals(WORLDINFO*)
GizmoPickup::SetVisibility(int)
GizmoPickup_UpdateShadowInfo(LevelContainer const*, VuVec const&, float&, unsigned short&, unsigned short&)
GizmoPickup::UpdateShadowInfo()
GizmoPickup::Reset()
GizmoPickupSimple::Reset(WORLDINFO*)
GizmoPickupSimple::RenderPickupSpecial(WORLDINFO*, NUMTX&, int, float)
LegoPickupManager::AllocateProgressData(WORLDINFO*)
LegoPickupManager::ClearProgress(WORLDINFO*, void*)
LegoPickupManager::StoreProgress(WORLDINFO*, void*)
LegoPickupManager::DestroyDynamicPickups(signed char, float)
LegoPickupManager::RemoveDynamicPickup(GizmoPickup*)
LegoPickupManager::Reset(WORLDINFO*, void*)
LegoPickupManager::DestroyCharInsts(WORLDINFO*)
LegoPickupManager::FixUpCharacterIcon(WORLDINFO*, GizmoPickup*)
LegoPickupManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
LegoPickupManager::CreateDynamicPickup()
LegoPickupManager::CreateDynamicPickupAt(NUVEC&, int)
SetCoinType(int, GizmoPickup*)
LegoPickupManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
LegoPickupManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
LegoPickupManager::LegoPickupManager()
LegoPickupManager::~LegoPickupManager()
LegoPickupManager::~LegoPickupManager()
LegoPickupManager::DestroyCharInst(WORLDINFO*, GizmoPickup*)
LegoPickupManager::CollideWithPartyVehicles(GizmoPickup*)
LegoPickupManager::IsHiddenLayerCullingEnabled()
LegoPickupManager::DoHiddenLayerCulling(int, GAMECAMERA&, int, int, int)
LegoPickupManager::LateUpdate(float)
LegoPickupManager::LateUpdate_List(float, int, bool&)
LegoPickupManager::UpdateCharacterIcons(float)
MiniKitDetector(NUVEC*, int, int, int, int)
CoinTrailDebris(WORLDINFO*, NUVEC*, FXTypeID&)
cLightHolder::Update(float)
LegoPickupManager::EdPreSave(WORLDINFO*, int)
LegoPickupManager::DestroyGizmoEx(Gizmo*)
LegoPickupManager::PostLoad()
LegoPickupManager::FixUpVFX()
LegoPickupManager::GetVFXid(int)
LegoPickupManager::PreLoadNew(int, int)
GizmoPickup::LoadEx(WORLDINFO*, int)
GizmoPickups_TotalScore(WORLDINFO*)
GizmoPickup_NumberOfObj(WORLDINFO*, int)
GizmoPickup_NumberOfType(WORLDINFO*, int, char)
GizmoPickup_TurnOnPickup(GizmoPickup*, int)
GizmoPickup_BeenTurnedOn(GizmoPickup*)
GizmoPickups_PostLoad(WORLDINFO*, void*)
GizmoPickups_SetOnOff(WORLDINFO*)
GizmoPickup_InBox(WORLDINFO*, int, NUVEC*, NUVEC*)
CollideSimpleReferenceInfo::CollideSimpleReferenceInfo(MechCharacter&)
LegoPickupManager::CollideSimple(WORLDINFO*, CollideSimpleReferenceInfo&, GizmoPickupSimple*)
LegoPickupManager::Collide_List(MechCharacter*, GizmoCSList&)
LegoPickupManager_Collide_List(LegoGizmoManager&, void*)
GizmoPickups_Collide(WORLDINFO*, MechCharacter*, int)
LegoPickups::CollectPickup(MechCharacter*, GizmoPickup*, WORLDINFO*, bool)
LegoPickups::CollectPickupSimple(MechCharacter*, GizmoPickupSimple*, WORLDINFO*, bool)
CollectCoin(WORLDINFO*, NUVEC const*, int, int, MechCharacter*, bool, int)
Indicators_FindSpecials()
FancyDetector_InitObjects(WORLDINFO*)
FancyDetectorRenderRotated(MechCharacter*, VuVec const&, eCoordSys, NUCOLOUR4, float, nuhspecial_s*, nuhspecial_s*, float, cSplitScreenSegmentInterfaceMgr&, GAMEMESSAGE*)
FancyDetector_DrawMsg(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
MakeFancyDetectorPlayerMask()
FancyDetector(NUVEC*, int, int, int, int, int, GAMEMESSAGE**, int, int, int)
VehicleDetector(NUVEC*)
PhotonTorpedoTargetDetector(NUVEC*)
BlueDockingDetector(NUVEC*, int)
GoldBubbleDetector(NUVEC*)
FreePlayTargetDetector(NUVEC*)
DangerDetector(NUVEC*, bool, int)
MissileDetector(NUVEC*, int)
StoryDetector(NUVEC*)
ScoreMultiplier_IncrementMultiplier(MechCharacter*, int, int, float)
ScoreMultiplier_DrawGameMessage(MechCharacter*, MechCharacter*)
ResetCoinPacket(COINPACKET*)
UpdateCoinPacket(COINPACKET*, bool, int)
CoinsGoToMainTotal(WORLDINFO*)
BrickTotal_Draw(WORLDINFO&, float, float, float, int, float, int, int, int)
GameMsg_DrawAdjustNewPos_BrickToTotal(GAMEMESSAGE*)
CoinTotal_Draw(WORLDINFO&, unsigned long, float, float, float, int, float, int, int, int)
GameMsg_DrawAdjustNewPos_CoinToTotal(GAMEMESSAGE*)
HUDBrickShow(WORLDINFO*)
HUDBrickPulse()
HUDStudPulse()
EndScoreMessage(GAMEMESSAGE*)
Pickup_CollectCoin(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
PartStop_Coin(PART*)
AddCoinsAsParts(WORLDINFO*, int, NUVEC const*, NUVEC*, float, bool, int, bool, bool)
PartMove_VehiclePickup(PART*, float)
SetBonusCoinTarget(WORLDINFO*)
TotalLevelCoinTally(WORLDINFO*, COINTALLY*)
CannotDrawCoins(WORLDINFO*)
SpecialMiniKits_Dump(WORLDINFO*)
SpecialMiniKits_Configure(WORLDINFO*, char*)
SpecialMiniKits_Reset(WORLDINFO*)
SpecialMiniKits_Draw(WORLDINFO*)
PartMove_VehicleHeart(PART*, float)
PartDraw_VehicleHeart(PART*)
LoseCoins(MechCharacter&, eLOSECOINS, int)
IsACoinType(int)
Coin_GetTypeAndVariation(int, unsigned char&, unsigned char&)
DynoVehicle_HeartPartStopCB()
CollectHeart(MechCharacter*, NUVEC*, int, bool)
Pickup_CollectHeart(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectHealth(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectMinikit(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectColouredBrick(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectRedBrick(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
CollectGoldBrick(NUVEC*, GizmoPickup*)
Pickup_CollectGoldBrick(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
Pickup_CollectCharKit(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
PerilMsg_End(GAMEMESSAGE*)
Pickup_CollectHappyToken(WORLDINFO*, GizmoPickup*, int, MechCharacter*, bool, int)
DrawHappyTokenFn_DEFAULT(WORLDINFO*, int, float, float, float)
PickupHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
PickupHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
COINPACKET_setup(MechCharacter&, unsigned int)
PickupHelper::~PickupHelper()
LegoPickups::~LegoPickups()
LegoPickups::GetPickupSysTable()
LegoPickups::GetNumPickupTypes()
LegoPickups::ApplyDynamicScale(WORLDINFO*, GizmoPickup*, float*)
LegoPickups::PickupUpdate(GizmoPickup&)
LegoPickups::UpdatePickupTimer()
LegoPickups::CheckRedBrickCheatScale(WORLDINFO*, GizmoPickup*, float*)
LegoPickupManager::GetNumItemsToProcessAndDraw() const
LegoPickupManager::SaveVersion()
cPickupBrickEventData::~cPickupBrickEventData()
Plugs_UpdateHint(WORLDINFO*, HINT_s*)
LegoPlugs::LegoPlugs()
LegoPlugs::CreateGizmoManager()
non-virtual thunk to LegoPlugs::CreateGizmoManager()
LegoPlugs::CreateHelper()
LegoPlugs::CreateGizmoPlug()
Plug_SetForceClipPlugsPluggedToNotShowTakeHereArrow(bool)
Plug_GetForceClipPlugsPluggedToNotShowTakeHereArrow()
GizmoPlug_SaveAnimSetData(GameAnimObj*, int)
GizmoPlugs_ReadAnimSetData(GameAnimObj*, int)
GizmoPlug::LoadEx(WORLDINFO*, int)
GizmoPlug::Activate(bool)
GizmoPlug::SetVisibility(int)
GizmoPlug::ActivateRev(int, int)
Plug_FindFromItem(WORLDINFO*, GizItem*)
GizmoPlug::Reset()
GizmoPlug::ActivateByComplexGizmo()
GizmoPlugManager::AllocateProgressData(WORLDINFO*)
GizmoPlugManager::ClearProgress(WORLDINFO*, void*)
GizmoPlugManager::StoreProgress(WORLDINFO*, void*)
GizmoPlugManager::Reset(WORLDINFO*, void*)
Plug_Plug(GizmoPlug*, MechCharacter*, unsigned short, GizItem*, LegoItemType*, int)
GizmoPlugManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoPlugManager::DestroyGizmoEx(Gizmo*)
GizmoPlugManager::GizmoHasBeenDestroyed(Gizmo*)
GizmoPlugManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoPlugManager::FindNearest(NUVEC const*, float*, bool, bool, unsigned short, bool, bool, GizmoPlug*, GizmoPlugManager::FindNearestMode)
Plug_MakeDrawMtx(GizmoPlug*, NUMTX*)
GizmoPlugManager::RequestSfx()
GizmoPlugManager::ReleaseSfx()
GizmoPlugManager::EarlyUpdate(float)
GizmoPlugManager::LateUpdate(float)
GizmoPlug::IsUsable()
GizmoPlug::NewPos(NUVEC*)
GizmoPlug::GetLocomotePlugMtx(VuMtx&)
Plug_RespawnItem(GizmoPlug*)
Plug_UnClip(GizmoPlug*)
Plug_PopClip(GizmoPlug*)
UnPlug_Plug(GizmoPlug*, GameObject*, unsigned short, GizItem*, LegoItemType*, int)
GizmoPlugManager::Draw(float, ClassManager::eRenderingPriority)
GizmoPlug::GetNumOutputs()
GizmoPlug::GetOutputName(int)
GizmoPlug::GetOutput(int, int)
GizmoPlug::GizmoPlug()
GizmoPlug::GetClass() const
GizmoPlugManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
LegoPlugs::EventNotify(Event&, NuEventData&)
GizmoPlug::~GizmoPlug()
GizmoPlug::~GizmoPlug()
GizmoPlug::GetGameAnimSet() const
non-virtual thunk to GizmoPlug::~GizmoPlug()
non-virtual thunk to GizmoPlug::~GizmoPlug()
GizmoPlugManager::~GizmoPlugManager()
LegoPlugs::~LegoPlugs()
LegoPlugs::GetSystemDetectorArrowRange()
LegoPlugs::OnPlugPlugged(GizmoPlug&, MechCharacter*, int)
LegoPlugs::CanShowDetectorArrow(GizmoPlug&, MechCharacter*)
LegoPlugs::CanShowPlugButtonPrompt(GizmoPlug&, MechCharacter*)
LegoPlugs::PartyMemberPlugLateUpdate(GizmoPlug&, MechCharacter*, bool)
PlugHelper::~PlugHelper()
onPlugPluggedEventData::~onPlugPluggedEventData()
TargetingInterfacePlug::TargetingInterfacePlug(GizmoPlug&)
TargetingInterfacePlug::~TargetingInterfacePlug()
TargetingInterfacePlug::~TargetingInterfacePlug()
TargetingInterfacePlug::operator=(TargetingInterfacePlug const&)
TargetingInterfacePlug::GetPlug()
TargetingInterfacePlug::GetTargetName() const
TargetingInterfacePlug::GetGameType()
TargetingInterfacePlug::TargetPosDoLOSCheck(NUVEC&, int&)
TargetingInterfacePlug::GetIconPos(VuVec&, int)
TargetingInterfacePlug::GetThrowingGlow()
ClimbPole_UpdateHint(WORLDINFO*, HINT_s*)
LegoPoles::LegoPoles()
LegoPoles::CreateGizmoManager()
non-virtual thunk to LegoPoles::CreateGizmoManager()
LegoPoles::CreateHelper()
LegoPoles::Init()
LegoPoles::OnInitPostConfig()
LegoPoles::IsPoleClimbAnim(short)
GizmoPole::LoadEx(WORLDINFO*, int)
GizmoPole::Activate(bool)
GizmoPole::ActivateRev(int, int)
GizmoPole::SetVisibility(int)
GizmoPole::SetAIAvoid(bool)
GizmoPole::Reset()
GizmoPole::GetOutputName(int)
GizmoPole::GetNumOutputs()
GizmoPole::GetOutput(int, int)
GizmoPole::GetPolePositionInfo(VuVec&, VuVec&, VuMtx&) const
GizmoPole::GetPolePlayerPositionInfo(VuVec const&, VuVec&, VuVec&, VuMtx&, VuVec&, VuVec&, float&, float*) const
GizmoPole::CalcCircumferencePositionAndRotation(MechCharacter*, VuVec const&, VuVec&, VuVec&, VuVec&, float&, float*) const
GizmoPole::InCylinder(MechCharacter*, float*, bool)
GizmoPole::IsFacingPoint(MechCharacter*, VuVec const&, bool)
GizmoPole::CanCharacterAttach(MechCharacter&)
GizmoPole::CheckAndWorkObjAttach(MechCharacter&)
GizmoPole::ComplexFixUpEx(WORLDINFO*, ComplexGizmo*)
GizmoPole::SetPlayerAnims(MechCharacter*, eLEGOPOLEANIM)
GizmoPole::RotatePlayer(MechCharacter*, int)
GizmoPole::GetRotationMtx() const
GizmoPoleManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoPoleManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoPoleManager::RenderPole(GizmoPole*, NUVEC*, unsigned short)
GizmoPoleManager::AllocateProgressData(WORLDINFO*)
GizmoPoleManager::ClearProgress(WORLDINFO*, void*)
GizmoPoleManager::StoreProgress(WORLDINFO*, void*)
GizmoPoleManager::Reset(WORLDINFO*, void*)
GizmoPoleManager::GizmoPoleManager()
GizmoPoleManager::EventNotify(Event&, NuEventData&)
GizmoPoleManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoPoleManager::LateUpdate(float)
GizmoPoleManager::FixUp_AI_Nodes(AIManager&)
GizmoPoleManager::FixUp_AI(AIManager&)
GizmoPoleManager::TryCreateAIJumpDownLink(AIManager&, VuVec const&, VuVec const&, float, GizmoPole*, int)
LegoPoles::CanClimbPoles(MechCharacter*)
Pole_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Pole_MoveCode(MechCharacter*, WORLDINFO*)
ObjOnPole(MechCharacter*)
GizmoPole::~GizmoPole()
GizmoPole::~GizmoPole()
GizmoPole::GetClass() const
non-virtual thunk to GizmoPole::~GizmoPole()
non-virtual thunk to GizmoPole::~GizmoPole()
GizmoPoleManager::~GizmoPoleManager()
GizmoPoleManager::SaveVersion()
LegoPoles::~LegoPoles()
PoleHelper::~PoleHelper()
LegoPortals::LegoPortals()
LegoPortals::CreateGizmoManager()
non-virtual thunk to LegoPortals::CreateGizmoManager()
LegoPortals::CreateHelper()
GizmoPortalManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoPortalManager::PostLoad()
GizmoPortal::Activate(bool)
GizmoPortal::ActivateRev(int, int)
GizmoPortal::GetNumOutputs()
GizmoPortal::GetOutput(int, int)
GizmoPortal::GetOutputName(int)
GizmoPortalManager::AllocateProgressData(WORLDINFO*)
GizmoPortalManager::ClearProgress(WORLDINFO*, void*)
GizmoPortalManager::StoreProgress(WORLDINFO*, void*)
GizmoPortalManager::Reset(WORLDINFO*, void*)
GizmoPortal::~GizmoPortal()
GizmoPortal::GetClass() const
non-virtual thunk to GizmoPortal::~GizmoPortal()
non-virtual thunk to GizmoPortal::~GizmoPortal()
GizmoPortalManager::~GizmoPortalManager()
GizmoPortalManager::EdSave(WORLDINFO*, int)
LegoPortals::~LegoPortals()
LegoGizmoSystemBase<LegoPortals>::ShutDown()
LegoGizmoSystemBase<LegoPortals>::ShouldAddManagersForLevel(MechLevelContainer&)
PortalHelper::~PortalHelper()
PushBlocks_UpdateHint(WORLDINFO*, HINT_s*)
LegoPushBlockManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
LegoPushBlockManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
PushBlock::operator=(PushBlock&)
PushBlock::SetSpecial(LegoSpecial*)
LegoPushBlockManager::BoltHitPlat(Bolt*)
LegoPushBlockManager::GetBestBoltTarget(float*, NUVEC*, NUVEC*, void*, NUVEC*, NUVEC*, float, float, int, int, BoltTypeID const&, MechObjectData&)
LegoPushBlockManager::FindFromSpecial(LegoSpecial&)
LegoPushBlockManager::Reset(WORLDINFO*, void*)
PushBlock::SetState(PushBlock::State)
LegoPushBlockManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
PushBlock::SetUser(MechCharacter*)
PushBlock::Process(float)
LegoPushBlockManager::AllocateProgressData(WORLDINFO*)
LegoPushBlockManager::ClearProgress(WORLDINFO*, void*)
LegoPushBlockManager::StoreProgress(WORLDINFO*, void*)
LegoPushBlockManager::ReturnToStart(PushBlock&)
LegoPushBlocks2::LegoPushBlocks2()
LegoPushBlocks2::CanPushBlock(MechCharacter&, PushBlock&, bool)
LegoPushBlocks2::CreateGizmoManager()
non-virtual thunk to LegoPushBlocks2::CreateGizmoManager()
LegoPushBlocks2::CreateHelper()
LegoPushBlocks2::OnInit()
PushBlock::SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoPushBlocks2::OnEnterLevel(LegoLevelContainer&)
LegoPushBlocks2::OnExitLevel(LegoLevelContainer&)
LegoPushBlocks2::ReturnToStart(PushBlock&)
PushBlock::PushBlock()
PushBlock::~PushBlock()
non-virtual thunk to PushBlock::~PushBlock()
PushBlock::~PushBlock()
non-virtual thunk to PushBlock::~PushBlock()
PushBlock::GetClass() const
PushBlock::LoadEx(WORLDINFO*, int)
PushBlock::Reset()
PushBlock::ResetSpecial()
PushBlock::IsPluggedInto(unsigned char) const
PushBlock::IsBeingPushed() const
PushBlock::InstanceMovedEx()
PushBlock::AcquireSpecials()
PushBlock::PlayMovingSound(float, float)
PushBlock::OnStopPushing(MechCharacter*)
PushBlock::CalcAngleToBlock(MechCharacter&, float*)
PushBlock::ProcessFree(float)
PushBlock::ProcessPlugging(float)
PushBlock::ProcessPlugged(float)
PushBlock::TemporarilySetDynamic()
PushBlock::OnStartPushing(MechCharacter*)
PushBlock::CheckPlugging()
PushBlock::UpdateShove()
PushBlock::CanNudgeWithBoltsWhenDynamic()
PushBlock::GetOutputName(int)
PushBlock::GetOutput(int, int)
PushBlock::SetVisibility(int)
PushBlock::CreateJoint()
PushBlock::SetYRot(unsigned short)
PushBlock::AIInteract(APIOBJECT* const&, float)
non-virtual thunk to PushBlock::AIInteract(APIOBJECT* const&, float)
PushBlock::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to PushBlock::SetupInteractFocus(Task_PathTo&, AIManager const&)
PushBlock::CanInteract(APIOBJECT* const&)
non-virtual thunk to PushBlock::CanInteract(APIOBJECT* const&)
LegoPushBlockManager::~LegoPushBlockManager()
LegoPushBlockManager::RegisterProcessing()
LegoPushBlockManager::SaveVersion()
LegoPushBlocks2::~LegoPushBlocks2()
LegoPushBlocks2::Update(PushBlock*)
LegoPushBlocks2::CreatePushBlock()
LegoPushBlocks2::TargetPushBlocks()
PushBlock::SetInstanceData(Gizmo*)
LegoPushBlockHelper::~LegoPushBlockHelper()
PushBlockListener::~PushBlockListener()
PushBlockListener::AllowCollision(Entity const*, Entity const*)
PushBlockListener::Collision(Character*, Entity*, ContactPoint&)
PushBlockListener::ContactJoints(LinkedList<Joint>&)
LegoAIBehaviourScatterEventData::~LegoAIBehaviourScatterEventData()
LegoPuzzles::LegoPuzzles()
LegoPuzzles::OnInit()
LegoPuzzles::CreateGizmoManager()
non-virtual thunk to LegoPuzzles::CreateGizmoManager()
LegoPuzzles::CreateHelper()
LegoPuzzles::OnInitPostConfig()
LegoPuzzles::Release(MechCharacter*)
LegoPuzzles::CreatePuzzle()
LegoPuzzles::SetUsingPuzzleAnimation(MechCharacter*, GizmoPuzzle*)
LegoPuzzles::DrawPuzzle(GizmoPuzzle*)
GizmoPuzzle::SetDontBlockBitsGlowed(unsigned short)
GizmoPuzzle::GetDrawZRot(int, int)
GizmoPuzzle::ResetPlayerPos(int)
GizmoPuzzle::GetClass() const
GizmoPuzzle::Reset()
GizmoPuzzle::SetSolved(unsigned short)
GizmoPuzzle::SetStage(unsigned short)
GizmoPuzzle::SetBlankPosX(char)
GizmoPuzzle::SetBlankPosY(char)
GizmoPuzzle::SetNewBlankPieceIx(char)
GizmoPuzzle::SetSlidingBlocksToWin()
GizmoPuzzle::SetDoneBlockBits(unsigned short)
GizmoPuzzle::GetOutputName(int)
GizmoPuzzle::GetOutput(int, int)
GizmoPuzzle::LoadEx(WORLDINFO*, int)
GizmoPuzzle::SetName(char*)
GizmoPuzzle::Process(MechCharacter*)
GizmoPuzzle::CheckForComplete()
GizmoPuzzle::CompleteAndTurnOff()
GizmoPuzzle::SetBlankBottomRight()
GizmoPuzzle::SetPositions(unsigned int)
GizmoPuzzle::StorePositions(unsigned int)
GizmoPuzzle::SolveSlidingBlocks()
GizmoPuzzle::RandomiseSlidingBlocks()
GizmoPuzzle::SetRandomMoves(int)
GizmoPuzzle::SetSingleMove(int)
GizmoPuzzleManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoPuzzleManager::GizmoPuzzleDrawBlocks(NUVEC*, int, int, int, float)
GizmoPuzzleManager::Draw(float, ClassManager::eRenderingPriority)
GizmoPuzzleManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoPuzzleManager::SetNew(GizmoPuzzle*, NUVEC*, int)
GizmoPuzzleManager::CalculateSlidingBlockBounds(GizmoPuzzle*)
GizmoPuzzleManager::DestroyGizmoEx(Gizmo*)
GizmoPuzzleManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoPuzzle::InstanceMovedEx()
GizmoPuzzleManager::GizmoPuzzleManager()
GizmoPuzzleManager::PreLoad()
GizmoPuzzleManager::PostLoad()
GizmoPuzzleManager::LateUpdate(float)
GizmoPuzzleManager::Find(MechCharacter*)
GizmoPuzzleManager::FindNearest(NUVEC const*, float*, NUVEC*)
GizmoPuzzle::Release()
GizmoPuzzleManager::MoveCode(MechCharacter*, int)
GizmoPuzzleManager::SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
GizmoPuzzleManager::AllocateProgressData(WORLDINFO*)
GizmoPuzzleManager::StoreProgress(WORLDINFO*, void*)
GizmoPuzzleManager::ClearProgress(WORLDINFO*, void*)
GizmoPuzzleManager::Reset(WORLDINFO*, void*)
GizmoPuzzleManager::RequestSfx()
GizmoPuzzleManager::ReleaseSfx()
GizPuzzle_MoveCode(WORLDINFO*, MechCharacter*, int)
GizPuzzle_UpdateHint(WORLDINFO*, HINT_s*)
GizmoPuzzle::~GizmoPuzzle()
non-virtual thunk to GizmoPuzzle::~GizmoPuzzle()
non-virtual thunk to GizmoPuzzle::~GizmoPuzzle()
GizmoPuzzleManager::~GizmoPuzzleManager()
GizmoPuzzleManager::ShouldFaceOnFail(GizmoPuzzle*)
GizmoPuzzleManager::OnFail(GizmoPuzzle*, MechCharacter*)
LegoPuzzles::~LegoPuzzles()
LegoPuzzles::HasAbility(MechCharacter*)
LegoPuzzles::PrepareToUseAbility(MechCharacter*)
LegoPuzzles::DefaultType()
LegoPuzzles::IsRadial2x2()
LegoPuzzles::GetFailedAnimAction(GizmoPuzzle*)
LegoPuzzles::GameObjCanUsePuzzle(MechCharacter*, GizmoPuzzle*, bool)
GizPuzzleHelper::~GizPuzzleHelper()
LegoRandomGizmos::LegoRandomGizmos()
LegoRandomGizmos::CreateGizmoManager()
non-virtual thunk to LegoRandomGizmos::CreateGizmoManager()
LegoRandomGizmos::CreateHelper()
GizmoRandomManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
createGizRandom(GIZMOSYS*, int, int*, char*)
GizmoRandomManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoRandom::GetOutput(int, int)
GizmoRandom::GetOutputName(int)
GizmoRandom::GetNumOutputs()
GizmoRandom::Activate(bool)
GizmoRandom::EvaluateRandomOutput()
GizmoRandom::EnableOutput(unsigned int, bool)
GizmoRandomManager::AllocateProgressData(WORLDINFO*)
GizmoRandomManager::ClearProgress(WORLDINFO*, void*)
GizmoRandomManager::StoreProgress(WORLDINFO*, void*)
GizmoRandomManager::Reset(WORLDINFO*, void*)
GizmoRandom::~GizmoRandom()
GizmoRandom::GetClass() const
non-virtual thunk to GizmoRandom::~GizmoRandom()
non-virtual thunk to GizmoRandom::~GizmoRandom()
GizmoRandomManager::~GizmoRandomManager()
GizmoRandomManager::Load(WORLDINFO*, int, int)
GizmoRandomManager::EdSave(WORLDINFO*, int)
LegoRandomGizmos::~LegoRandomGizmos()
LegoGizmoSystemBase<LegoRandomGizmos>::ShutDown()
LegoGizmoSystemBase<LegoRandomGizmos>::ShouldAddManagersForLevel(MechLevelContainer&)
RandomHelper::~RandomHelper()
RandomHelper::GetClassFlags()
LegoSFX::LegoSFX()
LegoSFX::Init(char const*, char const*)
LegoSFX::GetSampleId(SFXTypeID const&)
LegoSFX::RegisterProcessing()
LegoSFX::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoSFX::ProcessWeatherEffects(LevelContainer*)
LegoSFX::RegisterType(char const*)
LegoSFX::RequestResourceLoad(SoundEventData*)
LegoSFX::RequestResourceLoad(short)
LegoSFX::GetSample(short)
LegoSFX::RequestResourceLoad(SFXTypeID&)
LegoSFX::GetSample(SFXTypeID const&)
LegoSFX::RequestResourceUnload(ResourceHndl&)
LegoSFX::PlaySample(LevelContainer const&, short, VuVec*, NuSoundHandle*, float, float, bool, int)
LegoSFX::PlaySample(LevelContainer const&, SFXTypeID const&, VuVec*, NuSoundHandle*, float, float, bool, int)
LegoSFX::StopAllSfx(WORLDINFO*)
LegoSFX::PauseAllSfx(WORLDINFO*)
LegoSFX::ResumeAllSfx(WORLDINFO*)
LegoSFX::GetSampleId(char const*)
LegoSFX::GetControllerSpeakerId(MechCharacter*)
LegoSFX::GetCurrentTrackBank(WORLDINFO const&)
LegoSFX::OverrideTrackBank(TrackBank*)
LegoSFX::GetCrossfadeTimes(Track const&, TrackManager::TrackClass, WORLDINFO const&, Options&, float&, float&)
LegoSFX::IsCutsceneTrackCued()
LegoSFX::EventNotify(Event&, NuEventData&)
LegoSFX::LoadWeatherSamples()
LegoSFX::ReleaseWeatherSamples()
LegoSFX::AddStandardLegoBrickSounds(GameAnimSet&)
LegoSFX::AddStandardLegoBrickSounds(RigidObject&)
LegoSFX::AddStandardLegoBrickSounds(LegoSpecial&)
LegoSFX::ParseGameConfigEntry(nufpar_s*)
LegoSFX::SetMasterBusVolume(Options&)
LegoSFX::ResetStickyAttack()
LegoSFX::NotifyFootStepSfxOverride(MechCharacter&, int&)
PlayChatterSfx(GameObject*, short, float)
PlayVehicleEngineSfx(GameObject*, int, float)
GetImpactSfxId(MechCharacter*)
PlayJumpSfx(MechCharacter*, eJUMPSFX)
PlayLandSfx(MechCharacter*, eLANDSFX, int)
PlayFootStepSfx(MechCharacter*, float)
PlayGruntSfx(MechCharacter*)
PlayGreetSfx(MechCharacter*)
PlayHurtSfx(MechCharacter*)
PlayDoomedSfx(MechCharacter&)
PlayDieSfx(MechCharacter*)
PlayPunchSfx(MechCharacter*)
PlaySabreSfx(short, MechCharacter*, NUVEC const*, int)
PlayRepeatSfx(LevelContainer*, short, NuSoundHandle&, int, float, VuVec*)
LegoSFX::ResetMusicTracks()
LegoSFX::CueTrackBank(TrackBank*, WORLDINFO const&, Options&)
LegoSFX::GetActiveTrackClass(WORLDINFO&, Options&)
LegoSFX::UpdateStickyAttackState(WORLDINFO const&)
LegoSFX::UpdateTracks(WORLDINFO const&, Options&)
LegoSFX::~LegoSFX()
LegoSFX::~LegoSFX()
LegoSFX::Init()
MechCharacterFootStepSFX::~MechCharacterFootStepSFX()
LegoPointerHandleTable<SFXType*, short, SFXTypeID>::~LegoPointerHandleTable()
LegoPointerHandleTable<SFXType*, short, SFXTypeID>::~LegoPointerHandleTable()
LegoHandleTable<SFXType*, short, SFXTypeID>::~LegoHandleTable()
LegoHandleTable<SFXType*, short, SFXTypeID>::~LegoHandleTable()
RegisterTypeId(LegoSFX&, char const*, SFXTypeID&)
RegisterAllSfxTypes(LegoSFX&)
RequestCharacterSfxResources_Legacy(CharDefGameData&)
CHARSFX::SetCharDefGameData(CharDefGameData*)
CHARSFX::RequestAll()
ReleaseCharacterSfxResources_Legacy(CharDefGameData&, void*)
RequestLevelSfxResources_Legacy(WORLDINFO*)
ReleaseLevelSfxResources_Legacy(WORLDINFO*)
CHARSFX::CHARSFX()
CHARSFX::Clear()
CHARSFX::RequestSample(SoundEventData*)
PlayRepeatSfx_Legacy(LevelContainer*, short, NuSoundHandle&, int, float, VuVec*)
ActionMusicFn(WORLDINFO&)
MechCharacterAction::Exec(ScriptContext&)
LegoAction_ActivateCharacter::MechCharacterExec(ScriptContext&, MechCharacter&)
LegoAction_DeactivateCharacter::MechCharacterExec(ScriptContext&, MechCharacter&)
LegoAction_MechCharacterJump::MechCharacterExec(ScriptContext&, MechCharacter&)
VanillaScriptEvent::Fire(NuEventData const&)
GameObjectScriptEvent::Fire(NuEventData const&)
GameObjectHitScriptEvent::Fire(NuEventData const&)
LevelScriptEvent::Fire(NuEventData const&)
AreaCompleteScriptEvent::Fire(NuEventData const&)
CutsceneFinishedScriptEvent::Fire(NuEventData const&)
LegoAction_GetPartyMember::Exec(ScriptContext&)
LegoAction_ForceGizmoLayerOn::Exec(ScriptContext&)
LegoAction_ForceGizmoLayerOff::Exec(ScriptContext&)
VanillaScriptEvent::~VanillaScriptEvent()
GameObjectScriptEvent::~GameObjectScriptEvent()
GameObjectHitScriptEvent::~GameObjectHitScriptEvent()
LevelScriptEvent::~LevelScriptEvent()
AreaCompleteScriptEvent::~AreaCompleteScriptEvent()
CutsceneFinishedScriptEvent::~CutsceneFinishedScriptEvent()
MechCharacterAction::~MechCharacterAction()
LegoAction_ActivateCharacter::~LegoAction_ActivateCharacter()
LegoAction_ActivateCharacter::GetName() const
LegoAction_ActivateCharacter::GetInputs(SCmdParams&) const
LegoAction_ActivateCharacter::GetOutputs(SCmdParams&) const
LegoAction_DeactivateCharacter::~LegoAction_DeactivateCharacter()
LegoAction_DeactivateCharacter::GetName() const
LegoAction_DeactivateCharacter::GetInputs(SCmdParams&) const
LegoAction_DeactivateCharacter::GetOutputs(SCmdParams&) const
LegoAction_MechCharacterJump::~LegoAction_MechCharacterJump()
LegoAction_MechCharacterJump::GetName() const
LegoAction_MechCharacterJump::GetInputs(SCmdParams&) const
LegoAction_MechCharacterJump::GetOutputs(SCmdParams&) const
LegoAction_GetPartyMember::~LegoAction_GetPartyMember()
LegoAction_GetPartyMember::GetName() const
LegoAction_GetPartyMember::GetInputs(SCmdParams&) const
LegoAction_GetPartyMember::GetOutputs(SCmdParams&) const
LegoAction_ForceGizmoLayerOn::~LegoAction_ForceGizmoLayerOn()
LegoAction_ForceGizmoLayerOn::GetName() const
LegoAction_ForceGizmoLayerOn::GetInputs(SCmdParams&) const
LegoAction_ForceGizmoLayerOn::GetOutputs(SCmdParams&) const
LegoAction_ForceGizmoLayerOff::~LegoAction_ForceGizmoLayerOff()
LegoAction_ForceGizmoLayerOff::GetName() const
LegoAction_ForceGizmoLayerOff::GetInputs(SCmdParams&) const
LegoAction_ForceGizmoLayerOff::GetOutputs(SCmdParams&) const
LegoGizmoScriptVariable::Init()
LegoGizmoScriptVariable::Equals(ScriptVariable const*)
LegoGizmoScriptVariable::LoadVariable(char const*)
SAction_LegoGizmo::Exec(ScriptContext&)
SAction_WorldLegoGizmo::Exec(ScriptContext&)
GizmoAction::Exec(ScriptContext&)
GizmoAction_LegoGizmo2Text::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_LegoGizmo2Position::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_Reset::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_Trigger::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_SetActive::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_SetVisible::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_SetTriggeredByPlayer::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_GetTriggeredByPlayer::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_FadeIn::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_FadeOut::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_JumpToComplete::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_HasFinished::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_InUse::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_HasFailed::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_GetOutput::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_GetType::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_GetDirection::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_MinicutGetPlayTime::GizmoExec(ScriptContext&, Gizmo*)
GizmoAction_MinicutEndStage::GizmoExec(ScriptContext&, Gizmo*)
LegoGizmoScriptVariable::~LegoGizmoScriptVariable()
LegoGizmoScriptVariable::AsBool() const
LegoGizmoScriptVariable::AsText() const
non-virtual thunk to LegoGizmoScriptVariable::~LegoGizmoScriptVariable()
non-virtual thunk to LegoGizmoScriptVariable::~LegoGizmoScriptVariable()
GizmoAction::~GizmoAction()
GizmoAction_MinicutGetPlayTime::~GizmoAction_MinicutGetPlayTime()
GizmoAction_MinicutGetPlayTime::GetName() const
GizmoAction_MinicutGetPlayTime::GetInputs(SCmdParams&) const
GizmoAction_MinicutGetPlayTime::GetOutputs(SCmdParams&) const
SAction_LegoGizmo::~SAction_LegoGizmo()
SAction_LegoGizmo::GetName() const
SAction_LegoGizmo::GetInputs(SCmdParams&) const
SAction_LegoGizmo::GetOutputs(SCmdParams&) const
SAction_WorldLegoGizmo::~SAction_WorldLegoGizmo()
SAction_WorldLegoGizmo::GetName() const
SAction_WorldLegoGizmo::GetInputs(SCmdParams&) const
SAction_WorldLegoGizmo::GetOutputs(SCmdParams&) const
GizmoAction_LegoGizmo2Text::~GizmoAction_LegoGizmo2Text()
GizmoAction_LegoGizmo2Text::GetName() const
GizmoAction_LegoGizmo2Text::GetInputs(SCmdParams&) const
GizmoAction_LegoGizmo2Text::GetOutputs(SCmdParams&) const
GizmoAction_LegoGizmo2Position::~GizmoAction_LegoGizmo2Position()
GizmoAction_LegoGizmo2Position::GetName() const
GizmoAction_LegoGizmo2Position::GetInputs(SCmdParams&) const
GizmoAction_LegoGizmo2Position::GetOutputs(SCmdParams&) const
GizmoAction_Reset::~GizmoAction_Reset()
GizmoAction_Reset::GetName() const
GizmoAction_Reset::GetInputs(SCmdParams&) const
GizmoAction_Reset::GetOutputs(SCmdParams&) const
GizmoAction_JumpToComplete::~GizmoAction_JumpToComplete()
GizmoAction_JumpToComplete::GetName() const
GizmoAction_JumpToComplete::GetInputs(SCmdParams&) const
GizmoAction_JumpToComplete::GetOutputs(SCmdParams&) const
GizmoAction_Trigger::~GizmoAction_Trigger()
GizmoAction_Trigger::GetName() const
GizmoAction_Trigger::GetInputs(SCmdParams&) const
GizmoAction_Trigger::GetOutputs(SCmdParams&) const
GizmoAction_SetActive::~GizmoAction_SetActive()
GizmoAction_SetActive::GetName() const
GizmoAction_SetActive::GetInputs(SCmdParams&) const
GizmoAction_SetActive::GetOutputs(SCmdParams&) const
GizmoAction_SetVisible::~GizmoAction_SetVisible()
GizmoAction_SetVisible::GetName() const
GizmoAction_SetVisible::GetInputs(SCmdParams&) const
GizmoAction_SetVisible::GetOutputs(SCmdParams&) const
GizmoAction_FadeIn::~GizmoAction_FadeIn()
GizmoAction_FadeIn::GetName() const
GizmoAction_FadeIn::GetInputs(SCmdParams&) const
GizmoAction_FadeIn::GetOutputs(SCmdParams&) const
GizmoAction_FadeOut::~GizmoAction_FadeOut()
GizmoAction_FadeOut::GetName() const
GizmoAction_FadeOut::GetInputs(SCmdParams&) const
GizmoAction_FadeOut::GetOutputs(SCmdParams&) const
GizmoAction_SetTriggeredByPlayer::~GizmoAction_SetTriggeredByPlayer()
GizmoAction_SetTriggeredByPlayer::GetName() const
GizmoAction_SetTriggeredByPlayer::GetInputs(SCmdParams&) const
GizmoAction_SetTriggeredByPlayer::GetOutputs(SCmdParams&) const
GizmoAction_GetTriggeredByPlayer::~GizmoAction_GetTriggeredByPlayer()
GizmoAction_GetTriggeredByPlayer::GetName() const
GizmoAction_GetTriggeredByPlayer::GetInputs(SCmdParams&) const
GizmoAction_GetTriggeredByPlayer::GetOutputs(SCmdParams&) const
GizmoAction_HasFinished::~GizmoAction_HasFinished()
GizmoAction_HasFinished::GetName() const
GizmoAction_HasFinished::GetInputs(SCmdParams&) const
GizmoAction_HasFinished::GetOutputs(SCmdParams&) const
GizmoAction_HasFailed::~GizmoAction_HasFailed()
GizmoAction_HasFailed::GetName() const
GizmoAction_HasFailed::GetInputs(SCmdParams&) const
GizmoAction_HasFailed::GetOutputs(SCmdParams&) const
GizmoAction_InUse::~GizmoAction_InUse()
GizmoAction_InUse::GetName() const
GizmoAction_InUse::GetInputs(SCmdParams&) const
GizmoAction_InUse::GetOutputs(SCmdParams&) const
GizmoAction_GetOutput::~GizmoAction_GetOutput()
GizmoAction_GetOutput::GetName() const
GizmoAction_GetOutput::GetInputs(SCmdParams&) const
GizmoAction_GetOutput::GetOutputs(SCmdParams&) const
GizmoAction_GetType::~GizmoAction_GetType()
GizmoAction_GetType::GetName() const
GizmoAction_GetType::GetInputs(SCmdParams&) const
GizmoAction_GetType::GetOutputs(SCmdParams&) const
GizmoAction_GetDirection::~GizmoAction_GetDirection()
GizmoAction_GetDirection::GetName() const
GizmoAction_GetDirection::GetInputs(SCmdParams&) const
GizmoAction_GetDirection::GetOutputs(SCmdParams&) const
GizmoAction_MinicutEndStage::~GizmoAction_MinicutEndStage()
GizmoAction_MinicutEndStage::GetName() const
GizmoAction_MinicutEndStage::GetInputs(SCmdParams&) const
GizmoAction_MinicutEndStage::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<LegoGizmoScriptVariable>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<LegoGizmoScriptVariable>(char const*, ScriptContext&)
LegoShooting::LegoShooting()
LegoShooting::Init()
LegoShooting::ParseGameConfigEntry(nufpar_s*)
LegoShooting::OnInitPostConfig()
LegoShooting::EventNotify(Event&, NuEventData&)
LegoShooting::CanDoShootTargeting(MechCharacter&)
LegoShooting::ShootTargetingButtonPressed(MechCharacter&)
LegoShooting::HasSufficientAmmoForAdditionalTarget(MechCharacter&, MechObjectData&) const
LegoShooting::CalculateNormalModeConeDist(VuVec const&, VuVec const&, VuVec const&, float, float, unsigned int, bool)
LegoShooting::FindShootTarget(WORLDINFO*, MechCharacter*, BoltType*, TARGET_INFO*, int, unsigned int, float, NUVEC const*, NUVEC const*)
LegoShooting::StartQuickShoot(MechCharacter*, int)
LegoShooting::GetShootDirection(MechCharacter*, NUVEC*, BoltType*)
LegoShooting::SetObjTarget(MechCharacter*, MechCharacter*)
LegoShooting::SetPartTarget(MechCharacter*, PART*)
LegoShooting::SetShootThisFrame(MechCharacter*, BoltTypeID const&, int, LegoItemType*)
LegoShooting::CanShootChecks(MechCharacter*, int, int, LegoItemType*)
LegoShooting::StartShootTargeting(MechCharacter*, bool)
ShootThisFrame_Targeted(MechCharacter*, LegoItemType*)
LegoShooting::IsInShootContext(MechCharacter&)
LegoShooting::SearchForBoltTarget(MechCharacter*, BoltTypeID const&, float, int, int, int&)
LegoShooting::GetTargetOrigin(MechCharacter*, NUVEC*)
LegoShooting::GetTargetDirection(MechCharacter*, NUVEC*, BoltType*)
LegoShooting::FindBoltTarget(MechCharacter*, NUVEC&, NUVEC&, BoltType*, BoltTypeID, float, int, int, int&, int&, unsigned int)
LegoShooting::SetInterfaceTarget(MechCharacter*, MechObjectInterface&)
LegoShooting::FindSidewaysBoltTarget(MechCharacter*, NUVEC&, NUVEC&, BoltType*, BoltTypeID, float, int, int, int&, int&, unsigned int)
Shooting_SetYRot(MechCharacter*)
LegoShooting::DrawPlayerShootTarget(MechCharacter&)
LegoShooting::ShootCode(MechCharacter*, LegoGamePad*, int, int, int, int, int, int, int, float)
LegoShooting::SetSpecialShootThisFrame(MechCharacter*, BoltTypeID const&, LegoItemType*)
LegoShooting::IsInShootTargetingContext(MechCharacter&)
LegoShooting::FireCode(MechCharacter*, int, int, float, float)
LegoShooting::GetShootOrigin(MechCharacter*, NUVEC*)
LegoShooting::ObjTargetPosYAdjust(MechCharacter*)
LegoShooting::ShootThisFrame(MechCharacter*, MechCharacter*)
LegoShooting::Shoot(MechCharacter*, BoltTypeID const&, unsigned char, VuVec*, VuVec*)
LegoShooting::Static_StartShootTargeting(MechCharacter*)
LegoShooting::GetShootActionForTarget(int, MechCharacter*)
LegoShooting::Static_CanStartTargetting(MechCharacter*)
LegoShooting::CanStartTargetting(MechCharacter*)
LegoShooting::GetNextShootTargetingAnim(MechCharacter&)
ShootTargetingTightRopeContextHandler::OnLeave(int)
ShootTightropeContextHandler::OnLeave()
ShootTargetingTightRopeContextHandler::~ShootTargetingTightRopeContextHandler()
ShootTargetingTightRopeContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoContextHandlerBase<ShootTargetingTightRopeContextHandler>::GetInstanceId() const
ShootTightropeContextHandler::~ShootTightropeContextHandler()
ShootTightropeContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoContextHandlerBase<ShootTightropeContextHandler>::GetInstanceId() const
LegoShooting::~LegoShooting()
LegoShooting::CanBlendToShoot(MechCharacter*)
LegoSpecialGizmos::LegoSpecialGizmos()
LegoSpecialGizmos::CreateGizmoManager()
non-virtual thunk to LegoSpecialGizmos::CreateGizmoManager()
LegoSpecialGizmos::CreateHelper()
GizmoSpecialManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
createGizmoSpecial(WORLDINFO*, char*, NUMTX*, bool)
GizmoSpecial::Init(WORLDINFO*)
GizmoSpecial::GetNumOutputs()
GizmoSpecial::GetOutput(int, int)
GizmoSpecial::GetOutputName(int)
GizmoSpecial::Activate(bool)
GizmoSpecial::ActivateRev(int, int)
GizmoSpecial::SetVisibility(int)
GizmoSpecial::Reset()
GizmoSpecial::GetGameAnimSet() const
GizmoSpecialManager::AllocateProgressData(WORLDINFO*)
GizmoSpecialManager::ClearProgress(WORLDINFO*, void*)
GizmoSpecialManager::StoreProgress(WORLDINFO*, void*)
GizmoSpecialManager::Reset(WORLDINFO*, void*)
GizmoSpecialHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
GizmoSpecialHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
GizmoSpecial::~GizmoSpecial()
GizmoSpecial::~GizmoSpecial()
GizmoSpecial::GetClass() const
non-virtual thunk to GizmoSpecial::~GizmoSpecial()
non-virtual thunk to GizmoSpecial::~GizmoSpecial()
GizmoSpecialManager::~GizmoSpecialManager()
GizmoSpecialManager::SaveVersion()
GizmoSpecialManager::Load(WORLDINFO*, int, int)
GizmoSpecialManager::EdSave(WORLDINFO*, int)
GizmoSpecialHelper::~GizmoSpecialHelper()
GizmoSpecialHelper::GetClassFlags()
LegoSpecialGizmos::~LegoSpecialGizmos()
LegoGizmoSystemBase<LegoSpecialGizmos>::ShutDown()
LegoGizmoSystemBase<LegoSpecialGizmos>::ShouldAddManagersForLevel(MechLevelContainer&)
GizSpellIt_GetRandomPos_UnitCircleXZ(VuVec&)
LegoSpellIts::LegoSpellIts()
LegoSpellIts::CreateGizmoManager()
non-virtual thunk to LegoSpellIts::CreateGizmoManager()
LegoSpellIts::CreateHelper()
LegoSpellIts::OnInit()
LegoSpellIts::OnInitPostConfig()
LegoSpellIts::CreateSpellIt()
LegoSpellIts::TotalScore(WORLDINFO*)
GizmoSpellIt::InstanceMovedEx()
GizmoSpellIt::ReCalculateForRepositioning(bool)
GizmoSpellIt::ReBuildArray()
GizmoSpellIt::ActivateLevel()
GizmoSpellIt::Init(WORLDINFO*)
GizmoSpellItManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoSpellItManager::DestroyGizmoEx(Gizmo*)
GizmoSpellItManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoSpellIt::operator=(GizmoSpellIt&)
GizmoSpellItManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoSpellIt::DestroyAllPieces()
GizmoSpellIt::DestroyBricks(bool)
GizmoSpellIt::GizmoSpellIt()
GizmoSpellIt::~GizmoSpellIt()
non-virtual thunk to GizmoSpellIt::~GizmoSpellIt()
GizmoSpellIt::~GizmoSpellIt()
non-virtual thunk to GizmoSpellIt::~GizmoSpellIt()
GizmoSpellIt::GetClass() const
GizmoSpellItManager::FindNearest(NUVEC const*, float*) const
GizmoSpellIt::GetTornadoRadiusAtHeight(float) const
GizmoSpellItManager::Find(char*) const
GizmoSpellItManager::Contains(GizmoSpellIt*, bool) const
GizmoSpellIt::IsReadyToBuild() const
GizmoSpellIt::CheckPiecesInSafeArea(float) const
GizmoSpellIt::SetStage(GizmoSpellIt::SpellItStage)
GizmoSpellIt::InitializeBuilding()
GizmoSpellIt::ResetPieceStates()
GizmoSpellIt::TurnOff()
GizmoSpellItManager::FindNearest(GameObject*, SPELLIT_FIND_ENUM) const
GizmoSpellIt::SetCharacterHeadTarget(MechCharacter*)
GizmoSpellIt::GetFirstUnbuiltPiece() const
GizmoSpellItManager::UpdatePlayerPosition(MechCharacter*, NUVEC*, NUVEC*)
GizmoSpellItManager::ReleaseFromCharacter(MechCharacter*)
GizmoSpellIt::LoadEx(WORLDINFO*, int)
GizmoSpellIt::Activate(bool)
GizmoSpellIt::RevertToStart(GizmoSpellIt::RevertType)
GizmoSpellIt::WakeBricksUp()
GizmoSpellIt::SetVisibility(int)
GizmoSpellIt::SetProgress(GizmoProgress*, unsigned int)
GizmoSpellIt::Reset()
GizmoSpellIt::FixupBricksToPieces()
GizmoSpellIt::IsAlwaysKinematic() const
GizmoSpellIt::InitializeBricks()
GizmoSpellItManager::Reset(WORLDINFO*, void*)
LegoSpellIts::IsSpellItButtonDown(MechCharacter*, GizmoSpellIt*)
GizmoSpellIt::ResetLastSafeAreaTimes()
GizmoSpellIt::ShouldAutoBuild() const
GizmoSpellIt::TriggerCompletionParticles()
GizmoSpellIt::GetDebrisEffectId(GizmoSpellIt::SpellItDebrisEffect) const
GizmoSpellIt::UpdateStage()
GizmoSpellItManager::ActivateLevel()
GizSpellItGoldBrickPartsControllerList::ActivateGoldBrickSpellItControllers()
GizmoSpellItManager::InitializeEffects()
GizSpellItItem::SetBuildStage(GizSpellItItem::BuildStage)
GizSpellItItem::UpdatePosition_BuildingClassic(GizmoSpellIt&, int, float)
GizmoSpellIt::UpdatePositions_BuildingClassic(float)
GizmoSpellIt::IsSpellItOnly()
MatrixSlerp(VuMtx&, VuMtx const&, VuMtx const&, float)
GizmoSpellIt::UpdateLevitationMatrix()
GizmoSpellIt::HasAssemblyBegun() const
GizSpellItItem::UpdatePosition_BuildingMagic(GizmoSpellIt&, int, float)
GizmoSpellIt::UpdatePositions_BuildingMagic(float)
GizmoSpellIt::UpdatePositions_FinalClunkStandard()
GizmoSpellIt::UpdatePositions_FinalClunkLevitation()
GizmoSpellIt::UpdatePositions_Finished()
GizmoSpellIt::UpdateCameraLookAt()
GizmoSpellIt::GetUsingMethod() const
GizmoSpellIt::GetSpinThrowAxis()
GizSpellItItem::GetTimeAllowedOutsideSafeArea(GizmoSpellIt&)
GizmoSpellIt::CheckPieceRespawn(GizSpellItItem&)
GizmoSpellIt::GetNumUnbuiltPieces() const
GizmoSpellIt::GetFirstBuiltPiece() const
GizmoSpellIt::GetRandomUnbuiltPiece() const
GizmoSpellIt::UpdatePositions_KinematicHops(float)
GizmoSpellIt::UpdatePositions_StartHop(float)
GizmoSpellIt::IsGlowTarget() const
GizmoSpellIt::UpdateDebris(float)
GizmoSpellItManager::~GizmoSpellItManager()
GizmoSpellItManager::~GizmoSpellItManager()
GizmoSpellItManager::PostLoad()
GizSpellItGoldBrickPartsControllerList::LoadSpellItCfg()
GizmoSpellItManager::RequestSfx()
GizmoSpellItManager::ReleaseSfx()
GizmoSpellIt::UpdateSFX_BuildingMagic(float)
GizmoSpellIt::UpdateAmbientSFX()
GizmoSpellIt::UpdateSFX(float)
GizmoSpellIt::UpdatePositions(float)
GizmoSpellIt::AreAllBricksAvailable()
GizmoSpellIt::LateUpdate(float)
GizmoSpellItManager::IsHiddenLayerCullingEnabled()
GizmoSpellItManager::DoHiddenLayerCulling(int, GAMECAMERA&, int, int, int)
GizmoSpellItManager::EarlyUpdate(float)
GizSpellItGoldBrickPartsControllerList::OnProcess()
GizmoSpellIt::NotifyNearbyPlayer(MechCharacter*)
GizmoSpellItManager::LateUpdate(float)
GizmoSpellIt::GetAnimObjFromIndex(int)
GizmoSpellIt::GetAnimObjFromPlatID(long)
GizmoSpellItManager::FindBestTarget_Recursive(MechCharacter*, int&, float*)
GizmoSpellItManager::FindBestTarget(MechCharacter*, int&, float*)
GizmoSpellItManager::FindBestTarget2D(MechCharacter*, float, float, float, float, float&, int&, int&)
GizmoSpellIt::GetOutputName(int)
GizmoSpellIt::GetOutput(int, int)
GizmoSpellItManager::AllocateProgressData(WORLDINFO*)
GizmoSpellIt::GetProgressFlags() const
GizmoSpellItManager::ClearProgress(WORLDINFO*, void*)
GizmoSpellItManager::StoreProgress(WORLDINFO*, void*)
GizmoSpellItManager::TotalScore()
GizmoSpellItManager::SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
GizmoSpellIt::GetBuildDuration() const
LegoSpellIts::GetTimeScale(MechCharacter*) const
LegoSpellIts::DrawTwinkles(GizmoSpellIt const&) const
LegoSpellIts::GetSpellItAnim(MechCharacter&, GizmoSpellIt*)
LegoSpellIts::GetBuildItAnim(MechCharacter&, GizmoSpellIt*)
LegoSpellIts::CanObjectUseSpellIt(MechCharacter&, GizmoSpellIt const*, bool, bool)
LegoSpellIts::CanObjectUseBuildIt(MechCharacter&, GizmoSpellIt*, bool)
GizmoSpellIt::IsAnyObstructionInSafeArea()
GizmoSpellIt::Start(MechCharacter*, bool, bool, GizmoSpellIt::UsingMethod)
GizmoSpellIt::Release(bool)
GizmoSpellItManager::MoveCode(MechCharacter*)
GizSpellIts_UpdateHint(WORLDINFO*, HINT_s*)
GizmoSpellIt::Targeting_GetTargetPos(NUVEC&, TARGETING_TYPE, int)
GizmoSpellIt::Targeting_GetCursorPos(NUVEC&, TARGETING_TYPE, int)
GizmoSpellIt::LOS_GetPoint(NUVEC&, TARGETING_TYPE, int)
GizmoSpellIt::Glow_GetPos(NUVEC&, int)
GizmoSpellIt::GetBuilderOrigin(NUVEC*)
GizmoSpellIt::Glow_StillValid(MechCharacter*, int)
GizmoSpellIt::SetAIAvoid(bool)
GizmoSpellIt::CanInteract(APIOBJECT* const&)
non-virtual thunk to GizmoSpellIt::CanInteract(APIOBJECT* const&)
GizmoSpellIt::SmashIncompleteSpellIt()
GizmoSpellIt::Actuate()
GizmoSpellIt::JumpToComplete()
GizmoSpellIt::SetGamePos(NUVEC&)
GizmoSpellIt::UseLineOfSightCheck() const
GizSpellIt_VerifyLOS(GizmoSpellIt*, NUVEC const*, NUVEC const*, NUVEC const*, long)
GizSpellItGoldBrickPartsController::GetPartsAvailableFraction() const
GizSpellItPartsController::OnLevelActivate(WORLDINFO const&)
GizSpellItPartsController::OnProcess(WORLDINFO const&)
GizSpellItGoldBrickPartsControllerList::AddPartsController(WORLDINFO const&, char const*, char const*, int, bool)
GizSpellItGoldBrickPartsControllerList::UpdateGameMessages()
LegoSpellIts::CreateSpellItItem(GameAnimObj*, GizmoSpellIt&)
GizSpellItItem::~GizSpellItItem()
GizSpellItItem::~GizSpellItItem()
GizSpellItItem::OnRespawn()
GizSpellItItem::GetStartMatrixRaw(VuMtx&)
GizmoSpellItManager::SaveVersion()
GizmoSpellItManager::GetDebrisEffectId(GizmoSpellIt::SpellItDebrisEffect, GizmoSpellIt const*) const
GizSpellItGoldBrickPartsController::~GizSpellItGoldBrickPartsController()
GizSpellItGoldBrickPartsController::~GizSpellItGoldBrickPartsController()
LegoSpellIts::~LegoSpellIts()
LegoSpellIts::OnEarlyUpdate(GizmoSpellIt&)
LegoSpellIts::NotifySpellItFinished(GizmoSpellIt const&) const
LegoSpellIts::BuildStageAssembling(GizSpellItItem&)
GizmoSpellIt::GetMechObjectInterfacePtr()
GizmoSpellIt::GetBricksUser()
GizmoSpellIt::GetGameAnimSet() const
GizmoSpellIt::GetNumOutputs()
GizmoSpellIt::GetBuildingPlayer()
SpellItHelper::~SpellItHelper()
CMList<BricksCreator*>::Append(BricksCreator* const&, CMList<BricksCreator*>::ListLink*)
GizSpellItGoldBrickPartsControllerList::~GizSpellItGoldBrickPartsControllerList()
GizSpellItGoldBrickPartsControllerList::~GizSpellItGoldBrickPartsControllerList()
GizSpellItPartsController::GetPartsAvailableFraction() const
GizSpellItPartsController::~GizSpellItPartsController()
GizSpellItPartsController::~GizSpellItPartsController()
CutSubtitles::~CutSubtitles()
CutSubtitles::~CutSubtitles()
CutSubtitles::DrawSubtitles(float)
SubtitlesSRT::~SubtitlesSRT()
SubtitlesSRT::LoadSubtitles(CutsceneSeedInfo const&)
SubtitlesSRT::FormatSubtitleString(NuDynamicStringT<false>&, CutsceneSeedInfo const&)
SubtitlesSRT::ReleaseSubtitles()
CutSubtitle::SubtitleSpaceAhead(float)
CutSubtitle::SubtitleSpaceBehind()
CutSubtitle::ExpandSubtitle(float)
CreateSubtitles()
SubtitleResourceType::CreateResourceInternal(ResourceInfo const&) const
SubtitleResourceInfo::SubtitleResourceInfo(char const*)
SubtitleResourceInfo::~SubtitleResourceInfo()
SubtitleResourceInfo::~SubtitleResourceInfo()
SubtitleResource::SubtitleResource(SubtitleResourceInfo const&)
SubtitleResource::~SubtitleResource()
SubtitleResource::~SubtitleResource()
SubtitleResource::StartLoad()
SubtitleResource::ProcessLoad()
SubtitleResource::AbortLoad()
SubtitleResource::FinishLoad()
SubtitleResource::HasSuccessfullyLoaded()
SubtitleResource::ProcessUnload()
SubtitleResourceHndl::SubtitleResourceHndl()
SubtitleResourceHndl::SubtitleResourceHndl(ResourceHndl const&)
SubtitleResourceHndl::GetSubtitles() const
SubtitleFileRequest::SubtitleFileRequest(char const*)
SubtitleFileRequest::~SubtitleFileRequest()
SubtitleFileRequest::~SubtitleFileRequest()
SubtitleFileRequest::Read(bool volatile*)
DontCollideListener::~DontCollideListener()
DontCollideListener::~DontCollideListener()
LegoSwitches::LegoSwitches()
LegoSwitches::CreateGizmoManager()
non-virtual thunk to LegoSwitches::CreateGizmoManager()
LegoSwitches::CreateHelper()
LegoSwitches::CreateSwitch()
LegoSwitches::OnInit()
LegoSwitches::OnInitPostConfig()
SwitchInputTrigger::IsSwitchTriggered(MechCharacter&, unsigned int, GizSwitch&)
GizSwitch::IsFlagSet(GizSwitch::FLAGS)
SwitchInputTrigger::GetSwitchInputMethod(MechCharacter&, GizSwitch&) const
GizSwitch::GizSwitch()
GizSwitch::~GizSwitch()
GizSwitch::FixUpKrawlieCollision(bool)
GizSwitch::RemoveDontCollideUserDynoListeners()
GizSwitch::RemoveScatterTrigger(TriggerManager&)
non-virtual thunk to GizSwitch::~GizSwitch()
GizSwitch::~GizSwitch()
non-virtual thunk to GizSwitch::~GizSwitch()
GizSwitch::GetClass() const
GizSwitch::SetAIAvoid(bool)
GizSwitch::UpdateTargetPos(bool)
GizSwitch::GetBuildOrigin()
GizSwitch::UpdateBuildPos()
GizSwitch::SetGamePos(NUVEC&)
GizSwitch::SetGameMtx(NUMTX&)
GizSwitchManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizSwitch::Init(WORLDINFO*)
GizSwitchManager::IsHiddenLayerCullingEnabled()
GizSwitchManager::DoHiddenLayerCulling(int, GAMECAMERA&, int, int, int)
GizSwitchManager::LateUpdate(float)
GizSwitch::GameAnimSet_ApplyVisibility()
GizSwitch::LoadInstanceDataEx(WORLDINFO*, int)
GizSwitch::SaveInstanceDataEx(WORLDINFO*)
GizSwitch::LoadEx(WORLDINFO*, int)
GizSwitch::EnsureGotButtonFlagSet()
GizSwitchManager::AllocateProgressData(WORLDINFO*)
GizSwitchManager::GetProgressSwitchCount(GizmoProgress*)
GizSwitchManager::ClearProgress(WORLDINFO*, void*)
GizSwitchManager::StoreProgress(WORLDINFO*, void*)
GizSwitchManager::Reset(WORLDINFO*, void*)
GizSwitchManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizSwitchManager::Draw(float, ClassManager::eRenderingPriority)
GizSwitch::InstanceMovedEx()
GizSwitch::GetBuilderOrigin(NUVEC*)
GizSwitch::Hide(unsigned char, bool)
GizSwitchManager::RequestSfx()
GizSwitchManager::ReleaseSfx()
GizSwitchManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizSwitch::Reset()
GizSwitch::CreateScatterTrigger(TriggerManager&)
GizSwitch::SetVisibility(int)
GizSwitch::IsInteractionAllowed()
GizSwitch::Activate(bool)
GizSwitch::ActivateRev(int, int)
GizSwitch::JumpToComplete()
GizSwitchManager::FindNearestSwitch(NUVEC const*, MechCharacter*, float*, float, GizSwitch*, LegoSwitches::eCANUSE*)
GizSwitchManager::UpdateSwitchFloorTargetsInXZRange(VuVec&, float)
GizSwitch_FullyPulledDown(GizSwitch*)
GizSwitch_BeingPulled(GizSwitch*)
GizSwitch_PullReleased(GizSwitch*)
GizSwitch::GetOutput(int, int)
GizSwitch::GetDefaultOutputIndex()
GizSwitch::GetOutputName(int)
GizSwitch::GetNumOutputs()
GizSwitch::SetPhase(int)
GizSwitch::AddKrawlieCollision()
GizSwitch::RemoveKrawlieCollision()
GizSwitch::SendSetPhaseNetworkEvent()
GizSwitch::AIInteract(APIOBJECT* const&, float)
non-virtual thunk to GizSwitch::AIInteract(APIOBJECT* const&, float)
GizSwitch::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to GizSwitch::SetupInteractFocus(Task_PathTo&, AIManager const&)
GizSwitch::CanInteract(APIOBJECT* const&)
non-virtual thunk to GizSwitch::CanInteract(APIOBJECT* const&)
GizSwitch::CanTagOut() const
GizSwitch::SetTargetPosHeightToSwitchBase()
GizSwitch::FixupDontCollideUserDynoListeners(MechCharacter*)
GizSwitch::AddDontCollideUserDynoListeners(MechCharacter*)
CMList<DynoListener*>::Append(DynoListener* const&, CMList<DynoListener*>::ListLink*)
GizSwitch::Release()
GizSwitch::SetUser(MechCharacter*)
LegoSwitches::GetSearchRange(MechCharacter*)
LegoSwitches::GetTargetHeading(GizSwitch*, MechCharacter*, bool)
LegoSwitches::EventNotify(Event&, NuEventData&)
LegoSwitches::CanCheckForSwitches(MechCharacter&)
LegoSwitches::CheckProximitySwitch(GizSwitch&, MechCharacter&)
LegoSwitches::MoveCode(MechCharacter*)
LegoSwitches::UpdateHint(WORLDINFO&, HINT_s&)
GizSwitch_UpdateHint(WORLDINFO*, HINT_s*)
LegoSwitches::IsUsingASwitch(MechCharacter&) const
LegoSwitches::DisplayButtonPrompt(GizSwitch*, MechCharacter*)
LegoSwitchContextHandler::OnProcess(LevelContainer*, float)
LegoSwitches::ShouldPlayerKeepPulling(MechCharacter&, GizSwitch&)
LegoSwitchContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoSwitchContextHandler::OnLeave()
DontCollideListener::AllowCollision(Entity const*, Entity const*)
SwitchInputTrigger::~SwitchInputTrigger()
GizSwitchManager::~GizSwitchManager()
LegoSwitchContextHandler::~LegoSwitchContextHandler()
LegoSwitches::~LegoSwitches()
LegoSwitches::GameObjectCanUse(GizSwitch&, MechCharacter*, float)
LegoSwitches::GetFloorTargetObjects(GizSwitch*, int&, int&)
LegoSwitches::GetFailedAnimAction(GizSwitch*)
LegoSwitches::OwnerDrawnFloorTarget(GizSwitch*)
LegoSwitches::GameSpecificCheck(MechCharacter*, GizSwitch*)
LegoSwitches::OnPrepareToPull(GizSwitch&, MechCharacter*)
LegoSwitches::OnStartPulling(GizSwitch&, MechCharacter*)
LegoSwitches::OnPulled(GizSwitch&, MechCharacter*)
LegoSwitches::OnPullReleased(GizSwitch&, MechCharacter*)
LegoSwitches::OverrideSwitchBehaviour(GizSwitch&, MechCharacter*, LegoSwitches::eCANUSE&)
GizSwitch::GetPullAction(MechCharacter&)
GizSwitch::GetLoopAction(MechCharacter&)
GizSwitch::GetReleaseAction(MechCharacter&)
GizSwitch::DoDraw()
GizSwitch::InstanceSetup(GizSwitch*)
cGizSwitchHelper::~cGizSwitchHelper()
LegoSystem::EventNotify(Event&, NuEventData&)
LegoSystem::AddManagersForLevel(MechLevelContainer&)
LegoSystem::RemoveManagersForLevel(MechLevelContainer&)
LegoSystem::OnEnterLevel(MechLevelContainer&)
LegoSystem::OnExitLevel(MechLevelContainer&)
LegoSystem::OnResetLevel(MechLevelContainer&)
LegoSystem::~LegoSystem()
MechSystems::~MechSystems()
LegoSystems::CreateSystems(LegoGameBase*)
SystemMixins<MechLevelFlags>::UseDefault()
SystemMixins<MechAbilities>::UseDefault()
SystemMixins<MechGadgetObstacles>::UseDefault()
SystemMixins<MechGadgetSimpleProps>::UseDefault()
SystemMixins<MechGadgetTrafficLights>::UseDefault()
SystemMixins<MechGadgetTriggerAreas>::UseDefault()
SystemMixins<MechHooks>::UseDefault()
SystemMixins<MechGadgetRemotes>::UseDefault()
LegoSystems::~LegoSystems()
MechSystems::~MechSystems()
LegoPointerHandleTable<MechLevelFlag*, short, MechLevelFlagId>::~LegoPointerHandleTable()
LegoPointerHandleTable<MechLevelFlag*, short, MechLevelFlagId>::~LegoPointerHandleTable()
LegoHandleTable<MechLevelFlag*, short, MechLevelFlagId>::~LegoHandleTable()
LegoHandleTable<MechLevelFlag*, short, MechLevelFlagId>::~LegoHandleTable()
MechGadgetObstacles::~MechGadgetObstacles()
MechGadgetObstacles::Init()
MechSystemBase<MechGadgetObstacles, int>::Suppress(int)
MechSystemBase<MechGadgetObstacles, int>::IsSuppressed(int) const
MechGadgetTriggerAreas::~MechGadgetTriggerAreas()
MechGadgetTriggerAreas::Init()
MechSystemBase<MechGadgetTriggerAreas, int>::Suppress(int)
MechSystemBase<MechGadgetTriggerAreas, int>::IsSuppressed(int) const
LegoTargeting::LegoTargeting()
LegoTargeting::Init()
LegoTargeting::ParseGameConfigEntry(nufpar_s*)
LegoTargeting::GetMaxAimTargets(MechCharacter&) const
LegoTargeting_GetBestTargetInterface_IsBestPotentialTargetSoFar(MechObjectInterface&, VuVec const&, VuVec const&, VuVec const&, VuVec const&, bool, BoltTypeID const&, bool, float&)
LegoTargeting::GetBestTargetInterface(MechCharacter*, NUVEC*, NUVEC*, float, float, int, int, BoltTypeID const&, float&)
LegoTargeting::IsWithinAngleCheckBounds(BoltTypeID const&, VuVec const&, VuVec const&, VuVec*)
LegoTargeting::GetBestManualTargetInterface(MechCharacter*, NUVEC*, float, BoltTypeID const*, float&, int)
GameRayCast_TerrainPlatId()
MechObjectData::GetActive()
MechObjectData::GetUnderlyingType() const
VerifyLOS(NUVEC const*, NUVEC const*, NUVEC const*, long, long, float)
CheckLOS_GENERIC(MechCharacter*, TARGETING_TYPE, NUVEC&, MechObjectData&, bool, bool, bool)
MechObjectData::GetGameType() const
MechObjectData::GetBlowup() const
MechObjectData::GetMechCharacterBase() const
MechObjectData::LOS_GetPoint(NUVEC&, WORLDINFO*&, TARGETING_TYPE) const
MechObjectData::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*, float)
MechObjectData::GetTargetRadius() const
TargetData_HasTerrain(MechObjectData&)
MechObjectData::Set(ApiVehicle&)
MechObjectData::IsOnScreen()
MechObjectData::TargetPosDoLOSCheck(NUVEC&, int&) const
MechObjectData::GetGizmo() const
MechObjectData::IsStickyTargetingEnabled() const
MechObjectData::HandleBoltHit(Bolt*, WORLDINFO const*) const
MechObjectData::GetThrowingGlow() const
MechObjectData::IgnoreTerrainWhenThrowTarget() const
MechObjectData::DoesEntityMatchTarget(Entity*)
MechObjectData::GetMechTaggingToData() const
MechObjectData::HaveIGotAMechOpponentInfo() const
MechObjectData::GetMyMechOpponentInfo()
MechObjectData::BestToPunchIfPossible() const
MechObjectData::GetMechVehicle() const
MechObjectData::GetObstacle()
MechObjectData::GetGizmoSpellIt()
MechObjectData::GetPlug()
MechObjectData::GetGizmoTurret()
MechObjectData::GetGizmoGrapple()
MechObjectData::GetGizmoLedge() const
MechObjectData::GetComplexGizmo()
MechObjectData::GetGadgetTargetInterface()
MechObjectData::GetAIConvexLocator()
MechObjectData::GetCustom(int)
MechObjectData::IsGizmo() const
MechObjectData::ContainsEntity(Entity&) const
MechObjectData::IsDeadOrDying()
MechObjectData::IsInteractable(MechCharacter*) const
TargetData_RadiusCheck(NUVEC&, float, MechObjectData&)
TargetData_GetName(MechObjectData&)
TargetData_TargetStillValid(MechObjectData const&)
MechObjectData::SendInput(LegoGamePad const&) const
MechObjectData::GetTorpTargetPositionAndRadius(float*, NUVEC&) const
MechObjectData::GetTargetYRot() const
TargetData_GetTargetPos(NUVEC&, TARGETING_TYPE, MechObjectData const&)
TargetData_GetCurrentPosition(VuVec&, TARGETING_TYPE, MechObjectData const&)
TargetData_SetCurrentPosition(VuVec&, TARGETING_TYPE, MechObjectData const&)
TargetData_DriveToPosition(VuVec&, TARGETING_TYPE, MechObjectData const&)
TargetData_SetDynamic(bool, MechObjectData const&)
TargetData_DisableGravity(bool, MechObjectData const&)
TargetData_GetTargetMtx(VuMtx&, TARGETING_TYPE, MechObjectData&)
TargetData_GetTargetRandomPos(NUVEC&, TARGETING_TYPE, MechObjectData&)
TargetData_GetTargetFloorPos(NUVEC&, TARGETING_TYPE, MechObjectData&)
TargetData_GetTargetHealthBarPos(NUVEC&, TARGETING_TYPE, MechObjectData&)
TargetData_GetTargetMom(NUVEC&, TARGETING_TYPE, MechObjectData&)
TargetData_GetCursorPos(NUVEC&, TARGETING_TYPE, MechObjectData&)
TargetArray::Clear()
TargetArray::Destroy()
TargetArray::Create(int)
TargetArray::ValidateInAutoCleanList()
TargetDataAutoClean_ValidateInList(MechObjectData&)
TargetArray::PopFront()
TargetArray::PushBack(TARGET_ARRAY_DATA&)
TargetArray::Remove(int)
TargetArray::RemoveTargetPtr(void*)
TargetArray::Insert(int, TARGET_ARRAY_DATA&)
TargetArray::Swap(int, int)
TargetArray::Contains(MechObjectData&) const
PlayerTargetArray_Free()
TargetArray::~TargetArray()
PlayerTargetArray_Init(int, int)
TargetArray::TargetArray()
ObjTargetArray_Get(MechCharacter const*)
PlayerTargetArray_Get(int)
TargetContext_StartTargeting(MechCharacter*, TARGETING_TYPE, VuVec*)
TargetContext_CanProcess(MechCharacter*)
TargetContext_UpdateCursor(MechCharacter*, NUVEC*, NUVEC*, float)
TargetContext_SeekToNewTarget(MechCharacter*, MechObjectData*, MechObjectData*)
TargetContext_GetWorldPosFromCursorPos_SimpleRay(MechCharacter*, VuVec&, float, VuVec*)
TargetContext_SimpleRay(MechCharacter*, VuVec&, VuVec const&, VuVec const&, float)
TargetContext_GetWorldPosFromCursorPos(MechCharacter*, VuVec&, eCursor2WorldMode, float, float, VuVec*, VuVec*, eLEGOPHYSICSLAYERBITS, int, FirstPointCollector*, bool)
TargetContext_SetTarget(MechCharacter*, TARGET_INFO&, float, int)
TargetContext_FadeBadTarget(MechCharacter*, MechObjectData*, bool)
TargetContext_InvalidateTarget(void*)
DrawStrafeLockTarget(MechCharacter&)
TargetContext_DrawTarget(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
LegoTargeting::TargetContext_GetCursorDrawingInfo(MechCharacter*, unsigned char*, unsigned char*, unsigned char*, float*, float*, int*)
LegoTargeting::TargetContext_GetTargetDrawingInfo(MechCharacter*, MechObjectData&, sTargetDrawInfo&, bool&, float&)
ObjIsMainCursor(int)
TargetContext_RequestDrawTargetCursors(WORLDINFO&, MechCharacter&, int, NUVEC*, int, int, int, int, int, float, float)
TargetContext_RequestDrawMainCursor(WORLDINFO&, MechCharacter&, int, int, int, int, int, float, float, int)
TargetContext_SetCursorOverrideScale(float)
TargetContext_ShowTarget(MechCharacter*, NUVEC*, int, bool, bool)
TargetContext_FadeTarget(MechCharacter*, bool)
TargetContext_DoneTargeting(MechCharacter*, bool)
MechObjectData::SetupLegoItemAddPart(ADDPART&, GizItem&, int)
MechObjectData::PlayAnimation(float)
MechObjectData::StopAnimation()
MechObjectData::PlayAnimationToPercentage(float)
MechObjectData::IsAtStart()
MechObjectData::IsAtEnd()
MechObjectData::GetAnimationPosition()
MechObjectData::CanPlayBackwards()
MechObjectData::CanAutoReverseAnimation()
TargetDataAutoClean_WipeReferences(void*)
TargetDataAutoClean_ForgetAllInLevel(LevelContainer const&)
MechObjectDataAutoClean::MechObjectDataAutoClean(int)
MechObjectDataAutoClean::MechObjectDataAutoClean(MechObjectDataAutoClean const&)
MechObjectDataAutoClean::~MechObjectDataAutoClean()
MechObjectInterface::~MechObjectInterface()
MechObjectInterface::GetFrom(Brain&)
MechObjectInterface::GetFrom(ApiVehicle&)
MechObjectInterface::GetFrom(MechVehicle&)
MechObjectInterface::GetFrom(PlaceableBase&)
MechObjectInterface::GetFrom(Entity const&)
MechObjectInterface::GetFrom(AddOnOwner const&)
MechObjectInterface::GetFrom(MechCharacter&)
MechObjectInterface::GetFrom(Gizmo&)
MechObjectInterface::GetFrom(MechGadgetBaseInstance&)
MechObjectInterface::GetFrom(MechCharacter*)
MechObjectInterface::GetFrom(MechVehicle*)
MechObjectInterface::GetFrom(AIConvexLocator&)
MechObjectInterface::GetExtents(VuVec&, VuVec&)
MechObjectInterface::~MechObjectInterface()
LegoTargeting::~LegoTargeting()
LegoTargeting::SetNewTarget(MechCharacter*, MechObjectData&)
LegoTargeting::AddNewTarget(MechCharacter*, TARGET_ARRAY_DATA&)
LegoTargeting::OnBeginTargeting(MechCharacter&, TARGETING_TYPE)
LegoTargeting::OnShootRequested(MechCharacter*, MechObjectData&)
NuMechPtr<MechObjectInterface, 8>::ManagedBase::~ManagedBase()
NuMechPtr<MechObjectInterface, 8>::ManagedBase::~ManagedBase()
LegoTechnos::GetRequiredInventoryItem(MechCharacter&, GizmoTechno&)
IsGameObjectUsingTechno(MechCharacter*, GizmoTechno*)
LegoWinchTechnos::LegoWinchTechnos()
LegoTechnos::LegoTechnos()
LegoWinchTechnos::CreateGizmoManager()
non-virtual thunk to LegoWinchTechnos::CreateGizmoManager()
LegoTechnos::CreateGizmoManager()
non-virtual thunk to LegoTechnos::CreateGizmoManager()
LegoTechnos::CreateHelper()
LegoTechnos::OnInitPostConfig()
TechnoSys_Init(TECHNOSYS*, LEVELOBJECT*)
GizmoTechnoManager::CheckFlags(GizmoTechno*, unsigned char)
GizmoTechnoManager::DestroyGizmoEx(Gizmo*)
GizmoTechnoManager::GizmoHasBeenDestroyed(Gizmo*)
GizmoTechnoManager::TgtPos(GizmoTechno*)
GizmoTechnoManager::FindTgt(WORLDINFO*, GizmoTechno*)
GizmoTechnoManager_FindControllingTechnoCallback(LegoGizmoManager&, void*)
GizmoTechnoManager::FindControllingTechno(MechCharacter*, bool)
GizmoTechnoManager::MoveTarget(GizmoTechno*, MechCharacter*)
LegoTechnos::CanUseTechno(MechCharacter&, GizmoTechno&)
LegoTechnos::OnInit()
GizmoTechno::UpdateSpecialVisibility()
GizmoTechnoManager::EarlyUpdate(float)
GizmoTechnoManager::LateUpdate(float)
GizmoTechno::UpdateFloorTargetPos()
GizmoTechno::IsOperated()
GizmoTechno::GetGlowPos(NUVEC*)
GizmoTechnoManager::Draw(float, ClassManager::eRenderingPriority)
GizmoTechno::DrawTechno(WORLDINFO*, NUVEC*, int, int, int, float)
GizmoTechnoManager_FindNearestCallback(LegoGizmoManager&, void*)
GizmoTechnoManager::FindNearestNonRecursive(MechCharacter*, NUVEC const*, float*, int)
GizmoTechnoManager::FindNearest(NUVEC const*, MechCharacter*, float*, float, int)
GizmoTechno::GetOutput(int, int)
GizmoTechno::GetOutputName(int)
GizmoTechno::GetNumOutputs()
GizmoTechno::GizmoTechno()
GizmoTechno::~GizmoTechno()
non-virtual thunk to GizmoTechno::~GizmoTechno()
GizmoTechno::~GizmoTechno()
non-virtual thunk to GizmoTechno::~GizmoTechno()
GizmoTechno::GetClass() const
GizmoTechnoManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoTechno::operator=(GizmoTechno&)
GizmoTechnoManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoTechno::SetVisibility(int)
GizmoTechno::CreateAddOns()
GizmoTechno::Reset()
GizmoTechnoManager::AllocateProgressData(WORLDINFO*)
GizmoTechnoManager::ClearProgress(WORLDINFO*, void*)
GizmoTechnoManager::StoreProgress(WORLDINFO*, void*)
GizmoTechnoManager::Reset(WORLDINFO*, void*)
GizmoTechnoManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoTechno::InstanceMovedEx()
GizmoTechnoManager::PreLoad()
GizmoTechnoManager::PostLoad()
GizmoTechnoManager::PreLoadNew(int, int)
GizmoTechno::SetAIAvoid(bool)
GizmoTechno::LoadEx(WORLDINFO*, int)
GizmoTechnoManager::GetOutOfTechnoContext(MechCharacter*, int)
GizmoTechnoManager::MoveCode(WORLDINFO*, MechCharacter*)
GizmoTechno::IsReady()
GizmoTechnoManager::ObjWinching(MechCharacter*, float*)
GizmoTechnoManager::IsTechnoControlled(MechCharacter*)
GizmoTechnoManager::FindOperator(void*, LegoGamePad**, MechCharacter**)
GizmoTechnoManager::GetTargetTechno(MechCharacter*)
GizmoTechno::ComplexFixUpEx(WORLDINFO*, ComplexGizmo*)
GizmoTechno::HideLegoSpecials(unsigned char, bool)
GizmoTechno::ApplyDrawDistance(unsigned short, bool)
GizmoTechnoManager::SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
GizmoTechno::AttachHandle(MechCharacter*)
GizTechnos_UpdateHint(WORLDINFO*, HINT_s*)
GizmoTechnoManager::UpdateHint(HINT_s*)
GizmoTechno::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to GizmoTechno::SetupInteractFocus(Task_PathTo&, AIManager const&)
GizmoTechno::AIInteract(APIOBJECT* const&, float)
non-virtual thunk to GizmoTechno::AIInteract(APIOBJECT* const&, float)
GizmoTechnoManager::~GizmoTechnoManager()
LegoTechnos::~LegoTechnos()
LegoTechnos::DrawTechno(GizmoTechno&)
LegoTechnos::CreateTechno()
LegoTechnos::GetAttachCrankAnimAction(GizmoTechno*)
LegoTechnos::GetFailedAnimAction(GizmoTechno*)
LegoTechnos::SetTechnoPhaseHint(eTECHNOPHASE, GizmoTechno*)
LegoWinchTechnos::~LegoWinchTechnos()
WinchTechnoManager::~WinchTechnoManager()
GizTechnoHelper::~GizTechnoHelper()
LegoTeleports::LegoTeleports()
LegoTeleports::CreateGizmoManager()
non-virtual thunk to LegoTeleports::CreateGizmoManager()
LegoTeleports::CreateHelper()
LegoTeleports::GetTypes()
LegoTeleports::GetTypeFromName(char*)
LegoTeleports::GetTypeFromIX(int)
LegoTeleports::SetRequiresHint(GizmoTeleport*, int)
LegoTeleports::GetRequiresHint(int&) const
LegoTeleports::CanUseTeleport(MechCharacter&, GizmoTeleport&)
GizmoTeleportManager::OnInit()
GizmoTeleportManager::FixUp_AI(AIManager&)
GizmoTeleportManager::InitDefaultDestinations()
GizmoTeleportManager::GizmoHasBeenDestroyed(Gizmo*)
GizmoTeleport::RemoveDestinationFromList(GizmoTeleport*)
GizmoTeleportManager::FindTeleport(MechCharacter*, NUVEC const*, float, GizmoTeleport*, GizmoTeleport*, int*, bool)
GizmoTeleportManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoTeleport::Reset()
GizmoTeleport::ResetPlayerPos(bool)
GizmoTeleport::InstanceMovedEx()
GizmoTeleport::GetLegoSpecial() const
GizmoTeleportManager::AllocateProgressData(WORLDINFO*)
GizmoTeleportManager::ClearProgress(WORLDINFO*, void*)
GizmoTeleportManager::StoreProgress(WORLDINFO*, void*)
GizmoTeleportManager::Reset(WORLDINFO*, void*)
GizmoTeleportManager::Draw(float, ClassManager::eRenderingPriority)
GizmoTeleportManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoTeleportManager::RequestSfx()
GizmoTeleportManager::ReleaseSfx()
GizmoTeleportManager::PostLoad()
GizmoTeleport::InstantiateFrameSpecial()
GizmoTeleport::LoadEx(WORLDINFO*, int)
GizmoTeleport::LoadInstanceDataEx(WORLDINFO*, int)
GizmoTeleport::SaveInstanceDataEx(WORLDINFO*)
GizmoTeleport::NumDestinationsAvailable()
LegoTeleports::Teleport_GetCrawlPoints(MechCharacter*, NUVEC**, NUVEC**)
LegoTeleports::Teleport_SetCrawlTime(MechCharacter*, NUVEC*, NUVEC*)
GizmoTeleportManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
LegoTeleports::SetHintComplete(WORLDINFO&, GizmoTeleport&)
LegoTeleports::CreateTeleport()
GizmoTeleportManager::DestroyGizmoEx(Gizmo*)
GizmoTeleportManager::EarlyUpdate(float)
GizmoTeleportManager::LateUpdate(float)
GizmoTeleportManager::EventNotify(Event&, NuEventData&)
TeleportContextHandler::TeleportContextHandler(MechCharacter&)
TeleportContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
TeleportContextHandler::OnEnter(LevelContainer*)
TeleportContextHandler::OnLeave()
Teleport_Release(MechCharacter*)
GizmoTeleport::IsOnDestinationList(GizmoTeleport*)
GizmoTeleport::AddDestinationToList(GizmoTeleport*)
GizmoTeleport::GetDestination()
LegoTeleports::ChooseDestination(MechCharacter&)
LegoTeleports::OnInit()
LegoTeleports::OnInitPostConfig()
GizmoTeleport::AcquireDestinations()
LegoTeleports::EventNotify(Event&, NuEventData&)
LegoTeleports::GetFloorTargetObjects(GizmoTeleport*, int&, int&)
GizmoTeleport::AIInteract(APIOBJECT* const&, float)
non-virtual thunk to GizmoTeleport::AIInteract(APIOBJECT* const&, float)
GizmoTeleport::SetupInteractFocus(Task_PathTo&, AIManager const&)
non-virtual thunk to GizmoTeleport::SetupInteractFocus(Task_PathTo&, AIManager const&)
Teleport_MoveCode(MechCharacter*, int)
GizmoTeleport::GoThrough(MechCharacter&, bool)
GizmoTeleport::ComeOutOf(MechCharacter&)
Teleport_UpdateHint(WORLDINFO*, HINT_s*)
GizmoTeleport::ActivateRev(int, int)
GizmoTeleport::Activate(bool)
GizmoTeleport::GetOutput(int, int)
GizmoTeleport::GetOutputName(int)
GizmoTeleport::GetNumOutputs()
GizmoTeleport::SetVisibility(int)
GizmoTeleport::CanInteract(APIOBJECT* const&)
non-virtual thunk to GizmoTeleport::CanInteract(APIOBJECT* const&)
GizmoTeleport::~GizmoTeleport()
GizmoTeleport::~GizmoTeleport()
GizmoTeleport::GetClass() const
GizmoTeleport::isAIInteractSupported()
GizmoTeleport::ClearOccupiedFlags()
non-virtual thunk to GizmoTeleport::~GizmoTeleport()
non-virtual thunk to GizmoTeleport::~GizmoTeleport()
GizmoTeleportManager::~GizmoTeleportManager()
GizmoTeleportManager::SaveVersion()
LegoTeleports::~LegoTeleports()
LegoTeleports::OnLeaveTeleportContext(MechCharacter&)
LegoTeleports::ShouldSnapToDestination(MechCharacter&, GizmoTeleport&)
LegoTeleports::CanLinkTeleports(GizmoTeleport&, GizmoTeleport&)
LegoTeleports::GetFloorTargetOffset(GizmoTeleport*, bool&)
LegoTeleports::MoveCode(MechCharacter&, GizmoTeleport&)
LegoTeleports::UpdatePosition(GizmoTeleport*, CONTEXTPACKET*) const
TeleportContextHandler::~TeleportContextHandler()
LegoContextHandlerBase<TeleportContextHandler>::GetInstanceId() const
cTeleportHelper::~cTeleportHelper()
LegoContextHandlerBase<TeleportContextHandler>::~LegoContextHandlerBase()
TargetingInterfaceTeleport::TargetingInterfaceTeleport(GizmoTeleport&)
TargetingInterfaceTeleport::~TargetingInterfaceTeleport()
TargetingInterfaceTeleport::~TargetingInterfaceTeleport()
TargetingInterfaceTeleport::operator=(TargetingInterfaceTeleport const&)
TargetingInterfaceTeleport::GetRotY()
TargetingInterfaceTeleport::GetOwner() const
TargetingInterfaceTeleport::GetTargetPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceTeleport::GetTargetName() const
TargetingInterfaceTeleport::GetGameType()
TargetingInterfaceTeleport::GetTeleport() const
LegoTightRope::LegoTightRope()
LegoTightRope::~LegoTightRope()
LegoTightRope::~LegoTightRope()
LegoTightRope::CreateGizmoManager()
non-virtual thunk to LegoTightRope::CreateGizmoManager()
LegoTightRope::CreateHelper()
LegoTightRope::OnInit()
LegoTightRope::ShutDown()
LegoTightRope::EventNotify(Event&, NuEventData&)
GizmoTightRope::~GizmoTightRope()
GizmoTightRopeManager::RemoveSpecialInstances(GizmoTightRope*)
non-virtual thunk to GizmoTightRope::~GizmoTightRope()
GizmoTightRope::~GizmoTightRope()
non-virtual thunk to GizmoTightRope::~GizmoTightRope()
GizmoTightRope::Init(WORLDINFO*)
GizmoTightRope::GetNumOutputs()
GizmoTightRope::GetOutputName(int)
GizmoTightRope::GetOutput(int, int)
GizmoTightRope::FindNumAttachedGameObjectsBruteForce()
GizmoTightRope::Reset()
GizmoTightRope::UpdateDirection()
GizmoTightRope::SetSlide(bool)
GizmoTightRope::LoadEx(WORLDINFO*, int)
GizmoTightRope::AttachEndToSpecial(int, char const*, WORLDINFO const&)
GizmoTightRope::SetNewPos(bool, NUVEC*, NUVEC*)
GizmoTightRope::Activate(bool)
GizmoTightRopeManager::RefreshSpecialInstances(GizmoTightRope*, bool)
GizmoTightRope::SetVisibility(int)
GizmoTightRope::Hide(unsigned char, bool)
GizmoTightRope::UpdateSpecialPosition(LegoSpecial*, NUVEC*)
GizmoTightRope::GetAttachPosition(MechCharacter*)
GizmoTightRope::ShouldTilt(MechCharacter*)
GizmoTightRope::SetOverrideAABB(VuVec const&, VuVec const&)
GizmoTightRope::GetOverrideAABB(VuVec&, VuVec&) const
GizmoTightRopeManager::GizmoTightRopeManager()
GizmoTightRopeManager::~GizmoTightRopeManager()
GizmoTightRopeManager::RemoveAllSpecialInstances()
GizmoTightRopeManager::~GizmoTightRopeManager()
GizmoTightRopeManager::Release(MechCharacter*)
GizmoTightRopeManager::PostLoad()
GizmoTightRopeManager::EventNotify(Event&, NuEventData&)
GizmoTightRopeManager::RefreshAllSpecialInstances()
GizmoTightRopeManager::FindNearest(NUVEC const*, MechCharacter*, float*, int*)
GizmoTightRopeManager::CanJumpFromSlide(GizmoTightRope*, MechCharacter*)
GizmoTightRopeManager::MoveCode(MechCharacter*)
GizmoTightRopeManager::MoveUpdate(MechCharacter*, int)
GizmoTightRopeManager::SetSlideAction(MechCharacter*, bool)
GizmoTightRopeManager::Attach(MechCharacter*, WORLDINFO*, int, bool)
GizmoTightRopeManager::SetJumpAction(GizmoTightRope*, MechCharacter*)
GizmoTightRopeManager::ZiplineSwing_MoveCode(MechCharacter*)
GizmoTightRopeManager::CheckAutoJumpOn(MechCharacter*)
GizmoTightRopeManager::FixPointToLine(NUVEC const*, NUVEC*, float, GizmoTightRope*, MechCharacter*)
GizmoTightRopeManager::InRange(MechCharacter*, WORLDINFO*, NUVEC*)
GizmoTightRopeManager_InRangeCallback(LegoGizmoManager&, void*)
GizmoTightRopeManager::InRangeNonRecursive(MechCharacter&, NUVEC*)
GizmoTightRopeManager::SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
GizmoTightRopeManager::EarlyUpdate(float)
GizmoTightRopeManager::LateUpdate(float)
GizmoTightRopeManager::Draw(float, ClassManager::eRenderingPriority)
ZipLine_UpdateHint(WORLDINFO*, HINT_s*)
GizmoTightRopeManager::UpdateHint(WORLDINFO*, HINT_s*)
GizmoTightRopeManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoTightRope::GizmoTightRope()
GizmoTightRopeManager::AllocateProgressData(WORLDINFO*)
GizmoTightRopeManager::ClearProgress(WORLDINFO*, void*)
GizmoTightRopeManager::StoreProgress(WORLDINFO*, void*)
GizmoTightRopeManager::RequestSfx()
GizmoTightRopeManager::ReleaseSfx()
GizmoTightRopeManager::Reset(WORLDINFO*, void*)
GizmoTightRopeManager::SnapTo(MechCharacter*, NUVEC*)
GizmoTightRopeManager::FixUp_AI(AIManager&)
LegoTightRope::InitTerrain(WORLDINFO*)
LegoTightRope::OnExitLevel(LegoLevelContainer&)
LegoTightRope::GetDrawPos(MechCharacter*, NUVEC*)
LegoTightRope::GetDrawOffset(MechCharacter*, NUVEC*)
TogglingAddOn::TogglingAddOn()
TogglingAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to TogglingAddOn::OnHook(unsigned char, HookArgs*)
DismountAddOn::DismountAddOn(short, float, float)
DismountAddOn::~DismountAddOn()
non-virtual thunk to DismountAddOn::~DismountAddOn()
DismountAddOn::~DismountAddOn()
non-virtual thunk to DismountAddOn::~DismountAddOn()
DismountAddOn::OnAdded()
DismountAddOn::OnHook(unsigned char, HookArgs*)
DismountAddOn::Process(float)
DismountAddOn::UpdateMomentum()
non-virtual thunk to DismountAddOn::OnHook(unsigned char, HookArgs*)
GizmoTightRope::GetClass() const
TogglingAddOn::~TogglingAddOn()
non-virtual thunk to TogglingAddOn::~TogglingAddOn()
non-virtual thunk to TogglingAddOn::~TogglingAddOn()
TightRopeHelper::~TightRopeHelper()
LegoTimers::LegoTimers()
LegoTimers::CreateGizmoManager()
non-virtual thunk to LegoTimers::CreateGizmoManager()
LegoTimers::CreateHelper()
GizmoTimerManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
createGizTimer(GIZMOSYS*, float, float, int, char*)
GizmoTimerManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoTimerManager::EarlyUpdate(float)
GizmoTimer::GetOutput(int, int)
GizmoTimer::GetOutputName(int)
GizmoTimer::GetNumOutputs()
GizmoTimer::Activate(bool)
GizmoTimerManager::AllocateProgressData(WORLDINFO*)
GizmoTimerManager::ClearProgress(WORLDINFO*, void*)
GizmoTimerManager::StoreProgress(WORLDINFO*, void*)
GizmoTimerManager::Reset(WORLDINFO*, void*)
GizmoTimer::~GizmoTimer()
GizmoTimer::GetClass() const
non-virtual thunk to GizmoTimer::~GizmoTimer()
non-virtual thunk to GizmoTimer::~GizmoTimer()
GizmoTimerManager::~GizmoTimerManager()
GizmoTimerManager::Load(WORLDINFO*, int, int)
GizmoTimerManager::EdSave(WORLDINFO*, int)
LegoTimers::~LegoTimers()
LegoGizmoSystemBase<LegoTimers>::ShutDown()
LegoGizmoSystemBase<LegoTimers>::ShouldAddManagersForLevel(MechLevelContainer&)
TimerHelper::~TimerHelper()
TimerHelper::GetClassFlags()
qrand()
getqseed()
ResetSeeds()
EaseInOutCubed(float)
SeekLinearF(float, float, float)
SeekValF(float, float, float)
SeekVec(NUVEC*, NUVEC*, NUVEC*, float)
SphereSphereOverlap(NUVEC const*, float, NUVEC const*, float)
SphereSphereOverlapScaleY(NUVEC const*, float, float, NUVEC const*, float, float)
OnOrInsidePlane(NUVEC const*, NUVEC*, NUVEC*, NUVEC*, float, float*)
OnOrOutsidePlane(NUVEC*, NUVEC*, NUVEC*)
FindAnglesZX(NUVEC const*, unsigned short*, unsigned short*)
FindAnglesXY(NUVEC const*, unsigned short*, unsigned short*)
AngleBetweenVectorsRads(VuVec const&, VuVec const&)
GetRotationAngles(NUVEC const*, unsigned short*, unsigned short*)
RotDiff(unsigned short, unsigned short)
SeekRot(unsigned short, unsigned short, float)
SeekLinearRot(unsigned short, unsigned short, float, bool)
TurnRot(unsigned short, unsigned short, int, int*)
TurnRotClockwise(unsigned short, unsigned short, int)
TurnRotAntiClockwise(unsigned short, unsigned short, int)
PushingTowardsAngle(unsigned short, unsigned short)
AnglesBetweenPoints(NUVEC const*, NUVEC const*, unsigned short*, unsigned short*)
AnglesBetweenPoints(NUVEC const*, NUVEC const*, float*, float*)
RotatingSameDirection(unsigned short, unsigned short, unsigned short)
UpdateTurn_Normal(GameObject*, float, int)
ParmeterBasedTurning(MechCharacter*)
UpdateTurn_TurningCircle(MechCharacter*, unsigned short, float)
CalculateInterceptVector(NUVEC*, NUVEC const*, NUVEC const*, float, NUVEC*, NUVEC*, bool)
RotateGameMatrix(NUMTX*, eROTATION_ORDER, unsigned short, unsigned short, unsigned short)
MatrixReflection(NUMTX*, int, float, float, NUMTX*)
MatrixReflectionVU0_AXISY(NUMTX*, float, float, NUMTX*)
InterpolateRotationMatrix(NUMTX*, NUMTX*, NUMTX*, float)
QuatInterpolateRotationMatrix(NUMTX*, NUMTX*, NUMTX*, float)
MtxCalcCheapFaceY(NUMTX*, NUVEC*)
GadgetFilteringCollector::SetWorldHitData(float, Geom const*, VuVec const&, VuVec const&)
LegoRayCast(NUVEC const*, NUVEC*, FirstPointCollector&, float, bool, bool, bool, Phantom*)
LegoRayCast2(NUVEC const*, NUVEC*, CastCollector&, float, unsigned int, unsigned int, unsigned int)
FindReflectionNoPlatforms(NUVEC*)
GameShadow(MechCharacter*, NUVEC const*, float, int, bool, bool)
GameTerrainLowOverride(float)
GameTerrainLow(LevelContainer const*)
GameTerrainLow(WORLDINFO*)
BlobShadowFade(NUVEC*, float, float, float)
PointAlongSpline(NuSpline*, float, NUVEC*, unsigned short*, unsigned short*, int)
PointAlongSplineObject(SplineObject*, float, NUVEC*, unsigned short*, unsigned short*, int)
InsideLineXZ(float, float, float, float, float, float)
LineCrossedXZ(float, float, float, float, float, float, float, float)
RatioAlongLineXZ(NUVEC*, NUVEC*, NUVEC*)
DistanceToLineXZ(NUVEC*, NUVEC*, NUVEC*)
LineIntersectXY(NUVEC*, NUVEC*, NUVEC*, NUVEC*, NUVEC*, NUVEC*)
XZLinesIntersect(NUVEC*, NUVEC*, NUVEC*, NUVEC*, float*, float*)
XZLinesClosest(NUVEC const*, NUVEC const*, NUVEC const*, NUVEC const*, float*, float*)
LineIntersectSphere(NUVEC const*, NUVEC const*, NUVEC const*, float, float*)
LineIntersectCircle(NUVEC*, NUVEC*, NUVEC*, float)
RayIntersectCircle(NUVEC*, NUVEC*, NUVEC*, float, NUVEC*)
InitSplinePosition(SPLINEPOS*, NuSpline*, float, int)
MoveSplinePosition(SPLINEPOS*, float)
GetNearestSplinePos(NUVEC const*, SPLINEPOS*, NuSpline*, int, short, short)
EvaluateSplineXZIntersection(NuSpline*, int, SPLINEPOS*, NuSpline*, int, SPLINEPOS*)
OutSideSplineArea(NUVEC const*, NuSpline*, NUVEC*, NUVEC*, int)
VecRotateAxis(NUVEC*, unsigned short, NUVEC*)
Draw3DObjectAlpha(WORLDINFO&, int, NUVEC*, unsigned short, unsigned short, unsigned short, float, float, float, eROTATION_ORDER, float)
Draw3DObject(WORLDINFO*, int, NUVEC*, unsigned short, unsigned short, unsigned short, float, float, float, eROTATION_ORDER)
Draw3DObjectMtx(WORLDINFO*, int, NUMTX*)
Draw3DObjectMtxAlpha(WORLDINFO*, int, NUMTX*, float)
DrawPanel3DObjectRatio(float, float, float, float, float, float, unsigned short, unsigned short, unsigned short, nuhspecial_s*, int, float, NUVEC const&, bool)
DrawPanel3DObject(float, float, float, float, float, float, unsigned short, unsigned short, unsigned short, nuhspecial_s*, int, float, bool)
DrawPanel3DObjectNoAlpha(float, float, float, float, float, float, unsigned short, unsigned short, unsigned short, nuhspecial_s*, eROTATION_ORDER)
DrawPanel3DObjectMtx(nuhspecial_s*, NUMTX*, float)
DrawPanel3DObjectMtxNoAlpha(nuhspecial_s*, NUMTX*)
DrawPanel3DCharInst(float, float, float, float, float, float, unsigned short, unsigned short, unsigned short, CharInst*, eROTATION_ORDER)
DrawPanelArc(NuCamera const&, NUVEC*, int, int, float, float, float, unsigned int, NuSmartPtr<NuMtl, true>, int, float)
DrawPanelArc(WORLDINFO*, NuCamera const&, NUVEC*, int, int, float, float, float, unsigned int, NuSmartPtr<NuMtl, true>, int, float)
Callback_DrawStandardIcon(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
DrawStandardIcon(nuhspecial_s*, VuVec&, float, float, int, bool)
BuildOnCharacterMtx(MechCharacter*, int, unsigned short, int, int, NUVEC*, NUMTX*, NUVEC*, float, NUMTX*)
DrawObjectOnCharacter(MechCharacter*, nuhspecial_s*, int, unsigned short, int, int, bool, long, NUVEC*, NUMTX*, NUVEC*, float, float, NUMTX*)
DrawExtraCharacterOnCharacter(GameObject*, CharInst*, int, NUMTX*, int, float, long)
CreateUsefulMaterials()
DrawText_WOBBLE(MechCharacter*, char const*, int, int, float, float)
IncreaseScore(unsigned long*, unsigned long, int, bool)
FLOORTARGET::~FLOORTARGET()
FloorTarget_Init(char const*, float, char const*, float, float)
FloorTarget_Update()
FloorTarget_Draw(WORLDINFO*, NUVEC*, unsigned short, unsigned short, float, float, int, int, float, NUVEC*, NUMTX*)
OffGroundTarget_Draw(WORLDINFO*, NUVEC*, unsigned short, unsigned short, float, float, int, int, float, NUVEC*, NUMTX*)
DrawRopeCurvedDC2(VuVec*, int, int, GRAPPLEMTL*, float, float, NuColour const&)
LoadThingsScene()
LoadRopesScene()
StreakTimeCharFromFloat(float)
StreakTimeFloatFromChar(unsigned char)
MakeThrowVector(NUVEC*, NUVEC const*, NUVEC const*, NUVEC const*, float, float)
LoadPerm_EndTime(float)
StartUp_SetAspect()
IndexedGridMove(int*, int, int, int, int, int, int, int, int, int)
FindScreenPosAndScale(GameObject*, NUVEC const*, float, NUVEC*, float*)
InitRopeMtl(char const*)
DrawRopeSingle(NUVEC*, NUVEC*, float, NuSmartPtr<NuMtl, true>, float, float, float, float)
ShouldUseIndirectRiderRender(GameObject&)
CalcRiderAndItsMtx(GameObject&, NUMTX&)
CalcBaseRideOnMtx(GameObject&, NUMTX&)
CalcRideOnMtx(GameObject&, NUMTX&)
CalcRideOnMtx(MechCharacter&, NUMTX&)
CalcRideOnPos(MechCharacter&, NUVEC&)
FPar_CountTags(nufpar_s*, char const*, bool)
VuVec_ParseFromString(char*, VuVec&)
FloatAngleDifference(float)
AngleDifference(int)
RadsAngleDifference(float)
VuMtxFromEulerRotOrder(VuMtx&, eROTATION_ORDER, int, int, int)
VuMtxFromEulerRotOrder(VuMtx&, MechCharacter const&)
GadgetFilteringCollector::~GadgetFilteringCollector()
LegoTubes::LegoTubes()
LegoTubes::CreateGizmoManager()
non-virtual thunk to LegoTubes::CreateGizmoManager()
LegoTubes::CreateHelper()
LegoTubes::ShouldIgnoreTube(MechCharacter&, GizmoTube*)
GizmoTube::LoadEx(WORLDINFO*, int)
GizmoTube::Activate(bool)
GizmoTube::ActivateRev(int, int)
GizmoTube::SetVisibility(int)
GizmoTube::SetAIAvoid(bool)
GizmoTubeManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoTubeManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoTubeManager::RenderTube(GizmoTube*, NUVEC*, unsigned short)
GizmoTube::Reset()
GizmoTubeManager::AllocateProgressData(WORLDINFO*)
GizmoTubeManager::ClearProgress(WORLDINFO*, void*)
GizmoTubeManager::StoreProgress(WORLDINFO*, void*)
GizmoTubeManager::Reset(WORLDINFO*, void*)
GizmoTubeManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoTubeManager::LateUpdate(float)
Tube_InCylinder(MechCharacter*, GizmoTube*, float*, int)
GizmoTubeManager::Draw(float, ClassManager::eRenderingPriority)
GizmoTube::GetOutput(int, int)
GizmoTube::GetOutputName(int)
GizmoTube::GetNumOutputs()
Tube_PartInCylinder(PART*, GizmoTube*, float*, unsigned int)
GizmoTubeManager::InAnyCylinder(WORLDINFO*, MechCharacter*, int)
GizmoTube::ComplexFixUpEx(WORLDINFO*, ComplexGizmo*)
Tube_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
ISABOVEIDEALHEIGHT(MechCharacter*)
Tube_MoveCodeCallback(LegoGizmoManager&, void*)
Tube_MoveCode(MechCharacter*, WORLDINFO*)
ObjInTube(MechCharacter*)
GizmoTubeManager::FixUp_AI_Nodes(AIManager&)
GizmoTubeManager::FixUp_AI(AIManager&)
TubeAnimOverrideAddon::TubeAnimOverrideAddon(short)
TubeAnimOverrideAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to TubeAnimOverrideAddon::OnHook(unsigned char, HookArgs*)
GizmoTube::~GizmoTube()
GizmoTube::~GizmoTube()
GizmoTube::GetClass() const
non-virtual thunk to GizmoTube::~GizmoTube()
non-virtual thunk to GizmoTube::~GizmoTube()
GizmoTubeManager::~GizmoTubeManager()
GizmoTubeManager::SaveVersion()
LegoTubes::~LegoTubes()
TubeAnimOverrideAddon::~TubeAnimOverrideAddon()
non-virtual thunk to TubeAnimOverrideAddon::~TubeAnimOverrideAddon()
non-virtual thunk to TubeAnimOverrideAddon::~TubeAnimOverrideAddon()
TubeHelper::~TubeHelper()
LegoTurrets::LegoTurrets()
LegoTurrets::CreateGizmoManager()
non-virtual thunk to LegoTurrets::CreateGizmoManager()
LegoTurrets::CreateHelper()
LegoTurrets::OnInit()
LegoTurrets::CreateTurret()
GizmoTurret::Activate(bool)
GizmoTurret::DoDeactivate()
GizmoTurret::ActivateRev(int, int)
GizmoTurret::Init(WORLDINFO*)
GizmoTurret::SetVisibility(int)
GizmoTurret::LoadEx(WORLDINFO*, int)
GizmoTurret::InstanceMovedEx()
GizmoTurret::Reset()
GizTurret_GetTgt(GizmoTurret*, NUMTX*)
GizTurret_CalculateInterceptVector(NUVEC*, NUMTX*, NUVEC*, NUVEC*, float, NUVEC*, NUVEC*, unsigned int)
GizmoTurretManager::CreateGizmoEx(WORLDINFO*, NUVEC*, int)
GizmoTurretManager::DestroyGizmoEx(Gizmo*)
GizmoTurretManager::GizmoHasBeenDestroyed(Gizmo*)
GizmoTurretManager::LateUpdate(float)
GizmoTurretManager::HandleViewRangePanning(GizmoTurret*, float, float, short, NUVEC*&, NUVEC*&)
GizTurrets_OpponentSelection(WORLDINFO*, int, MechCharacter**, int, MechCharacter**)
GizmoTurretManager::Draw(float, ClassManager::eRenderingPriority)
GizmoTurret::GetOutput(int, int)
GizmoTurret::GetOutputName(int)
GizmoTurret::GetNumOutputs()
GizmoTurret::AccuireTarget(int, MechCharacter**)
GizmoTurretManager::AllocateProgressData(WORLDINFO*)
GizmoTurretManager::ClearProgress(WORLDINFO*, void*)
GizmoTurretManager::StoreProgress(WORLDINFO*, void*)
GizmoTurretManager::Reset(WORLDINFO*, void*)
GizmoTurret::GetBuilderOrigin(NUVEC*)
GizmoTurret::SetGamePos(NUVEC&)
GizmoTurret::SetGameMtx(NUMTX&)
GizmoTurret::StartShakeNod(bool)
GizmoTurret::~GizmoTurret()
non-virtual thunk to GizmoTurret::~GizmoTurret()
GizmoTurret::~GizmoTurret()
non-virtual thunk to GizmoTurret::~GizmoTurret()
GizmoTurret::GetClass() const
GizmoTurretManager::CreateInstanceEx(WORLDINFO*, Gizmo*, NUVEC*, int, int, int, Gizmo*)
GizmoTurretManager::EdRenderInstance(Gizmo*, NUVEC*, int, int, int, float, int, int, float)
GizmoTurretManager::PostLoad()
GizmoTurretManager::RequestSfx()
GizmoTurretManager::ReleaseSfx()
GizTurrets_Hit(WORLDINFO const*, GizmoTurret*, NUVEC*, int, int)
GizmoTurretManager::BoltHitPlat(Bolt*)
GizmoTurretManager::GetBestBoltTarget(float*, NUVEC*, NUVEC*, void*, NUVEC*, NUVEC*, float, float, int, int, BoltTypeID const&, MechObjectData&)
GizmoTurretManager::BoltHit(WORLDINFO*, void*, NUVEC*, int, float, NUVEC*, NUVEC*, Bolt*, unsigned int)
GizTurrets_TotalScore(WORLDINFO*)
GizmoTurretManager::~GizmoTurretManager()
GizmoTurretManager::SaveVersion()
LegoTurrets::~LegoTurrets()
GizTurretHelper::~GizTurretHelper()
TargetingInterfaceTurret::TargetingInterfaceTurret(GizmoTurret&)
TargetingInterfaceTurret::~TargetingInterfaceTurret()
TargetingInterfaceTurret::~TargetingInterfaceTurret()
TargetingInterfaceTurret::operator=(TargetingInterfaceTurret const&)
TargetingInterfaceTurret::GetRotY()
TargetingInterfaceTurret::GetOwner() const
TargetingInterfaceTurret::CanBeHit(BeenHit const&) const
TargetingInterfaceTurret::HandleBoltHit(Bolt*)
TargetingInterfaceTurret::GetTargetName() const
TargetingInterfaceTurret::GetGameType()
TargetingInterfaceTurret::GetTurret() const
DynoVehicle_IsCar(MechCharacter*)
Vehicles_GetShapes(MechCharacter*, NUVEC*, int*, float*, unsigned int*, unsigned int)
DynoVehicle_FilterLayer(MechCharacter*, int, bool)
DynoVehicle_IsSpaceCombatMode()
DynoVehicle_SetCastable(MechCharacter*, bool, bool&)
DynoVehicle_Distance(MechCharacter*, VuVec&, float)
DynoVehicle_SetToMtx(MechCharacter*, VuMtx const&)
DynoVehicle_EnableShooting(MechCharacter*)
DynoVehicle_GetRotY(MechCharacter*, unsigned short&)
DynoVehicle_GetRenderMatrix(MechCharacter*, NUMTX*)
DynoVehicle_HasLoopAbility(MechCharacter*)
DynoVehicle_GetShadowPos(MechCharacter*, VuVec&)
DynoVehicle_RemoveFromCache(CharDefGameData*)
DynoVehicle_CacheVehicleSetup(char*)
DynoVehicle_NightLevelPFX(bool)
DynoVehicle_GetPlayerStuckSelfDestruct(GameObject*)
DynoVehicle_IsTaggingBlocked(MechCharacter*)
DynoVehicle_IsDocked(GameObject*)
DynoVehicle_ReleaseTakeOver(GameObject*)
DynoVehicle_CacheLevelVehicleSetupsFn(CharDefGameData const&, CHARACTERDATA const&, void*)
DynoVehicle_CacheLevelVehicleSetupsFn(CHARACTERDATA const&, void*)
DynoVehicle_CacheLevelVehicleSetups(WORLDINFO*)
DynoVehicle_IsUnderWater(GameObject*)
DynoVehicle_IsReversing(GameObject*)
DynoVehicle_Update(GameObject*, VuMtx&)
DynoVehicle_CollectDestructionHeart(MechCharacter*, MechCharacter*)
DynoVehicle_DestroyAllActiveVehicles()
DynoVehicle_IsAircraft(MechCharacter*)
DynoVehicle_SetTurnRates(GameObject*, float, float)
DynoVehicle_SetMaxVelocity(GameObject*, float)
DynoVehicles_BoatSetCurrentSpline(GameObject*, char const*, float)
DynoVehicle_AttachTrailerVehicle(GameObject*, GameObject*)
LegoWhips::LegoWhips()
LegoWhips::~LegoWhips()
LegoWhips::~LegoWhips()
LegoWhips::Init()
LegoWhips::OnInitPostConfig()
LegoWhips::CanUseWhip(MechCharacter*)
LegoWhips::OnExitLevel(LegoLevelContainer&)
Whip_DestroyAllPhysicsTethers(WORLDINFO&)
LegoWhips::OnResetLevel(LegoLevelContainer&)
LegoWhips::ParseGameConfigEntry(nufpar_s*)
LegoWhips::CheckForAIAssistance(MechCharacter&, MechCharacter**, int&)
GetWhipTiedUpObj(WORLDINFO*)
PlayWhipSwishSfx(MechCharacter*)
Whip_GetGrabPullActionForHeading(MechCharacter*, unsigned short)
Whip_StartPhase1(MechCharacter*, int, int)
Whip_StartPhase2(MechCharacter*, MechCharacter*, BlowUp*)
Whip_HitJudder(MechCharacter*, int)
Whip_StartTether(MechCharacter*, MechCharacter*, bool)
Whip_StartTether_Obstacle(GizmoObstacle*, MechCharacter*)
AddWhipFlash(LevelContainer const&, NUVEC const*, NUVEC const*)
WhipSpin_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Whip_EndContext(MechCharacter*)
Whip_Release(MechCharacter*)
Whip_MoveCode(WORLDINFO*, MechCharacter*, int)
Whip_CanBreakOut(MechCharacter*, int)
CheckSide(int, int)
Whip_TargetCode(WORLDINFO*, MechCharacter*, unsigned int)
Whip_BreakTether(MechCharacter*, int, bool)
Whip_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Whip_GetDrawPos(MechCharacter*, NUVEC*)
Whip_CanApplyGravity(MechCharacter*)
Whip_TurningCircle(MechCharacter*)
Whip_WhipperCamAdjust(MechCharacter*, NUVEC*)
Whip_LegoItem_SuperCarry_Draw(MechCharacter*)
CanBreakWhipTieUp(MechCharacter*)
Whip_CreatePhysicsTether(void*, MechCharacter*, bool)
Whip_CanBreakTether(MechCharacter*)
GetWhipTetherIndex(void*)
Whip_DestroyPhysicsTether(WORLDINFO&, int)
Whip_BrokenPhysics(void*)
Whip_UpdateTether(MechCharacter*)
Whip_Tether_AdjustTargetMom(MechCharacter*)
Whip_GetHolderAndTetheredObjPositions(MechCharacter*, MechCharacter*, VuVec&, VuVec&)
Whip_UpdatePhysicsTether(VuVec const&, VuVec const&, float, MechCharacter*, MechCharacter*)
Whip_DrawTether(MechCharacter*)
Whip_DrawPhysicsTether(MechCharacter*, void*, NUVEC*, NUVEC*, int, NUCOLOUR3 const&, NUCOLOUR3 const&)
Whip_CanDrawGrab(MechCharacter*)
GetWhipTether(MechCharacter*)
GetWhipTetherRopeCloth(MechCharacter*)
WhipContextHandler::WhipContextHandler(MechCharacter&)
WhipContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
WhipContextHandler::OnLeave()
WhipContextHandler::~WhipContextHandler()
LegoContextHandlerBase<WhipContextHandler>::GetInstanceId() const
LegoContextHandlerBase<WhipContextHandler>::~LegoContextHandlerBase()
AIState::AIState()
AIState::~AIState()
AIState::~AIState()
AIState::SetCurrentChildState(AIState*, GameObject&, bool)
AIState::Execute(AIState*, GameObject&)
ConcurrentAIStates::ConcurrentAIStates()
ConcurrentAIStates::~ConcurrentAIStates()
ConcurrentAIStates::~ConcurrentAIStates()
ConcurrentAIStates::Execute(AIState*, GameObject&)
AIState::OnEnter(AIState*, GameObject&)
AIState::OnExit(AIState*, GameObject&)
AIState::CheckConditions(AIState*, GameObject&)
BigBossManagerBase::BigBossManagerBase(LegoLevelContainer&, BigBossManagerInit*, int)
BigBossManagerBase::InitizeResources()
BigBossManagerBase::RegisterProcessing()
BigBossManagerBase::RegisterRendering()
BigBossManagerBase::CleanUp()
BigBossManagerBase::CleanUpResources()
GroundAttackResource::~GroundAttackResource()
BigBossManagerBase::~BigBossManagerBase()
BigBossManagerBase::LoadCfg()
BigBossManagerBase::SpecialFind(nuhspecial_s*, char*, int)
BigBossManagerBase::BlendShapeSpecialFind(BlendShapeSpecial*, char*, int)
BigBossManagerBase::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
BigBossManagerBase::ProcessFrameTime(ManagerProcessData*)
BigBossManagerBase::ProcessPlayers()
BigBossManagerBase::CalcCentrePosBetweenBossAndPlayer(VuVec&, VuVec&, VuMtx&)
BigBossManagerBase::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
BossProcessorList::Render()
DisAppearingSpecialList::Render()
BigBossManagerBase::SetGameObjectPosition(MechCharacter*, VuVec const&)
BigBossManagerBase::SetGameObjectMatrix(MechCharacter*, VuMtx const&, bool)
BigBossManagerBase::GenerateMtxZAlignedWithVector(VuVec const&, VuMtx&)
BigBossManagerBase::GenerateRandomOrientationForMtx(VuMtx&)
BigBossManagerBase::LimitYBasisVecOfMtxToConeOfArbitaryVector(VuMtx&, VuVec const&, short)
BigBossManagerBase::SeekAng(int, int, float)
BigBossManagerBase::MenuToggleValue(MENU*, bool&)
BigBossManagerBase::MenuToggleValue(MENU*, int&)
BigBossManagerBase::MenuSlideValue(MENU*, float&, float, float, float, bool)
BigBossManagerBase::MenuSlideValue(MENU*, int&, int, int, int, bool)
BigBossManagerBase::ProcessJustAfterAnimation(int)
BossProcessorList::Process(float)
DisAppearingSpecialList::Process(float)
BigBossManagerBase::ProcessBossContextPuppetAnimation(MechCharacter&, unsigned int, bool, CharInst::SetAnimFlags)
BigBossManagerBase::AppendBossProcessor(BossProcessor*)
BigBossManagerBase::UnLinkBossProcessor(BossProcessor*)
BigBossManagerBase::FindBossProcessorForChildGameObject(GameObject*, BossProcessor::BOSS_PROCESSOR_TYPE)
BigBossManagerBase::AddPuppet(GameObject*, float, float, int, GameObject*, GAMEACTION, VuMtx const*, bool, bool, float, float)
BigBossManagerBase::AddBossShockWaveAttack(VuVec const&, float, float, float, int, bool, float, float, bool)
BigBossManagerBase::BodgeSeek(float&, float, float)
BigBossManagerBase::RadialDamageGameObj(MechCharacter*, VuVec const&, float, float, int, float, float)
BigBossManagerBase::RadialDamageGameObjs(VuVec const&, float, float, int, bool, float, float)
BigBossManagerBase::Collision(BodyPair*, Array<ContactPoint>&)
BigBossManagerBase::DrawBossHitPoints(MechCharacter*, bool)
BigBossManagerBase::DrawButtonPrompt(MechCharacter*, VuVec const&, char const*, float, float)
BigBossManagerBase::GeneralMenuDraw(char*, int)
BigBossManagerBase::GeneralMenuUpdate(MENU*, int)
BigBossManagerBase::FixUpAllDataEntries()
BigBossManagerBase::GetCameraFocusPos(VuVec&)
BigBossManagerBase::CameraRestrictXZPositionBeyondMatrix(VuMtx const&, NUVEC&)
BigBossManagerBase::CameraFocusOnBossWithoutLosingPlayerOffscreen(int&, int&, int&, NUVEC&, NUMTX&, GAMECAMERA*, VuVec*, short, float, short, float, bool)
BigBossManagerBase::GetNuCameraFromSplitScreen()
BigBossManagerBase::GenerateUniformSpacedPointsAlongGround(WORLDINFO*, VuVec const&, VuVec const&, float, VuVec*, int, float)
BigBossManagerBase::GenerateUniformSpacedPairsOfPointsAlongGroundOverBSpline(WORLDINFO*, float, VuVec*, int, VuVec*, VuVec*, int, float, VuVec*, VuVec*)
BigBossManagerBase::AddGroundCrackAttack(VuMtx const&, VuVec const&, float, float)
BigBossManagerBase::CreateGroundCrackAttack(WORLDINFO*, VuMtx const&, VuVec const&, float, float)
BigBossManagerBase::AddGroundCrackAttackBend(VuMtx const&, VuVec const&, float, float)
BigBossManagerBase::CreateGroundCrackAttackBend(VuMtx const&, VuVec const&, float, float)
BigBossManagerBase::AddCraterAttack(VuMtx const&, eBossCrater, float, float)
BigBossManagerBase::AddDisAppearingSpecial(nuhspecial_s*, VuMtx const&, float, float)
BigBossManagerBase::AddDisAppearingSpecial(int&, nuhspecial_s*, VuMtx const&, float, float)
DisAppearingSpecialList::Find(int)
DisAppearingSpecial::Refresh()
LiteBossInit::ParseLevelData(nufpar_s*)
LiteBigBossManager::LiteBigBossManager(LegoLevelContainer&, BigBossManagerInit*)
LiteBigBossManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LiteBigBossManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LiteBigBossManager::ProcessJustBeforeAnimation(int)
BigBossManagerBase::ProcessJustBeforeAnimation(int)
LiteBigBossManager::ProcessJustAfterAnimation(int)
LiteBigBossManager::HitCharacter(MechCharacter*, Entity*, ContactPoint&)
LiteBigBossManager::Collision(RigidBody*, RigidBody*)
LiteBigBossManager::AddFootStep(int, MechCharacter*)
BossProcessorList::Find(int)
PuppetWrapper::PuppetWrapper(BigBossManagerBase&, GameObject*, float, float, int, GameObject*, GAMEACTION, VuMtx const*, bool, bool)
EvalEndFrameRootMatrix(CharInst*, _vum_s*, float, CharAnimEntry const*)
BigBossManagerBase::GetRenderMtxForCharacter(GameObject*, VuMtx&, bool)
BigBossManagerBase::ChangeHeadingToAvoidPosition(MechCharacter*, float, float, VuVec const&, float, short&, bool, bool)
BigBossManagerBase::CharacterMovePreventionBeyondMtx(GameObject*, VuMtx&)
PuppetWrapper::~PuppetWrapper()
PuppetWrapper::~PuppetWrapper()
PuppetWrapper::Process(float)
PuppetWrapper::ProcessPuppetStateMachine()
PuppetWrapper::ProcessGameObjectContextAndAnimation(GAMEACTION)
PuppetWrapper::ProcessState_BlendingIntoPuppet(bool)
PuppetWrapper::ProcessState_Puppeting(bool)
PuppetWrapper::ProcessState_BlendingOutOfPuppet(bool)
PuppetWrapper::ProcessState_BlendingOutOfPuppet_FallLand(bool)
PuppetWrapper::ProcessBlendIntoPuppetMtx(VuMtx&)
PuppetWrapper::GeneratePuppetMtx(VuMtx&)
PuppetWrapper::ProcessBlendOutPuppetMtx(VuMtx&)
PuppetWrapper::GetParentPOIMtx(VuMtx&)
PuppetWrapper::ForceUprightMtx(VuMtx&)
PuppetWrapper::ForceFacePlayerMtx(VuMtx&)
PuppetWrapper::ApplyParentScaleToMtx(VuMtx&)
PuppetWrapper::ApplySeek60thToMtx(VuMtx&)
PuppetWrapper::ApplyLocalOffsetMtx(VuMtx&)
PuppetWrapper::ApplyAbsYOffsetToMtx(VuMtx&)
PuppetWrapper::Render()
PuppetWrapper::SetBlendIntoPuppet(float, GAMEACTION, PuppetWrapper::PUPPET_BLENDMODE)
PuppetWrapper::SetBlendOutPuppet(float, GAMEACTION, bool, bool, VuVec const&, GAMEACTION)
PuppetWrapper::TerminatePuppet(bool, bool)
BossShockWaveAttack::BossShockWaveAttack(BigBossManagerBase&, VuVec const&, float, float, float, int, bool, float, float, bool)
BossShockWaveAttack::~BossShockWaveAttack()
BossShockWaveAttack::~BossShockWaveAttack()
BossShockWaveAttack::Process(float)
BossShockWaveAttack::DamageGameObjs()
BossShockWaveAttack::DamageKrawlies()
BossShockWaveAttack::Render()
BlendShapeSpecial::BlendShapeSpecial()
GroundAttackResource::GroundAttackResource()
GroundAttackResource::UpdateBlendShapeFrame(float&, float)
GroundAttackResource::BeginBlendShapeSpecialDrawAt()
GroundAttackResource::EndBlendShapeSpecialDrawAt()
GroundAttackResource::BlendShapeSpecialDrawAt(nuhspecial_s*, VuMtx&, float, int, float)
GroundAttackResource::BlendShapeSpecialDrawAt(BlendShapeSpecial*, VuMtx&, float, float)
GroundCrackInfo::Update(float)
GroundCrackInfo::GotoFadeOutStage()
GroundCrackInfo::GotoFadeInStage()
GroundCrackInfo::GetCoverAlpha()
GroundCrackInfo::GetGlowsAlpha()
GroundCrackAttack::GroundCrackAttack(BigBossManagerBase&, VuMtx const&, VuVec const&, float, float, VuVec*, VuVec*, int, bool)
GroundCrackAttack::~GroundCrackAttack()
GroundCrackAttack::~GroundCrackAttack()
GroundCrackAttack::Process(float)
GroundCrackAttack::DamageGameObjs()
GroundCrackAttack::DamageKrawlies()
GroundCrackAttack::Render()
GroundCrackAttack::GenerateSkewedMatrixLeftSplit(VuVec const&, VuVec const&, VuVec const&, VuVec const&, VuMtx&)
GroundCrackAttack::GenerateSkewedMatrixRightSplit(VuVec const&, VuVec const&, VuVec const&, VuVec const&, VuMtx&)
GroundCrackAttack::GenerateSkewedMatrix(VuVec const&, VuVec const&, VuMtx&)
GroundCrackAttack::GenerateSkewedMatrix(VuVec const&, VuVec const&, VuVec const&, VuVec const&, VuMtx&)
BigBossManagerBase::GizObOfInterestActivateWithin(VuVec const&, VuVec const&, float)
BossCraterAttack::BossCraterAttack(BigBossManagerBase&, VuVec const&, float, float, GizmoObstacle*, int, bool, float, float, bool)
BossCraterAttack::~BossCraterAttack()
BossCraterAttack::~BossCraterAttack()
BossCraterAttack::Process(float)
BossCraterAttack::DamageGameObjs()
BossCraterAttack::Render()
DisAppearingSpecial::DisAppearingSpecial(nuhspecial_s*, VuMtx const&, float, float)
DisAppearingSpecial::Process(float)
DisAppearingSpecial::Render()
DisAppearingSpecialList::DisAppearingSpecialList()
BossAttackDescriptor::BossAttackDescriptor(char const*, LevelContainer*)
BossAttackDescriptor::SetupDataEntries()
BossAttackDescriptor::FixUp()
BossAttackDataBlockCfgLoader::BossAttackDataBlockCfgLoader(LevelContainer*)
BossAttackDataBlockCfgLoader::~BossAttackDataBlockCfgLoader()
BossAttackDataBlockCfgLoader::~BossAttackDataBlockCfgLoader()
BossAttackDataBlockCfgLoader::CreateDataBlock(char const*)
BossAttackDataBlockCfgLoader::Find(char const*)
BossAttackDataBlockCfgLoader::FixUp()
BossAttackDataBlockCfgLoader::PostParse()
BossDescriptorAttack::BossDescriptorAttack(BigBossManagerBase&, BossAttackDescriptor*, VuMtx const&)
BossDescriptorAttack::CreateLightAndAnimInstance(char*)
BossDescriptorAttack::~BossDescriptorAttack()
BossDescriptorAttack::CleanUpLightAndAnimInstance()
BossDescriptorAttack::~BossDescriptorAttack()
BossDescriptorAttack::Process(float)
BossDescriptorAttack::DamageGameObjs()
BossDescriptorAttack::Render()
BossDescriptorAttack::Refresh()
BigBossManagerBase::AddDescriptorAttack(VuMtx const&, BossAttackDescriptor*, int&)
BigBossManagerBase::Find(char*)
BigBossManagerBase::EventNotify(Event&, NuEventData&)
BigBossManagerBase::FixUpLevelHeight()
BigBossManagerBase::UnFixUpLevelHeight()
BigBossManagerBase::SetupAllDataEntries()
BigBossManagerBase::AddGizmoOfInterest(GizmoObstacle*)
GizmoOfInterestList::Find(GizmoObstacle*)
BigBossManagerBase::AddGizmoOfInterest(char*)
GizmoOfInterestList::ActivateWithin(VuVec const&, VuVec const&, float)
BigBossManagerBase::BlowUpActivateWithin(VuVec const&, VuVec const&, float)
BigBossManagerBase::GizmoAquireSpecials(Gizmo*)
BigBossManagerBase::SetupGeneralDataEntries()
BigBossManagerBase::SetupDataEntries()
BigBossManagerBase::FixUpDataEntries()
BigBossManagerBase::FixUpGeneralDataEntries()
BigBossManagerBase::FixUpGizmoOfInterest()
GizmoOfInterest::GizmoOfInterest(GizmoObstacle*)
BigBossManagerBase::ThrowSpellItPiece(GizSpellItItem*, VuVec&, VuVec&)
BigBossManagerBase::DecoupleRigidsForLayer(CharInst*, int, VuVec*, float)
BigBossManagerBase::DecoupleRigidsForLayers(CharInst*, long, VuVec*, float)
BigBossManagerBase::RemoveRigidsForLayers(CharInst*, long)
BigBossManagerBase::RemoveRigidsForLayer(CharInst*, int)
BigBossManagerBase::IsBossGameObjectRadiusInsideConstraintSpline(SplineObject*, GameObject*, float, VuVec&)
BossManagerOverrideCastPart(PART*, float)
BigBossManagerBase::OverrideCastPart(PART&, float)
BigBossManagerBase::QuickCastGivenStuff(float, VuVec const&, VuVec const&, float, float, VuVec&, int)
RigidBodiesJudder::RigidBodiesJudder()
RigidBodiesJudder::Parse(nufpar_s*)
RigidBodiesJudder::Judder(DynoScene&, VuVec const&, RigidBodiesJudder const&)
BigBossManagerBase::~BigBossManagerBase()
LiteBigBossManager::~LiteBigBossManager()
BigBossManagerBase::IsInContainer(LevelContainer&)
LiteBigBossManager::GetManagerName() const
BigBossManagerBase::CfgName() const
BigBossManagerBase::NotifyCreateGameObject_Callback(GameObject&)
BigBossManagerBase::PostGameAISysReset_Callback()
BigBossManagerBase::Display(MechCharacter*, char*, int)
BigBossManagerBase::MenuDraw(char*, int)
BigBossManagerBase::MenuUpdate(MENU*, int)
BigBossManagerBase::PostAISysProcessCharacter(GameObject*)
BigBossManagerBase::GetCameraPlayerPosForKeepOnScreen(MechCharacter*, VuVec&)
BigBossManagerBase::CameraPropertiesOverride(int&, int&, int&, NUVEC&, NUMTX&, GAMECAMERA*, bool)
BigBossManagerBase::GetCamOrientationSeekRateOverride()
BigBossManagerBase::GetCamVertViewAngEitherSide()
BigBossManagerBase::GetCustomBlendTargetAXRatio(int, int)
BigBossManagerBase::ForcePreventPlayerHidden(MechCharacter*)
BigBossManagerBase::ObjHitObjStartCallback(MechCharacter*&, MechCharacter*, int&, int, int, int)
BigBossManagerBase::AllowedToDoContextInvulnerableCheck(MechCharacter*, MechCharacter*, bool&)
BigBossManagerBase::ObjHitObjEndCallback(MechCharacter*&, MechCharacter*, int, int, int, int)
BigBossManagerBase::LegoShootingSetObjTargetCallback(MechCharacter*, MechCharacter*, VuVec&)
BigBossManagerBase::FindBoltTarget_GameObjectsOnly(MechCharacter*)
BigBossManagerBase::BoltCheckHitGameObjects_PreventImmuneToBoltsSkip(Bolt*, MechCharacter*)
BigBossManagerBase::OverrideShootTargetInfo(MechCharacter&)
BigBossManagerBase::PlayerAutoTurretOverrideShootPos(MechObjectData&, VuVec&, MechCharacter*)
BigBossManagerBase::AllowedToShoot(MechCharacter&)
BigBossManagerBase::AllowedToTarget(MechCharacter*, BoltType*, TARGET_INFO*)
BigBossManagerBase::IsAllowedToStartSlideCallback(GameObject*, bool, Entity*)
BigBossManagerBase::AllowJumpOnSliding(MechCharacter*)
BigBossManagerBase::AllowedToRunStop(MechCharacter*, bool&)
BigBossManagerBase::GameObjectVelocityModificationCallback(GameObject*, NUVEC&)
BigBossManagerBase::GameObjectWedgedInTerrainCheck(GameObject*, DynamicArray<ContactPoint> const*)
BigBossManagerBase::PreCharacterMove(GameObject*, VuVec&, float)
BigBossManagerBase::Whip_WhipBigBossGameObjectOnly()
BigBossManagerBase::Whip_Tether_AdjustTargetMom_Callback_PosOverride(MechCharacter*, MechCharacter*, VuVec&, VuVec&)
BigBossManagerBase::GetWhipGrappleAttachYRotation(MechCharacter*, short&)
BigBossManagerBase::Whip_FindTargetIsLOSValidCallback(eTargetingLos&, MechCharacter*, void*, eGlowType)
BigBossManagerBase::Whip_ObstacleGrappleForceGlow(MechCharacter*, bool&)
BigBossManagerBase::Whip_CanWhipTargetCallback(MechCharacter*, MechCharacter*)
BigBossManagerBase::Whip_PreventAIWhipDisconnect(MechCharacter*, bool&)
BigBossManagerBase::Whip_InterceptContextAction(MechCharacter*)
BigBossManagerBase::Whip_MonitorForWhipJammedCloseToGor(MechCharacter*, Cloth*)
BigBossManagerBase::Whip_TiedUpObjOverride(MechCharacter*, bool&, int&)
BigBossManagerBase::GizmoGrappleSetStartPosY_Modification(NUVEC&, NUVEC*)
BigBossManagerBase::ForceAttemptFlatten(MechCharacter*, MechCharacter*)
BigBossManagerBase::CanFlatten(MechCharacter*, MechCharacter*)
BigBossManagerBase::BigBossStaticAttackCode_PoiOverride(MechCharacter*, int&)
BigBossManagerBase::GetExplosionFlags(BlowUp&, int&)
BigBossManagerBase::AllowOpponentChoiceCallback(MechCharacter*, MechCharacter*)
BigBossManagerBase::CanSeeOrHearOpponent(MechCharacter*, MechCharacter*)
BigBossManagerBase::StartBlockCallback(MechCharacter*, MechCharacter*)
BigBossManagerBase::AllowBlockToStart(MechCharacter*)
BigBossManagerBase::AllowDodgeToStart(MechCharacter*)
BigBossManagerBase::GameObjAllowedToEnterTubeContext(MechCharacter*)
BigBossManagerBase::CanUseMagic(MechCharacter*, int&)
BigBossManagerBase::GizMagic_AngleToMagic(unsigned short&, NUVEC*, GizmoMagic*)
BigBossManagerBase::Magic_AllowedToFinish(MechCharacter*, int&)
BigBossManagerBase::CanUseSpellIt(MechCharacter&, GizmoSpellIt&)
BigBossManagerBase::LegoSpellIts_CanUseSpellItEvenIfNotAtStart(GizmoSpellIt*)
BigBossManagerBase::LegoSpellIts_MaxBuildUseRangeOverride(GizmoSpellIt*, float&)
BigBossManagerBase::GizmoSpellIt_AllowedToResetSpellit(GizmoSpellIt*)
BigBossManagerBase::GizmoSpellIt_RevertToStart(GizmoSpellIt*)
BigBossManagerBase::Plug_CanAllowPlugSfxToPlay(GizmoPlug*)
BigBossManagerBase::DrawnTightRopePoints(GizmoTightRope&, int, NUVTX_TC1*)
BigBossManagerBase::ShouldRenderTightRope(GizmoTightRope&)
BigBossManagerBase::ShouldFixPlayerOnTightropeLineEvenWhenNotMoving(MechCharacter*, GizmoTightRope*)
BigBossManagerBase::GetTightRopePointsList()
BigBossManagerBase::OnDislodgeDriver(GameObject*, VuVec&)
BigBossManagerBase::HasDriver_IgnoreKrawlyBusStopCheck(bool&)
BigBossManagerBase::Action_PlayerAutoTurret_ForceFire(GameObject*, bool&)
BigBossManagerBase::OnRemoveGameObject(GameObject&)
BigBossManagerBase::Phobia_React(MechCharacter*, int*)
BigBossManagerBase::ThouShaltNotPass_KrawlyRadio()
BigBossManagerBase::OnDestroyItem(GizItem&, NUMTX*, MechCharacter*)
BigBossManagerBase::AllowFancyDetectorDrawnForBoss(GameObject&)
BigBossManagerBase::CanTag(bool&, GameObject&, GameObject&)
BigBossManagerBase::AllowLargeObjectTaggingFlexibility(MechCharacter&)
BigBossManagerBase::TakeOverActionOverride(int&, MechCharacter&, MechCharacter&)
BigBossManagerBase::ShouldKeepBossIconsUpConstantly(MechCharacter*)
BigBossManagerBase::ShouldDisplayRidingObjectsHealthWhenRiding(MechCharacter*)
BigBossManagerBase::Chooser_PlayerHasMenuFn_HARRY(GameObject&)
BigBossManagerBase::IsLimbBlackListed(Entity const*)
BigBossManagerBase::CanStartFlying(MechCharacter&)
BigBossManagerBase::SpecialMove_KeepVictimStationaryInitially(MechCharacter&)
BigBossManagerBase::GroundCrackAttackAllowedToDamage()
BigBossManagerBase::GroundCrackEndDamageOnly()
BigBossManagerBase::GetSecondaryBossGameObj()
BigBossManagerBase::GetMinifigBossGameObj()
BigBossManagerBase::GetMountableBossGameObj()
BigBossManagerBase::AllowAsHijackTarget(GameObject*, GameObject*)
BigBossManagerBase::GetBossCaveTroll()
BigBossManagerBase::CollisionBetweenRagdollAndNonTerrainRigid(RigidBody*, RigidBody*)
BigBossManagerBase::CollisionBetweenRagDollRigids(RigidBody*, RigidBody*)
BigBossManagerBase::CollisionBetweenRagDollAndVehicle(RigidBody*, RigidBody*)
BigBossManagerBase::CollisionBetweenVehicleAndVehicle(RigidBody*, RigidBody*)
BigBossManagerBase::HitCharacterNonRagdoll(MechCharacter*, Entity*, ContactPoint&)
BigBossManagerBase::Collide2Objects(GameObject*, GameObject*, VuVec const&, VuVec const&)
BigBossManagerBase::AllowCollision(GizmoLocomote const&, LegoSpecial const&, Entity const&)
BigBossManagerBase::CanSkipCharacterForPartCollision(MechCharacter*)
BigBossManagerBase::CreateKillParts_ModifyMom(CharInst const&, NUVEC&)
BigBossManagerBase::BoltInitOverride(Bolt*)
BigBossManagerBase::BoltHitPlatform(Bolt*)
BigBossManagerBase::OnObjHitShield(GameObject*, GameObject*, Bolt*, int&, unsigned int)
BigBossManagerBase::AllowCollectHeart(MechCharacter&)
BigBossManagerBase::Boomerang_FindTarget_d2_best_Override(GameObject*, float&)
BigBossManagerBase::Boomerang_AllowedToTarget(GameObject*, GameObject*)
BigBossManagerBase::Boomerang_ForceAllowTarget(GameObject*, GameObject*)
BigBossManagerBase::Boomerang_HitGameObject(MechCharacter*, MechCharacter*, bool&)
BigBossManagerBase::Boomerang_PostBoomerangHit(GameObject*, Boomerang*)
BigBossManagerBase::ModifyBoomerangVelocity(Boomerang&, NUVEC&, NUVEC&, NUVEC&)
BigBossManagerBase::FindShootTarget_AllowedToTarget(GameObject*, GameObject*)
BigBossManagerBase::AllowedToTriggerBossActionMusic()
BigBossManagerBase::RagDollMeleeHit(GameObject*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, Entity*)
BigBossManagerBase::CharacterMeleeHit(GameObject*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, GameObject*)
BigBossManagerBase::RigidBodyMeleeHit(GameObject*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, Entity*)
BigBossManagerBase::GizmoMeleeHit(GameObject*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, Entity*)
BigBossManagerBase::VehicleMeleeHit(GameObject*, VuVec const&, VuVec const&, VuVec const&, VuVec const&, Entity*)
BigBossManagerBase::ForceMeleeAttack(bool&, GameObject*)
BigBossManagerBase::GetForceAllowPunchHit(MechCharacter*, MechCharacter*)
BigBossManagerBase::RigidBasedCrusher_ShouldPreventComplexGizmoBlowup(GameObject*, Gizmo*)
BigBossManagerBase::ModifyLightSabreStreakBitsCallback(MechCharacter*)
BigBossManagerBase::ChooseFlakPosition(VuVec&)
BigBossManagerBase::AllowBackdropCreate()
BigBossManagerBase::OverrideBackdropCamera()
BigBossManagerBase::GroundCrackCallBack(GroundCrackAttack*, VuVec const&, VuVec const&, float)
BigBossManagerBase::GetBasePlateAttachedMsg(BlowUp&)
BigBossManagerBase::GetBasePlateCompleteMsg(BlowUp&)
BigBossManagerBase::Collision(RigidBody*, RigidBody*)
BigBossManagerBase::HitCharacter(MechCharacter*, Entity*, ContactPoint&)
BigBossManagerBase::AddFootStep(int, MechCharacter*)
PuppetWrapper::GetType()
BossProcessor::GetHandle()
PuppetWrapper::GetChildGameObject()
BossShockWaveAttack::GetType()
BossProcessor::GetChildGameObject()
GroundCrackAttack::GetType()
BossCraterAttack::GetType()
DataBlockCfgLoader::WriteCfgDescription()
BossAttackDataBlockCfgLoader::GetCfgLoaderTypeName() const
BossDescriptorAttack::GetType()
BossDescriptorAttack::GetHandle()
BossAttackDescriptor::~BossAttackDescriptor()
BigBossManagerInit::~BigBossManagerInit()
LiteBossInit::~LiteBossInit()
LiteBossInit::CreateBigBossManager(LegoLevelContainer&)
FootPrint::Reset()
FootPrintManager::InitializePerm()
FootPrintManager::InitTypes()
FootPrintManager::InitForLevel(LegoLevelContainer&)
FootPrintManager::AllocateFootPrint()
FootPrintManager::AddTypeFromName(char const*, unsigned int, eFootType)
FootPrintManager::GetTypeIndexFromTerrain(unsigned int, eFootType)
FootPrintManager::FootPrintManager()
FootPrintManager::Reset()
FootPrintManager::DrawFadeAllocated()
FootPrintManager::DrawFadeTime()
FootPrintManager::Process(float)
FootPrintManager::AddFootPrint(NUVEC const&, unsigned short, unsigned short, unsigned short, MechCharacter const*, eLAYER_TYPE*, eFootType)
FootPrintManager::EventNotify(Event&, NuEventData&)
FootPrintManager::~FootPrintManager()
FootPrintManager::~FootPrintManager()
GizFlowHelper::GizFlowHelper()
GizFlowHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to GizFlowHelper::EventNotify(Event&, NuEventData&)
GizFlowHelper::Initialise()
GizFlowHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
GizFlowHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
GizFlowHelper::~GizFlowHelper()
non-virtual thunk to GizFlowHelper::~GizFlowHelper()
non-virtual thunk to GizFlowHelper::~GizFlowHelper()
GetNewTerrainDynoScene()
GetNewTerrainLevelContainer()
TerrainGetMtx(long)
PlatInstGetHit(long)
GetSpecialName(NuSmartPtr<NuScene, true>, int)
NewPlatPickupInst(NUMTX*, int)
FindPlatInst(int)
DeletePlatinst(long)
TerrainPlatId_AllMotionTypes()
TerrainPlatId()
NewRayCastHasHitPlatID(int)
PlatformIsAsleep(long)
NewTerrPlatformsOff()
PlatOnOff(long, int)
NewShadowOnPlatform()
UpdatePlatinst(long, NUMTX*)
GeomTerrainGetRayCastResult()
NewRayCastGetTOFI()
NewRayCastGetEntity()
NewRayCastGetImpactTerrainType()
NewRayCastGetImpactNormal(NUVEC*)
NewRayCastScaleYMask(NUVEC const*, NUVEC*, float, float, int, int, int, RayFlags, bool, bool, FirstPointCollector*, DynoRagDoll*)
_use_GameRayCast_instead_of_NewRayCast_please_(NUVEC*, NUVEC*, float, int)
NewRayCastScaleY(NUVEC*, NUVEC*, float, float, int)
ShadowInfo()
EShadowInfo()
ShadowRoofInfo()
EShadowRoofInfo()
NewShadow_SetEntityLayerMask(unsigned int)
ResetNewShadowGlobals()
NewShadowEx(NUVEC const*, float, float, float, int, bool)
GatherGroundInfo(NUVEC const*, float, float, float, int, MechCharacter*, bool, bool)
_use_GameShadow_instead_of_NewShadow_(NUVEC*, float, float, int)
TerrainSetImpactData(TERIMPACTDATA*, int*, int)
SetPlatIdToLastHitDynamicBody()
FullReflect(NUVEC const*, NUVEC const*, NUVEC*)
FullDeflect(NUVEC*, NUVEC*, NUVEC*)
TerrainSetCurDyno(void*, LevelContainer*)
PhysicsLaunch_RegisterEffects()
PhysicsLaunch_Start(GameObject*, NUVEC const&, unsigned int, int, int)
PhysicsLaunch_SetAnimation(GameObject*, short)
PhysicsLaunch_SetPhase(GameObject*, unsigned char)
PhysicsLaunch_SetInitialVelocity(GameObject*, NUVEC const&)
PhysicsLaunch_MoveCode(GameObject*)
PhysicsLaunch_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
PhysicsLaunch_CalcTargetedVelocity(GameObject*, NUVEC const&, float, float, NUVEC&)
PhysicsLaunch_CalcTargetedVelocityFromPoint(GameObject*, NUVEC const&, float, float, NUVEC&)
CutSceneCameraHelper::PopulateCutsceneParams(instNUGCUTSCENE const&, int, NUDOFPARAMETERS&, NULENSFILTERPARAMETERS&, NUEXPOSURECONTROLPARAMETERS&)
CutSceneCameraHelper::OverrideClipDistancesIfNeeded(instNUGCUTSCENE const&, int, NuCamera&)
CutSceneCameraHelper::SetFov(instNUGCUTSCENE const&, int, NuCamera&)
CutSceneCameraHelper::SetMtx(instNUGCUTSCENE const&, int, NuCamera&)
cAreaSplitSettings::GetDynamicCoopSubModePriorityIndex(cNewSplitScreenManager::eDynamicCoopSubMode)
cAreaSplitSettings::cAreaSplitSettings()
cAreaSplitSettings::Reset()
cAreaSplitSettings::GetRefCamSplitDistEffectRatio()
cAreaSplitSettings::GetRefCamPullbackClampDist()
cAreaSplitSettings::Configure(WORLDINFO*)
cAreaSplitSettings::SetAIAreaIndex(WORLDINFO*)
cAreaSplitSettings::SetName(char const*)
cAreaSplitSettings::ParseName(nufpar_s*, void*)
cAreaSplitSettings::ParseDynamicCoopSubMode(nufpar_s*, void*)
cAreaSplitSettings::ParseRefCamSplitDistEffectRatio(nufpar_s*, void*)
cAreaSplitSettings::ParseRefCamPullbackClampDist(nufpar_s*, void*)
cAreaSplitSettings::ParseRefCamIgnoreDistDownCamDir(nufpar_s*, void*)
cAreaSplitSettings::ParseSockPullbackUseOffset(nufpar_s*, void*)
cAreaSplitSettings::ParseSplitSockSettingsEnabled(nufpar_s*, void*)
cAreaSplitSettings::ParseSplitCamVehicleExtraPullback(nufpar_s*, void*)
cAreaSplitSettings::ParseSplitCamCharacterExtraPullback(nufpar_s*, void*)
cAreaSplitSettings::ParseSplitCamUpperLookRatioYOverride(nufpar_s*, void*)
cAreaSplitSettings::ParseSplitCamLowerLookRatioYOverride(nufpar_s*, void*)
cAreaSplitSettings::ParseVerticalLeftSegChangeDistSqr(nufpar_s*, void*)
cAreaSplitSettings::ParseSplitEnabled(nufpar_s*, void*)
cAreaSplitSettings::ParseRequiresAllPlayers(nufpar_s*, void*)
cAreaSplitSettings::ParseDisabled(nufpar_s*, void*)
cAreaSplitSettingsMgr::cAreaSplitSettingsMgr(LevelContainer&)
cAreaSplitSettingsMgr::Reset()
cAreaSplitSettingsMgr::SetAreaBuilderSettings()
cAreaSplitSettingsMgr::SetAreaFallbackSettings()
cCoopSubModeOverride::Reset()
cAreaSplitSettingsMgr::SetDefaultSettingsIndex()
cAreaSplitSettingsMgr::ReConfigureAreaSettings(WORLDINFO*, char*)
cAreaSplitSettingsMgr::Parse(char*)
cAreaSplitSettingsMgr::ConfigureAreaSettings(WORLDINFO*)
cCoopSubModeOverride::ReConfigureSettings(WORLDINFO*, char*)
cAreaSplitSettingsMgr::CreateAreaMask()
cCoopSubModeOverride::ConfigureSettings(WORLDINFO*)
cAreaSplitSettingsMgr::FindAreaSplitSettingsByName(char const*)
cAreaSplitSettingsMgr::AllPlayersInSameArea()
cAreaSplitSettingsMgr::GetCurrentSplitSettings(MechCharacter*)
cAreaSplitSettingsMgr::GetCurrentSplitSettings(WORLDINFO&)
cAreaSplitSettingsMgr::ProcessDbg()
cCoopSubModeOverride::Parse(char*)
cSplitArea::cSplitArea()
cSplitArea::Reset()
cSplitArea::Configure(WORLDINFO*)
cSplitArea::SetAIAreaIndex(WORLDINFO*)
cSplitArea::SetName(char const*)
cSplitArea::Parse(nufpar_s*)
cCoopSubModeOverrideEntry::cCoopSubModeOverrideEntry()
cCoopSubModeOverrideEntry::Reset()
cCoopSubModeOverrideEntry::Parse(cCoopSubModeOverride const&, nufpar_s*)
cCoopSubModeOverride::FindAreaArrayIndex(char const*) const
cCoopSubModeOverrideEntry::GetAreaMapIndex(int)
cCoopSubModeOverride::cCoopSubModeOverride()
cCoopSubModeOverride::CreateAreaMask()
cCoopSubModeOverride::GetPrioritisedAreaIndex(MechCharacter*)
cCoopSubModeOverride::OverrideDynamicCoopSplitSubMode(cNewSplitScreenManager::eDynamicCoopSubMode&)
SplitScreenGameCameraAdaptor::Initialise(GAMECAMERA*)
SplitScreenGameCameraAdaptor::IsValid()
SplitScreenGameCameraAdaptor::GetNuCamera()
SplitScreenGameCameraAdaptor::GetPosition()
SplitScreenGameCameraAdaptor::GetPointOfInterestPreModifiers()
SplitScreenGameCameraAdaptor::GetPointOfInterestPostModifiers()
SplitScreenGameCameraAdaptor::GetSplitDeterminationPosition()
SplitScreenGameCameraAdaptor::GetAspect()
SplitScreenGameCameraAdaptor::GetFOV()
SplitScreenGameCameraAdaptor::GetMtx()
SplitScreenGameCameraAdaptor::GetFocalDepth()
SplitScreenGameCameraAdaptor::GetFocalDistance()
SplitScreenGameCameraAdaptor::GetNearClip()
SplitScreenGameCameraAdaptor::GetFarClip()
cSplitScreenSegmentInterface::Initialise(GAMECAMERA*, GAMECAMERA*, MechCharacter*, int)
cSplitScreenSegmentInterface::SetFocusObject(MechCharacter*)
cSplitScreenSegmentInterface::EnterLevel()
cSplitScreenSegmentInterface::ExitLevel()
cSplitScreenSegmentInterface::DropOut(WORLDINFO const&)
cSplitScreenSegmentInterface::FadeDownThenUp(float)
cSplitScreenSegmentInterface::GetFocusObject()
cSplitScreenSegmentInterface::GetLastFramesFocusObject()
cSplitScreenSegmentInterface::SetLastFramesFocusObject()
cSplitScreenSegmentInterface::GetFinalRenderCam()
cSplitScreenSegmentInterface::GetScreenUpperRatio()
cSplitScreenSegmentInterface::GetScreenLowerRatio()
cSplitScreenSegmentInterface::GetSegmentCameraFocusPos()
cSplitScreenSegmentInterface::GetSegmentCameraPos()
cSplitScreenSegmentInterface::GetViewportOffsetScreen()
cSplitScreenSegmentInterface::GetSegmentCentrePosAbs()
cSplitScreenSegmentInterface::GetSplitScreenInfo()
cSplitScreenSegmentInterface::GetSplitAnchorDir()
cSplitScreenSegmentInterface::SplitStageAdjustedCamPosAndFocus(VuVec&, VuVec&)
cSplitScreenSegmentInterface::GetCameraInterpolant() const
cSplitScreenSegmentInterface::cSplitScreenSegmentInterface(cSplitScreenSegmentInterfaceMgr&)
cSplitScreenSegmentInterface::~cSplitScreenSegmentInterface()
SplitScreenGameCameraAdaptor::~SplitScreenGameCameraAdaptor()
cSplitScreenSegmentInterface::FadeDown(float, unsigned int)
cSplitScreenSegmentInterface::FadeUp(float)
cSplitScreenSegmentInterface::ClearFade()
cSplitScreenSegmentInterface::MaintainFade()
cSplitScreenSegmentInterface::IsFadeComplete() const
cSplitScreenSegmentInterface::IsFadeComplete(cSplitScreenSegmentInterface::eFadeType) const
cSplitScreenSegmentInterface::Fade(cSplitScreenSegmentInterface::eFadeType, float)
cSplitScreenSegmentInterface::HasFadeStarted() const
cSplitScreenSegmentInterface::GetRenderPipeIndex() const
cSplitScreenSegmentInterface::GetIsDroppingOut() const
cSplitScreenSegmentInterface::GetLevelView() const
cSplitScreenSegmentInterfaceMgr::GetSubModeFromOptionsSelectedSplitMode(cSplitScreenSegmentInterfaceMgr::eOptionsSelectedSplitMode)
cSplitScreenSegmentInterfaceMgr::GetNameFromOptionsSelectedSplitMode(cSplitScreenSegmentInterfaceMgr::eOptionsSelectedSplitMode)
cSplitScreenSegmentInterfaceMgr::~cSplitScreenSegmentInterfaceMgr()
cSplitScreenSegmentInterfaceMgr::~cSplitScreenSegmentInterfaceMgr()
cSplitScreenSegmentInterfaceMgr::Initialise(GAMECAMERA*, GAMECAMERA**, GAMECAMERA**, MechCharacter**, int)
cSplitScreenSegmentInterfaceMgr::EnterLevel(WORLDINFO*)
cSplitScreenSegmentInterfaceMgr::ConfigureSplitScreen(WORLDINFO*)
cSplitScreenSegmentInterfaceMgr::ExitLevel(WORLDINFO*)
cSplitScreenSegmentInterfaceMgr::ReConfigureSplitScreen(WORLDINFO*, char*)
DebugSplitScreen_ToggleIgnoreDropouts()
DebugSplitScreen_ToggleSnapSegmentsRatherThanBlend()
DebugSplitScreen_SwitchIndexes()
DebugSplitScreenBlendHorizontal_CheckForModeChangeRequests()
DebugSplitScreenFades_CheckForModeChangeRequests()
cSplitScreenSegmentInterfaceMgr::UpdateSplitPointOfReferenceCameras(WORLDINFO&)
cSplitScreenSegmentInterfaceMgr::IsSplitting() const
cSplitScreenSegmentInterfaceMgr::SetLastFramesTargetObjects()
cSplitScreenSegmentInterfaceMgr::GetSplitSegmentInterface(int) const
cSplitScreenSegmentInterfaceMgr::UpdateSplitSegmentTargetCameras()
cSplitScreenSegmentInterfaceMgr::UpdateSplitSegmentCurrentCameras()
cSplitScreenSegmentInterfaceMgr::UpdateSplitSegmentAudioListeners()
cSplitScreenSegmentInterfaceMgr::IsInTransition() const
cSplitScreenSegmentInterfaceMgr::GetOrbParams(VuVec&, float&, float&) const
cSplitScreenSegmentInterfaceMgr::CutSceneCameraSet(WORLDINFO&)
SplitScreenCutsceneCameraAdaptor::~SplitScreenCutsceneCameraAdaptor()
cSplitScreenSegmentInterfaceMgr::IsFadeInProgress()
cSplitScreenSegmentInterfaceMgr::GetFirstGamePipe()
cSplitScreenSegmentInterfaceMgr::GetLastRenderPipeIndex()
cSplitScreenSegmentInterfaceMgr::CanGrabStillScreen() const
cSplitScreenSegmentInterfaceMgr::GetDebugSplitCamerasEnabled() const
cSplitScreenSegmentInterfaceMgr::IsSplitCamDebugFlagSet(cNewSplitScreenManager::eSplitCamDebugFlag)
cSplitScreenSegmentInterfaceMgr::GetNumControlledFocusObjects()
cSplitScreenSegmentInterfaceMgr::UpdateTargetCamSocksToUse(WORLDINFO*)
cSplitScreenSegmentInterfaceMgr::GetSplitScreenInfo(MechCharacter*)
LegoSplitScreen::GetCurrentIFaceMgr() const
cSplitScreenSegmentInterfaceMgr::IsInAnOrbMode() const
cSplitScreenSegmentInterfaceMgr::GetVerticalToHorizontalRatio(MechCharacter*)
cSplitScreenSegmentInterfaceMgr::GetSplitSegmentInterface(MechCharacter const*) const
cSplitScreenSegmentInterfaceMgr::GetUseSplitSockSettings(MechCharacter*)
cSplitScreenSegmentInterfaceMgr::ConfigureMinicutAudioListener()
cSplitScreenSegmentInterfaceMgr::SetupSingleCameraOnly(NuCamera const&)
cSplitScreenSegmentInterfaceMgr::SetupSingleCameraOnlyForStatusScreen()
cSplitScreenSegmentInterfaceMgr::SetupCutsceneDOF(int)
cSplitScreenSegmentInterfaceMgr::SetupSingleOrDualCamerasForCutscenes()
cSplitScreenSegmentInterfaceMgr::DetermineAndRequestModesAndSettingsForSplitScreenManager(WORLDINFO*)
cSplitScreenSegmentInterfaceMgr::SetHorizontalSplitUpperSegmentIndex(int)
cSplitScreenSegmentInterfaceMgr::SetVerticalSplitLeftSegmentIndex(int)
UpdateDriveCamera(WORLDINFO*)
DoImposterGameLodding()
SetupPaintingCamera(instNUGCUTRIGID*, NuCamera*)
cSplitScreenSegmentInterfaceMgr::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
cSplitScreenSegmentInterfaceMgr::Process()
cSplitScreenSegmentInterfaceMgr::SetSSMSplitDecisionCameras()
NuDebugDraw::RenderText2Df(float, float, char const*, ...)
cSplitScreenSegmentInterfaceMgr::SetSSMCurrentSplitCameras()
cSplitScreenSegmentInterfaceMgr::RegisterDebrisCutoffVectors()
cSplitScreenSegmentInterfaceMgr::ProcessDbg(WORLDINFO*)
cSplitScreenSegmentInterfaceMgr::SetUsing3rdPerson(bool, NUMTX*)
cSplitScreenSegmentInterfaceMgr::SetHoldCurrentSegmentSides(bool)
cSplitScreenSegmentInterfaceMgr::SetHorizontalUpperIndexByFocusObjHeight()
cSplitScreenSegmentInterfaceMgr::GetShadowPosFromMechCharacterBase(MechCharacter const&)
cSplitScreenSegmentInterfaceMgr::SetSpaciallyControlledLeftSegmentIndex(float)
cSplitScreenSegmentInterfaceMgr::NumInterfacesWithFocusObjects()
cSplitScreenSegmentInterfaceMgr::GetSplitSegmentInterfaceForCurrentPipe() const
cSplitScreenSegmentInterfaceMgr::FadeDown(MechCharacter const*, float)
cSplitScreenSegmentInterfaceMgr::FadeUp(MechCharacter const*, float)
cSplitScreenSegmentInterfaceMgr::MaintainFade(MechCharacter const*)
cSplitScreenSegmentInterfaceMgr::IsFadeComplete(MechCharacter const*)
ShouldDisableSplitscreenTest(float (*)())
cSplitScreenSegmentInterfaceMgr::SetSplitDeterminationPositions()
cSplitScreenSegmentInterfaceMgr::TransformPosToScreen(MechCharacter const*, NUVEC const&, NUVEC&)
cSplitScreenSegmentInterfaceMgr::TransformPosToScreen(MechCharacter const*, VuVec const&, VuVec&)
cSplitScreenSegmentInterfaceMgr::IsScreenPosInfrontOfCamera(VuVec const&)
cSplitScreenSegmentInterfaceMgr::IsSegmentInOrbMode(MechCharacter*)
cSplitScreenSegmentInterfaceMgr::GetSegmentCentrePos(MechCharacter*, eCoordSys)
cSplitScreenSegmentInterfaceMgr::GetSplitAnchorDir(MechCharacter*)
cSplitScreenSegmentInterfaceMgr::GetSplitScreenInfo(int)
cSplitScreenSegmentInterfaceMgr::GetInterfaceIndex(MechCharacter*)
cSplitScreenSegmentInterfaceMgr::GetFocusObject(int)
cSplitScreenSegmentInterfaceMgr::GetFocusObject(LevelContainer*)
cSplitScreenSegmentInterfaceMgr::GetRenderPipeIndex(LevelContainer*) const
cSplitScreenSegmentInterfaceMgr::GetRenderPipeIndex(MechCharacter*) const
cSplitScreenSegmentInterfaceMgr::GetCurrentSplitSegmentInterface()
cSplitScreenSegmentInterfaceMgr::IsRenderingSplitSegmentInterface(MechCharacter*)
cSplitScreenSegmentInterfaceMgr::GetCurrentGameCameraFromSplitSegmentInterface(MechCharacter const*)
cSplitScreenSegmentInterfaceMgr::GetTargetGameCameraFromSplitSegmentInterface(MechCharacter*)
cSplitScreenSegmentInterfaceMgr::GetStoredFocusObjPos(MechCharacter*)
cSplitScreenSegmentInterfaceMgr::GetFinalRenderCameraFromSplitSegmentInterface(int)
cSplitScreenSegmentInterfaceMgr::GetFinalRenderCameraFromCurrentPipe()
cSplitScreenSegmentInterfaceMgr::GetNumFocusObjects()
cSplitScreenSegmentInterfaceMgr::IsAnyCameraWithinRadiusSqr(VuVec const&, float)
cSplitScreenSegmentInterfaceMgr::ClipTestSphere(NUVEC const*, float, MechCharacter*)
cSplitScreenSegmentInterfaceMgr::ClipTestSphere(NuVector3Base const&, float, MechCharacter*)
cSplitScreenSegmentInterfaceMgr::ClipTestSphere(VuVec const*, float, MechCharacter*)
cSplitScreenSegmentInterfaceMgr::ClipTestSphere(VuVec const&, float, MechCharacter*)
cSplitScreenSegmentInterfaceMgr::RenderDefaultIndicator(MechCharacter*, VuVec const&, eCoordSys, NUCOLOUR4, float, nuhspecial_s*, nuhspecial_s*, float)
cSplitScreenSegmentInterfaceMgr::GetSegmentSafeAreaClampedPos(MechCharacter*, VuVec const&, VuVec&, eCoordSys, bool, float*)
cSplitScreenSegmentInterfaceMgr::IsPosBehindCamera(MechCharacter*, VuVec const&)
cSplitScreenSegmentInterfaceMgr::IsScreenSpacePointInSegment(MechCharacter const*, eCoordSys, VuVec const&)
cSplitScreenSegmentInterfaceMgr::GetSegmentCentreTo2DPos(MechCharacter*, eCoordSys, VuVec const&, VuVec&)
cSplitScreenSegmentInterfaceMgr::SetOrbSegment(int, float)
cSplitScreenSegmentInterfaceMgr::GetOrbCentreAndRadius(VuVec&, float&) const
cSplitScreenSegmentInterfaceMgr::TurnOffOrbMode()
cSplitScreenSegmentInterfaceMgr::GetSplitBlend() const
cSplitScreenSegmentInterfaceMgr::RequestTransitionToDynamicSplit()
cSplitScreenSegmentInterfaceMgr::SetSnapSegmentsRatherThanBlend(bool)
cSplitScreenSegmentInterfaceMgr::GetSnapSegmentsRatherThanBlend()
cSplitScreenSegmentInterfaceMgr::SetIgnoreDropoutRequests(bool)
cSplitScreenSegmentInterfaceMgr::GetIgnoreDropoutRequests()
cSplitScreenSegmentInterfaceMgr::SetDynamicSplitMode()
cSplitScreenSegmentInterfaceMgr::SetSingleCameraMode()
cSplitScreenSegmentInterfaceMgr::SegmentFadeDbg()
cSplitScreenSegmentInterfaceMgr::SplitDeterminationPosDbg()
cSplitScreenSegmentInterfaceMgr::FocusObjDbg()
cSplitScreenSegmentInterfaceMgr::CurrentCamDbg()
cSplitScreenSegmentInterfaceMgr::TargetCamDbg()
cSplitScreenSegmentInterfaceMgr::ClipTestSphereDbg()
cSplitScreenSegmentInterfaceMgr::TransformPosToScreenDbg(VuVec&, float, unsigned int)
cSplitScreenSegmentInterfaceMgr::TransformFocusObjPosToScreenDbg()
cSplitScreenSegmentInterfaceMgr::ProcessDefaultIndicatorToSegmentSafeAreaDbg()
cSplitScreenSegmentInterfaceMgr::RenderDefaultIndicatorToSegmentSafeAreaDbg()
cSplitScreenSegmentInterfaceMgr::RenderDefaultIndicatorToOtherInterfacesDbg()
cSplitScreenSegmentInterfaceMgr::RenderDbg2D()
cSplitScreenSegmentInterfaceMgr::RenderDbg3D()
GetLegoContainerFromData(NuEventData&)
cSplitScreenSegmentInterfaceMgr::OnAreaLoad(LegoAreaContext*)
cSplitScreenSegmentInterfaceMgr::OnAreaDump(LegoAreaContext*)
cSplitScreenSegmentInterfaceMgr::OnLevelActivate(LegoLevelContainer&)
cSplitScreenSegmentInterfaceMgr::OnLevelDeactivate(LegoLevelContainer&)
cSplitScreenSegmentInterfaceMgr::IsSplit() const
cSplitScreenSegmentInterfaceMgr::CanSplit() const
cSplitScreenSegmentInterfaceMgr::InitForMiniCutBlendIn(int, float, float)
cSplitScreenSegmentInterfaceMgr::InitForMiniCutBlendOut()
cSplitScreenSegmentInterfaceMgr::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
cSplitScreenSegmentInterfaceMgr::cSplitScreenSegmentInterfaceMgr(cNewSplitScreenManager&)
cSplitScreenSegmentInterfaceMgr::EventNotify(Event&, NuEventData&)
cSplitScreenSegmentInterfaceMgr::RegisterProcessing()
cSplitScreenSegmentInterfaceMgr::RegisterRendering()
cSplitScreenSegmentInterfaceMgr::GetSplitManagerStateName() const
cSplitScreenSegmentInterfaceMgr::SetSplitManagerNextState()
cSplitScreenSegmentInterfaceMgr::SetupRenderPipesAndCamerasForPause()
cSplitScreenSegmentInterfaceMgr::SetupEditorRenderPipes(NuCamera*)
cSplitScreenSegmentInterfaceMgr::ShouldDisableHUDPanelForPlayer(MechCharacter*) const
cSplitScreenSegmentInterfaceMgr::SetOrbRenderPosition(cSplitScreenSegmentInterfaceMgr::eOrbRenderPosition)
LegoSplitScreen::OnEnterLevel(LegoLevelContainer&)
LegoSplitScreen::OnExitLevel(LegoLevelContainer&)
LegoSplitScreen::AddManagersForLevel(LegoLevelContainer&)
LegoSplitScreen::RemoveManagersForLevel(LegoLevelContainer&)
LegoSplitScreen::LegoSplitScreen()
LegoSplitScreen::ClipTestSphere(NUVEC const*, float, MechCharacter*)
LegoSplitScreen::ClipTestSphere(VuVec const*, float, MechCharacter*)
LegoSplitScreen::ClipTestSphere(VuVec const&, float, MechCharacter*)
LegoSplitScreen::IsSplitting() const
LegoSplitScreen::IsSplit() const
LegoSplitScreen::CanSplit() const
LegoSplitScreen::~LegoSplitScreen()
LegoSplitScreen::~LegoSplitScreen()
SplitScreenCutsceneCameraAdaptor::GetPointOfInterestPostModifiers()
SplitScreenCutsceneCameraAdaptor::GetSplitDeterminationPosition()
SplitScreenGameCameraAdaptor::~SplitScreenGameCameraAdaptor()
cSplitScreenSegmentInterfaceMgr::GetManagerName() const
SplitScreenCutsceneCameraAdaptor::~SplitScreenCutsceneCameraAdaptor()
SplitScreenCutsceneCameraAdaptor::IsValid()
SplitScreenCutsceneCameraAdaptor::GetNuCamera()
SplitScreenCutsceneCameraAdaptor::GetPosition()
SplitScreenCutsceneCameraAdaptor::GetPointOfInterestPreModifiers()
SplitScreenCutsceneCameraAdaptor::GetMtx()
SplitScreenCutsceneCameraAdaptor::GetAspect()
SplitScreenCutsceneCameraAdaptor::GetFOV()
SplitScreenCutsceneCameraAdaptor::GetFocalDepth()
SplitScreenCutsceneCameraAdaptor::GetFocalDistance()
SplitScreenCutsceneCameraAdaptor::GetNearClip()
SplitScreenCutsceneCameraAdaptor::GetFarClip()
LegoSplitScreen::Init()
cAreaSplitSettingsMgr::~cAreaSplitSettingsMgr()
cAreaSplitSettingsMgr::~cAreaSplitSettingsMgr()
cAreaSplitSettingsMgr::GetManagerName() const
cAreaSplitSettingsMgr::IsChildlessManager()
SRTParser::SRTParser(char const*, SubtitlesSRT*)
SRTParser::~SRTParser()
SRTParser::Parse()
SRTParser::IsValid()
SRTParser::ReadNextLine()
SRTParser::IsEndOfParse()
SRTParser::ParseSRTLine()
SRTParser::AddNewSubtitle()
SRTParser::RemoveLastSubtitle()
SRTParser::ParseIndex(char const*)
SRTParser::ParseTimes(char const*, CutSubtitle*)
SRTParser::ParseText()
SRTParser::LineAsIndex(char const*)
SRTParser::ParseTime(char*, char const*&, float*)
SRTParser::Consume(char const*&, char const*)
GetWord(char*, char const*&)
NuFixedStringT<(unsigned short)32>::Format(char const*, ...)
SRTParser::ReadNextLineInternal()
SetHeadTarget(MechCharacter*, NUVEC const*, signed char, float, float, float, bool)
SetObjAsHeadTarget(MechCharacter*, MechCharacter*, signed char, float, float, float)
HeadMovementWithIK(MechCharacter*)
ActionList_Make(MechCharacter&, CharDefGameData const*, ACTIONINFO*, int, unsigned int, short*, int)
ActionList_Pick(CharDefGameData const*, short*, int, int, int)
PastBreakoutFrame(MechCharacter*, float*)
PastFrame(MechCharacter*, int, float*)
PastFrame(MechCharacter*, float)
PastStopFrame(GameObject*, float*)
SetActionIfLoaded(GameObject*, short, short)
UpdateGameObjectLimbActions(GameObject*)
UpdateGameObjectDefaultActions(MechCharacter*, int)
GAMEANIMDATA::GAMEANIMDATA()
GAMEANIMDATA::~GAMEANIMDATA()
GAMEANIMDATA::~GAMEANIMDATA()
GAMEANIMDATA::Fixup()
GAMEANIMDATAHelper::RegisterClasses(EdRegistry&)
GAMEANIMDATAHelper::GAMEANIMDATAHelper()
GAMEANIMDATAHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
GAMEANIMDATAHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerContextData::LegoAnimTriggerContextData()
LegoAnimTriggerContextData::~LegoAnimTriggerContextData()
LegoAnimTriggerContextData::~LegoAnimTriggerContextData()
LegoAnimTriggerContextData::CanTrigger(CharAnimState const&, CharAnimTrigger const&) const
LegoAnimTriggerContextDataHelper::RegisterClasses(EdRegistry&)
LegoAnimTriggerContextDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerContextDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerCameraShakeData::LegoAnimTriggerCameraShakeData()
LegoAnimTriggerCameraShakeData::~LegoAnimTriggerCameraShakeData()
LegoAnimTriggerCameraShakeData::~LegoAnimTriggerCameraShakeData()
LegoAnimTriggerCameraShakeData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
LegoAnimTriggerCameraShakeDataHelper::RegisterClasses(EdRegistry&)
LegoAnimTriggerCameraShakeDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerCameraShakeDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
APISetAddImpactFunction(void (*)(MechCharacter*, VuVec*, float, int))
APIGetAddImpactFunction()
LegoAnimTriggerImpactData::LegoAnimTriggerImpactData()
LegoAnimTriggerImpactData::~LegoAnimTriggerImpactData()
LegoAnimTriggerImpactData::~LegoAnimTriggerImpactData()
LegoAnimTriggerImpactData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
LegoAnimTriggerImpactDataHelper::RegisterClasses(EdRegistry&)
LegoAnimTriggerImpactDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerImpactDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
APISetAddFootStepFunction(void (*)(int, int, MechCharacter*, FootStepFlags, float))
GetAPIAddFootStepFunction()
LegoAnimTriggerFootStepData::LegoAnimTriggerFootStepData()
LegoAnimTriggerFootStepData::~LegoAnimTriggerFootStepData()
LegoAnimTriggerFootStepData::~LegoAnimTriggerFootStepData()
LegoAnimTriggerFootStepData::Fixup()
LegoAnimTriggerFootStepData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
LegoAnimTriggerFootStepData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
LegoAnimTriggerFootStepData::FootstepTriggerUpdateData::FootstepTriggerUpdateData(CharAnimTrigger const&, CharAnimState&)
LegoAnimTriggerFootStepData::FootstepTriggerUpdateData::~FootstepTriggerUpdateData()
LegoAnimTriggerFootStepData::FootstepTriggerUpdateData::~FootstepTriggerUpdateData()
LegoAnimTriggerFootStepDataHelper::LegoAnimTriggerFootStepDataHelper()
LegoAnimTriggerFootStepDataHelper::RegisterClasses(EdRegistry&)
LegoAnimTriggerFootStepDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerFootStepDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerGamePlayData::LegoAnimTriggerGamePlayData()
LegoAnimTriggerGamePlayData::~LegoAnimTriggerGamePlayData()
LegoAnimTriggerGamePlayData::~LegoAnimTriggerGamePlayData()
LegoAnimTriggerGamePlayData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
LegoAnimTriggerGamePlayDataHelper::RegisterClasses(EdRegistry&)
LegoAnimTriggerGamePlayDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerGamePlayDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharDefGameData::CharDefGameData()
CharDefGameData::~CharDefGameData()
CharDefGameData::~CharDefGameData()
CharDefGameData::GetFrom(CharDefGameData const&)
CharDefGameData::GetFrom(CharDefResourceHndl const&)
CharDefGameData::SetParent(CharDef&)
CharDefGameData::Fixup()
CharDefGameData::AdjustCharacterDefinition()
CharDefGameData::ImportSkeletonInfo()
CharDefGameData::LoadResources()
CharDefGameData::RequestLoadExtraCharacters()
CharDefGameData::AreResourcesLoaded() const
CharDefGameData::SetProcessFilterID(int)
CharDefGameData::UnloadResources()
CharDefGameData::ReleaseResourceHandles()
CharDefGameData::RequestSample(SoundEventData*)
CharDefGameData::IsAnimLoaded(int)
CharDefGameData::RequestLoadExtraCharacters(CharDefFile const&, ResourceHndlList&) const
CharDefGameDataHelper::RegisterClasses(EdRegistry&)
CharDefGameDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharDefGameDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CharSkeletonGameData::CharSkeletonGameData()
CharSkeletonGameData::~CharSkeletonGameData()
CharSkeletonGameData::~CharSkeletonGameData()
CharSkeletonGameData::SetParent(CharSkeleton&)
CharSkeletonGameData::Fixup()
CharSkeletonGameDataHelper::RegisterClasses(EdRegistry&)
CharSkeletonGameDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharSkeletonGameDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerSpawnLayerPartsData::LegoAnimTriggerSpawnLayerPartsData()
LegoAnimTriggerSpawnLayerPartsData::~LegoAnimTriggerSpawnLayerPartsData()
LegoAnimTriggerSpawnLayerPartsData::~LegoAnimTriggerSpawnLayerPartsData()
LegoAnimTriggerSpawnLayerPartsData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
LegoAnimTriggerSpawnLayerPartsDataHelper::RegisterClasses(EdRegistry&)
LegoAnimTriggerSpawnLayerPartsDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerSpawnLayerPartsDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
GAMEOBJECTSYS::GAMEOBJECTSYS()
GAMEOBJECTSYS::~GAMEOBJECTSYS()
GAMEOBJECTSYS::~GAMEOBJECTSYS()
GameObject_BufferAlloc32(nuvariptr_u*, nuvariptr_u*, int)
BufferAlloc(nuvariptr_u*, nuvariptr_u*, int)
GameObject_Create(LevelContainer&, int, NUVEC&, int, int)
GameObject_RemoveFromLOSTable(GAMEOBJECTSYS*, GameObject*, GameObject*)
GameObject_Destroy(GAMEOBJECTSYS*, GameObject*)
GameObject_DestroyAll(GAMEOBJECTSYS*)
QuickNewRayCast(NUVEC*, NUVEC*, float, int, float, float)
GameObject_LOSChecks(GAMEOBJECTSYS*, int, int, MechCharacter**, int, MechCharacter**, float)
GameObjectVelocities(GameObject*)
GameObjectVelocities(MechCharacter const&, float&, float&)
GameObject_Collision2D(GameObject*, GameObject*)
GameObject_Collisions(int, GameObject**, NUVEC*, NUVEC*, int (*)(GameObject*, GameObject*))
ParticlesPerFrame(float, float)
ParticlesPerSecond(float, float)
AnimDuration(int, int, float, float, int, CharDefGameData const*)
APIModelIsAnimLoaded(CharDefGameData const*, int)
APIModelAnimGetStartFrame(CharDefGameData const*, int)
APIModelAnimGetEndFrame(CharDefGameData const*, int)
APIModelAnimGetFps(CharDefGameData const*, int)
APIModelAnimGetBlendOutTime(CharDefGameData const*, int)
MakeLayerList_Index(CharDefGameData*, short*, long)
APIModelGetModel(CharDefGameData const*)
APIModelGetAnimEntry(CharDefGameData const*, int)
APIModelHasAnim(CharDefGameData const*, int)
APIModelAnimIsCycled(CharDefGameData const*, int)
APIModelAnimIsSpeedScaled(CharDefGameData const*, int)
APIModelAnimGetBlendInTime(CharDefGameData const*, int)
APIModelGetBlendTimeBetweenAnims(CharDefGameData const*, int, int)
APIModelGetGameAnimData(CharDefGameData const*, int)
APIModelFindAnimAction(CharDefGameData const*, char const*)
APIModelAnimGetSpeedXZ(CharDefGameData const*, int, float*, float*)
APIModelAnimGetSpeedX(CharDefGameData const*, int)
APIModelAnimGetSpeedZ(CharDefGameData const*, int)
APIModelAnimGetStopFrame(CharDefGameData const*, int)
APIModelAnimGetFrames(CharDefGameData const*, int, float*)
APIModelGetFrame(CharDefGameData const*, int, int)
APIModelGetFrameTime(CharDefGameData const*, int, int)
APIModelAnimGetFlags(CharDefGameData const*, int)
APIModelHasLocator(CharDefGameData const*, int)
ResetAnimPacket(CharInst*, ANIMPACKET*, int, bool)
SyncAnimPacket(ANIMPACKET*, CharInst*, ANIMPACKET*, CharInst*)
SetAnimTimeRandom(CharDefGameData const*, ANIMPACKET*)
UpdateAnimPacket(CharInst*, CharDefGameData const*, ANIMPACKET*, float, float, float, bool, bool)
AnimBlendingFromTo(CharDefGameData const*, ANIMPACKET*, int, int)
AnimPlaying(ANIMPACKET*, int, int, int)
GetTargetActionId(ANIMPACKET*)
AnimPlaying(MechCharacter*, int, int, int, float*)
GetTargetActionId(MechCharacter*)
HasAnimReachedTriggerPoint(ANIMPACKET*, CharDefGameData const*, int, int, float)
HasAnimReachedTriggerPoint(MechCharacter*, int, int, float)
HasAnimGonePastTriggerPoint(MechCharacter*, int, int, float)
AnimsAvailableToBothCharacters(ANIMPACKET*, int, int)
APIAnimateCharacterModel(CharInst*, NUMTX*, long)
APIDrawCharacterModel(CharInst*, NUMTX*, NUMTX*, long*)
InModelList(APICHARACTERMODELLIST*, int, int*)
InIDList(short*, int, int, int)
SetActionInfo(ACTIONINFO*, EXTRAACTIONDATA*)
SetGameActionInfo(EXTRAACTIONDATA*)
ActionInfoFlags(int)
SetActionInfoFlags(int, unsigned int)
ActionInfoName(int)
APIExtraActionDataName(int)
GameExtraActionDataName(int)
NameFromAction(int)
ActionFromName(char const*)
GetPlayerPadId(CharInst const&)
GAMEANIMDATAHelper::~GAMEANIMDATAHelper()
LegoAnimTriggerContextDataHelper::~LegoAnimTriggerContextDataHelper()
LegoAnimTriggerCameraShakeDataHelper::~LegoAnimTriggerCameraShakeDataHelper()
LegoAnimTriggerImpactDataHelper::~LegoAnimTriggerImpactDataHelper()
LegoAnimTriggerFootStepDataHelper::~LegoAnimTriggerFootStepDataHelper()
LegoAnimTriggerFootStepDataHelper::~LegoAnimTriggerFootStepDataHelper()
non-virtual thunk to LegoAnimTriggerFootStepDataHelper::~LegoAnimTriggerFootStepDataHelper()
non-virtual thunk to LegoAnimTriggerFootStepDataHelper::~LegoAnimTriggerFootStepDataHelper()
LegoAnimTriggerGamePlayDataHelper::~LegoAnimTriggerGamePlayDataHelper()
CharDefGameDataHelper::~CharDefGameDataHelper()
CharSkeletonGameDataHelper::~CharSkeletonGameDataHelper()
LegoAnimTriggerSpawnLayerPartsDataHelper::~LegoAnimTriggerSpawnLayerPartsDataHelper()
CharDefGameDataLoadEventData::~CharDefGameDataLoadEventData()
AreaGlobals_IsOverridden()
AreaGlobals_Override(AREAGLOBALS*)
Area_AllowLevelStreaming(int)
Area_Update(WORLDINFO*)
Area_Draw(WORLDINFO*)
Areas_ConfigureList(char const*, int, int*)
LegoArrayBuilder<AREADATA>::Finalise(int&, FinaliseMode)
CharacterList_Write(NuFile*&, char const*, char const*, APICHARACTERMODELLIST*, APICHARACTERMODELLIST*, CharAnimSetFileList*)
Areas_ConfigurePlayersAndResidents(int, bool)
Area_ParseCollection(nufpar_s*, short*, unsigned short&, unsigned short)
Areas_ConfigureAllCollections(NUPAKFILEHNDL const&)
Area_FindByName(char const*, int*)
Area_FindByGuestLevel(int)
Area_FindByLevel(int)
Areas_FixUp()
Area_FindStatusLevel(AREADATA const*, int*)
Area_FindNextPlayLevel(int)
AddToModelList(APICHARACTERMODELLIST*, int*, int, int, int, EXTRAMODEL*, unsigned char)
Area_Configure_Recurse(nufpar_s*, int, short*, int&)
Area_Configure(int, short*)
AreaData_Get(int)
IsValidAreaId(int)
MakeEditedStoryCList(APICHARACTERMODELLIST*)
MakeEditedCList(APICHARACTERMODELLIST*)
GameExit_DumpAreaData(int, int)
AreaFromMiniKitID(int)
Areas_CompleteAllTrueHeroes(AREASAVE*)
Area_CharIDInCurrentList(int)
CharacterID_AreaToGlobal(int)
CharacterID_GlobalToArea(int)
CharacterID_NametoArea(char const*)
CharacterID_NametoGlobal(char const*)
Areas_CreateLooseList()
Area_FindInLooseList(int)
Areas_CountTrueHero(int*, int*)
MenuEnterGoToArea(MENU*)
MenuEnterGoToLooseArea(MENU*)
MenuUpdateGoToArea(MENU*)
MenuUpdateGoToLooseArea(MENU*)
MenuDrawGoToArea(MENU*)
MenuDrawGoToLooseArea(MENU*)
UpdateAreaBestTime(AREADATA*)
Area_CountCharTokens(int)
CMList<AREADATA*>::Append(AREADATA* const&, CMList<AREADATA*>::ListLink*)
Brick::Brick(SpecialSystem&, LegoSpecial&, VuMtx*)
Brick::~Brick()
BricksCreator::FixupUserFromName(WORLDINFO const&)
BricksCreator::SetUser(BricksUser*)
BricksCreator::DestroyBricks()
BricksUser::DestroyBricks(BricksCreator*)
BricksCreator::HideMissingBricks(float)
BricksUser::HideMissingBricks(BricksCreator*, float)
BricksCreator::CreateBricks(WORLDINFO const&, float)
BricksUser::CreateMissingBricks(WORLDINFO const&, BricksCreator*, float)
BricksUser::GetCreatorBricksMinMaxId(BricksCreator&, int&, int&) const
BricksUser::SetBricksVisible(bool)
BricksUser::FreeBrickInfo()
BricksUser::AllocateBrickInfo(unsigned int)
BricksUser::AddSeedSpecial(LegoSpecial&)
BricksUser::DisconnectCreators()
BricksUser::GetCreatorId(BricksCreator&) const
LoadPerm_End()
GameCam_InitializePerm()
GameCam_GetCameraByIndex(unsigned char)
GameCam_ResetLookRot(GAMECAMERA*)
OptionsInvertCameraYAxis(int)
GameCam_UpdateLookRot(WORLDINFO&, GAMECAMERA*, MechCharacter*, float)
MakePlayPlanes(GAMECAMERA*)
GameCam_StoreLocalAxis(GAMECAMERA*)
GameCam_SetAspect(GAMECAMERA*, bool)
GameCam_SetFOV(GAMECAMERA*, bool)
GameCam_CalculateFOV(float, bool, float)
GameCam_SetCurrentPoi(GAMECAMERA*)
GameCam_NewShake(GAMECAMERA*, float, float, float, int, float)
GameCam_UpdateShake(GAMECAMERA*, float, float)
GameCam_UpdateRoll(GAMECAMERA*)
GameCam_Judder(WORLDINFO const&, GAMECAMERA*, float, int, NUVEC const*)
GameCam_HitJudder(WORLDINFO&, GAMECAMERA*)
GameCam_HitRoll(WORLDINFO&, GAMECAMERA*)
SetCameraMatrices()
CentreTwoPlayerCamera(VuVec&, VuVec&, VuVec&, VuVec&, float)
GameCam_Reset(WORLDINFO const&, GAMECAMERA*)
GameCam_ResetTilt(GAMECAMERA*)
GameCam_SnapTiltOnOff(GAMECAMERA*, bool, float, int)
GameCam_TiltOnOff(GAMECAMERA*, bool, float, int)
GameCam_EnableTilt(GAMECAMERA*, bool)
GameCam_EnableLookRot(bool)
GameCam_SetDisableCameraLeftStickStableTargetingTicker()
GameCam_Blend(GAMECAMERA*, float, float, int)
GameCam_Blend(GAMECAMERA*, float, float, CAMBLENDTYPE)
GameCam_GetAdjustedYRot(GAMECAMERA*)
AveragePlayerCurrentSpeedMul()
cCamOffset::SeekTo(cCamOffset&, float)
cCamOffset::cCamOffset(cCamOffset const&)
cCamOffset::cCamOffset(cCamOffset*, bool)
cCamOffset::~cCamOffset()
cCamOffsetObjData::CalcCamOffsetDest()
cCamOffsetObjData::SeekToDest()
cCamOffsetObjData::SetToDest()
cCamOffsetObjData::SetFromOther(cCamOffsetObjData&)
cCamOffsetObjData::FindLastCamOffsetForPlayer(int)
cCamOffsetObjData::SetUsedByCamera()
cCamOffsetObjData::Process()
cCamOffset::Parse(nufpar_s*)
cCamTerrAvoid::cCamTerrAvoid(float, float)
cCamTerrAvoid::cCamTerrAvoid(nufpar_s*)
PopulateDOFParamsFromCutsceneCamResults(instcamresults_s const*, NUDOFPARAMETERS&)
GetCutsceneCameraResults(instcamresults_s*, instNUGCUTSCENE*, float*, float*)
SetCutSceneCamera(WORLDINFO&, instNUGCUTSCENE*, NuCamera*)
NuPostEffectParam::~NuPostEffectParam()
ShouldSnapCamToHere(float, float, GAMECAMERA*, MechCharacter*)
GAMECAMERA::GAMECAMERA()
GAMECAMERA::IsPosBehind(VuVec const&) const
GAMECAMERA::IsPosBehind(NUVEC const&) const
GAMECAMERA::IsSnapping(int) const
GAMECAMERA::SetAspectAndFOV()
GAMECAMERA::UpdateMiniCutCompletion(NUVEC const&, NUVEC const&)
GAMECAMERA::GetSplitBlendedLookAtAndPos(MechCharacter&, GAMECAMERA&, GAMECAMERA&, NUVEC&, NUVEC&, float&)
GAMECAMERA::BlendCameraJudder(GAMECAMERA const&, GAMECAMERA const&, float)
GAMECAMERA::UpdateCustomCameraState(MechCharacter const&, NUVEC&, NUVEC&, float&, int&, float&, float&, float&)
CharModifiers_Init()
CharModifiers_RestorePlayerPackets()
CharModifier_StandardModifier(GameObject*, int)
CharModifier_Release(GameObject*, int)
CharModifier_MakeInvisible(GameObject*)
CharModifier_Transformation(GameObject*, float, int, int, int)
CharModifier_DisableTimeLimit(bool)
CharModifier_MoveCode(GameObject*)
GAMECHARACTERDATA::CleanUp()
GAMECHARACTERDATA::SetActionId(GAMECHARACTERDATA::GCDataAction, short)
GAMECHARACTERDATA::GetMaxLocators(GAMECHARACTERDATA::LocatorType)
GAMECHARACTERDATA::GetLocator(GAMECHARACTERDATA::LocatorType, int) const
GAMECHARACTERDATA::SetLocator(GAMECHARACTERDATA::LocatorType, signed char, int)
GAMECHARACTERDATA::LocatorInfo::SetLocator(GAMECHARACTERDATA::LocatorType, signed char, int)
GAMECHARACTERDATA::SetTimebaseInfo(int, float, unsigned char)
GAMECHARACTERDATA::GetTimebaseInfo(int, float&, unsigned char&) const
GAMECHARACTERDATA::FindCamOffsetStyle(char const*, char const*) const
GAMECHARACTERDATA::FindCamOffsetStyle(char const*, char const*, char const*, char const*) const
CharIDFromName(char const*)
CharIDFromGizmoName(char const*)
CanShowCharTokenDetector(int)
DrawCharIcon(int, void*, float, float, float, float, int, float, float, int, nuhspecial_s*, int, bool, bool, LevelContainer*)
GAMECHARACTERDATA::~GAMECHARACTERDATA()
SetMoveAndAnimateFunctions(unsigned int, unsigned int, unsigned int, unsigned int, int, void*, void*, void*)
CharVariants_Init(CHARVARIANT*)
CharVariant_Find(char*)
ExtraModels_MakeList(APICHARACTERMODELLIST*, int, EXTRAMODEL*, short*, int, unsigned char)
ExtraModelList_CreateMaster(EXTRAMODEL*)
initHose()
DrawHoseEx(GAMECHARACTERDATA*, NUMTX*, NuSmartPtr<NuMtl, true>, float)
ParsePlayersAndResidents_Recursive(nufpar_s*, APICHARACTERMODELLIST**, APICHARACTERMODELLIST**, APICHARACTERMODELLIST**, APICHARACTERMODELLIST**, CharAnimSetFileList**, CharProjectFileList const&, TempCharacterData&, NUPAKFILEHNDL const&)
ConfigurePlayersAndResidents(char*, void*, int, APICHARACTERMODELLIST**, APICHARACTERMODELLIST**, APICHARACTERMODELLIST**, APICHARACTERMODELLIST**, CharAnimSetFileList**, NUPAKFILEHNDL const&, WORLDINFO*)
MenuInitCharacterShop(MENU*)
MenuUpdateCharacterShop(MENU*)
MenuDrawCharacterShop(MENU*)
CMList<EXTRAMODEL*>::Append(EXTRAMODEL* const&, CMList<EXTRAMODEL*>::ListLink*)
LegoArrayBuilder<EXTRAMODEL>::Finalise(int&, FinaliseMode)
CC_dummy_function(nufpar_s*)
DefinedLocators_Init(char const*)
DefinedLocators_FindIX(char const*)
DefinedLocator_GetName(short)
ConvertLocatorToDefinedLocator(MechCharacter*, int, int)
CC_set_locator(nufpar_s*, GAMECHARACTERDATA::LocatorType, int)
CC_set_locator(nufpar_s*, signed char*)
CharConfig(int, int, char*, char*, int, char*, int, int, nufpcomjmp_s*, void*)
CharConfig_CalculateJumpStats(float, float, float*, float*)
CharConfig_ConfigureAll(int)
CharConfig_SetGCDataFlagsOnAll(unsigned int)
CharConfig_ClearGCDataFlagsOnAll(unsigned int)
CharPivot_Init(char const*)
CharPivot_Check(GameObject*, NUVEC*)
AwkwardShape_GetSpheres(MechCharacter*, NUVEC*, int*, float*, int)
AwkwardShapes_Check(MechCharacter*, int)
CharShadows_InitMaterial()
CharShadows_Update(WORLDINFO&)
CheatSys_Init(CHEATLIST*)
Cheat_FixUpList()
Cheats_CountUpgrades(int*)
Cheat_FindByName(char*)
Cheat_FindById(int)
Cheats_SetFlags()
Cheats_CheckFlags(unsigned long)
Cheat_CheckFlags(int, unsigned long)
Cheat_SetOn(CHEAT_s*, int, int)
Cheat_IsOn(CHEAT_s*)
Cheat_GetOnOffBitfield(int*, int)
Cheat_SetOnOffBitfield(int*, int)
Cheat_MultiplyScore(unsigned long)
Cheats_TurnOff(int)
ShouldTurnScoreCheatsOff(int)
Cheats_Reset()
Cheats_Update()
Cheat_SetArea(int, int)
Cheat_SetLevel(int, int)
UnlockCheat(int, int)
SetRedBrickPickupCollected(int)
CheatUnlocked(int)
CheatTotalUnlocked()
CheatAvailableToBuy(int)
GetRedBrickPickupCollected(int)
EnterSecretCode(char*, char const**)
ExtrasCodeHandler::~ExtrasCodeHandler()
ExtrasCodeHandler_BgCheckFinished(bool, char const*, char const*, int)
MenuEnterEnterCode(MENU*)
MenuUpdateEnterCode(MENU*)
ExtrasCodeHandler::Update(float)
MenuDrawEnterCode(MENU*)
ExtrasMenu_UpdateE3Messages()
MenuUpdateExtras(MENU*)
MenuDrawExtras(MENU*)
Cheat_GetRealRedBrickIndex(int, int)
GetLevelRedBrick(WORLDINFO*)
GetRedBrickPickupCollectedTotal(int&, int&)
CheatEventData::~CheatEventData()
Chooser::Chooser()
Chooser::SetCardinalAvailable(int, bool)
Chooser::GetRadialID(int, int, int)
Chooser::SetCardinal(int, int)
Chooser::SetIndex(int, int)
Chooser::GetIndex(int)
Chooser::Move(LegoGamePad*, int)
Chooser::RadialMenuMove(LegoGamePad*, int)
Chooser::GridMenuMove(LegoGamePad*, int)
Chooser::Draw(MechCharacter*, float, float, float, int, float, Gizmo*, int, float, float, float*, int*, float*, bool, bool)
Chooser::DrawRadialMenu(MechCharacter*, float, float, float, int, int, int, float, Gizmo*, int, float, float, float*, int*, float*, bool, bool)
Chooser::DrawGridMenu(MechCharacter*, float, float, float, int, int, int, float, Gizmo*, int, float, float, float*, int*, float*, bool, bool)
Chooser::CycleClockwise(int)
Chooser::IsCurrentIndexActive(int)
Chooser::CycleAntiClockwise(int)
Chooser::Update(float)
Chooser::IconGridSize(int, int*, int*, int, int, int)
Chooser::SetString(char const*, char const*)
Chooser::SetMenuIcon(WORLDINFO const*, int)
Chooser::FixUpMenuIcons(WORLDINFO const*)
Chooser::SetEmptyIcon(WORLDINFO const*, char*, char*)
Chooser::SetBaseBackground(WORLDINFO const*, char*)
Chooser::SetCentralGraphic(WORLDINFO const*, char*, float)
Chooser::SetBackgroundIconCustom1(WORLDINFO const*, char*)
Chooser::SetBackgroundIconCustom2(WORLDINFO const*, char*)
Chooser::SetBackgroundIconCustom3(WORLDINFO const*, char*)
Chooser::SetBackgroundIconCustom4(WORLDINFO const*, char*)
Chooser::SetBackgroundIconRed(WORLDINFO const*, char*)
Chooser::SetBackgroundIconGreen(WORLDINFO const*, char*)
Chooser::SetBackgroundIconBlue(WORLDINFO const*, char*)
Chooser::SetBackgroundIconBlack(WORLDINFO const*, char*)
Chooser::SetUnknownIcon(WORLDINFO const*, char*, char*)
Chooser::DrawRadialIcon(MechCharacter*, int, float, float, float, float, float, float, int, Gizmo*, char*, float, eChooserDrawFlags, eChooserBackgroundDrawFlags, int, float)
Chooser::GetDX()
Chooser::GetDY()
Chooser::DrawCardinal(int, MechCharacter*, float, float, float, float, float, float, float&, float, float*, int, int, Gizmo*, int*, float*, bool, bool)
Chooser::DrawRadialTicks(float, float, bool*, nuhspecial_s*, float*)
Chooser::DrawRadialTicks(float, float, float, bool*, nuhspecial_s*, bool, float, float, float, float*)
Chooser::DrawGridEntry(int, MechCharacter*, float, float, float, float, float, float, float&, float, float*, int, int, Gizmo*, int*, float*, bool, bool)
Chooser::NewMenu(int, CHOOSER_ENTRY*, unsigned char)
Chooser::GetCurrentID(int)
Chooser::GetCurrentName(int)
Chooser::GetCurrentIcon(int)
Chooser::GetCurrentCharIcon(int)
Chooser::GetIcon(int)
Chooser::GetSilhouetteIcon(int)
Chooser::GetBGIcon(int)
Chooser::IsIndexActive(int, int)
Chooser::SetCurrentIndexActive(int, eChooserDrawFlags)
Chooser::SetIndexActive(int, int, eChooserDrawFlags)
Chooser::GetCurrentMenuEntry(int)
Chooser::GetCurrentChooserEntry(int)
Chooser::GetChooserEntry(int, int, int)
Chooser::HasMoreThanOneActiveCardinal(int)
Chooser::HasCardinalAnActiveItem(int, int)
Chooser::GetNameAtCardinal(int, int)
Chooser::GetChooserEntryAtCardinal(int, int)
Chooser::StoreState(int, int, int, int*, CHOOSER_ENTRY*, int)
Chooser::RecallState(int, int, CHOOSER_STORE**)
Chooser::GetCardinalAvailable(int)
Chooser::PlaySfx(SFXTypeID&, GameObject const&)
Chooser::PlaySfx(SFXTypeID&, WORLDINFO const&, VuVec*)
Chooser::SetupSfx(WORLDINFO&)
CHOOSER_ITEM::Init()
Chooser::~Chooser()
Chooser::~Chooser()
IsMagnetTerrain(signed char)
IsClimbTerrain(signed char)
CanClimbSurface(MechCharacter*, int)
Climb_SetMagnetAction(MechCharacter*)
Climb_UpdateMagnetRotation(MechCharacter*)
Climb_UpdateMagnetEffects(WORLDINFO*, GameObject*, float)
Climb_MagnetSplineUpdateAttached(WORLDINFO*)
Climb_MagnetSplineInit(WORLDINFO*)
Climb_MagnetSplineDestroy(WORLDINFO*)
Climb_MagnetSplineUpdate(WORLDINFO*)
Hang_UpdateMagnetRotation(MechCharacter*)
Climb_SetRoofMagnetDrawOffsetTarget(MechCharacter*, NUVEC*)
Climb_SetMagnetDrawOffsetTarget(MechCharacter*, NUVEC*)
CanClimb(MechCharacter*)
Climb_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Hang_MoveCode(MechCharacter*)
Hang_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
NuVector<unsigned char>::~NuVector()
NuVector<CATINDEXLIST_s>::~NuVector()
NuVector<float>::~NuVector()
Collection_CreateNewCategory()
Collection_GetNumCategories()
NuVector<CATINDEXLIST_s>::ReSize(unsigned int, bool)
Collection_SetNumCategories(int)
Collection_GetNumItemsInCategory(int)
Collection_GetCollectionIdInCategory(int, int)
CMList<ResourceHndl>::~CMList()
Collection_ShouldPermLoadAllCharacterIcons()
Collection_SetPermLoadAllCharacterIcons(bool)
GetCharacterIconFromPermCollection(int)
InCollectList_Index_NoCatBelonging(int, COLLECTID*, int)
InCollectList_Index(int, COLLECTID*, int)
InCollection(int, COLLECTION*)
Collection_ImportFile(char const*, LegoArrayBuilder<COLLECTID>&)
Collection_Configure(char const*)
LegoArrayBuilder<COLLECTID>::Finalise(int&, FinaliseMode)
PermLoadVehicleIcons()
Collection_Configured()
Collection_CreateMaster(char const*, short*, COLLECTION*, int, float)
Collection_CreateCustom(WORLDINFO*, char const*, short*, COLLECTION*, unsigned int, unsigned int, unsigned int, int, int, int, int, int, float, int (*)(WORLDINFO*, int, COLLECTID*))
Collection_ResetCatCycles()
Collection_UpdateCatCycles(int)
Collection_CycleCat(COLLECTID**, int*, float*)
Collection_RequestLoadAllCharacterIcons(TextureResourceHndl*&)
Collection_Draw(WORLDINFO*, COLLECTION*, float, float, float, APICHARACTERMODELLIST*, float, int, int, bool*)
Collection_Rows(int, int)
Collection_Got(int, int)
Collection_GridMove_Up(int, COLLECTION*, int, int, int, bool)
Collection_GridMove_Down(int, COLLECTION*, int, int, int, bool)
Collection_GridMove_Left(int, COLLECTION*, int, int, int, bool)
Collection_GridMove_Right(int, COLLECTION*, int, int, int, bool)
Collection_DrawIconCursors(COLLECTION*, int, float, float, int, float*, int*, bool*)
Collection_IFromID(COLLECTION*, int)
Collection_GetPos(COLLECTION*, int, float*, float*)
Collection_GotAnyOfType(int, unsigned int)
Collection_ContainsItem(int)
GetItemCost(int, int)
Collection_HasCustomiserParts(int)
Collection_GetCustomiserUsedAttachments(int)
CHARACTERSAVE_SET_COLLECTED(CHARACTERSAVE*, int)
CHARACTERSAVE_SET_UNLOCKED(CHARACTERSAVE*, int)
AddToCollection(int, int, int, int)
Collection_SetAddedCallback(void (*)(int))
CollectAllDemoCharacters(int, int, int)
CollectAllCharacters(int, int, int)
UnlockAreaCompletionCharacters(int)
UnlockAllCharacters()
UnlockCollectionCharacters(COLLECTION*)
InitCollected()
Collection_GetIDList(COLLECTION*, unsigned int, unsigned int, short*, int*, int*, int)
Collection_CountTokens(COLLECTION*, int*, int*)
CollectionEventData::~CollectionEventData()
NuVector<CATINDEXLIST_s>::Reserve(unsigned int, bool)
CMList<COLLECTID*>::Append(COLLECTID* const&, CMList<COLLECTID*>::ListLink*)
ColouredBrickSys::~ColouredBrickSys()
ColouredBrick_GameMsg_Update(GAMEMESSAGE*)
ColouredBrickSys::Init()
ColouredBrickSys::Init(int, int, int, COLOUREDBRICKHUBLIST_s*, COLOUREDBRICKTYPELIST_s*, COLOUREDBRICKLIST_s*)
ColouredBrickSys::Reset()
ColouredBrickSys::FindBrickTypeIndex(short)
ColouredBrickSys::FindLevelIndex(short)
ColouredBrickSys::FindBrick(int, int)
ColouredBrickSys::BrickCollected_ByObjId(short, short)
ColouredBrickSys::GetNumBrickTypesCollected_ByObjId(short)
ColouredBrickSys::GetTotalNumBrickTypeCollected()
ColouredBrickSys::GetAreaBrickSuperCounter_ByObjId(WORLDINFO*, short, short)
ColouredBrickSys::GetAreaBrickSuperCounter_ByBrickTypeId(WORLDINFO*, int, int)
ColouredBrickSys::HasBrickBeenCollected_ByObjId(short, short)
ColouredBrickSys::HasBrickBeenCollected_ByBrickId(int)
ColouredBrickSys::HasBrickBeenCollected_ByBrickTypeId(int, int)
ColouredBrickSys::GetBrickExtra_ByObjId(short, short)
ColouredBrickSys::GetBrickExtra_ByBrickId(int)
ColouredBrickSys::GetBrickExtra_ByBrickTypeId(int, int)
ColouredBrickSys::DrawPauseMenuStats(WORLDINFO&, float, float)
ColouredBrickSys::DrawBrickAtSuperCounter(WORLDINFO*, short, NUVEC*)
FixUpLevelId_ColouredBrick(COLOUREDBRICKHUBLIST_s*, int, LEVELDATA*, int)
CollectColouredBrick(WORLDINFO*, NUVEC*, int, int)
LegoContextHandler::GetGameObject(MechCharacter&)
LegoContextHandler::GetMechCharacter(MechCharacter&)
LegoContextHandler::GetContextHandler(GameObject&)
LegoContextHandler::GetContextHandler(MechCharacter&)
LegoContextHandler::SetAction(short, bool)
LegoContextHandler::GetAction() const
LegoContextHandler::SetTime(float)
LegoContextHandler::GetTime()
LegoContextHandler::InitFlags()
LegoContexts::RegisterStandardContexts()
MechContext* MechContextConstructor<ComboContextHandler>(MechCharacter&)
MechContext* MechContextConstructor<ShootTightropeContextHandler>(MechCharacter&)
MechContext* MechContextConstructor<TeleportContextHandler>(MechCharacter&)
MechContext* MechContextConstructor<WhipContextHandler>(MechCharacter&)
MechContext* MechContextConstructor<LegoSpellItContextHandler>(MechCharacter&)
MechContext* MechContextConstructor<ShootTargetingTightRopeContextHandler>(MechCharacter&)
MechContext* MechContextConstructor<LegoSwitchContextHandler>(MechCharacter&)
MechContext* MechContextConstructor<TightropeContextHandler>(MechCharacter&)
LegoContexts::LegoContexts()
LegoContexts::Init()
LegoContexts::OnInitPostConfig()
LegoContexts::RegisterContext(int&, char const*, MechContext* (*)(MechCharacter&), CInfoFlagStruct)
LegoContexts::RegisterContextOld(char const*, int (*)(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*), CInfoFlagStruct)
LegoContexts::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoContexts::NewMoveCodeReplacement(MechCharacter&, LevelContainer const*, float)
LegoContexts::SetTargetMom(GameObject&, int, LegoGamePad&, float, NUVEC*)
Chooser_ResetCrossFades()
ChooserTag_MoveCode(GameObject*, LegoGamePad*)
LegoContexts::~LegoContexts()
LegoContexts::OnExitLevel(LegoLevelContainer&)
LegoContextHandler::~LegoContextHandler()
LegoContextHandler::GetInstanceId() const
LegoContextHandlerBase<ComboContextHandler>::~LegoContextHandlerBase()
LegoContextHandlerBase<ShootTightropeContextHandler>::~LegoContextHandlerBase()
LegoContextHandlerBase<ShootTargetingTightRopeContextHandler>::~LegoContextHandlerBase()
TightropeContextHandler::~TightropeContextHandler()
TightropeContextHandler::OnLeave(int)
TightropeContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoContextHandlerBase<TightropeContextHandler>::GetInstanceId() const
LegoContextHandlerBase<TightropeContextHandler>::~LegoContextHandlerBase()
Credits_Destroy(WORLDINFO*)
Credits_Load(WORLDINFO*)
Credits_SetStage(CreditsStage)
Credits_Init(WORLDINFO*)
Credits_DrawCutscenePanel(WORLDINFO*)
Credits_DrawPanel(WORLDINFO*)
Credits_UpdateMenu(MENU*)
Credits_GetInfo(float*, int*, float*)
CustomiserSave::GetPieceSaveSlot(CustomiserMenuItemType, int) const
CustomiserSave::SetPieceName(CustomiserMenuItemType, int, char const*, NUCOLOUR3 const&, bool)
CustomiserResource::NormalizeFilePathInPlace(char*)
CustomiserSave::GetPieceName(CustomiserSavePieceNameSlot, NUCOLOUR3&) const
CustomiserSave::Serialise(EdStream&)
LegoCustomisers::LegoCustomisers(bool)
LegoCustomisers::EventNotify(Event&, NuEventData&)
LegoCustomisers::GetMenuItemId(CustomiserMenuItemType, int)
CustomiserResource::IsUnlocked()
CustomiserMaterialsPool::Initialize(WORLDINFO&)
CustomiserResourcesPool::GetLink(int, char const*) const
CMList<CustomiserResource*>::Append(CustomiserResource* const&, CMList<CustomiserResource*>::ListLink*)
CustomiserResource::CustomiserResource(char const*, int, NUCOLOUR3 const&, char const*, int, bool)
CustomiserMaterialsPool::Clear()
CMList<CustomiserResource*>::DeleteAll()
CustomiserAttachmentsPool::Clear()
CustomiserAttachmentsPool::Initialize(WORLDINFO&)
CustomiserResourcesPool::GetRandomResource(int) const
CustomiserResourcesPool::FindItemByHashName(int, unsigned int) const
CustomiserResourcesPool::GetResource(int, char const*) const
CustomiserResourcesPool::GetLinkedResourceInfo(int, CustomiserResource const&, int&) const
CustomiserResourcesPool::GetNextResource(int, char const*, bool) const
CustomiserMenuItem::FixUpSpecial(WORLDINFO&, char*)
CustomiserMenuItem::GetName() const
CustomiserMenuItem::CleanUpSpecial()
CustomiserTextInput::Update(float, CustomiserInput)
CustomiserTextInput::CycleCurrentItem(int)
CustomiserTextInput::SwitchCase()
CustomiserTextInput::ClearCurrentItem()
CustomiserTextInput::GetConsonantId(char)
CustomiserTextInput::TidyUpString()
CustomiserTextInput::Draw(VuVec const&, VuVec const&, float, char const*, int) const
LegoCustomisers::DoHostNetworkSync() const
CustomiserManager::NotifyDataSaved()
CustomiserManager::RevertSaveData(bool)
LegoCustomisers::RevertSaveData(WORLDINFO const*, bool)
CustomiserManager::DrawMissingCharacters() const
CustomiserManager::CustomiserManager(WORLDINFO&, bool)
CMList<CharacterMenu*>::Append(CharacterMenu* const&, CMList<CharacterMenu*>::ListLink*)
CustomiserMenu::AddItem(CustomiserMenuItem&)
CharacterMenu::FindControllingPlayer() const
CharacterMenu::AttachCharacterToSpecial(MechCharacter&, LegoSpecial*)
CharacterMenu::CheckForControllingPlayer()
CustomiserMenu::FindItemWithTargetCharacter(MechCharacter const*) const
CustomiserManager::CreateCustomiser(MechCharacter&, bool)
Customiser::SetMode(Customiser::CustomiserMode, bool)
CustomiserMenu::SetSelectedItem(CustomiserMenuItem&, bool)
CharDef_RefreshAllCharInsts(CharDef const&, long const&)
CharacterMenu::CreateCharacters(int&, bool)
Customiser::GetCustomisableCharacterId(int)
Customiser::AdjustCharacterDefinition(CharDef&, CHARACTERDATA*)
CustomiserMenuItem::SetTargetCharacter(MechCharacter*)
CustomiserManager::RequestLeaveCustomiserMenu(MechCharacter&)
CustomiserManager::IsPlayerInMenu(MechCharacter*, CharacterMenu**) const
CustomiserManager::DestroyCustomiser(Customiser*, bool)
CharacterMenu::RequestBackOutToGamePlay(MechCharacter&, bool)
CustomiserManager::CreateMenuCharacters(bool)
CustomiserManager::~CustomiserManager()
CSListHeader<CustomiserRecentlyLeftCharacter>::Clear()
CustomiserAttachmentsPool::~CustomiserAttachmentsPool()
CustomiserMaterialsPool::~CustomiserMaterialsPool()
CustomiserManager::~CustomiserManager()
LegoCustomisers::RequestLeaveCustomiserMenu()
LegoCustomisers::RequestLeaveCustomiserMenu(MechCharacter&)
LegoCustomisers::InitializeMenuItems()
LegoCustomisers::AddMenuItemSeed(CustomiserMenuItemSeed&)
LegoCustomisers::ParseCommandLine(int, char**)
CustomiserManager::Initialize()
LegoCustomisers::DrawCustomiserPool()
Customiser::GetAttachmentsPool() const
Customiser::GetMaterialsPool() const
LegoCustomisers::DoTag(MechCharacterBaseInterface&, MechCharacterBaseInterface&)
LegoCustomisers::OnUpdateCustomiserAction(MechCharacter&)
LegoCustomisers::CanMoveToNextMenuItem(CustomiserInput, CustomiserMenuItemType, float)
LegoCustomisers::GetCharacterNameText(MechCharacter&, char*)
LegoCustomisers::Customiser_MapMaterialIdToSaveSlot(int)
LegoCustomisers::CreateCustomiserCharactersList(int&) const
LegoCustomisers::RequestLoadCharacters(ResourceHndlList&)
LegoCustomisers::LoadCharactersNow(bool volatile*)
LegoCustomisers::DumpCharacters()
LegoCustomisers::ActivateCustomiserManager(WORLDINFO&)
LegoCustomisers::DeactivateCustomiserManager(WORLDINFO&)
LegoCustomisers::OnLoadLevel(WORLDINFO&)
LegoCustomisers::OnActivateLevel(WORLDINFO&)
LegoCustomisers::OnDeactivateLevel(WORLDINFO&)
CustomiserManager::IsAnyPlayerInMenu(bool) const
CustomiserManager::UpdateCharacter(CustomiserMenuItem const&, int, MechCharacter&) const
CustomiserManager::ProcessCamera() const
CustomiserManager::GetPlayerControllingMenu(CustomiserMenu*) const
Customiser_ResetCharacterName(int, char*, int)
Customiser::Customiser(CustomiserManager&, MechCharacter&, CustomiserSave&)
Customiser::PrepareForTest(bool)
Customiser::IsCapeActive() const
Customiser::GetPlayerItemTypeCount() const
CustomiserMenu::SetSelectedItemType(CustomiserMenuItemType)
CustomiserMenu::FixUpSpecials(WORLDINFO&)
Customiser::GetHostWorldInfo() const
Customiser::FillOutSaveData()
Customiser::RecalculateCode()
Customiser::~Customiser()
non-virtual thunk to Customiser::~Customiser()
Customiser::~Customiser()
non-virtual thunk to Customiser::~Customiser()
CustomiserMenu::~CustomiserMenu()
CustomiserMenu::~CustomiserMenu()
Customiser_CharacterHasHair(CharDef const&, GAMECHARACTERDATA const&)
Customiser::GetPlayerItemTypeName(int) const
Customiser::SetModeNetwork(int)
CustomiserManager::NotifyMenuExit()
Customiser::VerifyStrings()
CustomiserTextInput::CheckForNaughtyString()
Customiser::ReplaceAnyLockedParts()
Customiser::CycleMaterial(int, int)
Customiser::CycleAttachment(int, int)
LegoCustomisers::OnChangeCharacterParts(CharDef&, CHARACTERDATA*)
Customiser::IsLocalPlayer() const
Customiser::Update(float)
Customiser::UpdateMenu(float)
CustomiserMenu::UpdateInput(float, LegoGamePad*, bool)
Customiser::SetPartsFromCode(int)
LegoCustomisers::GetDefaultCharacterAction(MechCharacter const&) const
LegoCustomisers::GetAttachmentTypeForObjectId(SuperCharObjId)
LegoCustomisers::GetAttachmentShortName(char const*, SuperCharObjId)
LegoCustomisers::GetAttachmentFolderPath(SuperCharObjId)
Customiser::SetMaterialMapTextureResource(int, CustomiserResource const&, bool)
Customiser::SetAttachmentResource(int, CustomiserResource const&, bool)
Customiser::RandomizeParts()
Customiser::CyclePlayerItem(int, bool, bool)
Customiser::FindPlayerItemByHashName(unsigned int) const
Customiser::SetPartByHashName(int, unsigned int)
Customiser::IsPlayerItemAvailable(int) const
CustomiserMenu::Update(float, LegoGamePad*)
CMList<Customiser*>::Append(Customiser* const&, CMList<Customiser*>::ListLink*)
CharacterMenu::CharacterMenu(CustomiserManager&, char const*, LegoSpecial*, LegoSpecial*)
CharacterMenu::~CharacterMenu()
CharacterMenu::~CharacterMenu()
CustomiserManager::HasJustLeftCustomiser(MechCharacter const&, bool)
CustomiserManager::NotifyCharacterLeftCustomiser(MechCharacter&)
CharacterMenu::GetLocalPlayerOnFloorPad() const
CharacterMenu::GetCustomisableIdActivatingMenu() const
CharacterMenu::UpdateCharacters() const
CharacterMenu::GetSpinSfxId() const
CharacterMenu::IsInCustomiser(MechCharacter*) const
CharacterMenu::SetInUse(bool)
CustomiserMenu::SetInUse(bool)
TagRequest::DoTag() const
CharacterMenu::ProcessTagRequest()
CharacterMenu::GetIdealCameraPos(VuVec&, VuVec&) const
CustomiserMenu::GetIdealCameraPos(VuVec&, VuVec&) const
CharacterMenu::SetItemSpecialsToFrame(float)
CustomiserMenu::SetItemSpecialsToFrame(float)
CharacterMenu::Draw(float, int) const
CharacterMenu::NetworkSyncTurntableDrawMtx()
CharacterMenu::ShouldAllowTestAndEdit() const
CharacterMenu::Update(float)
CustomiserManager::Update(float)
CSListHeader<CustomiserRecentlyLeftCharacter>::Delete(CustomiserRecentlyLeftCharacter*)
CustomiserManager::Draw() const
Customiser::Draw() const
CustomiserManager::DrawPanel()
CustomiserMenu::Draw(float, int) const
CustomiserMenu::GetNearestPosition(VuVec&) const
CustomiserMenu::GetSpinSfxId() const
CustomiserMenu::GetItemPosition(CustomiserMenuItem&, int*) const
Customiser::ResetCustomiserSave()
CustomiserMenuItemSeed::CustomiserMenuItemSeed(CustomiserMenuItemType, int, int, char const*)
CustomiserMenuItem::CustomiserMenuItem(CustomiserMenu&, CustomiserMenuItemType, int, char const*)
CustomiserMaterialsPool::~CustomiserMaterialsPool()
CustomiserMaterialsPool::GetResources(int) const
CustomiserAttachmentsPool::~CustomiserAttachmentsPool()
CustomiserAttachmentsPool::GetResources(int) const
LegoCustomisers::~LegoCustomisers()
LegoCustomisers::NotifyEnterCustomiserMenu(MechCharacter const*, int, int, int)
LegoCustomisers::NotifyLeaveCustomiserMenu(MechCharacter const*, int, int, int)
LegoCustomisers::CreateGameObjects(WORLDINFO&, bool)
LegoCustomisers::OnEnterCustomiserMenu(MechCharacter&)
LegoCustomisers::CanEnterCustomiserMenu(MechCharacter&)
LegoCustomisers::OnExitCustomiserMenu(MechCharacter&)
LegoCustomisers::OnUpdateCharacterMenuAction(MechCharacter&)
LegoCustomisers::OnEnterCustomiser(MechCharacter&)
LegoCustomisers::OnExitCustomiser(MechCharacter&)
LegoCustomisers::ShouldHoldDefaultItem()
LegoCustomisers::ShouldAllowMaterialIntoPool(CHARACTERDATA const&, SuperCharMtlId) const
CustomiserManager::InitializeCharacterMenu(CharacterMenu&)
CustomiserManager::ShouldHideCharacterPlacementSpecials() const
CustomiserManager::IsPlayerItemTypeAvailable(int) const
CustomiserManager::GetSelectedItemAngularIconOffset() const
CustomiserManager::GetTestModeBehaviour() const
Customiser::SetName(char const*)
Customiser::IsActive() const
CustomiserEventData::~CustomiserEventData()
CustomiserResource::~CustomiserResource()
CustomiserMenuItem::~CustomiserMenuItem()
ClearPadQueue()
DropInOut_InitOnce()
StartDropIn(MechCharacter*)
DropInOutCode(MechCharacter*)
CheckForPlayersTurnedOff()
FreePlay_DropInToPlayerPos(MechCharacter*)
PadQueuePush(NUPAD*)
PadQueuePop()
PadQueueSize()
PadQueueInitPortPush(NUPAD*, int)
PlayersTakePlayer(MechCharacter*, int, NUPAD*)
PlayersDropInOut()
DropOut(int, int, int, int, int)
PlayersHandleLobbyDropIn()
DropInOutScale(MechCharacter*)
DynamicLights_Dump(WORLDINFO*)
DynamicLights_ReserveBufferSpace(unsigned int)
DynamicLights_Reset(WORLDINFO&, DYNAMIC_LIGHTS*)
DynamicLights_Update(WORLDINFO&)
DynamicLights_RequestLightThisFrame(WORLDINFO&, NUVEC*, float, unsigned int)
DynamicLights_RequestLightNextFrame(DYNAMIC_LIGHTS*, NUVEC*, float, unsigned int)
GetAnimDirection(NuInstAnim*)
DrawCross(NUVEC const*, float, NuSmartPtr<NuMtl, true>, int)
DrawArrow(NUVEC*, NUVEC*, float, NuSmartPtr<NuMtl, true>, int)
edbobsDrawBox(NUVEC*, NUVEC*, int)
edbobs_DrawCoordinateInfo(NUVEC*, int, int)
GizmoFileReadGameAnimSet(GameAnimSet*, WORLDINFO*, void (*)(GameAnimObj*, int), int, char const*, char const*, int)
GizmoFileWriteGameAnimSet(GameAnimSet*, void (*)(GameAnimObj*, int), int)
edgizmo_NuMtxGetXYZAngles(NUMTX*, unsigned short*, unsigned short*, unsigned short*)
Episodes_ConfigureList(char const*, int, int*)
LegoArrayBuilder<EPISODEDATA>::Finalise(int&, FinaliseMode)
Episode_ContainsArea(int, int*)
Episode_FindAreaFromFlags(EPISODEDATA*, unsigned int, unsigned int)
Episode_IsComplete(EPISODEDATA*, int*)
Episodes_Completed(unsigned char, int*)
Episode_FindFromArea(int)
Episode_CountOpenAreas(int, int)
MenuUpdateGotoEpisode(MENU*)
MenuDrawGotoEpisode(MENU*)
MenuUpdateGotoEpisodeArea(MENU*)
MenuDrawGotoEpisodeArea(MENU*)
MenuUpdateGotoEpisodeAreaLevel(MENU*)
MenuDrawGotoEpisodeAreaLevel(MENU*)
CMList<EPISODEDATA*>::Append(EPISODEDATA* const&, CMList<EPISODEDATA*>::ListLink*)
FadeType_FindByName(char*)
DrawStillScreenWithAlpha(float)
LegoFadeBase::ShouldDoBaseUpdate() const
Fade::Init(LevelContainer const*)
Fade::Draw()
BlackWipe::Init(LevelContainer const*)
BlackWipe::Draw()
StillScreenWipe::Init(LevelContainer const*)
StillScreenWipe::Update()
StillScreenWipe::Draw()
CrossFade::Init(LevelContainer const*)
CrossFade::Update()
CrossFade::Draw()
BlackCrossFade::Init(LevelContainer const*)
BlackCrossFade::Update()
BlackCrossFade::Draw()
StillScreen::Init(LevelContainer const*)
StillScreen::Update()
StillScreen::Draw()
DrawSpinScreen(int, float)
SpinWipe::Init(LevelContainer const*)
SpinWipe::Update()
SpinWipe::Draw()
LegoFadeBase::~LegoFadeBase()
Fade::~Fade()
Fade::GetFadeType() const
BlackWipe::~BlackWipe()
BlackWipe::GetFadeType() const
StillScreenWipe::~StillScreenWipe()
StillScreenWipe::GetFadeType() const
CrossFade::~CrossFade()
CrossFade::GetFadeType() const
BlackCrossFade::~BlackCrossFade()
BlackCrossFade::IsStillRenderAllowed() const
BlackCrossFade::GetFadeType() const
SpinWipe::~SpinWipe()
SpinWipe::GetFadeType() const
StillScreen::~StillScreen()
StillScreen::GetFadeType() const
GameAnimObj::GameAnimObj()
GameAnimSet::GetObjByIndex(int) const
GameAnimObj::GetBody() const
GameAnimSys::GameAnimSys(SpecialSystem*)
GameAnimSys::~GameAnimSys()
GameAnimSys::~GameAnimSys()
GameAnimSys::CreateGameAnimSet(int)
CMList<GameAnimSet*>::Append(GameAnimSet* const&, CMList<GameAnimSet*>::ListLink*)
GameAnimSys::CreateGameAnimSet(void* (*)(), void (*)(void*), void* (*)(void*))
CreateGameAnimSet(WORLDINFO*, int)
CreateGameAnimSet(WORLDINFO*, void* (*)(), void (*)(void*), void* (*)(void*))
RegisterGameAnimSet(WORLDINFO*, GameAnimSet*, int)
GameAnimSet::GameAnimSet(EdRegContext&)
GameAnimSet::GameAnimSet(int, EdRegContext&)
GameAnimSet::GameAnimSet(void* (*)(), void (*)(void*), void* (*)(void*), EdRegContext&)
GameAnimSet::~GameAnimSet()
GameAnimSet_RemoveAllObjects(GameAnimSet*)
GameAnimSet::~GameAnimSet()
GameAnimSet_Destroy(GameAnimSet*)
GameAnimSys_AllocateProgress(WORLDINFO*)
GameAnimSys_StoreProgress(WORLDINFO*)
GameAnimSys_ResetProgress(WORLDINFO*)
GameAnimSet_AddToSystemList(GameAnimSet*)
GameAnimSet_RemoveFromSystemList(GameAnimSet*)
GameAnimSys_ClearProgress(WORLDINFO*)
GameAnimSys::ReEvaluateCompoundObjects()
GameAnimSet_Copy(GameAnimSet*, GameAnimSet*, nuvariptr_u*, nuvariptr_u*, GameAnimSys*, Gizmo*, bool)
GameAnimSet_AddObject(GameAnimSet*, LegoSpecial*, float, float, int, int, int, int)
GameAnimSet_Move(GameAnimSet*, NUVEC*, NUVEC*, int, int, int, bool, bool, GameAnimSetMoveModifier*)
GameAnimSet_Move(GameAnimSet*, NUVEC*, NUMTX*, bool, bool, GameAnimSetMoveModifier*)
GameAnimSet_CreateUsingMemoryManager(MemoryManager*, int, GameAnimSys*)
GameAnimSet_EvaluateState(GameAnimSet*)
GameAnimSet_AddObjectByName(GameAnimSet*, char const*, float, float, int, GIZMOSYS*, char const*, char const*, int, int, int)
GameAnimSet_EvalStartEndFrames(GameAnimSet*)
GameAnimSet_RemoveLegoSpecial(GameAnimSet*, LegoSpecial*)
GameAnimSet_RemoveObject(GameAnimSet*, GameAnimObj*, int)
GameAnimSet_SetTFactor(GameAnimSet*, float)
GameAnimSet_ScaleFParam1(GameAnimSet*, float)
GameAnimSet_GetAveragePos(GameAnimSet*, NUVEC*, int, int, int, int)
GameAnimSet_GetCentreAndRadius(GameAnimSet*, NUVEC*, float*, float*, int, int, int, int)
GameAnimSet_IsAnimationReset(GameAnimSet*)
GameAnimSet_Reset(GameAnimSet*)
GameAnimSet_Play(GameAnimSet*, float, int, int)
GameAnimSet_ModifyCurrentPlayingSpeed(GameAnimSet*, float)
GameAnimSet_PlayToFrame(GameAnimSet*, float, float, float)
GameAnimSet_Stop(GameAnimSet*)
GameAnimSet_SetRepeating(GameAnimSet*, int)
GameAnimSet_JumpToEnd(GameAnimSet*)
GameAnimSet_JumpToStart(GameAnimSet*)
GameAnimSet_JumpToFrame(GameAnimSet*, float)
GameAnimSet_JumpToAnimPos(GameAnimSet*, float)
GameAnimSet_GetCurrentFrame(GameAnimSet*)
GameAnimSet_GetTFactor(GameAnimSet*)
GameAnimSet_GetStartFrame(GameAnimSet*)
GameAnimSet_GetEndFrame(GameAnimSet*)
GameAnimSet_GetAnimPos(GameAnimObj*)
GameAnimSet_SetAnimPos(GameAnimObj*, float)
GameAnimSet_SetOffset(GameAnimSet*, NUVEC*)
GameAnimSet_GetCompletionRatio(GameAnimSet*)
GameAnimSet_GetActive(GameAnimSet*)
GameAnimSet_SetActive(GameAnimSet*, int)
GameAnimSet_GetVisibility(GameAnimSet*)
GameAnimSet_SetVisibility(GameAnimSet*, int)
GameAnimSet_GetCurrentMtxNotTranslation(GameAnimSet*, VuMtx&)
GameAnimSet_SetCurrentMtx(GameAnimSet*, NUMTX&, NUVEC&, int)
GameAnimSet_DriveToMtx(GameAnimSet*, NUMTX&, float, NUVEC&, int)
GameAnimSet_SetCollisionMode(GameAnimSet*, PlaceableBase::COLLISION_MODE)
GameAnimSet_SetCollision(GameAnimSet*, bool)
GameAnimSet_SetDynamic(GameAnimSet*, int, bool)
GameAnimSet_EnableCharacterCollision(GameAnimSet*, bool)
GameAnimSet_SetVelocity(GameAnimSet*, VuVec&)
GameAnimSet_SetPhysicsJointsActive(GameAnimSet*, bool)
GameAnimSet_SetFlickerOff(GameAnimSet*, float, float, float, float)
GameAnimSet_SetStoreMatrixProgress(GameAnimSet*)
GameAnimSet_LegoSpecialPropertyCount(GameAnimSet*, int)
GameAnimSet_SetAIAvoid(GameAnimSet*, bool)
GameAnimSet_WantToStoreMatrixProgress(GameAnimSet*)
GameAnimSet_HideLegoSpecials(GameAnimSet*, unsigned char, bool)
GameAnimSet_SetDontUseCompoundObject(GameAnimSet*, int)
GameAnimSet_SetRayCastable(GameAnimSet*, int)
GameAnimSet_SetAlpha(GameAnimSet*, float)
GameAnimSet_GetAlpha(GameAnimSet*)
GameAnimSet_SetDrawDistance(GameAnimSet*, unsigned short, bool)
GameAnimSet_RestoreDynamic(GameAnimSet*)
GameAnimSet_EvalAnim(GameAnimSet*)
GameAnimSet_FindSpecialByName(GameAnimSet*, char const*)
GameAnimSet_AutoSetReflectY(GameAnimSet*, NUVEC*, NUMTX*)
GameAnimSet_DrawReflection(WORLDINFO&, GameAnimSet*, int, float)
GameAnimSet_Render(GameAnimSet*, NUVEC*, NUVEC*, int, int, int, float, int, float)
GameAnimSys_Update(WORLDINFO&, GameAnimSys*)
GameAnimSet::AcquireSpecialsForGizmo(Gizmo&)
GameAnimSet::ReleaseSpecialsForGizmo(Gizmo&)
GameAnimSet::SetDynoLayer(char)
GameAnimSet::GetSpecialMatchingEntity(Entity&) const
GameAnimSet::SetMaterialMap(unsigned char, NuSmartPtr<NuMtl, true>*)
GameAnimSet::GetBounds(NUVEC&, NUVEC&)
GameAnimSet::FindJointByName(char const*) const
GameAnimSet::SetAlbedoTint(NUCOLOUR3 const&)
GameAnimSet::SetLightingGlow(NuColour const&)
GameAnimSet_SetTriggerPlayer(GameAnimSet*, MechCharacter*)
GameAnimSet_AreAnyLegoSpecialsOnScreen(GameAnimSet*)
GameAnimObj::~GameAnimObj()
GameAnimObj::~GameAnimObj()
GameMessages_InitPerm()
ResetGameMessages(LevelContainer const*)
EndGameMessages(LevelContainer const*)
FindTrackedMessage(signed char, signed char)
ClearTrackedMessages(signed char, signed char)
AddGameMsgToAllScreens(ADDGAMEMSG*, GAMEMESSAGE*)
AddGameMsg_DO_NOT_USE(ADDGAMEMSG*, GAMEMESSAGE*, char const*)
GAMEMESSAGE::GetHostWorldInfo() const
GameMessage_SetOverrideLevelContainer(LevelContainer const*)
AddDebugMessageA(char const*, NUVEC const*, float, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)
AddDebugMessage(char const*, NUVEC const*, float, unsigned char, unsigned char, unsigned char)
AddGameMessage_DO_NOT_USE(char const*, NUVEC const*, float, NUVEC*, float, unsigned char, unsigned char, unsigned char, unsigned int, float, char const*)
UpdateGameMessages(LevelContainer const*)
GameMsg_TransformPosAndScale(NUVEC const*, float, NUVEC*, float*, NuCamera const&)
DrawGameMessagesHUDStage(GameMessagesHUDStage, LevelContainer const*)
DrawGameMessagesPostLighting(LevelContainer const*)
DrawGameMessages3DStage(LevelContainer const*)
FindGameMsgs(int, int, int, int, GAMEMESSAGE*, GAMEMESSAGE**, void*)
AddGameMsgCount(NUVEC const*, int, int, unsigned char, unsigned char, unsigned char, float, float)
AddFancyMessageRGB(WORLDINFO&, char*, float, float, float, float, int, unsigned char, unsigned char, unsigned char)
AddFancyMessage(WORLDINFO&, char*, float, float, float, float, int, int)
DrawGameMsg_Target(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
DrawGameMsg_TargetWithButton(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
DrawGameMsg_Arrow(GAMEMESSAGE*, NUVEC*, float)
LegoGameThing::DoPauseGame(int, bool, int, bool)
LegoGameThing::DoUnpauseGame(bool, bool)
RestoreOptions()
LegoGameThing::DoClearPause()
NetworkSyncPause(WORLDINFO&)
ClearUnpauserPadInput()
InitSuperStory(int)
InStory()
Game_Exit(int)
AddToCompletionPoints(unsigned int)
Game_100PercentComplete()
AddToGoldBricks()
Game_GotAllGoldBricks()
Game_AutoSaving()
SetBonusWinner(int)
InitChallenge(int)
EndChallenge(WORLDINFO&, int, int)
MenuUpdateEndChallenge(MENU*)
MenuDrawEndChallenge(MENU*)
LoadVersionName(char const*)
SetTrueHeroComplete(WORLDINFO*, int)
UnSetTrueHeroComplete(WORLDINFO const*, int)
GetTrueHeroComplete_ByIndex(int, int)
GetTrueHeroComplete(WORLDINFO*, int)
GetTrueHeroCoinValue(WORLDINFO*, int)
TrueHeroBarActive(WORLDINFO&, unsigned int*)
Game_ParseOnOff(nufpar_s*)
Game_Configure(char const*, int)
AdaptiveDifficulty_Reset(int)
AdaptiveDifficulty_Update()
AdaptiveDifficulty_Change(float)
TransferCoins()
CountPerils(int*, int*, int)
CountChooserBits(int*, int*, int, int)
FLOWBOX::FLOWBOX(short)
FLOWBOX::FLOWBOX()
FLOWBOX::~FLOWBOX()
FLOWGIZMO::FLOWGIZMO(FlowObject&)
FLOWGIZMO::~FLOWGIZMO()
FLOWGIZMO::~FLOWGIZMO()
FLOWGIZMO::GetUnPrefixedName(TFixedString<256>&)
FLOWGIZMO::FixupGizmo(WORLDINFO*, char*)
FlowObjectGizmo::Reset(Flow*)
FlowObjectGizmo::Process(Flow*, unsigned char)
FlowObjectGizmo::CheckOutput(Flow*, unsigned char)
FlowObjectGizmo::GetNumericalOutput(Flow*, unsigned char)
FlowObjectGizmo::IsWrongGameMode()
FlowObjectGizmo::SetTriggeredByPlayerId(MechCharacter*)
FLOWGIZMOSET::ActivateReverse(Flow*, int, int)
FLOWGIZMOSET::SetVisibility(Flow*, int, int)
FLOWGIZMOSET::Activate(Flow*, int, int)
FLOWGIZMOSET::ResetForLoop(Flow*)
FLOWGIZMOSET::IsEmpty()
FLOWGIZMOSET::GetNextFlowGizmo(char const*, FLOWGIZMO*)
FLOWGIZMOSET::FixupGizmos(WORLDINFO*)
CSListHeader<FlowObject>::~CSListHeader()
GizFlowCopyString(char*)
RegisterGizAction(FlowActionDefinition&)
RegisterGizActions(FlowActionDefinition*)
LoadGizFlow(WORLDINFO*, GIZMOSYS*, char*, char*, bool)
GIZFLOW::FixupGizmos(WORLDINFO*)
SaveGizFlow(GIZFLOW*, char*, char*)
GIZFLOW::GIZFLOW(char const*, short)
GIZFLOW::OnLevelInitEvent(WORLDINFO*)
GIZFLOW::OnLevelUninitEvent()
LegoAbstractFlowInterfaceManager<LegoFlowInterface_LevelManager>::UnInit()
LegoAbstractFlowInterfaceManager<LegoFlowInterface_CutsceneManager>::UnInit()
GIZFLOW::ResetPointers()
GizFlowUseProgress(GizmoProgress*)
GizFlowAllocateProgress(WORLDINFO*)
GizFlowStoreProgress(GIZFLOW*, GizmoProgress*, int)
GizFlowClearProgress(GizmoProgress*)
GIZFLOW::ResetProgress(FlowProgress*, FlowObject*, int)
SetGizFlowVisible(GIZFLOW*)
FindFlowBoxFromInterface(GIZFLOW*, MechFlowInterface*, bool)
CreateLinkBetweenObjects(WORLDINFO*, MechFlowInterface*, MechFlowInterface*)
RemoveObjectFromFlow(GIZFLOW*, MechFlowInterface&)
MarkGizmoFromFlowInvalid(GIZFLOW*, MechFlowInterface*)
FLOWBOX::Contains(MechFlowInterface*)
DeleteLinkBetweenObjects(GIZFLOW*, MechFlowInterface*, MechFlowInterface*)
GizFlowSys_FixUpObjectsForProgress(WORLDINFO*)
FlowBoxFactory(eFlowTypes, short)
InitGizFlowHelpers()
FLOWGIZMOSET::~FLOWGIZMOSET()
FLOWGIZMOSET::~FLOWGIZMOSET()
FLOWBOX::~FLOWBOX()
FlowObjectGizmo::~FlowObjectGizmo()
GIZFLOW::~GIZFLOW()
FLOWGIZMO::GetGizmoPrefix()
LegoFlowInterface_LevelHelper::~LegoFlowInterface_LevelHelper()
LegoAbstractFlowInterfaceHelper<LegoFlowInterface_LevelManager, LegoFlowInterface_Level, LegoFlowInterface_Level::CreateParams>::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
LegoAbstractFlowInterfaceHelper<LegoFlowInterface_LevelManager, LegoFlowInterface_Level, LegoFlowInterface_Level::CreateParams>::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
LegoFlowInterface_CutsceneHelper::~LegoFlowInterface_CutsceneHelper()
LegoAbstractFlowInterfaceHelper<LegoFlowInterface_CutsceneManager, LegoFlowInterface_Cutscene, LegoFlowInterface_Cutscene::CreateParams>::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
LegoAbstractFlowInterfaceHelper<LegoFlowInterface_CutsceneManager, LegoFlowInterface_Cutscene, LegoFlowInterface_Cutscene::CreateParams>::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
LegoAbstractFlowInterfaceManager<LegoFlowInterface_LevelManager>::CreateInterfaceInternal(LegoAbstractFlowInterface::CreateParams&)
ClassManagerAccessor<LegoFlowInterface_LevelManager>::GetFromCreate(ILevelContainer const&)
LegoAbstractFlowInterfaceManager<LegoFlowInterface_CutsceneManager>::CreateInterfaceInternal(LegoAbstractFlowInterface::CreateParams&)
ClassManagerAccessor<LegoFlowInterface_CutsceneManager>::GetFromCreate(ILevelContainer const&)
GizFlowManager::GizFlowManager(LevelContainer&)
GizFlowManager::EventNotify(Event&, NuEventData&)
GizFlowManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
GizFlowManager::~GizFlowManager()
GizmoList::Add(MechFlowInterface*, int)
GizmoList::AlreadyInGroup(MechFlowInterface*)
GizmoList::Remove(MechFlowInterface*)
GizmoList::FindListItem(MechFlowInterface*)
GizmoList::Load(int)
GizmoList::Save(int)
GizmoList::PostLoadFixUp(LevelContainer&)
GlobalSaveOptions::GlobalSaveOptions()
GlobalSaveOptions::SaveFileSize()
GlobalSaveOptions::GetGlobalOptionsLanguage()
GlobalSaveOptions::SetGlobalOptionsLanguage(NuLanguage)
GlobalSaveOptions::EventNotify(Event&, NuEventData&)
GlobalSaveOptions::~GlobalSaveOptions()
Shrug_Start(MechCharacter*, NUVEC*, NUVEC*, int, Gizmo*, bool, bool)
Shrug_IsInShrugContext(MechCharacter*)
Shrug_DrawIcon(MechCharacter*, Gizmo*)
Shrug_Release(MechCharacter*)
Shrug_MoveCode(MechCharacter*, int, int)
Shrug_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Hat_PartCollideWithCharacter(PART*, MechCharacter*)
AddHatAsPart(NUMTX*, NUVEC*, GameObject*, int)
PickUpHatMoveCode(GameObject*)
LoseHat(GameObject*, NUVEC*)
LoseHatByName(WORLDINFO*, GameObject*, VuVec*, char*)
LoseHatByGizItemType(WORLDINFO*, GameObject*, VuVec*, LegoItemType*)
Hint_ExpandButtons(char*, char*)
Hint_CurrentId()
HintSys_OnDestroyGizmoHint(GizmoHint*)
Hint_FindHint(int)
Hint_FindHintByName(char const*, int)
Hint_FindHintIDByName(char*)
Hint_isAvailable(char*)
Hint_isComplete(int)
Hint_isComplete(char*)
Hint_isComplete(HINT_s*)
DrawHint_LEGO(WORLDINFO&, HINT_s*, int)
Hint_CurrentAlpha()
DrawHint_LoadScreen(WORLDINFO&, HINT_s*, float, float)
ResetCustomGizHint()
Hint_LevelDeactivated()
InitDynamicHintSys(int, HINTTABLE_s*)
Hint_SetGizHint(GizmoHint*)
Hint_AddHint(HINT_s*)
Hint_FindColorInString(char const*, char const*&, int&)
Hint_HintColourClashesWithTextColour(HINT_s*, int)
initHintSys()
RegisterWithHintSys(void (*)(WORLDINFO&, HINT_s*, int), unsigned int*, int)
Hint_CancelCurrent(float)
Hint_Reset()
Hint_ResetHint(char*, int)
Hint_ResetHint(int)
Hint_ResetHint(HINT_s*)
Hints_ResetDone()
Hint_ClearHintsAndDoneFlags()
Hint_ClearHintsPlayedThisLevelCount()
Hint_EnableResetAutoHint(char const*, int)
Hint_EnableAutoHint(int, int)
Hint_EnableAutoHint(HINT_s*, int)
Hint_AddHintToQueue(HINT_s*)
Hint_GetHintFromQueue()
Hint_RemoveHintFromQueue(HINT_s*)
Hint_EmptyQueue()
Hint_SetHintByIdFlag(int, unsigned char)
Hint_SetHintByNameFlag(HINT_s*, unsigned char)
Hint_SetHint(WORLDINFO*, int, int, int)
Hint_SetHint(WORLDINFO*, HINT_s*, int, int)
Hint_SaveGameState(HINT_s*)
Hint_AddToActiveList(HINT_s*)
Hint_SetHintFromId(WORLDINFO*, int, int, int)
Hint_SetHintFromName(char*, int, int)
Hint_SetCanStart(int)
Hint_SetCanStart(HINT_s*)
Hint_SetComplete(int, unsigned char)
Hint_SetComplete(HINT_s*, unsigned char)
Hint_SetCompletePlayOnce(int)
Hint_SetCompletePlayOnce(HINT_s*)
Hint_SaveBits(int, int)
Hint_SaveAllGameState()
Hint_LoadAllGameState()
Hint_RemoveFromActiveList(HINT_s*)
Hint_Process(WORLDINFO*, float)
Hint_Draw(WORLDINFO&, int)
Hint_ResetAlpha()
Hint_SetTemp(int, float, float)
Hint_SuppressHints(float)
Hint_ClearSuppressHints()
Hint_HintsSuppressed()
Hint_Activate(HINT_s*, bool)
Hint_Activate(int, bool)
Hint_isActive(int)
Hint_isActive(HINT_s*)
LegoHints::HintShowEventData::~HintShowEventData()
CanDoDieAir(unsigned long, MechCharacter*, MechCharacter*)
ObjHitObj_Flags(MechCharacter*)
RegenerateHearts(MechCharacter*)
CannotKill(MechCharacter*)
NoLayerKill(GameObject*)
BossKilled(int)
HubAreaInfo_Set(HUBAREAINFO*)
HubAreaInfo_Get()
HubAreaInfo_Init(WORLDINFO*)
HubAreaInfo_FindFromAreaIndex(int)
HubAreaInfo_IsAreaOpen(WORLDINFO*, HUBAREAINFO*)
HubEpisodeInfo_Set(HUBEPISODEINFO*)
HubEpisodeInfo_Get()
HubEpisodeInfo_Init(WORLDINFO*)
HubEpisodeInfo_Destroy(WORLDINFO*)
HubEpisodeInfo_FindFromEpisodeIndex(int)
Hub_ActivateDoorMenu(WORLDINFO*, GizmoDoor*, LEVELDATA**)
Hub_ActivateDoorModeSelectMenu(WORLDINFO*, int, int)
Hub_ActivateContentUnlockedMenu(int*, int)
Hub_CanStartMenu(unsigned int, unsigned int*)
Hub_GetSelectAreaCamPos(NUVEC*, NUVEC*)
Hub_InDoorMenu(int)
Hub_InMenu(int)
Hub_SetShopActive(bool)
Hub_GetShopActive()
Hub_ClearAllPlayersNearShop()
Hub_ClearPlayerNearShop(unsigned int)
Hub_SetPlayerNearShop(unsigned int)
Hub_GetPlayersNearShop()
Hub_DrawImportantBrick(WORLDINFO&, int, float, float, float, int, int, int, int, unsigned short)
Hub_DrawAreaPeril(WORLDINFO&, float, float, int, float)
Hub_DrawMiniKitCount(WORLDINFO*, float, float, int, int, float)
InteractiveDisplay::GetSpecialGeometry(LegoSpecial*, VuMtx&, VuVec*)
InteractiveDisplay::InteractiveDisplay()
InteractiveDisplay::InitializePerm(char const*)
InteractiveDisplay::InitializeLevel(WORLDINFO*)
InteractiveDisplay::InitializeLevelPostLoad(WORLDINFO*)
InteractiveDisplay::DumpLevel(WORLDINFO&)
InteractiveDisplay::GetFirstSpecialMaterial(NuSmartPtr<NuScene, true>, char*)
InteractiveDisplay::GetFirstSpecialTextureId(nuhspecial_s&)
InteractiveDisplay::TransformDisplayToWorld(VuVec&, VuVec const&) const
InteractiveDisplay::TransformWorldToDisplay(VuVec&, VuVec const&) const
InteractiveDisplay::TransformDisplayToLocal(VuVec&, float, float, float) const
InteractiveDisplay::TransformDisplayToScreen(VuVec&, float, float, float) const
InteractiveDisplay::PrimAddXYZ(NuSmartPtr<NuPrimContext3D, false> const&, float, float, float) const
CullRectangle(VuVec&, VuVec&)
RotateXYUV(VuVec&, VuVec const&, int, float)
InteractiveDisplay::RenderRectangle(VuVec const&, VuVec const&, unsigned int, NuSmartPtr<NuMtl, true>, float, int) const
InteractiveDisplay::RenderRectangle(VuVec const&, float, float, unsigned int const&, NuSmartPtr<NuMtl, true>, float) const
InteractiveDisplay::RenderSquare(VuVec const&, float, unsigned int const&, NuSmartPtr<NuMtl, true>, float) const
CullLineXY(VuVec&, VuVec&)
InteractiveDisplay::RenderOutlineCircle(_vuv_s const&, float, float, int, NuSmartPtr<NuMtl, true>, unsigned int)
InteractiveDisplay::RenderSolidCircle(_vuv_s const&, float, int, NuSmartPtr<NuMtl, true>, unsigned int) const
InteractiveDisplay::RenderSpecial(_vuv_s const&, float, nuhspecial_s*, int, float) const
InteractiveDisplay::RenderLine(_vuv_s const&, _vuv_s const&, float, unsigned int, NuSmartPtr<NuMtl, true>, VuVec const*, VuVec const*)
InteractiveDisplay::RenderCurve(_vuv_s*, int, int, float, float, NuSmartPtr<NuMtl, true>, unsigned int, int, int, VuVec const*, VuVec const*)
DoChamfer(VuVec const&, VuVec const&, VuVec&, VuVec&)
InteractiveDisplay::GetCharacterIconMaterial(WORLDINFO*, int, int) const
InteractiveDisplay::GetFrameMaterial(WORLDINFO*, int) const
InteractiveDisplay::RenderCharacterIcon(int, float, float, float, float, int, float, float, int, nuhspecial_s*) const
InteractiveDisplay::RenderText(char*, VuVec const&, float, int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, int) const
InteractiveDisplay::GetNearestPlayer(VuVec*, float*) const
InteractiveDisplay::GetMinPlayerDistance() const
InteractiveDisplay::GetDefaultBackgroundCorners(VuVec*, VuMtx&)
InteractiveDisplay::IsVisible() const
InteractiveDisplay::Render()
InteractiveDisplay::RenderWhiteNoise(float) const
InteractiveDisplay::UpdateWhiteNoise(float)
InteractiveDisplay::RenderBackground(unsigned char, unsigned char, unsigned char, NuSmartPtr<NuMtl, true>)
InteractiveDisplay::RenderOverlay()
InteractiveDisplay::RenderInterlacePattern()
InteractiveDisplay::RenderStrobePattern()
InteractiveDisplay::UpdateInGameSurfaceData()
InteractiveDisplay::UpdateBackgroundAlpha(float)
InteractiveDisplay::Update(float)
InteractiveDisplay::GetInteractiveCameraPosition(VuVec&, VuVec&, float&) const
InteractiveDisplay::IsCameraTransitioning() const
InteractiveDisplay::UpdateGameCamera(NUVEC&, NUVEC&, float&)
InteractiveDisplay::GetClassName() const
InteractiveDisplay::GetClassShortName() const
InteractiveDisplay::~InteractiveDisplay()
InteractiveDisplay::~InteractiveDisplay()
InteractiveDisplay::ActivateLevel(WORLDINFO*)
InteractiveDisplay::GetDoesLevelLoadRender() const
InteractiveDisplay::GetUsesBackgroundMaterial() const
InteractiveDisplay::GetUsesStrobePattern() const
InteractiveDisplay::GetUsesWhiteNoise() const
InteractiveDisplay::GetUsesInterlacePattern() const
InteractiveDisplay::GetUsesOverlayTexture() const
InteractiveDisplay::RenderLate()
InteractiveDisplay::ShouldUpdate() const
InteractiveDisplay::RenderWhenPaused() const
InteractiveDisplay::IsCameraTarget() const
InteractiveDisplay::SetInteractiveMode(unsigned char)
InteractiveDisplay::IsInteractiveMode() const
InteractiveDisplay::GetDisplayAspectRatio() const
InteractiveDisplay::LoadSettings(char const*)
InteractiveDisplay::GetTextScaleMultiplier() const
InteractiveDisplayManager::RegisterDisplayClass(char const*, char const*, InteractiveDisplay* (*)())
InteractiveDisplayManager::GetDisplayCreateFn(char const*)
InteractiveDisplayManager::InitializePerm(char const*)
InteractiveDisplayManager::AddDisplay(InteractiveDisplay*)
InteractiveDisplayManager::GetSeedSpecialInfo(char const*, FixedString&, FixedString&, FixedString&) const
InteractiveDisplayManager::InitializeLevel_CreateLevelDisplays(WORLDINFO*)
InteractiveDisplayManager::OnLevelLoad(WORLDINFO*)
InteractiveDisplayManager::InitializeLevelPostLoad(WORLDINFO*)
InteractiveDisplayManager::ActivateLevel(WORLDINFO*)
InteractiveDisplayManager::DumpLevel(WORLDINFO&)
InteractiveDisplayManager::UpdateInputs()
InteractiveDisplayManager::Update(float)
InteractiveDisplayManager::GetTransitioningDisplay()
InteractiveDisplayManager::GetCameraTarget()
InteractiveDisplayManager::UpdateCamera(NUVEC&, NUVEC&, float&)
InteractiveDisplayManager::IsDisplayOfClassInteractiveMode(char const*) const
InteractiveDisplayManager::IsDisplayOfClassRegistered(char const*)
InteractiveDisplayManager::GetDisplayOfClass(char const*, int)
InteractiveDisplayManager::NumDisplaysOfClassRegistered(char const*)
InteractiveDisplayManager::IsDisplayOfClassPresent(char const*)
InteractiveDisplayManager::Render(ClassManager::eRenderingPriority const&)
StartTrampolineJump(MechCharacter*, int)
StartJump(MechCharacter*, int, SFXTypeID const&, NuSoundHandle*)
MakeJumpReachHeight(MechCharacter*, float, int, float*)
HighJump_UpdateHint(WORLDINFO*, HINT_s*)
HighJump_CompleteHint(MechCharacter*)
StartLunge(MechCharacter*, float, float)
Slam_CamAndRumble(MechCharacter*)
Lunge_Hit(MechCharacter*, MechObjectData*)
SuperStrength_LandJudder(MechCharacter*)
SlamThisFrame(MechCharacter*, FXTypeID const&)
JumpCode(GameObject*, int, int, unsigned int, int, int, FXTypeID const&)
FindSlamOrigin(MechCharacter*, NUVEC*, NUVEC*)
StartFallLand(MechCharacter*, int)
Slam_Start(MechCharacter*, float)
Glide_Start(MechCharacter*)
StartBackFlip(MechCharacter*)
Jump_SetAction(MechCharacter*)
StartJumpVehicle(MechCharacter*, int, bool)
StartEndOfJump(MechCharacter*)
StartBigJump(MechCharacter*, NUVEC const*, int, float, float, int, int, int, int, float, float, int, unsigned short, int)
BigJumpCode(MechCharacter*)
ObjLandReady(MechCharacter const*, bool)
UseFallAnim(MechCharacter*)
StartNormalLand(MechCharacter*)
BackFlipCode(MechCharacter*)
Glide_MoveCode(MechCharacter*)
Glide_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
DoubleJump_UpdateHint(HINT_s*)
VehicleJumpCode(MechCharacter*)
WallJump_UpdateHint(WORLDINFO*, HINT_s*)
CanStartWallJump(MechCharacter*, int, int, int)
Jump_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Jump_IsLanding(MechCharacter const*)
Jump_IsJumping(MechCharacter const*)
LegoAddOn::GetChar() const
LegoAddOn::GetMechVehicle() const
LegoAddOn::GetMechObjectInterface() const
LegoAddOn::GetGizmo() const
LegoAddOn::GetLevelContainer() const
non-virtual thunk to LegoAddOn::GetLevelContainer() const
LegoAddOn::GetLegoLevelContainer() const
LegoAddOn::GetGadget() const
LegoAddOn::GetOwningLegoLevelContainer() const
LegoAddOn::GetWorldInfo() const
LegoAddOnsManager::LegoAddOnsManager(LevelContainer&)
LegoAddOnsManager::DestroyAll(AddOnList::eDestroyEvent)
LegoAddOns::CreateManager(LevelContainer&)
LegoAddOn::~LegoAddOn()
non-virtual thunk to LegoAddOn::~LegoAddOn()
non-virtual thunk to LegoAddOn::~LegoAddOn()
LegoAddOnsManager::~LegoAddOnsManager()
LegoAddOns::~LegoAddOns()
StatusScreen_SetActiveStatusLevelWorldInfo(WORLDINFO*)
StatusScreen_GetActiveStatusLevelWorldInfo()
SfxClearAllLocks()
SetContinueStoryDoorName(char*)
GetContinueStoryLastDoorName()
GetLastContinueStoryLastDoorName()
SetContinueStoryLevelName(char*)
GetContinueStoryLevelName()
SetAllowSaveFlag(int)
GetAllowSaveFlag()
SetDrawGoldBrick(STATUSPACKET*, int, float)
DrawStatusText(char const*, unsigned short, float, float, float, unsigned int, int, int, float)
CreateStatusFractionText(char*, int, int)
DrawStatusTextFraction(int, int, float, float, unsigned short, float, unsigned int, float, float, int)
FindStatusStage(int)
StatusStage_Reset(STATUS_STAGE*)
NewStatusRumbleBuzz(int, float, float, int)
NextStatusStage(STATUSPACKET*)
AddGoldBrickMessage(STATUSPACKET*, short)
AddStatusStage(STATUSPACKET*, int, int)
StatusPacketReset(STATUSPACKET*)
MenuInitStatusScreen(MENU*)
InitStatusScreen(WORLDINFO*, char)
MenuUpdateStatusScreen(MENU*)
UpdateStatusScreen(WORLDINFO*)
MenuDrawStatusScreen(MENU*)
DrawStatusScreen_Panel(WORLDINFO*)
UpdateStatusScreenEx(WORLDINFO*)
FinishStatusPacket(int)
StatusIconsOnOff(float)
Status_GetPlayerCharacterIds(int&, int&)
DrawStatusIcons(STATUSPACKET*, float, float)
UpdateNewMiniKits(STATUSPACKET*, STATUS_STAGE*)
BuildStatusMiniKitMtx(unsigned char, NUVEC const&, NUVEC const&, NUMTX const&, NUMTX&)
StatusMiniKitDraw(float, float, float, float, float, int, int, float, MINIKIT const&)
DrawStatusMiniKit(float, float, float, float, float, int, STATUSPACKET*, float)
AddStatusMiniKitParts(WORLDINFO&, int, int, int)
NewCharactersCollected_DEFAULT(STATUSPACKET*)
STATUSPACKET::MeetsRestartRequirement()
Status_SelectPromptMenuText(STATUSPACKET*, int*, unsigned int*)
Status_DrawPromptMenu(STATUSPACKET*, int, float)
DrawBonusTime(STATUSPACKET*, float, int)
DrawStatusScreen_Main3d(WORLDINFO*)
UpdateAchievements(STATUSPACKET*)
RegisterStatusScreen(STATUS_STAGE*, REGISTERSTATUSPACKET_s*)
DrawStatusSuperKit(float, float, float, float, float, int, STATUSPACKET*, float, int)
STATUS_STAGE::CanDrawWhenLoadingLevel() const
PlayStatusStringJingles(WORLDINFO&, STATUSSTRING*, int, float, float)
DrawStatusStrings(STATUS_STAGE*, STATUSPACKET*, STATUSSTRING*, int)
Status_DrawPromptGoldBricks(float, float)
Status_DrawPromptMiniKit(STATUSPACKET*, float, float)
LegoapiText::~LegoapiText()
LegoapiText::Init(int)
LegoapiText::Setup()
LegoapiText::SetLanguage(NuLanguage)
LegoapiText::SetupTextList()
LegoapiText::FixUpFont()
LegoapiText::LoadFont()
LegoapiText::FixUpString(char const*, int)
LegoapiText::FixUpGameStrings(LEGOTEXTFIXUPTABLE const*)
LegoapiText::StringBitSet(int)
LegoapiText::GetString(int)
LegoapiText::GetMaxNumberOfStrings()
LegoapiText::SetupApiStrings()
LegoapiText::IsDefaultTextChar(char const*)
LegoapiText::IsDefaultTextID(int)
LegoapiText::GetLanguage()
LegoapiText::GetRegion()
LegoapiText::GetLanguageText()
LegoapiText::GetLanguagePath()
LegoapiText::GetLanguageFont()
LegoapiText::GetFontScaleLevelX()
LegoapiText::GetFontScaleLevelY()
LegoapiText::GetFontScaleSaveX()
LegoapiText::GetFontScaleSaveY()
LegoapiText::GetFontScaleIntroX()
LegoapiText::GetFontScaleIntroY()
LegoapiText::DecodeButtons(char*, char*)
LegoapiText::~LegoapiText()
LegoGizmoCoinEmit::LegoGizmoCoinEmit()
LegoGizmoCoinEmit::operator=(LegoGizmoCoinEmit const&)
LegoGizmoCoinEmit::getEmitPosition()
LegoGizmoCoinEmit::getEmitPosition(Gizmo&)
LegoGizmoCoinEmit::getEmitPosition(NUVEC const&, int const&, int const&, int const&)
LegoGizmoCoinEmit::getGizmoWorkingOrigin(Gizmo&)
LegoGizmoCoinEmit::getGizmoWorkingOrigin()
LEVELDATA_ToMakeNonGlobal::IsOnPlayerList(int) const
LEVELDATA::GetAreaSettings() const
LEVELDATA::IsRelevantToLevelSave() const
LEVELDATA::ValidateInfo() const
LEVELDATA::LEVELDATA()
LEVELDATA::GetFrom(StreamingLevel const&)
LEVELDATA::GetFrom(LevelContainer const&)
AREADATA::IsOnPlayerList(int) const
AREADATA::GetFrom(StreamingLevel const&)
AREADATA::GetFrom(LevelContainer const&)
AREADATA::GetEpisodeSettings() const
EPISODEDATA::GetFrom(StreamingLevel const&)
LevelInstanceSettings::LevelInstanceSettings()
LevelInstanceSettings::~LevelInstanceSettings()
LevelInstanceSettings::AddAbility(MechAbilityInit const&)
LevelInstanceSettings::SuppressAbility(MechAbilityInit const&)
LevelInstanceSettings::GetAbilitiesToAddAndSuppress() const
LevelInstanceSettings::GetUnsetMechAbilitiesToAddAndSuppressFlags()
LevelInstanceSettings::FindAbility(MechAbilityHandle const&, int) const
LevelInstanceSettings::CalculateAbilityFlags(int, MechAbilityFlags&) const
LevelInstanceSettings::HasAnyOfAbilityFlags(MechAbilityFlags const&, int, MechAbilityFlags&) const
LevelInstanceSettings::GeneralSettings::GeneralSettings()
LevelInstanceSettings::GeneralSettings::~GeneralSettings()
LegoMenuCharacterGrids::LegoMenuCharacterGrids()
LegoMenuCharacterGrids::~LegoMenuCharacterGrids()
LegoMenuCharacterGrids::~LegoMenuCharacterGrids()
LegoMenuCharacterGrids::Init()
MechContext* MechContextConstructor<CharStreamWaitContext>(MechCharacter&)
LegoMenuCharacterGrids::OnInitPostConfig()
LegoMenuCharacterGrids::EventNotify(Event&, NuEventData&)
LegoMenuCharacterGrids::NewHubCharSelect(int, int, int)
LegoMenuCharacterGrids::DeleteFlaggedGrids()
LegoMenuCharacterGrids::NewInGameCharSelect(LegoLevelContainer&, int, eCHARLOADER)
InGameCharGrid::AddPlayer(int const&)
LegoMenuCharacterGrids::CreateInGameGrid(LegoLevelContainer&, int, eCHARLOADER)
LegoMenuCharacterGrids::CreateHubCharGrid(int, int, int)
LegoMenuCharacterGrids::NewHubCharSwitcher(LegoLevelContainer&, int)
LegoMenuCharacterGrids::UpdateHubCharSelect()
LegoMenuCharacterGrids::UpdateInGameCharSelect()
LegoMenuCharacterGrids::DrawHubCharSelect()
LegoMenuCharacterGrids::DrawInGameCharSelect()
LegoMenuCharacterGrids::DeleteHubCharSelect()
LegoMenuCharacterGrids::DeleteInGameCharSelect()
LegoMenuCharacterGrids::BlockInGameCharSelectForPlayer(int, float)
LegoMenuCharacterGrids::OnAreaDump()
CharLoaderUtil::ClearAllStreamedChars()
LegoMenuCharacterGrids::GetCharSwapVfxId()
LegoMenuCharacterGrids::IsGridActive()
LegoMenuCharacterGrids::SetInGameGridToView()
InGameCharGrid::SetToViewMode()
LegoMenuCharacterGrids::GetStreamingCharId(int)
InGameCharGrid::GetLoadingChar(int)
LegoMenuCharacterGrids::IsAllowedToStartInGameMenu(MechCharacter*)
LegoMenuCharacterGrids::IsPlayerAllowToSwapChars(MechCharacter*)
InGameCharGrid::IsAllowedToUse(MechCharacter*)
LegoMenuCharacterGrids::OnPlayerTagged(MechCharacter*, MechCharacter*)
CharLoaderUtil::OnPlayerTagged(MechCharacter*, MechCharacter*)
LegoMenuCharacterGridBase::LegoMenuCharacterGridBase(int, int, int)
HubCharGrid::~HubCharGrid()
LegoMenuCharacterGridBase::~LegoMenuCharacterGridBase()
LegoMenuCharacterGridBase::Update()
LegoMenuCharacterGridBase::Draw()
MovingCharIcon::draw(WORLDINFO*)
MovingCharIcon::isFinished()
LegoMenuCharacterGridBase::OnCharSelected(int, int, int&)
LegoMenuCharacterGridBase::OnCancel(int, int&)
LegoMenuCharacterGridBase::OnExit()
LegoMenuCharacterGridBase::MakeFreePlayList(int, int)
LegoMenuCharacterGridBase::Net_MakeFreePlayList()
LegoMenuCharacterGridBase::FreePlayCollection()
GetFreePlayCollection(int)
LegoMenuCharacterGridBase::GetCornerIconId(int, int, COLLECTION*)
LegoMenuCharacterGridBase::GetPlayerCharId(int)
HubCharGrid::HubCharGrid(int, int, int)
HubCharGrid::~HubCharGrid()
HubCharGrid::HandlePlayerDroppedOut()
HubCharGrid::Update()
HubCharGrid::Draw()
HubCharGrid::PlayerSelectedChar(int)
HubCharGrid::PlayerCancelled(int)
HubCharGrid::GetCornerIconId(int, int, COLLECTION*)
HubCharGrid::OnCharSelected(int, int, int&)
HubCharGrid::OnAboutToExit()
HubCharGrid::OnExit()
InGameCharGrid::InGameCharGrid(LegoLevelContainer&, int, eCHARLOADER)
InGameCharGrid::~InGameCharGrid()
InGameCharGrid::~InGameCharGrid()
InGameCharGrid::Update()
CharLoaderUtil::Update()
CharLoaderUtil::IsAnyPlayerLoadingChar()
InGameCharGrid::Draw()
InGameCharGrid::OnCharSelected(int, int, int&)
InGameCharGrid::OnCancel(int, int&)
InGameCharGrid::DoToggleVFX(int)
InGameCharGrid::OnAboutToExit()
InGameCharGrid::OnExit()
CharLoaderUtil::IsDone()
InGameCharGrid::PlayerSelectedChar(int)
InGameCharGrid::PlayerCancelled(int)
InGameCharGrid::GetCornerIconId(int, int, COLLECTION*)
InGameCharGrid::CanAddPlayer(int)
CharLoaderUtil::IsPlayerLoadingChar(int)
CharLoaderUtil::GetLoadingChar(int)
CharLoaderUtil::DumpAllStreamedChars()
CharLoaderUtil::DumpChar(int)
CharLoaderUtil::CharLoaderUtil()
CharLoaderUtil::~CharLoaderUtil()
CharLoaderUtil::~CharLoaderUtil()
CharLoaderUtil::LoadCharacter(int, int)
CharLoaderUtil::IsDonePlayer(int)
CharLoaderUtil::UpdatePlayer(int)
CharLoaderUtil::DumpUnusedCharacters()
CharStreamWaitContext::EndWait()
CharLoaderUtil::DumpAndReplaceCurrentChar(int)
CharLoaderUtil::GetPlayerCharId(int)
CharLoaderUtil::CancelLoadForPlayer(int)
CharLoaderUtilSwap::CharLoaderUtilSwap()
CharLoaderUtilSwap::~CharLoaderUtilSwap()
CharLoaderUtilSwap::LoadCharacter(int, int)
CharLoaderUtilSwap::UpdatePlayer(int)
CharLoaderUtilSwap::CancelLoadForPlayer(int)
CharLoaderUtilSwap::WorkWaitContextTimeouts(int)
CharLoaderUtilSwap::TimeOutCharLoad(int)
CharLoaderUtilHub::CharLoaderUtilHub()
CharLoaderUtilHub::LoadCharacter(int, int)
CharLoaderUtilHub::UpdatePlayer(int)
CharLoaderUtilHub::TimeOutCharLoad(int)
MovingCharIcon::MovingCharIcon(int, int, float, float, float, float, float, float, float, float, float)
MovingCharIcon::MovingCharIcon(int, int, float, float, float, float, float, float, float, float)
CharStreamWaitContext::CharStreamWaitContext(MechCharacter&)
CharStreamWaitContext::~CharStreamWaitContext()
CharStreamWaitContext::~CharStreamWaitContext()
CharStreamWaitContext::AllowEnter(int, MechContext*)
CharStreamWaitContext::AllowLeave(int, MechContext*)
CharStreamWaitContext::OnEnter(LevelContainer*)
CharStreamWaitContext::OnProcess(LevelContainer*, float)
CharStreamWaitContext::OnLeave()
LegoMenuCharacterGrids::FreePlayUseInGameCharGrid(MechCharacter*)
LegoMenuCharacterGridBase::OnAboutToExit()
CharLoaderUtilSwap::~CharLoaderUtilSwap()
CharLoaderUtilHub::~CharLoaderUtilHub()
LegoContextHandlerBase<CharStreamWaitContext>::GetInstanceId() const
CharacterGridEventData::~CharacterGridEventData()
LegoContextHandlerBase<CharStreamWaitContext>::~LegoContextHandlerBase()
LegoRopeType::LegoRopeType()
LegoRopeType::~LegoRopeType()
LegoRopeType::~LegoRopeType()
IRenderableRope::UpdateOnScreenAndThisRender()
SimpleRope::AddPoint(NUVEC&)
SimpleRope::InitRope(NUVTX_TC1*, NUVTX_TC1*, int, int, float, float, bool, unsigned int, bool)
SimpleRope::InitRope(_vuv_s*, int, int, float, float, bool, bool)
SimpleRope::ResetRope()
SimpleRope::GetPoints(Array<VuVec*>&)
SimpleRope::GetFirstPoint(VuVec&)
SimpleRope::GetLastPoint(VuVec&)
SimpleRope::GetNumOfPoints()
LegoRopesManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoRopesManager::FindRopeLocator(char const*) const
LegoRopesManager::DestroyRopeLocator(RopeLocator*)
LegoRopes::LegoRopes()
LegoRopes::~LegoRopes()
LegoRopes::DestroyAllRopes()
LegoPointerHandleTable<LegoRopeType*, signed char, LegoRopeTypeID>::~LegoPointerHandleTable()
SimpleRope::~SimpleRope()
LegoRopes::~LegoRopes()
LegoRopes::Init()
RopeLocator::Init()
LegoRopes::RegisterType(char const*)
LegoRopes::FindRopeTypeID(char const*, int&)
LegoRopes::FindRopeTypeID(char const*, short&)
LegoRopes::FindRopeTypeID(char const*, char&)
LegoRopes::FindRopeTypeID(char const*, unsigned short&)
LegoRopes::OnExitLevel(LegoLevelContainer&)
LegoRopes::OnResetLevel(LegoLevelContainer&)
LegoRopes::ActionAddCharacterTether(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
LegoRopes::AddCharacterTether(MechCharacter&, RopeAnchor&, int, float, VuVec&, int, bool, bool, int)
LegoRopes::ActionBreakCharacterTether(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
LegoRopes::BreakCharacterTether(MechCharacter&)
LegoRopes::AddCharacterTether(MechCharacter&, int, bool, MechCharacter&, int, bool, int, float, VuVec&, bool, int)
LegoRopes::AddCharacterTether(MechCharacter&, int, int, float, int)
LegoRopes::CreateCharacterTether_Start(WORLDINFO&, int, int)
LegoRopes::CreateCharacterTether_End(LegoRope&, float, float)
LegoRope::SetupEnd(float, float)
LegoRopes::CreateCharacterTether_AddAnchor(LegoRope&, MechCharacter&, int, int)
LegoRope::AddAnchor(MechCharacter&, int, int)
LegoRopes::RemoveAnchor(LegoRope&, int)
LegoRope::RemoveAnchor(int)
LegoRopes::DestroyRope(LegoRope*)
LegoRopes::FindCharacterTetherLegoRope(MechCharacter&)
LegoRopes::FindRopeLocator(LegoLevelContainer&, char const*)
LegoRopes::SimpleRope_Allocate(NUVTX_TC1*, NUVTX_TC1*, int, int, float, float, bool, bool)
LegoRopes::SimpleRope_Allocate(_vuv_s*, int, int, float, float, bool, bool)
LegoRopes::SimpleRope_DeAllocate(int)
LegoRopes::ResetOnScreen(NURENDERSTAGE, LevelViewType, ClassManager::eRenderingPriority const&)
LegoRopes::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoRopes::UpdateOnScreenRenderableRope(IRenderableRope&)
LegoRopes::DrawRenderableRope(IRenderableRope&)
LegoRopes::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoRope::Process(float)
LegoRopes::AddManagersForLevel(LegoLevelContainer&)
LegoRopes::RemoveManagersForLevel(LegoLevelContainer&)
LegoRopes::FindTypeByName(char const*) const
LegoRopes::FindTypeIDByName(char const*) const
LegoRopes::FindTypeIDByName(HashedKey&) const
LegoRopes::Create2dMaterialForRopes()
LegoRopes::RemoveRope(LegoRope*)
LegoRopes::LoadGameData()
LegoRopes::LoadRopeTypes(char const*)
LegoRope::FixUpRenderablePoints(VuVec*, int, int)
LegoRopeAnchor::GetMtx(VuMtx&) const
LegoRopeAnchor::SetGameObject(MechCharacter&, int, int)
LegoRope::AddAnchor(VuMtx&, int)
LegoRopeAnchor::SetTransform(VuMtx&, int)
LegoRope::AddAnchor(RopeLocator&, int)
LegoRopeAnchor::SetRopeLocator(RopeLocator&, int)
LegoRope::Create(float, float)
LegoRope::BuildNormalForRendering()
LegoRope::LegoRope(WORLDINFO&, int, int)
LegoRope::LegoRope(WORLDINFO&, RopeAnchor&, RopeAnchor&, VuVec&, VuVec&, int, float, float, bool, int)
LegoRopeAnchor::SetSpecial(LegoSpecial&, int)
LegoRope::LegoRope(WORLDINFO&, MechCharacter&, RopeAnchor&, int, float, float, VuVec&, int, bool, bool, int)
LegoRopeAnchor::SetLocator(AIConvexLocator&, int)
LegoRope::LegoRope(WORLDINFO&, MechCharacter&, int, bool, MechCharacter&, int, bool, int, float, float, VuVec&, bool, int)
LegoRope::LegoRope(WORLDINFO&, MechCharacter&, int, int, float, float, int)
LegoRope::~LegoRope()
LegoRope::~LegoRope()
LegoRopeAnchor::GetPhysicsOffset(bool, VuMtx&, float, VuMtx*) const
LegoRopeAnchor::GetGameObject() const
LegoRopeAnchor::GetSpecial() const
LegoRopeAnchor::HasRopeLocChild() const
LegoRopeAnchor::GetRopeLocator() const
LegoRope::Reset()
LegoRope::Render(bool)
LegoRope::Refresh()
LegoRope::IsOnVisibleLayer() const
LegoRope::GetPoints(Array<VuVec*>&)
LegoRope::GetFirstPoint(VuVec&)
LegoRope::GetLastPoint(VuVec&)
LegoRope::GetNumOfPoints()
LegoRope::GetStartMtx(VuMtx&) const
LegoRope::GetEndMtx(VuMtx&) const
LegoRope::GetAnchorMtx(VuMtx&, int) const
LegoRopeAnchor::GetLocator() const
RopeLocatorHelper::RopeLocatorHelper()
RopeLocatorHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
RopeLocatorHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
RopeLocatorHelper::AddBaseObject(EdRegContext*, ClassObject&)
RopeLocatorHelper::RemoveBaseObject(EdRegContext*, ClassObject&)
RopeLocatorHelper::GetManNumObjects(ClassManager*, void*)
RopeLocatorHelper::GetManNextObject(ClassManager*, void*, void*)
RopeLocator::GetNuUniqueObjectBase()
RopeLocator::GetNuUniqueName() const
non-virtual thunk to RopeLocator::GetNuUniqueName() const
RopeLocator::GetNuUniqueNameHash() const
non-virtual thunk to RopeLocator::GetNuUniqueNameHash() const
RopeLocator::SetTransform(VuMtx const&)
RopeLocator::GetClass() const
EdRopeLocator::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRopeLocator::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
LegoRopesHelper::LegoRopesHelper()
RopeLocator::~RopeLocator()
RopeLocator::~RopeLocator()
RopeLocator::GetLedFile() const
RopeLocator::SetLedFile(short)
RopeLocator::GetName() const
RopeLocator::SetName(char const*)
RopeLocator::GetTransform(VuMtx&) const
RopeLocator::GetSceneNode() const
RopeLocator::Activate()
RopeLocator::Deactivate()
RopeLocator::IsActive() const
RopeLocator::SetSceneNode(SceneNode*)
non-virtual thunk to RopeLocator::~RopeLocator()
non-virtual thunk to RopeLocator::~RopeLocator()
EdRopeLocator::~EdRopeLocator()
SimpleRope::GetMaterialIndex()
SimpleRope::GetStartMtx(VuMtx&) const
SimpleRope::GetEndMtx(VuMtx&) const
SimpleRope::GetLength()
SimpleRope::IsOnVisibleLayer() const
SimpleRope::GetNumSegmentsPerEdge() const
IRenderableRope::FixUpRenderablePoints(VuVec*, int, int)
SimpleRope::~SimpleRope()
LegoRopesManager::~LegoRopesManager()
LegoRopesManager::~LegoRopesManager()
LegoRopesManager::GetClass(int)
LegoRopesManager::GetNumClasses()
LegoRopesManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoRopes::GameModifyRopeColour(unsigned int&, int)
LegoRopes::OnRopeAllocate(NUVTX_TC1*, NUVTX_TC1*, int, int, float, float, bool, bool)
LegoRopes::RenderRopeWithLinks(VuVec*, int, int)
LegoRope::GetMaterialIndex()
LegoRope::GetLength()
IRenderableRope::GetNumSegmentsPerEdge() const
RopeLocatorHelper::~RopeLocatorHelper()
LegoRopesHelper::~LegoRopesHelper()
LegoRopeEventData::~LegoRopeEventData()
LegoPointerHandleTable<LegoRopeType*, signed char, LegoRopeTypeID>::~LegoPointerHandleTable()
LegoHandleTable<LegoRopeType*, signed char, LegoRopeTypeID>::~LegoHandleTable()
LegoHandleTable<LegoRopeType*, signed char, LegoRopeTypeID>::~LegoHandleTable()
MechContextRemoteBarrelHandler::MechContextRemoteBarrelHandler(MechCharacter&)
MechContextRemoteBarrelHandler::~MechContextRemoteBarrelHandler()
non-virtual thunk to MechContextRemoteBarrelHandler::~MechContextRemoteBarrelHandler()
MechContextRemoteBarrelHandler::~MechContextRemoteBarrelHandler()
non-virtual thunk to MechContextRemoteBarrelHandler::~MechContextRemoteBarrelHandler()
MechContextRemoteBarrelHandler::Register()
MechContext* MechContextConstructor<MechContextRemoteBarrelHandler>(MechCharacter&)
MechContextRemoteBarrelHandler::AllowLeave(int, MechContext*)
MechContextRemoteBarrelHandler::OnEnter(LevelContainer*)
MechContextRemoteBarrelHandler::GetAnimSpeed(float&)
MechContextRemoteBarrelHandler::TakeOverActionOverride(int&, GameObject&, GameObject&)
MechContextRemoteBarrelHandler::OnProcess(LevelContainer*, float)
MechContextRemoteBarrelHandler::OnLeave()
LegoContextHandlerBase<MechContextRemoteBarrelHandler>::GetInstanceId() const
LegoContextHandlerBase<MechContextRemoteBarrelHandler>::~LegoContextHandlerBase()
MechContextRemoteWinchHandler::MechContextRemoteWinchHandler(MechCharacter&)
MechContextRemoteWinchHandler::~MechContextRemoteWinchHandler()
non-virtual thunk to MechContextRemoteWinchHandler::~MechContextRemoteWinchHandler()
MechContextRemoteWinchHandler::~MechContextRemoteWinchHandler()
non-virtual thunk to MechContextRemoteWinchHandler::~MechContextRemoteWinchHandler()
MechContextRemoteWinchHandler::Register()
MechContext* MechContextConstructor<MechContextRemoteWinchHandler>(MechCharacter&)
MechContextRemoteWinchHandler::OnEnter(LevelContainer*)
MechContextRemoteWinchHandler::OnProcess(LevelContainer*, float)
MechContextRemoteWinchHandler::OnLeave()
LegoContextHandlerBase<MechContextRemoteWinchHandler>::GetInstanceId() const
LegoContextHandlerBase<MechContextRemoteWinchHandler>::~LegoContextHandlerBase()
LegoProgressSystem::LegoProgressSystem()
LegoProgressSystem::ShutDown()
LegoProgressSystem::DestroyLegoProgressBackup()
LegoProgressSystem::OnExitLevel(MechLevelContainer&)
LegoProgressSystem::AllocateAreaProgress(AREADATA*)
LegoProgressSystem::UsePermanentBufferToSerialise(WORLDINFO&)
LegoProgressSystem::UsePermanentBufferToSerialise(AREADATA const*)
LegoProgressSystem::GetSerialiseBlock(LevelContainer&)
LegoProgressSystem::GetSerialiseBlock(WORLDINFO&)
LegoProgressSystem::GetSerialiseBlock(AREADATA const*)
LegoProgressSystem::FindSerialisedHeader(LegoProgressSerialiseBlock*, char const*, int)
LegoProgressSystem::GetLevelHeaderName(WORLDINFO&)
LegoProgressSystem::WriteProgressToSerialisedBuffer(WORLDINFO&, Serialisable&, char const*, int)
LegoProgressSystem::DeleteSerialisedHeader(LegoProgressSerialiseBlock&, LegoProgressSerialiseHeader&)
LegoProgressSystem::FindNextFreeHeader(LegoProgressSerialiseBlock*)
LegoProgressSystem::WriteSerialisedAreaProgress(WORLDINFO&)
LegoProgressSystem::WriteSerialisedLevelProgress(WORLDINFO&)
LegoProgressSystem::GetLevelProgress(WORLDINFO&, int)
LegoProgressSystem::ReadProgressFromSerialisedBuffer(LegoProgressSerialiseBlock&, Serialisable&, char const*, int)
LegoProgressSystem::ReadSerialisedAreaProgress(WORLDINFO&)
LegoProgressSystem::ClearAreaProgress(AREADATA&)
LegoProgressSystem::ReadSerialisedLevelProgress(WORLDINFO&)
LegoProgressSystem::ClearLevelProgress(WORLDINFO&, int)
LegoProgressSystem::LevelBeenModified_DestroyProgress(WORLDINFO*)
LegoProgressSystem::DestroyProgress(WORLDINFO&)
LEVEL_PROGRESS_s::DeactivateCreature(WORLDINFO*, unsigned char, bool)
LEVEL_PROGRESS_s::IsCreatureDeactivated(WORLDINFO*, unsigned char)
LEVEL_PROGRESS_s::ClearDeactivatedCreatureProgress(WORLDINFO*)
LevelProgress::Serialise(EdStream&)
AreaProgress::~AreaProgress()
AreaProgress::~AreaProgress()
AreaProgress::Serialise(EdStream&)
LegoProgressSystem::AllocateProgress(WORLDINFO&, int, int)
LegoProgressSystem::ReStoreLevelProgress(WORLDINFO&, int)
LegoProgressSystem::StoreLevelProgress(WORLDINFO&, int)
LegoProgressSystem::StoreAreaProgress(WORLDINFO&)
LegoProgressSystem::ReStoreAreaProgress(WORLDINFO&)
LegoProgressSystem::GetSpecialSystemProgress(WORLDINFO&, int)
LegoProgressSystem::GetGizmoProgress(WORLDINFO&, int)
LegoProgressSystem::GetGizmoTypeProgress(WORLDINFO&, int, int)
LegoProgressSystem::GetGizFlowProgress(WORLDINFO&, int)
LegoProgressSystem::GetGameAnimSysProgress(WORLDINFO&, int)
LegoProgressSystem::WriteDataToSerialisedDataBlock(LevelContainer&, int, void*, int)
LegoProgressSystem::GetDataFromSerialisedDataBlock(LevelContainer&, int, int&)
LegoProgressSystem::DestroyAreaProgress(AREADATA*)
LegoProgressSystem::NewGame()
LegoProgressSystem::ResetLEDObjects(WORLDINFO&)
LegoProgressSystem::CreateLegoProgressBackUp(LevelContainer&)
LegoProgressSerialiseBlock::InitBlock(void*, int, bool)
LegoProgressSystem::ApplyLegoProgressBackUp(LevelContainer&)
LegoProgressSystem::RegisterWithLevelDistanceTracker(LevelContainer&)
LegoProgressSystem::UpdateLevelDistanceTracker()
LegoProgress_ResetGizFlow(WORLDINFO*)
LevelProgress::~LevelProgress()
LevelProgress::~LevelProgress()
LegoProgressSystem::~LegoProgressSystem()
LegoProgressSystem::ExcludeFromProgress(LEVELDATA&)
LegoProgressSystem::KeepLevelProgressByDefault(LEVELDATA&)
LegoProgressLEDObjectList::~LegoProgressLEDObjectList()
LegoProgressLEDObject::GetBit1(WORLDINFO&)
LegoProgressLEDObject::SetBit1(WORLDINFO&, bool)
LegoProgressLEDObject::GetBit2(WORLDINFO&)
LegoProgressLEDObject::SetBit2(WORLDINFO&, bool)
LegoProgressLEDObjectList::AllocateProgress()
LegoProgressLEDObjectList::ClearProgress(GizmoProgress*)
LegoProgressLEDObjectList::StoreProgress(WORLDINFO&, GizmoProgress*)
LegoProgressLEDObjectList::Reset(WORLDINFO&, GizmoProgress*)
LegoProgressLEDObjectList::AddObject(Placeable&)
LegoProgressLEDObjectList::FindOnList(void*)
LegoProgressLEDObjectList::AddObject(SoundPlaceable&)
LegoProgressLEDObjectList::AddObject(AnimationInstance&)
LegoProgressLEDObjectList::AddObject(BeamSpline&)
LegoProgressLEDObjectList::AddObject(unsigned char)
LegoProgressLEDObjectList::FindOnList(unsigned char, LegoProgressLEDObject::eTypes)
LegoProgressLEDObjectList::AddObject(IAnimatable&)
LegoSaveGame::LegoSaveGame()
LegoSaveGame::~LegoSaveGame()
LegoSaveGame::~LegoSaveGame()
LegoSaveGame::TotalSaveSize()
LegoSaveGame::Init()
LegoSaveGame::RegisterFileTypes()
LegoSaveGame::Serialise(EdStream&)
cLoadSaveManager::SaveSaveGame(EdStream&, int)
cLoadSaveManager::LoadSaveGame(EdStream&, int)
LegoSaveGame::MaxTotalSaveSize()
cLoadSaveManager::cLoadSaveManager()
cLoadSaveManager::~cLoadSaveManager()
cLoadSaveManager::Add(cLoadSaveManagerItem*)
cLoadSaveManager::Reset()
LegoSaveGame::LoadSaveGame(EdStream&, int)
LegoSaveGame::SaveSaveGame(EdStream&, int)
LegoSaveGame::GameSpecificSaveVersion()
LegoSaveGame::GameSpecificSaveSize()
LegoSaveGame::GameSpecificSaveSize(int)
LegoSetList::FindByName(char const*)
LegoSetList::FindByLevel(StreamingLevel const&)
LegoSetCollection::LegoSetCollection(WORLDINFO*)
LegoSetCollection::~LegoSetCollection()
LegoSet::SetToBeDeleted()
LegoSet::Release(LegoSet&)
WorldInfo_CullUnusedGizmoResources(WORLDINFO&)
WorldInfo_DumpAsLegoSet(WORLDINFO&)
LegoSet::GetFrom(StreamingLevel&)
LegoSetCollection::LoadLegoSet(char const*, NUPAKFILEHNDL const&, int)
CMList<LegoSet*>::Append(LegoSet* const&, CMList<LegoSet*>::ListLink*)
LegoSet::LegoSet(StreamingLevel&)
LegoSet::FindSplineObject(char*)
LegoSetCollection::LoadLegoSets(char const*, NUPAKFILEHNDL const&, bool volatile*, bool, char const*)
LegoSetCollection::LoadGlobalLegoSets(char const*, bool)
theLegoSetCollection_Init()
LegoSetCollection_LevelLoadLegoSets(WORLDINFO*, char*, NUPAKFILEHNDL const&, bool volatile*)
LegoSetCollection::ActivateLevelContainer(WORLDINFO*)
LegoSetCollection::GetCollection_AreaCollectionFirst(WORLDINFO const*, LegoSetList**, int*)
LegoSetCollection::DeactivateLevelContainer(WORLDINFO*)
LegoSetCollection::AddLegoSetResourcesToStreamingLevel(StreamingLevel&, bool) const
LegoSetCollection::ReleaseLegoSets()
LegoSetCollection::ResetGizmos(WORLDINFO*)
LegoSetCollection::GetCollection_LevelCollectionFirst(WORLDINFO const*, LegoSetList**, int*)
LegoSetCollection::NuSpecialFind(WORLDINFO const*, nuhspecial_s*, char const*, int)
LegoSetCollection::NuSpecialFind(LevelContainer const*, nuhspecial_s*, char const*, int)
LegoSetCollection::FindLegoSpecial(WORLDINFO*, char const*)
LegoSetCollection::FindLegoSpecialWithHashMapOnly(WORLDINFO*, char const*)
LegoSetCollection::FindLegoSpecialWithStringOnly(WORLDINFO*, char const*)
LegoSetCollection::RequestSfx(WORLDINFO*)
LegoSetCollection::ReleaseSfx(WORLDINFO*)
LegoSetCollection::FindSplineObject(WORLDINFO*, char*)
LegoSetCollection::FixUpPlayerItems(WORLDINFO*, int)
LegoSetCollection::FindGizmoEx(WORLDINFO*, int, char const*, int)
LegoSetCollection::GotInstancableGizmos(WORLDINFO*, int)
LegoSetCollection::CreateInstancableGizmosList(WORLDINFO*, int)
LegoSetCollection::DestroyInstancableGizmosList(GizmoCMList*)
LegoSpecial::IsLegoSpecialClass(EdClass*, void*)
LegoSpecial::EvaluateFromArtScene()
LegoSpecial::LegoSpecial(SpecialSystem&, SceneObject*, bool)
LegoSpecial::UpdateAvoidableFlag()
ProgressMatrix::Set(NUMTX&)
LegoSpecial::StoreInitialStateValues()
LegoSpecial::~LegoSpecial()
LegoSpecial::~LegoSpecial()
LegoSpecial::SetVisible(int)
LegoSpecial::HasAnimatedVisibility()
LegoSpecial::GetAnimatedVisibility(float)
LegoSpecial::GetAnimFrame()
LegoSpecial::SetFlickerOff(float, float, float, float)
LegoSpecial::Clone(SpecialSystem&, int, NUMTX*, char, bool)
LegoSpecial::MakeUniqueNameAndAddToHashTable()
LegoSpecial::SetPreAnimMtx(NUMTX const*)
LegoSpecial::CanStoreProgress()
LegoSpecial::SetRayCastable(int)
LegoSpecial::WakeUp()
LegoSpecial::GetCollision() const
LegoSpecial::SetCollision(int)
LegoSpecial::GetCollisionMode() const
LegoSpecial::SetCollisionMode(PlaceableBase::COLLISION_MODE)
LegoSpecial::ZeroPhysics()
LegoSpecial::ZeroForces()
LegoSpecial::SetDynamic(bool, bool)
LegoSpecial::OverrideAnimMtx(bool)
LegoSpecial::GetPlatID()
LegoSpecial::AddVelocity(VuVec const&)
LegoSpecial::SetVelocity(VuVec const&)
LegoSpecial::GetVelocity()
LegoSpecial::AddAngVelocity(VuVec const&)
LegoSpecial::SetAngularVelocity(VuVec const&)
LegoSpecial::GetAngularVelocity()
LegoSpecial::ApplyForce(VuVec const&)
LegoSpecial::ApplyTorque(VuVec const&)
LegoSpecial::ApplyForce(VuVec const&, VuVec const&)
LegoSpecial::GetCentre(VuVec&) const
LegoSpecial::GetCentreOfMass(VuVec&) const
LegoSpecial::SetKeyframe(VuMtx const&, float, bool)
LegoSpecial::DriveToMtx(VuMtx const&, float)
LegoSpecial::DrawBounds(unsigned int)
LegoSpecial::DrawBoundsAt(NUMTX*, unsigned int)
LegoSpecial::GetAnimEndFrame()
ProgressMatrix::Get(NUMTX&)
LegoSpecial::AllocateProgress()
LegoSpecialProgress_Anim_Matrix::Serialise(EdStream&)
LegoSpecialProgress_Anim_Matrix::Reset(LegoSpecial&)
LegoSpecial::SetAnimFrame(float, bool)
LegoSpecialProgress_Anim_Matrix::Store(LegoSpecial&)
LegoSpecialProgress_Anim_Matrix::Clear(LegoSpecial&)
LegoSpecialProgress_Anim_NoMatrix::Serialise(EdStream&)
LegoSpecialProgress_Anim_NoMatrix::Reset(LegoSpecial&)
LegoSpecialProgress_Anim_NoMatrix::Store(LegoSpecial&)
LegoSpecialProgress_Anim_NoMatrix::Clear(LegoSpecial&)
LegoSpecialProgress_NoAnim_Matrix::Serialise(EdStream&)
LegoSpecialProgress_NoAnim_Matrix::Reset(LegoSpecial&)
LegoSpecialProgress_NoAnim_Matrix::Store(LegoSpecial&)
LegoSpecialProgress_NoAnim_Matrix::Clear(LegoSpecial&)
LegoSpecialProgress_NoAnim_NoMatrix::Serialise(EdStream&)
LegoSpecialProgress_NoAnim_NoMatrix::Reset(LegoSpecial&)
LegoSpecialProgress_NoAnim_NoMatrix::Store(LegoSpecial&)
LegoSpecialProgress_NoAnim_NoMatrix::Clear(LegoSpecial&)
LegoSpecial::Reset(LegoSpecialProgress*)
LegoSpecial::SetAnimMtxUptoDate(bool)
LegoSpecial::GetPreAnimPosition(VuVec&) const
LegoSpecial::SetPreAnimPosition(VuVec const&)
LegoSpecial::SetPreAnimMtxKeyFrame(NUMTX const*, float)
LegoSpecial::Update(float)
LegoSpecial::PropertyCount(LegoSpecial::LEGOSPECIALPROPERTY)
LegoSpecial::ReallyAddToActiveSpecialList()
CollisionCallBack::AllowCollision(Entity const*, Entity const*)
CollisionCallBack::Collision(BodyPair*, Array<ContactPoint>&)
IsDynoRagdoll(Entity const*)
IsVictimFlattened(MechCharacter*)
CollisionCallBack::Collision(Character*, Entity*, ContactPoint&)
LegoVehicles_IsDynoVehicle(Entity const*)
HandleLegoVehicleFlattening(Entity const*, Entity const*)
CollisionCallBack::Collision(EntityPair*)
CollisionCallBack::CalculatePusherPushType(MechCharacter&, MechCharacter&)
CollisionCallBack::CalculatePusheeResistType(MechCharacter&, MechCharacter&)
CollisionCallBack::CanPush(Character*, Character*)
CollisionCallBack::CanPush(Character*, RigidBody*)
CollisionCallBack::ContactJointCreated(ContactJoint*, ContactPoint*)
CollisionCallBack::RemoveEntity(Entity*)
CollisionCallBack::OverlapBegin(Entity const*, Entity const*)
LegoVehicles_IsDynoVehicle(GameObject*, Entity const*)
LegoSpecial::SetAnimPlaying(int)
LegoSpecial::RequestUpdate(bool)
LegoSpecial::GetAnimPlaying()
LegoSpecial::GetAnimPrevFrame()
LegoSpecial::GetLastEvaluatedAnimFrame()
LegoSpecial::SetAnimRepeating(int)
LegoSpecial::GetAnimRepeating()
LegoSpecial::SetAnimTFactor(float)
LegoSpecial::GetAnimTFactor()
LegoSpecial::SetAnimWaiting(int)
LegoSpecial::SetAnimFParam1(float)
LegoSpecial::GetAnimFParam1()
LegoSpecial::GetUseDrawMatrix()
LegoSpecial::GetAnimDirection()
LegoSpecial::EvalAnim(float, NUMTX*, int, int, int)
LegoSpecial::EvalAnim(float, VuMtx&)
LegoSpecial::EvalAnim2(float)
LegoSpecial::SetAIAvoid(bool)
LegoSpecial::GetNumFrames()
LegoSpecial::WithinAnimFrames(float, float)
LegoSpecial::AcquireForGizmo(Gizmo&)
LegoSpecial::ReleaseForGizmo(Gizmo&)
LegoSpecial::SetMaterialMap(unsigned char, NuSmartPtr<NuMtl, true>*)
LegoSpecial::FindJointByName(char const*) const
LegoSpecialProgress_Anim_Matrix::~LegoSpecialProgress_Anim_Matrix()
LegoSpecialProgress_Anim_NoMatrix::~LegoSpecialProgress_Anim_NoMatrix()
LegoSpecialProgress_NoAnim_Matrix::~LegoSpecialProgress_NoAnim_Matrix()
LegoSpecialProgress_NoAnim_NoMatrix::~LegoSpecialProgress_NoAnim_NoMatrix()
CollisionCallBack::~CollisionCallBack()
CollisionCallBack::DeleteMe()
CollisionCallBack::AddEntity(Entity*)
CollisionCallBack::Moved(Entity*)
CollisionCallBack::OverlapEnd(Entity const*, Entity const*)
CollisionCallBack::ValidateOverlapBegin(Entity const*, Entity const*)
SpecialEventData::~SpecialEventData()
LegoSpecialProgress::~LegoSpecialProgress()
LegoSpecialFlickerAddOn::LegoSpecialFlickerAddOn()
LegoSpecialFlickerAddOn::~LegoSpecialFlickerAddOn()
non-virtual thunk to LegoSpecialFlickerAddOn::~LegoSpecialFlickerAddOn()
LegoSpecialFlickerAddOn::~LegoSpecialFlickerAddOn()
non-virtual thunk to LegoSpecialFlickerAddOn::~LegoSpecialFlickerAddOn()
LegoSpecialFlickerAddOn::CreateID(EdString&, LegoSpecial&)
LegoSpecialFlickerAddOn::CreateAddOn(LegoSpecial&, float, float, float, float)
LegoSpecialFlickerAddOn::DestroyAddOn(LegoSpecial&)
LegoSpecialFlickerAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to LegoSpecialFlickerAddOn::OnHook(unsigned char, HookArgs*)
LegoSpecialFlickerAddOn::Singleton()
SkipPrompt::SkipPrompt()
SkipPrompt::Process()
SkipPrompt::Render()
LegoLoadScreen::FadeInfo::FadeInfo()
LegoLoadScreen::FadeInfo::Reset(float)
LegoLoadScreens::LegoLoadScreens()
LegoLoadScreens::~LegoLoadScreens()
LegoLoadScreens::~LegoLoadScreens()
LegoLoadScreens::ParseCommandLine(int, char**)
LegoLoadScreens::ShouldAddManagersForLevel(MechLevelContainer&)
LegoLoadScreens::SetDemoAdvertRequested(bool)
LegoLoadScreens::GetDemoAdvertRequested()
LegoLoadScreens::CreateLegoLoadScreen(LegoLevelContainer&)
LegoLoadScreens::AddManagersForLevel(LegoLevelContainer&)
LegoLoadScreens::GetDefaultLoadingScreen() const
LegoLoadScreens::IsStartupLoadScreen(StreamingLevel const&) const
LegoLoadScreens::GetLoadingScreen(StreamingLevel const&, CutsceneSeedInfo const**, StreamingLevel**) const
LegoLoadScreen::LegoLoadScreen(LegoLevelContainer&)
LegoLoadScreen::RegisterProcessing()
LegoLoadScreen::RegisterRendering()
LegoLoadScreens::EventNotify(Event&, NuEventData&)
LegoLoadScreen::IsDefaultLoadingScreen() const
LegoLoadScreen::EventNotify(Event&, NuEventData&)
LegoLoadScreen::Load()
LegoLoadScreen::OnLoadScreenLevelInitEvent(StreamingLevelEventData&)
LegoLoadScreen::OnMainLevelInitEvent(StreamingLevelEventData&)
LegoLoadScreen::Unload()
LegoLoadScreen::IsReadyToDeactivate()
LegoLoadScreen::GetDestinationLevel() const
LegoLoadScreen::IsDestinationLevelAllowedToActivate()
LoadScreenCutsceneLayer::OnProcess()
LegoSimpleCutscene::Stop()
LegoSimpleCutscene::Play(bool)
LoadScreenCutsceneLayer::GetCameraSettings(VuMtx&, float&, VuVec&) const
LegoSimpleCutscene::GetCameraSettings(VuMtx&, float&, VuVec&) const
LegoLoadScreen::UpdateSystems() const
LegoLoadScreen::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
HintsOnLoadScreen::RequestSkip()
LegoLoadScreen::RenderHUD()
LegoSimpleCutscene::DrawHud()
LegoLoadScreen::ResetOnScreen(NURENDERSTAGE, LevelViewType, ClassManager::eRenderingPriority const&)
LegoLoadScreen::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoSimpleCutsceneLayer_CreateCallback(CutsceneSeedInfo const&, void*)
LoadScreenCutsceneLayer::Create(LevelContainer&, int)
LoadScreenCutsceneLayer::LoadScreenCutsceneLayer(LevelContainer&, CutsceneSeedInfo const*, CutsceneSeedInfo const*, CutsceneSeedInfo const*)
LoadScreenCutsceneLayer::~LoadScreenCutsceneLayer()
LoadScreenCutsceneLayer::Load()
LegoSimpleCutscene::Load()
LoadScreenCutsceneLayer::Unload()
LegoSimpleCutscene::Unload()
LoadScreenCutsceneLayer::Play()
LoadScreenCutsceneLayer::Stop()
LegoLoadScreen::CanUseHintsAddOn()
LegoLoadScreen::CreateAddOns()
CSListHeader<LoadScreenCutsceneLayer>::Delete(LoadScreenCutsceneLayer*)
LegoLoadScreen::HideLocalisedSpecials()
LegoLoadScreen::IsAStatusScreen() const
LegoLoadScreen::CueMusic(LegoLoadScreen::MusicCueState) const
LegoLoadScreen::Activate()
LegoSimpleCutscene::CueAudio()
LegoLoadScreen::RequestPlayCutscenes()
LegoSimpleCutscene::IsLoopable() const
LegoLoadScreen::Deactivate()
LoadScreenCutsceneLayer::IsOutroComplete() const
LoadScreenCutsceneLayerList::RequestPlayOutros()
LoadScreenCutsceneLayerList::AreOutrosComplete() const
LegoLoadScreen::GetFromDestinationLevel(LevelContainer const&)
LegoSimpleCutscene::LegoSimpleCutscene(LevelContainer&, CutsceneSeedInfo const&)
LegoSimpleCutscene::~LegoSimpleCutscene()
LegoSimpleCutscene::~LegoSimpleCutscene()
LegoSimpleCutscene::RequestSkip()
LegoSimpleCutscene::HasAudioTrackFinished() const
LegoSimpleCutscene::CreateInst()
LegoSimpleCutscene::HideLocalisedSpecials()
LegoSimpleCutscene::OnProcess()
StatusScreenLoadScreen::StatusScreenLoadScreen(LegoLoadScreen&)
StatusScreenLoadScreen::LoadCharacterIcons()
StatusScreenLoadScreen::LoadMiniKits()
StatusScreenLoadScreen::~StatusScreenLoadScreen()
non-virtual thunk to StatusScreenLoadScreen::~StatusScreenLoadScreen()
StatusScreenLoadScreen::~StatusScreenLoadScreen()
non-virtual thunk to StatusScreenLoadScreen::~StatusScreenLoadScreen()
StatusScreenLoadScreen::GetLevelContainer() const
non-virtual thunk to StatusScreenLoadScreen::GetLevelContainer() const
StatusScreenLoadScreen::OnHook(unsigned char, HookArgs*)
StatusScreenLoadScreen::OnInit()
StatusScreenLoadScreen::OnProcess()
StatusScreenLoadScreen::OnUninit()
non-virtual thunk to StatusScreenLoadScreen::OnHook(unsigned char, HookArgs*)
HintsOnLoadScreen::HintsOnLoadScreen(LegoLoadScreen*, MechCharacter*)
HintsOnLoadScreen::OnInit()
HintsOnLoadScreen::GetLevelContainer() const
non-virtual thunk to HintsOnLoadScreen::GetLevelContainer() const
HintsOnLoadScreen::OnHook(unsigned char, HookArgs*)
HintsOnLoadScreen::OnProcess()
HintsOnLoadScreen::OnRenderPanel()
HintsOnLoadScreen::OnDeactivate()
HintsOnLoadScreen::OnUninit()
non-virtual thunk to HintsOnLoadScreen::OnHook(unsigned char, HookArgs*)
HintsOnLoadScreen::~HintsOnLoadScreen()
non-virtual thunk to HintsOnLoadScreen::~HintsOnLoadScreen()
non-virtual thunk to HintsOnLoadScreen::~HintsOnLoadScreen()
LegoLoadScreen::~LegoLoadScreen()
LegoLoadScreen::~LegoLoadScreen()
LegoLoadScreens::ShouldShowDefaultLoadingScreenIfLevelLoaded(StreamingLevel const&) const
LegoSimpleCutscene::GetSeedInfo() const
LegoSimpleCutscene::IsSkippable() const
LegoSimpleCutscene::IsFinished() const
LegoSimpleCutscene::GetCutsceneResourcePacket()
LegoSimpleCutscene::GetCutsceneSequenceTimer()
OverrideAreaLoadingScreenEventData::~OverrideAreaLoadingScreenEventData()
LevelLoader::~LevelLoader()
GameShouldBeActive()
LevelLoader::IsGotoLevelRequested() const
LevelLoader::SetupFadeSystem()
LevelLoader::GetActiveMasterWorldInfo() const
LevelLoader::GetDestinationLevel() const
LevelLoader::IsGoingToNotLoadedLevel() const
LevelLoader::IsGoingToLevelInOtherArea(LevelLoader::IsGoingToLevelInOtherAreaMode) const
LevelLoader::RequestGotoCurrentLevel_Internal()
LevelLoader::GetActiveMasterLevelContainer() const
LevelLoader::GetDestinationStreamingLevel() const
LevelLoader::GetDestinationLevelId() const
LevelLoader::ShouldUnloadAllLevels(StreamingLevel const&)
LevelLoader::IsLevelBeingPlayed(StreamingLevel const&) const
LevelLoader::IsGoingToLevelWithFlag(unsigned long) const
LevelLoader::OverrideGotoLevelRequest(LEVELDATA const&, LEVELDATA const*&, bool&) const
LevelLoader::RequestGotoLevel_Internal(int, bool)
LevelLoader::IsLevelBeingPlayed(LEVELDATA const&) const
LevelLoader::IsGoingToLevelInArea(AREADATA const&) const
LevelLoader::IsGoingToLevelInNoArea() const
LevelLoader::IsGoingToLevelInOtherEpisode() const
LevelLoader::IsGoingToLevelWithAreaFlag(unsigned int) const
LevelLoader::IsComingFromLevelWithAreaFlag(unsigned int) const
LevelLoader::IsLevelLoaded(LEVELDATA const&, LegoLevelContainer**) const
LevelLoader::IsLevelBeingPlayed() const
LevelLoader::IsGoingToLoadedLevel(LegoLevelContainer**) const
LevelLoader::IsGoingToLoadingLevel() const
LevelLoader::DoForEachLevelContainer(LevelContainerLoopResult (*)(LegoLevelContainer const&, void*), void*, bool) const
LevelLoader::DisableLevelStreaming()
LevelLoader::~LevelLoader()
LevelEventData::~LevelEventData()
Level_RegisterGameConfigKeywords(nufpcomjmp_s*, nufpcomjmp_s*)
LEVELDATA::GetParentLevelOrSelf() const
LEVELDATA::ImportDataIntoStreamingManager(bool)
Levels_ConfigureList(char const*, int, int*)
LegoArrayBuilder<LEVELDATA>::Finalise(int&, FinaliseMode)
Level_FindByName(char const*, int*)
Level_FindByNameN(char const*, int, int*)
Level_FindById(int)
Level_FindByFlags(unsigned long, unsigned long, int*)
Level_FindIndexByName(char const*, LEVELDATA*, int)
Levels_FixUp(LEVELFIXUP*)
LevelConfig_BeforeLoad(WORLDINFO*, LEVELDATA*, char*, nufpcomjmp_s*, nufpcomjmp_s*)
LevelConfig_MidLoad(WORLDINFO*, LEVELDATA*, char*, nufpcomjmp_s*, nufpcomjmp_s*)
LevelConfig_AfterLoad(WORLDINFO*, LEVELDATA*, char*, nufpcomjmp_s*, nufpcomjmp_s*)
LevelConfig_Audio(WORLDINFO*, LEVELDATA*, char*)
LevelSplines_InitForGame(LEVELSPLINE*)
LevelSplines_InitForLevel(WORLDINFO*)
LevelObjects_InitForGame(LEVELOBJECT*, int, int)
LevelObject_AddExtra(char*, int)
LevelObjects_InitForLevel(WORLDINFO*)
LevelObject_FindIndexFromName(char*)
LevObj_FixUpPlatIDs(WORLDINFO*)
LevObj_FindByPlatID(WORLDINFO*, int)
LevelObject_FindNameFromIndex(int)
LevelObject_GetReflection(int)
LevelObject_FindIndexFromName_RefOnly(char*)
Level_LoadConfigFile(WORLDINFO*, char*, bool, bool, nufpcomjmp_s*)
Level_Update(WORLDINFO*)
Level_Draw(WORLDINFO*)
CompleteLevel(WORLDINFO*)
NewLevelFromMenu(WORLDINFO const&, LEVELDATA const*, int, int, int)
GetGotoLevelCursorY(WORLDINFO&)
MenuUpdateGotoLevel(MENU*)
MenuDrawGotoLevel(MENU*)
MenuUpdateInGameGotoLevel(MENU*)
MenuDrawInGameGotoLevel(MENU*)
MenuExitInGameGotoLevel(MENU*)
KillBossNewLevel(int, int, float, int)
KillBossPlayCutScene(int, int, float, char*)
SetSockLevelList(SOCKLEVELNAME*)
FixUpSockLevelList()
ShouldShowLevelName(WORLDINFO&)
LevelName_Draw(WORLDINFO&)
Level_IsOnAreaGuestList(LEVELDATA const*, AREADATA const*)
Level_GetNextInAreaOrder(int, bool, bool)
SetNewGameLevel()
LevelProgress_Store(WORLDINFO*, int)
LevelScripts_StoreProgress(WORLDINFO*, LEVEL_PROGRESS_s*)
LevelScript_RestoreProgress(WORLDINFO*, LEVELSCRIPTPROCESS*)
Level_ConfigurePlayersAndResidents(WORLDINFO&, char*, int)
Levels_CompleteAllTrueHeroes(LEVELSAVE*)
FindLevelBestTime(LEVELDATA*, LEVELDATA*, LEVELDATA**)
UpdateLevelBestTime(LEVELDATA*, LEVELDATA*)
WorldInfo_InitMenu_GENERIC(WORLDINFO*, int*, int*)
Levels_OpenAll()
CMList<LEVELDATA*>::Insert(LEVELDATA* const&, CMList<LEVELDATA*>::ListLink*)
CMList<LEVELDATA*>::Delete(CMList<LEVELDATA*>::ListLink*)
CMList<LEVELDATA*>::Append(LEVELDATA* const&, CMList<LEVELDATA*>::ListLink*)
GetPanelLightState(float, NuLightState&)
LoadLights(WORLDINFO*, char*)
IsFlying(GameObject*)
SetupCreatureLights(MechCharacter*)
EnableShadowMapRendering(int)
ResetShadowMapRendering()
SetShadowLight(WORLDINFO&)
ResetShadowMapRenderingFn()
EnableShadowMapRenderingFn()
LightningManager::Lightning_Dump(WORLDINFO*)
LightningManager::Lightning_Configure(WORLDINFO*, char*)
LightningManager::AddFlash(int)
LightningManager::LightningManager()
LightningManager::Init()
LightningManager::~LightningManager()
LightningManager::Destroy()
LightningManager::Reset()
LightningManager::AddSpecial(WORLDINFO*, char*)
LightningManager::AddSyncSpecial(WORLDINFO*, char*)
LightningManager::AddCutsceneFrame(int)
LightningManager::AddCutsceneFrame(int, nuhspecial_s*)
LightningManager::SelectRandomSpecial()
LightningManager::CreateCutsceneFlash(LIGHTNING_FRAME_S*)
LightningManager::CreateFlash(int, int)
LightningManager::CreateFlash(int, int, int)
LightningManager::Finished()
LightningManager::SetAutomate(int)
LightningManager::Automate()
LightningManager::CutsceneUpdate()
LightningManager::Update()
LightningManager::Draw()
Menu_GetHostWorldInfo(MENU*)
Menu_PlaySfx(MENU*, SFXTypeID&, NUVEC*, NuSoundHandle*, float, float, int, int)
Bolt_PlaySfx(Bolt*, SFXTypeID&, NUVEC*, NuSoundHandle*, float, float, int, int)
ReadMenuPad(MENUPAD*, LegoGamePad*, int, float, float, int, int, int)
GameDrawMenuEntry(MENU*, char const*)
GetParentMenuID()
MenuHasParentWithId(int)
MakeMenuPacket(bool, int)
MenuRestart(WORLDINFO*, NUVEC*, NUVEC*, unsigned short*, unsigned short*)
MindControl_FindTgtPos(MechCharacter*, NUVEC*)
MindControl_DrawLightning(WORLDINFO*, GameObject*, NUVEC*, NUVEC*, float)
SetCutTime(float)
MiniCam_SetCutRotZ(int)
MiniCam_GetGizmoMiniCut()
MiniCam_EndStage(int)
MiniCam_InitializePerm()
Minicam_ResetSystem()
CheckForDisablingMovementDuringMiniCut()
MiniCam_GetTargetPlayer()
MiniCam_AllowPlayerControl()
MiniCam_ResetTargetPlayer()
MiniCam_SetTargetPlayer(int)
MiniCam_HasPlayerTarget()
MiniCam_GetPlayerTargetIndex()
MiniCam_IsPlayerTarget(int)
MiniCam_AllowPlayerControl(int)
MiniCam_SetAllowPlayerControl(bool)
Minicam_AddSubtitle(MinicutSubtitle const&)
Minicam_AddCommand(MINICAM_COMMAND, MinicamParam_s, int)
Minicam_DrawPanel()
Minicam_Update(GAMECAMERA&, LevelContainer const&)
Minicam_UpdateInternal(GAMECAMERA&, LevelContainer const&)
Minicam_ClearDeltas()
MiniCam_ChangeMode(int)
Minicam_AddDeltas(float, bool)
Minicam_CalcCamPos()
Minicam_ResetForNextCommand()
MiniCam_GetCutTime()
Minicam_ResetForNewCut()
GameCameraMakeMiniCut3(unsigned int, float, int, int, int, NUVEC const*, int, NUVEC*, float, float, float, float, float, float, float, int, NuSpline*, char, char, int, int, GizmoMiniCut*, int, bool, float)
GameCameraMakeMiniCut2(NUVEC*, NUVEC*, int, float, float, float, float, int, int, int)
GameCameraMakeMiniCut(NuSpline*, float, float, float, float, int, int)
MiniKits_Init()
MiniKit_Load(MINIKIT*, int, NUPAKFILEHNDL const&, unsigned char)
MiniKit_InitPieces(MINIKIT*, int)
CharMiniKit_Draw(int, NUMTX*, int, float, float)
CharacterMiniKits_Load(COLLECTION*, WORLDINFO*)
CharacterMiniKits_Dump(WORLDINFO*)
CollectAllMiniKits(AREASAVE*, unsigned char*)
AllMiniKitsDone(AREASAVE*, unsigned int)
MiniKit_GetAreaCollected(WORLDINFO*)
MiniKit_GetAreaCollected_ByAreaIx(unsigned char)
MiniKit_GetAreaTotal(WORLDINFO*)
MiniKit_GetAreaTotal_ByAreaIx(unsigned char)
DrawMiniKitCount(WORLDINFO&, float, float, int, int)
DrawMiniKitCount(WORLDINFO&, float, float, float, float, float, float, int, int)
MiniKit_GameMsg_Update(GAMEMESSAGE*)
MiniKit_GameMsg_Draw(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
MiniKit_GameMsg_End(GAMEMESSAGE*)
MiniKits_ResetGameMessages()
MiniKits_SaveNewPieces(int)
CharacterSuperKits_Dump(WORLDINFO*)
CollectMinikit(WORLDINFO*, NUVEC*, char*, unsigned short, int)
FindTrailer(char*)
AddTrailer(char*)
Movie_MakeFileNames(char*, char*, char*)
Movie_Play(char*, float, float, int, bool)
FMVSubtitleDrawer::DrawSubtitles(float)
MovingCharacterIcon::InitializePerm()
MovingCharacterIcon::SetCharacterId(LevelContainer const&, int, MovingCharacterIconUse)
MovingCharacterIcon::SetCharacterId(LevelContainer const&, int)
MovingCharacterIcon::SetIconLayers(long const&)
MovingCharacterIcon::IsMinifig() const
MovingCharacterIcon::RenderImpostorCallback(void*, NURENDERSTAGE)
MovingCharacterIcon::DeactivateLevel(WORLDINFO&)
MovingCharacterIcon::RenderMask(VuMtx&)
MovingCharacterIcon::Render(int, float, float, float, float, float)
MovingCharacterIcon::Render(float, float, float, float, float) const
MovingCharacterIcon::RenderToTexture()
MovingCharacterIcon::Update(WORLDINFO&, float)
MovingCharacterIcon::GetCameraOffsetFromGCData(VuVec&, int&) const
MovingCharacterIcon::GetCameraMatrix(VuMtx&, float) const
DrawShadowText(char const*, float, float, int, float)
Options::operator!=(Options&)
Options::ToggleVibration(int)
Options::ToggleSurround()
Options::ToggleSaving_on()
Options::TogglePrompts()
Options::ToggleInvertYAxis()
Options::ToggleMusic_on()
Options::ToggleHintAudio_on()
Options::ToggleVSync()
Options::ToggleSubtitles_on()
Options::AdjustSFX_volume(char)
Options::AdjustMusic_volume(char)
Options::AdjustAudio_volume(char)
Options::AdjustSafeZone(float)
Options::AdjustBrightness(char)
OptionsListener::OptionsListener()
OptionsListener::EventNotify(Event&, NuEventData&)
OptionsListener::~OptionsListener()
Panel::PowerUp_GetPanelY(int)
Panel::DoubleScoreAlpha()
Panel::Panel()
Panel::ClearPanelElements()
Panel::InvadePanelElements(float, float, float)
PanelElement::Invade(float, float, float)
Panel::UpdatePanelElements()
PanelElement::Update()
Panel::RegisterPanelElement(PanelElement*)
Panel::SetCustomPromptRGB(int*, int*, int*, bool)
Panel::DrawPlayerIconPrompts(int, int, float, int, int, int, int, int, int, float, int, int, int, int, bool, bool)
Panel::AdjustSuperStoryTimeY(WORLDINFO&, float*)
Panel::DrawSuperStoryTime(float, float, float, int, int, float)
Panel::DrawHitPoints(MechObjectInterface&, float, float, float, float, int, float, int, HEARTPOS*)
Panel::DrawBonusScore(WORLDINFO&, float, int, int, float, int const*)
Panel::ExitLevel()
Panel::Panel_Clear()
PanelGoalIconClick::Reset()
Panel::SetCompleteMask(int)
GetGoalIconInfo(WORLDINFO&, float*)
GetBossHeartInfo(WORLDINFO&, float*, float*)
Panel::DrawBossHitPointsFn(MechCharacter*, MechCharacter*)
Panel::DrawBossHitPoints(MechCharacter*, MechCharacter*, bool)
Panel::SetupPanelElements()
PanelElement::SetDimensions(float, float, float, float)
PanelElement::SetEnabled(bool)
Panel::EnableCharacterPurchaser(int)
Panel::DisableCharacterPurchaser(int)
Panel::DrawMeleeTargets(WORLDINFO&, short*, char*, float*, int)
Panel::DrawTimer(int, int, int)
Panel::UpdateAspect(unsigned char)
Panel::PanelRender(WORLDINFO&)
Panel::DrawSafeArea()
Panel::EventNotify(Event&, NuEventData&)
PanelElement::PanelElement(char const*)
Panel::DrawCharacterCollection(WORLDINFO*, int, short*, char*, nuhspecial_s*, int, int, int)
PanelGoalIconClick::StartFadeIn(unsigned short)
Panel::AdjustForComplete(short, unsigned short, float&, float&, bool&, bool)
Panel::DrawIconCluster(WORLDINFO&, short, float, float, float, float, float, bool, bool, nuhspecial_s*)
Panel::DrawIconCluster(WORLDINFO&, short, float, float, float, float, bool, bool, nuhspecial_s*)
Panel::DrawItemCollection(WORLDINFO*, int, short*, char*, nuhspecial_s*, int, int, nuhspecial_s*, int)
Panel::DrawIcon(WORLDINFO&, short, float, float, float, float, nuhspecial_s*)
Panel::TriggerCharacterCollection(int)
Panel::UpdateCharacterCollection()
PanelGoalIconClick::Update(float)
PanelGoalIconClick::Start(unsigned short)
Panel::IsCollectingCharacter()
PanelElement::Alpha() const
PanelGoalIconClick::PanelGoalIconClick()
PanelGoalIconClick::SetState(PanelGoalIconClick::ClickState)
GetTrueHeroY(float)
GetTrueHeroY(float, float, float)
ReallyInWideScreen()
Panel::~Panel()
Panel::GetManagerName() const
Panel::GetPanelY()
InitPartTable(char const**)
PartDebSys_Dump(WORLDINFO*)
LoadPartFile(WORLDINFO*)
Parts_Start(WORLDINFO*)
Parts_Stop(WORLDINFO*)
AddPartDebris(PARTDEBSYS_s*, int, NUVEC const*)
PartImpact_Brick(PART*)
PartDraw_NotInCutscenes(PART*)
PartStop_Flickerer(PART*)
PartDraw_Flickerer(PART*)
FindIncomingPart(void*, NUVEC const*, float, unsigned int, float)
MakePartVector(NUVEC*, NUVEC*, float)
TargetPart(MechCharacter*, NUVEC*, NUVEC*, float, float, int, BoltTypeID const&)
Part_FindFromHSpecial(nuhspecial_s*)
PartDraw_LayerPartsFlickerer(PART*)
PartMove_None(PART*, float)
KillPartsArgs::KillPartsArgs()
CreateKillParts(CharDefResourceHndl const&, LevelContainer const&, NUMTX const&, int, float, int, float, float, KillPartsArgs const&, NuVector<PART*>*)
CreateKillParts(CharInst const&, KillPartsArgs const&, NuVector<PART*>*)
PartCollide_2D(PART*)
PartCollide_3D(PART*)
NuVector<PART*>::Reserve(unsigned int, bool)
GetPlayer1()
GetPlayer2()
GetOtherPlayer(MechCharacter*)
GetNearestPlayer(VuVec const&)
GetNearestPartyMember(VuVec const&)
GetNearestCameraFocusChar(VuVec const&)
PlayerData::PlayerData()
PlayerData::Reset()
PlayerData::SetIDs(int)
PlayerData::SetPlayerIDByType(PlayerDataMgr::eID_TYPE)
PlayerData::GetIDByType(PlayerDataMgr::eID_TYPE)
PlayerDataMgr::PlayerDataMgr()
PlayerDataMgr::~PlayerDataMgr()
PlayerDataMgr::InitUIColours()
PlayerDataMgr::InitOnce()
PlayerDataMgr::SetNumPlayers(int)
PlayerDataMgr::SetDefaultPlayerIDs(short*, int)
PlayerDataMgr::SetAllPlayerIDs()
PlayerDataMgr::RememberPlayerIDs(WORLDINFO*, int, short*, int)
PlayerDataMgr::StorePlayerIDs(WORLDINFO*, int, short*, int)
PlayerDataMgr::RememberPlayerIDs(WORLDINFO*, int)
PlayerDataMgr::DoesIDExist(int, PlayerDataMgr::eID_TYPE, int)
PlayerDataMgr::IDsAreEqual(int, int, int)
PlayerDataMgr::GetPlayerDataByIndex(int)
PlayerDataMgr::GetPlayerDataIndex(PlayerData const&)
PlayerDataMgr::SetPlayerIDsByLevelType()
PlayerDataMgr::SwitchCharactersByIDType(PlayerDataMgr::eID_TYPE)
PlayerDataMgr::AllPlayersInactiveForTimePeriod(float)
PlayerDataMgr::AllPlayersWithinPlayerControl()
PlayerDataMgr::GetFirstActivePlayer() const
PlayerDataMgr::GetClosestPlayerXZDistToPosSqr(NUVEC const&, float&)
PlayerDataMgr::GetNumActivePlayers()
PlayerDataMgr::GetClosestPlayerDistToPosSqr(NUVEC const&, float&)
PlayerDataMgr::DrawPlayerIDs()
Players_GetDestinationSubLevelDoorManager(WORLDINFO&, WORLDINFO*&)
Players_InitPositions(WORLDINFO*, NUVEC*, NUVEC*, unsigned short*, unsigned short*, int)
Player_FindByID(int)
Player_StartPos(MechCharacter*)
Player_NewStartPos(MechCharacter*)
Players_AveragePos(WORLDINFO&, NUVEC*, SOCKPOSITION*)
Players_NumberOfActivePlayers()
Players_AverageCamFocusPos(WORLDINFO&, VuVec&)
Players_MinMaxScreenDepth(WORLDINFO&, NUVEC const*, NUVEC const*, float&, float&)
SetPlayer()
CanWearHatsInFreePlay(int)
CanPullLevers(int)
Player_ClearContext(MechCharacter*, int)
Player_ResetContexts(MechCharacter*)
SetPlayerControl(MechCharacter*, bool, bool)
MovingBackwards(MechCharacter&)
DoPushAway(MechCharacter&, NUVEC const*, float, NUVEC*, NUVEC*, MechCharacter**, int, float, unsigned int)
PushAway(NUVEC const*, float, NUVEC*, NUVEC*, MechCharacter*, MechCharacter**, int, float, unsigned int)
FindNearestPlayerToVec(NUVEC*, MechCharacter**, float&, bool, unsigned int)
FindFurthestPlayerFromVec(NUVEC*, MechCharacter**, float&, bool, unsigned int)
Player_ToggleCharacter(MechCharacter*, int, int)
PlayerToggle_UpdateHint(WORLDINFO*, HINT_s*)
PlayerToggle_AddDebris(MechCharacter*, NUVEC*)
Players_BothActive()
Players_GetRandomActivePlayer()
Players_WhipTied()
Player_HasInvincibility(MechCharacter*)
Player_HasFastBuild(MechCharacter*)
Player_HasDoubleBoltDamage(MechCharacter*)
Player_HasDoubleBoltDamage_FromBolt(Bolt*)
Player_HasDoubleWeaponDamage(MechCharacter*)
Player_HasFastDig(MechCharacter*)
Player_HasFastFix(MechCharacter*)
ActivePlayerInRange(NUVEC const*, float, float*)
AvailableToPlayer(unsigned int, unsigned int, unsigned int, int, int (*)(GAMECHARACTERDATA*), int)
ObjLiftHover(MechCharacter*)
GetMaxHitPoints(MechCharacter*)
SetHitPoints(MechCharacter*, int)
Players_UpdateHitPoints()
LoseHitPoints(MechCharacter*, int)
LoseHitPoints_Internal(MechCharacter*, int)
Player_BlipHearts(MechCharacter*, int, int, int)
BusStop_InitMaxPartySize(unsigned char)
BusStop_FixUpPlayers()
BusStop_GetMaxPartySize()
BusStop_GetPartyCharacter(unsigned char)
BusStop_Reset()
BusStop_GetPartyCounter(MechCharacter*)
BusStop_GetPlayerTakeOverChild(MechCharacter*)
BusStop_GetPlayerTakeOverParent(MechCharacter*)
BusStop_PlayerTagged(MechCharacter*, MechCharacter*)
BusStop_Update()
BusStop_CheckForErrors()
Players_ClearCoins()
FixupTaggableObjs()
CollectionBased_SetIsTaggable(MechCharacter*)
DoomedRecovery(MechCharacter&)
Player_UpdateOnPlayerArray()
PowerUp_Reset()
PowerUp_Start(NUVEC*, MechCharacter*, GIZMOPICKUPTYPE*)
PowerUp_Active(int)
PowerUp_GlobalUpdate(WORLDINFO&)
PowerUp_PlayerUpdate(GameObject*)
PowerUp_Particles(NUVEC*)
PowerUp_AddPart(WORLDINFO&, NUVEC const*, NUVEC*, float, bool, int)
PowerUp_InitOnce()
PowerUp_GetPanelY(int)
PowerUps_UpdatePanel(int)
PowerUp_Collect(MechCharacter*, NUVEC*, unsigned short, int, int)
PowerUp_CollectPickup(WORLDINFO*, GizmoPickup*, int, GameObject*, bool, int)
PowerUp_UpdatePickup(WORLDINFO*, GizmoPickup*)
PowerUps_DrawPlayerPanel(GameObject*, float)
SSHandle_CalculateGoodPosition(FirstPointCollector*, MechCharacter*)
GetPushObstCaptureRange2(WORLDINFO*)
Pushing(MechCharacter*, unsigned short*, eSURFACE*, int*, int, FirstPointCollector&)
CheckPushObstHelp(GizmoObstacle*)
SetPushAngle(MechCharacter*)
FindPotentialHandleInGameAnimSet(GameAnimSet*, int, int, int)
Push_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
WallJumpWait_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
UpdateWallPosition(WORLDINFO*, VuVec&, VuVec&, int, bool)
PushCode(MechCharacter*, int)
ReleasePush(MechCharacter*)
WallShuffle_GetSpeed(MechCharacter*, float*, int)
WallShuffle_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
DrawPushObstHelpMsg(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
AddSuperStrengthArrowMsg(MechCharacter*, NUVEC*, float)
ResetPushObstHelp()
PushObstHelp_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
EntityList_Cast(Array<Entity*> const&, DynoRay&, FirstPointCollector&)
PushObstHelpCode(MechCharacter*, LegoGamePad*)
IsScreenGrabAvailable()
IsDrawingStillScreen()
NoRender()
FinishLoop()
FadeLoop_SetObj(NuSmartPtr<NuScene, true>, char*)
FadeLoop_UsingObj()
FadeLoop_DrawObj(float)
CreateFadeMaterials()
BackDrop_ResetColours()
BackDrop_UpdateColours(int)
DrawParallax(WORLDINFO*, nuhspecial_s*)
DrawSeaCut(nuhspecial_s*, nuhspecial_s*, float)
GameDisplaySettings(WORLDINFO&, LEVELDATADISPLAY*, int*)
WidescreenCode(int)
ClampPointToSafeArea(NUVEC*, NUVEC*)
KeepPointOnScreen(NUVEC*, NUVEC*, MechCharacter*)
DrawPauseScreenWipe()
GetPauseMtl2d()
StillMemRestore()
GrabStillScreen()
NeedScreenGrab(int)
IsGrabbingScreen()
DrawStillScreen(int)
GetPauseMtl3d()
DrawPauseFade()
UpdateStillRender(WORLDINFO*)
ShouldDrawPauseScreenGrab()
HandleStillRender()
DrawFadeScreenWipe()
GetPauseMtl2dBlended()
GetPauseTextureId()
InitStillRender()
ShoveObjectSysReset()
AddShoveObject(LegoSpecial*, long)
AddShoveObjectPos(NUVEC*, float)
ShoveSystemCheckGameObject(GameObject*)
SpecialMove_EndContext(MechCharacter&)
SpecialMove_TurningCircle(MechCharacter*)
SpecialMove_IsInMultiPhase(MechCharacter*)
SpecialMove_MultiPhaseIs(MechCharacter*)
SpecialMove_AdjustLayerBits(MechCharacter*, long&)
SpecialMove_CanTagOut(MechCharacter*)
SpecialMoves_ParseFlag(char const*, unsigned long&)
SpecialMoves_Configure(char const*, SPECIALMOVEFIXUP_s*)
LegoArrayBuilder<SPECIALMOVE>::Finalise(int&, FinaliseMode)
SpecialMove_CanAttackerMove(MechCharacter*, bool)
SpecialMove_IsAttackersAnimLooping(MechCharacter&)
SpecialMove_IsVictimsAnimLooping(MechCharacter&)
SpecialMove_SetNewAction(MechCharacter&)
SpecialMove_GetAttackerAction(int)
SpecialMove_GetVictimAction(int)
SpecialMove_GetDistanceApart(int)
SpecialMove_GetVictimCollisionLocator(int)
SpecialMove_GetVictimOffsetY(int)
SpecialMove_Enable(int, bool)
SpecialMove_GetAttackerSpeedXZ(int, float*, float*)
SpecialMove_GetVictimSpeedXZ(int, float*, float*)
SpecialMove_GetFpsMul(MechCharacter&)
SpecialMove_UseTurningCircle(MechCharacter*)
SpecialMove_GetFlags(int, unsigned long)
SpecialMove_SetFlags(int, unsigned long)
SpecialMove_VictimIgnoreAttacks(MechCharacter*)
SpecialMove_KeepVictimStationaryInitially(MechCharacter*)
SpecialMove_CalcVictimOffset(int, MechCharacter*, NUVEC*)
SpecialMove_Check(MechCharacter*, MechCharacter*, unsigned long, int)
SpecialMove_Start(MechCharacter*, MechCharacter*, int, int)
SpecialMove_StartTargeting(MechCharacter&)
PairedMove_SetDistanceBetweenCharacters(MechCharacter*, MechCharacter*, float, float, int)
SpecialMove_ReleaseVictim(MechCharacter*, unsigned long)
SpecialMove_Cancel(MechCharacter*)
SpecialMove_DisarmVictim(MechCharacter*, MechCharacter*, int, LegoInventoryItem*)
SpecialMove_VictimCode(MechCharacter*)
SpecialMove_LaunchObj(MechCharacter*, MechCharacter*)
SpecialMove_ThrowVictim(MechCharacter*)
SpecialMove_Obstacle_GetAbsTargetPos(GizmoObstacle*, NUVEC*, float*)
SpecialMove_Attacker_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
SpecialMove_GetStartDistanceBetweenChars(int, MechCharacter&, MechCharacter&, VuVec*)
SpecialMove_Victim_GetDrawOffset(MechCharacter*, NUVEC*)
SpecialMove_Victim_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
SpecialMove_GetGaps(MechCharacter*, float*, float*, float*, unsigned long)
SpecialMove_CheckAndStart(MechCharacter*, MechCharacter*, int, int)
SpecialMove_CollideCode(MechCharacter*, MechCharacter*)
SpecialMove_TrackRootRotation(MechCharacter*)
SpecialMove_MoveCode(MechCharacter*, int, int, float)
SpecialMove_TargetCode(WORLDINFO*, MechCharacter*)
WaggleFree_Code(MechCharacter*, int, float)
TugOfWar_Code(MechCharacter*, MechCharacter*)
SpecialMove_GetBothParties(MechCharacter*, MechCharacter**, MechCharacter**)
SpecialMove_GetFromIndex(int)
SpecialMove_GetAttackersMove(MechCharacter&)
SpecialMove_GetVictimsMove(MechCharacter&)
SpecialMove_GetNumSpecialMoves()
SpecialMove_GetFromActions(short, short)
SpecialMove_GetIndexFromActions(short, short)
SpecialMove_CheckCharacterInclude(int, int)
SpecialMove_ActivateLevel()
SpecialMove_Find(HashedKey const&)
PairedMove_MaintainDistanceBetweenCharacters(MechCharacter*, MechCharacter*, float, int)
PairedMove_End(MechCharacter*)
PairedMove_RemovePointersToGameObject(MechCharacter*)
SpecialMove_RegisterContexts()
MechContext* MechContextConstructor<SpecialMoveAttackerContextHandler>(MechCharacter&)
MechContext* MechContextConstructor<SpecialMoveVictimContextHandler>(MechCharacter&)
SpecialMoveAttackerContextHandler::SpecialMoveAttackerContextHandler(MechCharacter&)
SpecialMoveAttackerContextHandler::~SpecialMoveAttackerContextHandler()
SpecialMoveAttackerContextHandler::~SpecialMoveAttackerContextHandler()
SpecialMoveAttackerContextHandler::InitFlags()
SpecialMoveAttackerContextHandler::OnEnter(LevelContainer*)
SpecialMoveAttackerContextHandler::OnProcess(LevelContainer*, float)
SpecialMoveAttackerContextHandler::OnLeave()
SpecialMoveAttackerContextHandler::AllowLeave(int, MechContext*)
SpecialMoveAttackerContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
SpecialMoveVictimContextHandler::SpecialMoveVictimContextHandler(MechCharacter&)
SpecialMoveVictimContextHandler::~SpecialMoveVictimContextHandler()
SpecialMoveVictimContextHandler::~SpecialMoveVictimContextHandler()
SpecialMoveVictimContextHandler::InitFlags()
SpecialMoveVictimContextHandler::OnEnter(LevelContainer*)
SpecialMoveVictimContextHandler::OnProcess(LevelContainer*, float)
SpecialMoveVictimContextHandler::OnLeave()
SpecialMoveVictimContextHandler::AllowLeave(int, MechContext*)
SpecialMoveVictimContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoContextHandlerBase<SpecialMoveAttackerContextHandler>::GetInstanceId() const
LegoContextHandlerBase<SpecialMoveVictimContextHandler>::GetInstanceId() const
SpecialMoveCustomCollector::SetWorldHitData(float, Geom const*, VuVec const&, VuVec const&)
SpecialMoveCustomCollector::~SpecialMoveCustomCollector()
CMList<SPECIALMOVE*>::Append(SPECIALMOVE* const&, CMList<SPECIALMOVE*>::ListLink*)
LegoContextHandlerBase<SpecialMoveAttackerContextHandler>::~LegoContextHandlerBase()
LegoContextHandlerBase<SpecialMoveVictimContextHandler>::~LegoContextHandlerBase()
LegoSpecialHashMapKeyIString::LegoSpecialHashMapKeyIString()
LegoSpecialHashMapKeyIString::LegoSpecialHashMapKeyIString(char const*)
LegoSpecialHashMapKeyIString::LegoSpecialHashMapKeyIString(LegoSpecialHashMapKeyIString const&)
LegoSpecialHashMapKeyIString::operator==(LegoSpecialHashMapKeyIString const&) const
LegoSpecialHashMapKeyIString::Hash() const
SpecialSystem::SpecialSystem(LegoLevelContainer const&)
SpecialSystem::~SpecialSystem()
SpecialSystem::DestroyTemporaryLED()
SpecialSystem::UnloadLevel()
SpecialSystem::GetFrom(LevelContainer const&)
SpecialSystem::Update()
SpecialSystem::AllocateProgress(WORLDINFO*, int)
SpecialSystem::StoreProgress(SpecialSystemProgress*)
SpecialSystem::ClearProgress(SpecialSystemProgress*)
SpecialSystem::SetupTemporaryLED(LevelContainer*, EDSCENE_FLAGS)
SpecialSystem::Redraw() const
SpecialSystem::DrawSpecialNames(int) const
SpecialSystem::Reset(SpecialSystemProgress*)
SpecialSystem::CreateSpecial4Framework(void*, EdClass*, bool)
SpecialSystem::CopySpecial(LegoSpecial&, NUMTX*, Gizmo*, char, bool)
SpecialSystem::CreateNewSceneObjectAndLegoSpecial(nuhspecial_s&, char const*)
SpecialSystem::FindSpecialInstance(LegoSpecial*, Gizmo*)
SpecialSystem::FindSpecialInstance(char const*, Gizmo*)
SpecialSystem::Find_N_SpecialInstance(char const*, LegoSpecial**, int)
SpecialSystem::FindNearestSpecial(VuVec const&, float&, bool)
SpecialSystem::HashMapLookUp(char const*)
NuHashMap<LegoSpecialHashMapKeyIString, LegoSpecial*>::Find(LegoSpecialHashMapKeyIString const&) const
SpecialSystem::FindSpecialWithHashMapOnly(char const*, bool, bool)
SpecialSystem::FindSpecial(char const*, bool, bool)
SpecialSystem::FindSpecialWithStringOnly(char const*, bool, bool)
SpecialSystem::FindSpecial(HashedKey const&, bool)
SpecialSystem::FindSpecialFromNUHSPECIAL(nuhspecial_s*, bool)
SpecialSystem::FindSpecial(SceneObject const*)
SpecialSystem::GetNearestSpecialInstance(NUVEC*, float*)
SpecialSystemProgress::SpecialSystemProgress(SpecialSystem*, WORLDINFO*, int)
SpecialSystemProgress::~SpecialSystemProgress()
SpecialSystemProgress::~SpecialSystemProgress()
LegoSpecialSystem::LegoSpecialSystem()
LegoSpecialSystem::Collision(MechCharacter&, Entity*, ContactPoint&)
LegoSpecialSystem::FindSpecial(LevelContainer&, char const*)
LegoSpecialSystem::Init()
void* Constructor<LegoSpecialFlickerAddOn>()
LegoSpecialSystem::EventNotify(Event&, NuEventData&)
SpecialSystem::AddToHashMap(char const*, LegoSpecial*)
NuHashMap<LegoSpecialHashMapKeyIString, LegoSpecial*>::Insert(LegoSpecialHashMapKeyIString const&, LegoSpecial* const&)
SpecialSystem::RemoveFromHashMap(char const*, LegoSpecial*)
NuHashMap<LegoSpecialHashMapKeyIString, LegoSpecial*>::EraseForNonUniqueKey(LegoSpecialHashMapKeyIString const&, LegoSpecial* const&)
LegoSpecialSystem::~LegoSpecialSystem()
GameObjHitRagDollEventData::~GameObjHitRagDollEventData()
NuHashMap<LegoSpecialHashMapKeyIString, LegoSpecial*>::Clear()
CalculateBezierPoint(NUVEC*, NUVEC*, NUVEC*, NUVEC*, NUVEC*, int, int, float)
ResetStreak(void**)
StreakHandle::Clear()
StreakHandle::~StreakHandle()
AddStreakPointsOld(NUVEC*, float, unsigned int, void**, int, void*, NuSmartPtr<NuMtl, true>, ParticleEmitterType*, long)
AddStreakPoints(NUVEC*, float, unsigned int, StreakHandle&, int, void*, NuSmartPtr<NuMtl, true>, ParticleEmitterType*, long)
UpdateStreaks(float)
DrawSabre(NUVEC const&, NUVEC const&, float, float, float, NuColour const&)
DrawStreaks(bool, bool)
ResetStreaks()
InitStreaks(char const*, char const*)
StreakData::StreakData()
StreakDataList::Add(StreakData&)
StreakData::StreakData(StreakData const&)
StreakData::~StreakData()
StreakDataList::Remove(StreakData&)
StreakData::FixUp()
StreakData::Destroy(StreakData*)
StreakData::Parse(nufpar_s*)
StreakData::ModifyPosAccordingToWidthScale(NUVEC*, float)
CSListHeader<StreakData>::~CSListHeader()
StreakDataList::FixUp()
SuperCounterConfig_Reset(SUPERCOUNTER*)
SuperCounterConfig_ParseLine(SUPERCOUNTER*, nufpar_s*)
SuperCounters_Reset(int)
SuperCounter_FixUpGizmos(SUPERCOUNTER*, WORLDINFO*)
SuperCounters_FixUpGizmos(WORLDINFO*)
SuperCounter_ActivateGizmoPickup(WORLDINFO&, Gizmo*, GizmoPickup*, SUPERCOUNTER*, SUPERCOUNTERPICKUP*)
SuperCounter_FindFromNameAndLevel(char*, WORLDINFO*, SUPERCOUNTERPICKUP**)
SuperCounter_AnyCollected(SUPERCOUNTER*, WORLDINFO*)
SuperCounters_ResetProcessed(WORLDINFO*)
SuperCounters_SetFromSave(SUPERCOUNTERSAVE*, SUPERCOUNTER*, int)
SuperCounters_TurnOffChars(SUPERCOUNTER*, SUPERCOUNTERSAVE*, int)
SuperCounter_CharCheck(WORLDINFO&, int, NUVEC*, int, SUPERCOUNTER*, SUPERCOUNTERSAVE*, int)
SuperCounter_AreaStatus(int, SUPERCOUNTER*, SUPERCOUNTERSAVE*)
SuperCounter_AreaCheck(WORLDINFO&, NUVEC const*, int, SUPERCOUNTER*, SUPERCOUNTERSAVE*, int)
SuperCounters_CompleteAll(SUPERCOUNTER*, SUPERCOUNTERSAVE*, int)
SuperCounter_CreateAIMessages(int, int, SUPERCOUNTER*, SUPERCOUNTERSAVE*, int)
AllocAreaSuperCounterArray()
SurfaceMaskOn(unsigned int*)
SurfaceMaskOff(unsigned int*)
Surfaces_Reset()
CalcSurfaceInfo(MechCharacter&)
GetSurfaceInfo(MechCharacter*, int, float)
InitSurfaceInfo(MechCharacter*)
UnderMud(MechCharacter*)
UnderWater(MechCharacter*)
IntersectWater(MechCharacter*)
SetObjOnSurface(MechCharacter*, int, int)
Conveyor_AdjustSpeed(WORLDINFO*, NUVEC*, NUVEC*)
IntersectLayerWaterTerrainExtraHitPointEntity(MechCharacter const*, bool)
IntersectGeomWaterTerrainExtraHitPointEntity(MechCharacter const*)
AddMudSplash(MechCharacter*, int)
Surface_Deflect(NUVEC*, NUVEC*, NUVEC*, int)
Layer_GetNameByType(eLAYER_TYPE)
Surface_GetNameByType(eSURFACE)
Surface_GetTypeByName(char*)
Layer_GetTypeByName(char*)
SurfaceBit_FindByName(char*)
Surfaces_SaveOriginals()
Surfaces_ParseLine(nufpar_s*, SURFACEDATA*)
Surfaces_Dump(WORLDINFO*)
Surfaces_ConfigureOverrides(WORLDINFO*, char*)
Surfaces_SetOverrides(WORLDINFO*)
IsDynoVehicleEntity(Entity*)
CanSlideOnThisSurface(MechCharacter*, eSURFACE)
StartSlide(GameObject*, int)
SlideCode(GameObject*)
Slide_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Slide_SetTargetMomExt(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*, NUVEC*)
Slide_SetTargetHeading(GameObject*, unsigned short, float)
ApplySurfaceFriction(GameObject*, NUVEC*)
Goop_UpdateHint(HINT_s*)
ObjLiftHover_RoofCushion(GameObject*)
OnSlideSurface(MechCharacter&)
Tag_GetTagModeName(eTAGMODE)
Tag_VehicleGetHijackRange(MechCharacter*)
Tag_ChooserInit_Perm()
Tag_ChooserInit(WORLDINFO&)
Tag_SetMode(int, float, float, unsigned int)
Tag_SetRangeTransfer(float)
Tag_GetRangeTransfer()
Tag_SetRangeToggle(float)
Tag_GetRangeToggle()
Tag_GetFlags()
Tag_SetFlags(unsigned int)
Tag_SetDone(GameObject*)
CheckNoTagFlag(MechCharacter*)
Tag_ValidTarget(MechCharacter*, MechCharacter*)
Tag_FindGameObject_TOGGLE(GameObject*, int)
Tag_FindVehicleGameObject_TOGGLE(MechCharacter*, float, float*)
Tag_FindGameObject_TRANSFER(GameObject*, bool, bool, float, bool)
Tag_FindGameObject_HUBTOGGLE(GameObject&, int)
ClearTakeOverObjectSys()
RegisterTakeOverObject(MechCharacter*)
StoreStatusTakeOverObjectSys(WORLDINFO*)
ReStoreStatusTakeOverObjectSys(WORLDINFO&, int)
TakeOverGameObject(MechCharacter*, MechCharacter*, int, int)
Tag_ResetTransfers()
Tag_NewTransfer(GameObject*, GameObject*, bool)
GetTagTransfer(int)
Tag_AlterEgo_Start_RayCast(GameObject*)
Tag_AlterEgo_Start(GameObject*)
Tag_AlterEgo_Update(GameObject*)
Tag_UpdateTransfers(FXTypeID&, FXTypeID&, int)
Tag_EndParticles(ParticleManager*)
Tag_UpdateHint(WORLDINFO*, HINT_s*)
TakeOver_StartRiderJump(GameObject*, GameObject*)
ClearLastSafeTakeOver(MechCharacter*)
CanBuck(MechCharacter*)
Buck_Start(MechCharacter*, MechCharacter*)
Buck_MoveCode(GameObject*, int)
ReleaseTakeOver(MechCharacter*, int, NUVEC const*, bool, float, float, bool)
RideOn_UpdateHint(WORLDINFO*, HINT_s*)
Beasts_UpdateHint(HINT_s*)
Tag_DrawIcon_WOBBLE(MechCharacter*, int, float)
Tag_DrawIcon_WOBBLE_COLOUR(MechCharacter*, int, int, int, int, int, float, unsigned char, float)
Tag_DrawIcon_Basic(GameObject&, VuVec&)
ObjIconWobblePos(MechCharacter*, NUVEC*, float)
GetTakeOverPos(MechCharacter*, NUVEC*)
SetTakeOverPosition(MechCharacter*, NUVEC*)
TagCharacter(MechCharacter*, MechCharacter*, int, int, bool, bool)
TagCode(MechCharacter*, MechCharacter*, int, int, int, int, int, int, int)
ReleaseAllTakeOvers()
TakeOver_Carried(MechCharacter*, MechCharacter*, int, int)
TakeOver_SetAction(MechCharacter*, MechCharacter*)
TakeOverGameObject2(MechCharacter*, MechCharacter*, int)
TakeOver2GetIn(MechCharacter*, MechCharacter*)
TakeOverCode(GameObject*, int)
Tag_CanAutoReleaseCoupledTakeOver(MechCharacter const*)
VehicleToTurretTagging(GameObject*)
Tag_VehicleTag(MechCharacter*, MechCharacter**, MechCharacter**)
Tag_IsTaggableNearer(GameObject*, GameObject*, int)
Tag_Check(GameObject*)
TakeOver_GetAnimSpeed(MechCharacter*, float&)
Tag_DefaultCanAutoReleaseCoupledTakeOver(MechCharacter const*)
Tag_SetCanAutoReleaseCoupledTakeOverFn(bool (*)(MechCharacter const*))
Tag_SplitScreenCanAutoReleaseCoupledTakeOver(MechCharacter const*)
Text_InitLanguageList(LANGUAGEDATA*)
Text_SetLanguage(NuLanguage, int)
Text_GetLanguagePath(int)
Text_LoadFont(char const*, nuvariptr_u*, nuvariptr_u*)
Text_IsFontLoaded()
Text_InitStringTable(int, nuvariptr_u*, nuvariptr_u*)
Text_GetMaxOverallStrings()
Text_LoadAndFixUpStrings(unsigned char*, unsigned char**, char const**, int)
Text_LoadStrings(char*, nuvariptr_u*, nuvariptr_u*, int)
Text_StripComments(char*, char*, int, bool)
MenuUpdateViewTextStrings(MENU*)
MenuDrawViewTextStrings(MENU*)
SetLevelFont(WORLDINFO*)
RestoreFont(WORLDINFO*)
NaughtyString(char*, char*)
DisplayButtonPrompt(char*, NUVEC const*, float, float, nucolour_s, float, bool, float, int)
DisplayActionButtonPrompt(NUVEC const*, float, float, int)
DisplayTagButtonPrompt(NUVEC const*, float, float, int)
DisplaySpecialButtonPrompt(NUVEC const*, float, float, float, bool, float, int)
DisplayJumpButtonPrompt(NUVEC const*, float, float, int)
LegoSetFrameTime_Override(float)
LegoGetFrameTime()
LegoGetFrameTimeReciprocal()
ResetTimer(TIMER*, float)
UpdateTimer(TIMER*)
GameTiming(WORLDINFO*, float*, bool)
UpdatePickupFlicker()
ResetFrameCounters()
UpdateFrameCounters()
WheelBase_GetPoints(MechCharacter*, NUVEC*, NUVEC*)
Wheelie_MoveCode(GameObject*)
StartFlatten(ApiVehicle*, MechCharacter*, MechCharacter*, VuVec*)
StartExitFlattenJump(GameObject*)
FlattenCode(GameObject*)
CanBeepBeep(int)
Vehicle_IsTurning(MechCharacter*)
Vehicle_EndTurn(GameObject*)
Vehicle_DefaultTwoPlayersInVehicle(GameObject const*)
Vehicle_SetTwoPlayersInVehicleFn(bool (*)(GameObject const*))
Vehicle_IsTwoPlayerVehicle(GameObject*)
Vehicle_TwoPlayersInVehicle(GameObject*)
Vehicle_SplitScreenTwoPlayersInVehicle(GameObject const*)
GetTurnAroundSplines(WORLDINFO*, MechCharacter*, NuSpline**, NuSpline**)
WorldInfo_InitOnce()
WorldInfo_Deactivate(LegoLevelContainer const&)
WorldInfo_Unregister(WORLDINFO*)
WorldInfo_Activate(LegoLevelContainer const&)
WorldInfo_Init(LegoLevelContainer const&)
WorldInfo_DumpLevelEditor(WORLDINFO*)
DynoScene_GetFrom(LevelContainer const&)
WorldInfo_GetDynoScene(WORLDINFO*)
WorldInfo_Register(WORLDINFO*)
WORLDINFO::UpdateRoomVisibility()
WorldInfo_Dump(WORLDINFO*)
LevelStreaming_FindDestination(WORLDINFO*)
LevelStreaming_Update(WORLDINFO*)
LevelStreaming_DrawDebugText(int, float)
LevelStreaming_DrawDebugDestination(WORLDINFO*)
WorldInfo_RequestLoadCharacters(WORLDINFO*)
WorldInfo_LoadAIData(WORLDINFO*)
WorldInfo_LoadLegoSets(WORLDINFO*, bool volatile&)
WorldInfo_LoadCommonLed(WORLDINFO*, bool volatile&)
WorldInfo_LoadCommonArtLed(WORLDINFO*, bool volatile&)
WorldInfo_OnLoadInitPartsManager(WORLDINFO*)
WorldInfo_OnLoadConfigureLegacySystems(WORLDINFO*, char*)
WorldInfo_OnLoadConfigureSockSys(WORLDINFO*, char*, char*)
ClassManagerAccessor<cAreaSplitSettingsMgr>::GetFromCreate(ILevelContainer const&)
WorldInfo_OnLoadAllocateProgress(WORLDINFO*)
WorldInfo_LoadFont(WORLDINFO*)
Level_LoadConfigFileExt(LevelContainer const&)
WorldInfo_Load(WORLDINFO&, bool volatile&)
WorldInfo_EarlyFixup(WORLDINFO&)
WorldInfo_FixupAfterGizmoSystem(WORLDINFO&)
WorldInfo_FixupAfterGizmoFlow(WORLDINFO&)
CSListHeader<LEVELSCRIPTPROCESS>::Clear()
ManagerLevelData::~ManagerLevelData()
AITRIGGERSETSYS::AITRIGGERSETSYS(int)
AITriggerSetSysReset(AITRIGGERSETSYS*)
AITRIGGERSETSYS::~AITRIGGERSETSYS()
AITRIGGERSETSYS::~AITRIGGERSETSYS()
AITriggerSetAddTrigger(AIManager*, AITRIGGERSET_s*, Gizmo*)
IsMechCharacterBaseUsingLever(MechCharacter*, GizSwitch*)
AITriggerSetSysProcess(AITRIGGERSETSYS*, AIManager&)
AITriggerSysAutoSetUp(WORLDINFO*)
AITriggerGetLocatorPosForPlayer(MechCharacter*, NUVEC&)
MoveGameCam_UpdateMinicutStatus(GAMECAMERA const*)
MoveGameCam_DoGameCamBlend(GAMECAMERA*, float, int, int)
MiniCutInProgress(GAMECAMERA const*)
IsControlledPlayerMoving()
UpdateObstacleCamIfRequired(WORLDINFO&, GAMECAMERA*, int&, float&, bool)
Camera_InitOnce()
Cameras_EnterLevel(WORLDINFO&)
UpdateReferenceCamera(WORLDINFO&)
GetFixedJumpPos(MechCharacter&, NUVEC&)
CalcCutCamFOVFromCamResults(instcamresults_s*)
CalcCutCamFOV(instNUGCUTSCENE*)
GameCamera_SetCharacterCam(bool)
GameCamApplyPostEffects(WORLDINFO*, GAMECAMERA*, float)
MoveGameCam_SetSpaceCombatDeathOverrideTime(GameObject*, float)
MoveGameCam_SetSpaceCombatDeathOverride_Init(GameObject*, GameObject*, float)
MoveGameCam_ClrSpaceCombatDeathOverride(GameObject*)
MoveGameCam_SpaceCombatDeathOverride()
MoveGameCam_AnySpaceCombatDeathOverrideTimersActive()
MoveGameCam_SpaceCombatDeathOverrideTimersClearAll()
GameCam_GetShakeMul(MechCharacter*, float*)
SpaceCombat_CameraSetDockingZoom(float)
SpaceCombat_CalcDockingZoom(NUVEC*, NUVEC*, MechCharacter*)
GameCam_SetCam(WORLDINFO*, GAMECAMERA*, NUVEC*, NUVEC*)
AdjustObjPositionsBasedOnCamOffsets(MechCharacter**, NUVEC*, NUVEC*, int, int, NUMTX&, bool, bool)
ApplyCameraVolumeSettingsToGameCamera(MechCamera&, MechCamera::BasicParams&, MechSockParams&, float)
UpdateTargetCamera(GAMECAMERA*, MechCharacter*, int)
ObstacleCamPostUpate(NUVEC&, NUVEC&, float&, float&, int&, float&)
UpdateBlendedCamera(GAMECAMERA*, MechCharacter*, GAMECAMERA*, GAMECAMERA*)
GameCamRenderDebug3D()
InitCameraTargetMaterial()
DrawCameraTarget(NUVEC*)
DrawCameraTarget2(NUVEC*)
LegoConfig_SetLevelOverrideString(char const*, bool)
CC_variant(nufpar_s*)
Collection_CheckDrivingVehicleFn(WORLDINFO*, int, COLLECTID*)
Collection_CheckFloatingVehicleFn(WORLDINFO*, int, COLLECTID*)
Collection_CheckFlyingVehicleFn(WORLDINFO*, int, COLLECTID*)
Collection_CheckHubFlyingVehicleFn(WORLDINFO*, int, COLLECTID*)
Collection_InGameSelectFn(WORLDINFO*, int, COLLECTID*)
Collection_Polyjuice_Super(WORLDINFO*, int, COLLECTID*)
Collection_IDList(WORLDINFO*, int, COLLECTID*)
VehicleArea_GetCollection(AREADATA*)
ResetPlayerPacket(MechCharacter*, CHARACTERDATA const*)
Enable_Gravity(GameObject*, int)
ResetPlayerMoves(MechCharacter*)
ResetCharacterIdle(MechCharacter*, int, int)
SetGameObjectCharacterData(MechCharacter*)
ResetPlayerAI(MechCharacter&)
ResetPlayer(MechCharacter*, bool, NUVEC*, bool, bool)
ActivateCharacter(AIManager&, char*, NUVEC*, int, int)
DeactivateGameObject(MechCharacter*)
DeactivateCharacter(AIManager&, char*)
SetPlayerGroupPosition(float, float, float)
SetTransparentFlag(MechCharacter&)
SetLayers_CROWD(MechCharacter&)
GameObject::SetupCamSockData(char const*, char const*, char const*)
MakePlayerList(int)
Players_GetPlayerPadIndex(GameObject*)
Players_GetPlayerIndex(MechCharacter const*)
Players_GetPlayerCameraIndex(MechCharacter*)
Players_GetBlendedCamera(MechCharacter&)
Players_GetTargetCamera(MechCharacter&)
Players_BuildFurthestCamDistPlayerList(GameObject**, int)
AllowedPlayerList::ApplyExitingPlayerListVariants()
AllowedPlayerList::FindByVariant(short) const
AllowedPlayerList::AddExistingPlayerList()
AllowedPlayerList::AddFreePlayPlayerList()
AllowedPlayerList::AddLevelPlayerList(LEVELDATA const*)
AllowedPlayerList::AddAreaPlayerList()
AllowedPlayerList::RemoveDuplicates()
AllowedPlayerList::FindById(short) const
AllowedPlayerList::OverwritePlayerList(short*, int, bool)
AllowedPlayerList::ApplyToPlayerList(short*, int, bool)
AllowedPlayerList::ApplyToPlayerList(CSListHeader<AllowedPlayerListItem>&, AllowedPlayerList::ApplyToPlayerListMode)
Players_ChoosePlayerList(WORLDINFO*)
BuildPlayerIdList(WORLDINFO&)
Players_Init(WORLDINFO&)
AddCreature(LevelContainer&, int, int, NUVEC const*, int)
ClearAICreatures(WORLDINFO*)
InitAICreatures(WORLDINFO&)
ResetAICreature(MechCharacter*, AIManager&)
ResetAICreatures(WORLDINFO*)
StoreProgressAICharacter(WORLDINFO*, LEVEL_PROGRESS_s*)
GameObject::SetupCamSockData(char const*, char const*, char const*, GAMECHARACTERDATA*)
InitCreature(MechCharacter&)
InitDynamicCreature(MechCharacter&, int, LegoItemType*)
BuildCharacterIdleList(MechCharacter*, int*, int*, int, int, CharDefGameData const*, int)
NewCharacterIdle(MechCharacter*, int)
UpdateCharacterIdle(GameObject*)
KeepOnScreen(GameObject*)
MovePlayerClampToSpecial(GameObject*)
MovePlayerClampToLocator(GameObject*)
MovePlayerSpline(GameObject*)
MovePlayer(GameObject*)
Creature_FilterLayer(MechCharacter&, char)
Creature_UnFilterLayer(MechCharacter&, char)
Creatures_FlushDynoShapes()
Creature_HandleNoRigidCollision(MechCharacter*)
Creature_SetNoRigidsCollision(MechCharacter*, float)
CheckTerrainForDamage(MechCharacter*, int, NUVEC const*, NUVEC const*)
ProcessTrackRoot(MechCharacter*, NUVEC&)
TeeterTerrainCode(MechCharacter*)
AnimatePlayer(GameObject*)
GameAnimateCharacterModel(CharDefGameData const*, CharInst*, NUMTX*, GameObject*, long, CHARACTERDATA*)
GameDrawCharacterModel(CharDefGameData const*, CharInst*, NUMTX*, NUMTX*, NUMTX*, GameObject*, long, CHARACTERDATA*)
GameDrawCharacterModelInvisible(CharDefGameData const*, CharInst*, NUMTX*, NUMTX*, NUMTX*, GameObject*, long, CHARACTERDATA*)
DrawGameObjectsProcess()
DrawCharacterAttachments(GameObject*)
Cheat_IsDisguiseOn()
Cheat_IsChristmasOn()
Disguise_GetSpecial(WORLDINFO const&)
DrawCharacterHelper(GameObject*, NUMTX*, NUMTX*, NUMTX*, long)
DrawParaphernalia(MechCharacter*)
ProcessParaphernalia(GameObject*)
AnimateGameObject(GameObject*)
AnimateGameObjects()
DrawGameObject(GameObject*)
DrawGameObjectsDraw(WORLDINFO*, int)
DrawGameObjects(WORLDINFO*)
GetOtherActivePlayer(MechCharacter*)
AdjustLayerBits(long, MechCharacter*)
Player_HasPurpleMagic(MechCharacter*)
ChaseCameraUpdateTarget::~ChaseCameraUpdateTarget()
GizmoAwareSphereCast(DynoScene&, VuVec const&, VuVec const&, float, float&, RayFlags)
ChaseCameraPosition::reset()
ChaseCameraPosition::snap()
ChaseCamera_Smooth(float, float, float, float, float, float)
ChaseCameraPosition::update(VuVec&, float)
ChaseCamera::setCameraPos(VuVec&)
ChaseCamera::ChaseCamera()
ChaseCamera::setWorldMatrix(NUMTX const*)
ChaseCamera::setNewLevel(bool, WORLDINFO*)
ChaseCamera::setTargetChar(MechCharacter*)
ChaseCamera::RequestRecentre(bool, bool, VuVec*)
ChaseCamera::calcLookAtPos(ChaseCameraState*)
ChaseCamera::worldCollision(ChaseCameraState*, NUVEC*)
ChaseCamera::GetStickMovement(int, float&, float&)
ChaseCamera::reset(ChaseCamera::SnapDir)
ChaseCamera::getCameraState(ChaseCameraState*)
ChaseCamera::calcCameraMatrix(ChaseCameraState const*)
ChaseCamera::collideLookAt(ChaseCameraState*)
ChaseCameraLOSAxis::collideLookAt(ChaseCameraState*)
ChaseCamera::isLookAtInsideBox(ChaseCameraState*, NUMTX const&, VuVec const&, VuVec const&)
ChaseCamera::isCameraInsideBox(ChaseCameraState*, VuVec const&, NUMTX const&, VuVec const&, VuVec const&)
ChaseCamera::moveCameraOutsideBox(ChaseCameraState*, NUMTX const&, VuVec const&, VuVec const&, bool)
ChaseCamera::doChaseCamera()
ChaseCameraLOS::update(ChaseCamera*, ChaseCameraState*)
ChaseCamera::update()
ChaseCamera::updateListener()
ChaseCamera::clearTargetInfo()
ChaseCamera::init()
ChaseCamera::setTargetInfo(ChaseCameraTargetInfo&)
ChaseCamera::snapDirRequest(ChaseCamera::SnapDir)
ChaseCameraDefaultUpdateVelocity::update(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity::stickDist(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity::stickHeight(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity::updateLOS(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity::panCamera(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity::updateState(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity::reset(ChaseCamera*, ChaseCameraState*, NUVEC*, NUVEC*)
ChaseCameraDefaultUpdateVelocity::inSockReset(ChaseCamera*, ChaseCameraState*, NUVEC*, NUVEC*)
ChaseCameraDefaultUpdateVelocity360::update(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity360::panCamera(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity360::zoomCamera(ChaseCamera*, ChaseCameraState*)
ChaseCameraLOS::sphereCast(VuVec&, VuVec&, float, float&)
ChaseCameraLOS::sphereOverlap(VuVec&, float)
ChaseCameraDefaultUpdateVelocity360::updateLOS(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity360::updateState(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity360::handleCollision(ChaseCamera*, ChaseCameraState*)
ChaseCameraDefaultUpdateVelocity360::reset(ChaseCamera*, ChaseCameraState*, NUVEC*, NUVEC*)
ChaseCameraDefaultUpdateVelocity360::inSockReset(ChaseCamera*, ChaseCameraState*, NUVEC*, NUVEC*)
ChaseCameraDefaultUpdateTarget::updateState(ChaseCamera*, ChaseCameraState*)
ChaseCameraLOSAxis::clipTriToXZPlane(VuVec*, NUMTX const*, VuMtx const*, bool)
ChaseCameraLOSAxis::clipBoxToXZPlane(VuVec&, VuVec&, CacheNode*, NUMTX*, bool)
ChaseCameraLOSAxis::getCharactersLines(NUMTX const*, VuMtx const&, VuVec const&)
ChaseCameraLOSAxis::getLinesRec(NUMTX*, CacheGeom*)
ChaseCameraLOSAxis::getLines(CacheGeom*, MechKrawlie**, int)
ChaseCameraLOSAxis::clipLineToPlane(CHASECAMERALOS3DLINE*, ChaseCameraLOSAxis::clipPlanes)
ChaseCameraLOSAxis::sortLines()
ChaseCameraLOSAxis::mergeLines()
ChaseCameraLOSAxis::findGap()
LineNearestDist(CHASECAMERALOS3DLINE*, NUVEC2*)
ChaseCameraLOSAxis::findBestGap()
ChaseCameraLOSAxis::calcParams(ChaseCamera*, VuVec*, VuVec*, VuVec*, float)
ChaseCameraLOS::getKrawlies(ChaseCamera*, MechKrawlie**, int)
ChaseCameraLOS::getTriangles(ChaseCameraState*, CacheGeom&)
ChaseCameraLOS::calcAxisParams(ChaseCamera*, ChaseCameraState*)
ChaseCameraLOS::cameraMove(ChaseCamera*, ChaseCameraState*)
ChaseCameraLOS_SortUnclipped(void const*, void const*)
ChaseCameraLOS::discardLines()
ChaseCameraLOS::sphereCast(float, float, float, float&)
ChaseCameraLOS::sphereOverlap(float, float)
ChaseCameraDefaultUpdateVelocity::~ChaseCameraDefaultUpdateVelocity()
ChaseCameraDefaultUpdateVelocity360::~ChaseCameraDefaultUpdateVelocity360()
ChaseCameraDefaultUpdateTarget::~ChaseCameraDefaultUpdateTarget()
ChaseCameraUpdateTarget::Reset()
GameState_InitOnce()
SetDefaultSubtitles(Options&)
DefaultOptions(Options&)
InitGameBeforeConfig()
CollectPoliceStationGoldBrick(int)
IsPoliceStationGoldBrickCollected(int)
GetPoliceStationGoldBrickCollectCount(int&, int&)
CollectExtraGoldBrick(int)
IsExtraGoldBrickCollected(int)
GAMESTATE::OptionsOffset()
InitPartyCharacterScript(MechCharacter*, int)
TooSmallForActionMusic(int)
KeepActionMusicPlaying()
KeepActionMusicPlaying(float)
InstantStopActionMusic()
InitAbilities()
Status_NewCharacters_Override(STATUSPACKET*)
Demo_CollectCharacters()
AddFootStep_Game(int, int, MechCharacter*, FootStepFlags, float)
AddImpact_Game(MechCharacter*, VuVec*, float, int)
InitGameAfterConfig()
GAMESTATE::IsLevelOpen(int) const
GameState_IsAreaOpen(int)
GAMESTATE::IsAreaOpen(int) const
GameState_SetAreaComplete_Story(int, int)
GAMESTATE::SetAreaComplete_Story(int, int) const
GameState_IsAreaComplete_Story(int)
GAMESTATE::IsAreaComplete_Story(int) const
GAMESTATE::SetAllAreasOpen()
GAMESTATE::IsAnyAreaLevelComplete_Story(int) const
GAMESTATE::GetPlayerCollectionCompletionPoints(AREADATA const*, int) const
GAMESTATE::GetVehicleCollectionCompletionPoints(AREADATA const*, int) const
GAMESTATE::GetTrueHeroCompletionPoints(AREADATA const*, int) const
GAMESTATE::GetLevelCompletionPoints(AREADATA const*, int) const
GAMESTATE::GetColouredBrickCompletionPoints(AREADATA const*, int) const
GAMESTATE::GetAreaCompletionPoints(AREADATA const*, int) const
GAMESTATE::GetBuilderCompletionPoints(int) const
GAMESTATE::CalculateTotalCompletionPoints()
GAMESTATE::ReCalculateCompletionPoints()
ReCalculateCompletionPoints()
SerialisableGameState::Serialise(EdStream&)
NewGame_SetDefaultGameState()
NewGame()
BuyAllShopExtras()
InitGameMode_MainLevel(LegoLevelContainer&)
Race_ExtraIconIDFromName(char*)
CheckResetBits(WORLDINFO&, int, bool)
CreateGlobalGameMessages()
DeflectPart(PART*, MechCharacter*, float, float, int, FXTypeID const&)
PartCollide(PART*, int)
Game_KillPart(PART*, int)
Areas_OpenAll(int)
Episodes_CompleteAllSuperStories()
StartCAT(WORLDINFO&)
StartGIT(LevelContainer&)
FinishGIT(WORLDINFO&)
StartGitEditor(LevelContainer&)
GizObstacle_SetDefaultSFXFn_GENERIC(WORLDINFO*, GizmoObstacle*)
GameBlowUpBlownUpFn_GENERIC(BlowUp*)
GizObstacle_CheckExcludeFlagsFn_GENERIC(GizmoObstacle*, GameObject*, GIZOBSTACLETRIGGER*)
GizObstacle_GameDrawFn_GENERIC(void*, GizmoObstacle*)
GameTurnNetworkOn(WORLDINFO*)
GameTurnNetworkOff()
MaskBitCheck64(unsigned long, int)
MaskBitSet64(unsigned long&, int, bool)
SerialisableGameState::~SerialisableGameState()
DebrisKillPlayers(WORLDINFO&)
AddSurfaceDebris(GameObject&)
AddFootStepDebris(int, MechCharacter*)
AddWaterSplash(MechCharacter&, VuVec const&, int, FXTypeID const&, int)
AddWaterSplash(MechCharacter&)
AddWaterSplash(MechCharacter*, NUVEC const*, int, FXTypeID const&, int)
AddSlamDebris(MechCharacter*, bool)
AddSlamDecal(WORLDINFO&, NUVEC const&, float, bool, float, NUVEC*, int, int, float)
AddWallJumpDecal(GameObject&, VuVec const&, VuVec const&, LegoInventoryItem&)
InitRippleMtl(char*, NuSmartPtr<NuMtl, true>*)
BurnoutApply(int)
CreatureCrate_Stop(PART*)
CreatureCrate_MoveFn(PART*, float)
CreatureCrate_DrawFn(PART*)
SpawnCreatureFromCrate(GameObject*, float, float)
ManageGameObjects()
GameObject_CreateKillParts(MechObjectInterface&, GameObject_KillPartsArgs const&)
CanBeFlattened(GameObject*)
UpdateGameObjects(WORLDINFO*)
CollideGameObjects(WORLDINFO*)
KillRagDollBreak(GameObject*)
KillGameObject(MechCharacter*, int, MechCharacter*, int, GameObject_KillPartsArgs const*, int, int)
KillGameObject2(MechCharacter*, int, MechCharacter*, int, GameObject_KillPartsArgs const*, int)
PlayerTakeHit(MechCharacter*, MechCharacter*, unsigned long, bool, bool, bool)
StunGameObject(MechCharacter*, MechCharacter*, float, unsigned long, int, int, float)
StunDie_CheckAndStart(MechCharacter*, MechCharacter*, unsigned long)
KillPlayer(MechCharacter*, int, MechCharacter*, int, int, int, float)
DeactivatePlayer(MechCharacter*, float, MechCharacter*, int)
Deactivate_SetWhipType(MechCharacter*, unsigned char)
ActivatePlayer(GameObject*)
FindPlayerAndSetWeapon(int, int)
GameObjectToCameraCode(GameObject*)
SetKillPartMom(NUVEC*)
KillParts_VEHICLE(ADDPART*, int, int, GameObject*, int, unsigned short, unsigned short, NUVEC*)
GameObject_CreateMinikitKillParts(GameObject*, GameObject_KillPartsArgs const*)
ObjHitObj(MechCharacter*, MechCharacter*, int, unsigned long, int, int)
ObjHitShield(MechCharacter*, MechCharacter*, int, Bolt*, unsigned long)
CanSeeOrHearOpponent(MechCharacter*, MechCharacter*, float, unsigned long, float, float, float)
AlertSurroundingCreatures(MechCharacter*, NUVEC const*, int)
GameCreatureOpponentSelection(WORLDINFO&, int, MechCharacter**, int, MechCharacter**, int, MechCharacter**, unsigned long, float)
MakeBaddiesForgetAboutParty(WORLDINFO&, int)
GameAttackInit()
GetMaxNumLOSChecks()
SetMaxNumLOSChecks(int)
EvaluateCreatureSetsAlive()
LEGO_CreatureInteraction2D(int, MechCharacter**, int*, float)
GameAIPostAnimReset(GameObject&)
GameAIProcess(WORLDINFO*)
oneAtOnce_MaintainArray()
GameAISysReset(WORLDINFO*)
InitialiseGameObjectAreas(WORLDINFO*)
CheckAreas(AIConvexArea*, unsigned long const&)
CheckAreas(AIConvexArea*, unsigned long const&, MechCharacter&, VuVec const&)
CheckAllAreas(AIManager*)
GameAISysStartFrame(AIManager*)
GetNamedAPIObject(AIManager*, char const*)
GetAICreatureOrigin(MechCharacter&)
GameAISysInit()
oneAtOnce_CanAttack(MechCharacter*, MechCharacter*)
oneAtOnce_GetActiveAttackers()
oneAtOnce_GetFirstAttacker(int)
oneAtOnce_GetHoldRange(MechCharacter*)
oneAtOnce_SetNumAttackers(int)
oneAtOnce_SetAttackersPerRow(int)
oneAtOnce_SetDistPerRow(float)
oneAtOnce_SetInitDistPerRow(float)
SetupObjectFlags(MechCharacter&, int)
AddDynamicCreature(LevelContainer&, int, NUVEC const*, int, char const*, void*, int, NuSpline*, NUVEC*, int, int, LegoItemType*, char)
SetupGizItems(GameObject*, LegoItemType*)
DoSplinePositioning(GameObject*, int, NuSpline*, NUVEC*, int)
InitialiseSockPosition(GameObject*)
AddAmbientCreature(LevelContainer&, int, VuVec const&, int)
AddAmbientCreatureMechChar(LevelContainer&, int, VuVec const&, int)
GameAI_GetWorldInfoFromAIManager(AIManager&)
GetGenericGoon(int, int)
GetNamedGameObject(AIManager&, char const*)
GetNamedCharacter(AIManager&, char const*)
PartyMemberInWay(MechCharacter*, MechCharacter*)
LocalGetRandomLocator(WORLDINFO&, AIConvexLocator**, int, float, NUVEC const*, float, int, float, float)
LocalGetNearestLocator(AIConvexLocator**, int, float, NUVEC const*, float, int, float, float)
FindActiveVariant(char)
FindTakeOverObject(GameObject*, short, bool, float, int)
GameAIScriptAddLevelSfx(WORLDINFO*, nulisthdr_s*)
AIActivatePlayer(GameObject*, AIManager&, char)
AILocatorIsEmpty(AIConvexLocator&, float, float, bool, bool)
CalcOffsetJumpPos(NUVEC&, NUVEC const&, NUVEC const&, float)
OpponentShouldntBeAttacked(MechCharacter*)
GuidedMissile_Move(PART*, float)
GuidedMissile_Kill(PART*, int)
GuidedMissile_Deflect(PART*)
CalcPathNode(AIManager&, NUVEC*, float)
PointOnValidAIPath(AIManager&, NUVEC*, float, AIZone const&)
AIGetNearestPlayer(NUVEC const&)
AIGetNearestNonPlayer(MechCharacter*, float)
FindNearestOpponent(MechCharacter*)
RemoveItem(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Condition_MessageInit(AIManager&, char*)
Action_SetMaximumFallSpeed(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_AttackOpponent(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetMessage(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetVisibility(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_PlayCutScene(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_GameFollowPlayer(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_HelpWithTriggers(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_PullLever(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_UseTechno(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_UseGrapple(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_UseLedge(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_PickUpItem(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SupercarryPlug(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_ReleaseLocator(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_AssignLocatorInSet(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetGameObjectToSpawnOn(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_StunOpponent(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_WakeUpPhysicsObjects(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_CapsuleResize(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetCapability(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_ForceDropSuperCarryItems(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_ThrowSuperCarryAtOpponent(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_ResetContextAIAnimation(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_CanUseSuperCarry(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetSuperCarryGlowLOS(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_GoToGizmo(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_HelpWithCoupledTakeOver(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_ActivateDoor(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetLEDObjectVisible(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
ForEachBolt_ClearTarget(Bolt*, void*)
Action_DontJumpWhenStuck(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetCrawlySpawner(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetCrawlyInteract(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_PushObstacleInteract(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetSpecialAsSafeTerrain(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetEntityAsBoundrary(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_ParkVehicle(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_FollowPlayer(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_Circle(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_CircleOpponent(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_CirclePlayer(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_AutoUseTriggers(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetDeflectBolts(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetUseTagRange360(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_LoseHatOnDeath(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_CanPickupHats(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetWoozy(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_SetTimeBase(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
cPlayerCoinCounter::EnterLevel(unsigned long)
HUBFloatInterpolator::HUBFloatInterpolator()
HUBFloatInterpolator::Process(float)
HUBFloatInterpolator::GetUnitValue() const
HUBFloatInterpolator::GetSCurvedUnitValue() const
HUBFloatInterpolator::GetSCurvedValue() const
HUBFloatInterpolator::GetLinearValue() const
HUBFloatInterpolator::Start(float, float, float)
HUBSuperCounterRender::HUBSuperCounterRender()
HUBSuperCounterRender::Reset()
HUBSuperCounterRender::Process(float, bool)
HUBSuperCounterRender::Draw()
HUBSuperCounterRender::SetSuperCounter(WORLDINFO&, SUPERCOUNTER*)
HUBContentUnlocked::SetRenderState(HUBContentUnlocked::RenderState)
HUBContentUnlocked::SetCurrentItem(WORLDINFO&, HUBContentUnlocked::UnlockedItem&)
HUBContentUnlocked::PushQueuedItem(int, int, float)
HUBContentUnlocked::PopQueuedItem()
HUBContentUnlocked::HUBContentUnlocked()
HUBContentUnlocked::Reset()
HUBContentUnlocked::Process(WORLDINFO&, float, bool)
HUBContentUnlocked::Draw()
HUBContentUnlocked::Skip()
HUBContentUnlocked::BlockRender()
GamePanel::GamePanel()
GamePanel::EnterLevel()
GamePanel::SetPlayerCoinCounters()
GamePanel::InDoubleScoreZone(GameObject*)
GamePanel::DrawInDoubleScoreZone(float)
GamePanel::UpdateStats(WORLDINFO&)
GamePanel::UpdateCoinTotal(WORLDINFO&)
GetCoinDrawMode()
SetCoinDrawMode(eStudCounterDrawMode)
ChangePlayerStats(unsigned short, float, float, float, float, float, float, bool, unsigned char)
GamePanel::DrawStats(WORLDINFO&, int, NUVEC*)
Panel::DrawTrueHeroBar(WORLDINFO&, float, float, unsigned long, unsigned long, float, float, float, unsigned short, eOBJ)
GamePanel::DrawCoinTotal(WORLDINFO&, int, int, int)
GamePanel::DrawBrickTotal(WORLDINFO&)
GamePanel::SendPlayerCoinsToTotal(WORLDINFO&)
GamePanel::DrawCharacterPurchaser()
GamePanel::DrawPanel(WORLDINFO&)
GamePanel::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
GamePanel::InteractPlayersPanelUI()
GamePanel::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
GamePanel::~GamePanel()
GamePanel::~GamePanel()
GamePanel::GetPanelY()
Status_DumpSceneObjects(WORLDINFO*)
Status_LoadSceneObjects(WORLDINFO*)
getFinishedStatusAlpha(STATUSPACKET*)
BigJumpToDoorArrivalPoints(GizmoDoor*)
DrawStatusStageFrame2(STATUSPACKET*)
TrueHero_Skip(STATUS_STAGE*, STATUSPACKET*)
TrueHero_Update(STATUS_STAGE*, STATUSPACKET*, float)
TrueHero_Draw(STATUS_STAGE*, STATUSPACKET*, int)
MiniKit_GetCollection(STATUSPACKET*, WORLDINFO*)
MiniKit_Skip(STATUS_STAGE*, STATUSPACKET*)
MiniKit_Update(STATUS_STAGE*, STATUSPACKET*, float)
MiniKit_Draw(STATUS_STAGE*, STATUSPACKET*, int)
AllMiniKits_Skip(STATUS_STAGE*, STATUSPACKET*)
AllMiniKits_Update(STATUS_STAGE*, STATUSPACKET*, float)
AllMiniKits_Draw(STATUS_STAGE*, STATUSPACKET*, int)
RedBrick_Skip(STATUS_STAGE*, STATUSPACKET*)
RedBrick_Update(STATUS_STAGE*, STATUSPACKET*, float)
RedBrick_Draw(STATUS_STAGE*, STATUSPACKET*, int)
Coins_Skip(STATUS_STAGE*, STATUSPACKET*)
Coins_Update(STATUS_STAGE*, STATUSPACKET*, float)
Coins_Draw(STATUS_STAGE*, STATUSPACKET*, int)
GoldBrick_Skip(STATUS_STAGE*, STATUSPACKET*)
GoldBrick_Update(STATUS_STAGE*, STATUSPACKET*, float)
GoldBrick_Draw(STATUS_STAGE*, STATUSPACKET*, int)
Prompt_Update(STATUS_STAGE*, STATUSPACKET*, float)
Prompt_Draw(STATUS_STAGE*, STATUSPACKET*, int)
CollectCharacters_Skip(STATUS_STAGE*, STATUSPACKET*)
CollectCharacters_Update(STATUS_STAGE*, STATUSPACKET*, float)
CollectCharacters_Draw(STATUS_STAGE*, STATUSPACKET*, int)
HappyTokens_Skip(STATUS_STAGE*, STATUSPACKET*)
HappyTokens_Update(STATUS_STAGE*, STATUSPACKET*, float)
HappyTokens_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LevelComplete_Skip(STATUS_STAGE*, STATUSPACKET*)
UnlockEpisodes_Skip(STATUS_STAGE*, STATUSPACKET*)
UnlockEpisodes_Update(STATUS_STAGE*, STATUSPACKET*, float)
UnlockEpisodes_Draw(STATUS_STAGE*, STATUSPACKET*, int)
LevelComplete_Update(STATUS_STAGE*, STATUSPACKET*, float)
LevelComplete_Draw(STATUS_STAGE*, STATUSPACKET*, int)
BonusComplete_Skip(STATUS_STAGE*, STATUSPACKET*)
BonusComplete_Update(STATUS_STAGE*, STATUSPACKET*, float)
BonusComplete_Draw(STATUS_STAGE*, STATUSPACKET*, int)
BonusTime_Skip(STATUS_STAGE*, STATUSPACKET*)
BonusTime_Update(STATUS_STAGE*, STATUSPACKET*, float)
BonusTime_Draw(STATUS_STAGE*, STATUSPACKET*, int)
BonusWin_Skip(STATUS_STAGE*, STATUSPACKET*)
BonusWin_Update(STATUS_STAGE*, STATUSPACKET*, float)
BonusWin_Draw(STATUS_STAGE*, STATUSPACKET*, int)
Exit_Update(STATUS_STAGE*, STATUSPACKET*, float)
Exit_Draw(STATUS_STAGE*, STATUSPACKET*, int)
Save_Update(STATUS_STAGE*, STATUSPACKET*, float)
Save_Draw(STATUS_STAGE*, STATUSPACKET*, int)
Fade_Update(STATUS_STAGE*, STATUSPACKET*, float)
Fade_Draw(STATUS_STAGE*, STATUSPACKET*, int)
RegisterStatusScreen_Game()
GizActions_FindGizmoByName(GIZFLOW*, int, char*)
GizActions_FindFlowInterfaceByNameAndClass(GIZFLOW*, char*, EdClass*)
GizActions_SetGizmoFlickerOff(Flow*, FlowObject*, char**, int)
GizActions_EnableGizmoCharacterCollision(Flow*, FlowObject*, char**, int)
GizActions_SetCheckPoint(Flow*, FlowObject*, char**, int)
GizActions_SetMessage(Flow*, FlowObject*, char**, int)
GameRegisterGizActions()
GizmoSys_SetBestBoltTarget(GIZMOSYS*, WORLDINFO*, MechCharacter*, NUVEC*, NUVEC*, float, float, int, int, BoltTypeID const&)
GizmoSys_BoltHit(GIZMOSYS*, WORLDINFO*, Bolt*, NUVEC*, NUVEC*, NUVEC*, float)
Hub_MiniKitViewer_Active()
HUB_SHOP_SYS::~HUB_SHOP_SYS()
HUB_SHOP_SYS::HUB_SHOP_SYS()
HUB_SHOP_SYS::DrawPanelName(char const*, bool, RGBA_C)
HUB_SHOP_SYS::UpdateCamPosAndTgt(NuSpline*, NuSpline*, int)
HUB_SHOP_SYS::AttemptToBuy(WORLDINFO&, int)
Hub_SetLevelSelectedCutscene(char*)
Hub_PlayLevelSelectedCutscene(LEVELDATA*)
Hub_GetRandomCharType()
WipeBackToHub()
Hub_DrawBonusStats(WORLDINFO&, float, int, int, int)
Hub_DrawSuperBonusStats(WORLDINFO*, AREADATA*, float)
Hub_DrawBonusModeMenu(int, float)
Hub_Load(WORLDINFO*)
Hub_LoadAndFixUpMiniKits(WORLDINFO*)
Hub_InitMiniKits(WORLDINFO*)
Hub_UpdateMiniKits(WORLDINFO*)
MiniKitPiecesToDraw(int)
MiniKitHasBeenBought(int)
Hub_DrawMiniKits(WORLDINFO*)
Hub_MiniKitCam()
Hub_DrawStarField()
Hub_DrawAreaStats(WORLDINFO*, float, int, int)
Hub_UpdateKit(WORLDINFO*)
IsMiniKitBuyable()
Hub_BuyUpdateKit(MENU*)
InitializeDummyChars(WORLDINFO*)
Hub_Init(WORLDINFO*)
Hub_ResetPanel()
Hub_Destroy(WORLDINFO*)
Hub_LevelEnding(WORLDINFO*)
Hub_Reset(WORLDINFO*)
Hub_ClearStats()
Hub_ActivateAreaSelect(WORLDINFO*, HUBEPISODEINFO*)
Hub_UpdateAI(WORLDINFO*)
Hub_Update(WORLDINFO*)
Hub_Draw3D(WORLDINFO*)
Hub_DrawPanel(WORLDINFO*)
MenuInitSelectArea(MENU*)
MenuUpdateSelectArea(MENU*)
MenuDrawSelectArea(MENU*)
MenuInitSelectMode(MENU*)
MenuUpdateSelectMode(MENU*)
MenuDrawSelectMode(MENU*)
MenuUpdateSelectModeLevel(MENU*)
MenuDrawSelectModeLevel(MENU*)
MenuInitBonusMode(MENU*)
MenuUpdateBonusMode(MENU*)
MenuDrawBonusMode(MENU*)
MenuInitFreePlay(MENU*)
MenuUpdateFreePlay(MENU*)
MenuDrawFreePlay(MENU*)
Hub_PanelBusy()
MiniKitCost()
Hub_ExitText(WORLDINFO*, AREADATA*, int*, int*)
ChooseRandomFreePlayPlayer(int, int, int*, int)
AddFreePlayModel(int, int, unsigned char)
RemoveFreePlayModel(int)
MakeFreePlayModelList(int, int, int, int, int)
FindFreePlayPartySize()
MakeFreePlayModelList(int, int)
MakeBountyHunterList(int, int)
CompleteLevelEx(WORLDINFO&, char const*, LEVELDATA*, GizmoDoor*)
Titles_Load(WORLDINFO*)
PartEffectOffProgress_Update(LevelProgress*, unsigned int, int)
PartEffectOffProgress_Reset(LevelProgress*)
EffectOffProgress_Update(LevelProgress*, char*, int)
EffectOffProgress_Reset(WORLDINFO&, LevelProgress*)
ClearAreaProgress(int, int)
LevelProgress_StoreFn(WORLDINFO*, int)
CleanUpAreaVariables()
NewArea()
ClearLevData()
Area_SetupStaticCharacterLists(int, EXTRAMODEL*)
ReConfigureCharacters()
CleanUpConfiguredCharacters()
LoadAreaData(AREADATA const*)
ClearUpAreaData(AREADATA*)
LoadArea_BeforeLoad(AREADATA const*)
LoadArea_AfterUnload(AREADATA const*)
Credits_LoadImages(WORLDINFO&)
ResetStatusScreen(WORLDINFO*)
ControlRoomStory_Draw(WORLDINFO*)
Levels_SetTitlesLevel(LEVELDATA*)
Levels_ValidateAndFixUp()
Level_SetDefaults(LEVELDATA*)
SetHUB_NEW_LDATAForNewLData()
Game_WorldInfo_InitMenu(WORLDINFO*, int*, int*)
OptionsChanged()
DrawGameState(float, float, int, int)
DrawSaveSlots(MENU*, float)
MenuEnterOptions(MENU*)
MenuUpdateOptions(MENU*)
MenuDrawOptions(MENU*)
MenuExitOptions(MENU*)
MenuEnterNewGame(MENU*)
GameOptions_SetLevelComplete(WORLDINFO*)
UpdateGameMenu(WORLDINFO&, LegoGamePad*, int)
MenuExitCtrlConfig(MENU*)
Stunned_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Recoil_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Punch_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
DieAir_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
DieAir_CheckAndStart(MechCharacter*, MechCharacter*, unsigned long)
DieTargeted_Impact(MechCharacter*)
DieTargeted_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Block_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
SetXZZero_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LandCombatRoll_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
UseAnimSpeed_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Combo_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
TakeHit_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Swipe_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Roll_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
AvoidVehicle_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
ObjZappedBlue(GameObject*)
IsHovering(MechCharacter*)
ApplyGravity(GameObject*, float*, float, float, float*)
GetVehicleHoverHeight(GameObject*, float*)
VehicleTurnOrLoopOffset(MechCharacter*)
GetHoverPosY(MechCharacter*)
StrafeLock_MoveCode(GameObject&)
StrafeLock_ChooseStrafeAnim(GameObject&)
StrafeLock_PerformStrafe360BasedOnPadDirection(GameObject&)
DrawOffsetCode(GameObject*, int)
PreRotateDrawOffsetCode(GameObject*, int)
ApplyGravity_Network(GameObject*)
PreResetCode(MechCharacter*)
PostResetCode(MechCharacter&)
MoveInactiveVehicle(GameObject*, int, GameObject**)
KeepVehicleOnScreen(GameObject*, int, int, int)
MovePlayer_DIRECTIONAL(GameObject*)
TurnCode(MechCharacter*, int, LegoGamePad*)
TurnAnimCode(MechCharacter*)
HitWallCode(GameObject*)
RunStopCode(MechCharacter*)
BigBossStaticAttackCode(GameObject*)
TractorBeamCode(GameObject*)
MovePlayer_GetTotalMomentum(MechCharacter*)
GetVehicleAreaRememberSpeed()
GetVehicleSpeedMul(MechCharacter*, float)
VehicleHornCode(GameObject*)
MovePlayer_VEHICLESTEERINGMODEL(GameObject*)
MovePlayer_VEHICLEDIRECTIONAL(GameObject*)
TwistLevel(LEVELDATA*)
CurrentStart(MechCharacter*, int, int)
MovePlayer_ROLLING(GameObject*)
Coupled_ResetDefaultValues(GameObject*)
MovePlayer_SetCoupledPosForDraw(GameObject*, GameObject*)
MovePlayer_COUPLE(GameObject*)
Couple_Objects(MechCharacter*, MechCharacter*, short, short)
Uncouple_Objects(GameObject*, GameObject*)
TurnCodeCamSafe(GameObject*, NUMTX*)
ApplyExtraRotation(GameObject*, NUMTX*)
AllowedToUseTurnAnim(MechCharacter*)
AllowedToScramble(MechCharacter*)
StartTurnAnim(MechCharacter*, bool)
TurningAnimState(MechCharacter*)
StartScrambling(MechCharacter*)
ScramblingAnimState(MechCharacter*)
StartHitWall(GameObject*, bool)
AllowedToRunStop(MechCharacter*)
AllowedToBreakOutOfRunStop(MechCharacter*)
AllowedToBigBossStaticAttack(GameObject*)
StartBigBossStaticAttack(GameObject*, GAMEACTION)
StartLaunch(GameObject*)
TakeHitCode(MechCharacter*)
Fire_UpdateHint(HINT_s*)
ObjOpponent(MechCharacter*, float, float, int, int, int)
PlayerOpponent(MechCharacter&, float, int)
SetComboOpponent(MechCharacter&, MechObjectData&, float, float, int, int)
StartBallooning(GameObject*, int)
SetBallooningHeight(GameObject*, float)
LetGoOfBalloon(MechCharacter*)
PopBalloon(MechCharacter*)
Balloon_MoveCode(GameObject*, float)
StartJetPackFall(GameObject*, int)
JetPackCode(GameObject*, int, int, int)
StartPixieFall(GameObject*, int)
PixieHoverCode(GameObject*, int, int, int)
StartRecoil(MechCharacter&, NUVEC*, float, float, float, int)
ComboRotateCode(MechCharacter*, int)
StartComboJump(MechCharacter&, int)
ObjBlocking(MechCharacter*)
StartDodge(MechCharacter&)
LegoFighting::SetPunchContext(MechCharacter*, MechObjectData&, int)
LegoFighting::PunchCode(MechCharacter*, int, int, int, int, int, float)
LightSabre_ColourFromObj(int, int*)
LightSabreDebris(MechCharacter*)
LegoFighting::SetComboContext(MechCharacter&, MechObjectData&, int)
PlaySwordSwingSfx(MechCharacter*, NUVEC*)
ComboCode(MechCharacter*, int, int, int, int)
SwipeCode(MechCharacter*, int, int)
GameObjectStuffAfterAnimation(MechCharacter*)
Cheat_SpecialHits(float, NUVEC*)
AddSabreDebris(GameObject&)
AddSingleSabreDebris(GameObject&, LegoInventoryItem&)
GameObjectStuffAfterAnimation()
Disorientate(GameObject*, NUVEC*)
DisorientateCode(GameObject*, NUVEC*, float)
ThingyScaleUpdate(GameObject*)
Vehicle_UpdateDynoVehicle(GameObject*)
Move_VEHICLE(GameObject*)
Animate_IsVehicleDocking(GameObject*)
Move_BEAST(GameObject*)
Move_CANNON(GameObject*)
Animate_CANNON(GameObject*)
Move_DRAGBOMB(GameObject*)
Animate_COUPLED(GameObject*)
Move_BARMAN(GameObject*)
Animate_BARMAN(GameObject*)
CanDrawShield(GameObject*)
PuppetCode(GameObject*)
HitWallCollisionListener::AddEntity(Entity*)
HitWallCollisionListener::RemoveEntity(Entity*)
HitWallCollisionListener::OverlapBegin(Entity const*, Entity const*)
HitWallCollisionListener::OverlapEnd(Entity const*, Entity const*)
HitWallCollisionListener::AllowCollision(Entity const*, Entity const*)
HitWallCollisionListener::Collision(BodyPair*, Array<ContactPoint>&)
HitWallCollisionListener::Collision(EntityPair*)
HitWallCollisionListener::Collision(Character*, Entity*, ContactPoint&)
HitWallCollisionListener::~HitWallCollisionListener()
RegisterHelpers()
SetLevelHack(int)
objInNetWaitContext(MechCharacter*, int)
setObjInNetWaitContext(MechCharacter*, int)
PackShortIntoInt(short, short)
PackCharIntoInt(char, char, char, char)
UnpackShortFromInt(int, short&, short&)
UnpackCharFromInt(int, char&, char&, char&, char&)
SaveManager::~SaveManager()
SaveManager::AutoSave(WORLDINFO*, int)
SaveManager::IsSaveNeeded(WORLDINFO*)
SaveManager::SetSaveState(SaveManager::SAVESTATE)
SaveManager::SaveAndExitToMainMenu(WORLDINFO*)
SaveManager::Save(WORLDINFO*)
SaveManager::AbortPendingSave()
SaveManager::SaveCheckSum()
SaveManager::EnterLevel(WORLDINFO*)
SaveManager::Process(WORLDINFO*)
SaveManager::ExitToFrontEnd(WORLDINFO&)
LoadPermData_Part2()
LoadPerm_Start(void*)
StartupScreens::StartupScreens()
StartupScreens::BeginStartupScreens()
StartupScreens::SetStage(StartupStage)
StartupScreens::OnProcess()
StartupScreens::Finished()
LegoFadeAddOn::LegoFadeAddOn()
LegoFadeAddOn::~LegoFadeAddOn()
non-virtual thunk to LegoFadeAddOn::~LegoFadeAddOn()
LegoFadeAddOn::~LegoFadeAddOn()
non-virtual thunk to LegoFadeAddOn::~LegoFadeAddOn()
LegoFadeAddOn::OnAdded()
LegoFadeAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to LegoFadeAddOn::OnHook(unsigned char, HookArgs*)
LegoFadeAddOn::Process(float)
LegoFadeAddOn::GetLevelContainer() const
non-virtual thunk to LegoFadeAddOn::GetLevelContainer() const
LegoFadeAddOn::FadeIn(float)
LegoFadeAddOn::FadeOut(float)
BlendObstacleSpeedAddOn::BlendObstacleSpeedAddOn()
BlendObstacleSpeedAddOn::~BlendObstacleSpeedAddOn()
non-virtual thunk to BlendObstacleSpeedAddOn::~BlendObstacleSpeedAddOn()
BlendObstacleSpeedAddOn::~BlendObstacleSpeedAddOn()
non-virtual thunk to BlendObstacleSpeedAddOn::~BlendObstacleSpeedAddOn()
BlendObstacleSpeedAddOn::OnAdded()
BlendObstacleSpeedAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to BlendObstacleSpeedAddOn::OnHook(unsigned char, HookArgs*)
BlendObstacleSpeedAddOn::Process(float)
BlendObstacleSpeedAddOn::GetLevelContainer() const
non-virtual thunk to BlendObstacleSpeedAddOn::GetLevelContainer() const
BlendObstacleSpeedAddOn::BlendForwardSpeed(float, float)
BlendObstacleSpeedAddOn::BlendBackwardSpeed(float, float)
BoltTrackerAddOn::BoltTrackerAddOn(char const*, MechCharacter*)
BoltTrackerAddOn::~BoltTrackerAddOn()
CSListHeader<BoltData>::Clear()
non-virtual thunk to BoltTrackerAddOn::~BoltTrackerAddOn()
non-virtual thunk to BoltTrackerAddOn::~BoltTrackerAddOn()
BoltTrackerAddOn::~BoltTrackerAddOn()
non-virtual thunk to BoltTrackerAddOn::~BoltTrackerAddOn()
non-virtual thunk to BoltTrackerAddOn::~BoltTrackerAddOn()
BoltTrackerAddOn::OnAdded()
BoltTrackerAddOn::OnHook(unsigned char, HookArgs*)
BoltTrackerAddOn::DebugRender()
non-virtual thunk to BoltTrackerAddOn::OnHook(unsigned char, HookArgs*)
BoltTrackerAddOn::Process(float)
BoltTrackerAddOn::OnBoltCreated(Bolt*)
BoltTrackerAddOn::OnBoltDestroyed(Bolt*)
BoltTrackerAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to BoltTrackerAddOn::EventNotify(Event&, NuEventData&)
BoltData::BoltData(Bolt*)
ExpandingPushOutAddOn::ExpandingPushOutAddOn(MechCharacter&, VuVec const&, float, float, float, bool, VuMtx*)
ExpandingPushOutAddOn::~ExpandingPushOutAddOn()
non-virtual thunk to ExpandingPushOutAddOn::~ExpandingPushOutAddOn()
non-virtual thunk to ExpandingPushOutAddOn::~ExpandingPushOutAddOn()
ExpandingPushOutAddOn::~ExpandingPushOutAddOn()
non-virtual thunk to ExpandingPushOutAddOn::~ExpandingPushOutAddOn()
non-virtual thunk to ExpandingPushOutAddOn::~ExpandingPushOutAddOn()
ExpandingPushOutAddOn::OnAdded()
ExpandingPushOutAddOn::OnHook(unsigned char, HookArgs*)
ExpandingPushOutAddOn::Process(float)
ExpandingPushOutAddOn::DebugRender()
non-virtual thunk to ExpandingPushOutAddOn::OnHook(unsigned char, HookArgs*)
ExpandingPushOutAddOn::ProcessStateMachine()
ExpandingPushOutAddOn::GetPushAwayActive()
ExpandingPushOutAddOn::ProcessPushGameObjectsAway()
ExpandingPushOutAddOn::ApplyPushAway(MechCharacter&)
ExpandingPushOutAddOn::IsExclusionCharacter(MechCharacter&)
ExpandingPushOutAddOn::ApplyPushAwaySimpleCircle(MechCharacter&)
ExpandingPushOutAddOn::ApplyPushAwayMtx(MechCharacter&)
ExpandingPushOutAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to ExpandingPushOutAddOn::EventNotify(Event&, NuEventData&)
ExpandingPushOutAddOn::AddExclusionCharacter(MechCharacter&)
ExpandingPushOutAddOn::RemoveExclusionCharacter(MechCharacterExclusionLink*)
ExpandingPushOutAddOn::SetPushAwayActive(bool)
ExpandingPushOutAddOn::Singleton()
CylinderConstraintAddOn::CylinderConstraintAddOn(VuVec const&, float, bool)
CylinderConstraintAddOn::~CylinderConstraintAddOn()
non-virtual thunk to CylinderConstraintAddOn::~CylinderConstraintAddOn()
non-virtual thunk to CylinderConstraintAddOn::~CylinderConstraintAddOn()
CylinderConstraintAddOn::~CylinderConstraintAddOn()
non-virtual thunk to CylinderConstraintAddOn::~CylinderConstraintAddOn()
non-virtual thunk to CylinderConstraintAddOn::~CylinderConstraintAddOn()
CylinderConstraintAddOn::OnAdded()
CylinderConstraintAddOn::OnHook(unsigned char, HookArgs*)
CylinderConstraintAddOn::Process(float)
CylinderConstraintAddOn::DebugRender()
CylinderConstraintAddOn::ConstrainToCylinder(MechCharacter&)
non-virtual thunk to CylinderConstraintAddOn::OnHook(unsigned char, HookArgs*)
CylinderConstraintAddOn::ProcessRadiusSeek(float)
CylinderConstraintAddOn::ConstrainCharactersToCylinder()
CylinderConstraintAddOn::IsExclusionCharacter(MechCharacter&)
CylinderConstraintAddOn::CalculateRadiusForPoint(VuVec const&)
CylinderConstraintAddOn::IsConeCylinder() const
CylinderConstraintAddOn::EventNotify(Event&, NuEventData&)
non-virtual thunk to CylinderConstraintAddOn::EventNotify(Event&, NuEventData&)
CylinderConstraintAddOn::SetupConeCylinder(float, float, float, float)
CylinderConstraintAddOn::GetTargetRadiusAtMinHeight() const
CylinderConstraintAddOn::SetTargetRadiusAtMinHeight(float)
CylinderConstraintAddOn::GetTargetRadiusAtMaxHeight() const
CylinderConstraintAddOn::SetTargetRadiusAtMaxHeight(float)
CylinderConstraintAddOn::AddExclusionCharacter(MechCharacter&)
CylinderConstraintAddOn::RemoveExclusionCharacter(MechCharacterExclusionLink*)
CylinderConstraintAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
SplineCylinderConstraintAddon::SetFollowSpline(char const*)
SplineCylinderConstraintAddon::SplineCylinderConstraintAddon(VuVec const&, float)
SplineCylinderConstraintAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to SplineCylinderConstraintAddon::OnHook(unsigned char, HookArgs*)
SplineCylinderConstraintAddon::Process(float)
SplineCylinderConstraintAddon::~SplineCylinderConstraintAddon()
non-virtual thunk to SplineCylinderConstraintAddon::~SplineCylinderConstraintAddon()
non-virtual thunk to SplineCylinderConstraintAddon::~SplineCylinderConstraintAddon()
non-virtual thunk to SplineCylinderConstraintAddon::~SplineCylinderConstraintAddon()
non-virtual thunk to SplineCylinderConstraintAddon::~SplineCylinderConstraintAddon()
FixedJumpAddOn::FixedJumpAddOn(NUVEC, float, bool)
FixedJumpAddOn::Init()
FixedJumpAddOn::FixedJumpAddOn(float, int, float, bool)
FixedJumpAddOn::OnAdded()
FixedJumpAddOn::SetForcedLanding(bool, float)
FixedJumpAddOn::OnHook(unsigned char, HookArgs*)
FixedJumpAddOn::Process(float)
non-virtual thunk to FixedJumpAddOn::OnHook(unsigned char, HookArgs*)
FixedJumpAddOn::~FixedJumpAddOn()
non-virtual thunk to FixedJumpAddOn::~FixedJumpAddOn()
non-virtual thunk to FixedJumpAddOn::~FixedJumpAddOn()
MechFlowObjectGlowAddOn::MechFlowObjectGlowAddOn()
MechFlowObjectGlowAddOn::~MechFlowObjectGlowAddOn()
non-virtual thunk to MechFlowObjectGlowAddOn::~MechFlowObjectGlowAddOn()
MechFlowObjectGlowAddOn::~MechFlowObjectGlowAddOn()
non-virtual thunk to MechFlowObjectGlowAddOn::~MechFlowObjectGlowAddOn()
MechFlowObjectGlowAddOn::OnAdded()
MechFlowObjectGlowAddOn::OnRemoved()
MechFlowObjectGlowAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to MechFlowObjectGlowAddOn::OnHook(unsigned char, HookArgs*)
MechFlowObjectGlowAddOn::GetLevelContainer() const
non-virtual thunk to MechFlowObjectGlowAddOn::GetLevelContainer() const
SAction_SetSatNavDestination::GetInputs(SCmdParams&) const
SAction_SetSatNavDestination::Exec(ScriptContext&)
SatNavAddOn::ClearDestination(MechCharacter&)
SatNavAddOn::SetDestination(MechCharacter&, SatNavTarget const&)
CharacterAction_SetSatNavDestination::GetInputs(SCmdParams&) const
CharacterAction_SetSatNavDestination::CharacterExec(ApiCharacter*, ScriptContext&)
CharacterAction_SetSatNavDestinationFlags::CharacterExec(ApiCharacter*, ScriptContext&)
SatNavAddOn::SetClearOnArrival(MechCharacter&, bool)
SatNavAddOn::ShowGhostStuds(MechCharacter&, bool)
SAction_SetSatNavDefaultMap::Exec(ScriptContext&)
CharacterAction_SetNaviSatNavDestination::CharacterExec(ApiCharacter*, ScriptContext&)
PathNodeMap::Clear()
PathNodeMap::Add(short, unsigned short)
PathNodeMap::Find(short) const
PerpVectorList::PerpVectorList(unsigned short)
PerpVectorList::~PerpVectorList()
PerpVectorList::~PerpVectorList()
PerpVectorList::AddAtEnd(NUVEC const&)
PerpVectorList::PopFront()
PerpVectorList::PopBack()
PerpVectorList::Clear()
PerpVectorList::Get(unsigned int) const
SatNavTarget::GetPosition() const
AddSatNavAddOn(MechCharacter*, LevelContainer*, cAIWorldNode*&)
SatNavSystem::SatNavSystem()
SatNavSystem::~SatNavSystem()
SatNavSystem::~SatNavSystem()
SatNavSystem::Init()
SatNavSystem::ShutDown()
SatNavSystem::OnEnterLevel(MechLevelContainer&)
SatNavSystem::OnExitLevel(MechLevelContainer&)
SatNavSystem::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
SatNavSystem::EventNotify(Event&, NuEventData&)
SatNavAddOn::GetSatNavOwner(MechCharacter&) const
SatNavSystem::StoreDestination(MechCharacter*, SatNavTarget const&)
SatNavSystem::RegisterScriptFunctionality()
SatNavSystem::SetDestination(MechCharacter*, MechCharacter*, float)
SatNavSystem::SetDestination(MechCharacter*, ApiVehicle const*, float)
SatNavSystem::SetDestination(MechCharacter*, VuVec const&, float)
SatNavSystem::IsDestinationValid(MechCharacter*, VuVec const&)
SatNavAddOn::IsTargetPosValid(SatNavAddOn::SatNavOwner const&, MechCharacter&, SatNavTarget&)
SatNavSystem::SetDestination(MechCharacter*, MechObjectData const&, float)
SatNavSystem::SetDestinationClearOnArrival(MechCharacter*, bool)
SatNavSystem::ClearDestination(MechCharacter*)
SatNavSystem::CacheSatNavAddOn(unsigned int, SatNavAddOn&)
SatNavSystem::ClearSatNavAddOn(unsigned int)
SatNavSystem::GetCachedSatNavAddOn(unsigned int) const
GetPulseAlpha(float, float, float, float, float, float)
SatNavStudCache::Add(NUVEC const&, float, float)
SatNavStudCache::Collect(unsigned int)
SatNavStudCache::Pop(unsigned int)
SatNavStudCache::Trash(unsigned int)
SatNavStudCache::TrashAll()
SatNavStudCache::GetStudPosition(unsigned int) const
SatNavStudCache::Process(float, float)
SatNavStudCache::Render(nuhspecial_s*) const
SatNavAddOn::SatNavOwner::SatNavOwner(MechCharacter&)
SatNavStudCache::Create(unsigned int)
SatNavAddOn::SatNavOwner::~SatNavOwner()
SatNavAddOn::SatNavAddOn()
SatNavAddOn::OnAdded()
SatNavAddOn::~SatNavAddOn()
non-virtual thunk to SatNavAddOn::~SatNavAddOn()
SatNavAddOn::~SatNavAddOn()
non-virtual thunk to SatNavAddOn::~SatNavAddOn()
SatNavAddOn::SetDestination(SatNavAddOn::SatNavOwner&, SatNavTarget const&)
SatNavAddOn::SetState(SatNavAddOn::SatNavOwner&, SatNavAddOn::SatNavState const&)
SatNavAddOn::ClearDestination(SatNavAddOn::SatNavOwner&)
SatNavAddOn::SetClearOnArrival(SatNavAddOn::SatNavOwner&, bool)
SatNavAddOn::ShowGhostStuds(SatNavAddOn::SatNavOwner&, bool)
CylinderToSphereTest(VuVec const&, float, float, VuVec const&, float)
HorizontalOOBToSphereTest(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float)
SatNavAddOn::Process(float)
SatNavAddOn::ProcessStateChange(SatNavAddOn::SatNavOwner&, MechCharacter&, LevelContainer&)
SatNavAddOn::CalculateNaviPath(SatNavAddOn::SatNavOwner&, MechCharacter&, LevelContainer&)
SatNavAddOn::Render()
SatNavAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to SatNavAddOn::OnHook(unsigned char, HookArgs*)
SatNavAddOn::GetLevelContainer() const
non-virtual thunk to SatNavAddOn::GetLevelContainer() const
SatNavAddOn::TeleportToTarget()
SatNavAddOn::FadeOutPath(SatNavAddOn::SatNavOwner&)
SatNavAddOn::RebuildSpline(SatNavAddOn::SatNavOwner&)
SatNavAddOn::FadeInPath(SatNavAddOn::SatNavOwner&)
SatNavAddOn::Reset(MechCharacter&)
SatNavAddOn::OnDestroyEvent(AddOnList::eDestroyEvent)
SatNavAddOn::GetFadeOut(float)
SatNavAddOn::GetFadeIn(float)
GenerateLinearPathPerpVectorXZPlane(NUVEC&, NUVEC const*, NUVEC const*, NUVEC const*)
SAction_SetSatNavDestination::~SAction_SetSatNavDestination()
SAction_SetSatNavDestination::GetName() const
SAction_SetSatNavDestination::GetOutputs(SCmdParams&) const
CharacterAction_SetSatNavDestination::~CharacterAction_SetSatNavDestination()
CharacterAction_SetSatNavDestination::GetName() const
CharacterAction_SetSatNavDestination::GetOutputs(SCmdParams&) const
CharacterAction_SetSatNavDestinationFlags::~CharacterAction_SetSatNavDestinationFlags()
CharacterAction_SetSatNavDestinationFlags::GetName() const
CharacterAction_SetSatNavDestinationFlags::GetInputs(SCmdParams&) const
CharacterAction_SetSatNavDestinationFlags::GetOutputs(SCmdParams&) const
SAction_SetSatNavDefaultMap::~SAction_SetSatNavDefaultMap()
SAction_SetSatNavDefaultMap::GetName() const
SAction_SetSatNavDefaultMap::GetInputs(SCmdParams&) const
SAction_SetSatNavDefaultMap::GetOutputs(SCmdParams&) const
CharacterAction_SetNaviSatNavDestination::~CharacterAction_SetNaviSatNavDestination()
CharacterAction_SetNaviSatNavDestination::GetName() const
CharacterAction_SetNaviSatNavDestination::GetInputs(SCmdParams&) const
CharacterAction_SetNaviSatNavDestination::GetOutputs(SCmdParams&) const
SatNavSystem::AcquireJobValues()
SatNavSystem::PostEscapeSpaceIsland() const
SatNavSystem::PostSpaceDive() const
SatNavSystem::AttachUI(MechCharacter&, SatNavTarget&)
SatNavSystem::DetachUI(MechCharacter&)
SatNavSystem::UpdateIndicator(MechCharacter&, VuVec const&)
SatNavSystem::CreateIndicator(MechCharacter&, VuVec const&)
SatNavSystem::DestroyIndicator(MechCharacter&)
SatNavSystem::ShowIndicator(MechCharacter&)
SatNavSystem::HideIndicator(MechCharacter&)
SatNavSystem::HideCurrentPin(MechCharacter&)
SatNavSystem::OnArrived(MechCharacter&, LevelContainer&) const
SatNavAddOnEventData::~SatNavAddOnEventData()
StrafeMovementAddOn::StrafeMovementAddOn(MechCharacter&, MechCharacter&)
StrafeMovementAddOn::~StrafeMovementAddOn()
non-virtual thunk to StrafeMovementAddOn::~StrafeMovementAddOn()
non-virtual thunk to StrafeMovementAddOn::~StrafeMovementAddOn()
StrafeMovementAddOn::~StrafeMovementAddOn()
non-virtual thunk to StrafeMovementAddOn::~StrafeMovementAddOn()
non-virtual thunk to StrafeMovementAddOn::~StrafeMovementAddOn()
StrafeMovementAddOn::OnAdded()
StrafeMovementAddOn::OnHook(unsigned char, HookArgs*)
StrafeMovementAddOn::Process(float)
non-virtual thunk to StrafeMovementAddOn::OnHook(unsigned char, HookArgs*)
StrafeMovementAddOn::SetContextFlagsEveryFrame()
StrafeMovementAddOn::ProcessStrafeMovement(float)
StrafeMovementAddOn::GetStrafeLockOnTargetPos(VuVec&)
StrafeMovementAddOn::SetHeading(VuVec&)
StrafeMovementAddOn::SetAnimationAndVelocity()
StrafeMovementAddOn::GetBestDirectionBasedOnPadInput(VuVec&)
BlowUpToObstacleDriver::BlowUpToObstacleDriver()
BlowUpToObstacleDriver::OnHook(unsigned char, HookArgs*)
non-virtual thunk to BlowUpToObstacleDriver::OnHook(unsigned char, HookArgs*)
BlowUpToObstacleDriver::Process(float)
BlowUpToObstacleDriver::Render()
BlowUpToObstacleDriver::IsInContainer(LevelContainer&)
non-virtual thunk to BlowUpToObstacleDriver::IsInContainer(LevelContainer&)
BlowUpToObstacleDriver::EventNotify(Event&, NuEventData&)
non-virtual thunk to BlowUpToObstacleDriver::EventNotify(Event&, NuEventData&)
BlowUpToObstacleDriver::ParseItem(GameScriptContext&, cParseContextItem&)
void GizActions_CreateAddOn<BlowUpToObstacleDriver>(Flow*, FlowObject*, char**, int)
BlowUpToObstacleDriver::ParseGizAction(Flow*, FlowObject*, char**, int)
BlowUpToObstacleDriver::~BlowUpToObstacleDriver()
BlowUpToObstacleDriver::~BlowUpToObstacleDriver()
non-virtual thunk to BlowUpToObstacleDriver::~BlowUpToObstacleDriver()
non-virtual thunk to BlowUpToObstacleDriver::~BlowUpToObstacleDriver()
non-virtual thunk to BlowUpToObstacleDriver::~BlowUpToObstacleDriver()
non-virtual thunk to BlowUpToObstacleDriver::~BlowUpToObstacleDriver()
BalanceBeamAddOn::BalanceBeamAddOn(MechCharacter&)
BalanceBeamAddOn::~BalanceBeamAddOn()
non-virtual thunk to BalanceBeamAddOn::~BalanceBeamAddOn()
non-virtual thunk to BalanceBeamAddOn::~BalanceBeamAddOn()
BalanceBeamAddOn::~BalanceBeamAddOn()
non-virtual thunk to BalanceBeamAddOn::~BalanceBeamAddOn()
non-virtual thunk to BalanceBeamAddOn::~BalanceBeamAddOn()
BalanceBeamAddOn::OnAdded()
BalanceBeamAddOn::ResetBalanceBeamMom()
BalanceBeamAddOn::OnHook(unsigned char, HookArgs*)
BalanceBeamAddOn::OverrideAnimation()
BalanceBeamAddOn::BalanceBeam_MoveCode()
BalanceBeamAddOn::CalculateBalanceBeamMom(float, int, bool)
BalanceBeamAddOn::ApplyBalanceBeamMomToVuVec(VuVec&)
non-virtual thunk to BalanceBeamAddOn::OnHook(unsigned char, HookArgs*)
BalanceBeamAddOn::CanUseBeams(MechCharacter const&)
BalanceBeamAddOn::CastForward(MechCharacter const&, FirstPointCollector&, float)
BalanceBeamAddOn::SetupBeamExtents(Entity const&)
BalanceBeamAddOn::SetBalanceBeamMom(VuVec*, float)
BalanceBeamAddOn::SetupBeamBelowFeet(Entity*)
BalanceBeamAddOn::ApplyBalanceBeamMomToChar()
BalanceBeamAddOn::SetupLanding(MechCharacter const&, Entity*, VuVec*)
BalanceBeamAddOn::CheckForBalanceBeam(MechCharacter const&, Entity**, VuVec&)
JetPackAddOn::JetPackAddOn(JetPackAddOn::JetPackType, float, float, float, float)
JetPackAddOn::~JetPackAddOn()
non-virtual thunk to JetPackAddOn::~JetPackAddOn()
non-virtual thunk to JetPackAddOn::~JetPackAddOn()
JetPackAddOn::~JetPackAddOn()
non-virtual thunk to JetPackAddOn::~JetPackAddOn()
non-virtual thunk to JetPackAddOn::~JetPackAddOn()
JetPackAddOn::OnAdded()
JetPackAddOn::OnRemoved()
JetPackAddOn::OnHook(unsigned char, HookArgs*)
JetPackAddOn::OnProcess()
JetPackAddOn::OverrideMomentum()
JetPackAddOn::OverrideStateChange(HookArgs*)
JetPackAddOn::OverrideAnimation(HookArgs*)
non-virtual thunk to JetPackAddOn::OnHook(unsigned char, HookArgs*)
JetPackAddOn::StartFalling()
JetPackAddOn::StartJetPack(MechCharacter*)
JetPackAddOn::StopJetPack(MechCharacter*)
SkyDiveCollisionListener::SkyDiveCollisionListener(SkyDiveAddon*)
SkyDiveCollisionListener::~SkyDiveCollisionListener()
SkyDiveCollisionListener::~SkyDiveCollisionListener()
SkyDiveCollisionListener::AllowCollision(Entity const*, Entity const*)
SkyDiveAddon::HandleGizmoDestruction(LegoSpecial*)
SkyDiveAddon::SkyDiveAddon()
SkyDiveAddon::~SkyDiveAddon()
SkyDiveAddon::GetChaseCamera()
SkyDiveAddon::ResetPhysicsGeom()
SkyDiveAddon::EnableWorldCollision()
SkyDiveAddon::DestroyPfx()
non-virtual thunk to SkyDiveAddon::~SkyDiveAddon()
non-virtual thunk to SkyDiveAddon::~SkyDiveAddon()
SkyDiveAddon::~SkyDiveAddon()
non-virtual thunk to SkyDiveAddon::~SkyDiveAddon()
non-virtual thunk to SkyDiveAddon::~SkyDiveAddon()
SkyDiveAddon::IsSkyDiving(int)
SkyDiveAddon::EnableConstantMove(VuVec const&, MechCharacter*)
SkyDiveAddon::DisableConstantMove(MechCharacter*)
SkyDiveAddon::StartForcedRotate(int, float)
SkyDiveAddon::InitSkyDiveSettings()
SkyDiveAddon::SelectSkydiveSettings(char const*)
SkyDiveAddon::SkyDiveParameters::SkyDiveParameters()
SkyDiveAddon::SkyDiveParameters::Init(char const*)
SkyDiveAddon::OnDestroyEvent(AddOnList::eDestroyEvent)
SkyDiveAddon::LoadSfx()
SkyDiveAddon::CreateAndUpdatePfx()
Skydive_SnapCam(MechCharacter*)
SkyDiveAddon::OnAdded()
SkyDiveAddon::AttemptToSetupCamera()
SkyDiveAddon::SetPhase(SkyDiveAddon::eSkyDivePhase, bool)
SkyDiveAddon::OnHook(unsigned char, HookArgs*)
SkyDiveAddon::Animate()
SkyDiveAddon::UpdateMom()
SkyDiveAddon::SetHeading(HookArgs*)
SkyDiveAddon::GetTurnModifier()
non-virtual thunk to SkyDiveAddon::OnHook(unsigned char, HookArgs*)
SkyDiveAddon::UpdateLastSafePos()
SkyDiveAddon::OnRemoved()
SkyDiveAddon::SetOnDivingBoard(bool)
SkyDiveAddon::ForcedToJumpByOtherPlayer(MechCharacter*)
SkyDiveAddon::ForcePlayerInFrontToJump()
SkyDiveAddon::ChangePhysicsGeom()
SkyDiveAddon::AttachParachute(int, int)
SkyDiveAddon::GetAutoPilotTweenRatio() const
SkyDiveAddon::UpdateFov()
SkyDiveAddon::UpdatePfx()
SkyDiveAddon::Update()
SkyDiveAddon::DeployParachute()
SkyDiveAddon::GetStreakDecayValue()
SkyDiveAddon::GetStreakRadiusOffsetMultiplier()
SkyDiveChaseCameraUpdateTarget::SkyDiveChaseCameraUpdateTarget(SkyDiveAddon&)
SkyDiveChaseCameraUpdateTarget::~SkyDiveChaseCameraUpdateTarget()
SkyDiveChaseCameraUpdateTarget::~SkyDiveChaseCameraUpdateTarget()
SkyDiveChaseCameraUpdateTarget::updateState(ChaseCamera*, ChaseCameraState*)
SkyDiveChaseCameraUpdateTarget::Reset()
SkyDiveChaseCameraUpdateTarget::SetBlendingObjMtx(bool)
SkyDiveChaseCameraUpdateTarget::IsBlendingObjMtx() const
SkyDiveCameraVelUpdater::SkyDiveCameraVelUpdater()
SkyDiveCameraVelUpdater::~SkyDiveCameraVelUpdater()
SkyDiveCameraVelUpdater::~SkyDiveCameraVelUpdater()
SkyDiveCameraVelUpdater::updateState(ChaseCamera*, ChaseCameraState*)
SkyDiveCameraVelUpdater::panCamera(ChaseCamera*, ChaseCameraState*)
SkyDiveCameraVelUpdater::update(ChaseCamera*, ChaseCameraState*)
SkyDiveCameraVelUpdater::reset(ChaseCamera*, ChaseCameraState*, NUVEC*, NUVEC*)
SkyDiveAddon::HitDamage()
SkyDiveAddon::ApplyDestructionImpulses(LegoSpecial*, LegoSpecial*)
SkyDiveAddon::SetGizmoDynamic(LegoSpecial*)
SkyDiveAddon::DisableWorldCollision(float)
SkyDiveAddon::UpdateWorldCollisionStatus(float)
SkyDiveAddon::EventNotify(Event&, NuEventData&)
non-virtual thunk to SkyDiveAddon::EventNotify(Event&, NuEventData&)
SkyDiveGizmoAddOn::SkyDiveGizmoAddOn(MechCharacter*, float)
SkyDiveGizmoAddOn::~SkyDiveGizmoAddOn()
non-virtual thunk to SkyDiveGizmoAddOn::~SkyDiveGizmoAddOn()
SkyDiveGizmoAddOn::~SkyDiveGizmoAddOn()
non-virtual thunk to SkyDiveGizmoAddOn::~SkyDiveGizmoAddOn()
SkyDiveGizmoAddOn::OnAdded()
SkyDiveGizmoAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to SkyDiveGizmoAddOn::OnHook(unsigned char, HookArgs*)
SkyDiveStateParameters::SkyDiveStateParameters()
SkyDiveAddon::CheckSkyDive(MechCharacter&)
SkyDiveAddon::ProcessHook_Process(HookArgsProcess*)
SkyDiveAddon::GetActionIdToPlay()
SkyDiveAddon::GetSkyDiveBombAction()
SkyDiveAddon::HandleDeathExternally()
GizmoProgressMeterAddon::GizmoProgressMeterAddon(GizmoObstacle&)
GizmoProgressMeterAddon::~GizmoProgressMeterAddon()
non-virtual thunk to GizmoProgressMeterAddon::~GizmoProgressMeterAddon()
GizmoProgressMeterAddon::~GizmoProgressMeterAddon()
non-virtual thunk to GizmoProgressMeterAddon::~GizmoProgressMeterAddon()
GizmoProgressMeterAddon::OnHook(unsigned char, HookArgs*)
GizmoProgressMeterAddon::Process(float)
GizmoProgressMeterAddon::RenderPanel()
non-virtual thunk to GizmoProgressMeterAddon::OnHook(unsigned char, HookArgs*)
CamTiltAddon::CamTiltAddon(VuVec&)
CamTiltAddon::~CamTiltAddon()
non-virtual thunk to CamTiltAddon::~CamTiltAddon()
non-virtual thunk to CamTiltAddon::~CamTiltAddon()
CamTiltAddon::~CamTiltAddon()
non-virtual thunk to CamTiltAddon::~CamTiltAddon()
non-virtual thunk to CamTiltAddon::~CamTiltAddon()
CamTiltAddon::OnAdded()
CamTiltAddon::OnHook(unsigned char, HookArgs*)
CamTiltAddon::Process(float)
non-virtual thunk to CamTiltAddon::OnHook(unsigned char, HookArgs*)
CamTiltAddon::AnyPadInput()
CamTiltAddon::UpdateCamTiltAddon(MechCharacter&, VuVec&, int, float, bool, float)
CamTiltAddon::Refresh(VuVec&, float, int, bool, float)
CamTiltAddon::UpdateCamTiltAddon(MechCharacter&, int, Bolt*, unsigned short, bool, float)
CamTiltAddon::Refresh(int, Bolt*, unsigned short, bool, float)
CamTiltAddon::EventNotify(Event&, NuEventData&)
non-virtual thunk to CamTiltAddon::EventNotify(Event&, NuEventData&)
CamTiltInfo::CamTiltInfo(float, VuVec&, unsigned short, float, bool, unsigned short, Bolt*)
GameFrontend::GameFrontend()
GameFrontend::Init()
GameFrontend::~GameFrontend()
GameFrontend::~GameFrontend()
GameFrontend::OnExitGame()
GameFrontend::StartFrontend(unsigned char)
GameFrontend::RestartFrontend()
GameFrontend::Process(WORLDINFO&, float const&)
GameFrontend::LoadedSave()
GameFrontend::EventNotify(Event&, NuEventData&)
GameFrontend::FadeFrontendToLoading()
GameFrontend::ReadStartupSaveData()
GameFrontend::SerialiseCustomSaveData(nufilemode_e, EdStream*)
GameFrontend::FinishReadingStartupSaveData()
GameFrontend::OnConfigUpdated()
GameFrontend::SerialiseCustomSaveData(nufilemode_e)
GameFrontend::LoadCustomSaveDataComplete()
MechContextRemoteZorbHandler::MechContextRemoteZorbHandler(MechCharacter&)
MechContextRemoteZorbHandler::~MechContextRemoteZorbHandler()
non-virtual thunk to MechContextRemoteZorbHandler::~MechContextRemoteZorbHandler()
MechContextRemoteZorbHandler::~MechContextRemoteZorbHandler()
non-virtual thunk to MechContextRemoteZorbHandler::~MechContextRemoteZorbHandler()
MechContextRemoteZorbHandler::Register()
MechContext* MechContextConstructor<MechContextRemoteZorbHandler>(MechCharacter&)
MechContextRemoteZorbHandler::OnEnter(LevelContainer*)
MechContextRemoteZorbHandler::GetAnimSpeed(float&)
MechContextRemoteZorbHandler::OnProcess(LevelContainer*, float)
MechContextRemoteZorbHandler::OnLeave()
LegoContextHandlerBase<MechContextRemoteZorbHandler>::GetInstanceId() const
LegoContextHandlerBase<MechContextRemoteZorbHandler>::~LegoContextHandlerBase()
SAction_LoadCharacter::SAction_LoadCharacter()
SAction_LoadCharacter::GetName() const
SAction_LoadCharacter::GetInputs(SCmdParams&) const
SAction_LoadCharacter::GetOutputs(SCmdParams&) const
SAction_LoadCharacter::Exec(ScriptContext&)
SAction_LoadCharacter::~SAction_LoadCharacter()
InitOnce(int, char**)
Text_ExpandButtonString(char const*, char*, int)
GamePad_InitButtons()
Options::Options()
Options::operator=(Options&)
Options::operator==(Options&)
Options::GetVibration(int)
Options::SetVibration(int, unsigned char)
Options::GetSurround()
Options::SetSurround(unsigned char)
Options::GetVSync()
Options::SetVSync(unsigned char)
Options::GetSaving_on()
Options::SetSaving_on(unsigned char)
Options::GetPrompts()
Options::SetPrompts(unsigned char)
Options::GetInvertYAxis()
Options::SetInvertYAxis(unsigned char)
Options::GetSFX_volume()
Options::SetSFX_volume(unsigned char)
Options::GetMusic_volume()
Options::SetMusic_volume(unsigned char)
Options::GetAudio_volume()
Options::SetAudio_volume(unsigned char)
Options::GetMusic_on()
Options::SetMusic_on(unsigned char)
Options::GetHintAudio_on()
Options::SetHintAudio_on(unsigned char)
Options::GetSubtitles_on()
Options::SetSubtitles_on(unsigned char)
Options::GetScreen_x()
Options::SetScreen_xy(signed char, signed char)
Options::GetScreen_y()
Options::GetReverse_updown(int)
Options::SetReverse_updown(int, unsigned char)
Options::ToggleReverse_updown(int)
Options::GetBrightness()
Options::GetContrast()
Options::SetBrightness(int)
Options::GetSafeZone()
Options::SetSafeZone(float)
Options::GetSplitScreenMode()
Options::SetSplitScreenMode(cSplitScreenSegmentInterfaceMgr::eOptionsSelectedSplitMode)
Options::CycleOptionsSelectedSplitMode(bool)
Options::SetOptionsSave(OPTIONSSAVE*)
Options::Serialise(EdStream&)
Options::GetAllowAnalytics()
Options::SetAllowAnalytics(bool, bool)
Options::GetEnglishDialogue_on()
Options::SetEnglishDialogue_on(bool, Options::EApplyLegoSFX)
OPTIONSSAVE::OptionsSize()
OPTIONSSAVE::OptionsMaxSize()
OPTIONSSAVE::CycleOptionsSelectedSplitMode(bool)
ColouredLego::ColouredLego(GameObject&, ColouredLego::TYPE)
ColouredLego::ColouredLego(LegoSpecial&, ColouredLego::TYPE)
ColouredLego::ColouredLego(GameAnimSet&, ColouredLego::TYPE)
ColouredLego::~ColouredLego()
ColouredLego::Pulse()
ColouredLego::Update(unsigned char, unsigned char, float, bool)
ColouredLego::UpdateDisplay()
ColouredLego::UpdateSpecial(LegoSpecial&, float)
ColouredLego::UpdateGameObject(GameObject&, float)
ColouredLego::UpdateAnimSet(GameAnimSet&)
ColouredLego::CalculateGlow(NUCOLOUR3&, float)
ColouredLego::ThrobSequence(float, int)
ColouredLego::ContinueThrobSequence(int)
FrontendSaveData::FrontendSaveData()
FrontendSaveData::BeforeSerialise(nufilemode_e)
FrontendSaveData::AfterSerialise()
FrontendSaveData::Serialise(EdStream*)
FrontendSaveData::Serialise(NuArchive&)
FrontendSaveData::Size()
FrontendSaveData::ReadFromGameData()
FrontendSaveData::WriteToGameData()
FrontendSaveData::OnConfigUpdated()
LegoFlowInterface_Cutscene::CreateParams::CreateParams(CutsceneSeedInfo*, LegoLevelContainer*)
LegoFlowInterface_Cutscene::CreateParams::CreateParams(char*, LegoLevelContainer*)
LegoFlowInterface_Cutscene::LegoFlowInterface_Cutscene(LegoFlowInterface_Cutscene::CreateParams&, short)
LegoFlowInterface_Cutscene::GetOutput(int, int)
LegoFlowInterface_Cutscene::GetClass()
LegoFlowInterface_CutsceneHelper::Initialise()
LegoFlowInterface_CutsceneManager::LegoFlowInterface_CutsceneManager(LevelContainer&)
LegoAbstractFlowInterface::~LegoAbstractFlowInterface()
LegoFlowInterface_Cutscene::~LegoFlowInterface_Cutscene()
LegoAbstractFlowInterfaceManager<LegoFlowInterface_CutsceneManager>::~LegoAbstractFlowInterfaceManager()
LegoFlowInterface_CutsceneManager::~LegoFlowInterface_CutsceneManager()
LegoFlowInterface_CutsceneManager::GetManagerName() const
LegoFlowInterface_CutsceneManager::GetHelper()
LegoAbstractFlowInterfaceManager<LegoFlowInterface_CutsceneManager>::~LegoAbstractFlowInterfaceManager()
LegoFlowInterface_Level::CreateParams::CreateParams(StreamingLevel*, LegoLevelContainer*)
LegoFlowInterface_Level::CreateParams::CreateParams(char*, LegoLevelContainer*)
LegoFlowInterface_Level::LegoFlowInterface_Level(LegoFlowInterface_Level::CreateParams&, short)
LegoFlowInterface_Level::GetOutput(int, int)
LegoFlowInterface_Level::GetClass()
LegoFlowInterface_LevelHelper::Initialise()
LegoFlowInterface_LevelManager::LegoFlowInterface_LevelManager(LevelContainer&)
LegoFlowInterface_Level::~LegoFlowInterface_Level()
LegoAbstractFlowInterfaceManager<LegoFlowInterface_LevelManager>::~LegoAbstractFlowInterfaceManager()
LegoFlowInterface_LevelManager::~LegoFlowInterface_LevelManager()
LegoFlowInterface_LevelManager::GetManagerName() const
LegoFlowInterface_LevelManager::GetHelper()
LegoAbstractFlowInterfaceManager<LegoFlowInterface_LevelManager>::~LegoAbstractFlowInterfaceManager()
TargetingInterfaceObstacle::TargetingInterfaceObstacle(GizmoObstacle&)
TargetingInterfaceObstacle::~TargetingInterfaceObstacle()
TargetingInterfaceObstacle::~TargetingInterfaceObstacle()
TargetingInterfaceObstacle::operator=(TargetingInterfaceObstacle const&)
TargetingInterfaceObstacle::GetObstacle()
TargetingInterfaceObstacle::GetTargetName() const
TargetingInterfaceObstacle::GetGameType()
TargetingInterfaceObstacle::HandleBoltHit(Bolt*)
TargetingInterfaceObstacle::TargetPosDoLOSCheck(NUVEC&, int&)
TargetingInterfaceObstacle::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*)
TargetingInterfaceObstacle::IsTargetStillValid()
TargetingInterfaceObstacle::GetRadiusCheck(VuVec&, float)
TargetingInterfaceObstacle::HasTerrain()
TargetingInterfaceObstacle::SendInput(LegoGamePad const&) const
TargetingInterfaceObstacle::CharacterEnteredConvexNode(Brain*, ConvexNode const*)
TargetingInterfaceObstacle::GetIconPos(VuVec&, int)
TargetingInterfaceSpellit::TargetingInterfaceSpellit(GizmoSpellIt&)
TargetingInterfaceSpellit::~TargetingInterfaceSpellit()
TargetingInterfaceSpellit::~TargetingInterfaceSpellit()
TargetingInterfaceSpellit::operator=(TargetingInterfaceSpellit const&)
TargetingInterfaceSpellit::GetSpellIt()
TargetingInterfaceSpellit::GetTargetName() const
TargetingInterfaceSpellit::GetGameType()
TargetingInterfaceSpellit::VerifyLOS(NUVEC&, NUVEC&, NUVEC&, long, FirstPointCollector*)
TargetingInterfaceSpellit::IsStickyTargetingEnabled() const
TargetingInterfaceSpellit::GetIconPos(VuVec&, int)
TargetingInterfaceSwitch::TargetingInterfaceSwitch(GizSwitch&)
TargetingInterfaceSwitch::~TargetingInterfaceSwitch()
TargetingInterfaceSwitch::~TargetingInterfaceSwitch()
TargetingInterfaceSwitch::operator=(TargetingInterfaceSwitch const&)
TargetingInterfaceSwitch::GetSwitch()
TargetingInterfaceSwitch::GetTargetName() const
TargetingInterfaceSwitch::GetGameType()
TargetingInterfaceSwitch::GetIconPos(VuVec&, int)
TargetingInterfaceComplexGizmo::TargetingInterfaceComplexGizmo(ComplexGizmo&)
TargetingInterfaceComplexGizmo::~TargetingInterfaceComplexGizmo()
TargetingInterfaceComplexGizmo::~TargetingInterfaceComplexGizmo()
TargetingInterfaceComplexGizmo::operator=(TargetingInterfaceComplexGizmo const&)
TargetingInterfaceComplexGizmo::GetComplexGizmo()
TargetingInterfaceComplexGizmo::GetTargetName() const
TargetingInterfaceComplexGizmo::GetGameType()
LegoCutsceneAudioInstance::LegoCutsceneAudioInstance(CutsceneSeedInfo const&, WORLDINFO const&, bool)
LegoCutsceneAudioInstance::~LegoCutsceneAudioInstance()
LegoCutsceneAudioInstance::BeginSession()
LegoCutsceneAudioInstance::EndSession(bool)
LegoCutsceneAudioInstance::CueTracks()
LegoCutsceneAudioInstance::ProcessTrackCue()
LegoCutsceneAudioInstance::BeginPlayback()
LegoCutsceneAudioInstance::FadeStopOtherTracks(TrackManager&)
LegoCutsceneAudioInstance::PausePlayback()
LegoCutsceneAudioInstance::ResumePlayback()
LegoCutsceneAudioInstance::SetPitch(float)
LegoCutsceneAudioInstance::GetTimingTrack() const
LegoCutsceneAudioInstance::GetCurrentPlaybackPositionSeconds() const
LegoCutsceneAudioInstance::GetCurrentPlaybackPositionSamples() const
LegoCutsceneAudioInstance::GetTotalPlaybackTime() const
LegoCutsceneAudioInstance::AreTracksFinished()
LegoCutsceneFmvAudioCallbacks::LegoCutsceneFmvAudioCallbacks(TrackManager&, LegoCutsceneAudioInstance&)
LegoCutsceneFmvAudioCallbacks::StartStream(float)
LegoCutsceneFmvAudioCallbacks::StopStream(bool)
LegoCutsceneFmvAudioCallbacks::PauseStream()
LegoCutsceneFmvAudioCallbacks::ResumeStream()
LegoCutsceneFmvAudioCallbacks::SetVolume(float)
LegoCutsceneFmvAudioCallbacks::GetNumSamplesPlayed()
LegoCutsceneFmvAudioCallbacks::GetStreamDesc()
LegoCutsceneFmvAudioCallbacks::Update(float)
LegoCutsceneFmvAudioCallbacks::AreTracksFinished()
LegoCutsceneFmvAudioCallbacks::~LegoCutsceneFmvAudioCallbacks()
LegoCutsceneFmvAudioCallbacks::~LegoCutsceneFmvAudioCallbacks()
CutsceneCallbacks::RigidPostRender_Reflection(CutsceneInstance&, NuCutSceneRawRigid*, instNUGCUTRIGID*, NUMTX*)
CutsceneCallbacks::RigidInstancePostUpdate(NuCutSceneRaw&, instNUGCUTSCENE&, NuCutSceneRawRigid&, instNUGCUTRIGID&, NUMTX&, float)
CutsceneCallbacks::RigidPostRender(NuCutSceneRaw&, instNUGCUTSCENE&, NuCutSceneRawRigid&, instNUGCUTRIGID&, NUMTX&, float)
CutsceneCallbacks::FixupVFX(char const*, NuCutSceneRaw*, void*)
CutsceneCallbacks::FixupParticles(char const*, NuCutSceneRaw*, void*)
CutsceneCharacterData::CutsceneCharacterData(CutsceneSeedInfo*, int)
CutsceneCharacterData::~CutsceneCharacterData()
CutsceneCharacterData::GetGroupCharacterData(int) const
CutsceneCharacterData::SetIsKrawly(bool)
CutsceneCharacterData::SetOffsetMtx(NuMatrixBase const&)
CutsceneCharacterData::GetCharDefName(char const*, char*, char*)
CutsceneCharacterData::SetupCharacterDefinition(char const*)
CutsceneCharacterData::SetupRandomisation(unsigned int)
CutsceneCharacterData::CreateInstanceData(LevelContainer&, NuCutSceneRaw*, NuANI4AnimRaw*, NuCutSceneRawCharExtra*)
CutsceneCharacterInstanceData::Setup(CutsceneCharacterData&, LevelContainer&, int, NUVEC*, CharInst::BlobShadowMode)
CutsceneCharacterData::GetCharDef() const
LegoCutsceneCharDefHelper::GetCharDefCallback(NuCutSceneRaw*, NuANI4AnimRaw*)
CutsceneCharacterInstanceData::CutsceneCharacterInstanceData()
CutsceneCharacterInstanceData::~CutsceneCharacterInstanceData()
CutsceneCharacterInstanceData::Reset()
CutsceneCharacterInstanceData::Eval(bool, float, NUMTX const&, int, int, float, float, float*, float*, NuANI4AnimRaw**, int*)
CutsceneCharacterInstanceData::ProcessExtraAttachments(CharInst&)
CMList<CharAnimEntry const*>::Append(CharAnimEntry const* const&, CMList<CharAnimEntry const*>::ListLink*)
CutsceneCharacterInstanceData::Render()
CutsceneCharacterInstanceData::GetCharInst()
CutsceneCallbacks::FindCharacters(NuCutSceneRaw*, void*)
CutsceneCallbacks::DestroyCharacters(NuCutSceneRaw*)
CutsceneCallbacks::CreateCharacterInstance(NuCutSceneRaw*, NuANI4AnimRaw*, NuCutSceneRawCharExtra*, instNUGCUTCHAR_s*, nuvariptr_u*, LevelContainer*, bool)
CutsceneCallbacks::DestroyCharacterInstance(NuCutSceneRaw*, NuANI4AnimRaw*, NuCutSceneRawCharExtra*, instNUGCUTCHAR_s*)
CutsceneCallbacks::EvalCharacter(int, instNUGCUTSCENE*, NuCutSceneRaw*, float, int)
CutsceneCallbacks::DrawCharacter(int, instNUGCUTSCENE*, NuCutSceneRaw*, float, int, NuANI4AnimRaw*)
CutsceneCallbacks::ResetCharacters(instNUGCUTSCENE*)
CSListHeader<CutscenePlayerItemRigidCallback::ConfigData>::~CSListHeader()
CutscenePlayerItemRigidCallback::CutscenePlayerItemRigidCallback(CutsceneInstance const&, instNUGCUTRIGID&, char const*, bool)
CutscenePlayerItemRigidCallback::~CutscenePlayerItemRigidCallback()
CutscenePlayerItemRigidCallback::~CutscenePlayerItemRigidCallback()
CutscenePlayerItemRigidCallback::GetStreakColour() const
CutscenePlayerItemRigidCallback::OnInstanceUpdate(VuMtx const&, float)
CutscenePlayerItemRigidCallback::OnPostRender(VuMtx const&, float)
CutscenePlayerItemRigidCallback::SetupCutsceneInstance(CutsceneInstance&)
CSListHeader<CutsceneCustomRigidCallback::ConfigData>::~CSListHeader()
CutsceneCustomRigidCallback::SetupCutsceneInstance(CutsceneInstance&)
CutsceneRigidCallbackBase::~CutsceneRigidCallbackBase()
CutsceneRigidCallbackBase::~CutsceneRigidCallbackBase()
LegoElectrics::LegoElectrics()
LegoElectrics::Init()
LegoElectrics::OnEnterLevel(LegoLevelContainer&)
LegoElectrics::GetZapOrigin(MechCharacter*, NUVEC*)
LegoElectrics::CanZapTarget(MechCharacter*)
LegoElectrics::ZapMoveCode(GameObject*, int, int)
LegoElectrics::GetShockOrigin(GameObject*, NUVEC*)
LegoElectrics::ShockVictimSetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
LegoElectrics::ShockMoveCode(GameObject*, int, int)
LegoElectrics::~LegoElectrics()
LegoElectrics::~LegoElectrics()
LegoElectrics::GetZapBeamDescriptor(GameObject&) const
LegoLevelThing::LegoLevelThing(LegoLevelContainer&)
LegoLevelThing::RegisterProcessing()
LegoLevelThing::RegisterRendering()
LegoLevelThing::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoLevelThing::ResetOnScreen(NURENDERSTAGE, LevelViewType, ClassManager::eRenderingPriority const&)
LegoLevelThing::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
LegoLevelThing::GetWorldInfo() const
LegoLevelThing::IsReadyToDeactivate(bool) const
LegoLevelThing::OnGameLevelActivateEvent_WaitForDestSubLevel()
LegoLevelThing::OnGameLevelActivateEvent()
LegoLevelThing::EventNotify(Event&, NuEventData&)
LegoProcessBeforeLevel::LegoProcessBeforeLevel(LevelContainer&)
LegoProcessBeforeLevel::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LegoProcessAfterLevel::LegoProcessAfterLevel(LevelContainer&)
LegoProcessAfterLevel::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
LevelMusicCueManager::LevelMusicCueManager(LegoLevelContainer&)
LevelMusicCueManager::EventNotify(Event&, NuEventData&)
LegoLevelThing::~LegoLevelThing()
LegoLevelThing::GetManagerName() const
LegoProcessBeforeLevel::~LegoProcessBeforeLevel()
LegoProcessBeforeLevel::GetManagerName() const
LegoProcessAfterLevel::~LegoProcessAfterLevel()
LegoProcessAfterLevel::GetManagerName() const
LevelMusicCueManager::~LevelMusicCueManager()
LevelMusicCueManager::GetManagerName() const
EdRefCharAnimTriggerItemTypeData::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCharAnimTriggerItemTypeData::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharAnimTriggerItemTypeData::CharAnimTriggerItemTypeData()
LegoAnimTriggerItemTypeModifierData::~LegoAnimTriggerItemTypeModifierData()
CharAnimTriggerItemTypeData::~CharAnimTriggerItemTypeData()
CharAnimTriggerItemTypeDataHelper::RegisterClasses(EdRegistry&)
CharAnimTriggerItemTypeDataHelper::RegisterTriggerType()
CharAnimTriggerItemTypeDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
CharAnimTriggerItemTypeDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerScaleItemUpdateData::LegoAnimTriggerScaleItemUpdateData(CharAnimTrigger const&, CharAnimState&)
LegoAnimTriggerScaleItemUpdateData::~LegoAnimTriggerScaleItemUpdateData()
LegoAnimTriggerScaleItemUpdateData::~LegoAnimTriggerScaleItemUpdateData()
LegoAnimTriggerScaleItemData::CreateUpdateData(CharAnimTrigger const&, CharAnimState&) const
LegoAnimTriggerScaleItemData::LegoAnimTriggerScaleItemData()
LegoAnimTriggerScaleItemData::~LegoAnimTriggerScaleItemData()
LegoAnimTriggerScaleItemData::~LegoAnimTriggerScaleItemData()
LegoAnimTriggerScaleItemData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
EdRefLegoAnimTriggerScaleItemData::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefLegoAnimTriggerScaleItemData::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
LegoAnimTriggerScaleItemDataHelper::RegisterClasses(EdRegistry&)
LegoAnimTriggerScaleItemDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerScaleItemDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerItemModifierData::LegoAnimTriggerItemModifierData()
LegoAnimTriggerItemModifierData::~LegoAnimTriggerItemModifierData()
LegoAnimTriggerItemModifierData::~LegoAnimTriggerItemModifierData()
LegoAnimTriggerItemModifierData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
LegoAnimTriggerItemModifierDataHelper::RegisterClasses(EdRegistry&)
LegoAnimTriggerItemModifierDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerItemModifierDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerItemTypeModifierData::LegoAnimTriggerItemTypeModifierData()
LegoAnimTriggerItemTypeModifierData::~LegoAnimTriggerItemTypeModifierData()
LegoAnimTriggerItemTypeModifierData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
LegoAnimTriggerItemTypeModifierDataHelper::RegisterClasses(EdRegistry&)
LegoAnimTriggerItemTypeModifierDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerItemTypeModifierDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerItemLocatorData::LegoAnimTriggerItemLocatorData()
LegoAnimTriggerItemLocatorData::~LegoAnimTriggerItemLocatorData()
LegoAnimTriggerItemLocatorData::~LegoAnimTriggerItemLocatorData()
LegoAnimTriggerItemLocatorData::OnEvent(CharAnimTriggerEvent, CharAnimTriggerUpdateData&) const
LegoAnimTriggerItemLocatorDataHelper::RegisterClasses(EdRegistry&)
LegoAnimTriggerItemLocatorDataHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
LegoAnimTriggerItemLocatorDataHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
EdRefCharAnimTriggerItemTypeData::~EdRefCharAnimTriggerItemTypeData()
EdRefLegoAnimTriggerScaleItemData::~EdRefLegoAnimTriggerScaleItemData()
CharAnimTriggerItemTypeDataHelper::~CharAnimTriggerItemTypeDataHelper()
LegoAnimTriggerScaleItemDataHelper::~LegoAnimTriggerScaleItemDataHelper()
LegoAnimTriggerItemModifierDataHelper::~LegoAnimTriggerItemModifierDataHelper()
LegoAnimTriggerItemTypeModifierDataHelper::~LegoAnimTriggerItemTypeModifierDataHelper()
LegoAnimTriggerItemLocatorDataHelper::~LegoAnimTriggerItemLocatorDataHelper()
LegoJointScripts::ActionJointSetEnabled(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
LegoJointScripts::JointSetEnabled(WORLDINFO&, char**, int, Gizmo*)
LegoJointScripts::ActionJointSetHingeState(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
LegoJointScripts::JointSetHingeState(WORLDINFO&, char**, int, Gizmo*)
LegoJointScripts::GizActionJointSetEnabled(Flow*, FlowObject*, char**, int)
LegoJointScripts::GizActionJointSetHingeState(Flow*, FlowObject*, char**, int)
LegoJointScripts::WakeUpJoint(Joint&)
TargetingInterfaceLegoSpecial::TargetingInterfaceLegoSpecial(LegoSpecial&)
TargetingInterfaceLegoSpecial::~TargetingInterfaceLegoSpecial()
TargetingInterfaceLegoSpecial::~TargetingInterfaceLegoSpecial()
TargetingInterfaceLegoSpecial::operator=(TargetingInterfaceLegoSpecial const&)
TargetingInterfaceLegoSpecial::GetLevelContainer() const
TargetingInterfaceLegoSpecial::GetLegoSpecial() const
TargetingInterfaceLegoSpecial::GetTargetName() const
TargetingInterfaceLegoSpecial::GetGameType()
TargetingInterfaceLegoSpecial::GetTargetPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceLegoSpecial::GetRadius() const
TargetingInterfaceLegoSpecial::GetPos(VuVec&, int) const
TargetingInterfaceLegoSpecial::GetCurrentPosition(VuVec&)
TargetingInterfaceLegoSpecial::SetCurrentPosition(VuVec&)
TargetingInterfaceLegoSpecial::GetTargetFloorPos(VuVec&)
TargetingInterfaceLegoSpecial::GetTargetMom(VuVec&, TARGETING_TYPE)
TargetingInterfaceLegoSpecial::GetTargetYRot()
TargetingInterfaceLegoSpecial::GetMtx(VuMtx&, int)
TargetingInterfaceLegoSpecial::DriveToMtx(VuMtx&, float)
TargetingInterfaceLegoSpecial::SetDynamic(bool, MechObjectData const&)
TargetingInterfaceLegoSpecial::DisableGravity(bool, MechObjectData const&)
TargetingInterfaceLegoSpecial::GetInterfaceType() const
TargetingInterfaceLegoSpecial::GetThrowingGlow()
LegoSpellItContextHandler::LegoSpellItContextHandler(MechCharacter&)
LegoSpellItContextHandler::SetTargetMom(int, LegoGamePad&, float, NUVEC*)
LegoSpellItContextHandler::OnHook(unsigned char, HookArgs*)
LegoSpellItContextHandler::~LegoSpellItContextHandler()
LegoContextHandlerBase<LegoSpellItContextHandler>::GetInstanceId() const
LegoContextHandlerBase<LegoSpellItContextHandler>::~LegoContextHandlerBase()
Action_RangedAttack(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
RangedAttack::RangedAttack(GameObject*, float, float, float, float, float, bool, bool, Brain::Pace)
RangedAttack::OnEnter(AIState*, GameObject&)
RangedAttack::CheckConditions(AIState*, GameObject&)
RangedAttack::Execute(AIState*, GameObject&)
RangedAttack::SelectOpponent(GameObject&)
FollowOpponent::FollowOpponent(GameObject*, float, float, float, Brain::Pace)
FollowOpponent::Execute(AIState*, GameObject&)
Attack::Attack(GameObject*, float, float, float, float, bool)
Attack::OnEnter(AIState*, GameObject&)
Attack::Execute(AIState*, GameObject&)
FollowOpponent::~FollowOpponent()
Attack::~Attack()
RangedAttack::~RangedAttack()
RangedAttack::~RangedAttack()
Idle::~Idle()
BalanceBeam_UpdateHint(WORLDINFO*, HINT_s*)
CanUseBeams(MechCharacter*)
CastForward(MechCharacter*, FirstPointCollector&, float)
SetupBeamExtents(MechCharacter*)
SetBalanceBeamMom(MechCharacter*, VuVec*, float)
SetupBeamBelowFeet(Entity const*, MechCharacter*)
SlidyBeam(MechCharacter*)
BalanceBeam_MoveCode(MechCharacter*)
FlowObjectGizmoHelper::Initialise()
FlowObjectGizmoHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectGizmoHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
FlowObjectGizmoHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowObjectGizmoHelper::GetParentObject(ClassObject const&)
FlowObjectGizmoHelper::~FlowObjectGizmoHelper()
EdRefFlowGizmoTarget::~EdRefFlowGizmoTarget()
EdRefFlowGizmoTarget::GetMemberObject(void*)
EdRefFlowTimerTarget::~EdRefFlowTimerTarget()
EdRefFlowTimerTarget::GetMemberObject(void*)
EdRefFlowRandomTarget::~EdRefFlowRandomTarget()
EdRefFlowRandomTarget::GetMemberObject(void*)
FlowGizmoRandomHelper::Initialise()
FlowGizmoRandomHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowGizmoRandomHelper::GetParentObject(ClassObject const&)
FlowGizmoRandomHelper::~FlowGizmoRandomHelper()
EdRefGizRandom::~EdRefGizRandom()
EdRefGizRandom::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefGizRandom::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
GizRandomOutputsRef::~GizRandomOutputsRef()
GizRandomOutputsRef::GetCount(void*)
GizRandomOutputsRef::SetCount(void*, unsigned int)
GizRandomOutputsRef::GetMaxCount(void*)
GizRandomOutputsRef::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
GizRandomOutputsRef::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowGizmoParams::~FlowGizmoParams()
FlowGizRandomParams::~FlowGizRandomParams()
FlowGizmoTargetHelper::Initialise()
FlowGizmoTargetHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowGizmoTargetHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FlowGizmoTargetHelper::GetParentObject(ClassObject const&)
FlowGizmoTargetHelper::~FlowGizmoTargetHelper()
EdRefGizFlow::~EdRefGizFlow()
EdRefGizFlow::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefGizFlow::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowGizmoTimerHelper::Initialise()
FlowGizmoTimerHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FlowGizmoTimerHelper::GetParentObject(ClassObject const&)
FlowGizmoTimerHelper::~FlowGizmoTimerHelper()
EdRefGizTimer::~EdRefGizTimer()
EdRefGizTimer::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefGizTimer::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
FlowGizTimerParams::~FlowGizTimerParams()
Hub_CutScenePlayerCreate(WORLDINFO&)
Hub_CutScenePlayerDestroy(WORLDINFO&)
HUBCUTSCENEPLAYER::HUBCUTSCENEPLAYER(LegoLevelContainer const&, bool)
HUBCUTSCENEPLAYER::~HUBCUTSCENEPLAYER()
HUBCUTSCENEPLAYER::MoveGameCamera(NUVEC&, NUVEC&) const
HubCutscenePlayer_GetObstacleIconForLevel(LegoLevelContainer const&, LEVELDATA const&)
HubCPCutsceneMenuItem::HubCPCutsceneMenuItem(LegoLevelContainer const&, CutsceneSeedInfo const&, bool)
HubCPCutsceneMenuItem::IsLocked() const
HubCPCutsceneMenuItem::OnSelect()
HUBCUTSCENEPLAYER::OnHighlightChange(HubCPMenuItemBase*, HubCPMenuItemBase*)
HubCPCutsceneMenuItem::GetTextString(char*, int) const
HubCPLevelMenuItem::GetTextString(char*, int) const
HubCPLevelMenuItem::HubCPLevelMenuItem(LegoLevelContainer const&, LEVELDATA const&, char const*)
HubCPLevelMenuItem::OnSelect()
HUBCUTSCENEPLAYER::UpdateMenu(MENU*)
HUBCUTSCENEPLAYER::DrawMenu(MENU*)
HUBCUTSCENEPLAYER::Draw(WORLDINFO&)
HUBCUTSCENEPLAYER::Draw()
HUBCUTSCENEPLAYER::EndMenu(MENU*)
HUBCUTSCENEPLAYER::SetActive(bool)
MenuEnterHubCutScenePlayer(MENU*)
MenuUpdateHubCutScenePlayer(MENU*)
MenuDrawHubCutScenePlayer(MENU*)
LegoMenuItem::~LegoMenuItem()
HubCPCutsceneMenuItem::~HubCPCutsceneMenuItem()
HubCPLevelMenuItem::~HubCPLevelMenuItem()
LegoMenuItem::IsLocked() const
PlayerIdToGameObj(int)
DynamicMaterialManager::StringToHash(char const*)
DynamicMaterialManager::IsDynamicMaterial(NuSmartPtr<NuMtl, true>)
DynamicMaterialManager::GetMaterial_Internal(char const*, char const*, int)
HiresTextureManager::IsLoaded(char const*, WORLDINFO*)
HiresTextureManager::DumpLevel(WORLDINFO*)
HiresTextureManager::GetTexture_Internal(char const*, WORLDINFO*)
RenderCylinderXZ(VuVec const&, float, float, int, unsigned int)
DrawCircleXZ(VuVec const&, float, unsigned int)
DrawCone(VuVec const&, VuVec const&, float, float, unsigned int, bool, NuSmartPtr<NuMtl, true>, bool)
DrawArrow(VuVec const&, VuVec&, unsigned int, float)
DrawArrowToEnd(VuVec const&, VuVec&, unsigned int, float)
PushSphere::Reset(VuVec&, VuMtx&)
PushSphere::GetWorldPos(VuVec&)
PushSphere::Net_WorldPos(VuVec&)
PushSphere::SetOffsetPos(VuVec&)
PushSphere::GetRelativeOffset(VuVec&, PushBoundary&)
PushSphere::ApplyNoise(float, float, float, float)
PushSphere::ApplyDamping(PushHandle&, PushBoundary&, VuVec&, VuVec&, float, WORLDINFO*)
PushHandle::GetPos(VuVec&, Entity**)
TransformScreenSpaceToPointOnPlaneWS(NuCamera const&, float, float, VuVec&, VuVec&, VuVec&)
PushSphere::Draw()
PushSphere::IsBeingDirectedTowards(VuVec&, PushBoundary&, PushHandle&)
PushSphere::IsBeingDirectedAway(VuVec&, PushBoundary&, PushHandle&)
PushSphere::Update(LevelContainer&, float, PushBoundary*, bool)
PushSphere::DestroyGlueJoint(LevelContainer&)
PushHandle::GetMinMax(VuVec&, VuVec&)
PushHandle::InFrontOfPlane(PushBoundary&)
PushSphere::UpdateGlueJoint(PushHandle&)
PushSphere::ApplyWorldAttraction(VuVec&)
PushSphere::CreateGlueJoint(LevelContainer&, PushHandle&)
PushSphere::Control(MechCharacter*, PushHandle&, PushBoundary&, VuVec&, float)
PushSphere::AccelRestrict(MechCharacter const&, VuVec const&, float, VuVec const&, VuVec&)
PushSphere::NET_CalculateForce(PushHandle&, PushBoundary&, VuVec&, VuVec&, float, WORLDINFO*)
PushHandle::GetMass()
PushSphere::CalculateForce(PushHandle&, PushBoundary&, VuVec&, VuVec&, float, WORLDINFO*)
PushSphere::CalculateAngVel(PushHandle&, PushBoundary&, VuVec&, float, NUQUAT&, int, int, VuMtx*)
PushSphere::CalculateAngVelXZ(PushHandle&, PushBoundary&, VuVec&, float)
PushSphere::CalculateAngVelY(PushHandle&, PushBoundary&, VuVec&, float)
PushHandle::GetNegativeGravityForce(VuVec&, WORLDINFO*)
OnRigidBodyList(Entity**, Entity*, int)
_GetConnected(int&, Entity**, LegoStudJoinList*, Entity*, int)
PushHandle::GetConnected(Entity**, int)
PushBoundary::Draw()
Levitation_PhysicsGrab_Reset()
Levitation_PhysicsGrab_Inactive()
Levitation_PhysicsGrab_Set(GameObject*, NUVEC*, float, int, AIConvexLocator*, int)
Levitation_PhysicsGrab_MoveCode(GameObject*)
Levitation_PhysicsGrab_SetTargetMom(MechCharacter*, unsigned short, LegoGamePad*, float, NUVEC*)
Text_SetLanguage_Game(int)
Text_DecodeButtons(char*, char*)
InitGameHintSys()
CalculateNumOfGameHintCharFlags(unsigned int)
GameHint_ProcessCharFlags(unsigned int, unsigned int, unsigned int)
Paddle_UpdateHint(HINT_s*)
ThrowItemsAtBosses_UpdateHint(HINT_s*)
GizItems_CanPickUp(HINT_s*)
LegoAbstractFlowInterface::CreateParams::CreateParams(LegoLevelContainer*)
LegoAbstractFlowInterface::LegoAbstractFlowInterface(LevelContainer*, NuIDString const*, int, char const*, char const*, short)
LegoAbstractFlowInterface::GetObject()
LegoAbstractFlowInterface::GetName()
LegoAbstractFlowInterface::GetHashedNameKey()
LegoAbstractFlowInterface::GetLedFile()
LegoAbstractFlowInterface::GetTypeName()
LegoAbstractFlowInterface::GetNumOutputs()
LegoAbstractFlowInterface::GetOutputName(int)
LegoAbstractFlowInterface::GetDefaultOutputIndex()
LegoAbstractFlowInterface::GetGizmoPrefix()
LegoAbstractFlowInterface::Activate(bool)
LegoAbstractFlowInterface::ActivateRev(int, int)
LegoAbstractFlowInterface::SetVisibility(int)
LegoAbstractFlowInterface::IsActive()
LegoAbstractFlowInterface::IsVisible()
LegoAbstractFlowInterface::AcquireSpecials()
LegoAbstractFlowInterface::Reset()
LegoAbstractFlowInterface::ActivateByComplexGizmo()
LegoAbstractFlowInterface::ResetForLoop()
LegoAbstractFlowInterface::GetTriggeredByPlayerId()
LegoAbstractFlowInterface::SetTriggeredByPlayerId(MechCharacter*)
LegoAbstractFlowInterface::GetBuilderOrigin(NUVEC*)
LegoAbstractFlowInterface::GetRotationMatrix(NUMTX&)
LegoAbstractFlowInterface::HideFromEditor()
LegoAbstractFlowInterface::~LegoAbstractFlowInterface()
NuKDOPBase::PlaneSpace(NuVector3Base const&, NuVector3Base&, NuVector3Base&)
NuKDOPBase::ClosestPointOnPlaneToOrigin(NuVector4Base const&)
NuKDOPBase::ClosestPointOnPlane(NuVector4Base const&, NuVector3Base const&)
NuKDOPBase::ClipPolyToPlanes(NuVector3Base const*, int, NuVector4Base const*, int, NuVector3Base*)
NuKDOPBase::AddTetraVolume(NuVector3Base const*)
NuKDOPBase::CalcPolygonForPlane(NuVector4Base const*, int, int, NuVector3Base*)
NuKDOPBase::GetVolume(NuVector4Base const*, int)
Nu6DOP::SetMinMax(int, NuScalarBase const&, NuScalarBase const&)
Nu6DOP::GeneratePlanes(NuVector4Base*) const
Nu6DOP::GetVolume() const
Nu6DOP::CalcPolygonForPlane(int, NuVector3Base*) const
Nu6DOP::Overlap(Nu6DOP const&) const
Nu6DOP::OverlapFrustum(NuMatrixBase const&, NuMatrixBase const*) const
Nu14DOP::SetMinMax(int, NuScalarBase const&, NuScalarBase const&)
Nu14DOP::GeneratePlanes(NuVector4Base*) const
Nu14DOP::GetVolume() const
Nu14DOP::CalcPolygonForPlane(int, NuVector3Base*) const
Nu14DOP::Overlap(Nu14DOP const&) const
Nu14DOP::OverlapFrustum(NuMatrixBase const&, NuMatrixBase const*) const
Nu18DOP::SetMinMax(int, NuScalarBase const&, NuScalarBase const&)
Nu18DOP::GeneratePlanes(NuVector4Base*) const
Nu18DOP::CalcPolygonForPlane(int, NuVector3Base*) const
Nu18DOP::GetVolume() const
Nu26DOP::SetMinMax(int, NuScalarBase const&, NuScalarBase const&)
Nu26DOP::GeneratePlanes(NuVector4Base*) const
Nu26DOP::GetVolume() const
Nu26DOP::CalcPolygonForPlane(int, NuVector3Base*) const
NuTexPacker::Pack(int, NuRect<int>*, int, int, bool)
NuTexPacker::Clear()
RectPredicate(NuRect<int> const*, NuRect<int> const*)
NuTexPacker::Fill(int, bool)
NuTexPacker::Split(int, int)
NuRect<int>::Split(NuRect<int> const&, NuRect<int>&, NuRect<int>&)
void NuQuickSortImp<NuRect<int>*>::QuickSortIterative<bool (*)(NuRect<int> const*, NuRect<int> const*), NuQuickSortDefaultSwap<NuRect<int>*> >(NuRect<int>**, int, bool (*)(NuRect<int> const*, NuRect<int> const*), NuQuickSortDefaultSwap<NuRect<int>*>)
NuPolyClip(int, VuVec const*, int&, VuVec*, VuMtx const&, unsigned short const*)
NuPolyClipScreen(int, VuVec*, int&, VuVec*)
NuPolyClippedFaceMeshBoundingBox(NUVEC4 const*, unsigned int, unsigned short const*, unsigned int, NUMTX const&, NUMTX const&, NUVEC&, NUVEC&)
NuPolyClippedEdgeMeshBoundingBox(NUVEC4 const*, unsigned int, unsigned short const*, unsigned int, NUMTX const&, NUMTX const&, NUVEC&, NUVEC&)
AspectRatioCorrectedSpace::SetAspectRatio(float)
AspectRatioCorrectedSpace::AspectRatioCorrectedSpace(float)
AspectRatioCorrectedSpace::ConvertTo(VuVec const&) const
AspectRatioCorrectedSpace::ConvertTo(NuVector3Base const&) const
AspectRatioCorrectedSpace::ConvertTo(NuVector4Base const&) const
AspectRatioCorrectedSpace::ConvertFrom(VuVec const&) const
AspectRatioCorrectedSpace::ConvertFrom(NuVector3Base const&) const
AspectRatioCorrectedSpace::ConvertFrom(NuVector4Base const&) const
TestNuMath()
NuUnknown::~NuUnknown()
NuUnknown::~NuUnknown()
NuUnknownDefaultBase::NuUnknownDefaultBase()
NuUnknownDefaultBase::~NuUnknownDefaultBase()
NuUnknownDefaultBase::~NuUnknownDefaultBase()
NuUnknownDefaultBase::GetRefCount() const
NuUnknownDefaultBase::AddRef()
NuUnknownDefaultBase::ReleaseRef()
NuUnknownDefaultBaseNoAutoDelete::NuUnknownDefaultBaseNoAutoDelete()
NuUnknownDefaultBaseNoAutoDelete::~NuUnknownDefaultBaseNoAutoDelete()
NuUnknownDefaultBaseNoAutoDelete::~NuUnknownDefaultBaseNoAutoDelete()
NuUnknownDefaultBaseNoAutoDelete::GetRefCount() const
NuUnknownDefaultBaseNoAutoDelete::AddRef()
NuUnknownDefaultBaseNoAutoDelete::ReleaseRef()
NuBackTrace::NuBackTrace(unsigned int)
NuBackTrace::~NuBackTrace()
NuSymbolQuery::NuSymbolQuery()
NuSymbolQuery::~NuSymbolQuery()
NuSymbolQuery::LookupSymbolName(void*, char*, unsigned int)
NuSerialize::DDSDebugField::DDSDebugField(char const*)
NuSerialize::DDSDebugField::~DDSDebugField()
NuHashMap<unsigned int, NuSerialize::FieldType>::~NuHashMap()
NuSerialize::StaticInit()
DefaultFieldTypeMap::Bind::Bind(DefaultFieldTypeMap&, NuSerialize::FieldType, NuSerialize::FieldType)
DefaultFieldTypeMap::AddMemToDataMapping(NuSerialize::FieldType, NuSerialize::FieldType)
DefaultFieldTypeMap::AddDataToMemMapping(NuSerialize::FieldType, NuSerialize::FieldType)
DefaultFieldTypeMap::GetDefaultDataType(NuSerialize::FieldType) const
DefaultFieldTypeMap::GetDefaultMemType(NuSerialize::FieldType) const
DefaultFieldTypeMap::DefaultFieldTypeMap()
DefaultFieldTypeMap::~DefaultFieldTypeMap()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<bool>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<bool>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<char>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<char>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<unsigned char>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<unsigned char>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<short>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<short>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<unsigned short>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<unsigned short>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<int>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<int>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<unsigned int>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<unsigned int>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<long>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<long>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<unsigned long>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<unsigned long>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<float>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<float>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuMatrixBase>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuMatrixBase>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuScalarBase>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuScalarBase>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuVector3Base>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuVector3Base>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuVector4Base>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuVector4Base>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuQuatBase>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuQuatBase>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<VuMtx>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<VuMtx>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuDynamicStringT<true> >()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuDynamicStringT<true> >()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuDynamicStringT<false> >()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuDynamicStringT<false> >()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuAlignedBuffer<16> >()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuAlignedBuffer<16> >()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuAlignedBuffer<32> >()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuAlignedBuffer<32> >()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<char const*>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<char const*>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NUMTX>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NUMTX>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NUVEC>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NUVEC>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NUVEC4>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NUVEC4>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<void>()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<void>()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuBitVector<8u, unsigned int> >()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuBitVector<8u, unsigned int> >()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuBitVector<16u, unsigned int> >()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuBitVector<16u, unsigned int> >()
NuSerialize::FieldType NuSerializeGetFieldTypeMem<NuBitVector<32u, unsigned int> >()
NuSerialize::FieldType const NuSerializeGetFieldTypeData<NuBitVector<32u, unsigned int> >()
NuSerializeGetFieldSize(NuSerialize::FieldType)
NuSerialize::CreateFieldType_FIELD_SCALAR_HW()
NuSerialize::CreateFieldType_FIELD_VEC3_HW()
NuSerialize::CreateFieldType_FIELD_VEC4_HW()
NuSerialize::CreateFieldType_FIELD_QUAT_HW()
NuSerialize::CreateFieldType_FIELD_MTX_HW()
NuSerialize::CreateFieldType_FIELD_SCALAR_SW()
NuSerialize::CreateFieldType_FIELD_VEC3_SW()
NuSerialize::CreateFieldType_FIELD_VEC4_SW()
NuSerialize::CreateFieldType_FIELD_QUAT_SW()
NuSerialize::CreateFieldType_FIELD_MTX_SW()
NuSerialize::CreateFieldType_FIELD_VUVEC()
NuSerialize::CreateFieldType_FIELD_VUMTX()
NuSerialize::CreateFieldType_FIELD_BITVECTOR_1x32()
NuSerialize::CreateFieldType_FIELD_NUVARARRAY()
NuSerialize::CreateFieldType_FIELD_NUSTRIPEDVARARRAY()
NuSerialize::CreateFieldType_FIELD_NUALIGNEDBUFFER_16()
NuSerialize::CreateFieldType_FIELD_NUALIGNEDBUFFER_32()
NuSerialize::CreateFieldType_FIELD_BOOL()
NuSerialize::CreateFieldType_FIELD_INT8()
NuSerialize::CreateFieldType_FIELD_UINT8()
NuSerialize::CreateFieldType_FIELD_INT16()
NuSerialize::CreateFieldType_FIELD_UINT16()
NuSerialize::CreateFieldType_FIELD_INT32()
NuSerialize::CreateFieldType_FIELD_UINT32()
NuSerialize::CreateFieldType_FIELD_INT64()
NuSerialize::CreateFieldType_FIELD_UINT64()
NuSerialize::CreateFieldType_FIELD_FLOAT32()
NuSerialize::CreateFieldType_FIELD_ENUM8()
NuSerialize::CreateFieldType_FIELD_ENUM16()
NuSerialize::CreateFieldType_FIELD_ENUM32()
NuSerialize::CreateFieldType_FIELD_NUVEC3()
NuSerialize::CreateFieldType_FIELD_NUVEC4()
NuSerialize::CreateFieldType_FIELD_NUMTX()
NuSerialize::CreateFieldType_FIELD_HASH()
NuSerialize::CreateFieldType_FIELD_BITFIELD_ENUM()
NuSerialize::CreateFieldType_FIELD_VECTOR()
NuSerialize::CreateFieldType_FIELD_LIST()
NuSerialize::CreateFieldType_FIELD_NUSTRING()
NuSerialize::CreateFieldType_FIELD_STRINGCONST()
NuSerialize::CreateFieldType_FIELD_NUDYNAMICSTRING_NOTHASHED()
NuSerialize::CreateFieldType_FIELD_NUDYNAMICSTRING_HASHED()
NuSerializeCreateField(NuSerialize::FieldType)
NuSerializeGetFieldAlignOf(NuSerialize::FieldType)
NuSerialize::IsTypeDDSCapable(NuSerialize::FieldType)
NuSerialize::IsContainerType(NuSerialize::FieldType)
NuSerialize::_SerializeArrayVec3(NuVector3Base*, unsigned int, char const*)
NuSerialize::_SerializeArrayVec4(NuVector4Base*, unsigned int, char const*)
NUIFF_TO_STRING(char*, unsigned int)
NuSerialize::PushBlockDDSSafe(unsigned int, int)
NuSerialize::PushBlock(unsigned int, int)
NuSerialize::Serialize4CC(int)
NuSerialize::GetFieldTypeFromIFFCode(unsigned int)
NuSerialize::SerializationErrorOccurred(char const*) const
NuHashMap<int, int>::~NuHashMap()
NuSystemTime::NuSystemTime()
NuSystemTime::Clear()
NuSystemTime::NuSystemTime(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
NuSystemTime::Validate()
NuSystemTime::NuSystemTime(NuSystemTime::CURRENT_TIME_ENUM)
NuSystemTime::NuSystemTime(NuSystemTime const&)
NuSystemTime::operator=(NuSystemTime const&)
NuSystemTime::AsString(NuFixedStringT<(unsigned short)32>&)
NuSystemTime::AsUnixTime() const
NuSystemTime::IsLeapYear(unsigned int)
NuSystemTime::GetDaysInMonth(unsigned int, bool)
NuSystemTime::FromUnixTime(unsigned long)
NuSystemTime::AsAndyDaviesTime()
NuSystemTime::operator!=(NuSystemTime const&)
NuSystemTime::operator==(NuSystemTime const&)
NuSystemTime::operator<(NuSystemTime const&)
NuSystemTime::operator>(NuSystemTime const&)
NuSystemTime::Serialize(NuSerialize&)
NuGetHostByName(char const*, unsigned int*)
NuINetNToA(char*, in_addr)
NuINetAToN(char const*, in_addr*)
NuClassStub::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass::GetRefCount() const
NuClass::AddRef()
NuClass::ReleaseRef()
NuClassStub::~NuClassStub()
NuClassCore::Field::FreeConstStrings()
NuClass::~NuClass()
non-virtual thunk to NuClassStub::~NuClassStub()
NuClassStub::~NuClassStub()
non-virtual thunk to NuClassStub::~NuClassStub()
NuClassAbstractInstance::GetRefCount() const
NuClassAbstractInstance::AddRef()
NuClassAbstractInstance::ReleaseRef()
NuClassCore::NuClassCore(char const*, unsigned int, unsigned char)
non-virtual thunk to NuClass::~NuClass()
NuClass::~NuClass()
non-virtual thunk to NuClass::~NuClass()
NuClassCore::Field::Field()
NuClassCore::Field::~Field()
NuHashMap<unsigned int, void (*)(NuSerialize::CallbackType, void*, void*)>::~NuHashMap()
NuClassCore::~NuClassCore()
NuClassCore::GetName() const
NuClassCore::GetMemorySize() const
NuClassCore::GetSerialSize() const
NuClassCore::AddField(unsigned int, NuSerialize::FieldType, NuSerialize::FieldType, NuString const&, unsigned int)
NuClassCore::PopulateLookupFromList()
NuClassCore::Display() const
NuClassCore::GetField(NuString const&) const
NuClassCore::FindFirstField() const
NuClassCore::FindNextField(NuClassCore::FieldSearchHandle&) const
NuHashMap<NuString, NuClassCore::Field*>::Clear()
NuHashMap<NuString, NuClassCore::Field*>::Insert(NuString const&, NuClassCore::Field* const&)
NuClassCore::PostSerializeFixup(NuSmartPtr<NuClassAbstractInstance, false>, bool)
NuClassCore::GetCallback(NuSerialize::CallbackType) const
NuClassCore::AddCallback(NuSerialize::CallbackType, void (*)(NuSerialize::CallbackType, void*, void*))
NuClassCore::Call(NuSerialize::CallbackType, void*, void*) const
NuClassCore::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<NuClassCore::Field>(NuVector<NuClassCore::Field>&, char const*)
NuClassCore::GetHash() const
NuClassCore::Field::GetHash() const
NuClassCore::AdvancePtr(void*&, unsigned long)
NuClassCore::AdvancePtr(void*&, unsigned long, unsigned int&)
NuClassCore::StreamNuClassPtr(void*&, NuSmartPtr<NuClass, false>&, bool, unsigned int&)
NuClassCore::ValidateReferencedDefinitions() const
NuClassCore::AddAlias(NuString&)
NuClassCore::Field::Serialize(NuSerialize&)
NuClass_NuClassDefinition::NuClass_NuClassDefinition()
NuClass_NuClassDefinition::~NuClass_NuClassDefinition()
NuClass_NuClassCoreField::NuClass_NuClassCoreField()
NuClass_NuClassCoreField::~NuClass_NuClassCoreField()
NuClassAbstractInstance::AddFieldData(NuString const&, unsigned long)
NuHashMap<NuString, NuClassAbstractInstance::FieldInstanceInfo>::Insert(NuString const&)
NuClassAbstractInstance::SetFieldNeedsFixup(NuString const&, bool)
NuClassAbstractInstance::GetFieldData(void*, NuString const&)
NuClassAbstractInstance::GetFieldData(NuString const&)
NuClassAbstractInstance::GetBaseAddress() const
NuClassAbstractInstance::AttachFieldObjectData(NuString const&, NuSmartPtr<NuClassAbstractInstance, false>&)
NuHashMap<NuString, NuVector<NuSmartPtr<NuClassAbstractInstance, false> > >::Insert(NuString const&)
NuClassAbstractInstance::GetAbstractContainerSize(void*, bool)
NuClassAbstractInstance::NuClassAbstractInstance()
NuClassAbstractInstance::~NuClassAbstractInstance()
NuClassAbstractInstance::~NuClassAbstractInstance()
NuClassAbstractInstance::GetName() const
NuClassAbstractInstance::GetField(NuString const&) const
NuClassAbstractInstance::GetVersion() const
NuClassAbstractInstance::GetFieldNeedsFixup(NuString const&) const
NuClassAbstractInstance::AreAllFieldsHandled() const
NuClassAbstractInstance::GetFieldValue(void*, NuString const&, NuVector3Base&)
NuClassAbstractInstance::GetFieldValue(NuString const&, NuVector3Base&)
NuClassAbstractInstance::GetFieldValue(void*, NuString const&, NuVector3Base*&, bool&)
NuClassAbstractInstance::GetFieldValue(NuString const&, NuVector3Base*&, bool&)
NuClassAbstractInstance::SetBaseAddress(void*)
NuClassAbstractInstance::DebugPrintSummary() const
NuClassAbstractInstance::GetFieldData(NuString const&, NuSmartPtr<NuClassAbstractInstance, false>&)
NuClassAbstractInstance::GetFieldData(NuString const&, NuVector<NuSmartPtr<NuClassAbstractInstance, false> >&)
NuVector<NuSmartPtr<NuClassAbstractInstance, false> >::operator=(NuVector<NuSmartPtr<NuClassAbstractInstance, false> > const&)
NuClassAbstractInstance::DereferenceAbstractPtr(void*, NuSerialize::FieldType)
NuClassAbstractInstance::AbstractFieldCount() const
NuClass::NuClass(char const*, unsigned int, unsigned char)
NuClassInstance::NuClassInstance(NuSmartPtr<NuClass, false>&, void*)
bool NuClassAbstractInstance::GetFieldData<bool>(NuString const&, NuVector<bool*>&)
NuVector<bool*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<bool>(NuString const&, bool*&)
bool NuClassAbstractInstance::GetFieldData<float>(NuString const&, NuVector<float*>&)
NuVector<float*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<float>(NuString const&, float*&)
bool NuClassAbstractInstance::GetFieldData<int>(NuString const&, NuVector<int*>&)
NuVector<int*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<int>(NuString const&, int*&)
bool NuClassAbstractInstance::GetFieldData<short>(NuString const&, NuVector<short*>&)
NuVector<short*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<short>(NuString const&, short*&)
bool NuClassAbstractInstance::GetFieldData<char>(NuString const&, NuVector<char*>&)
NuVector<char*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<char>(NuString const&, char*&)
bool NuClassAbstractInstance::GetFieldData<long>(NuString const&, NuVector<long*>&)
NuVector<long*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<long>(NuString const&, long*&)
bool NuClassAbstractInstance::GetFieldData<unsigned int>(NuString const&, NuVector<unsigned int*>&)
NuVector<unsigned int*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<unsigned int>(NuString const&, unsigned int*&)
bool NuClassAbstractInstance::GetFieldData<unsigned short>(NuString const&, NuVector<unsigned short*>&)
NuVector<unsigned short*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<unsigned short>(NuString const&, unsigned short*&)
bool NuClassAbstractInstance::GetFieldData<unsigned char>(NuString const&, NuVector<unsigned char*>&)
NuVector<unsigned char*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<unsigned char>(NuString const&, unsigned char*&)
bool NuClassAbstractInstance::GetFieldData<unsigned long>(NuString const&, NuVector<unsigned long*>&)
NuVector<unsigned long*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<unsigned long>(NuString const&, unsigned long*&)
bool NuClassAbstractInstance::GetFieldData<NuHash>(NuString const&, NuVector<NuHash*>&)
NuVector<NuHash*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuHash>(NuString const&, NuHash*&)
bool NuClassAbstractInstance::GetFieldData<NUVEC>(NuString const&, NuVector<NUVEC*>&)
NuVector<NUVEC*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NUVEC>(NuString const&, NUVEC*&)
bool NuClassAbstractInstance::GetFieldData<NuVector3Base>(NuString const&, NuVector<NuVector3Base*>&)
NuVector<NuVector3Base*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuVector3Base>(NuString const&, NuVector3Base*&)
bool NuClassAbstractInstance::GetFieldData<NUVEC4>(NuString const&, NuVector<NUVEC4*>&)
NuVector<NUVEC4*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NUVEC4>(NuString const&, NUVEC4*&)
bool NuClassAbstractInstance::GetFieldData<NuVector4Base>(NuString const&, NuVector<NuVector4Base*>&)
NuVector<NuVector4Base*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuVector4Base>(NuString const&, NuVector4Base*&)
bool NuClassAbstractInstance::GetFieldData<NUMTX>(NuString const&, NuVector<NUMTX*>&)
NuVector<NUMTX*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NUMTX>(NuString const&, NUMTX*&)
bool NuClassAbstractInstance::GetFieldData<NuMatrixBase>(NuString const&, NuVector<NuMatrixBase*>&)
NuVector<NuMatrixBase*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuMatrixBase>(NuString const&, NuMatrixBase*&)
bool NuClassAbstractInstance::GetFieldData<NuQuatBase>(NuString const&, NuVector<NuQuatBase*>&)
NuVector<NuQuatBase*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuQuatBase>(NuString const&, NuQuatBase*&)
bool NuClassAbstractInstance::GetFieldData<NuScalarBase>(NuString const&, NuVector<NuScalarBase*>&)
NuVector<NuScalarBase*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuScalarBase>(NuString const&, NuScalarBase*&)
bool NuClassAbstractInstance::GetFieldData<NuString>(NuString const&, NuVector<NuString*>&)
NuVector<NuString*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuString>(NuString const&, NuString*&)
bool NuClassAbstractInstance::GetFieldData<NuDynamicStringT<true> >(NuString const&, NuVector<NuDynamicStringT<true>*>&)
NuVector<NuDynamicStringT<true>*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuDynamicStringT<true> >(NuString const&, NuDynamicStringT<true>*&)
bool NuClassAbstractInstance::GetFieldData<NuDynamicStringT<false> >(NuString const&, NuVector<NuDynamicStringT<false>*>&)
NuVector<NuDynamicStringT<false>*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuDynamicStringT<false> >(NuString const&, NuDynamicStringT<false>*&)
bool NuClassAbstractInstance::GetFieldData<VuMtx>(NuString const&, NuVector<VuMtx*>&)
NuVector<VuMtx*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<VuMtx>(NuString const&, VuMtx*&)
bool NuClassAbstractInstance::GetFieldData<NuBitVector<32u, unsigned int> >(NuString const&, NuVector<NuBitVector<32u, unsigned int>*>&)
NuVector<NuBitVector<32u, unsigned int>*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuBitVector<32u, unsigned int> >(NuString const&, NuBitVector<32u, unsigned int>*&)
bool NuClassAbstractInstance::GetFieldData<NuBitVector<16u, unsigned int> >(NuString const&, NuVector<NuBitVector<16u, unsigned int>*>&)
NuVector<NuBitVector<16u, unsigned int>*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuBitVector<16u, unsigned int> >(NuString const&, NuBitVector<16u, unsigned int>*&)
bool NuClassAbstractInstance::GetFieldData<NuBitVector<8u, unsigned int> >(NuString const&, NuVector<NuBitVector<8u, unsigned int>*>&)
NuVector<NuBitVector<8u, unsigned int>*>::Reserve(unsigned int, bool)
bool NuClassAbstractInstance::GetFieldData<NuBitVector<8u, unsigned int> >(NuString const&, NuBitVector<8u, unsigned int>*&)
bool NuClassInstance::GetFieldData<bool>(NuString const&, bool*&)
bool NuClassInstance::GetFieldData<float>(NuString const&, float*&)
bool NuClassInstance::GetFieldData<int>(NuString const&, int*&)
bool NuClassInstance::GetFieldData<short>(NuString const&, short*&)
bool NuClassInstance::GetFieldData<char>(NuString const&, char*&)
bool NuClassInstance::GetFieldData<long>(NuString const&, long*&)
bool NuClassInstance::GetFieldData<unsigned int>(NuString const&, unsigned int*&)
bool NuClassInstance::GetFieldData<unsigned short>(NuString const&, unsigned short*&)
bool NuClassInstance::GetFieldData<unsigned char>(NuString const&, unsigned char*&)
bool NuClassInstance::GetFieldData<unsigned long>(NuString const&, unsigned long*&)
bool NuClassInstance::GetFieldData<NuHash>(NuString const&, NuHash*&)
bool NuClassInstance::GetFieldData<NUVEC>(NuString const&, NUVEC*&)
bool NuClassInstance::GetFieldData<NuVector3Base>(NuString const&, NuVector3Base*&)
bool NuClassInstance::GetFieldData<NUVEC4>(NuString const&, NUVEC4*&)
bool NuClassInstance::GetFieldData<NuVector4Base>(NuString const&, NuVector4Base*&)
bool NuClassInstance::GetFieldData<NUMTX>(NuString const&, NUMTX*&)
bool NuClassInstance::GetFieldData<NuMatrixBase>(NuString const&, NuMatrixBase*&)
bool NuClassInstance::GetFieldData<NuQuatBase>(NuString const&, NuQuatBase*&)
bool NuClassInstance::GetFieldData<NuScalarBase>(NuString const&, NuScalarBase*&)
bool NuClassInstance::GetFieldData<NuString>(NuString const&, NuString*&)
bool NuClassInstance::GetFieldData<NuDynamicStringT<true> >(NuString const&, NuDynamicStringT<true>*&)
bool NuClassInstance::GetFieldData<NuDynamicStringT<false> >(NuString const&, NuDynamicStringT<false>*&)
bool NuClassInstance::GetFieldData<VuMtx>(NuString const&, VuMtx*&)
bool NuClassInstance::GetFieldData<NuBitVector<32u, unsigned int> >(NuString const&, NuBitVector<32u, unsigned int>*&)
bool NuClassInstance::GetFieldData<NuBitVector<16u, unsigned int> >(NuString const&, NuBitVector<16u, unsigned int>*&)
bool NuClassInstance::GetFieldData<NuBitVector<8u, unsigned int> >(NuString const&, NuBitVector<8u, unsigned int>*&)
NuClassStub::CreateObject() const
NuClassStub::CreateObjectArray(unsigned int) const
NuClassStub::PlacementNew(void*) const
NuClassStub::SerializeObjectIn(NuArchive&, void*) const
NuClassStub::PreSerializeFixup(void*, bool) const
NuClass_NuClassDefinition::~NuClass_NuClassDefinition()
NuClass_NuClassDefinition::CreateObject() const
NuClass_NuClassDefinition::CreateObjectArray(unsigned int) const
NuClass_NuClassDefinition::PlacementNew(void*) const
NuClass_NuClassDefinition::SerializeObjectIn(NuArchive&, void*) const
NuClass_NuClassDefinition::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_NuClassDefinition::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_NuClassDefinition::~NuClass_NuClassDefinition()
non-virtual thunk to NuClass_NuClassDefinition::~NuClass_NuClassDefinition()
NuClassCore::NuClassCore()
NuClassCore::~NuClassCore()
NuClassDefinition::~NuClassDefinition()
NuClass_NuClassCoreField::~NuClass_NuClassCoreField()
NuClass_NuClassCoreField::CreateObject() const
NuClass_NuClassCoreField::CreateObjectArray(unsigned int) const
NuClass_NuClassCoreField::PlacementNew(void*) const
NuClass_NuClassCoreField::SerializeObjectIn(NuArchive&, void*) const
NuClass_NuClassCoreField::PostSerializeFixup(void*, NuSmartPtr<NuClassAbstractInstance, false>, bool) const
NuClass_NuClassCoreField::PreSerializeFixup(void*, bool) const
non-virtual thunk to NuClass_NuClassCoreField::~NuClass_NuClassCoreField()
non-virtual thunk to NuClass_NuClassCoreField::~NuClass_NuClassCoreField()
NuVector<NuClassCore::Field>::ReSize(unsigned int, bool)
NuVector<NuClassCore::Field>::Reserve(unsigned int, bool)
NuVector<NuSmartPtr<NuClassAbstractInstance, false> >::Reserve(unsigned int, bool)
NuHashMap<NuString, NuClassAbstractInstance::FieldInstanceInfo>::Clear()
NuList<NuHashMapNode<NuString, NuVector<NuSmartPtr<NuClassAbstractInstance, false> > > >::Clear()
NuClassManager::RegisterNuClass(NuSmartPtr<NuClass, false>&)
NuClassRegistry::RegisterClass(NuSmartPtr<NuClass, false>)
NuClassManager::RegisterClassAlias(NuSmartPtr<NuClass, false>&, NuString&)
NuClassRegistry::RegisterClassAlias(NuSmartPtr<NuClass, false>, NuString&)
NuClassManager::UnregisterNuClass(NuSmartPtr<NuClass, false>)
NuClassRegistry::UnregisterClass(NuSmartPtr<NuClass, false>)
NuClassManager::FindClass(NuString const&)
NuClassRegistry::FindClass(NuString const&)
NuClassManager::DebugDisplay()
NuClassRegistry::DebugDisplay()
NuClassManager::GetDelayedRegistrationClassList(NuList<NuSmartPtr<NuClass, false> >&)
NuClassRegistry::GetDelayedRegistrationClassList(NuList<NuSmartPtr<NuClass, false> >&)
NuClassManager::RegisterEdClasses()
NuClassRegistry::RegisterEdClasses()
NuClassManager::ValidateDatabase()
NuClassRegistry::ValidateDatabase() const
NuHashMap<NuString, NuSmartPtr<NuClass, false> >::Insert(NuString const&, NuSmartPtr<NuClass, false> const&)
NuHashMap<NuString, NuSmartPtr<NuClass, false> >::Erase(NuString const&)
NuClassRegistry::DeleteAllClassDefinitions()
NuClassBuilder::NuClassBuilder(NuSmartPtr<NuClass, false>)
NuClassBuilder::ProcessRegistrationOfObjectField(void*, char const*, char const*, bool)
NuClassBuilder::AddressToOffset(void const*)
NuClassBuilder::ProcessFixupOfContainedObjectField(char const*, bool)
NuClassBuilder::ProcessFixupOfContainedPrimField(NuSerialize::FieldType, bool)
NuClassBuilder::_BeginClass_USE_VIA_MACRO_(void*, char const*, unsigned short, unsigned long)
NuClassBuilder::_EndClass_USE_VIA_MACRO_()
NuClassBuilder::HandleType(NuSerialize::FieldType, NuSerialize::FieldType, void const*, char const*, unsigned int)
NuClassBuilder::IsFieldRegistrationAllowed() const
NuClassBuilder::HandleInt8(signed char*, char const*, unsigned int)
NuClassBuilder::HandleInt8(signed char**, char const*, unsigned int)
NuClassBuilder::HandleInt16(short*, char const*, unsigned int)
NuClassBuilder::HandleInt16(short**, char const*, unsigned int)
NuClassBuilder::HandleInt32(int*, char const*, unsigned int)
NuClassBuilder::HandleInt32(int**, char const*, unsigned int)
NuClassBuilder::HandleInt64(long*, char const*, unsigned int)
NuClassBuilder::HandleInt64(long**, char const*, unsigned int)
NuClassBuilder::HandleUInt8(unsigned char*, char const*, unsigned int)
NuClassBuilder::HandleUInt8(unsigned char**, char const*, unsigned int)
NuClassBuilder::HandleUInt16(unsigned short*, char const*, unsigned int)
NuClassBuilder::HandleUInt16(unsigned short**, char const*, unsigned int)
NuClassBuilder::HandleUInt32(unsigned int*, char const*, unsigned int)
NuClassBuilder::HandleUInt32(unsigned int**, char const*, unsigned int)
NuClassBuilder::HandleUInt64(unsigned long*, char const*, unsigned int)
NuClassBuilder::HandleUInt64(unsigned long**, char const*, unsigned int)
NuClassBuilder::HandleFloat32(float*, char const*, unsigned int)
NuClassBuilder::HandleFloat32(float**, char const*, unsigned int)
NuClassBuilder::HandleBool(bool*, char const*, unsigned int)
NuClassBuilder::HandleBool(bool**, char const*, unsigned int)
NuClassBuilder::HandleScalar(NuScalarBase*, char const*, unsigned int)
NuClassBuilder::HandleScalar(NuScalarBase**, char const*, unsigned int)
NuClassBuilder::HandleVec3(NUVEC*, char const*, unsigned int)
NuClassBuilder::HandleVec3(NUVEC**, char const*, unsigned int)
NuClassBuilder::HandleVec3(NuVector3Base*, char const*, unsigned int)
NuClassBuilder::HandleVec3(NuVector3Base**, char const*, unsigned int)
NuClassBuilder::HandleVec4(NuVector4Base*, char const*, unsigned int)
NuClassBuilder::HandleVec4(NuVector4Base**, char const*, unsigned int)
NuClassBuilder::HandleVec4(NUVEC4*, char const*, unsigned int)
NuClassBuilder::HandleVec4(NUVEC4**, char const*, unsigned int)
NuClassBuilder::HandleQuat(NuQuatBase*, char const*, unsigned int)
NuClassBuilder::HandleQuat(NuQuatBase**, char const*, unsigned int)
NuClassBuilder::HandleMtx(VuMtx*, char const*, unsigned int)
NuClassBuilder::HandleMtx(VuMtx**, char const*, unsigned int)
NuClassBuilder::HandleMtx(NUMTX*, char const*, unsigned int)
NuClassBuilder::HandleMtx(NUMTX**, char const*, unsigned int)
NuClassBuilder::HandleMtx(NuMatrixBase*, char const*, unsigned int)
NuClassBuilder::HandleMtx(NuMatrixBase**, char const*, unsigned int)
NuClassBuilder::HandleMtx43(NuMatrixBase*, char const*, unsigned int)
NuClassBuilder::HandleMtx43(NuMatrixBase**, char const*, unsigned int)
NuClassBuilder::HandleHash(NuHash*, char const*, unsigned int)
NuClassBuilder::HandleHash(NuHash**, char const*, unsigned int)
NuClassBuilder::HandleString(NuString*, char const*, unsigned int)
NuClassBuilder::HandleString(NuString**, char const*, unsigned int)
NuClassBuilder::HandleString(NuDynamicStringT<true>*, char const*, unsigned int)
NuClassBuilder::HandleString(NuDynamicStringT<true>**, char const*, unsigned int)
NuClassBuilder::HandleString(NuDynamicStringT<false>*, char const*, unsigned int)
NuClassBuilder::HandleString(NuDynamicStringT<false>**, char const*, unsigned int)
SizeToEnumType(unsigned long)
NuClassBuilder::HandleEnum8(signed char*, char const*, unsigned int, unsigned long)
NuClassBuilder::HandleEnum16(short*, char const*, unsigned int, unsigned long)
NuClassBuilder::HandleEnum32(int*, char const*, unsigned int, unsigned long)
NuClassBuilder::BeginObject(char const*)
NuClassBuilder::EndObject()
NuClassBuilder::BeginBaseClass(char const*, long)
NuClassBuilder::EndBaseClass()
NuClassBuilder::BeginArray(char const*, unsigned int)
NuClassBuilder::EndArray()
NuClassBuilder::BeginContainer(void const*, NuSerialize::FieldType, NuSerialize::FieldType, char const*)
NuClassBuilder::EndContainer()
NuClassBuilder::BeginLegacySizedContainer(void const*, NuSerialize::FieldType, NuSerialize::FieldType, char const*, unsigned int)
NuClassBuilder::EndLegacySizedContainer()
NuClassBuilder::ConvertAbsoluteAddressToRelativeOffset(void const*, unsigned long, unsigned int)
NuClassBuilder::BeginBitfield(char const*, NuSerialize::FieldType)
NuClassBuilder::EndBitfield()
NuClassBuilder::BeginBitfieldEnum(char const*, NuSerialize::FieldType)
NuClassBuilder::EndBitfieldEnum()
NuClassBuilder::IsLoading() const
NuClassBuilder::IsStoring() const
NuClassBuilder::GetPosition() const
NuClassBuilder::HandleIRef(NuIRef*, char const*, NuSerialize::FieldType, unsigned int, void*)
NuClassBuilder::BeginVersionBlock()
NuClassBuilder::EndVersionBlock()
NuClassBuilder::HandleBitVector(void*, char const*, unsigned int, unsigned int)
NuClassBuilder::HandleConstString(char const**, char const*, unsigned int)
NuClassBuilder::SerializeAddress(void*&, unsigned int&, unsigned int, unsigned char&)
NuClassBuilder::BeginPtrAddr(void*)
NuClassBuilder::EndPtrAddr()
NuClassBuilder::RegisterClassNameAlias(char const*)
NuClassBuilder::IsLastGenMode() const
NuClassBuilder::GetPipeType() const
NuClassBuilder::IsSafeToDereferenceMembers() const
NuClassBuilder::StoreLink(void*, unsigned int, unsigned char)
NuClassBuilder::HandleBuffer(NuAlignedBuffer<16>*, char const*, unsigned int)
NuClassBuilder::HandleBuffer(NuAlignedBuffer<32>*, char const*, unsigned int)
NUVEC::Serialize(NuSerialize&)
NUVEC4::Serialize(NuSerialize&)
NUMTX::Serialize(NuSerialize&)
NuSimpleJob_GlobalJob(void*)
NuSimpleJob::removeGroup(NuSimpleJobGroup*)
NuSimpleJobThread::NuSimpleJobThread(NuThreadCreateParameters*, NuSimpleJob*)
NuSimpleJobThread::addJobs(unsigned int, NuSimpleJobParams*)
NuSimpleJob::NuSimpleJob()
NuSimpleJob::initialise()
NuSimpleJob::startup(NuSimpleJobInitParams)
NuSimpleJob::shutdown()
NuSimpleJob::isStarted()
NuSimpleJob::pause()
NuSimpleJob::resume()
NuSimpleJob::isPaused()
NuSimpleJob::addJob(NuSimpleJobParams*)
NuSimpleJob::addJobs(unsigned int, NuSimpleJobParams*, NuSimpleJobGroup const*)
NuSimpleJob::getNextThread()
std::__1::deque<NuSimpleJobParams, std::__1::allocator<NuSimpleJobParams> >::__add_back_capacity()
std::__1::__split_buffer<NuSimpleJobParams*, std::__1::allocator<NuSimpleJobParams*> >::push_back(NuSimpleJobParams*&&)
std::__1::__split_buffer<NuSimpleJobParams*, std::__1::allocator<NuSimpleJobParams*> >::push_front(NuSimpleJobParams*&&)
std::__1::__split_buffer<NuSimpleJobParams*, std::__1::allocator<NuSimpleJobParams*>&>::push_back(NuSimpleJobParams*&&)
std::__1::__split_buffer<NuSimpleJobParams*, std::__1::allocator<NuSimpleJobParams*>&>::push_front(NuSimpleJobParams* const&)
NuCheckSum::NuCheckSum(int, void const*)
NuCheckSum::NuCheckSum(int, int*, void const**)
NuCheckSum::IsZero() const
NuCheckSum::Compare(NuCheckSum const&) const
NuCheckSum::ToString(char*) const
NuCheckSum::ToString(NuDynamicStringT<false>&) const
NuCheckSum::FromString(char const*)
NuCheckSum::ToU32() const
NuCheckSum::ToU64() const
NuCheckSum::Serialize(NuSerialize&)
NuDisciplineGetStr(NuDiscipline)
NuDisciplineGetColour(NuDiscipline, float&, float&, float&)
NuLinkTracker::NuLinkTracker()
NuLinkTracker::~NuLinkTracker()
NuLinkTracker::Destroy()
NuLinkTracker::Init(unsigned int)
NuLinkTracker::LoadLink(unsigned int, unsigned int&, unsigned char&, void*&)
NuLinkTracker::ReplaceLink(unsigned int, unsigned int, unsigned char, void*)
NuLinkTracker::StoreLinkV3(void*, bool, unsigned int const&, unsigned char, unsigned int&)
NuLinkTracker::StoreLink(void*, bool, unsigned int const&, unsigned char)
NuLinkTracker::SerializeAbstractAddress(bool, void*&, void*&, unsigned int&, unsigned int const&, unsigned char&, unsigned int&)
NuLinkTracker::SerializeAddress(NuAbstractPipe*, bool, bool, void*&, unsigned int&, unsigned int const&, unsigned char&)
NuLinkTracker::SerializeAddressV3(NuAbstractPipe*, bool, bool, void*&, unsigned int&, unsigned int&, unsigned char&)
AbstractMemoryTracker::Init()
AbstractMemoryTracker::Destroy()
AbstractMemoryTracker::BeginPtr(unsigned int)
AddPtrs(void*, void*)
AbstractMemoryTracker::EndPtr()
AbstractMemoryTracker::GetCurrentOffsetFromPtrStart() const
AbstractMemoryTracker::BeginClass(NuSmartPtr<NuClass, false>&)
AbstractMemoryTracker::CreateAbstractInstance()
AbstractMemoryTracker::EndClass()
AbstractMemoryTracker::GetCurrentClassInstance() const
AbstractMemoryTracker::BeginField(NuString const&)
AbstractMemoryTracker::GetCurrentOffsetFromClassStart() const
AbstractMemoryTracker::EndField()
AbstractMemoryTracker::AbstractMemoryTracker(NuLinkTracker&)
NuVector<void**>::Reserve(unsigned int, bool)
NuVector<NuSmartPtr<NuClassAbstractInstance, false> >::NuVector(NuVector<NuSmartPtr<NuClassAbstractInstance, false> > const&)
NuArchive::RegisterClassNameAlias(char const*)
DebugSerializeField(bool, bool, char const*)
DebugSerializeHdr(bool, char const*)
DebugSerializeClass(bool, bool, char const*)
NuClassTracker::NuClassTracker()
NuClassTracker::~NuClassTracker()
NuClassTracker::Destroy()
NuListNodeDDS::AllocateAndLinkNodes(NuListDataCore*, unsigned int, unsigned char, NuSmartPtr<NuClass, false>)
NuArchive::SerializationErrorOccurred(char const*) const
NuArchive::GetFilename() const
NuArchive::_BeginClass_USE_VIA_MACRO_(void*, char const*, unsigned short, unsigned long)
NuArchive::IsGeneratingAHash() const
StreamControl::StreamObject(char const*, char const*, void*, bool, NuArchive&, AbstractMemoryTracker&)
NuArchive::_EndClass_USE_VIA_MACRO_()
NuArchive::BeginObject(char const*)
NuArchive::EndObject()
NuArchive::BeginBaseClass(char const*, long)
NuArchive::EndBaseClass()
NuArchive::BeginArray(char const*, unsigned int)
NuArchive::EndArray()
NuArchive::BeginContainer(void const*, NuSerialize::FieldType, NuSerialize::FieldType, char const*)
NuArchive::EndContainer()
NuArchive::BeginLegacySizedContainer(void const*, NuSerialize::FieldType, NuSerialize::FieldType, char const*, unsigned int)
NuArchive::EndLegacySizedContainer()
NuArchive::BeginVersionBlock()
NuArchive::EndVersionBlock()
NuArchive::HandleInt8(signed char*, char const*, unsigned int)
NuArchive::_PipeStreamInt8(NuAbstractPipe*, signed char*, NuArchive::eLoadState, unsigned int)
NuArchive::HandleInt8(signed char**, char const*, unsigned int)
NuArchive::HandleEnum8(signed char*, char const*, unsigned int, unsigned long)
NuArchive::HandleEnum16(short*, char const*, unsigned int, unsigned long)
NuArchive::_PipeStreamInt16(NuAbstractPipe*, short*, NuArchive::eLoadState)
NuArchive::HandleBitVector(void*, char const*, unsigned int, unsigned int)
NuArchive::HandleEnum32(int*, char const*, unsigned int, unsigned long)
NuArchive::_PipeStreamInt32(NuAbstractPipe*, int*, NuArchive::eLoadState)
NuArchive::HandleBool(bool*, char const*, unsigned int)
NuArchive::_PipeStreamBool(NuAbstractPipe*, bool*, NuArchive::eLoadState)
NuArchive::HandleBool(bool**, char const*, unsigned int)
NuArchive::HandleInt16(short*, char const*, unsigned int)
NuArchive::HandleInt16(short**, char const*, unsigned int)
NuArchive::HandleInt32(int*, char const*, unsigned int)
NuArchive::HandleInt32(int**, char const*, unsigned int)
NuArchive::HandleInt64(long*, char const*, unsigned int)
NuArchive::_PipeStreamInt64(NuAbstractPipe*, long*, NuArchive::eLoadState)
NuArchive::HandleInt64(long**, char const*, unsigned int)
NuArchive::HandleUInt8(unsigned char*, char const*, unsigned int)
NuArchive::_PipeStreamUInt8(NuAbstractPipe*, unsigned char*, NuArchive::eLoadState)
NuArchive::HandleUInt8(unsigned char**, char const*, unsigned int)
NuArchive::HandleUInt16(unsigned short*, char const*, unsigned int)
NuArchive::_PipeStreamUInt16(NuAbstractPipe*, unsigned short*, NuArchive::eLoadState)
NuArchive::HandleUInt16(unsigned short**, char const*, unsigned int)
NuArchive::HandleUInt32(unsigned int*, char const*, unsigned int)
NuArchive::_PipeStreamUInt32(NuAbstractPipe*, unsigned int*, NuArchive::eLoadState)
NuArchive::HandleUInt32(unsigned int**, char const*, unsigned int)
NuArchive::HandleUInt64(unsigned long*, char const*, unsigned int)
NuArchive::_PipeStreamUInt64(NuAbstractPipe*, unsigned long*, NuArchive::eLoadState)
NuArchive::HandleUInt64(unsigned long**, char const*, unsigned int)
NuArchive::HandleFloat32(float*, char const*, unsigned int)
NuArchive::_PipeStreamFloat32(NuAbstractPipe*, float*, NuArchive::eLoadState)
NuArchive::HandleFloat32(float**, char const*, unsigned int)
NuArchive::HandleHash(NuHash*, char const*, unsigned int)
NuArchive::_PipeStreamHash(NuAbstractPipe*, NuHash*, NuArchive::eLoadState)
NuArchive::HandleHash(NuHash**, char const*, unsigned int)
NuArchive::HandleVec3(NUVEC*, char const*, unsigned int)
NuArchive::_PipeStreamVec3(NuAbstractPipe*, NUVEC*, NuArchive::eLoadState)
NuArchive::HandleVec3(NUVEC**, char const*, unsigned int)
NuArchive::HandleVec3(NuVector3Base*, char const*, unsigned int)
NuArchive::_PipeStreamVec3(NuAbstractPipe*, NuVector3Base*, NuArchive::eLoadState)
NuArchive::HandleVec3(NuVector3Base**, char const*, unsigned int)
NuArchive::HandleVec4(NUVEC4*, char const*, unsigned int)
NuArchive::_PipeStreamVec4(NuAbstractPipe*, NUVEC4*, NuArchive::eLoadState)
NuArchive::HandleVec4(NUVEC4**, char const*, unsigned int)
NuArchive::HandleVec4(NuVector4Base*, char const*, unsigned int)
NuArchive::_PipeStreamVec4(NuAbstractPipe*, NuVector4Base*, NuArchive::eLoadState)
NuArchive::HandleVec4(NuVector4Base**, char const*, unsigned int)
NuArchive::HandleMtx(VuMtx*, char const*, unsigned int)
NuArchive::_PipeStreamMtx44(NuAbstractPipe*, VuMtx*, NuArchive::eLoadState)
NuArchive::HandleMtx(VuMtx**, char const*, unsigned int)
NuArchive::HandleMtx(NUMTX*, char const*, unsigned int)
NuArchive::_PipeStreamMtx44(NuAbstractPipe*, NUMTX*, NuArchive::eLoadState)
NuArchive::HandleMtx(NUMTX**, char const*, unsigned int)
NuArchive::HandleMtx(NuMatrixBase*, char const*, unsigned int)
NuArchive::_PipeStreamMtx44(NuAbstractPipe*, NuMatrixBase*, NuArchive::eLoadState)
NuArchive::HandleMtx(NuMatrixBase**, char const*, unsigned int)
NuArchive::HandleMtx43(NuMatrixBase*, char const*, unsigned int)
NuArchive::_PipeStreamMtx43(NuAbstractPipe*, NuMatrixBase*, NuArchive::eLoadState)
NuArchive::HandleMtx43(NuMatrixBase**, char const*, unsigned int)
NuArchive::HandleQuat(NuQuatBase*, char const*, unsigned int)
NuArchive::_PipeStreamQuat(NuAbstractPipe*, NuQuatBase*, NuArchive::eLoadState)
NuArchive::HandleQuat(NuQuatBase**, char const*, unsigned int)
NuArchive::HandleScalar(NuScalarBase*, char const*, unsigned int)
NuArchive::_PipeStreamScalar(NuAbstractPipe*, NuScalarBase*, NuArchive::eLoadState)
NuArchive::HandleScalar(NuScalarBase**, char const*, unsigned int)
NuArchive::HandleString(NuString*, char const*, unsigned int)
NuArchive::_PipeStreamBufferU16I8(NuAbstractPipe*, NuString*, NuArchive::eLoadState)
NuArchive::HandleString(NuString**, char const*, unsigned int)
NuArchive::HandleString(NuDynamicStringT<true>*, char const*, unsigned int)
NuArchive::_PipeStreamBufferU16I8(NuAbstractPipe*, NuDynamicStringT<true>*, NuArchive::eLoadState)
NuArchive::HandleString(NuDynamicStringT<true>**, char const*, unsigned int)
NuArchive::HandleString(NuDynamicStringT<false>*, char const*, unsigned int)
NuArchive::_PipeStreamBufferU16I8(NuAbstractPipe*, NuDynamicStringT<false>*, NuArchive::eLoadState)
NuArchive::HandleString(NuDynamicStringT<false>**, char const*, unsigned int)
NuArchive::HandleBuffer(NuAlignedBuffer<16>*, char const*, unsigned int)
NuArchive::_PipeStreamBufferU32I8(NuAbstractPipe*, NuAlignedBuffer<16>*, NuArchive::eLoadState, NuLinkTracker*)
NuArchive::HandleBuffer(NuAlignedBuffer<32>*, char const*, unsigned int)
NuArchive::_PipeStreamBufferU32I8(NuAbstractPipe*, NuAlignedBuffer<32>*, NuArchive::eLoadState, NuLinkTracker*)
NuArchive::HandleString(NuAbstractPipe*, char const*, unsigned int)
NuArchive::_PipeStreamBufferU16I8(NuAbstractPipe*, NuAbstractPipe*, NuArchive::eLoadState)
NuArchive::HandleConstString(char const**, char const*, unsigned int)
NuArchive::_PipeStreamBufferU16I8(NuAbstractPipe*, char const**, NuArchive::eLoadState)
NuArchive::NuArchive()
NuArchive::Init(NuFile*, NuArchive::eLoadState, unsigned int&)
NuArchive::AttachFilePipe(NuFile*, NuArchive::eLoadState, unsigned int&)
NuArchive::DetachFilePipe()
NuArchive::HasFourCCHeader(NuFile*)
NuArchive::Open(NuFile*, NuArchive::eLoadState)
NuArchive::Open(NuFile*, unsigned int, NuArchive::eLoadState)
NuArchive::NuArchive(NuFile*, NuArchive::eLoadState)
NuArchive::NuArchive(NuAbstractPipe&, NuArchive::eLoadState)
NuArchive::~NuArchive()
NuArchive::Close()
NuArchive::~NuArchive()
NuArchive::StoreLink(void*, unsigned int, unsigned char)
NuArchive::LoadLink(unsigned int, unsigned int&, unsigned char&)
NuArchive::IsLoading() const
NuArchive::IsStoring() const
NuArchive::GetPipeType() const
NuArchive::GetPosition() const
StreamControl::AddReplacement(char const*, char const*)
StreamControl::ClearReplacements()
StreamControl::SerializeClassHdrDecision(StreamControlParams&, NuSmartPtr<NuClass, false>&, NuSmartPtr<NuClass, false>&)
NuArchive::PipeStreamClassDefinitionV3(NuArchive&, NuSmartPtr<NuClass, false>&, NuSmartPtr<NuClass, false>&)
NuClassTracker::FindClass(NuString const&)
StreamControl::PopulateSCPFromDataField(StreamControlParams&, NuClassCore::Field const&)
StreamControl::PopulateSCPFromMemField(StreamControlParams&, NuClassCore::Field const&, NuClassCore::Field const&)
DDSDebugBreakIfNeeded(NuClassCore::Field const&)
StreamControl::_StreamMemObjectFieldV3Typed(StreamControlParams&)
NuArchive::__PipeStreamPtrObjectFieldV3Typed(StreamControlParams&, unsigned int&, NuSmartPtr<NuClass, false>&)
StreamControl::_StreamMemObjectFieldV3Abstract(StreamControlParams&)
NuArchive::__PipeStreamPtrObjectFieldV3Abstract(StreamControlParams&, unsigned int&, NuSmartPtr<NuClass, false>&)
NuArchive::_SerializeContainerHeaderTyped(NuArchive&, unsigned int&, NuContainer::EID)
NuArchive::_StreamMemVectorContainerFieldV3Typed(StreamControlParams&)
NuArchive::__PipeStreamPtrPrimFieldV3Typed(StreamControlParams&, unsigned int&)
NuArchive::_StreamMemNuVarArrayContainerFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemNuStripedVarArrayContainerFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemListContainerFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemVectorContainerFieldV3Abstract(StreamControlParams&)
NuArchive::__PipeStreamPtrPrimFieldV3Abstract(StreamControlParams&, unsigned int&)
NuArchive::_StreamUInt32(void*, unsigned int*, bool)
NuArchive::_PipeStreamScalar(NuAbstractPipe*, float*, NuArchive::eLoadState)
NuArchive::_StreamScalar(void*, NuScalarBase*, bool)
NuArchive::_StreamFloat32(void*, float*, bool)
NuArchive::_StreamQuat(void*, NuQuatBase*, bool)
NuArchive::_StreamVec3(void*, NuVector3Base*, bool)
NuArchive::_StreamInt8(void*, signed char*, bool, unsigned int)
NuArchive::_StreamVec4(void*, NuVector4Base*, bool)
NuArchive::_StreamVec3(void*, NUVEC*, bool)
NuArchive::_StreamVec4(void*, NUVEC4*, bool)
NuArchive::_PipeStreamBool(NuAbstractPipe*, signed char*, NuArchive::eLoadState)
NuArchive::_PipeStreamInt8(NuAbstractPipe*, short*, NuArchive::eLoadState)
NuArchive::_PipeStreamInt8(NuAbstractPipe*, int*, NuArchive::eLoadState)
NuArchive::_PipeStreamMtx44(NuAbstractPipe*, float*, NuArchive::eLoadState)
NuArchive::_PipeStreamMtx43(NuAbstractPipe*, float*, NuArchive::eLoadState)
NuArchive::_PipeStreamQuat(NuAbstractPipe*, float*, NuArchive::eLoadState)
NuArchive::_PipeStreamVec4(NuAbstractPipe*, float*, NuArchive::eLoadState)
NuArchive::_PipeStreamVec3(NuAbstractPipe*, float*, NuArchive::eLoadState)
NuArchive::_StreamMtx44(void*, NuMatrixBase*, bool)
NuArchive::_StreamMtx43(void*, NuMatrixBase*, bool)
NuArchive::_StreamMtx44(void*, VuMtx*, bool)
NuArchive::_StreamMtx44(void*, NUMTX*, bool)
NuArchive::_PipeStreamInt16(NuAbstractPipe*, int*, NuArchive::eLoadState)
NuArchive::_StreamConstStringI8(void*, char const*&, bool, unsigned int)
NuArchive::_PipeStreamConstStringI8(NuAbstractPipe*, char const**, NuArchive::eLoadState, unsigned int)
NuArchive::_PipeStreamBufferU32I8(NuAbstractPipe*, char const*&, NuArchive::eLoadState)
NuArchive::_StreamBufferU32I8(void*&, char const*&, bool, unsigned int&)
NuArchive::_PipeStreamBufferU32I8(NuAbstractPipe*, void*, NuArchive::eLoadState, unsigned int&)
NuArchive::_StreamBufferU32I8(void*&, NuAlignedBuffer<32>*, bool, unsigned int&)
NuArchive::_StreamBufferU32I8(void*&, NuAlignedBuffer<16>*, bool, unsigned int&)
NuArchive::__StreamAbstractFieldPtr(void*&, void*&, NuSerialize::FieldType, bool, unsigned int&, NuLinkTracker&, unsigned int&)
NuArchive::_PipeStreamFloat32(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamQuat(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamMtx43(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamBufferU16I8(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamScalar(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamVec4(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamVec3(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamMtx44(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamBool(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_StreamBool(void*, bool*, bool)
NuArchive::_StreamBool(void*, signed char*, bool)
NuArchive::_StreamBool(void*, int*, bool)
NuArchive::_PipeStreamInt8(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamUInt8(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamInt16(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamUInt16(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamEnum8(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamEnum16(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamEnum32(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamInt32(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamUInt32(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamInt64(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_PipeStreamUInt64(NuAbstractPipe*, void*, NuArchive::eLoadState, NuSerialize::FieldType)
NuArchive::_StreamMemBoolFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemInt8FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemUInt8FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemInt16FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemUInt16FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemInt32FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemUInt32FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemInt64FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemUInt64FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemFloat32FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemEnum8FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemEnum16FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemEnum32FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemScalarHWFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemVec3HWFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemVec4HWFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemQuatHWFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemMtxHWFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemScalarSWFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemVec3SWFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemVec4SWFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemQuatSWFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemMtxSWFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemNUVEC3FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemNUVEC4FieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemVuVecFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemNUMTXFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemVUMTXFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemBitVectorFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemStringFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemConstStringFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemDynamicStringFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemDynamicStringHashedFieldV3Typed(StreamControlParams&)
NuArchive::_StreamMemBoolFieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemInt8FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemUInt8FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemInt16FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemUInt16FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemInt32FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemUInt32FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemInt64FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemUInt64FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemFloat32FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemEnum8FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemEnum16FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemEnum32FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemScalarFieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemVec3FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemVec4FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemQuatFieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemMtx44FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemMtx43FieldV3Abstract(StreamControlParams&)
NuArchive::_StreamMemStringFieldV3Abstract(StreamControlParams&)
NuClassTracker::SerializeClassDefinition(NuArchive&, NuSmartPtr<NuClass, false>&)
NuClassTracker::RegisterClass(NuSmartPtr<NuClass, false>)
NuClassTracker::InitRegistry()
NuArchive::SerializeAddress(void*&, unsigned int&, unsigned int, unsigned char&)
NuArchiveVersionClass::NuArchiveVersionClass(NuArchive&, unsigned int)
NuArchiveVersionClass::~NuArchiveVersionClass()
NuArchive::_StreamFloat32(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamVec3(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamVec4(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamQuat(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamScalar(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamMtx44(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamMtx43(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamBool(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamBool(void*, unsigned char*, bool)
NuArchive::_StreamBool(void*, unsigned int*, bool)
NuArchive::_StreamBool(void*, short*, bool)
NuArchive::_StreamBool(void*, unsigned short*, bool)
NuArchive::_StreamBool(void*, long*, bool)
NuArchive::_StreamBool(void*, unsigned long*, bool)
NuArchive::_StreamInt8(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamInt8(void*, short*, bool)
NuArchive::_StreamInt8(void*, int*, bool)
NuArchive::_StreamInt8(void*, bool*, bool)
NuArchive::_StreamInt8(void*, unsigned char*, bool)
NuArchive::_StreamInt8(void*, unsigned short*, bool)
NuArchive::_StreamInt8(void*, unsigned int*, bool)
NuArchive::_StreamInt8(void*, long*, bool)
NuArchive::_StreamInt8(void*, unsigned long*, bool)
NuArchive::_StreamInt16(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamInt16(void*, short*, bool)
NuArchive::_StreamInt16(void*, int*, bool)
NuArchive::_StreamInt16(void*, signed char*, bool)
NuArchive::_StreamInt16(void*, bool*, bool)
NuArchive::_StreamInt16(void*, unsigned short*, bool)
NuArchive::_StreamInt16(void*, unsigned char*, bool)
NuArchive::_StreamInt16(void*, unsigned int*, bool)
NuArchive::_StreamInt16(void*, long*, bool)
NuArchive::_StreamInt16(void*, unsigned long*, bool)
NuArchive::_StreamInt32(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamInt32(void*, int*, bool)
NuArchive::_StreamInt32(void*, unsigned int*, bool)
NuArchive::_StreamInt32(void*, long*, bool)
NuArchive::_StreamInt32(void*, unsigned long*, bool)
NuArchive::_StreamInt32(void*, bool*, bool)
NuArchive::_StreamInt32(void*, signed char*, bool)
NuArchive::_StreamInt32(void*, short*, bool)
NuArchive::_StreamInt32(void*, unsigned char*, bool)
NuArchive::_StreamInt32(void*, unsigned short*, bool)
NuArchive::_StreamInt64(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamInt64(void*, long*, bool)
NuArchive::_StreamInt64(void*, unsigned long*, bool)
NuArchive::_StreamInt64(void*, signed char*, bool)
NuArchive::_StreamInt64(void*, short*, bool)
NuArchive::_StreamInt64(void*, int*, bool)
NuArchive::_StreamInt64(void*, bool*, bool)
NuArchive::_StreamInt64(void*, unsigned char*, bool)
NuArchive::_StreamInt64(void*, unsigned short*, bool)
NuArchive::_StreamInt64(void*, unsigned int*, bool)
NuArchive::_StreamUInt8(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamUInt8(void*, unsigned char*, bool)
NuArchive::_StreamUInt8(void*, signed char*, bool)
NuArchive::_StreamUInt8(void*, short*, bool)
NuArchive::_StreamUInt8(void*, int*, bool)
NuArchive::_StreamUInt8(void*, bool*, bool)
NuArchive::_StreamUInt8(void*, unsigned short*, bool)
NuArchive::_StreamUInt8(void*, unsigned int*, bool)
NuArchive::_StreamUInt8(void*, long*, bool)
NuArchive::_StreamUInt8(void*, unsigned long*, bool)
NuArchive::_StreamUInt16(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamUInt16(void*, unsigned short*, bool)
NuArchive::_StreamUInt16(void*, short*, bool)
NuArchive::_StreamUInt16(void*, unsigned char*, bool)
NuArchive::_StreamUInt16(void*, unsigned int*, bool)
NuArchive::_StreamUInt16(void*, signed char*, bool)
NuArchive::_StreamUInt16(void*, int*, bool)
NuArchive::_StreamUInt16(void*, bool*, bool)
NuArchive::_StreamUInt16(void*, long*, bool)
NuArchive::_StreamUInt16(void*, unsigned long*, bool)
NuArchive::_StreamUInt32(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamUInt32(void*, int*, bool)
NuArchive::_StreamUInt32(void*, unsigned long*, bool)
NuArchive::_StreamUInt32(void*, unsigned char*, bool)
NuArchive::_StreamUInt32(void*, unsigned short*, bool)
NuArchive::_StreamUInt32(void*, long*, bool)
NuArchive::_StreamUInt32(void*, signed char*, bool)
NuArchive::_StreamUInt32(void*, short*, bool)
NuArchive::_StreamUInt32(void*, bool*, bool)
NuArchive::_StreamUInt64(void*, void*, bool, NuSerialize::FieldType)
NuArchive::_StreamUInt64(void*, unsigned long*, bool)
NuArchive::_StreamUInt64(void*, long*, bool)
NuArchive::_StreamUInt64(void*, unsigned int*, bool)
NuArchive::_StreamUInt64(void*, unsigned char*, bool)
NuArchive::_StreamUInt64(void*, unsigned short*, bool)
NuArchive::_StreamUInt64(void*, signed char*, bool)
NuArchive::_StreamUInt64(void*, short*, bool)
NuArchive::_StreamUInt64(void*, int*, bool)
NuArchive::_StreamUInt64(void*, bool*, bool)
NuArchive::_ConvertBoolToInt16(bool*, short*, bool)
NuArchive::SetDiscipline(NuDiscipline)
NuArchive::GetDiscipline()
NuArchive::IsLastGenMode() const
NuArchive::BeginBitfield(char const*, NuSerialize::FieldType)
NuArchive::EndBitfield()
NuArchive::BeginBitfieldEnum(char const*, NuSerialize::FieldType)
NuArchive::EndBitfieldEnum()
NuArchive::IsSafeToDereferenceMembers() const
NuArchive::BeginPtrAddr(void*)
NuArchive::EndPtrAddr()
NuVector<NuSerialize::FieldContext>::Reserve(unsigned int, bool)
NuHashMap<NuString, NuSmartPtr<NuClass, false> >::~NuHashMap()
NuFilePipe::~NuFilePipe()
NuFilePipe::~NuFilePipe()
NuFilePipe::NuFilePipe(NuFile*, bool)
NuFilePipe::ReadBytes(char*, unsigned int)
NuFilePipe::PushBytes(unsigned int)
NuFilePipe::WriteBytes(char const*, unsigned int)
NuFilePipe::GetPosition() const
NuFilePipe::Close()
NuFilePipe::GetPipeType() const
NuFilePipe::IsEOS() const
NuCompress(NuCompressMode, void*, int, void*, int, int&)
NuDecompress(NuCompressMode, void*, int, void*, int, int&)
NuGetDecompressedSize(NuCompressMode, void const*, int)
NuCompressFile(NuCompressMode, char const*, char const*)
NuDecompressFile(NuCompressMode, char const*, char const*)
NuLoadTimer::BeginSectionScoped(char const*, NuLoadTimer::Scoped&)
NuLoadTimer::Initialize()
NuLoadTimer::BeginSection(char const*)
NuLoadTimer::EndSection()
NuLoadTimer::FrameEnd()
strCharOccurrences(char const*, char)
WriteXmlAttribute(NuFile*, char const*, char const*)
WriteXmlTagEnd(NuFile*, eXmlTagEnd, char const*)
WriteXmlTimeAttribute(NuFile*, NuLoadBlock*, eXmlBlockType)
WriteXmlDataAttribute(NuFile*, NuLoadBlock*, eXmlBlockType)
WriteXmlOpenTag(NuFile*, NuLoadBlock*, eXmlBlockType)
WriteChildXmlTag(NuFile*, NuLoadBlock*)
CalculateUnknownValues(NuLoadBlock*)
NuLoadTimer::HandleDumpXml()
NuLoadTimer::HandleDump()
NuLoadTimer::HandleReset()
NuLoadTimer::Reset()
NuLoadTimer::DebugDraw()
NuInitHeap()
NuOnlineInit()
NuOnlineAchievementsFinishedLoadingPS()
NuOnlineAchievementsFinishedLoading()
NuOnlineLoadAchievements(char*)
NuOnlineUpdate()
NuOnlineErrorInDLC()
NuOnlineSetErrorInDLC(int, char*)
NuOnlineGetErrorInDLCName()
NuOnlineSignInPlayer()
NuOnlineAchievementAchieved(int, void (*)(int, int))
NuOnlineAchievementAchievedEx(int, int, void (*)(int, int))
NuOnlineEnableAchievementUnlock(bool)
NuOnlineSetPresenceMode(int)
NuOnlineSetPresenceModeEx(int, int)
NuOnlineSetDefaultPresenceMode(int)
NuOnlineSetContext(int, int)
NuOnlineSetContextEx(int, int, int)
NuOnlineSetDefaultContext(int, int)
NuOnlineSetProperty(int, int, void*)
NuOnlineSetPropertyEx(int, int, int, void*)
NuVector<NUGENERICPAD>::~NuVector()
NuPad_IsDroppedInPort(int)
NuPadGetMaxGamePads()
NuApiPadEventData::NuApiPadEventData(int, int)
NuPadMapping::NuPadMapping()
NuPadMapping::MapToNoPort()
NuPadMapping::MapToPort(int)
NuPadMapping::IsMappedToPort()
NUPAD::NUPAD(int)
NUPAD::NUPAD()
NUPAD::~NUPAD()
NuPadActivate(int)
NuPad_SetDroppedInPlayer(int, bool)
NuPadDeactivate(int)
NuPadGetPort(int, bool)
NuPadRemoveMapping(int)
NuPad_IsDroppedInPlayer(int)
NuPadSetValid(int, int)
NuPadProcessReadData(NUGENERICPAD*)
NuPadSetMaxGamePads(int)
UnmapPadsWhichAreNotLocked()
NUGENERICPAD::IsMappedToPlayer()
NUGENERICPAD::MapToNoPlayer()
NuPadSysUIDismissed()
NuPadUpdatePads(float)
NuPadRecordPlay(NUGENERICPAD*)
NUGENERICPAD::AnyButtonOrStickPressed()
NuPadRecordEnd()
NUGENERICPAD::MapToPlayer(int)
NuPadSystem::Update()
NuPadGetPlayer(int)
NuPadPortUsedByPlayer(int)
NuPadInit()
NuPadAnyButtonPressed()
NuPadClearInput(NUPAD*)
NuPadRead(NUPAD*)
NuPadSetMotors(NUPAD*, int, int)
NuPadResetState(int)
NuPadSystem::ClearAllMapping()
NuPadRecordStart()
NuPadRecordEndFrame(float)
NuPadRecordSave(char*)
NuPadRecordLoad(char*, nuvariptr_u*, nuvariptr_u)
NuPadRecordInit(int, char*, nuvariptr_u*, nuvariptr_u, int)
NuPadRecordSetPlayEndButtons(int)
NuPadRecordSetRecordEndButtons(int)
NuPs2ApplyDeadZone(int, int)
NUGENERICPAD::AnyButtonPressed()
NuPadAutoRepeat::NuPadAutoRepeat()
NuPadAutoRepeat::ProcessPad(float, NUPAD&)
NuPadMapBestKnownGamePadForPlayer(int)
Input_SetCtrlStringPlayer(int)
Input_GetCtrlStringPlayer()
Input_PushCtrlStringPlayer(int)
Input_PopCtrlStringPlayer()
NuPadSystem::NuPadSystem()
NuThreadQueue<NuPadRequest*, 64ul>::NuThreadQueue()
NuPadSystem::RecoverPrimaryPlayer()
NuPadSystem::FindNewControllerForUser(int)
NuPadSystem::IsPortRequested(int) const
NuPadSystem::HandleQueue()
NuPadSystem::MappingsPortMappedToPlayer(int) const
NuPadSystem::EventNotify(Event&, NuEventData&)
NuPadSystem::ClearMapping(int)
NuPadSystem::~NuPadSystem()
NuPadSystem::~NuPadSystem()
NuPadSystem::OnUserAdded(OnUserEventData const&)
NuPadSystem::OnUserRemoved(OnUserEventData const&)
NuPadSystem::OnControllerAdded(OnGamepadEventData const&)
NuPadSystem::OnControllerRemoved(OnGamepadEventData const&)
NuPadSystem::OnControllerPairingChange()
NuApiPadEventData::~NuApiPadEventData()
NuVector<NUGENERICPAD>::Reserve(unsigned int, bool)
NuPlayerProfileManager::NuPlayerProfileManager()
NuVector<NuPlayerProfile*>::Reserve(unsigned int, bool)
NuPlayerProfileManager::~NuPlayerProfileManager()
NuPlayerProfileManager::~NuPlayerProfileManager()
NuPlayerProfileManager::Create()
NuPlayerProfileManager::Get()
NuPlayerProfileManager::Destroy()
NuPlayerProfileManager::Initialise()
NuPlayerProfileManager::AddToSignedInPlayers(NuPlayerProfile*, bool)
NuPlayerProfileManager::Shutdown()
NuPlayerProfileManager::Update()
NuPlayerProfileManager::SubscribeToSignInChangedEvent(IEventListener&, bool, unsigned int)
NuPlayerProfileManager::EventNotify(Event&, NuEventData&)
NuPlayerProfileManager::GetUserNameByPlayerIndex(NuDynamicStringT<false>&, int)
NuPlayerProfileManager::GetUserNameByPort(NuDynamicStringT<false>&, int)
NuPlayerProfileManager::GetPlayerProfileByPort(int)
NuPlayerProfileManager::GetShortUserNameByPlayerIndex(NuDynamicStringT<false>&, int)
NuPlayerProfileManager::GetShortUserNameByPort(NuDynamicStringT<false>&, int)
NuPlayerProfileManager::SetProfileChangeRequestFatal(bool)
NuPlayerProfileManager::IsProfileChangeRequestFatal()
NuPlayerProfileManager::SetProfileSignInEnabled(bool)
NuPlayerProfileManager::IsProfileSignInEnabled() const
NuPlayerProfileManager::GetPlayerProfileByPlayerIndex(int)
NuPlayerProfileManager::PortFromPlayerIndex(int)
NuPlayerProfileManager::PlayerIndexFromPort(int)
NuPlayerProfileManager::GetPrimaryProfilePort()
NuPlayerProfileManager::HasPrimaryProfileUser()
NuPlayerProfileManager::AddGamePad(int, int)
NuPlayerProfileManager::ResetProfilePadMapping()
NuPlayerProfileManager::SignoutAllProfiles()
NuPlayerProfileManager::RefreshProfiles(NuPlayerProfile::RefreshReason)
NuPlayerProfileManager::GetPrimaryProfile()
NuPlayerProfileManager::RemapPlayerToPort(int, int)
NuPlayerProfileManager::RemovePlayerByPort(int)
NuPlayerProfileManager::RemovePlayerByPlayerIndex(int)
NuPlayerProfileManager::CreatePlayerProfile()
NuPlayerProfileManager::InvalidUser(int)
NuPlayerProfileManager::OnUserAdded(NuInputDevice*)
NuPlayerProfileManager::OnUserRemoved(NuInputDevice*)
NuPlayerProfileManager::OnControllerPairingChange(NuInputDevice*)
NuPlayerProfile::NuPlayerProfile()
NuPlayerProfile::Reset()
NuPlayerProfile::Clear()
NuPlayerProfile::Refresh(NuPlayerProfile::RefreshReason)
NuPlayerProfile::PrimaryPlayer()
NuPlayerProfile::HasMultiplayerPrivilege()
NuPlayerProfile::HasMarketplacePrivilege()
NuPlayerProfile::GetUserName(NuDynamicStringT<false>&)
NuSubStringMaxLength(NuDynamicStringT<false> const&, NuDynamicStringT<false>&, int)
NuDynamicStringT<false>::SubStr(NuString const&, unsigned short, unsigned short)
NuPlayerProfile::GetShortUserName(NuDynamicStringT<false>&)
NuPlayerProfile::~NuPlayerProfile()
NuPlayerProfile::~NuPlayerProfile()
NuPlayerProfile::IsOnline() const
NuPlayerProfile::IsSignedInLocally()
NuPlayerProfile::IsValid() const
NuProfiler::NuProfiler()
NuProfiler::~NuProfiler()
NuProfiler::SingletonInit()
NuProfiler::NewFrameCPU()
NuProfiler::FramePop(NuProfiler::ThreadInfo*)
NuProfiler::FramePush(NuProfiler::ThreadInfo*)
NuProfiler::Push(NuProfiler::ThreadInfo*, char const*, unsigned int*)
NuProfiler::PauseFrameCPU()
NuProfiler::PauseCPU()
NuProfiler::ResumeFrameCPU()
NuProfiler::ResumeCPU()
NuProfiler::NewFrameGPU(int, unsigned int, unsigned int)
NuProfiler::Push(NuProfiler::ThreadInfo*, char const*, unsigned int*, float, float)
NuProfiler::Pop(NuProfiler::ThreadInfo*)
NuProfiler::DeleteTree(NuProfiler::TimeTree*)
NuProfiler::PushCPU(char const*, unsigned int*)
NuProfiler::PopCPU()
NuProfiler::PushGPU(int, char const*, unsigned int, unsigned int)
NuProfiler::PopGPU(int)
NuProfiler::SetGPU(int, char const*, unsigned int, unsigned int)
NuProfiler::TimeTree::Push(NuProfiler::TimeNode*, bool)
NuProfiler::TogglePause()
NuProfiler::IsPaused()
NuProfiler::DeleteTreeNode(NuProfiler::TimeNode*)
NuProfiler::DrawString(int, int, unsigned int, char const*)
NuProfiler::DrawStringV(int, int, unsigned int, char const*, ...)
NuProfiler::DrawBar(int, int, int, int, unsigned int)
NuProfiler::DrawNodeText(int, int, NuProfiler::TimeNode*, int, char const*)
NuProfiler::DrawTimeBar(int, int, NuProfiler::TimeNode*, float)
NuProfiler::DrawNodeChildren(int, NuProfiler::TimeNode*, int, int)
NuProfiler::DrawTreeNodeAndChildren(int, NuProfiler::TimeNode*, int, int, NuProfiler::TimeNode*)
NuProfiler::DrawNodeChildrenEx(int, NuProfiler::TimeNode*, int, int)
NuProfiler::DrawTreeNode(int, NuProfiler::TimeNode*, int, int, NuProfiler::TimeNode*, char const*)
NuProfiler::DrawTree(int, NuProfiler::TimeTree*)
NuProfiler::DrawGraphBars(float, int)
NuProfiler::DrawGraph(float, float*, int, int, unsigned int)
NuProfiler::DrawGUI()
NuProfiler::ProcessCursorControl(float, NUPAD*, int, int)
NuProfiler::ProcessPad(float, NUPAD*)
NuProfiler::FindThread(char const*)
NuProfiler::GetFrameTimeMilliseconds(char const*)
NuProfiler::ThreadInfo::AllocHistoryBuffer()
ProfilerSpecifc_DynamicPoolEventHandler::AllocatePage(NuMemoryPool*, unsigned long, unsigned long, char const*)
ProfilerSpecifc_DynamicPoolEventHandler::ReleasePage(NuMemoryPool*, void*)
ProfilerSpecifc_DynamicPoolEventHandler::ForceReleasePage(NuMemoryPool*, void*)
ProfilerSpecifc_DynamicPoolEventHandler::AllocateLargeBlock(NuMemoryPool*, unsigned long, unsigned long, char const*)
ProfilerSpecifc_DynamicPoolEventHandler::FreeLargeBlock(NuMemoryPool*, void*)
NuFileFilter::NuFileFilter()
NuFileFilter::SetRoot(NuString const&)
NuFileFilter::SetPlatform(PLATFORMS_SUPPORTED)
NuFileFilter::BeginExtensionSet(NuString const&, bool)
NuList<NuFileFilter::NuExtensionSet>::PushFront(NuFileFilter::NuExtensionSet const&)
NuFileFilter::Extension(NuString const&)
NuFileFilter::Extension(PLATFORMS_SUPPORTED, NuString const&)
NuFileFilter::IncludeFolder(NuString const&)
NuFileFilter::IncludeFolder(PLATFORMS_SUPPORTED, NuString const&)
NuFileFilter::ExcludeFolder(NuString const&)
NuFileFilter::IncludeFile(NuString const&)
NuFileFilter::ExcludeFile(NuString const&)
NuFileFilter::FolderIncluded(NuString const&) const
NuFileFilter::FolderExcluded(NuString const&) const
NuFileFilter::FileExcluded(NuString const&) const
NuFileFilter::FileIncluded(NuString const&, int*, int*, bool*) const
NuFileFilter::CalculateMostLikelyExtension(NuString const&) const
NuFileTable::NuFileTable()
NuFileTable::Clear()
NuFileTable::~NuFileTable()
NuFileTable::BeginFiles(int)
NuFileTable::AddFile(NuString const&, unsigned long, unsigned long, unsigned long, int, NuCheckSum, NuCheckSum, bool)
NuFileTable::NameToHash(NuString const&)
NuFileTable::EndFiles(NuFileTree&, bool)
NuFileTree::BeginFiles()
NuFileTree::AddFile(NuString const&)
NuFileTree::EndFiles(NuFileTable*)
NuFileTree::FindFileIndex(char const*) const
NuFileTree::CalculateCommonRootPath(NuDynamicStringT<false>&)
NuFileTable::ComparePathsInvariant(NuString const&, NuString const&) const
NuFileTable::FindHash(unsigned int) const
NuFileTable::FindHash(unsigned int, char const*) const
NuFileTable::FindHash(char const*) const
NuFileTable::GetFileInfo(NuString const&, NUDATFINFO&) const
NuFileTable::GetFileInfo(unsigned int, NUDATFINFO&) const
NuFileTable::GetDatFileIndex(unsigned int) const
NuFileTable::GetFileIndex(NuString const&) const
NuFileTable::GetFileIndex(NuString const&, bool&) const
NuFileTable::GetReadChecksum(NuString const&)
NuFileTable::GetWriteChecksum(NuString const&)
NuFileTree::Serialize(NuSerialize&)
NuFileTree::NuFileTree()
NuFileTree::Clear()
NuTree<NuFileTree::StringIndex>::Clear()
NuFileTree::~NuFileTree()
NuFileTree::FindNodeIndex(char const*) const
NuFileTable::GetFilePackMode(unsigned int) const
GeneratePackModeDebugString(int)
NuFileTable::SerializeDatInfo(NuFile*, NuFileFilter*)
NuFileTable::Serialize(NuSerialize&)
void NuSerialize::_SerializeVector<NuCheckSum>(NuVector<NuCheckSum>&, char const*)
NuFileTable::ClearTempFileList()
NuFileTable::ClearFileTreeNameIndices()
NuFileTree::FindFilename(NuString const&, bool)
NuFileTree::FindFilename(char const*, bool)
NuFileTree::GetChild(NUDFNODE*)
NuFileTree::GetIndex(NUDFNODE*)
NuFileTree::AddChild(NUDFNODE*, NUDFNODE*)
NuFileTree::GetSibling(NUDFNODE*)
NuFileTree::CreateRoot(int)
NuFileTree::InsertChild(NUDFNODE*, NuString const&)
NuFileTree::AddFileDynamic(NuString const&)
NuFileTree::GetFilename(NuFixedStringT<(unsigned short)512>&, NuIterator<NuFileTree::StringIndex, NuTreeIteratorBase<NuFileTree::StringIndex> > const&)
NuFileTree::GetFileListRecursive(NuDynamicStringT<false>&, int, NuList<NuDynamicStringT<false> >&)
NuFileTree::GetFileList(NuList<NuDynamicStringT<false> >&)
NuFileTree::GetFilename(NuFixedStringT<(unsigned short)512>&, int)
NuFileTree::GetNumFiles() const
NuVector<SIgnoredExtension>::~NuVector()
NuFileTree::BuildFromFolderRecursive(NuString const&, NuString const&, int, NuFileFilter const*, char const*)
NuDynamicStringT<false>::operator+=(NuString const&)
NuFileTree::BuildFromFolder(NuString const&, NuFileFilter const*, char const*)
NuFileTree::AddFolder(NuString const&, NuFileFilter const*, char const*)
NuFileTree::BuildFileList(NuList<NuDynamicStringT<false> >&, NuFileFilter*)
NuFileTree::BuildFileList(NuList<NuDynamicStringT<false> >&, NuFileFilter*, NuString const*, NuList<NuDynamicStringT<false> >*, NuList<NuDynamicStringT<false> >*)
NuFileTree::BuildFileList(NuList<NuDynamicStringT<false> >&, NuFileFilter*, NuString const&)
NuFileTree::BuildFileList(NuList<NuDynamicStringT<false> >&, NuFileFilter*, NuString const&, NuList<NuDynamicStringT<false> >&)
NuFileTree::BuildFileList(NuList<NuDynamicStringT<false> >&, NuFileFilter*, NuString const&, NuList<NuDynamicStringT<false> >&, NuList<NuDynamicStringT<false> >&)
NuVector<SFile>::ReSize(unsigned int, bool)
NuFileTree::OrderFilesWithinDirectory(NuList<NuDynamicStringT<false> >&, char const*, char const**, int, NuList<NuDynamicStringT<false> >**, NuDynamicStringT<false>*)
NuFileFilter::NuExtensionSet::operator=(NuFileFilter::NuExtensionSet const&)
NuList<NuDynamicStringT<false> >::operator=(NuList<NuDynamicStringT<false> > const&)
NuListNode<NuDynamicStringT<false> >::NuListNode(NuDynamicStringT<false> const&)
NuVector<NuCheckSum>::Reserve(unsigned int, bool)
void NuQuickSortNew<NuPair<unsigned int, unsigned int> >::Sort<NuQuickSortNew<NuPair<unsigned int, unsigned int> >::DefaultLessThanCompare>(NuPair<unsigned int, unsigned int>*, unsigned long, NuQuickSortNew<NuPair<unsigned int, unsigned int> >::DefaultLessThanCompare)
NuTree<NuFileTree::StringIndex>::DeleteNodeLinks(NuTreeNode<NuFileTree::StringIndex>*)
NuTreeNode<NuFileTree::StringIndex>::NuTreeNode(NuFileTree::StringIndex const&)
NuVector<SIgnoredExtension>::ReSize(unsigned int, bool)
NuVector<SIgnoredExtension>::Reserve(unsigned int, bool)
NuVector<NuPair<int, NuDynamicStringT<false> > >::ReSize(unsigned int, bool)
NuVector<NuPair<int, NuDynamicStringT<false> > >::Reserve(unsigned int, bool)
void NuQuickSortNew<NuPair<int, NuDynamicStringT<false> > >::Sort<NuQuickSortNew<NuPair<int, NuDynamicStringT<false> > >::DefaultLessThanCompare>(NuPair<int, NuDynamicStringT<false> >*, unsigned long, NuQuickSortNew<NuPair<int, NuDynamicStringT<false> > >::DefaultLessThanCompare)
NuQuickSortNew<NuPair<int, NuDynamicStringT<false> > >::Swap(NuPair<int, NuDynamicStringT<false> >*, unsigned long, unsigned long, NuPair<int, NuDynamicStringT<false> >&)
NuVector<SFile>::Reserve(unsigned int, bool)
void NuQuickSortNew<SFile>::Sort<NuQuickSortNew<SFile>::DefaultLessThanCompare>(SFile*, unsigned long, NuQuickSortNew<SFile>::DefaultLessThanCompare)
NuQuickSortNew<SFile>::Swap(SFile*, unsigned long, unsigned long, SFile&)
NuListSort<NuDynamicStringT<false>, NuListNode<NuDynamicStringT<false> > >::DefaultLessThanCompare(NuDynamicStringT<false> const&, NuDynamicStringT<false> const&)
NuListNode<NuDynamicStringT<false> >* NuListSort<NuDynamicStringT<false>, NuListNode<NuDynamicStringT<false> > >::MergeSort<bool (*)(NuDynamicStringT<false> const&, NuDynamicStringT<false> const&)>(bool (*)(NuDynamicStringT<false> const&, NuDynamicStringT<false> const&), NuListNode<NuDynamicStringT<false> >*, unsigned int)
NuSmartPtr<NuResourceBase, true>::~NuSmartPtr()
NuResourceId::Serialize(NuSerialize&)
NuResourceBase::NuResourceBase()
NuResourceBase::GetRefCount() const
NuResourceBase::AddRef()
NuResourceBase::ReleaseRef()
NuResourceLoader::Get()
NuResourceLoader::UnloadResource(NuResourceBase*)
NuResourceBase::AppendResource(bool, NuString const&, NuResourceType, int, NuCheckSum const*)
NuResourceHeader::GetResourceType() const
NuResourceHeader::GetDiscipline() const
NuResourceHeader::BeginResources()
NuResourceHeader::AddResource(NuString const&, NuResourceType, int, NuCheckSum const*, unsigned int, unsigned int, unsigned int, unsigned int)
NuResourceHeader::EndResources()
NuResourceBase::AddDependency(NuString const&, NuResourceType const&)
NuResourceBase::RemoveDependency(NuString const&, NuResourceType const&)
NuResourceReference::GetPath() const
NuResourceReference::Serialize(NuSerialize&)
NuResourceReference::NuResourceReference()
NuResourceReference::~NuResourceReference()
NuResourceReference::Copy(NuResourceReference const&)
NuResourceReference::NuResourceReference(NuResourceReference const&)
NuResourceReference::operator=(NuResourceReference const&)
ConvertPlatformToResourcePlatform(PLATFORMS_SUPPORTED)
ConvertPlatformClassToResourcePlatformClass(NUPLATFORMCLASS)
NuResourceHeader::NuResourceHeader(NuResourceType, NuDiscipline)
NuResourceHeader::Clear()
NuResourceHeader::~NuResourceHeader()
NuResourceHeader::GetPath(NuResourceId const&, NuFixedStringT<(unsigned short)512>&) const
NuResourceHeader::AddResourcesForAllPlatforms(NuString const&, NuResourceType, int, NuCheckSum const*, unsigned int, unsigned int)
NuResourceHeader::EstimateDiscipline(NuString const&) const
NuResourceHeader::Serialize(NuSerialize&)
void NuSerialize::SerializeLinkToObject<NuFileTree>(NuFileTree*&)
void NuSerialize::_SerializeVector<NuResourceReference>(NuVector<NuResourceReference>&, char const*)
NuResourceHeader::Load(NuString const&)
NuResourceHeader::Write(NuString const&)
NuResourceHeader::LoadRecursiveInternal(NuString&, NuResourcePlatform, NuResourcePlatformClass, NuMap<NuDynamicStringT<false>, NuResourceHeader*>*)
NuResourceHeader::LoadRecursive(NuString const&, NuResourcePlatform, NuResourcePlatformClass, NuMap<NuDynamicStringT<false>, NuResourceHeader*>*)
NuResourceHeader::WriteCSV(NuString const&)
NuResourceHeader::SetResourceType(NuResourceType)
NuResourceHeader::GetAccurevStream() const
NuResourceHeader::SetAccurevStream(char const*)
NuResourceHeader::GetAccurevTransaction() const
NuResourceHeader::SetAccurevTransaction(unsigned long)
NuResourceHeader::GetProducedByUserName() const
NuResourceHeader::SetProducedByUserName(char const*)
NuResourceHeader::SetDiscipline(NuDiscipline)
NuResourceHeader::GetProject() const
NuResourceHeader::SetProject(eNUAPI_PROJECT)
NuResourceHeader::GetSourceFileName() const
NuResourceHeader::SetSourceFileName(char const*)
NuResourceHeader::ValidateResourceForBuild(eNUAPI_PROJECT, NuString const&, unsigned long)
NuResourceScheduler::ScheduleResources(NuString const&, NuString const&)
NuResourceScheduler::LoadResources(NuString const&, int)
NuResourceScheduler::Schedule()
NuResourceScheduler::WriteResourceOrder(NuString const&)
NuResourceHeader::SetRootPath(NuString const&)
NuResourceScheduler::HammingDistance(NuVector<int> const&, NuVector<int> const&)
NuResourceScheduler::TotalSeeks(NuVector<int> const&, NuVector<int> const&, NuVector<int> const&)
NuResourceScheduler::AddSeeks(NuVector<int> const&, NuVector<int> const&, NuVector<int>&)
NuResourceLoader::ResourceInfo::ResourceInfo()
NuResourceLoader::NuResourceLoader()
NuResourceLoader::FixupPath(NuDynamicStringT<false>&, NuString const&, NuResourceType)
NuDynamicStringT<false>::SubStr(NuString const&, unsigned short)
NuResourceLoader::ExtractPakFilePaths(NuString const&, NuDynamicStringT<false>&, NuDynamicStringT<false>&)
NuResourceLoader::SetupPakFile(NuString&)
NuResourceLoader::ClosePakFile()
NuResourceLoader::LoadResource(NuString const&, NuResourceType, NuCheckSum const*, NuDiscipline, unsigned int)
NuResourceLoader::Find(NuString const&, NuResourceType, unsigned int)
NuResourceLoader::LoadResourceSet(NuResourceHeader*, NuVector<NuSmartPtr<NuResourceBase, true> >&, bool, NuResourceLoadStats&, unsigned int)
NuResourceLoader::SetRoot(NuString const&)
NuResourceLoader::RegisterResource(NuResourceType, NuResourceLoader::ResourceInfo const&)
Find(NuCheckSum const*, NuResourceType, unsigned int)
NuResourceWithContext::GetResourceWithContextIdentifier(NuIdentifier&, char const*, unsigned int)
NuResourceLoader::Find(NuResourceReference&)
NuResourceLoader::FindOrLoadResource(NuString const&, NuResourceType, NuDiscipline, unsigned int)
LoadOrderSortPredicate(NuResourceLoader::LoadOrder const&, NuResourceLoader::LoadOrder const&)
NuResourceLoader::LoadResourceSet(NuString const&, NuVector<NuSmartPtr<NuResourceBase, true> >&, unsigned int)
NuResourceHeader::GetPath(int, NuDynamicStringT<false>&) const
NuResourceLoader::LoadResources(NuString const&, NuResourcePlatform, NuResourcePlatformClass, unsigned int)
NuResourceWithContext::NuResourceWithContext(NuSmartPtr<NuResourceBase, true> const&, unsigned int)
NuResourceWithContext::~NuResourceWithContext()
NuResourceWithContext::~NuResourceWithContext()
NuResourceBase::~NuResourceBase()
NuResourceBase::~NuResourceBase()
NuResourceWithContext::GetResourceType() const
NuVector<NuResourceReference>::Reserve(unsigned int, bool)
NuMap<NuDynamicStringT<false>, NuResourceHeader*>::InsertNode(NuDynamicStringT<false> const&)
NuMap<NuDynamicStringT<false>, NuVector<int> >::InsertNode(NuDynamicStringT<false> const&)
NuVector<NuSmartPtr<NuResourceBase, true> >::Reserve(unsigned int, bool)
NuVector<NuResourceLoader::LoadOrder>::Reserve(unsigned int, bool)
void NuArraySort<NuResourceLoader::LoadOrder>::QuickSort<bool (*)(NuResourceLoader::LoadOrder const&, NuResourceLoader::LoadOrder const&)>(bool (*)(NuResourceLoader::LoadOrder const&, NuResourceLoader::LoadOrder const&), NuResourceLoader::LoadOrder*, int, int)
NuRDPSetMultiCharTokens(char*)
NuRDPFVar(char*, int (*)(char*, float*, int*))
NuRDPF(char*)
NuRDPIVar(char*, int (*)(char*, float*, int*))
NuRDPI(char*)
NuScratchInit()
NuScratchReset()
NuScratchAlloc32(int)
NuScratchAlloc64(int)
NuScratchAlloc128(int)
NuScratchAlloc256(int)
NuScratchAlloc1024(int)
NuScratchRelease()
NuSystemEvents::SystemMenuEventData::SystemMenuEventData(NuSystemEvents::SystemMenuAction)
NuSystemEvents::SystemMenuEventData::~SystemMenuEventData()
NUAPIGetUserName(char*, int, char*, int)
NU2APIIsLegoProject()
NU2APIGetProject(bool)
NU2APIIsHQRenderProject()
NU2APISetProject(eNUAPI_PROJECT)
NU2APIGetProjectName(eNUAPI_PROJECT)
NU2APIGetCurrentProjectName()
NU2APIGetProjectFromName(char const*)
NU2APIVersionString(char*, int)
NuOnlineInitPS()
NuOnlineLoadAchievementsPS(char*)
NuOnlineUpdatePS()
NuOnlineAchievementAchievedPS(int, void (*)(int, int))
NuOnlineAchievementAchievedExPS(int, int, void (*)(int, int))
NuOnlineSignInPlayerPS()
NuSaveCore_nnx::LogResult()
NuSaveCore_nnx::NuSaveCore_nnx()
NuSaveCore_nnx::~NuSaveCore_nnx()
NuSaveCore_nnx::~NuSaveCore_nnx()
CreateSaveCoreObject()
NuSaveCore_nnx::SlotFromHumanSlotName(char const*)
NuSaveCore_nnx::HumanSlotNameFromSlotNum(NuFixedStringT<(unsigned short)256>&, int)
NuSaveCore_nnx::MakeTimeSaveFileName(NuFixedStringT<(unsigned short)256>&, int)
NuSaveCore_nnx::MakeSaveFileName(NuFixedStringT<(unsigned short)256>&, SaveFileType*, int, int, char const*)
NuSaveCore_nnx::Remount()
NuSaveCore_nnx::InitPS()
NuSaveCore_nnx::DirectoryExists(char const*)
NuSaveCore_nnx::DeleteFileIfExists(char const*)
NuSaveCore_nnx::ExtractDateTime(int)
NuSaveCore_nnx::ReadSaveDataTime(int, NuSystemTime&)
NuSaveCore_nnx::NnxFileExists(char const*)
NuSaveCore_nnx::ReadProgress(int)
NuSaveCore_nnx::ReadSaveData(SaveFileType*, int, int)
NuSaveCore_nnx::EnumerateSlots_ThreadFunc_PS(SaveThreadData*)
NuSaveCore_nnx::CheckOptionsSlotStatus()
NuSaveCore_nnx::EnumerateFiles_ThreadFunc_PS(SaveThreadData*)
NuSaveCore_nnx::ReadSaveData_ThreadFunc_PS(SaveThreadData*)
NuSaveCore_nnx::FileWritePadded(nn::fs::FileHandle&, void*, int, int)
NuSaveCore_nnx::WriteSaveDataFile(SaveFileType*, int, int, char const*, int)
NuSaveCore_nnx::UpdateTime(nn::time::PosixTime&)
NuSaveCore_nnx::WriteSaveData_ThreadFunc_PS(SaveThreadData*)
NuSaveCore_nnx::DeleteCurrentSlot_ThreadFunc_PS(SaveThreadData*)
NuSaveCore_nnx::Update_ThreadFunc_PS()
NuSaveCore_nnx::OnUpdate()
NuSaveCore_nnx::HasFSError()
NuSaveCore_nnx::SaveErrorOrPending()
NuSaveCore_nnx::PlatformCanSaveLanguageChoice()
md5_init
md5_append
md5_finish
ImplodeGetI(void*, int)
ImplodePutI(void*, unsigned int, int)
ImplodeGetByteFromMem(IMPLODECONTEXT*)
ImplodePutByteToMem(unsigned char, IMPLODECONTEXT*)
ImplodeFillBuf(int, IMPLODECONTEXT*)
ImplodeGetBits(int, IMPLODECONTEXT*)
ImplodePutBits(int, unsigned int, IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
ImplodeFReadMem(unsigned char*, int, IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
ImplodeInitGetBits(IMPLODECONTEXT*)
init_putbits(IMPLODECONTEXT*)
ExplodeBuffer(char*, char*, IMPLODECONTEXT*)
ExplodeBufferSize(char*)
ExplodeBufferNoHeader(char*, char*, int, int, IMPLODECONTEXT*)
ExplodeCompressedSize(char*)
ImplodeDecodeC(IMPLODECONTEXT*)
ImplodeDecodeOffset(IMPLODECONTEXT*)
ImplodeHufDecodeStart(IMPLODECONTEXT*)
ImplodeInit(IMPLODECOMPRESSORCONTEXT*)
allocate_memory(IMPLODECOMPRESSORCONTEXT*)
ImplodeAvailable()
ImplodeExit(IMPLODECOMPRESSORCONTEXT*)
deallocate_memory(IMPLODECOMPRESSORCONTEXT*)
ImplodeBuffer(char*, char*, int, IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
doImplodeBuffer(char*, char*, int, int, IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
ImplodeBufferNoHeader(char*, char*, int, IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
encode(IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
init_slide(IMPLODECOMPRESSORCONTEXT*)
split(short, IMPLODECOMPRESSORCONTEXT*)
delete_node(IMPLODECOMPRESSORCONTEXT*)
get_next_match(IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
ImplodeHufEncodeStart(IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
ImplodeOutput(unsigned int, unsigned int, IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
ImplodeHufEncodeEnd(IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
ImplodeMakeTable(int, unsigned char*, int, unsigned short*, IMPLODECONTEXT*)
ImplodeMakeTree(int, unsigned short*, unsigned char*, unsigned short*, IMPLODECOMPRESSORCONTEXT*, IMPLODECONTEXT*)
LZWrite(LZSTATE*, void*, int)
LZFlush(LZSTATE*)
LZPut(LZSTATE*, unsigned int, int)
LZFlushBits(LZSTATE*)
WriteHuffmanBlock(LZSTATE*, int, unsigned short*, unsigned short*, HUFFCODE const*, HUFFCODE const*)
LZCompress(LZSTATE*, LZBLOCK*, unsigned char*, unsigned short*, int)
NextChain(CHAINS*, int)
CalcPivot(unsigned int*, int, int)
LeafSort(unsigned int*, unsigned short*, int, int)
WriteHuffmanTree(LZSTATE*, DYNHUFF*)
CountBitCost(HUFFCODE*, unsigned int*, int)
BuildTree(HUFFCODE*, unsigned int*, int, int, unsigned int*)
InitHuffmanCodeTable(HUFFCODE*, int, unsigned int*, int)
CreateHuffmanTree(HUFFCODE*, unsigned int*, int, int)
CompressHuffmanTrees(DYNHUFF*, HUFFCODE*, HUFFCODE*)
DeflateBlock(LZSTATE*, LZBLOCK*, void*, int (*)(void*, void*, int))
DeflateInit()
DeflateAvailable()
DeflateReset(LZSTATE*, int)
Deflate(void*, int (*)(void*, void*, int), void*, int (*)(void*, void*, int), int)
BlockReadFunc(void*, void*, int)
BlockWriteFunc(void*, void*, int)
DeflateBuffer(unsigned char*, int, unsigned char*, int, int)
BuildHuffmanTree(DEFHUFFMAN*, unsigned char const*, int)
DecodeDeflatedBlock(DEFLATECONTEXT*)
DecompressHuffmanTrees(DEFLATECONTEXT*)
DecodeUncompressedBlock(DEFLATECONTEXT*)
InitHuffmanDefaults()
DecodeDeflated(DEFLATECONTEXT*)
Inflate(DEFLATECONTEXT*, char*, int)
InflateBuffer(char*, int, char const*, int)
unref(unsigned char*, unsigned char*)
NuClientServer::Connection::Connection(NuBufferedTCPSocket*)
NuClientServer::Connection::~Connection()
NuClientServer::Connection::~Connection()
NuClientServer::Connection::Send(void const*, int)
NuClientServer::Connection::Receive(void*, int)
NuClientServer::Connection::GetPipeType() const
NuClientServer::Connection::ReadBytes(char*, unsigned int)
NuClientServer::Connection::WriteBytes(char const*, unsigned int)
NuClientServer::Connection::GetPosition() const
NuClientServer::Connection::IsEOS() const
NuClientServer::Connection::Close()
NuClientServer::NuClientServer()
NuClientServer::Init(int, int, int)
NuClientServer::~NuClientServer()
NuClientServer::IsServerRunning(char const*)
NuClientServer::Connect(char const*, int)
NuClientServer::WaitForConnections()
NuClientServer::OnConnection(NuClientServer::Connection*)
NuRenderGroup::NuRenderGroup()
NuRenderGroup::~NuRenderGroup()
NuRenderGroup::~NuRenderGroup()
NuRenderGroup::Render(unsigned int, unsigned int, float)
NuRenderGroup::UpdateRenderFrame()
NuRenderGroup::DebugRender(unsigned int)
NuRenderCompound::NuRenderCompound()
NuRenderCompound::~NuRenderCompound()
NuRenderCompound::~NuRenderCompound()
NuRenderCompound::Invalidate(float)
NuRenderCompound::Rebuild()
NuRenderCompound::Update()
NuRenderCompound::Render(unsigned int, unsigned int, float)
NuRenderCompound::DebugRender(unsigned int)
NuRenderCompound::SetPerPixelFade(NuPerPixelFadePacket&)
NuSmartPtr<NuVertexBuffer, false>::~NuSmartPtr()
NuSmartPtr<NuIndexBuffer, false>::~NuSmartPtr()
NuRndrParticleInit()
NuRndrSetDebBaseRange(NUVEC*, NUVEC*)
NuRndrSetDebBox(NUVEC*)
NuRndrSetParticleRotation(NUMTX*)
NuRndrParticleGroup(ParticleChunk*, ParticleRenderData*, NuSmartPtr<NuMtl, true> const&, float, NUMTX*, NUMTX*, bool, bool, int, float, float, float, float, NUVEC*, float, float, float)
NuList<PorFile*>::~NuList()
NuRoomPortals::NuRoomPortals()
NuRoomPortals::~NuRoomPortals()
NuRoomPortals::Serialize(NuSerialize&)
void NuSerialize::_SerializeLegacyNuVarArray<NuRoom>(NuVarArray<NuRoom>&, char const*)
NuRoomPortals::Load(char*)
void NuSerialize::SerializeLinkToObject<NuRoomPortals>(NuRoomPortals*&)
NuRoomPortals::Fixup()
NuRoomPortals::Unload(char*)
NuRoomPortals::Save(char const*)
NuRoomPortals::ToIndexs()
NuListFind<PorFile*, NuListNode<PorFile*> >::Remove(NuListNode<PorFile*>*, NuListNode<PorFile*>*, PorFile* const&)
NuVarArray<NuVector4Base>::AdjustSize(unsigned int)
NuRoom::Serialize(NuSerialize&)
NuSoundEffectReverb::NuSoundEffectReverb()
NuSoundEffectReverb::~NuSoundEffectReverb()
NuSoundEffectReverb::~NuSoundEffectReverb()
NuSoundEffectReverb::Params::Reset()
NuSoundEffectReverb::Params::Read(nufpar_s*)
CharSysUtil::DrawHGobjCpuSkinWireframe(NuSmartPtr<NuScene, true>, NUMTX const*, NUMTX const*, unsigned int, int, int, int)
CharSysUtil::SetCastableOnRagDoll(CharInst*, bool)
ApiRopeTypeHelper::ApiRopeTypeHelper()
ApiRopeTypeHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
ApiRopeTypeHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
ApiRopeTypeHelper::GetNextObject(void*, void*)
ApiRopeTypeHelper::RegisterClasses(EdRegistry&)
ApiRopeTypeHelper::~ApiRopeTypeHelper()
ApiRopeTypeHelper::~ApiRopeTypeHelper()
non-virtual thunk to ApiRopeTypeHelper::~ApiRopeTypeHelper()
non-virtual thunk to ApiRopeTypeHelper::~ApiRopeTypeHelper()
ApiRopeTypeEdStringEdRef::~ApiRopeTypeEdStringEdRef()
ApiRopeTypeEdStringEdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
KeyframeEventPause::KeyframeEventPause(EdRegContext const&, float)
KeyframeEventPause::KeyframeEventPause(EdRegContext const&, KeyframeEvent&)
KeyframeEventPause::Execute(AnimationLayer*)
KeyframeEventPause::GetComponent()
KeyframeEventPauseHelper::Initialise()
KeyframeEventPauseHelper::GetNumObjects(void*)
KeyframeEventPauseHelper::GetNextObject(void*, void*)
KeyframeEventPauseHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
KeyframeEventPauseHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
KeyframeEventPause::~KeyframeEventPause()
KeyframeEventPauseHelper::~KeyframeEventPauseHelper()
CreateBeamSplineManager(LevelContainer&)
BeamSplineManager::BeamSplineManager(LevelContainer&)
BeamSplineManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
BeamSpline::ProcessBeams(float)
BeamSplineManager::FirstBeamSpline()
BeamSplineManager::FindBeamSpline(char const*)
BeamSplineManager::EventNotify(Event&, NuEventData&)
BeamSpline::FixUp(LevelContainer&, bool)
BeamSplineHelper::RegisterSplineData(EdClass*)
BeamSplineHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to BeamSplineHelper::EventNotify(Event&, NuEventData&)
EdRefBeamSpline::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefBeamSpline::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
BeamSpline::InitTemplateBeamDescriptor()
BeamSpline::SetLocalBeamDescriptor(VfxBeamDescriptor*, bool)
BeamSpline::ClearTemplateBeamDescriptor()
BeamSpline::BeamSpline(EdRegContext&, void*, int)
BeamSpline::FlushBeamHandles()
BeamSpline::~BeamSpline()
non-virtual thunk to BeamSpline::~BeamSpline()
non-virtual thunk to BeamSpline::~BeamSpline()
BeamSpline::~BeamSpline()
non-virtual thunk to BeamSpline::~BeamSpline()
non-virtual thunk to BeamSpline::~BeamSpline()
BeamSpline::KillAllBeams()
BeamSpline::RebuildSpline(bool)
BeamSpline::GetClass() const
BeamSpline::ConformToSpline(BeamSpline&)
BeamSplineKnot::BeamSplineKnot()
BeamSplineKnot::BeamSplineKnot(BeamSplineKnot const&, SplineObject*)
BeamSplineKnot::BeamSplineKnot(SplineObject*)
BeamSplineKnot::CloneKnot(SplineObject*) const
BeamSplineKnot::CopyKnot(SplineKnot const*)
EdRefBeamSpline::~EdRefBeamSpline()
BeamSplineHelper::~BeamSplineHelper()
SplineHelperT<BeamSpline>::NewSpline(EdRegContext*, void*, int) const
SplineHelperT<BeamSpline>::DeleteSpline(SplineObject*) const
SplineHelperT<BeamSpline>::GetManagerID() const
BeamSplineHelper::GetPrefix()
BeamSplineHelper::GetCategory()
BeamSplineHelper::GetFileExt()
non-virtual thunk to BeamSplineHelper::~BeamSplineHelper()
non-virtual thunk to BeamSplineHelper::~BeamSplineHelper()
BeamSplineManager::~BeamSplineManager()
SplineManagerT<BeamSpline>::GetManagerName() const
SplineManagerT<BeamSpline>::GetClass(int)
SplineManagerT<BeamSpline>::GetNumClasses()
SplineManagerT<BeamSpline>::NewSpline(EdRegContext*, void*, int) const
SplineManagerT<BeamSpline>::DeleteSpline(SplineObject*) const
SplineManagerT<BeamSpline>::GetSplineHelper() const
BeamSplineKnot::~BeamSplineKnot()
NuMechPtr<BeamSpline, 424>::ManagedBase::~ManagedBase()
NuMechPtr<BeamSpline, 424>::ManagedBase::~ManagedBase()
EdCameraObject::EdCameraObject(EdRegContext&)
EdCameraObject::~EdCameraObject()
non-virtual thunk to EdCameraObject::~EdCameraObject()
EdCameraObject::~EdCameraObject()
non-virtual thunk to EdCameraObject::~EdCameraObject()
EdCameraObject::GetTransform(VuMtx&) const
EdCameraObject::SetTransform(VuMtx const&)
EdCameraObject::GetPosition(VuVec&) const
EdCameraObject::SetPosition(VuVec const&)
EdCameraObject::GetClass() const
EdRefCamera::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCamera::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdCameraHelper::EdCameraHelper()
EdCameraHelper::~EdCameraHelper()
EdCameraHelper::~EdCameraHelper()
CreateCameraManager(LevelContainer&)
EdCameraHelper::Initialise()
CameraManager::EventNotify(Event&, NuEventData&)
CameraManager::RemoveScene(EdRegContext&)
CameraManager::GetNumObjects(void*)
CameraManager::GetNextObject(void*, void*)
CameraManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
CameraManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
CameraManager::CameraManager(LevelContainer&)
CameraManager::FindCameraByName(char const*)
EdCameraHelper::GetManNumObjects(ClassManager*, void*)
EdCameraHelper::GetManNextObject(ClassManager*, void*, void*)
EdCameraHelper::AddBaseObject(EdRegContext*, ClassObject&)
EdRefCamera::~EdRefCamera()
CameraManager::~CameraManager()
CameraManager::~CameraManager()
CameraManager::GetManagerName() const
CameraManager::GetClass(int)
CameraManager::GetNumClasses()
ClassManagerAccessor<CameraManager>::GetFromCreate(ILevelContainer const&)
EdCutsceneCamera::EdCutsceneCamera()
EdCutsceneCamera::EdCutsceneCamera(EdRegContext&)
EdCutsceneCamera::EdCutsceneCamera(EdRegContext&, EdCutsceneCamera&)
EdCutsceneCamera::GetClass() const
EdCutsceneCamera::GetTransform(VuMtx&) const
EdCutsceneCamera::EvaluateCameraResults(instcamresults_s&) const
EdCutsceneCamera::GetName() const
EdCutsceneCamera::RebuildName() const
EdCutsceneCamera::GetNuUniqueName() const
non-virtual thunk to EdCutsceneCamera::GetNuUniqueName() const
EdCutsceneCamera::GetNuUniqueNameHash() const
non-virtual thunk to EdCutsceneCamera::GetNuUniqueNameHash() const
EdCutsceneCamera::GetCutsceneInstance() const
EdCutsceneCamera::SetCutsceneInstance(instNUGCUTSCENE*)
EdCutsceneCamera::GetCameraIndex() const
EdCutsceneCamera::SetMayaCameraId(int)
EdCutsceneCamera::GetMayaCameraId() const
EdCutsceneCamera::IsActiveCamera() const
EdCutsceneCameraHelper::GetActiveCutsceneInstance()
EdCutsceneCamera::SetCameraIndex(int)
EdCutsceneCamera::GetCutsceneName() const
EdCutsceneCamera::GetCutsceneNameHash() const
EdCutsceneCamera::SetNearClip(float)
EdCutsceneCamera::GetNearClip() const
EdCutsceneCamera::SetFarClip(float)
EdCutsceneCamera::GetFarClip() const
EdCutsceneCamera::SetBarrelDistortion(float)
EdCutsceneCamera::GetBarrelDistortion() const
EdCutsceneCamera::SetFStop(float)
EdCutsceneCamera::GetFStop() const
EdCutsceneCamera::SetFocalDistance(float)
EdCutsceneCamera::GetFocalDistance() const
EdCutsceneCamera::CanOverrideCutsceneCamera() const
EdCutsceneCamera::SetCutsceneName(char const*)
EdCutsceneCameraManager::EdCutsceneCameraManager(LevelContainer&)
EdCutsceneCameraManager::~EdCutsceneCameraManager()
EdCutsceneCameraManager::~EdCutsceneCameraManager()
EdCutsceneCameraManager::GetClass(int)
EdCutsceneCameraManager::GetNumClasses()
EdCutsceneCameraManager::GetNumObjects(void*)
EdCutsceneCameraManager::GetNextObject(void*, void*)
EdCutsceneCameraManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
EdCutsceneCameraManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdCutsceneCameraHelper::EdCutsceneCameraHelper()
EdCutsceneCameraHelper::~EdCutsceneCameraHelper()
non-virtual thunk to EdCutsceneCameraHelper::~EdCutsceneCameraHelper()
EdCutsceneCameraHelper::~EdCutsceneCameraHelper()
non-virtual thunk to EdCutsceneCameraHelper::~EdCutsceneCameraHelper()
EdCutsceneCameraHelper::FindCameraByIndex(char const*, char const*, int)
EdCutsceneCameraHelper::FindCameraByMayaID(char const*, char const*, int, int)
EdCutsceneCameraHelper::CreateCamera(EdRegContext*, char const*, int)
EdCutsceneCameraHelper::ApplyToCutsceneCameraResults(instcamresults_s*, float*, float*, instNUGCUTSCENE*)
EdCutsceneCameraHelper::IsVisibleInUI(void*) const
EdCutsceneCameraHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to EdCutsceneCameraHelper::EventNotify(Event&, NuEventData&)
CreateEdCutsceneCameraManager(LevelContainer&)
EdCutsceneCameraHelper::Initialise()
EdCutsceneCamera::~EdCutsceneCamera()
EdCutsceneCamera::~EdCutsceneCamera()
non-virtual thunk to EdCutsceneCamera::~EdCutsceneCamera()
non-virtual thunk to EdCutsceneCamera::~EdCutsceneCamera()
EdCutsceneCameraManager::GetManagerName() const
IEdObject::Initialise()
ParticlesHolder::ParticlesHolder(EdRegContext&, ParticlesManager*)
ParticlesHolder::ParticlesHolder(ParticlesHolder&, EdRegContext&, ParticlesManager*)
ParticlesHolder::SetParticleType(ParticleEmitterType*)
ParticlesHolder::SetParticleType(char const*)
ParticlesHolder::GetParticlesType()
ParticlesHolder::SetUseTiming(bool)
ParticlesHolder::SetUseRenderMtx(bool)
ParticlesHolder::SetPlayOnce(bool)
ParticlesHolder::SetParticlesPerSec(int)
ParticlesHolder::SetRenderingEnabled(bool)
ParticlesHolder::SetState(int)
ParticlesHolder::~ParticlesHolder()
non-virtual thunk to ParticlesHolder::~ParticlesHolder()
ParticlesHolder::~ParticlesHolder()
non-virtual thunk to ParticlesHolder::~ParticlesHolder()
ParticlesHolder::GetClass() const
ParticlesHolder::Reset()
ParticlesHolder::FixupEmitterType()
ParticlesHolder::CreateEmitter()
ParticlesHolder::ReleaseEmitter()
ParticlesHolder::Process(float)
ParticlesHolder::IsActive() const
ParticlesHolder::SetTransform(VuMtx const&)
EdRefParticlesHolder::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefParticlesHolder::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ParticlesManager::RemoveScene(int)
ParticlesManager::GetNumObjects(void*)
ParticlesManager::GetNextObject(void*, void*)
ParticlesManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
ParticlesManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ParticlesManager::UpdateLists()
ParticlesManager::FindNamedParticlesHolder(char*)
ParticlesManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
ParticlesManager::AddLevelContainer(LevelContainer*, char const*, char const*)
ParticlesManager::LoadLevelEmitterTexture(char const*, char const*)
ParticlesManager::LoadLevelEmitterTypes(char const*, char const*)
ParticlesManager::FixupEmitterTypes()
ParticlesManager::RemoveLevelContainer(LevelContainer*)
ParticlesManager::EventNotify(Event&, NuEventData&)
ParticlesManager::CreateEmitters()
ParticlesManager::ReleaseEmitters()
ParticlesManager::~ParticlesManager()
ParticlesManager::~ParticlesManager()
ParticlesManager::ParticlesManager(LevelContainer&)
ParticlesManager::RegisterProcessing()
ParticlesHelper::ParticlesHelper()
CreateParticlesManager(LevelContainer&)
ParticlesHelper::Initialise()
ParticlesHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to ParticlesHelper::EventNotify(Event&, NuEventData&)
SAction_SetParticleEmitterState::GetName() const
SAction_SetParticleEmitterState::GetInputs(SCmdParams&) const
SAction_SetParticleEmitterState::GetOutputs(SCmdParams&) const
SAction_SetParticleEmitterState::Exec(ScriptContext&)
EdRefParticlesHolder::~EdRefParticlesHolder()
ParticlesHolder::GetTransform(VuMtx&) const
ParticlesHolder::GetVisibility() const
ParticlesHolder::SetVisibility(int)
ParticlesHolder::Activate()
ParticlesHolder::Deactivate()
ParticlesManager::GetManagerName() const
ParticlesManager::GetClass(int)
ParticlesManager::GetNumClasses()
ParticlesHelper::~ParticlesHelper()
ParticlesHelper::~ParticlesHelper()
non-virtual thunk to ParticlesHelper::~ParticlesHelper()
non-virtual thunk to ParticlesHelper::~ParticlesHelper()
SAction_SetParticleEmitterState::~SAction_SetParticleEmitterState()
ClassManagerAccessor<ParticlesManager>::GetFromCreate(ILevelContainer const&)
EdFixablePtrFixupData::EdFixablePtrFixupData(char const*)
EdFixablePtrFixupData::~EdFixablePtrFixupData()
EdFixablePtrFixupData::~EdFixablePtrFixupData()
EdFixablePtrFixupData::Copy() const
EdFixablePtrFixupData::CStr() const
NuMap<NuIdentifier, NuIdentifier>::~NuMap()
NuFixablePtrHelper::Initialise()
NuFixablePtrHelper::NuFixablePtrFixupCallback(void*, int, int)
NuFixablePtrHelper::NuFixablePtrResetCallback(void*, int, int)
NuFixablePtrHelper::RegisterDuplicateObjectHandler(NuUnknown*, NuIdentifier const&, NuIdentifier const&, NuIdentifier const&)
NuFixablePtrHelper::ClassesInRelationHandler(NuIdentifier const&, NuIdentifier const&)
NuFixablePtrHelper::OnFixupEventHandler(NuFixupManager::Reference*)
NuFixablePtrHelper::OnUnfixupEventHandler(NuFixupManager::Reference*)
NuFixablePtrHelper::BuildClassRelationMap()
NuFixablePtrHelper::InitialiseLogMessageListCleaner()
NuFixablePtrHelper::Finalise()
NuFixablePtrHelper::ClearClassRelationMap()
NuFixablePtrHelper::FixupPtr(void*, int, int, char const*, NuIdentifier*, EdClass**, short*, StreamingLevel*, void*, EdClass*, EdClass*)
NuFixablePtrHelper::ResetPtr(void*, int, int)
NuFixablePtrHelper::LogRegisterDuplicateObject(void*, NuIdentifier const&, NuIdentifier const&, NuIdentifier const&)
NuMap<NuIdentifier, NuIdentifier>::Clear()
NuFixablePtrHelper::CreateFixupResourceID(NuFrameworkResource*, EdClass*, char*, unsigned long)
NuFixablePtrHelper::CreateFixupString(char const*, char const*, char const*, char*, unsigned int)
NuFixablePtrHelper::CreateFixupString(NuUniqueObject*, char*, unsigned int)
NuFixablePtrHelper::ConvertFixupString(char const*, char*, unsigned int)
NuFixablePtrHelper::FixupStringToObjectParams(char const*, NuIdentifier*, NuIdentifier*, NuIdentifier*)
IsOneOfSubFiles(char const*, NuFrameworkResource*)
NuFixablePtrHelper::FixupStringToObjectParams(char const*, NuIdentifier*, EdClass**, short*, StreamingLevel*, void*, EdClass*, EdClass*)
NuFixablePtrHelper::CheckLedFileChildren(NuFrameworkResource*, NuIdentifier&)
NuFixablePtrHelper::FindNuUniqueObject(char const*, NuIdentifier*, EdClass**, short*, StreamingLevel*, void*, EdClass*, EdClass*)
NuFixablePtrHelper::WriteFixupData(void*, int, int, char const*)
NuFixablePtrHelper::LogMessage(NuFixablePtrHelper::FixupLogMessage const*)
NuFixablePtrHelper::GetMessageList(NuList<NuFixablePtrHelper::FixupLogMessage>&)
NuFixablePtrHelper::ClearMessageList()
NuFixablePtrHelper::FindNuUniqueObjectInLed(NuIdentifier const&, EdClass*, short, void*, EdClass*, EdClass*)
NuFixablePtrHelper::IsBuilderSet(short)
NuFixablePtrHelper::FindNuUniqueObjectInLevelContainer(NuIdentifier const&, EdClass*, LevelContainer*, void*, EdClass*, EdClass*)
NuFixablePtrHelper::IsBuilderSet(NuFrameworkResource*)
LogMessageListCleaner::~LogMessageListCleaner()
LogMessageListCleaner::EventNotify(Event&, NuEventData&)
NuMap<NuIdentifier, NuIdentifier>::InsertNode(NuIdentifier const&)
NuMapNode<NuIdentifier, NuIdentifier>::NuMapNode(NuIdentifier const&)
NuMap<NuIdentifier, NuIdentifier>::DeleteNodeLinks(NuMapNode<NuIdentifier, NuIdentifier>*)
NuMap<NuFrameworkResource*, char>::DeleteNodeLinks(NuMapNode<NuFrameworkResource*, char>*)
NuMap<NuFrameworkResource*, char>::InsertNode(NuFrameworkResource* const&)
edmainCurrent()
edmainRender()
edmainRegisterLocVec(NUVEC*)
edmainQueryLocVec()
SoundLevelConfig::SoundLevelConfig(EdRegContext&)
SoundLevelConfig::~SoundLevelConfig()
non-virtual thunk to SoundLevelConfig::~SoundLevelConfig()
SoundLevelConfig::~SoundLevelConfig()
non-virtual thunk to SoundLevelConfig::~SoundLevelConfig()
SoundLevelConfig::GetClass() const
SoundLevelConfig::Process(float)
EdRefSoundLevelConfig::EdRefSoundLevelConfig(char const*, char const*, int, int, EDATTR_FLAGS, EdControl*)
EdRefSoundLevelConfig::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSoundLevelConfig::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SoundLevelConfigHelper::SoundLevelConfigHelper()
SoundLevelConfigHelper::Initialise()
SoundLevelConfigHelper::GetManNumObjects(ClassManager*, void*)
SoundLevelConfigHelper::GetManNextObject(ClassManager*, void*, void*)
SoundLevelConfigHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
SoundLevelConfigHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
EdRefSoundLevelConfig::~EdRefSoundLevelConfig()
SoundLevelConfigHelper::~SoundLevelConfigHelper()
SVarSound::SVarSound(char const*, sDynamicVariableData, ScriptContext&)
SVarSound::AsBool() const
SVarSound::AsText() const
SVarSound::Equals(ScriptVariable const*)
SVarSound::LoadVariable(char const*)
SVarSound::Init()
SAction_Text2Sound::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarSound, SoundPlaceable*>(int, SoundPlaceable*)
SAction_SVarSound::Exec(ScriptContext&)
SoundAction::Exec(ScriptContext&)
SoundAction_Start::SoundExec(ScriptContext&, SoundPlaceable*)
SoundAction_Stop::SoundExec(ScriptContext&, SoundPlaceable*)
DynamicScriptVariable<SoundPlaceable>::~DynamicScriptVariable()
SVarSound::~SVarSound()
DynamicScriptVariable<SoundPlaceable>::Set(ScriptVariable const*)
DynamicScriptVariable<SoundPlaceable>::EventNotify(Event&, NuEventData&)
non-virtual thunk to SVarSound::~SVarSound()
non-virtual thunk to SVarSound::~SVarSound()
non-virtual thunk to DynamicScriptVariable<SoundPlaceable>::EventNotify(Event&, NuEventData&)
SAction_SVarSound::~SAction_SVarSound()
SAction_SVarSound::GetName() const
SAction_SVarSound::GetInputs(SCmdParams&) const
SAction_SVarSound::GetOutputs(SCmdParams&) const
SAction_Text2Sound::~SAction_Text2Sound()
SAction_Text2Sound::GetName() const
SAction_Text2Sound::GetInputs(SCmdParams&) const
SAction_Text2Sound::GetOutputs(SCmdParams&) const
SoundAction::~SoundAction()
SoundAction_Start::~SoundAction_Start()
SoundAction_Start::GetName() const
SoundAction_Start::GetInputs(SCmdParams&) const
SoundAction_Start::GetOutputs(SCmdParams&) const
SoundAction_Stop::~SoundAction_Stop()
SoundAction_Stop::GetName() const
SoundAction_Stop::GetInputs(SCmdParams&) const
SoundAction_Stop::GetOutputs(SCmdParams&) const
DynamicScriptVariable<SoundPlaceable>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<SoundPlaceable>::~DynamicScriptVariable()
non-virtual thunk to DynamicScriptVariable<SoundPlaceable>::~DynamicScriptVariable()
ScriptVariable* CreateObject<SVarSound>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarSound>(char const*, ScriptContext&)
SVarSpeechPack::~SVarSpeechPack()
SVarSpeechPack::~SVarSpeechPack()
SVarSpeechPack::Init()
SAction_SVarSpeechPack_Constructor::Exec(ScriptContext&)
SAction_SVarSpeechPack_Base::Exec(ScriptContext&)
SAction_SVarSpeechPack_Load::SpeechPackExec(ScriptContext&, SpeechPack&)
SAction_SVarSpeechPack_Release::SpeechPackExec(ScriptContext&, SpeechPack&)
SAction_SVarSpeechPack_IsLoaded::SpeechPackExec(ScriptContext&, SpeechPack&)
SAction_SVarSpeechPack_GetSpeech::SpeechPackExec(ScriptContext&, SpeechPack&)
SVarSpeechPack::Equals(ScriptVariable const*)
SVarSpeechPack::Set(ScriptVariable const*)
SAction_SVarSpeechPack_Constructor::~SAction_SVarSpeechPack_Constructor()
SAction_SVarSpeechPack_Constructor::GetName() const
SAction_SVarSpeechPack_Constructor::GetInputs(SCmdParams&) const
SAction_SVarSpeechPack_Constructor::GetOutputs(SCmdParams&) const
SAction_SVarSpeechPack_Base::~SAction_SVarSpeechPack_Base()
SAction_SVarSpeechPack_Load::~SAction_SVarSpeechPack_Load()
SAction_SVarSpeechPack_Load::GetName() const
SAction_SVarSpeechPack_Load::GetInputs(SCmdParams&) const
SAction_SVarSpeechPack_Load::GetOutputs(SCmdParams&) const
SAction_SVarSpeechPack_Release::~SAction_SVarSpeechPack_Release()
SAction_SVarSpeechPack_Release::GetName() const
SAction_SVarSpeechPack_Release::GetInputs(SCmdParams&) const
SAction_SVarSpeechPack_Release::GetOutputs(SCmdParams&) const
SAction_SVarSpeechPack_IsLoaded::~SAction_SVarSpeechPack_IsLoaded()
SAction_SVarSpeechPack_IsLoaded::GetName() const
SAction_SVarSpeechPack_IsLoaded::GetInputs(SCmdParams&) const
SAction_SVarSpeechPack_IsLoaded::GetOutputs(SCmdParams&) const
SAction_SVarSpeechPack_GetSpeech::~SAction_SVarSpeechPack_GetSpeech()
SAction_SVarSpeechPack_GetSpeech::GetName() const
SAction_SVarSpeechPack_GetSpeech::GetInputs(SCmdParams&) const
SAction_SVarSpeechPack_GetSpeech::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarSpeechPack>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarSpeechPack>(char const*, ScriptContext&)
SVarSpeechStream::Init()
SAction_SVarSpeechStream_Constructor::Exec(ScriptContext&)
void ScriptContext::SetReturn<SVarSpeechStream, NuSmartPtr<Track, false> >(int, NuSmartPtr<Track, false>)
SAction_SVarSpeechStream_Base::Exec(ScriptContext&)
SAction_SVarSpeechStream_Cue::SpeechStreamExec(ScriptContext&, Track*)
SAction_SVarSpeechStream_Close::SpeechStreamExec(ScriptContext&, Track*)
SAction_SVarSpeechStream_IsCued::SpeechStreamExec(ScriptContext&, Track*)
SAction_SVarSpeechStream_GetSpeech::SpeechStreamExec(ScriptContext&, Track*)
SAction_SVarSpeechStream_Constructor::~SAction_SVarSpeechStream_Constructor()
SAction_SVarSpeechStream_Constructor::GetName() const
SAction_SVarSpeechStream_Constructor::GetInputs(SCmdParams&) const
SAction_SVarSpeechStream_Constructor::GetOutputs(SCmdParams&) const
SAction_SVarSpeechStream_Base::~SAction_SVarSpeechStream_Base()
SAction_SVarSpeechStream_Cue::~SAction_SVarSpeechStream_Cue()
SAction_SVarSpeechStream_Cue::GetName() const
SAction_SVarSpeechStream_Cue::GetInputs(SCmdParams&) const
SAction_SVarSpeechStream_Cue::GetOutputs(SCmdParams&) const
SAction_SVarSpeechStream_Close::~SAction_SVarSpeechStream_Close()
SAction_SVarSpeechStream_Close::GetName() const
SAction_SVarSpeechStream_Close::GetInputs(SCmdParams&) const
SAction_SVarSpeechStream_Close::GetOutputs(SCmdParams&) const
SAction_SVarSpeechStream_IsCued::~SAction_SVarSpeechStream_IsCued()
SAction_SVarSpeechStream_IsCued::GetName() const
SAction_SVarSpeechStream_IsCued::GetInputs(SCmdParams&) const
SAction_SVarSpeechStream_IsCued::GetOutputs(SCmdParams&) const
SAction_SVarSpeechStream_GetSpeech::~SAction_SVarSpeechStream_GetSpeech()
SAction_SVarSpeechStream_GetSpeech::GetName() const
SAction_SVarSpeechStream_GetSpeech::GetInputs(SCmdParams&) const
SAction_SVarSpeechStream_GetSpeech::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<SVarSpeechStream>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarSpeechStream>(char const*, ScriptContext&)
SVarSpeechStream::~SVarSpeechStream()
SVarSpeechStream::~SVarSpeechStream()
SVarSpeechStream::Equals(ScriptVariable const*)
SVarSpeechStream::Set(ScriptVariable const*)
LinearSpline::GetLength_NearestPos(VuVec const&, float const*) const
LinearSpline::GetLength_NearestPos(VuVec const&, VuVec&, float const*) const
LinearSpline::GetLengthAndNextKnot_NearestPos(VuVec const&, VuVec&, VuVec&, float const*) const
LinearSpline::GetPosition_Dist(VuVec&, float) const
LinearSpline::GetPositionAndNextKnot_Dist(VuVec&, VuVec&, float) const
LinearSpline::GetPosition_Time(VuVec&, float) const
LinearSpline::GetTangent_Dist(VuVec&, float) const
LinearSpline::GetPrevPointIndex(float) const
LinearSpline::GetNextPointIndex(float) const
LinearSpline::GetParallelSpline(float)
LinearSpline::GetDistanceToSpline(VuVec const&)
LinearSpline::GetTimeAtDist(LinearSplineKnot&, float) const
LinearSpline::GetLength_Point(LinearSplineKnot const&) const
SetPace(AIPACKET*, Brain::Pace)
ParsePace(AIPACKET*, char const*)
FollowAPIObject(APIOBJECT*, APIOBJECT*, unsigned char, float)
IsFacingTarget(NUVEC const*, NUVEC const*, int, int)
Action_EdgeGroupFlags(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_NodeGroup(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
API_Action_FollowSpline(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float, Wander*)
Action_FollowSpline(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
Action_WayPointDrive(AIManager&, ScriptProcessor*, AIPACKET*, char**, int, int, float)
PostEffectHelper::PostEffectHelper()
PostEffectHelper::~PostEffectHelper()
PostEffectHelper::~PostEffectHelper()
CreatePostEffectManager(LevelContainer&)
PostEffectHelper::Initialise()
PostEffectObject::PostEffectObject(EdRegContext&)
PostEffectObject::PostEffectObject(PostEffectObject&, EdRegContext&)
PostEffectObject::~PostEffectObject()
non-virtual thunk to PostEffectObject::~PostEffectObject()
non-virtual thunk to PostEffectObject::~PostEffectObject()
non-virtual thunk to PostEffectObject::~PostEffectObject()
PostEffectObject::~PostEffectObject()
non-virtual thunk to PostEffectObject::~PostEffectObject()
non-virtual thunk to PostEffectObject::~PostEffectObject()
non-virtual thunk to PostEffectObject::~PostEffectObject()
PostEffectObject::Fixup()
PostEffectObject::GetClass() const
EdRefPostEffectObject::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefPostEffectObject::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
PostEffectManager::PostEffectManager(LevelContainer&)
PostEffectManager::~PostEffectManager()
PostEffectManager::~PostEffectManager()
PostEffectManager::SetRenderingPaused(int)
PostEffectManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
EdBaseObjectManager<PostEffectManager, PostEffectObject>::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
PostEffectManager::EventNotify(Event&, NuEventData&)
PostEffectManager::RegisterProcessing()
PostEffectManager::RegisterRendering()
PostEffectManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
PostEffectManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
EdRefPostEffectObject::~EdRefPostEffectObject()
PostEffectObject::GetTransform(VuMtx&) const
PostEffectObject::SetTransform(VuMtx const&)
PostEffectObject::GetPosition(VuVec&) const
PostEffectObject::SetPosition(VuVec const&)
PostEffectObject::GetVisibility() const
PostEffectObject::SetVisibility(int)
PostEffectManager::GetManagerName() const
EdBaseObjectManager<PostEffectManager, PostEffectObject>::GetClass(int)
EdBaseObjectManager<PostEffectManager, PostEffectObject>::GetNumClasses()
EdBaseObjectManager<PostEffectManager, PostEffectObject>::GetNumObjects(void*)
EdBaseObjectManager<PostEffectManager, PostEffectObject>::GetNextObject(void*, void*)
EdBaseObjectManager<PostEffectManager, PostEffectObject>::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdBaseObjectManager<PostEffectManager, PostEffectObject>::~EdBaseObjectManager()
EdBaseObjectManager<PostEffectManager, PostEffectObject>::~EdBaseObjectManager()
ReflectionCapturePoint::ReflectionCapturePoint(EdRegContext&)
ReflectionCapturePoint::ResetName()
ReflectionCapturePoint::ReflectionCapturePoint(ReflectionCapturePoint const&, EdRegContext&)
ReflectionCapturePoint::~ReflectionCapturePoint()
non-virtual thunk to ReflectionCapturePoint::~ReflectionCapturePoint()
non-virtual thunk to ReflectionCapturePoint::~ReflectionCapturePoint()
non-virtual thunk to ReflectionCapturePoint::~ReflectionCapturePoint()
ReflectionCapturePoint::~ReflectionCapturePoint()
non-virtual thunk to ReflectionCapturePoint::~ReflectionCapturePoint()
non-virtual thunk to ReflectionCapturePoint::~ReflectionCapturePoint()
non-virtual thunk to ReflectionCapturePoint::~ReflectionCapturePoint()
ReflectionCapturePoint::DestroysOnUnreferenced() const
non-virtual thunk to ReflectionCapturePoint::DestroysOnUnreferenced() const
ReflectionCapturePoint::GetClass() const
ReflectionCapturePoint::Initialise(EdClassInterface*)
ReflectionCapturePoint::GetRadius()
ReflectionCapturePoint::Destroy()
non-virtual thunk to ReflectionCapturePoint::Destroy()
ReflectionCapturePoint::GetNuUniqueName() const
non-virtual thunk to ReflectionCapturePoint::GetNuUniqueName() const
ReflectionCapturePoint::GetNuUniqueNameHash() const
non-virtual thunk to ReflectionCapturePoint::GetNuUniqueNameHash() const
ReflectionZone::ReflectionZone(EdRegContext&)
ReflectionZone::ReflectionZone(ReflectionZone const&, EdRegContext&)
ReflectionZone::GetClass() const
CreateReflectionZoneManager(LevelContainer&)
ReflectionZone::Initialise(EdClassInterface*)
EdRefReflectionZone::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefReflectionZone::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
ReflectionZone::SetTransform(VuMtx const&)
ReflectionZone::GetRadius()
ReflectionCapturePointHelper::OnPostPopulateObject(ClassObject const&, void*, int, EDREG_FLAGS, EdRegContext*, EdComponent const*, ClassObject const&, int)
CreateReflectionCapturePointManager(LevelContainer&)
ReflectionZoneHelper::ReflectionZoneHelper(int)
ReflectionCapturePointManager::ReflectionCapturePointManager(LevelContainer&)
ReflectionCapturePointManager::EventNotify(Event&, NuEventData&)
ReflectionCapturePointManager::LoadCubeMaps()
ReflectionZoneManager::ReflectionZoneManager(LevelContainer&)
ReflectionZoneManager::~ReflectionZoneManager()
ReflectionZoneManager::~ReflectionZoneManager()
ReflectionZoneManager::RegisterRendering()
ReflectionZoneManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
ReflectionZoneManager::EventNotify(Event&, NuEventData&)
ReflectionZoneManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
EdBaseObjectManager<ReflectionZoneManager, ReflectionZone>::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
EdRefReflectionZone::~EdRefReflectionZone()
ReflectionZone::~ReflectionZone()
ReflectionZone::~ReflectionZone()
ReflectionZone::GetTransform(VuMtx&) const
ReflectionZone::GetPosition(VuVec&) const
ReflectionZone::SetPosition(VuVec const&)
non-virtual thunk to ReflectionZone::~ReflectionZone()
non-virtual thunk to ReflectionZone::~ReflectionZone()
non-virtual thunk to ReflectionZone::~ReflectionZone()
non-virtual thunk to ReflectionZone::~ReflectionZone()
ReflectionCapturePointHelper::~ReflectionCapturePointHelper()
EdBaseObjectHelper<ReflectionCapturePoint>::Initialise()
ReflectionCapturePointHelper::CanUserDelete(void*) const
ReflectionCapturePoint::GetNuUniqueObjectBase()
ReflectionCapturePoint::GetTransform(VuMtx&) const
ReflectionCapturePoint::SetTransform(VuMtx const&)
ReflectionCapturePoint::GetPosition(VuVec&) const
ReflectionCapturePoint::SetPosition(VuVec const&)
ReflectionCapturePoint::GetRefCount() const
ReflectionCapturePoint::AddRef()
ReflectionCapturePoint::ReleaseRef()
ReflectionCapturePoint::GetName()
non-virtual thunk to ReflectionCapturePoint::GetRefCount() const
non-virtual thunk to ReflectionCapturePoint::AddRef()
non-virtual thunk to ReflectionCapturePoint::ReleaseRef()
non-virtual thunk to ReflectionCapturePoint::GetNuUniqueObjectBase()
non-virtual thunk to ReflectionCapturePoint::GetRefCount() const
non-virtual thunk to ReflectionCapturePoint::AddRef()
non-virtual thunk to ReflectionCapturePoint::ReleaseRef()
EdBaseObjectManager<ReflectionCapturePointManager, ReflectionCapturePoint>::~EdBaseObjectManager()
ReflectionCapturePointManager::~ReflectionCapturePointManager()
ReflectionCapturePointManager::GetManagerName() const
EdBaseObjectManager<ReflectionCapturePointManager, ReflectionCapturePoint>::GetClass(int)
EdBaseObjectManager<ReflectionCapturePointManager, ReflectionCapturePoint>::GetNumClasses()
EdBaseObjectManager<ReflectionCapturePointManager, ReflectionCapturePoint>::GetNumObjects(void*)
EdBaseObjectManager<ReflectionCapturePointManager, ReflectionCapturePoint>::GetNextObject(void*, void*)
EdBaseObjectManager<ReflectionCapturePointManager, ReflectionCapturePoint>::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
EdBaseObjectManager<ReflectionCapturePointManager, ReflectionCapturePoint>::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ReflectionZoneManager::GetManagerName() const
EdBaseObjectManager<ReflectionZoneManager, ReflectionZone>::GetClass(int)
EdBaseObjectManager<ReflectionZoneManager, ReflectionZone>::GetNumClasses()
EdBaseObjectManager<ReflectionZoneManager, ReflectionZone>::GetNumObjects(void*)
EdBaseObjectManager<ReflectionZoneManager, ReflectionZone>::GetNextObject(void*, void*)
EdBaseObjectManager<ReflectionZoneManager, ReflectionZone>::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
ReflectionZoneHelper::~ReflectionZoneHelper()
EdBaseObjectHelper<ReflectionZone>::Initialise()
EdBaseObjectManager<ReflectionZoneManager, ReflectionZone>::~EdBaseObjectManager()
EdBaseObjectManager<ReflectionZoneManager, ReflectionZone>::~EdBaseObjectManager()
EdBaseObjectManager<ReflectionCapturePointManager, ReflectionCapturePoint>::~EdBaseObjectManager()
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::~EdRefSmartPtr()
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::FixUpToNuUniqueObjAccessor(void*, NuUniqueObjectAccessor*)
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::GetFixupSearchStr(void*)
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::WriteFixupData(void*, char const*)
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::LateFixup(void*, StreamingLevel*, NuHashMap<NuDynamicStringT<true>, NuFrameworkResource*>*)
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::GetNuUniqueObjAccessorFromPointee(void*) const
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::GetPointee(void*)
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::GetPointeeAsNuUniqueObjectAccessor(void*) const
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::GetPointeeAsBaseEdClass(void*)
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::GetPointeeEdClass(void*)
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::ResetSmartPtr(void*)
EdRefSmartPtr<NuReflectionCapturePoint, ReflectionCapturePoint, NuFatSmartPtr<NuReflectionCapturePoint> >::ResetToPreFixup(void*)
FMVManager::FMVManager(LevelContainer&)
FMVManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
FMVManager::GetPlayer()
FMVManager::ProcessOverlay(bool, float)
FMVManager::IsCurrentFMVFinished()
FMVManager::IsCurrentFMVSkippable()
FMVManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
FMVManager::SetOverlayAlpha(NuRenderNode*)
FMVManager::RegisterProcessing()
FMVManager::RegisterRendering()
FMVManager::EventNotify(Event&, NuEventData&)
FMVManager::InitOverlay()
FMVManager::RequestSkip()
FMVManager::RestartAnimation(NuRenderObject*)
FMVManager::~FMVManager()
FMVManager::~FMVManager()
FMVManager::GetManagerName() const
FMVPlayer::~FMVPlayer()
FMVPlayer::FMVPlayer(short)
FMVPlayer::Load()
FMVPlayer::Activate()
FMVPlayer::Deactivate()
FMVPlayer::Update()
FMVPlayer::Render()
FMVPlayer::RequestSkip()
FMVPlayer::IsSkippable()
CreateFMVManager(LevelContainer&)
FMVPlayerHelper::FMVPlayerHelper()
FMVPlayerHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FMVPlayerHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FMVPlayerHelper::GetManNextObject(ClassManager*, void*, void*)
FMVPlayerHelper::GetManNumObjects(ClassManager*, void*)
FMVPlayerHelper::~FMVPlayerHelper()
ClassManagerAccessor<FMVManager>::GetFromCreate(ILevelContainer const&)
EdShadowBoxBuilder::EdShadowBoxBuilder()
EdShadowBoxBuilder::BuildShadowBoxes(int, LevelContainer*, char const*, void*)
EdShadowBoxBuilder::FindSpotlights(LevelContainer const*, NuVector<EdShadowBoxBuilder::LightInfo>&, NuVector<DynamicLightDesc*>&)
EdShadowBoxBuilder::FindSpotlights(NuVector<ClassObject> const&, NuVector<EdShadowBoxBuilder::LightInfo>&, NuVector<DynamicLightDesc*>&)
EdShadowBoxBuilder::GenerateShadowBoxes(instNUGCUTSCENE*, NuVector<EdShadowBoxBuilder::LightInfo>&, NuVector<DynamicLightDesc*>&, nuanimbuff_s*)
NuVector<EdShadowBoxBuilder::ShadowBox>::Reserve(unsigned int, bool)
EdShadowBoxBuilder::EvaluateMainCutsceneCamera(instNUGCUTSCENE*, NuCutSceneRaw*, int, NuCamera&)
EdShadowBoxBuilder::EndShot(int, NuVector<DynamicLightDesc*> const&, NuVector<EdShadowBoxBuilder::ShadowBox> const&, NuVector<int> const&, instNUGCUTSCENE*, bool)
EdShadowBoxBuilder::BeginShot(int)
EdShadowBoxBuilder::GetCharacterBoundingBox(int, int, instNUGCUTSCENE*, NuCutSceneRaw*, NUVEC*, NUMTX*, nuanimbuff_s*)
EdShadowBoxBuilder::ClipToFrustum(EdShadowBoxBuilder::ShadowBox*, NuCamera const&) const
EdShadowBoxBuilder::GetLightClipPlanes(DynamicLight const*, NuVector4Base*) const
EdShadowBoxBuilder::ClipBoxToPlanes(EdShadowBoxBuilder::ShadowBox*, NuVector4Base const*, int) const
EdShadowBoxBuilder::MergeBoxes(EdShadowBoxBuilder::ShadowBox*, EdShadowBoxBuilder::ShadowBox const&) const
EdShadowBoxBuilder::AddLightIfShadowCastingSpotlight(DynamicLight*, NuVector<EdShadowBoxBuilder::LightInfo>&, NuVector<DynamicLightDesc*>&)
EdShadowBoxBuilder::InitialiseNewlyCreatedObject(ClassObject&, ClassObject&, EdRegContext&)
CutsceneCharDefHelper::SetHelper(CutsceneCharDefHelper*)
CutsceneCharDefHelper::GetCharDef(NuCutSceneRaw*, NuANI4AnimRaw*)
EdShadowBoxBuilder::ClipBoxToPlane(EdShadowBoxBuilder::ShadowBox*, NuVector4Base const&) const
EdShadowBoxBuilder::GetBoxVertices(EdShadowBoxBuilder::ShadowBox const&, NuVector3Base*) const
NuVector<DynamicLightDesc*>::Reserve(unsigned int, bool)
NuVector<EdShadowBoxBuilder::LightInfo>::Reserve(unsigned int, bool)
AddFootNote(char const*, float)
AddFootNote(float, char const*, ...)
ClearFootNotes()
FootNoteManager::FootNoteManager()
FootNoteManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
non-virtual thunk to FootNoteManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
FootNoteManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
non-virtual thunk to FootNoteManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
FootNoteManager::Display(ManagerRenderData*)
FootNoteManager::Update(ManagerProcessData*)
FootNoteManager::GetManagerName() const
FootNoteManager::GetMinNoteLife() const
FootNoteManager::GetMaxNotesOnScreen() const
FootNoteManager::GetMaxNoteLife() const
FootNoteManager::~FootNoteManager()
FootNoteManager::~FootNoteManager()
non-virtual thunk to FootNoteManager::~FootNoteManager()
non-virtual thunk to FootNoteManager::~FootNoteManager()
non-virtual thunk to FootNoteManager::GetManagerName() const
AddCodeRecord(char const*, int)
ClearCodeRecords()
CodeScoreCard::CodeScoreCard()
CodeScoreCard::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CodeScoreCard::ProcessEvenWhenPaused(ManagerProcessData*)
CodeScoreCard::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
CodeScoreCard::Display(ManagerRenderData*)
CodeRecordList::Update(float)
CodeRecordList::Display()
CodeScoreCard::AddCodeRecord(char const*, int)
CodeRecordList::AddCodeRecord(char const*, int)
CodeScoreCard::DeleteCodeRecord(int)
CodeRecordList::DeleteById(int)
CodeScoreCard::DeleteAll()
CodeRecordList::DeleteAll()
CodeRecord::CodeRecord(char const*, unsigned int, int)
CodeRecord::~CodeRecord()
CodeRecord::~CodeRecord()
CodeRecord::operator<(CodeRecord const&) const
CodeRecord::PrioritySortCompare(CodeRecord const&) const
CodeRecordList::CodeRecordList()
CodeScoreCard::~CodeScoreCard()
CodeScoreCard::~CodeScoreCard()
CodeScoreCard::GetManagerName() const
NuEListSort<CodeRecord, CodeRecord, CodeRecordNuEList>::DefaultLessThanCompare(CodeRecord const&, CodeRecord const&)
CodeRecord* NuEListSort<CodeRecord, CodeRecord, CodeRecordNuEList>::MergeSort<bool (*)(CodeRecord const&, CodeRecord const&)>(bool (*)(CodeRecord const&, CodeRecord const&), CodeRecord*, unsigned int)
StringProfanityFilterBase::VerifyStrings(char**, char**, int, char*)
ScreenNote::ScreenNote(char const*, float)
ScreenNote::~ScreenNote()
ScreenNoteManager::Add(char const*, float, ScreenNoteStyle*)
ScreenNoteManager::Delete(int)
ScreenNoteManager::DeleteAll()
DbgPrint(int, int, int, int, char const*, ...)
DataEntry::DataEntry(char*)
DataEntry::DataEntry(char const*)
DataEntry::~DataEntry()
DataBlock::DataBlock()
DataBlock::DataBlock(char const*)
DataBlock::~DataBlock()
DataBlock::~DataBlock()
DataBlock::SetName(char const*)
DataBlock::AddEntryInt(char const*, int, int, int&)
DataBlock::AddEntryFloat(char const*, float, float, float&)
DataBlock::AddEntryAng(char const*, float, float, float&)
DataBlock::AddEntryFloatCalcPow(char const*, float&)
DataBlock::AddEntryString(char const*, char*, int)
DataBlock::AddEntryVec(char const*, NUVEC&)
DataBlock::AddEntryBool(char const*, bool&)
DataBlock::FindEntry(char const*) const
DataBlockList::Find(char const*) const
DataBlockCfgLoader::DataBlockCfgLoader(char const*, DataBlockList*, LevelContainer*)
DataBlockCfgLoader::PreParse()
DataBlockCfgLoader::Parse()
DataBlockCfgLoader::PostParse()
DataBlockCfgLoader::WriteCfgFileBody()
DataBlockCfgLoader::GetDataBlock(char const*)
DataEntryFloat::Read(nufpar_s*)
DataEntryFloat::Write(char*)
DataEntryAng::Read(nufpar_s*)
DataEntryAng::Write(char*)
DataEntryInt::Read(nufpar_s*)
DataEntryInt::Write(char*)
DataEntryFloatCalcPow::Read(nufpar_s*)
DataEntryFloatCalcPow::Write(char*)
DataEntryString::Read(nufpar_s*)
DataEntryString::Write(char*)
DataEntryVec::Read(nufpar_s*)
DataEntryVec::Write(char*)
DataEntryBool::Read(nufpar_s*)
DataEntryBool::Write(char*)
DataEntry::~DataEntry()
DataEntryFloat::~DataEntryFloat()
DataEntryAng::~DataEntryAng()
DataEntryInt::~DataEntryInt()
DataEntryFloatCalcPow::~DataEntryFloatCalcPow()
DataEntryString::~DataEntryString()
DataEntryVec::~DataEntryVec()
DataEntryBool::~DataEntryBool()
DataBlockCfgLoader::~DataBlockCfgLoader()
DataBlockCfgLoader::GetCfgLoaderTypeName() const
DataBlockCfgLoader::CreateDataBlock(char const*)
RCObject::RCObject()
RCObject::RCObject(RCObject const&)
RCObject::operator=(RCObject const&)
RCObject::~RCObject()
RCObject::~RCObject()
RCObject::addReference()
RCObject::removeReference()
RCObject::markUnshareable()
RCObject::isShareable() const
RCObject::isShared() const
FreeCamera_Enabled()
FreeCamera_Update(float)
FreeCamera_SetMatrix(NUMTX const&)
FreeCamera_IsUsingPad()
FreeCamera_SetJoypad(NUPAD const*)
BespokeAnimData::Set(char const*, unsigned int)
BespokeAnims::SetActionInfoFlags(int, unsigned int)
MechKrawlieSpawnPointInterface::Initialise()
MechKrawlieSpawnerHelper::Get()
MechKrawlieSpawnPointInterface::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieSpawnPointInterface::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
MechKrawlieSpawner::RemoveSpawnPoint(MechKrawlieSpawnPoint*)
MechKrawlieSpawnPointInterface::GetNextObject(void*, void*)
MechKrawlieSpawner::GetNextSpawnPoint(MechKrawlieSpawnPoint*)
MechKrawlieSpawnPointInterface::Get()
MechKrawlieSpawnPoint::CalcSpawnPosAndDirection(VuVec&, short&)
MechKrawlieSpawnerEdRef::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
MechKrawlieSpawnerEdRef::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
MechKrawlieSpawnerHelper::MechKrawlieSpawnerHelper()
MechKrawlieSpawnerHelper::Initialise()
MechKrawlieSpawnerHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieSpawnerHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieSpawnerHelper::GetNextObject(void*, void*)
MechKrawlieSpawnerHelper::GetManNextObject(ClassManager*, void*, void*)
MechKrawlieSpawnerHelper::Find(char const*)
MechKrawlieSpawnerHelper::Find(char const*, LevelContainer&)
MechKrawlieSpawnerHelper::Find(char const*, MechKrawlieManager&)
MechKrawlieSpawnerHelper::~MechKrawlieSpawnerHelper()
MechKrawlieSpawner::MechKrawlieSpawner(EdRegContext&, MechKrawlieGroup&)
MechKrawlieSpawner::~MechKrawlieSpawner()
MechKrawlieSpawnPoint::~MechKrawlieSpawnPoint()
non-virtual thunk to MechKrawlieSpawner::~MechKrawlieSpawner()
MechKrawlieSpawner::~MechKrawlieSpawner()
non-virtual thunk to MechKrawlieSpawner::~MechKrawlieSpawner()
MechKrawlieSpawner::Initialise()
MechKrawlieSpawner::EnterLevel()
MechKrawlieSpawner::Process(float)
MechKrawlieSpawner::SpawnKrawlies(int)
MechKrawlieSpawner::SetTransform(VuMtx const&)
MechKrawlieSpawnPoint::SetTransform(VuMtx const&)
MechKrawlieSpawner::SpawnKrawlie()
MechKrawlieSpawner::CalcSpawnPosAndDirection(VuVec&, short&)
MechKrawlieSpawnPointInterface::~MechKrawlieSpawnPointInterface()
MechKrawlieSpawnPoint::~MechKrawlieSpawnPoint()
MechKrawlieSpawnerEdRef::~MechKrawlieSpawnerEdRef()
MechKrawlieSpawnerHelper::~MechKrawlieSpawnerHelper()
non-virtual thunk to MechKrawlieSpawnerHelper::~MechKrawlieSpawnerHelper()
non-virtual thunk to MechKrawlieSpawnerHelper::~MechKrawlieSpawnerHelper()
MechKrawlieSpawner::GetClass() const
MechKrawlieSpawner::GetRadius() const
MechKrawlieSpawnerBase::EditorCleanup()
MechKrawlieSpawner::GetHelper() const
NuVector<MechKrawlieSpawnPoint*>::Reserve(unsigned int, bool)
NuVector<MechKrawlieSpawnerBase*>::Reserve(unsigned int, bool)
MechKrawlieSpawnerBase::MechKrawlieSpawnerBase(EdRegContext&, MechKrawlieGroup&, MechKrawlieSpawnerBase::SpawnerType)
MechKrawlieSpawnerBase::~MechKrawlieSpawnerBase()
non-virtual thunk to MechKrawlieSpawnerBase::~MechKrawlieSpawnerBase()
MechKrawlieSpawnerBase::~MechKrawlieSpawnerBase()
non-virtual thunk to MechKrawlieSpawnerBase::~MechKrawlieSpawnerBase()
MechKrawlieSpawnerBase::Initialise()
MechKrawlieSpawnerBase::FixupKrawlieTypeGroup()
MechKrawlieSpawnerBase::EnterLevel()
MechKrawlieSpawnerBase::GetHelper() const
MechKrawlieSpawnerBaseHelper::Get()
MechKrawlieSpawnerBase::GetTransform(VuMtx&) const
MechKrawlieSpawnerBase::SetTransform(VuMtx const&)
MechKrawlieSpawnerBase::GetMaxKrawlies() const
MechKrawlieSpawnerBase::GetCurrentKrawlies() const
MechKrawlieSpawnerBase::Find(char const*, MechKrawlieSpawnerBase::SpawnerType)
MechKrawlieSpawnerBase::Find(char const*, MechKrawlieManager&, MechKrawlieSpawnerBase::SpawnerType)
MechKrawlieSpawnerBase::Find(char const*, LevelContainer&, MechKrawlieSpawnerBase::SpawnerType)
MechKrawlieSpawnerBase::GetNextObject(MechKrawlieSpawnerBase*, MechKrawlieGroup*, MechKrawlieSpawnerBase::SpawnerType)
MechKrawlieSpawnerBase::GetManNextObject(MechKrawlieManager*, MechKrawlieSpawnerBase*, MechKrawlieSpawnerBase::SpawnerType)
MechKrawlieSpawnerBase::DestroyObject(MechKrawlieSpawnerBase*, MechKrawlieGroup*, MechKrawlieSpawnerBase::SpawnerType)
MechKrawlieSpawnerBaseHelper::MechKrawlieSpawnerBaseHelper()
MechKrawlieSpawnerBaseHelper::Initialise()
MechKrawlieSpawnerBaseHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieSpawnerBaseHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieSpawnerBaseHelper::GetNextObject(void*, void*)
MechKrawlieSpawnerBaseHelper::GetManNextObject(ClassManager*, void*, void*)
MechKrawlieSpawnerBaseHelper::Find(char const*)
MechKrawlieSpawnerBaseHelper::Find(char const*, MechKrawlieManager&)
MechKrawlieSpawnerBaseHelper::Find(char const*, LevelContainer&)
MechKrawlieSpawnerBaseHelper::~MechKrawlieSpawnerBaseHelper()
MechKrawlieSpawnerBase::GetClass() const
MechKrawlieSpawnerBase::Process(float)
MechKrawlieSpawnerBaseHelper::~MechKrawlieSpawnerBaseHelper()
non-virtual thunk to MechKrawlieSpawnerBaseHelper::~MechKrawlieSpawnerBaseHelper()
non-virtual thunk to MechKrawlieSpawnerBaseHelper::~MechKrawlieSpawnerBaseHelper()
MechKrawlieSpawnerFloodFill::MechKrawlieSpawnerFloodFill(EdRegContext&, MechKrawlieGroup&)
MechKrawlieSpawnerFloodFill::~MechKrawlieSpawnerFloodFill()
non-virtual thunk to MechKrawlieSpawnerFloodFill::~MechKrawlieSpawnerFloodFill()
MechKrawlieSpawnerFloodFill::~MechKrawlieSpawnerFloodFill()
non-virtual thunk to MechKrawlieSpawnerFloodFill::~MechKrawlieSpawnerFloodFill()
MechKrawlieSpawnerFloodFill::EnterLevel()
MechKrawlieSpawnerFloodFill::Initialise()
MechKrawlieSpawnerFloodFill::Process(float)
MechKrawlieSpawnerFloodFill::GetHelper() const
MechKrawlieSpawnerFloodFillHelper::Get()
MechKrawlieSpawnerFloodFillHelper::MechKrawlieSpawnerFloodFillHelper()
MechKrawlieSpawnerFloodFillHelper::Initialise()
MechKrawlieSpawnerFloodFillHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieSpawnerFloodFillHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
MechKrawlieSpawnerFloodFillHelper::GetNextObject(void*, void*)
MechKrawlieSpawnerFloodFillHelper::GetManNextObject(ClassManager*, void*, void*)
MechKrawlieSpawnerFloodFillHelper::Find(char const*)
MechKrawlieSpawnerFloodFillHelper::Find(char const*, LevelContainer&)
MechKrawlieSpawnerFloodFillHelper::Find(char const*, MechKrawlieManager&)
MechKrawlieSpawnerFloodFill::GetClass() const
MechKrawlieSpawnerFloodFillHelper::~MechKrawlieSpawnerFloodFillHelper()
MechKrawlieAreaSpline::MechKrawlieAreaSpline(EdRegContext&, void*, int)
MechKrawlieAreaSpline::~MechKrawlieAreaSpline()
non-virtual thunk to MechKrawlieAreaSpline::~MechKrawlieAreaSpline()
MechKrawlieAreaSpline::~MechKrawlieAreaSpline()
non-virtual thunk to MechKrawlieAreaSpline::~MechKrawlieAreaSpline()
MechKrawlieAreaSpline::GetClass() const
KrawlieAreaKnot::KrawlieAreaKnot()
KrawlieAreaKnot::KrawlieAreaKnot(KrawlieAreaKnot const&, SplineObject*)
KrawlieAreaKnot::CloneKnot(SplineObject*) const
KrawlieAreaKnot::CopyKnot(SplineKnot const*)
KrawlieAreaSplineHelper::RegisterSplineData(EdClass*)
KrawlieAreaKnot::~KrawlieAreaKnot()
KrawlieAreaSplineHelper::~KrawlieAreaSplineHelper()
SplineHelperT<MechKrawlieAreaSpline>::NewSpline(EdRegContext*, void*, int) const
SplineHelperT<MechKrawlieAreaSpline>::DeleteSpline(SplineObject*) const
SplineHelperT<MechKrawlieAreaSpline>::GetManagerID() const
KrawlieAreaSplineHelper::GetPrefix()
KrawlieAreaSplineHelper::GetCategory()
KrawlieAreaSplineHelper::GetFileExt()
non-virtual thunk to KrawlieAreaSplineHelper::~KrawlieAreaSplineHelper()
non-virtual thunk to KrawlieAreaSplineHelper::~KrawlieAreaSplineHelper()
FixedCylinder::FixedCylinder()
FixedCylinder::Initialize()
FixedCylinder::FixedCylinder(EdRegContext&)
FixedCylinder::FixedCylinder(EdRegContext&, FixedCylinder&)
FixedCylinder::~FixedCylinder()
non-virtual thunk to FixedCylinder::~FixedCylinder()
FixedCylinder::~FixedCylinder()
non-virtual thunk to FixedCylinder::~FixedCylinder()
FixedCylinder::GetClass() const
FixedCylinder::GetName() const
FixedCylinder::SetName(char const*)
FixedCylinder::UpdateCylinderData(MechKrawlieZone**, LevelContainer**)
FixedCylinder::GetTransform(VuMtx&) const
FixedCylinder::SetTransform(VuMtx const&)
FixedCylinderHelper::GetKrawlieZone(VuVec const&, LevelContainer**)
FixedCylinderHelper::GetFixedCylinderManager(LevelContainer*)
FixedCylinder::GetVisibility() const
FixedCylinder::SetVisibility(int)
FixedCylinder::GetRadius() const
FixedCylinder::SetRadius(float)
FixedCylinder::GetHeight() const
FixedCylinder::SetHeight(float)
FixedCylinderHelper::FindKrawlieZoneFixedCylinder(MechKrawlieZone*, VuVec const&, float, float)
FixedCylinder::ResetChanges()
FixedCylinderHelper::FixedCylinderHelper()
FixedCylinderHelper::~FixedCylinderHelper()
non-virtual thunk to FixedCylinderHelper::~FixedCylinderHelper()
FixedCylinderHelper::~FixedCylinderHelper()
non-virtual thunk to FixedCylinderHelper::~FixedCylinderHelper()
CreateFixedCylinderManager(LevelContainer&)
FixedCylinderHelper::Initialise()
FixedCylinderHelper::GetManNumObjects(ClassManager*, void*)
FixedCylinderHelper::GetManNextObject(ClassManager*, void*, void*)
FixedCylinderHelper::EventNotify(Event&, NuEventData&)
non-virtual thunk to FixedCylinderHelper::EventNotify(Event&, NuEventData&)
FixedCylinderHelper::GetContainersWithKrawlieManager(NuMap<LevelContainer*, char>&)
FixedCylinderManager::FixedCylinderManager(LevelContainer&)
FixedCylinderManager::~FixedCylinderManager()
FixedCylinderManager::~FixedCylinderManager()
FixedCylinderManager::GetClass(int)
FixedCylinderManager::GetNumClasses()
FixedCylinderManager::GetNumObjects(void*)
FixedCylinderManager::GetNextObject(void*, void*)
FixedCylinderManager::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
FixedCylinderManager::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
FixedCylinderManager::RecoupleCylinders()
FixedCylinderManager::GetManagerName() const
EdRefFixedCylinderRadius::~EdRefFixedCylinderRadius()
EdRefFixedCylinderRadius::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefFixedCylinderHeight::~EdRefFixedCylinderHeight()
EdRefFixedCylinderHeight::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
NuMap<LevelContainer*, char>::InsertNode(LevelContainer* const&)
NuMap<LevelContainer*, char>::DeleteNodeLinks(NuMapNode<LevelContainer*, char>*)
TargetingInterfaceSceneObject::TargetingInterfaceSceneObject(SceneObject&)
TargetingInterfaceSceneObject::~TargetingInterfaceSceneObject()
TargetingInterfaceSceneObject::~TargetingInterfaceSceneObject()
TargetingInterfaceSceneObject::operator=(TargetingInterfaceSceneObject const&)
TargetingInterfaceSceneObject::GetSceneObject()
TargetingInterfaceSceneObject::GetTargetName() const
TargetingInterfaceSceneObject::GetGameType()
TargetingInterfaceSceneObject::GetLevelContainer() const
TargetingInterfaceSceneObject::GetPos(VuVec&, int) const
TargetingInterfaceSceneObject::GetRadius() const
TargetingInterfaceSceneObject::GetTargetYRot()
TargetingInterfaceSceneObject::GetTargetPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceSceneObject::GetMtx(VuMtx&, int)
TargetingInterfaceSceneObject::GetTargetFloorPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceSceneObject::GetTargetMom(VuVec&, TARGETING_TYPE)
TargetingInterfaceSceneObject::GetTargetCursorPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceSceneObject::GetTargetRandomPos(VuVec&, TARGETING_TYPE, int)
TargetingInterfaceSceneObject::GetInterfaceType() const
TargetingInterfaceSceneObject::GetThrowingGlow()
TargetingInterfaceSceneObject::GetPlaceable()
MechLevelContainer::AddManagers()
MechLevelContainer::~MechLevelContainer()
MechLevelFlagId::IsSetOnLevel(LevelContainer const&) const
MechLevelFlags::IsSetOnLevel(MechLevelFlagId const&, LevelContainer const&) const
MechLevelInstanceFlags::MechLevelInstanceFlags(LevelContainer&)
MechLevelFlags::ParseLevelConfigEntry(nufpar_s*)
ClassManagerAccessor<MechLevelInstanceFlags>::GetFromCreate(ILevelContainer const&)
MechLevelFlags::~MechLevelFlags()
MechLevelFlags::~MechLevelFlags()
MechSystemBase<MechLevelFlags, int>::Suppress(int)
MechSystemBase<MechLevelFlags, int>::IsSuppressed(int) const
MechLevelInstanceFlags::~MechLevelInstanceFlags()
MechLevelInstanceFlags::~MechLevelInstanceFlags()
MechLevelInstanceFlags::GetManagerName() const
CreateSplitControlVolumeManager(LevelContainer&)
SplitControlVolume::SplitControlVolume(EdRegContext&)
SplitControlVolume::~SplitControlVolume()
non-virtual thunk to SplitControlVolume::~SplitControlVolume()
SplitControlVolume::~SplitControlVolume()
non-virtual thunk to SplitControlVolume::~SplitControlVolume()
SplitControlVolume::GetClass() const
SplitControlVolume::CreateAIArea()
SplitControlVolume::Draw(EdRenderWindowInfo const&, int)
SplitControlVolumeHelper::Initialise()
SplitControlVolumeHelper::GetManNextObject(ClassManager*, void*, void*)
SplitControlVolumeHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
SplitControlVolumeHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
SplitControlVolumeHelper::SplitControlVolumeHelper()
SplitControlVolumeManager::SplitControlVolumeManager(LevelContainer&)
SplitControlVolumeManager::RegisterProcessing()
SplitControlVolumeManager::EventNotify(Event&, NuEventData&)
SplitControlVolumeManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
SplitControlVolumeManager::~SplitControlVolumeManager()
SplitControlVolumeManager::~SplitControlVolumeManager()
SplitControlVolumeSystem::SplitControlVolumeSystem()
SplitControlVolumeSystem::~SplitControlVolumeSystem()
SplitControlVolumeSystem::~SplitControlVolumeSystem()
SplitControlVolumeSystem::Init()
SplitControlVolumeSystem::OnEnterLevel(MechLevelContainer&)
SplitControlVolumeSystem::OnResetLevel(MechLevelContainer&)
SplitControlVolumeSystem::OnExitLevel(MechLevelContainer&)
SplitControlVolume::GetTransform(VuMtx&) const
SplitControlVolume::SetTransform(VuMtx const&)
SplitControlVolumeHelper::~SplitControlVolumeHelper()
SplitControlVolumeManager::GetManagerName() const
SplitControlVolumeSystem::ShouldAddManagersForLevel(MechLevelContainer&)
MechSystemBase<SplitControlVolumeSystem, int>::Suppress(int)
MechSystemBase<SplitControlVolumeSystem, int>::IsSuppressed(int) const
ClassManagerAccessor<SplitControlVolumeManager>::GetFromCreate(ILevelContainer const&)
CreateCameraZoneManager(LevelContainer&)
CameraZone::CameraZone(EdRegContext&)
CameraZone::~CameraZone()
non-virtual thunk to CameraZone::~CameraZone()
CameraZone::~CameraZone()
non-virtual thunk to CameraZone::~CameraZone()
CameraZone::GetClass() const
CameraZone::Fixup()
CameraZone::SetTransform(VuMtx const&)
CameraZone::IsPointInsideZone(VuVec&)
CameraZone::Draw(EdRenderWindowInfo const&, int)
EdRefCameraZone::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCameraZone::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CameraZoneHelper::Initialise()
CameraZoneHelper::GetManNextObject(ClassManager*, void*, void*)
CameraZoneHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
CameraZoneHelper::DestroyObject(ClassObject const&, EDREG_FLAGS, EdRegContext*)
CameraZoneHelper::CameraZoneHelper()
CameraZoneManager::CameraZoneManager(LevelContainer&)
CameraZoneManager::GetClass(int)
CameraZoneManager::RegisterProcessing()
CameraZoneManager::EventNotify(Event&, NuEventData&)
CameraZoneManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
CameraZoneManager::~CameraZoneManager()
CameraZoneManager::~CameraZoneManager()
CameraZoneSystem::CameraZoneSystem()
CameraZoneSystem::~CameraZoneSystem()
CameraZoneSystem::~CameraZoneSystem()
CameraZoneSystem::Init()
CameraZoneSystem::OnEnterLevel(MechLevelContainer&)
CameraZoneSystem::OnResetLevel(MechLevelContainer&)
CameraZoneSystem::OnExitLevel(MechLevelContainer&)
EdRefCameraZone::~EdRefCameraZone()
CameraZone::GetTransform(VuMtx&) const
CameraZone::SetVisibility(int)
CameraZone::Activate(bool)
CameraZone::GetNumOutputs()
CameraZone::GetOutput(int, int)
CameraZone::GetDefaultOutputIndex()
CameraZone::GetOutputName(int)
CameraZone::ActivateRev(int, int)
CameraZone::ResetForLoop()
CameraZoneHelper::~CameraZoneHelper()
CameraZoneManager::GetManagerName() const
CameraZoneManager::GetNumClasses()
CameraZoneSystem::ShouldAddManagersForLevel(MechLevelContainer&)
MechSystemBase<CameraZoneSystem, int>::Suppress(int)
MechSystemBase<CameraZoneSystem, int>::IsSuppressed(int) const
ClassManagerAccessor<CameraZoneManager>::GetFromCreate(ILevelContainer const&)
MechGadgetObstacleTemplate::MechGadgetObstacleTemplate(EdRegContext&)
MechGadgetObstacleTemplate::GetClass() const
MechGadgetObstacleTemplate::AddStates()
MechGadgetObstacleTemplateHelper::Initialise()
MechGadgetObstacleTemplateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetObstacleInstance::MechGadgetObstacleInstance(EdRegContext&)
MechGadgetObstacleInstance::MechGadgetObstacleInstance(CoreGroup&, EdRegContext&)
MechGadgetObstacleInstance::MechGadgetObstacleInstance(MechGadgetObstacleInstance&, EdRegContext&)
MechGadgetObstacleInstance::MechGadgetObstacleInstance(EdString&, EdRegContext&)
MechGadgetObstacleInstance::GetClass() const
MechGadgetObstacleInstance::StartPlaying()
MechGadgetObstacleInstance::StopPlaying()
MechGadgetObstacleInstance::EvaluateInteraction(MechCharacter&)
MechGadgetObstacleInstance::RequiresPhantom()
MechGadgetObstacleInstance::UpdatePhantomMinMax()
MechGadgetObstacleInstance::GetNumOutputs()
MechGadgetObstacleInstance::GetOutput(int, int)
MechGadgetObstacleInstance::GetOutputName(int)
MechGadgetObstacleInstance::Activate(bool)
MechGadgetObstacleInstance::SetVisibility(int)
MechGadgetObstacleInstanceHelper::Initialise()
MechGadgetObstacleInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetObstacleInstance::OnAnimationComplete(CoreGroupState::eStateAnimPosition)
ObstacleTriggerAddon::OnHook(unsigned char, HookArgs*)
non-virtual thunk to ObstacleTriggerAddon::OnHook(unsigned char, HookArgs*)
ObstacleTriggerAddon::OnRemoved()
MechGadgetObstacleTemplateHelper::~MechGadgetObstacleTemplateHelper()
non-virtual thunk to MechGadgetObstacleTemplateHelper::~MechGadgetObstacleTemplateHelper()
non-virtual thunk to MechGadgetObstacleTemplateHelper::~MechGadgetObstacleTemplateHelper()
MechGadgetObstacleInstanceHelper::~MechGadgetObstacleInstanceHelper()
non-virtual thunk to MechGadgetObstacleInstanceHelper::~MechGadgetObstacleInstanceHelper()
non-virtual thunk to MechGadgetObstacleInstanceHelper::~MechGadgetObstacleInstanceHelper()
MechGadgetObstacleTemplate::~MechGadgetObstacleTemplate()
MechGadgetObstacleTemplate::~MechGadgetObstacleTemplate()
non-virtual thunk to MechGadgetObstacleTemplate::~MechGadgetObstacleTemplate()
non-virtual thunk to MechGadgetObstacleTemplate::~MechGadgetObstacleTemplate()
non-virtual thunk to MechGadgetObstacleTemplate::~MechGadgetObstacleTemplate()
non-virtual thunk to MechGadgetObstacleTemplate::~MechGadgetObstacleTemplate()
ObstacleTriggerAddon::~ObstacleTriggerAddon()
ObstacleTriggerAddon::GetLevelContainer() const
non-virtual thunk to ObstacleTriggerAddon::~ObstacleTriggerAddon()
non-virtual thunk to ObstacleTriggerAddon::~ObstacleTriggerAddon()
non-virtual thunk to ObstacleTriggerAddon::GetLevelContainer() const
MechGadgetObstacleInstance::~MechGadgetObstacleInstance()
non-virtual thunk to MechGadgetObstacleInstance::~MechGadgetObstacleInstance()
non-virtual thunk to MechGadgetObstacleInstance::~MechGadgetObstacleInstance()
MechGadgetTriggerAreaTemplate::MechGadgetTriggerAreaTemplate(EdRegContext&, EdClass*)
MechGadgetTriggerAreaTemplate::GetClass() const
MechGadgetTriggerAreaTemplateHelper::MechGadgetTriggerAreaTemplateHelper()
MechGadgetTriggerAreaTemplateHelper::~MechGadgetTriggerAreaTemplateHelper()
non-virtual thunk to MechGadgetTriggerAreaTemplateHelper::~MechGadgetTriggerAreaTemplateHelper()
MechGadgetTriggerAreaTemplateHelper::~MechGadgetTriggerAreaTemplateHelper()
non-virtual thunk to MechGadgetTriggerAreaTemplateHelper::~MechGadgetTriggerAreaTemplateHelper()
MechGadgetTriggerAreaTemplateHelper::Initialise()
MechGadgetTriggerAreaTemplateHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
MechGadgetTriggerAreaInstance::MechGadgetTriggerAreaInstance(EdRegContext&)
MechGadgetTriggerAreaInstance::MechGadgetTriggerAreaInstance(CoreGroup&, EdRegContext&)
MechGadgetTriggerAreaInstance::MechGadgetTriggerAreaInstance(MechGadgetTriggerAreaInstance&, EdRegContext&)
MechGadgetTriggerAreaInstance::MechGadgetTriggerAreaInstance(EdString&, EdRegContext&)
MechGadgetTriggerAreaInstance::GetClass() const
MechGadgetTriggerAreaInstance::Reset()
MechGadgetTriggerAreaInstance::AddComponents()
MechGadgetTriggerAreaInstance::EvaluateInteraction(MechCharacter&)
MechGadgetTriggerAreaInstance::RequiresPhantom()
MechGadgetTriggerAreaInstance::UpdatePhantomMinMax()
MechGadgetTriggerAreaInstance::GetNumOutputs()
MechGadgetTriggerAreaInstance::GetOutput(int, int)
MechGadgetTriggerAreaInstance::GetOutputName(int)
MechGadgetTriggerAreaInstanceHelper::Initialise()
MechGadgetTriggerAreaInstanceHelper::CreateObject(EdParams const&, EDREG_FLAGS, EdRegContext*)
TriggerAreaTriggerAddon::TriggerAreaTriggerAddon()
TriggerAreaTriggerAddon::OnHook(unsigned char, HookArgs*)
TriggerAreaTriggerAddon::OnProcess()
non-virtual thunk to TriggerAreaTriggerAddon::OnHook(unsigned char, HookArgs*)
TriggerAreaTriggerAddon::OnRemoved()
TriggerAreaTriggerAddon::EventNotify(Event&, NuEventData&)
non-virtual thunk to TriggerAreaTriggerAddon::EventNotify(Event&, NuEventData&)
MechGadgetTriggerAreaInstanceHelper::~MechGadgetTriggerAreaInstanceHelper()
non-virtual thunk to MechGadgetTriggerAreaInstanceHelper::~MechGadgetTriggerAreaInstanceHelper()
non-virtual thunk to MechGadgetTriggerAreaInstanceHelper::~MechGadgetTriggerAreaInstanceHelper()
MechGadgetTriggerAreaTemplate::~MechGadgetTriggerAreaTemplate()
MechGadgetTriggerAreaTemplate::~MechGadgetTriggerAreaTemplate()
non-virtual thunk to MechGadgetTriggerAreaTemplate::~MechGadgetTriggerAreaTemplate()
non-virtual thunk to MechGadgetTriggerAreaTemplate::~MechGadgetTriggerAreaTemplate()
non-virtual thunk to MechGadgetTriggerAreaTemplate::~MechGadgetTriggerAreaTemplate()
non-virtual thunk to MechGadgetTriggerAreaTemplate::~MechGadgetTriggerAreaTemplate()
TriggerAreaTriggerAddon::~TriggerAreaTriggerAddon()
TriggerAreaTriggerAddon::~TriggerAreaTriggerAddon()
TriggerAreaTriggerAddon::GetLevelContainer() const
non-virtual thunk to TriggerAreaTriggerAddon::~TriggerAreaTriggerAddon()
non-virtual thunk to TriggerAreaTriggerAddon::~TriggerAreaTriggerAddon()
non-virtual thunk to TriggerAreaTriggerAddon::GetLevelContainer() const
non-virtual thunk to TriggerAreaTriggerAddon::~TriggerAreaTriggerAddon()
non-virtual thunk to TriggerAreaTriggerAddon::~TriggerAreaTriggerAddon()
MechGadgetTriggerAreaInstance::~MechGadgetTriggerAreaInstance()
MechGadgetTriggerAreaInstance::~MechGadgetTriggerAreaInstance()
MechGadgetTriggerAreaInstance::GetDefaultOutputIndex()
MechGadgetTriggerAreaInstance::StartInteraction(MechCharacter&)
MechGadgetTriggerAreaInstance::OnEnter(MechCharacter&, MechGadgetTriggerAreaInstance*)
MechGadgetTriggerAreaInstance::OnExit(MechCharacter&, MechGadgetTriggerAreaInstance*)
non-virtual thunk to MechGadgetTriggerAreaInstance::~MechGadgetTriggerAreaInstance()
non-virtual thunk to MechGadgetTriggerAreaInstance::~MechGadgetTriggerAreaInstance()
MechGadgetTriggerAreaResults::~MechGadgetTriggerAreaResults()
MechGadgetTriggerAreaResults::~MechGadgetTriggerAreaResults()
cTalkMaster::cTalkMaster()
cTalkMaster::cTalkMaster(unsigned int)
cTalkMaster::~cTalkMaster()
cTalkMaster::~cTalkMaster()
cTalkMaster::ClearTasks(Brain&)
cTalkMaster::Activate()
cTalkMaster::Terminate(Brain&)
cTalkMaster::Process(Brain&, float const&)
cTalkMaster::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cTalkMaster::OnSlaveStateSuccess(unsigned int)
cTalkMaster::OnSlaveStateFailed(unsigned int)
cTalkMaster::GetSlaveTask()
cTalkSlave::cTalkSlave()
cTalkSlave::cTalkSlave(unsigned int)
cTalkSlave::~cTalkSlave()
cTalkSlave::~cTalkSlave()
cTalkSlave::ClearTasks(Brain&)
cTalkSlave::Activate()
cTalkSlave::Terminate(Brain&)
cTalkSlave::Process(Brain&, float const&)
cTalkSlave::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cTalkSlave::SetSlaveState(unsigned int)
cIdle::cIdle()
cIdle::~cIdle()
cIdle::~cIdle()
cIdle::ClearTasks(Brain&)
cIdle::Activate()
cIdle::Terminate(Brain&)
cIdle::Process(Brain&, float const&)
cIdle::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cGotoTargetStraightLine::cGotoTargetStraightLine()
cGotoTargetStraightLine::cGotoTargetStraightLine(WeakPtr<cAITarget>, unsigned int)
cGotoTargetStraightLine::~cGotoTargetStraightLine()
cGotoTargetStraightLine::~cGotoTargetStraightLine()
cGotoTargetStraightLine::ClearTasks(Brain&)
cGotoTargetStraightLine::Activate()
cGotoTargetStraightLine::Terminate(Brain&)
cGotoTargetStraightLine::Process(Brain&, float const&)
cGotoTargetStraightLine::TraversePath(MechCharacter*)
cGotoTargetStraightLine::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cGotoTargetStraightLine::UpdateSpeed(int)
cGotoTargetStraightLine::MoveToTarget(MechCharacter*, VuVec const&, VuVec const&, WeakPtr<cAITarget>)
cDailyRoutine::cDailyRoutine()
cDailyRoutine::cDailyRoutine(unsigned int)
cDailyRoutine::~cDailyRoutine()
cDailyRoutine::~cDailyRoutine()
cDailyRoutine::ClearTasks(Brain&)
cDailyRoutine::Activate()
cDailyRoutine::Terminate(Brain&)
cDailyRoutine::Process(Brain&, float const&)
cDailyRoutine::UpdateParanoidFactor(MechCharacter*)
cDailyRoutine::DoSomethingInteresting(Brain&, MechCharacter*)
cDailyRoutine::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
cDailyRoutine::PlayAnimation(Brain&, MechCharacter*)
cDailyRoutine::FindSlave(Brain&, MechCharacter*)
cDailyRoutine::FindAttractor(Brain&, MechCharacter*)
iMasterTask::SetSlave(MechCharacter*)
iSlaveTask::SetMaster(MechCharacter*)
cPlayerInVehicle::cPlayerInVehicle()
cPlayerInVehicle::~cPlayerInVehicle()
cPlayerInVehicle::~cPlayerInVehicle()
cPlayerInVehicle::ClearTasks(Brain&)
cPlayerInVehicle::Activate()
cPlayerInVehicle::Terminate(Brain&)
cPlayerInVehicle::Process(Brain&, float const&)
cPlayerInVehicle::NotifyObjectDestroy(FrameworkEventObjectClassData const&)
NvHelper::GetNodeLinksInRadius(NvNodeLinkList&, NvMap const&, VuVec const&, float)
NvHelper::GetNodeLinksInRadius(NvNodeLinkList&, NvRTreeNode const*, unsigned int, NvMap const&, VuVec const&, float)
NvHelper::GetNearestNodeLink(NvMap const&, VuVec const&, float, float, float, float)
NvHelper::GetBestNodeLink(NvRTreeNode const*, unsigned int, NvMap const&, VuVec const&, NvHelper::NearestLinkPacket const&, float&, short&)
NvHelper::TestCircle(NvMap const&, VuVec const&, float)
NvHelper::TestCircle(NvRTreeNode const*, unsigned int, NvMap const&, VuVec const&, float)
NvHelper::TestCylinder(NvMap const&, VuVec const&, float, float, float)
NvHelper::TestCylinder(NvRTreeNode const*, unsigned int, NvMap const&, VuVec const&, float, float, float)
NvHelper::GetNodeLinkDistSqr(NvNodeLink const&, NvMap const&, VuVec const&)
NvHelper::GetClosestPointOnNodeLink(NvNodeLink const&, NvMap const&, VuVec const&, float&, VuVec&)
NvHelper::PointInTargetArea(NvAreaTarget const&, NuVec2 const&)
NvHelper::PointInTriangle2D(NuVec2 const&, NuVec2 const&, NuVec2 const&, NuVec2 const&)
NvNodeLink::Serialize(NuArchive&, int)
NvNodeLinkList::NvNodeLinkList(unsigned short)
NvNodeLinkList::~NvNodeLinkList()
NvNodeLinkList::~NvNodeLinkList()
NvNodeLinkList::AddAtEnd(NvNodeLink const&)
NvNodeLinkList::PopFront()
NvNodeLinkList::Clear()
NvNodeLinkList::Get(unsigned int) const
NvNodeLinkList::Remove(unsigned int)
NaviPath::NaviPath(unsigned short)
NaviPath::~NaviPath()
NaviPath::~NaviPath()
NaviPath::AddAtEnd(NvMap const&, short, bool)
NaviPath::PopFront(NvMap const&)
NaviPath::PopBack(NvMap const&)
NaviPath::Clear()
NaviPath::Get(unsigned int) const
NaviPathFunctor::GetLinkCost(NaviPathLink&, NvMap const&) const
NaviPathFunctor::GoalAchieved(short, NaviPathNode const*, NvMap const&) const
NaviPathFunctor::CostToGoal(short, NvMap const&) const
NaviPathFinder::NaviPathFinder(unsigned short)
NaviPathFinder::~NaviPathFinder()
NaviPathFinder::Clear()
NaviPathFinder::Calculate(NaviPathFinderContext&, unsigned int)
NaviPathFinder::Unlock()
NaviPathFinder::CreateNode(short, short, bool&)
NaviPathFinder::SetInOpenList(short, bool)
NaviPathFinder::Lock(NaviPathFinderContext const&)
NaviPathFinder::GetBestNode()
NaviPathFinder::ConstructPath(NaviPathFinderContext&, short)
NaviPathFinder::SetInClosedList(short, bool)
NaviPathFinder::BuildLinks(short, NaviPathFinderContext&)
NaviPathFinder::GetFreeNode()
NaviSystem::NaviSystem()
NaviSystem::~NaviSystem()
NaviSystem::DestroyMaps()
NaviSystem::~NaviSystem()
NaviSystem::Init()
NaviSystem::ShutDown()
NaviSystem::OnEnterLevel(MechLevelContainer&)
NaviSystem::CreateMaps(void*)
NaviSystem::OnExitLevel(MechLevelContainer&)
NaviSystem::OnResetLevel(MechLevelContainer&)
NaviSystem::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
NaviSystem::EventNotify(Event&, NuEventData&)
NaviSystem::RegisterScriptFunctionality()
NaviSystem::ParseCommandLine(int, char**)
NaviSystem::GetMap(char const*) const
NaviSystem::GetMap(NvMap const&) const
NaviSystem::GetMap(short) const
NaviSystem::LoadMap(short)
NaviSystem::UnloadMap(short)
MechSystemBase<NaviSystem, int>::Suppress(int)
MechSystemBase<NaviSystem, int>::IsSuppressed(int) const
NvMapSVar::AsBool() const
NvMapSVar::Initialise()
SAction_NaviMap::Exec(ScriptContext&)
NaviMapAction::Exec(ScriptContext&)
NaviMapAction_IsLoaded::MapExec(ScriptContext&, NvMapSVarData&)
NaviMapAction_Load::MapExec(ScriptContext&, NvMapSVarData&)
NaviMapAction_Unload::MapExec(ScriptContext&, NvMapSVarData&)
NvMapSVar::~NvMapSVar()
NvMapSVar::Equals(ScriptVariable const*)
NvMapSVar::Set(ScriptVariable const*)
SAction_NaviMap::~SAction_NaviMap()
SAction_NaviMap::GetName() const
SAction_NaviMap::GetInputs(SCmdParams&) const
SAction_NaviMap::GetOutputs(SCmdParams&) const
NaviMapAction::~NaviMapAction()
NaviMapAction_IsLoaded::~NaviMapAction_IsLoaded()
NaviMapAction_IsLoaded::GetName() const
NaviMapAction_IsLoaded::GetInputs(SCmdParams&) const
NaviMapAction_IsLoaded::GetOutputs(SCmdParams&) const
NaviMapAction_Load::~NaviMapAction_Load()
NaviMapAction_Load::GetName() const
NaviMapAction_Load::GetInputs(SCmdParams&) const
NaviMapAction_Load::GetOutputs(SCmdParams&) const
NaviMapAction_Unload::~NaviMapAction_Unload()
NaviMapAction_Unload::GetName() const
NaviMapAction_Unload::GetInputs(SCmdParams&) const
NaviMapAction_Unload::GetOutputs(SCmdParams&) const
ScriptVariable* CreateObject<NvMapSVar>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<NvMapSVar>(char const*, ScriptContext&)
NvMap::NvMap()
NvMap::~NvMap()
NvMap::Destroy()
NvMap::Create(char const*)
NvMap::Load()
NvMap::DoLoad(void*)
NvMapEventData::~NvMapEventData()
NvNode::Serialize(NuArchive&)
NvAreaTarget::~NvAreaTarget()
NvAreaTarget::Serialize(NuArchive&)
MechEnumNameArray::MechEnumNameArray(char const**, int)
MechEnumNameArray::~MechEnumNameArray()
MechEnumNameArray::GetVal(char const*)
MechEnumNameArray::GetVal(HashedKey const&)
MechDecalSpecialSystem::MechDecalSpecialSystem()
MechDecalSpecialSystem::AddManagersForLevel(MechLevelContainer&)
MechDecalSpecialSystem::RemoveManagersForLevel(MechLevelContainer&)
MechDecalSpecial::MechDecalSpecial(float, nuhspecial_s const&, VuMtx const&, Entity*)
MechDecalSpecial::~MechDecalSpecial()
MechDecalSpecial::Process(float)
MechDecalSpecial::Render(VuMtx&)
MechDecalSpecialManager::MechDecalSpecialManager(LevelContainer&)
MechDecalSpecialManager::RegisterProcessing()
MechDecalSpecialManager::RegisterRendering()
MechDecalSpecialManager::OnProcess(ManagerProcessData*, ClassManager::eProcessingPriority const&, void*)
MechDecalSpecialManager::OnRender(ManagerRenderData*, ClassManager::eRenderingPriority const&, void*)
MechDecalSpecialManager::AddDecalSpecial(float, nuhspecial_s const&, VuMtx const&, Entity*)
MechDecalSpecialSystem::~MechDecalSpecialSystem()
MechSystemBase<MechDecalSpecialSystem, int>::Suppress(int)
MechSystemBase<MechDecalSpecialSystem, int>::IsSuppressed(int) const
MechDecalSpecialManager::~MechDecalSpecialManager()
MechDecalSpecialManager::~MechDecalSpecialManager()
MechDecalSpecialManager::GetManagerName() const
MechDecalSpecialListener::~MechDecalSpecialListener()
MechDecalSpecialListener::~MechDecalSpecialListener()
MechDecalSpecialListener::RemoveEntity(Entity*)
MechShapes::MechShapes()
MechShapes::Init()
MechShapes::~MechShapes()
MechSystemBase<MechShapes, int>::Suppress(int)
MechSystemBase<MechShapes, int>::IsSuppressed(int) const
MechShapeArrowHelper::Register()
MechShapeArrowHelper::~MechShapeArrowHelper()
HookArgsCamOverride::HookArgsCamOverride(GAMECAMERA*, MechCharacter*)
HookArgsCamOverride::~HookArgsCamOverride()
HookArgsCamOverride::~HookArgsCamOverride()
NuFixablePtrApi::SetCallbacks(bool (*)(void*, int, int), bool (*)(void*, int, int))
NuFixablePtrApi::NuAssertCallback(bool (*)(void*, int, int))
NuFixablePtrApi::GetNuUnknown(void*, int, int)
NuFixablePtrApi::SetNuUnknown(void*, int, int, NuUnknown*)
cMechTokeniserItem::Free()
cMechTokeniserItem::SetDataFloat(float)
cMechTokeniserItem::SetDataFloatParam(unsigned int)
cMechTokeniserItem::SetDataTag(unsigned int)
cMechTokeniserItem::SetDataString(char const*)
cMechTokeniserItem::SetDataFloatArray(float*, int)
cMechTokeniserItem::SetDataFloatParamArray(unsigned int*, int)
cMechTokeniserItem::SetDataTagArray(unsigned int*, int)
cMechTokeniserItem::SetDataStringArray(char const**, int)
cMechTokeniserItem::SetNoData()
cMechTokeniser::~cMechTokeniser()
cMechTokeniser::Parse(char const*)
cMechTokeniser::ValidWordCharacter(char const*) const
cMechTokeniser::ArraySeparator(char const*) const
cMechTokeniser::AllocateConstructItems(unsigned int)
cMechTokeniser::WhiteSpaceCharacter(char const*)
NuVector<cMechTokeniserItem>::Reserve(unsigned int, bool)
ScriptHelper::GetNamedWanderSpline(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedWanderSpline(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedCharacter(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedCharacter(LegoLevelContainer&, cParseContextItem const&, bool)
cParseContextItem::GetCharacter() const
ScriptHelper::GetNamedGizmo(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedGizmo(LegoLevelContainer&, cParseContextItem const&)
cParseContextItem::GetGizmo() const
ScriptHelper::GetNamedLegoSpecial(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedLegoSpecial(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedRigidBody(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedRigidBody(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedAIAreaIndex(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedAIAreaIndex(LegoLevelContainer&, cParseContextItem const&)
cParseContextItem::GetArea() const
ScriptHelper::GetAIAreaFromIndex(LegoLevelContainer&, unsigned short)
ScriptHelper::GetNamedAIArea(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedAIArea(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedAILocator(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedAILocator(LegoLevelContainer&, cParseContextItem const&)
cParseContextItem::GetLocator() const
ScriptHelper::GetNamedAILocatorSet(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedAILocatorSet(LegoLevelContainer&, unsigned int)
ScriptHelper::GetNamedAILocatorSet(LegoLevelContainer&, cParseContextItem const&)
cParseContextItem::GetLocatorSet() const
ScriptHelper::GetNamedEdgeGroup(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedEdgeGroup(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedNodeGroup(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedNodeGroup(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedLegoMessage(LegoLevelContainer&, char const*, LegoMessages::MessageScope)
ScriptHelper::GetNamedLegoMessage(LegoLevelContainer&, cParseContextItem const&, LegoMessages::MessageScope)
cParseContextItem::GetMessage() const
ScriptHelper::GetNamedDynamicLight(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedDynamicLight(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedBeamDescriptor(char const*)
ScriptHelper::GetNamedBeamDescriptor(cParseContextItem const&)
ScriptHelper::GetNamedVFXID(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedVFXID(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedCharacterType(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedCharacterType(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedIconID(char const*)
ScriptHelper::GetNamedIconID(cParseContextItem const&)
ScriptHelper::GetNamedParticleID(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedParticleID(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedContextID(char const*)
ScriptHelper::GetNamedContextID(cParseContextItem const&)
ScriptHelper::GetNamedAnimActionID(char const*)
ScriptHelper::GetNamedAnimActionID(cParseContextItem const&)
ScriptHelper::GetNamedSpecialMoveID(char const*)
ScriptHelper::GetNamedSpecialMoveID(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedGizItemType(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedGizItemType(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedHintID(char const*)
ScriptHelper::GetNamedHintID(cParseContextItem const&)
ScriptHelper::GetNamedHint(char const*)
ScriptHelper::GetNamedHint(cParseContextItem const&)
ScriptHelper::GetNamedSpline(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedSpline(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedLevelData(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedLevelData(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedCharacterAddOn(MechCharacter&, HashedKey const&)
ScriptHelper::GetNamedCharacterAddOn(MechCharacter&, cParseContextItem const&)
ScriptHelper::GetNamedLevelAddOn(LegoLevelContainer&, HashedKey const&)
ScriptHelper::GetNamedLevelAddOn(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedScriptAddOn(GameScriptContext&, HashedKey const&)
ScriptHelper::GetNamedScriptAddOn(GameScriptContext&, cParseContextItem const&)
ScriptHelper::GetNamedAddOn(GameScriptContext*, MechCharacter*, LegoLevelContainer*, HashedKey const&)
ScriptHelper::GetNamedSoundID(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedSoundID(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedBoltID(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedBoltID(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedVehicle(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedVehicle(LegoLevelContainer&, cParseContextItem const&)
cParseContextItem::GetVehicle() const
ScriptHelper::GetNamedObjectInterface(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedObjectInterface(LegoLevelContainer&, cParseContextItem const&, bool)
ScriptHelper::GetNamedKrawlieSpawner(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedKrawlieSpawner(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedKrawlieGroup(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedKrawlieGroup(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetNamedFlowInterface(LegoLevelContainer&, char const*)
ScriptHelper::GetNamedFlowInterface(LegoLevelContainer&, cParseContextItem const&)
ScriptHelper::GetTaggedColour(cParseContextItem const&)
ScriptHelper::GetTaggedButton(cParseContextItem const&)
ScriptHelper::GetTaggedObjHitObjType(cParseContextItem const&)
ScriptHelper::GetTaggedBlockType(cParseContextItem const&)
ScriptHelper::GetZoneType(cParseContextItem const&)
ScriptHelper::GetCanUseType(cParseContextItem const&)
ScriptHelper::GetVehicleSeatIndex(cParseContextItem const&)
ScriptHelper::CreateGameMessage(LegoLevelContainer&, ADDGAMEMSG&, GAMEMESSAGE**)
ScriptHelper::SphereScreenCheck(NUVEC const&, float, ScriptHelper::ScreenCheckType)
ScriptHelper::CharacterInAreaMaskAccurate(LegoLevelContainer&, MechCharacter&, unsigned long const&)
ScriptHelper::GetRandomLocatorIndex(AIConvexLocatorSet const&, ScriptHelper::ScreenCheckType, bool)
ScriptHelper::GetClosestLocatorIndex(AIConvexLocatorSet const&, NUVEC const&, float, ScriptHelper::ScreenCheckType, bool)
ScriptHelper::GetFurthestLocatorIndex(AIConvexLocatorSet const&, NUVEC const&, float, ScriptHelper::ScreenCheckType, bool)
ScriptHelper::GetBestLocatorIndex(AIConvexLocatorSet const&, BestPosChecker&)
ScriptHelper::GetRandomLocator(AIConvexLocatorSet const&, ScriptHelper::ScreenCheckType, bool)
ScriptHelper::GetClosestLocator(AIConvexLocatorSet const&, NUVEC const&, float, ScriptHelper::ScreenCheckType, bool)
ScriptHelper::GetFurthestLocator(AIConvexLocatorSet const&, NUVEC const&, float, ScriptHelper::ScreenCheckType, bool)
ScriptHelper::GetClosestGadget(MechCharacter*, float, bool)
ScriptHelper::GetClosestParty(NUVEC const&, ScriptHelper::PartyType, MechCharacter*, float, ScriptHelper::ScreenCheckType, unsigned int)
ScriptHelper::GetClosestCharacter(VuVec const&, unsigned int, unsigned int, float, MechCharacter*, float, ScriptHelper::ScreenCheckType)
ScriptHelper::GetClosestTakeOver(NUVEC const&, ScriptHelper::TakeOverType, MechCharacter*, float, ScriptHelper::ScreenCheckType)
ScriptHelper::IsTakeOverType(MechCharacter&, ScriptHelper::TakeOverType)
ScriptHelper::GetClosestTakeOverIncVehic(LevelContainer*, NUVEC const&, ScriptHelper::TakeOverType, MechObjectInterface*, float, ScriptHelper::ScreenCheckType)
ScriptHelper::GetPartyLeader(MechObjectInterface&)
ScriptHelper::SnapToClosestLocator(MechObjectInterface&, AIConvexLocatorSet const&, NUVEC const&, bool, ScriptHelper::ScreenCheckType, float)
ScriptHelper::BuildMatrixFromDirec(VuVec const&, VuMtx&)
ScriptHelper::InterpolateRotation(unsigned short, unsigned short, float)
ScriptHelper::InterpolateMatrix(VuMtx&, VuMtx const&, VuMtx const&, float)
ScriptHelper::InterpolateVector(VuVec&, VuVec const&, VuVec const&, float)
ScriptHelper::GetQuatDeltaDegrees(NuQuatBase const&, NuQuatBase const&)
ScriptHelper::SeekTargetOrientation(VuMtx&, VuMtx const&, VuMtx const&, float)
ScriptHelper::SeekTargetRotation(GameObject*, unsigned short, unsigned short, float)
ScriptHelper::GetGizmoSpecial(Gizmo&)
ScriptHelper::GetCurrentInventoryItem(MechCharacter&)
ScriptHelper::GetCurrentItem(MechCharacter&)
ScriptHelper::GetInventoryItemFromType(MechCharacter&, LegoItemType&)
ScriptHelper::GetItemFromType(MechCharacter&, LegoItemType&)
ScriptHelper::GetInventoryItemFromItem(MechCharacter&, GizItem&)
ScriptHelper::GetNamedCharacterAttachmentSlotID(MechObjectInterface&, char const*)
ScriptHelper::CreateCharacterAttachment(MechObjectInterface&, LegoSpecial const&, int, int, int, VuMtx const*)
ScriptHelper::SetMoveSpeedFromItem(Brain&, cParseContextItem&)
ScriptHelper::SetMoveSpeedFromItem(Brain::Pace&, cParseContextItem&)
ScriptHelper::CreateCharacter(LegoLevelContainer&, unsigned short, VuVec const&, unsigned short, char const*, unsigned int)
ScriptHelper::GetObjectID(MechObjectInterface&)
ScriptHelper::InSpline(VuVec const&, SplineObject const&)
ScriptHelper::RenderSpline(SplineObject&, bool, NuColour const&)
ScriptHelper::GetTopLevelContainer(LegoLevelContainer&)
GameScriptContext::ShouldInit() const
GameScriptContext::GetCharacter() const
GameScriptContext::GetObjectInterface() const
GameScriptContext::GetLegoLevelContainer() const
GameScriptContext::GetWorldInfo() const
GameScriptContext::GetAIManager() const
ParseBool::ParseItem(cParseContextItem const&)
ParseTargetType::ParseItem(cParseContextItem const&)
ParseTargetType::GetTargetData(MechObjectInterface&, ParseTargetType::TargetType)
ParseStaticTarget::GetCharacterPOI(MechObjectInterface&, short, VuMtx&) const
ParseStaticTarget::GetCharacterTransform(MechObjectInterface&, VuMtx&) const
ParseStaticTarget::GetCharacterData(MechObjectInterface&, VuVec&, float&, unsigned short&) const
ParseStaticTarget::ParseStaticTarget()
ParseStaticTarget::ParseItem(LegoLevelContainer&, cParseContextItem const&)
ParseStaticTarget::PostParse(MechObjectInterface&)
ParseStaticTarget::GetTargetTransform(VuMtx&, MechObjectInterface*) const
ParseStaticTarget::GetTargetData(VuVec&, float&, unsigned short&, MechObjectInterface*) const
ParseStaticTarget::IsCharacterPOI() const
ParseDynamicStaticTarget::ParseDynamicStaticTarget()
ParseDynamicStaticTarget::ParseItem(LegoLevelContainer&, cParseContextItem const&)
ParseObjectInterface::GetObjectInterface() const
ParseFullTarget::ParseFullTarget()
ParseFullTarget::ParseItem(LegoLevelContainer&, cParseContextItem const&)
ParseFullTarget::PostParse(MechObjectInterface&)
ParseCharacter::Reset()
ParseCharacter::ParseItem(LegoLevelContainer&, cParseContextItem const&)
ParseCharacter::PostParse(MechCharacter*)
ParseCharacter::GetDynamicCharacter(MechCharacter*, bool) const
ParseCharacter::GetCharacter() const
ScriptError(char const*, ...)
ParseObjectInterface::Reset()
ParseObjectInterface::ParseItem(LegoLevelContainer&, cParseContextItem const&)
ParseObjectInterface::PostParse(MechObjectInterface*)
ParseObjectInterface::GetDynamicObjectInterface(MechObjectInterface*, bool) const
ParseBestPosChecker::ParseBestPosChecker()
ParseBestPosChecker::ParseItem(LegoLevelContainer&, cParseContextItem const&)
cSupport::Create()
cSupport::Destroy()
cButtonBash::cButtonBash()
cButtonBash::Init()
cSupport::AddPow(float)
cButtonBash::~cButtonBash()
cButtonBash::SetPow(float)
cButtonBash::Process(bool, float)
cButtonBash::DrawPrompt(MechCharacter&, float)
cSimpleBBash::cSimpleBBash()
cSimpleBBash::Init()
cSimpleBBash::~cSimpleBBash()
cSimpleBBash::Process(bool, float)
cSimpleBBash::DrawPrompt(MechCharacter&, float, char const*)
cSimpleBBash::SetRequiredBashPerSec(float)
ScriptAddOn::InitMembers()
ScriptAddOn::~ScriptAddOn()
non-virtual thunk to ScriptAddOn::~ScriptAddOn()
ScriptAddOn::~ScriptAddOn()
non-virtual thunk to ScriptAddOn::~ScriptAddOn()
ScriptAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScriptAddOn::ParseConditions(GameScriptContext&, cParseContextItem&)
ScriptAddOn::FindAddOn(HashedKey const&, bool) const
SVarAddOnHandle::SVarAddOnHandle(char const*, AddOnHandle&, ScriptContext&)
SVarAddOnHandle::SVarAddOnHandle(char const*, ScriptContext&)
SVarAddOnHandle::~SVarAddOnHandle()
SVarAddOnHandle::~SVarAddOnHandle()
SVarAddOnHandle::Set(ScriptVariable const*)
SVarAddOnHandle::Get() const
SVarAddOnHandle::Equals(ScriptVariable const*)
SVarAddOnHandle::GetRef()
SAction_Text2AddOnHandle::Exec(ScriptContext&)
SVarAddOnList::Find(ScriptContext&, HashedKey const&)
void ScriptContext::SetReturn<SVarAddOnHandle, AddOnHandle>(int, AddOnHandle)
SVarAddOnList::SVarAddOnList(char const*, ScriptContext&)
SVarAddOnList::~SVarAddOnList()
SVarAddOnList::~SVarAddOnList()
SAction_Text2AddOnHandle::~SAction_Text2AddOnHandle()
SAction_Text2AddOnHandle::GetName() const
SAction_Text2AddOnHandle::GetInputs(SCmdParams&) const
SAction_Text2AddOnHandle::GetOutputs(SCmdParams&) const
SVarAddOnList::Equals(ScriptVariable const*)
SVarAddOnList::Set(ScriptVariable const*)
BestPosChecker::BestPosChecker()
BestPosChecker::~BestPosChecker()
BestPosChecker::InitSearch(bool)
BestPosChecker::IsBestSoFar(VuVec const&, float)
BestPosChecker::IsBestSoFar(VuMtx const&, float)
ScriptActionRegister()
TempActionCreator<ScrAction_MoveToTarget>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_MoveAwayFromTarget>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_FaceTarget>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_JumpToTarget>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_ShootAtTarget>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_MeleeTarget>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_MeleeShootTarget>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_MechCharacterCodeCutOut>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_PlayAnimation>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_InContext>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_InAnimation>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_PlaySpecialMove>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_AddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_CharacterAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_LevelAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_CreateAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_CreateLevelAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_CreateCharacterAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_SendToAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_SendToLevelAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_SendToCharacterAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_DestroyAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_DestroyCharacterAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_DestroyLevelAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_RunActivities>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_ScriptLevelAddOn>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_WaitForAddOnComplete>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_WaitForAddOnCondition>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_CreateActivity>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_ScreenWrite>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_IAm>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_IAmVariant>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GetCharacterInfo>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_ScaleOverride>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_BeenHit>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_PressButton>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GetCheckPoint>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_EmitCoins>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_Wait>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GetMessage>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_Random>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GetBuildInfo>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_BeenToLevel>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GetGizmoFlags>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_WaitForGizmoFlags>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GizmoInteract>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_CanUseGizmo>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GoThroughDoor>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GetSpecialObjFlags>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_ManageTakeOver>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_Range>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_InVolume>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_InDirection>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_NeedHelpWithTriggers>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_HelpWithTriggers>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_ShakeCamera>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_ManageItem>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_ThrowItemAtTarget>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_HasItem>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GetKrawlieSpawnerFlags>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GetKrawlieGroupFlags>::TempActionCreator(char const*, unsigned int)
TempActionCreator<ScrAction_GetFlowInterfaceFlags>::TempActionCreator(char const*, unsigned int)
TempActionCreatorBase::TempActionCreatorBase()
TempActionCreatorBase::~TempActionCreatorBase()
TempActionCreator<ScrAction_MoveToTarget>::~TempActionCreator()
TempActionCreatorBase::GetName() const
TempActionCreatorBase::GetInputs(SCmdParams&) const
TempActionCreatorBase::GetOutputs(SCmdParams&) const
TempActionCreator<ScrAction_MoveToTarget>::Create() const
TempActionCreator<ScrAction_MoveAwayFromTarget>::~TempActionCreator()
TempActionCreator<ScrAction_MoveAwayFromTarget>::Create() const
TempActionCreator<ScrAction_FaceTarget>::~TempActionCreator()
TempActionCreator<ScrAction_FaceTarget>::Create() const
TempActionCreator<ScrAction_JumpToTarget>::~TempActionCreator()
TempActionCreator<ScrAction_JumpToTarget>::Create() const
TempActionCreator<ScrAction_ShootAtTarget>::~TempActionCreator()
TempActionCreator<ScrAction_ShootAtTarget>::Create() const
TempActionCreator<ScrAction_MeleeTarget>::~TempActionCreator()
TempActionCreator<ScrAction_MeleeTarget>::Create() const
TempActionCreator<ScrAction_MeleeShootTarget>::~TempActionCreator()
TempActionCreator<ScrAction_MeleeShootTarget>::Create() const
TempActionCreator<ScrAction_MechCharacterCodeCutOut>::~TempActionCreator()
TempActionCreator<ScrAction_MechCharacterCodeCutOut>::Create() const
TempActionCreator<ScrAction_PlayAnimation>::~TempActionCreator()
TempActionCreator<ScrAction_PlayAnimation>::Create() const
TempActionCreator<ScrAction_InContext>::~TempActionCreator()
TempActionCreator<ScrAction_InContext>::Create() const
TempActionCreator<ScrAction_InAnimation>::~TempActionCreator()
TempActionCreator<ScrAction_InAnimation>::Create() const
TempActionCreator<ScrAction_PlaySpecialMove>::~TempActionCreator()
TempActionCreator<ScrAction_PlaySpecialMove>::Create() const
ScriptVariable* CreateObject<SVarAddOnHandle>(char const*, ScriptVariable&, ScriptContext&)
ScriptVariable* CreateDefault<SVarAddOnHandle>(char const*, ScriptContext&)
TempActionCreator<ScrAction_AddOn>::~TempActionCreator()
TempActionCreator<ScrAction_AddOn>::Create() const
TempActionCreator<ScrAction_CharacterAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_CharacterAddOn>::Create() const
TempActionCreator<ScrAction_LevelAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_LevelAddOn>::Create() const
TempActionCreator<ScrAction_CreateAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_CreateAddOn>::Create() const
TempActionCreator<ScrAction_CreateLevelAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_CreateLevelAddOn>::Create() const
TempActionCreator<ScrAction_CreateCharacterAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_CreateCharacterAddOn>::Create() const
TempActionCreator<ScrAction_SendToAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_SendToAddOn>::Create() const
TempActionCreator<ScrAction_SendToLevelAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_SendToLevelAddOn>::Create() const
TempActionCreator<ScrAction_SendToCharacterAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_SendToCharacterAddOn>::Create() const
TempActionCreator<ScrAction_DestroyAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_DestroyAddOn>::Create() const
TempActionCreator<ScrAction_DestroyCharacterAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_DestroyCharacterAddOn>::Create() const
TempActionCreator<ScrAction_DestroyLevelAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_DestroyLevelAddOn>::Create() const
TempActionCreator<ScrAction_RunActivities>::~TempActionCreator()
TempActionCreator<ScrAction_RunActivities>::Create() const
TempActionCreator<ScrAction_ScriptLevelAddOn>::~TempActionCreator()
TempActionCreator<ScrAction_ScriptLevelAddOn>::Create() const
TempActionCreator<ScrAction_WaitForAddOnComplete>::~TempActionCreator()
TempActionCreator<ScrAction_WaitForAddOnComplete>::Create() const
TempActionCreator<ScrAction_WaitForAddOnCondition>::~TempActionCreator()
TempActionCreator<ScrAction_WaitForAddOnCondition>::Create() const
TempActionCreator<ScrAction_CreateActivity>::~TempActionCreator()
TempActionCreator<ScrAction_CreateActivity>::Create() const
TempActionCreator<ScrAction_ScreenWrite>::~TempActionCreator()
TempActionCreator<ScrAction_ScreenWrite>::Create() const
TempActionCreator<ScrAction_IAm>::~TempActionCreator()
TempActionCreator<ScrAction_IAm>::Create() const
TempActionCreator<ScrAction_IAmVariant>::~TempActionCreator()
TempActionCreator<ScrAction_IAmVariant>::Create() const
TempActionCreator<ScrAction_GetCharacterInfo>::~TempActionCreator()
TempActionCreator<ScrAction_GetCharacterInfo>::Create() const
TempActionCreator<ScrAction_ScaleOverride>::~TempActionCreator()
TempActionCreator<ScrAction_ScaleOverride>::Create() const
TempActionCreator<ScrAction_BeenHit>::~TempActionCreator()
TempActionCreator<ScrAction_BeenHit>::Create() const
TempActionCreator<ScrAction_PressButton>::~TempActionCreator()
TempActionCreator<ScrAction_PressButton>::Create() const
TempActionCreator<ScrAction_GetCheckPoint>::~TempActionCreator()
TempActionCreator<ScrAction_GetCheckPoint>::Create() const
TempActionCreator<ScrAction_EmitCoins>::~TempActionCreator()
TempActionCreator<ScrAction_EmitCoins>::Create() const
TempActionCreator<ScrAction_Wait>::~TempActionCreator()
TempActionCreator<ScrAction_Wait>::Create() const
TempActionCreator<ScrAction_GetMessage>::~TempActionCreator()
TempActionCreator<ScrAction_GetMessage>::Create() const
TempActionCreator<ScrAction_Random>::~TempActionCreator()
TempActionCreator<ScrAction_Random>::Create() const
TempActionCreator<ScrAction_GetBuildInfo>::~TempActionCreator()
TempActionCreator<ScrAction_GetBuildInfo>::Create() const
TempActionCreator<ScrAction_BeenToLevel>::~TempActionCreator()
TempActionCreator<ScrAction_BeenToLevel>::Create() const
TempActionCreator<ScrAction_GetGizmoFlags>::~TempActionCreator()
TempActionCreator<ScrAction_GetGizmoFlags>::Create() const
TempActionCreator<ScrAction_WaitForGizmoFlags>::~TempActionCreator()
TempActionCreator<ScrAction_WaitForGizmoFlags>::Create() const
TempActionCreator<ScrAction_GizmoInteract>::~TempActionCreator()
TempActionCreator<ScrAction_GizmoInteract>::Create() const
TempActionCreator<ScrAction_CanUseGizmo>::~TempActionCreator()
TempActionCreator<ScrAction_CanUseGizmo>::Create() const
TempActionCreator<ScrAction_GoThroughDoor>::~TempActionCreator()
TempActionCreator<ScrAction_GoThroughDoor>::Create() const
TempActionCreator<ScrAction_GetSpecialObjFlags>::~TempActionCreator()
TempActionCreator<ScrAction_GetSpecialObjFlags>::Create() const
TempActionCreator<ScrAction_ManageTakeOver>::~TempActionCreator()
TempActionCreator<ScrAction_ManageTakeOver>::Create() const
TempActionCreator<ScrAction_Range>::~TempActionCreator()
TempActionCreator<ScrAction_Range>::Create() const
TempActionCreator<ScrAction_InVolume>::~TempActionCreator()
TempActionCreator<ScrAction_InVolume>::Create() const
TempActionCreator<ScrAction_InDirection>::~TempActionCreator()
TempActionCreator<ScrAction_InDirection>::Create() const
TempActionCreator<ScrAction_NeedHelpWithTriggers>::~TempActionCreator()
TempActionCreator<ScrAction_NeedHelpWithTriggers>::Create() const
TempActionCreator<ScrAction_HelpWithTriggers>::~TempActionCreator()
TempActionCreator<ScrAction_HelpWithTriggers>::Create() const
TempActionCreator<ScrAction_ShakeCamera>::~TempActionCreator()
TempActionCreator<ScrAction_ShakeCamera>::Create() const
TempActionCreator<ScrAction_ManageItem>::~TempActionCreator()
TempActionCreator<ScrAction_ManageItem>::Create() const
TempActionCreator<ScrAction_ThrowItemAtTarget>::~TempActionCreator()
TempActionCreator<ScrAction_ThrowItemAtTarget>::Create() const
TempActionCreator<ScrAction_HasItem>::~TempActionCreator()
TempActionCreator<ScrAction_HasItem>::Create() const
TempActionCreator<ScrAction_GetKrawlieSpawnerFlags>::~TempActionCreator()
TempActionCreator<ScrAction_GetKrawlieSpawnerFlags>::Create() const
TempActionCreator<ScrAction_GetKrawlieGroupFlags>::~TempActionCreator()
TempActionCreator<ScrAction_GetKrawlieGroupFlags>::Create() const
TempActionCreator<ScrAction_GetFlowInterfaceFlags>::~TempActionCreator()
TempActionCreator<ScrAction_GetFlowInterfaceFlags>::Create() const
ScrFunc_SetMoveTarget(GameScriptContext&, cParseContextItem&, bool)
ScrAction_MoveToTarget::ScrAction_MoveToTarget()
ScrAction_MoveToTarget::~ScrAction_MoveToTarget()
ScrAction_MoveToTarget::~ScrAction_MoveToTarget()
ScrAction_MoveToTarget::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_MoveToTarget::Process(GameScriptContext&)
ScrAction_MoveAwayFromTarget::ScrAction_MoveAwayFromTarget()
ScrAction_MoveAwayFromTarget::~ScrAction_MoveAwayFromTarget()
ScrAction_MoveAwayFromTarget::~ScrAction_MoveAwayFromTarget()
ScrAction_MoveAwayFromTarget::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_MoveAwayFromTarget::Process(GameScriptContext&)
ScrAction_FaceTarget::ScrAction_FaceTarget()
ScrAction_FaceTarget::~ScrAction_FaceTarget()
ScrAction_FaceTarget::~ScrAction_FaceTarget()
ScrAction_FaceTarget::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_FaceTarget::Process(GameScriptContext&)
ScrAction_JumpToTarget::CalcJumpPosOffset(VuVec const&, VuVec const&, float, VuVec&)
ScrAction_JumpToTarget::ScrAction_JumpToTarget()
ScrAction_JumpToTarget::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_JumpToTarget::Process(GameScriptContext&)
ScrAction_ScriptActionBase::GetName() const
ScrAction_ScriptActionBase::ParseConditions(GameScriptContext&, cParseContextItem&)
ScrAction_JumpToTarget::~ScrAction_JumpToTarget()
ScrFunc_SetShootTarget(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetOpponent(GameScriptContext&, cParseContextItem&, bool)
ScrAction_ShootAtTarget::ScrAction_ShootAtTarget()
ScrAction_ShootAtTarget::~ScrAction_ShootAtTarget()
ScrAction_ShootAtTarget::~ScrAction_ShootAtTarget()
ScrAction_ShootAtTarget::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_ShootAtTarget::Process(GameScriptContext&)
ScrAction_MeleeTarget::ScrAction_MeleeTarget()
ScrAction_MeleeTarget::~ScrAction_MeleeTarget()
ScrAction_MeleeTarget::~ScrAction_MeleeTarget()
ScrAction_MeleeTarget::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_MeleeTarget::Process(GameScriptContext&)
ScrAction_MeleeShootTarget::ScrAction_MeleeShootTarget()
ScrAction_MeleeShootTarget::~ScrAction_MeleeShootTarget()
ScrAction_MeleeShootTarget::~ScrAction_MeleeShootTarget()
ScrAction_MeleeShootTarget::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_MeleeShootTarget::Process(GameScriptContext&)
ScrFunc_ScriptAddonExists(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_LevelAddonExists(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_CreatureAddonExists(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_FindScriptAddon(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_FindLevelAddon(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_FindCreatureAddon(GameScriptContext&, cParseContextItem&, bool)
ScrAction_CreateAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_CreateAddOn::ParseBase(GameScriptContext&, cParseContextItem&, ScrAction_CreateAddOn::ADDONTYPE)
ScrAction_CreateCharacterAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_CreateLevelAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_AddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_AddOn::ParseBase(GameScriptContext&, cParseContextItem&, ScrAction_AddOn::ADDONTYPE)
ScrAction_CharacterAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_LevelAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_SendToAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_SharedSendAndDestroyToAddOn::ParseBase(GameScriptContext&, cParseContextItem&, ScrAction_SharedSendAndDestroyToAddOn::ADDONTYPE, bool)
ScrAction_SendToCharacterAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_SendToLevelAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_DestroyAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_DestroyCharacterAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_DestroyLevelAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ParseObjectInterface::SetObjectInterface(MechObjectInterface*)
ScrAction_AddOn::Process(GameScriptContext&)
SVarAddOnList::AddAddOnToScriptContext(ScriptContext&, AddOn&, bool)
ScrAction_CreateAddOn::Process(GameScriptContext&)
ScrFunc_CreateTargetAddOn(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SendToScriptLevelAddOn(GameScriptContext&, cParseContextItem&, bool)
ScrAction_ScriptLevelAddOn::ScrAction_ScriptLevelAddOn()
ScrAction_ScriptLevelAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_ScriptLevelAddOn::Process(GameScriptContext&)
ScrAction_WaitForAddOnComplete::ScrAction_WaitForAddOnComplete()
ScrAction_WaitForAddOnComplete::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_WaitForAddOnComplete::Process(GameScriptContext&)
ScrAction_WaitForAddOnCondition::ScrAction_WaitForAddOnCondition()
ScrAction_WaitForAddOnCondition::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_WaitForAddOnCondition::Process(GameScriptContext&)
ScrAction_AddOn::~ScrAction_AddOn()
ScrAction_CreateAddOn::~ScrAction_CreateAddOn()
ScrAction_CreateAddOn::GetOutputs(SCmdParams&) const
ScrAction_CreateCharacterAddOn::~ScrAction_CreateCharacterAddOn()
ScrAction_CreateLevelAddOn::~ScrAction_CreateLevelAddOn()
ScrAction_CharacterAddOn::~ScrAction_CharacterAddOn()
ScrAction_AddOn::~ScrAction_AddOn()
ScrAction_LevelAddOn::~ScrAction_LevelAddOn()
ScrAction_SendToAddOn::~ScrAction_SendToAddOn()
ScrAction_ScriptActionBase::Process(GameScriptContext&)
ScrAction_SendToCharacterAddOn::~ScrAction_SendToCharacterAddOn()
ScrAction_SendToLevelAddOn::~ScrAction_SendToLevelAddOn()
ScrAction_DestroyAddOn::~ScrAction_DestroyAddOn()
ScrAction_DestroyCharacterAddOn::~ScrAction_DestroyCharacterAddOn()
ScrAction_DestroyLevelAddOn::~ScrAction_DestroyLevelAddOn()
ScrAction_ScriptLevelAddOn::~ScrAction_ScriptLevelAddOn()
ScrAction_WaitForAddOnComplete::~ScrAction_WaitForAddOnComplete()
ScrAction_WaitForAddOnComplete::~ScrAction_WaitForAddOnComplete()
ScrAction_WaitForAddOnCondition::~ScrAction_WaitForAddOnCondition()
ScrAction_WaitForAddOnCondition::~ScrAction_WaitForAddOnCondition()
ScrFunc_PrintFrame(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_DebugDisablePostEffects(GameScriptContext&, cParseContextItem&, bool)
ScrAction_ScreenWrite::ScrAction_ScreenWrite()
ScrAction_ScreenWrite::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_ScreenWrite::Process(GameScriptContext&)
ScrAction_ScreenWrite::~ScrAction_ScreenWrite()
ScrFunc_ResetContext(GameScriptContext&, cParseContextItem&, bool)
ScrAction_PlayAnimation::ScrAction_PlayAnimation()
ScrAction_PlayAnimation::~ScrAction_PlayAnimation()
ScrAction_PlayAnimation::~ScrAction_PlayAnimation()
ScrAction_PlayAnimation::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_PlayAnimation::Process(GameScriptContext&)
ScrAction_InContext::ScrAction_InContext()
ScrAction_InContext::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_InContext::Process(GameScriptContext&)
ScrAction_InAnimation::ScrAction_InAnimation()
ScrAction_InAnimation::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_InAnimation::Process(GameScriptContext&)
ScrFunc_OverrideAnimation(GameScriptContext&, cParseContextItem&, bool)
ScrAction_PlaySpecialMove::ScrAction_PlaySpecialMove()
ScrAction_PlaySpecialMove::~ScrAction_PlaySpecialMove()
ScrAction_PlaySpecialMove::~ScrAction_PlaySpecialMove()
ScrAction_PlaySpecialMove::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_PlaySpecialMove::Process(GameScriptContext&)
ScrFunc_SetAnimationLayers(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetCharacterAttachment(GameScriptContext&, cParseContextItem&, bool)
ScrAction_InContext::~ScrAction_InContext()
ScrAction_InContext::~ScrAction_InContext()
ScrAction_InAnimation::~ScrAction_InAnimation()
ScrAction_InAnimation::~ScrAction_InAnimation()
ScrFunc_SetCheckPoint(GameScriptContext&, cParseContextItem&, bool)
ScrAction_GetCheckPoint::ScrAction_GetCheckPoint()
ScrAction_GetCheckPoint::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GetCheckPoint::Process(GameScriptContext&)
ScrAction_GetCheckPoint::~ScrAction_GetCheckPoint()
ScrFunc_SetInvulnerable(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_DisableAvoidance(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetBlockTypes(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetMy(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_Kill(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_DeactivateChar(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ActivateChar(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_TagCharacter(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_DrawBossHitPoints(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetHitPoints(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SnapToPosition(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_AddAdditionalResident(GameScriptContext&, cParseContextItem&, bool)
ScrAction_IAm::ScrAction_IAm()
ScrAction_IAm::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_IAm::Process(GameScriptContext&)
ScrAction_IAmVariant::ScrAction_IAmVariant()
ScrAction_IAmVariant::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_IAmVariant::Process(GameScriptContext&)
GetCharacterInfoScriptInterface::ParseCommandData(unsigned int, LegoLevelContainer&, cParseContextItem&, ScriptInterfaceDataUnion&)
GetCharacterInfoScriptInterface::CheckCommand(unsigned int, ScriptInterfaceDataUnion const&, MechObjectInterface&)
ScrAction_GetCharacterInfo::ScrAction_GetCharacterInfo()
ScrAction_GetCharacterInfo::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GetCharacterInfo::Process(GameScriptContext&)
SetCharacterInfoScriptInterface::ParseCommandData(unsigned int, LegoLevelContainer&, cParseContextItem&, ScriptInterfaceDataUnion&)
SetCharacterInfoScriptInterface::SetCommand(unsigned int, ScriptInterfaceDataUnion const&, bool, MechObjectInterface&)
ScrFunc_SetCharacterInfo(GameScriptContext&, cParseContextItem&, bool)
ScrAction_ScaleOverride::ScrAction_ScaleOverride()
ScrAction_ScaleOverride::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_ScaleOverride::Process(GameScriptContext&)
ScrAction_BeenHit::AddBeenHitType(BeenHit::BeenHitType)
ScrAction_BeenHit::ScrAction_BeenHit()
ScrAction_BeenHit::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_BeenHit::Process(GameScriptContext&)
ScrAction_PressButton::ScrAction_PressButton()
ScrAction_PressButton::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_PressButton::Process(GameScriptContext&)
ScrFunc_GetCharacterName(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ClearLastSafePosition(GameScriptContext&, cParseContextItem&, bool)
ScriptInterfaceBase<MechObjectInterface, ScriptInterfaceDataUnion, 8u>::SetCommand(unsigned int, ScriptInterfaceDataUnion const&, bool, MechObjectInterface&)
ScriptInterfaceBase<MechObjectInterface, ScriptInterfaceDataUnion, 8u>::CheckCommand(unsigned int, ScriptInterfaceDataUnion const&, MechObjectInterface&)
ScrAction_IAm::~ScrAction_IAm()
ScrAction_IAm::~ScrAction_IAm()
ScrAction_IAmVariant::~ScrAction_IAmVariant()
ScrAction_IAmVariant::~ScrAction_IAmVariant()
ScrAction_GetCharacterInfo::~ScrAction_GetCharacterInfo()
ScrAction_GetCharacterInfo::~ScrAction_GetCharacterInfo()
ScrAction_ScaleOverride::~ScrAction_ScaleOverride()
ScrAction_BeenHit::~ScrAction_BeenHit()
ScrAction_BeenHit::~ScrAction_BeenHit()
ScrAction_PressButton::~ScrAction_PressButton()
ScrAction_PressButton::~ScrAction_PressButton()
ScrAction_EmitCoins::ScrAction_EmitCoins()
ScrAction_EmitCoins::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_EmitCoins::Process(GameScriptContext&)
ScrAction_Wait::ScrAction_Wait()
ScrAction_Wait::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_Wait::Process(GameScriptContext&)
ScrFunc_SetMessage(GameScriptContext&, cParseContextItem&, bool)
ScrAction_GetMessage::ScrAction_GetMessage()
ScrAction_GetMessage::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GetMessage::Process(GameScriptContext&)
ScrFunc_FreePlay(GameScriptContext&, cParseContextItem&, bool)
ScrAction_Random::ScrAction_Random()
ScrAction_Random::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_Random::Process(GameScriptContext&)
ScrFunc_IntegerToText(GameScriptContext&, cParseContextItem&, bool)
ScrAction_GetBuildInfo::ScrAction_GetBuildInfo()
ScrAction_GetBuildInfo::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GetBuildInfo::Process(GameScriptContext&)
ScrFunc_PlaySFX(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_AddVfx(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetStreamingLevelInfo(GameScriptContext&, cParseContextItem&, bool)
ScrAction_BeenToLevel::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_BeenToLevel::Process(GameScriptContext&)
ScrFunc_ActivateHint(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetLEDObjectVisible(GameScriptContext&, cParseContextItem&, bool)
ScrAction_BeenToLevel::~ScrAction_BeenToLevel()
ScrAction_EmitCoins::~ScrAction_EmitCoins()
ScrAction_EmitCoins::~ScrAction_EmitCoins()
ScrAction_Wait::~ScrAction_Wait()
ScrAction_GetMessage::~ScrAction_GetMessage()
ScrAction_Random::~ScrAction_Random()
ScrAction_GetBuildInfo::~ScrAction_GetBuildInfo()
ScrAction_RunActivities::EventNotify(Event&, NuEventData&)
non-virtual thunk to ScrAction_RunActivities::EventNotify(Event&, NuEventData&)
ScrAction_CreateActivity::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_RunActivities::ScrAction_RunActivities()
ScrAction_RunActivities::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_RunActivities::~ScrAction_RunActivities()
non-virtual thunk to ScrAction_RunActivities::~ScrAction_RunActivities()
ScrAction_RunActivities::~ScrAction_RunActivities()
non-virtual thunk to ScrAction_RunActivities::~ScrAction_RunActivities()
ScrAction_RunActivities::Process(GameScriptContext&)
ScrAction_CreateActivity::~ScrAction_CreateActivity()
ScrAction_CreateActivity::GetName() const
ScrAction_RunActivities::GetName() const
GizmoScriptInterface::ParseCommandData(unsigned int, LegoLevelContainer&, cParseContextItem&, ScriptInterfaceData8&)
GizmoScriptInterface::CheckCommand(unsigned int, ScriptInterfaceData8 const&, Gizmo&)
GizmoScriptInterface::SetCommand(unsigned int, ScriptInterfaceData8 const&, bool, Gizmo&)
ScrFunc_SetGizmoFlags(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ClearGizmoFlags(GameScriptContext&, cParseContextItem&, bool)
ScrAction_GetGizmoFlags::ScrAction_GetGizmoFlags()
ScrAction_GetGizmoFlags::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GetGizmoFlags::Process(GameScriptContext&)
ScrAction_WaitForGizmoFlags::ScrAction_WaitForGizmoFlags()
ScrAction_WaitForGizmoFlags::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_WaitForGizmoFlags::Process(GameScriptContext&)
ScrAction_GizmoInteract::ScrAction_GizmoInteract()
ScrAction_GizmoInteract::~ScrAction_GizmoInteract()
ScrAction_GizmoInteract::~ScrAction_GizmoInteract()
ScrAction_GizmoInteract::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GizmoInteract::Process(GameScriptContext&)
ScrAction_CanUseGizmo::ScrAction_CanUseGizmo()
ScrAction_CanUseGizmo::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_CanUseGizmo::Process(GameScriptContext&)
ScrAction_GetGizmoFlags::~ScrAction_GetGizmoFlags()
ScrAction_WaitForGizmoFlags::~ScrAction_WaitForGizmoFlags()
ScrAction_CanUseGizmo::~ScrAction_CanUseGizmo()
ScrAction_CanUseGizmo::~ScrAction_CanUseGizmo()
FindFlagItem(ScriptTag const&)
ScriptSupport_FindCharacterFlag(int const&)
SharedSetClearReleaseFlags(GameScriptContext&, cParseContextItem&, SharedSetClearReleaseFlagsMode const&)
ScrFunc_SetCharacterFlags(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ClearCharacterFlags(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ReleaseCharacterFlags(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_GetCharacterFlags(GameScriptContext&, cParseContextItem&, bool)
SpecialObjScriptInterface::CheckCommand(unsigned int, ScriptInterfaceData0 const&, LegoSpecial&)
SpecialObjScriptInterface::SetCommand(unsigned int, ScriptInterfaceData0 const&, bool, LegoSpecial&)
ScrFunc_SetSpecialObjFlags(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ClearSpecialObjFlags(GameScriptContext&, cParseContextItem&, bool)
ScrAction_GetSpecialObjFlags::ScrAction_GetSpecialObjFlags()
ScrAction_GetSpecialObjFlags::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GetSpecialObjFlags::Process(GameScriptContext&)
ScriptInterfaceBase<LegoSpecial, ScriptInterfaceData0, 4u>::ParseCommandData(unsigned int, LegoLevelContainer&, cParseContextItem&, ScriptInterfaceData0&)
ScrAction_GetSpecialObjFlags::~ScrAction_GetSpecialObjFlags()
ScrAction_ManageTakeOver::CalculateDismountPos(MechObjectInterface&, ParseTargetType const&, ScrAction_ManageTakeOver::DismountDirec, NUVEC&)
ScrAction_ManageTakeOver::ScrAction_ManageTakeOver()
ScrAction_ManageTakeOver::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_ManageTakeOver::Process(GameScriptContext&)
ScrFunc_GetVehicleName(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_GetVehicleInfo(GameScriptContext&, cParseContextItem&, bool)
ScrAction_ManageTakeOver::~ScrAction_ManageTakeOver()
ScrAction_ManageTakeOver::~ScrAction_ManageTakeOver()
ScrAction_Range::GetTargetData(MechObjectInterface&, VuVec&, float&)
ScrAction_Range::ScrAction_Range()
ScrAction_Range::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_Range::Process(GameScriptContext&)
ScrAction_InVolume::ScrAction_InVolume()
ScrAction_InVolume::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_InVolume::Process(GameScriptContext&)
ScrAction_InDirection::GetTargetData(MechObjectInterface&, VuVec&)
ScrAction_InDirection::ScrAction_InDirection()
ScrAction_InDirection::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_InDirection::Process(GameScriptContext&)
ScrAction_Range::~ScrAction_Range()
ScrAction_Range::~ScrAction_Range()
ScrAction_InVolume::~ScrAction_InVolume()
ScrAction_InVolume::~ScrAction_InVolume()
ScrAction_InDirection::~ScrAction_InDirection()
ScrAction_InDirection::~ScrAction_InDirection()
ScrFunc_PlayCutScene(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_WaitForCutSceneToEnd(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_CutScenePlaying(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_WaitForMiniCutToEnd(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_MiniCutPlaying(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_PlayerCount(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_GetClosestPlayer(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_GetPartyFollowPlayerOffset(GameScriptContext&, cParseContextItem&, bool)
ScrAction_MechCharacterCodeCutOut::ScrAction_MechCharacterCodeCutOut()
ScrAction_MechCharacterCodeCutOut::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_MechCharacterCodeCutOut::~ScrAction_MechCharacterCodeCutOut()
ScrFunc_DrawDoorMarker(GameScriptContext&, cParseContextItem&, bool)
ScrAction_GoThroughDoor::ScrAction_GoThroughDoor()
ScrAction_GoThroughDoor::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GoThroughDoor::Process(GameScriptContext&)
ScrAction_GoThroughDoor::~ScrAction_GoThroughDoor()
ScrFunc_ChangeNodeGroup(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ChangeEdgeGroup(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_EnableAINetworkByArea(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetSplitAreaSettings(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetCameraVolume(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetCameraRail(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetCameraRoll(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_SetIgnoreCamVolumes(GameScriptContext&, cParseContextItem&, bool)
ScrAction_ShakeCamera::ShakeCharacterCamera(MechCharacter&, float, float, float)
ScrAction_ShakeCamera::ScrAction_ShakeCamera()
ScrAction_ShakeCamera::~ScrAction_ShakeCamera()
ScrAction_ShakeCamera::~ScrAction_ShakeCamera()
ScrAction_ShakeCamera::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_ShakeCamera::Process(GameScriptContext&)
ScrAction_ManageItem::ScrAction_ManageItem()
ScrAction_ManageItem::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_ManageItem::Process(GameScriptContext&)
ScrAction_ThrowItemAtTarget::ScrAction_ThrowItemAtTarget()
ScrAction_ThrowItemAtTarget::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_ThrowItemAtTarget::Process(GameScriptContext&)
ScrAction_HasItem::ScrAction_HasItem()
ScrAction_HasItem::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_HasItem::Process(GameScriptContext&)
ScrAction_ManageItem::~ScrAction_ManageItem()
ScrAction_ManageItem::~ScrAction_ManageItem()
ScrAction_ManageItem::GetOutputs(SCmdParams&) const
ScrAction_ThrowItemAtTarget::~ScrAction_ThrowItemAtTarget()
ScrAction_ThrowItemAtTarget::~ScrAction_ThrowItemAtTarget()
ScrAction_HasItem::~ScrAction_HasItem()
ScrAction_HasItem::~ScrAction_HasItem()
KrawlieSpawnerScriptInterface::ParseCommandData(unsigned int, LegoLevelContainer&, cParseContextItem&, ScriptInterfaceData8&)
KrawlieSpawnerScriptInterface::CheckCommand(unsigned int, ScriptInterfaceData8 const&, MechKrawlieSpawnerBase&)
KrawlieSpawnerScriptInterface::SetCommand(unsigned int, ScriptInterfaceData8 const&, bool, MechKrawlieSpawnerBase&)
ScrFunc_SetKrawlieSpawnerFlags(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ClearKrawlieSpawnerFlags(GameScriptContext&, cParseContextItem&, bool)
ScrAction_GetKrawlieSpawnerFlags::ScrAction_GetKrawlieSpawnerFlags()
ScrAction_GetKrawlieSpawnerFlags::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GetKrawlieSpawnerFlags::Process(GameScriptContext&)
KrawlieGroupScriptInterface::ParseCommandData(unsigned int, LegoLevelContainer&, cParseContextItem&, ScriptInterfaceData8&)
KrawlieGroupScriptInterface::CheckCommand(unsigned int, ScriptInterfaceData8 const&, MechKrawlieGroup&)
KrawlieGroupScriptInterface::SetCommand(unsigned int, ScriptInterfaceData8 const&, bool, MechKrawlieGroup&)
ScrFunc_SetKrawlieGroupFlags(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ClearKrawlieGroupFlags(GameScriptContext&, cParseContextItem&, bool)
ScrAction_GetKrawlieGroupFlags::ScrAction_GetKrawlieGroupFlags()
ScrAction_GetKrawlieGroupFlags::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GetKrawlieGroupFlags::Process(GameScriptContext&)
ScrAction_GetKrawlieSpawnerFlags::~ScrAction_GetKrawlieSpawnerFlags()
ScrAction_GetKrawlieGroupFlags::~ScrAction_GetKrawlieGroupFlags()
ScrFunc_EnableTraffic(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_DisableTraffic(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_AddTrafficVehicleModel(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_RemoveTrafficVehicleModel(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_AddOptionalCommonTrafficVehicleModels(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_EnableTrafficVehicleModel(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ClearTrafficVehicleModels(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_AddVehicleToTrafficNetwork(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_RemoveVehicleFromTrafficNetwork(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_CreateTrafficZone(GameScriptContext&, cParseContextItem&, bool)
ClassManagerAccessor<MechTrafficManager>::GetFromCreate(ILevelContainer const&)
ScrFunc_DestroyTrafficZone(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_DisableLegacyMovingTraffic(GameScriptContext&, cParseContextItem&, bool)
ScrAction_NeedHelpWithTriggers::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_NeedHelpWithTriggers::Process(GameScriptContext&)
ScrAction_NeedHelpWithTriggers::ScrAction_NeedHelpWithTriggers()
ScrAction_HelpWithTriggers::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_HelpWithTriggers::Process(GameScriptContext&)
ScrAction_HelpWithTriggers::~ScrAction_HelpWithTriggers()
ScrAction_NeedHelpWithTriggers::~ScrAction_NeedHelpWithTriggers()
FlowInterfaceScriptInterface::ParseCommandData(unsigned int, LegoLevelContainer&, cParseContextItem&, ScriptInterfaceData8&)
FlowInterfaceScriptInterface::CheckCommand(unsigned int, ScriptInterfaceData8 const&, MechFlowInterface&)
FlowInterfaceScriptInterface::SetCommand(unsigned int, ScriptInterfaceData8 const&, bool, MechFlowInterface&)
ScrFunc_SetFlowInterfaceFlags(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_ClearFlowInterfaceFlags(GameScriptContext&, cParseContextItem&, bool)
ScrAction_GetFlowInterfaceFlags::ScrAction_GetFlowInterfaceFlags()
ScrAction_GetFlowInterfaceFlags::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_GetFlowInterfaceFlags::Process(GameScriptContext&)
ScrAction_GetFlowInterfaceFlags::~ScrAction_GetFlowInterfaceFlags()
ScrFunc_GetLocatorFromSetIndex(GameScriptContext&, cParseContextItem&, bool)
AIVolumeDetect::InArea(VuVec const&, AIConvexArea const&) const
AIVolumeDetect::InLocatorRadius(VuVec const&, AIConvexLocator const&) const
AIVolumeDetect::InSpline(VuVec const&, SplineObject const&) const
AIVolumeDetect::GetTargetData(MechObjectInterface*, VuVec&)
AIVolumeDetect::AIVolumeDetect()
AIVolumeDetect::SetDefaults()
AIVolumeDetect::ParseItem(cParseContextItem&, LegoLevelContainer&)
AIVolumeDetect::PostParseInit(MechObjectInterface*)
AIVolumeDetect::Update(float, MechObjectInterface*)
AIVolumeDetect::CharacterInVolume(MechObjectInterface&) const
AIVolumeDetect::AnyPartyInVolume(bool) const
AIVolumeDetect::AllPartyInVolume(bool) const
AIVolumeDetect::PositionInVolume(VuVec const&) const
ETAddOnHelper::RegisterETAddOns()
void* Constructor<ExtendedTargetAddOn_LocatorSet>()
void* Constructor<ExtendedTargetAddOn_ClosestPlayer>()
void* Constructor<ExtendedTargetAddOn_ClosestParty>()
void* Constructor<ExtendedTargetAddOn_Opponent>()
void* Constructor<ExtendedTargetAddOn_CharacterPOI>()
void* Constructor<ExtendedTargetAddOn_ClosestGadget>()
void* Constructor<ExtendedTargetAddOn_PartyLeader>()
ETAddOnHelper::CreateAndAdd(MechObjectInterface&, ParseTargetType::TargetType, HashedKey const&)
ETAddOnHelper::CreateAndAdd(MechObjectInterface&, GameScriptContext&, ParseTargetType::TargetType, HashedKey const&)
ETAddOnHelper::CreateAndAdd(MechObjectInterface&, ParseTargetType::TargetType, ETAddOnHelper::ExtendedTargetHelperType)
ETAddOnHelper::CreateAndAdd(MechObjectInterface&, GameScriptContext&, ParseTargetType::TargetType, ETAddOnHelper::ExtendedTargetHelperType)
ETAddOnHelper::DestroyETAddOn(MechObjectInterface&, ParseTargetType::TargetType)
ETAddOnHelper::SetTargetFromParser(MechObjectInterface&, GameScriptContext&, ParseFullTarget const&, ParseTargetType::TargetType)
ETAddOnHelper::GetTargetAddOnFromObjectInterface(MechObjectInterface&, ParseTargetType::TargetType)
ExtendedTargetAddOn_ClosestPlayer::ExtendedTargetAddOn_ClosestPlayer()
ExtendedTargetAddOn_ClosestPlayer::~ExtendedTargetAddOn_ClosestPlayer()
non-virtual thunk to ExtendedTargetAddOn_ClosestPlayer::~ExtendedTargetAddOn_ClosestPlayer()
ExtendedTargetAddOn_ClosestPlayer::~ExtendedTargetAddOn_ClosestPlayer()
non-virtual thunk to ExtendedTargetAddOn_ClosestPlayer::~ExtendedTargetAddOn_ClosestPlayer()
ExtendedTargetAddOn_ClosestPlayer::CalculateTarget()
ExtendedTargetAddOn_ClosestPlayer::GetExtendedTargetType() const
ExtendedTargetLegoAddOn::CalculateTargetSimple(MechObjectData&, WORLDINFO const&, AddOnOwner const&)
ExtendedTargetLegoAddOn::HasCalculateTargetSimple()
ExtendedTargetAddOn_ClosestParty::ExtendedTargetAddOn_ClosestParty()
ExtendedTargetAddOn_ClosestParty::~ExtendedTargetAddOn_ClosestParty()
non-virtual thunk to ExtendedTargetAddOn_ClosestParty::~ExtendedTargetAddOn_ClosestParty()
ExtendedTargetAddOn_ClosestParty::~ExtendedTargetAddOn_ClosestParty()
non-virtual thunk to ExtendedTargetAddOn_ClosestParty::~ExtendedTargetAddOn_ClosestParty()
ExtendedTargetAddOn_ClosestParty::CalculateTarget()
ExtendedTargetAddOn_ClosestParty::GetExtendedTargetType() const
ExtendedTargetAddOn_Opponent::ExtendedTargetAddOn_Opponent()
ExtendedTargetAddOn_Opponent::~ExtendedTargetAddOn_Opponent()
non-virtual thunk to ExtendedTargetAddOn_Opponent::~ExtendedTargetAddOn_Opponent()
ExtendedTargetAddOn_Opponent::~ExtendedTargetAddOn_Opponent()
non-virtual thunk to ExtendedTargetAddOn_Opponent::~ExtendedTargetAddOn_Opponent()
ExtendedTargetAddOn_Opponent::CalculateTarget()
ExtendedTargetAddOn_Opponent::GetExtendedTargetType() const
ExtendedTargetAddOn_LocatorSet::ExtendedTargetAddOn_LocatorSet()
ExtendedTargetAddOn_LocatorSet::~ExtendedTargetAddOn_LocatorSet()
non-virtual thunk to ExtendedTargetAddOn_LocatorSet::~ExtendedTargetAddOn_LocatorSet()
ExtendedTargetAddOn_LocatorSet::~ExtendedTargetAddOn_LocatorSet()
non-virtual thunk to ExtendedTargetAddOn_LocatorSet::~ExtendedTargetAddOn_LocatorSet()
ExtendedTargetAddOn_LocatorSet::CalculateTarget()
ExtendedTargetAddOn_LocatorSet::Init(AIConvexLocatorSet*, unsigned short)
ExtendedTargetAddOn_LocatorSet::NextLocator(bool)
ExtendedTargetAddOn_LocatorSet::GetExtendedTargetType() const
ExtendedTargetAddOn_CharacterPOI::ExtendedTargetAddOn_CharacterPOI()
ExtendedTargetAddOn_CharacterPOI::~ExtendedTargetAddOn_CharacterPOI()
non-virtual thunk to ExtendedTargetAddOn_CharacterPOI::~ExtendedTargetAddOn_CharacterPOI()
ExtendedTargetAddOn_CharacterPOI::~ExtendedTargetAddOn_CharacterPOI()
non-virtual thunk to ExtendedTargetAddOn_CharacterPOI::~ExtendedTargetAddOn_CharacterPOI()
ExtendedTargetAddOn_CharacterPOI::CalculateTarget()
ExtendedTargetAddOn_CharacterPOI::Init(MechObjectInterface&, unsigned short)
ExtendedTargetAddOn_CharacterPOI::GetExtendedTargetType() const
ExtendedTargetAddOn_ClosestGadget::ExtendedTargetAddOn_ClosestGadget()
ExtendedTargetAddOn_ClosestGadget::~ExtendedTargetAddOn_ClosestGadget()
non-virtual thunk to ExtendedTargetAddOn_ClosestGadget::~ExtendedTargetAddOn_ClosestGadget()
ExtendedTargetAddOn_ClosestGadget::~ExtendedTargetAddOn_ClosestGadget()
non-virtual thunk to ExtendedTargetAddOn_ClosestGadget::~ExtendedTargetAddOn_ClosestGadget()
ExtendedTargetAddOn_ClosestGadget::CalculateTarget()
ExtendedTargetAddOn_ClosestGadget::GetExtendedTargetType() const
ExtendedTargetAddOn_PartyLeader::ExtendedTargetAddOn_PartyLeader()
ExtendedTargetAddOn_PartyLeader::~ExtendedTargetAddOn_PartyLeader()
non-virtual thunk to ExtendedTargetAddOn_PartyLeader::~ExtendedTargetAddOn_PartyLeader()
ExtendedTargetAddOn_PartyLeader::~ExtendedTargetAddOn_PartyLeader()
non-virtual thunk to ExtendedTargetAddOn_PartyLeader::~ExtendedTargetAddOn_PartyLeader()
ExtendedTargetAddOn_PartyLeader::CalculateTarget()
ExtendedTargetAddOn_PartyLeader::GetExtendedTargetType() const
ScriptAddOnRegister()
void* Constructor<cSpawnSimple>()
void* Constructor<cSpawnRandom>()
void* Constructor<CreatureGroup>()
void* Constructor<GoalIcons>()
void* Constructor<MiniKitCounter>()
void* Constructor<cActivityChooser>()
void* Constructor<AttachTo>()
void* Constructor<AttachObjs>()
void* Constructor<OpponentManager>()
void* Constructor<cFollowSpline>()
void* Constructor<cCreatureDamageVolume>()
void* Constructor<NodeGroupAddOn>()
void* Constructor<BossHitPoints>()
void* Constructor<TaggingConstraint>()
void* Constructor<BrawlManager>()
void* Constructor<ShowHint>()
void* Constructor<BossIconsAddOn>()
void* Constructor<Party>()
void* Constructor<PartyManager>()
AddOnHelper::~AddOnHelper()
non-virtual thunk to AddOnHelper::~AddOnHelper()
AddOnHelper::~AddOnHelper()
non-virtual thunk to AddOnHelper::~AddOnHelper()
AddOnHelper::OnHook(unsigned char, HookArgs*)
non-virtual thunk to AddOnHelper::OnHook(unsigned char, HookArgs*)
AddOnHelper::ParseItem(GameScriptContext&, cParseContextItem&)
AddOnHelper::ParseConditions(GameScriptContext&, cParseContextItem&)
AddOnHelper::GetDynoScene() const
AddOnHelper::PlaySfx(short, NUVEC const*, NuSoundHandle*, float, float, bool, int) const
AddOnHelper::PlaySfx(short, VuVec const*, NuSoundHandle*, float, float, bool, int) const
AddOnHelper::PlaySfx(SFXTypeID&, NUVEC const*, NuSoundHandle*, float, float, bool, int) const
AddOnHelper::PlaySfx(SFXTypeID&, VuVec const*, NuSoundHandle*, float, float, bool, int) const
AddOnHelper::Process(float)
AddOnHelper::Render()
TaggingConstraint::TaggingConstraint()
TaggingConstraint::TaggingConstraint(MechCharacter*)
TaggingConstraint::~TaggingConstraint()
non-virtual thunk to TaggingConstraint::~TaggingConstraint()
non-virtual thunk to TaggingConstraint::~TaggingConstraint()
TaggingConstraint::~TaggingConstraint()
non-virtual thunk to TaggingConstraint::~TaggingConstraint()
non-virtual thunk to TaggingConstraint::~TaggingConstraint()
TaggingConstraint::OnRemoved()
TaggingConstraint::Tag()
TaggingConstraint::EventNotify(Event&, NuEventData&)
non-virtual thunk to TaggingConstraint::EventNotify(Event&, NuEventData&)
TaggingConstraint::Process(float)
TaggingConstraint::ParseItem(GameScriptContext&, cParseContextItem&)
TaggingConstraint::OnDestroyEvent(AddOnList::eDestroyEvent)
MechCharacterBasePointer::~MechCharacterBasePointer()
MechCharacterBasePointer::EventNotify(Event&, NuEventData&)
GoalIconList::GoalIconList(GoalIcon*, unsigned short)
GoalIconList::AddIcon(short, unsigned short, float, nuhspecial_s const*)
GoalIconList::AddIcon(nuhspecial_s, unsigned short, float, nuhspecial_s const*)
GoalIconList::AddCharIcon(short, unsigned short, float, nuhspecial_s const*)
GoalIcons::DrawGoalIcons(GoalIcon const*, unsigned short const*, unsigned short)
GoalIcons::AdjustForComplete(GoalIcon const&, unsigned short, float&, float&, bool&)
GoalIcons::SortIcons(GoalIcon const*, unsigned short*, unsigned short, unsigned short)
GoalIcons::InitCompleteMask(GoalIcon const*, unsigned short*, unsigned short)
GoalIcons::GetPanelElementAlpha() const
GoalIcons::GetMasterAlpha() const
GoalIcons::ParseSingleItem(LegoLevelContainer&, GameScriptContext&, cParseContextItem&)
GoalIcons::Update(LegoLevelContainer&, float)
GoalIcons::GoalIcons()
GoalIcons::GetAlpha()
GoalIcons::SetAlpha(float)
GoalIcons::RenderPanel()
GoalIcons::BuildGoalIconList(GoalIconList&)
GoalIcons::EventNotify(Event&, NuEventData&)
non-virtual thunk to GoalIcons::EventNotify(Event&, NuEventData&)
GoalIcons::~GoalIcons()
GoalIcons::~GoalIcons()
HUDBaseAddOn::PostParse(LegoLevelContainer&, GameScriptContext&)
non-virtual thunk to GoalIcons::~GoalIcons()
non-virtual thunk to GoalIcons::~GoalIcons()
non-virtual thunk to GoalIcons::~GoalIcons()
non-virtual thunk to GoalIcons::~GoalIcons()
BossIconsAddOn::BossIconsAddOn(float, bool, float, float, float, int, float, float, int, int)
BossIconsAddOn::~BossIconsAddOn()
non-virtual thunk to BossIconsAddOn::~BossIconsAddOn()
non-virtual thunk to BossIconsAddOn::~BossIconsAddOn()
BossIconsAddOn::~BossIconsAddOn()
non-virtual thunk to BossIconsAddOn::~BossIconsAddOn()
non-virtual thunk to BossIconsAddOn::~BossIconsAddOn()
BossIconsAddOn::OnAdded()
BossIconsAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to BossIconsAddOn::OnHook(unsigned char, HookArgs*)
BossIconsAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
BossIconsAddOn::StartFlashing()
BossIconsAddOn::DrawBossHealth(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
BossIconsAddOn::DrawBossHealthInRows(NuCamera const&, GAMEMESSAGE*, NUVEC*, float)
BossIconsAddOn::AddBossIconMessage(MechCharacter*, int, float, unsigned char)
BossIconsAddOn::AddBossIconMessage(MechVehicle*, int, float, unsigned char)
BossIconsAddOn::Process(float)
BossIconsAddOn::SetState(BossIconsAddOn::BossIconsState)
MiniKitCounter::CountQueue::Reset()
MiniKitCounter::CountQueue::GetTextPos() const
MiniKitCounter::CountQueue::GetSpawnMiniKitPos() const
MiniKitCounter::SpawnMiniKit(NUVEC const*)
MiniKitCounter::GetFirstOnScreenLocator(AIConvexLocatorSet&)
MiniKitCounter::HasMiniKitBeenSpawned() const
MiniKitCounter::PushCountQueue(NUVEC*, bool)
MiniKitCounter::PopCountQueue()
MiniKitCounter::MiniKitCounter()
MiniKitCounter::ParseItem(GameScriptContext&, cParseContextItem&)
MiniKitCounter::Process(float)
MiniKitCounter::IncrementCount(NUVEC*, bool)
ScrFunc_IncrementMiniKitCounter(GameScriptContext&, cParseContextItem&, bool)
MiniKitCounter::~MiniKitCounter()
non-virtual thunk to MiniKitCounter::~MiniKitCounter()
non-virtual thunk to MiniKitCounter::~MiniKitCounter()
cActivityChooser::cActivityChooser()
cActivityChooser::ParseItem(GameScriptContext&, cParseContextItem&)
cActivityChooser::Stop()
cActivityChooser::Run(float)
cActivityChooser::~cActivityChooser()
non-virtual thunk to cActivityChooser::~cActivityChooser()
non-virtual thunk to cActivityChooser::~cActivityChooser()
cActivityChooser::~cActivityChooser()
non-virtual thunk to cActivityChooser::~cActivityChooser()
non-virtual thunk to cActivityChooser::~cActivityChooser()
cActivityHelper::OnDestroyEvent(AddOnList::eDestroyEvent)
cActivityHelper::Process(float)
cActivityHelper::~cActivityHelper()
cActivityHelper::~cActivityHelper()
non-virtual thunk to cActivityHelper::~cActivityHelper()
non-virtual thunk to cActivityHelper::~cActivityHelper()
cActivityChooserEventData::~cActivityChooserEventData()
AttachTo::CamPlayerPosOverride(HookArgsCamEvalPos&)
AttachTo::GetTargetRootTransform(VuMtx&) const
AttachTo::GetTargetTransform(VuMtx&) const
AttachTo::ProcessStableCamera()
AttachTo::EnableStableCamera(bool)
AttachTo::GetCurrentTransform(VuMtx&) const
AttachTo::OrientateToMoveDirection(VuMtx&, VuVec const&)
AttachTo::ApplyBanking(VuMtx&, VuMtx const&, float)
AttachTo::BlendTransform(VuMtx&, VuMtx const&, VuMtx const&, float) const
AttachTo::SeekTransform(VuMtx&, VuMtx const&, VuMtx const&, float) const
AttachTo::FaceTarget(VuMtx&)
AttachTo::TestUserTransformUpdate(float)
AttachTo::CalculateTransform(float)
AttachTo::InitBlendIn()
AttachTo::FullyInitBlend(float)
AttachTo::AttachedToCharacterPOI() const
AttachTo::OverrideMechObjectMomentum()
AttachTo::OverrideMechObjectTransform()
AttachTo::Reset()
AttachTo::AttachTo(char const*)
AttachTo::~AttachTo()
non-virtual thunk to AttachTo::~AttachTo()
non-virtual thunk to AttachTo::~AttachTo()
AttachTo::~AttachTo()
non-virtual thunk to AttachTo::~AttachTo()
non-virtual thunk to AttachTo::~AttachTo()
AttachTo::InitAttachTo(MechObjectInterface&)
AttachTo::RegisterForHooks()
AttachTo::InitAttachTo(MechObjectInterface&, bool, VuMtx const*, float)
AttachTo::InitAttachTo(MechObjectInterface&, MechObjectInterface&, short, float)
AttachTo::ParseItem(GameScriptContext&, cParseContextItem&)
AttachTo::InitBlendFromCurrent()
AttachTo::PostAnimUpdate(float)
AttachTo::OnActivator(bool)
AttachTo::EventNotify(Event&, NuEventData&)
non-virtual thunk to AttachTo::EventNotify(Event&, NuEventData&)
AttachTo::OnHook(unsigned char, HookArgs*)
non-virtual thunk to AttachTo::OnHook(unsigned char, HookArgs*)
AttachTo::GetAttachPosition(VuVec&, unsigned short&) const
AttachTo::ParseSingleItem(GameScriptContext&, cParseContextItem&)
AttachTo::PostParse()
AttachTo::PreCalculateUserTransform(float, VuMtx&)
AttachTo::PreAdjustTransform(float, VuMtx&)
AttachTo::PostAdjustTransform(float, VuMtx&)
AttachTo::DebugDraw()
AttachTo::CanSeek() const
AttachObjList::AttachObjList(AttachObj*, unsigned short)
AttachObjList::AddObj(MechCharacter*, MechCharacter*, unsigned short, short, short, float, bool)
AttachObjList::AddLocator(AIConvexLocator*, MechCharacter*, unsigned short, short, short, float, bool)
AttachObjList::AddGizmo(Gizmo*, MechCharacter*, unsigned short, short, short, float, bool)
AttachObjList::GetGizmo(int)
AttachObjList::ClearAttachments()
AttachObjList::GetLocatorMatrix(int, short, VuMtx&)
AttachObjList::Process()
AttachObjs::AttachObjs()
AttachObjs::~AttachObjs()
non-virtual thunk to AttachObjs::~AttachObjs()
AttachObjs::~AttachObjs()
non-virtual thunk to AttachObjs::~AttachObjs()
AttachObjs::PostCreate()
AttachObjs::OnHook(unsigned char, HookArgs*)
non-virtual thunk to AttachObjs::OnHook(unsigned char, HookArgs*)
AttachObjs::ParseItem(GameScriptContext&, cParseContextItem&)
AttachObjs::Process(float)
AttachObjs::GetParentCharacter()
AttachObjs::SetParentCharacter(MechCharacter&)
AttachObjs::AttachGizmo(Gizmo&, int)
NodeGroupAddOn::NodeGroupAddOn()
NodeGroupAddOn::OnActivator(bool)
NodeGroupAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
NodeGroupAddOn::~NodeGroupAddOn()
non-virtual thunk to NodeGroupAddOn::~NodeGroupAddOn()
non-virtual thunk to NodeGroupAddOn::~NodeGroupAddOn()
OpponentManager::ValidateAddOpponentToList(MechCharacter*, OpponentManager::OpponentList&)
OpponentManager::IsOpponentInteracting(GameObject const&)
OpponentManager::IsNoneThreat(GameObject const&)
OpponentManager::BuildOpponentList(OpponentManager::OpponentList&)
OpponentManager::AllocateBestOpponent(GameObject const*, OpponentManager::OpponentList&)
OpponentManager::CanChooseLastOpponent(GameObject const*, OpponentManager::OpponentSelect const&, OpponentManager::OpponentSelect const&, OpponentManager::OpponentSelect const&) const
OpponentManager::CanChoosePlayer(GameObject const*, OpponentManager::OpponentSelect const&) const
OpponentManager::IsAttackerInteracting(MechCharacter const&)
OpponentManager::OpponentManager()
OpponentManager::~OpponentManager()
non-virtual thunk to OpponentManager::~OpponentManager()
OpponentManager::~OpponentManager()
non-virtual thunk to OpponentManager::~OpponentManager()
OpponentManager::ParseItem(GameScriptContext&, cParseContextItem&)
OpponentManager::Process(float)
OpponentManager::ProcessAttackers(OpponentManager::OpponentList&)
OpponentManager::ProcessAttackersNormalMode(OpponentManager::OpponentList&)
OpponentManager::ProcessAttackersBrawlVsEveryoneMode(OpponentManager::OpponentList&)
OpponentManager::ProcessAttackersBrawlVsOpponentsMode(OpponentManager::OpponentList&)
OpponentManager::RegisterAttacker(GameObject*)
OpponentManager::UnRegisterAttacker(GameObject*)
OpponentManager::Render()
ScrFunc_RegisterOpponentManagerAttacker(GameScriptContext&, cParseContextItem&, bool)
ScrFunc_AllowOpponentManagerSelection(GameScriptContext&, cParseContextItem&, bool)
cFollowSpline::cFollowSpline()
cFollowSpline::cFollowSpline(char const*)
cFollowSpline::~cFollowSpline()
non-virtual thunk to cFollowSpline::~cFollowSpline()
non-virtual thunk to cFollowSpline::~cFollowSpline()
cFollowSpline::~cFollowSpline()
non-virtual thunk to cFollowSpline::~cFollowSpline()
non-virtual thunk to cFollowSpline::~cFollowSpline()
cFollowSpline::PreCalculateUserTransform(float, VuMtx&)
cFollowSpline::ParseSingleItem(GameScriptContext&, cParseContextItem&)
cFollowSpline::PostParse()
cFollowSpline::ParseConditions(GameScriptContext&, cParseContextItem&)
cCreatureDamageVolume::cCreatureDamageVolume()
cCreatureDamageVolume::~cCreatureDamageVolume()
non-virtual thunk to cCreatureDamageVolume::~cCreatureDamageVolume()
cCreatureDamageVolume::~cCreatureDamageVolume()
non-virtual thunk to cCreatureDamageVolume::~cCreatureDamageVolume()
cCreatureDamageVolume::Process(float)
cCreatureDamageVolume::ParseItem(GameScriptContext&, cParseContextItem&)
cCreatureDamageVolume::ParseConditions(GameScriptContext&, cParseContextItem&)
BossHitPoints::BossInfo::BossInfo()
BossHitPoints::BossInfo::InitIconCluster(HUDIconCluster&) const
BossHitPoints::BossInfo::GetMaxHitPoints() const
BossHitPoints::BossInfo::GetCurrentHitPoints() const
BossHitPoints::BossInfo::GetHeartColour(unsigned char) const
BossHitPoints::DrawIconAndHearts(BossHitPoints::BossInfo&, unsigned int, BossHitPoints::DrawInfo const&) const
BossHitPoints::DrawHearts(BossHitPoints::BossInfo const&, BossHitPoints::DrawInfo const&) const
BossHitPoints::CalcHeartsPerRow(unsigned int, unsigned int)
BossHitPoints::ParseSingleItem(LegoLevelContainer&, GameScriptContext&, cParseContextItem&)
BossHitPoints::AddBoss(MechObjectInterface*)
BossHitPoints::AddBoss(nuhspecial_s*)
BossHitPoints::SetBossSpecial(nuhspecial_s*)
BossHitPoints::SetBossMaxHitPointMsg(LEGOMessage*)
BossHitPoints::SetBossCurrentHitPointMsg(LEGOMessage*)
BossHitPoints::StartSlideOn()
BossHitPoints::PostParse(LegoLevelContainer&, GameScriptContext&)
BossHitPoints::Update(LegoLevelContainer&, float)
BossHitPoints::BossHitPoints()
BossHitPoints::RenderPanelLate()
BossHitPoints::~BossHitPoints()
BossHitPoints::~BossHitPoints()
non-virtual thunk to BossHitPoints::~BossHitPoints()
non-virtual thunk to BossHitPoints::~BossHitPoints()
BrawlManager::Brawler::SetOpponent(BrawlManager::Brawler const&, unsigned int)
BrawlManager::Brawler::SetNoOpponent()
BrawlManager::Brawler::ClearOpponent()
BrawlManager::EventNotify(Event&, NuEventData&)
BrawlManager::RemoveBrawler(BrawlManager::Brawler&, BrawlManager::SideType)
non-virtual thunk to BrawlManager::EventNotify(Event&, NuEventData&)
BrawlManager::DebugRender()
BrawlManager::UpdateOpponents()
BrawlManager::ChooseBestOpponent(BrawlManager::Brawler&, BrawlManager::SideType)
BrawlManager::BrawlManager()
BrawlManager::ParseItem(GameScriptContext&, cParseContextItem&)
BrawlManager::Process(float)
BrawlManager::RegisterBrawler(MechObjectInterface&, BrawlManager::SideType)
BrawlManager::UnregisterBrawler(MechObjectInterface&, BrawlManager::SideType)
ScrFunc_RegisterBrawler(GameScriptContext&, cParseContextItem&, bool)
BrawlManager::~BrawlManager()
BrawlManager::~BrawlManager()
non-virtual thunk to BrawlManager::~BrawlManager()
non-virtual thunk to BrawlManager::~BrawlManager()
non-virtual thunk to BrawlManager::~BrawlManager()
non-virtual thunk to BrawlManager::~BrawlManager()
ShowHint::StopShowingHintNow()
ShowHint::ShowHint()
ShowHint::~ShowHint()
non-virtual thunk to ShowHint::~ShowHint()
ShowHint::~ShowHint()
non-virtual thunk to ShowHint::~ShowHint()
ShowHint::ParseItem(GameScriptContext&, cParseContextItem&)
ShowHint::Process(float)
ShowHint::RenderPanel()
ShowHint::OnActivator(bool)
ShowHint::SuppressHintsAddOn(bool)
HUDBaseAddOn::CanProcess() const
HUDBaseAddOn::CanRender() const
HUDBaseAddOn::CanPauseFadeOut() const
HUDBaseAddOn::GetMasterAlpha() const
HUDBaseAddOn::HUDBaseAddOn(char const*, unsigned int)
HUDBaseAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
HUDBaseAddOn::Process(float)
HUDBaseAddOn::ProcessEvenWhenPaused(float)
HUDBaseAddOn::~HUDBaseAddOn()
HUDBaseAddOn::ParseSingleItem(LegoLevelContainer&, GameScriptContext&, cParseContextItem&)
HUDBaseAddOn::Update(LegoLevelContainer&, float)
non-virtual thunk to HUDBaseAddOn::~HUDBaseAddOn()
non-virtual thunk to HUDBaseAddOn::~HUDBaseAddOn()
Party::Party()
Party::Reset()
Party::~Party()
PartyManager::RemoveParty(Party&)
Party::RemovePartyMember(MechCharacter&)
non-virtual thunk to Party::~Party()
non-virtual thunk to Party::~Party()
Party::~Party()
non-virtual thunk to Party::~Party()
non-virtual thunk to Party::~Party()
Party::OnAdded()
PartyManager::Get(LegoLevelContainer&)
PartyManager::AddParty(Party&)
Party::EventNotify(Event&, NuEventData&)
Party::IsMember(MechCharacter&)
Party::RemoveFirstPartyMember(MechCharacter&)
Party::AddPartyMember(MechCharacter&)
Party::GetNumberOfPlayers()
Party::SetState(Party::State)
non-virtual thunk to Party::EventNotify(Event&, NuEventData&)
Party::IsInContainer(LevelContainer&)
non-virtual thunk to Party::IsInContainer(LevelContainer&)
Party::CanTag(MechCharacter&, MechCharacter&)
Party::CanDropIn(MechCharacter&)
Party::GetPartyLeader()
Party::ProcessDropOut()
Party::ProcessDroppingOut()
PartyManager::GetAnotherParty(Party*)
Party::SnapPartyToClosestLocator(AIConvexLocatorSet const&, NUVEC const&, float)
Party::ProcessDestroyAll()
Party::ProcessDestroyingAll()
Party::ProcessDormant()
Party::ProcessActivating()
Party::Process(float)
Party::UpdateTagButton()
Party::StateChanged(Party::State, Party::State)
Party::TagOutPartyMembersToValidPlayers()
Party::DropOut(bool)
Party::InArea(AIConvexArea&)
Party::GoThroughTeleportDoor(GizmoDoor*, MechCharacter*, WORLDINFO*, int)
Party::UpdatePartyLeader()
CMList<MechCharacter*>::Append(MechCharacter* const&, CMList<MechCharacter*>::ListLink*)
Party::GetFirstPlayer()
Party::ParseItem(GameScriptContext&, cParseContextItem&)
PartyManager::GetParty(MechCharacter&)
Party::SetDisplayTagButton(bool)
SetupForceTagDebug()
Party::GetPartyIndex()
PartyManager::GetPartyIndex(Party*)
PartyManager::StaticInit()
PartyManager::PartyManager()
PartyManager::~PartyManager()
non-virtual thunk to PartyManager::~PartyManager()
non-virtual thunk to PartyManager::~PartyManager()
PartyManager::~PartyManager()
non-virtual thunk to PartyManager::~PartyManager()
non-virtual thunk to PartyManager::~PartyManager()
PartyManager::EventNotify(Event&, NuEventData&)
non-virtual thunk to PartyManager::EventNotify(Event&, NuEventData&)
PartyManager::IsInContainer(LevelContainer&)
non-virtual thunk to PartyManager::IsInContainer(LevelContainer&)
PartyManager::DropOut()
PartyManager::SetState(PartyManager::State)
PartyManager::DropOutOrb()
PartyManager::Reset()
PartyManager::OnHook(unsigned char, HookArgs*)
PartyManager::CanTag(MechCharacter*, MechCharacter&)
PartyManager::CanDropIn(MechCharacter&)
PartyManager::UpdateDynamicCoopSplitSubMode()
PartyManager::UpdateSplitSegmentTargetObjects()
PartyManager::UpdateStreamingPOI()
PartyManager::GoThroughTeleportDoor(GizmoDoor*, MechCharacter*, WORLDINFO*)
non-virtual thunk to PartyManager::OnHook(unsigned char, HookArgs*)
PartyManager::Process(float)
PartyManager::ProcessDropOutOrb()
PartyManager::StateChanged(PartyManager::State, PartyManager::State)
PartyManager::ParseItem(GameScriptContext&, cParseContextItem&)
PartyManager::ResetCamera()
PartyManager::UpdatePartyLeaders()
PartyManager::FindPartyWithPlayers(int)
PartyManager::FindPartyWithNoPlayers()
PartyManager::AnyPartyInArea(AIConvexArea&)
CMList<Party*>::Append(Party* const&, CMList<Party*>::ListLink*)
ScrFunc_InParty(GameScriptContext&, cParseContextItem&, bool)
PartyManager_GetPartyLeader(MechObjectInterface&)
Party::Singleton()
cActivityHelper::CreateActivity(GameScriptContext&, cParseContextItem&, cActivityChooser*, ScriptTag, ScriptTag)
cActivityBase::GetExhausted()
cActivityBase::IncrementExhausted(float)
cActivityBase::DecrementExhausted(float)
cActivityBase::SetExhausted(float)
cActivityBase::SetPriority(float)
cActivityBase::SetMinPriority(float)
cActivityBase::SetMaxPriority(float)
cActivityBase::MainUpdateWantToRun(float, bool)
cActivityBase::CanInterrupt()
cActivityBase::GetDistanceFromEnteredPos()
cActivityBase::ParseItem(GameScriptContext&, cParseContextItem&)
cActivityBase::~cActivityBase()
cActivityBase::~cActivityBase()
cActivityBase::GetName() const
cActivityBase::GetPriority()
cActivityBase::UpdateWantToRun(float, bool)
cActivityBase::OnStart()
cActivityBase::OnStop()
cActivityBase::Run(float)
cActivityBase::CheckWithinActivityActiveArea()
cActivityBase::GetActivityName()
cActivityFollow::UpdateWantToRun(float, bool)
cActivityFollow::OnStart()
cActivityFollow::OnStop()
cActivityFollow::Run(float)
cActivityFollow::ParseItem(GameScriptContext&, cParseContextItem&)
cActivityFollow::~cActivityFollow()
cActivityFollow::GetActivityName()
cActivityIdle::UpdateWantToRun(float, bool)
cActivityIdle::OnStart()
cActivityIdle::OnStop()
cActivityIdle::Run(float)
cActivityIdle::ParseItem(GameScriptContext&, cParseContextItem&)
cActivityIdle::~cActivityIdle()
cActivityIdle::GetActivityName()
cActivityExhausted::UpdateWantToRun(float, bool)
cActivityExhausted::OnStart()
cActivityExhausted::OnStop()
cActivityExhausted::Run(float)
cActivityExhausted::ParseItem(GameScriptContext&, cParseContextItem&)
cActivityExhausted::~cActivityExhausted()
cActivityExhausted::GetActivityName()
cActivityMeleeAttack::UpdateWantToRun(float, bool)
cActivityMeleeAttack::OnStart()
cActivityMeleeAttack::OnStop()
cActivityMeleeAttack::Run(float)
cActivityMeleeAttack::ParseItem(GameScriptContext&, cParseContextItem&)
cActivityMeleeAttack::~cActivityMeleeAttack()
cActivityMeleeAttack::~cActivityMeleeAttack()
cActivityMeleeAttack::GetActivityName()
cActivityRangedAttack::UpdateWantToRun(float, bool)
cActivityRangedAttack::OnStart()
cActivityRangedAttack::OnStop()
cActivityRangedAttack::Run(float)
cActivityRangedAttack::GetWeaponState()
cActivityRangedAttack::AddWeapon()
cActivityRangedAttack::ParseItem(GameScriptContext&, cParseContextItem&)
cActivityRangedAttack::~cActivityRangedAttack()
cActivityRangedAttack::GetActivityName()
AIShootTask::KeepContextAnimationPlaying(MechObjectInterface&)
AIShootTask::CleanUp()
AIShootTask::AIShootTask()
AIShootTask::SetDefaults()
AIShootTask::~AIShootTask()
AIShootTask::~AIShootTask()
AIShootTask::ParseSingleItem(LegoLevelContainer&, cParseContextItem&)
AIShootTask::PostParseInit(MechObjectInterface&)
AIShootTask::Update(MechObjectInterface&, float)
AIMoveShootTask::AIMoveShootTask()
AIMoveShootTask::~AIMoveShootTask()
AIMoveShootTask::~AIMoveShootTask()
AIMoveShootTask::ParseSingleItem(LegoLevelContainer&, cParseContextItem&)
AIMoveShootTask::PostParseInit(MechObjectInterface&)
AIMoveShootTask::Update(MechObjectInterface&, float)
AIFaceTask::GetTarget(MechObjectInterface&) const
AIFaceTask::UpdateTarget(MechObjectInterface&, float, AIFaceTask::TargetData&) const
AIFaceTask::CleanUp()
AIFaceTask::AIFaceTask()
AIFaceTask::SetDefaults()
AIFaceTask::~AIFaceTask()
AIFaceTask::~AIFaceTask()
AIFaceTask::ParseSingleItem(LegoLevelContainer&, cParseContextItem&)
AIFaceTask::PostParseInit(MechObjectInterface&)
AIFaceTask::Update(MechObjectInterface&, float)
AIMeleeTask::EnterGetToTarget(MechObjectInterface&)
AIMeleeTask::StateGetToTarget(MechObjectInterface&, float)
AIMeleeTask::EnterWaitToEngage(MechObjectInterface&)
AIMeleeTask::StateWaitToEngage(MechObjectInterface&, float)
AIMeleeTask::EnterAttack(MechObjectInterface&)
AIMeleeTask::StateAttack(MechObjectInterface&, float)
AIMeleeTask::EnterWaitForInvalidContext(MechObjectInterface&)
AIMeleeTask::StateWaitForInvalidContext(MechObjectInterface&, float)
AIMeleeTask::EnterGetOutOfInvalidNode(MechObjectInterface&)
AIMeleeTask::StateGetOutOfInvalidNode(MechObjectInterface&, float)
AIMeleeTask::OnParseSingleItem(LegoLevelContainer&, cParseContextItem&)
AIMeleeTask::OnPostParseInit(MechObjectInterface&)
AIMeleeTask::OnSetState(MechObjectInterface&, unsigned char)
AIMeleeTask::OnStateProcess(MechObjectInterface&, unsigned char, float)
AIMeleeTask::OnProcess(MechObjectInterface&, float)
AIMeleeTask::AIMeleeTask(char const*)
AIMeleeTask::~AIMeleeTask()
AIMeleeTask::~AIMeleeTask()
AIAttackBaseTask::OnLeaveState(MechObjectInterface&, unsigned char)
AIAttackBaseTask::OnCleanUp()
AIMeleeShootTask::UpdateShootBurst(MechObjectInterface&, float, MechObjectData*)
AIMeleeShootTask::EnterGetToTarget(MechObjectInterface&)
AIMeleeShootTask::StateGetToTarget(MechObjectInterface&, float)
AIMeleeShootTask::EnterBurstShoot(MechObjectInterface&)
AIMeleeShootTask::StateBurstShoot(MechObjectInterface&, float)
AIMeleeShootTask::EnterWaitForLOS(MechObjectInterface&)
AIMeleeShootTask::StateWaitForLOS(MechObjectInterface&, float)
AIMeleeShootTask::EnterBackAwayFromTarget(MechObjectInterface&)
AIMeleeShootTask::StateBackAwayFromTarget(MechObjectInterface&, float)
AIMeleeShootTask::EnterMeleeTarget(MechObjectInterface&)
AIMeleeShootTask::LeaveMeleeTarget(MechObjectInterface&)
AIMeleeShootTask::StateMeleeTarget(MechObjectInterface&, float)
AIMeleeShootTask::EnterWaitForInvalidContext(MechObjectInterface&)
AIMeleeShootTask::StateWaitForInvalidContext(MechObjectInterface&, float)
AIMeleeShootTask::OnParseSingleItem(LegoLevelContainer&, cParseContextItem&)
AIMeleeShootTask::OnPostParseInit(MechObjectInterface&)
AIMeleeShootTask::OnSetState(MechObjectInterface&, unsigned char)
AIMeleeShootTask::OnLeaveState(MechObjectInterface&, unsigned char)
AIMeleeShootTask::OnStateProcess(MechObjectInterface&, unsigned char, float)
AIMeleeShootTask::AIMeleeShootTask(char const*)
AIMeleeShootTask::~AIMeleeShootTask()
AIMeleeShootTask::~AIMeleeShootTask()
AIAttackBaseTask::OnProcess(MechObjectInterface&, float)
AIShootBurst::DoAttack(MechObjectInterface&)
AIShootBurst::CheckCharacterLOS(MechObjectInterface&, MechObjectData&)
AIShootBurst::AddToLOSQueue()
AIShootBurst::RemoveFromLOSQueue()
AIShootBurst::UpdateLOSQueue()
AIShootBurst::AIShootBurst()
AIShootBurst::~AIShootBurst()
AIShootBurst::ParseSingleItem(LegoLevelContainer&, cParseContextItem&)
AIShootBurst::InitBurst(MechObjectInterface&, bool)
AIShootBurst::UpdateBurst(MechObjectInterface&, float)
AIShootBurst::UpdateLineOfSight(MechObjectInterface&, MechObjectData*)
AIShootBurst::SetShootTarget(MechObjectInterface&, VuVec const&, MechObjectData*)
AIShootBurst::SetShootTarget(MechObjectInterface&, MechObjectData*)
AIShootBurst::CanAttackTarget(MechObjectInterface&, MechObjectData*)
AIMeleeBurst::DoAttack(MechObjectInterface&)
AIMeleeBurst::UpdateSingleAttacker(MechObjectInterface&, MechObjectData*)
AIMeleeBurst::AIMeleeBurst()
AIMeleeBurst::~AIMeleeBurst()
AIMeleeBurst::ParseSingleItem(LegoLevelContainer&, cParseContextItem&)
AIMeleeBurst::InitBurst(MechObjectInterface&, bool)
AIMeleeBurst::UpdateBurst(MechObjectInterface&, float, MechObjectData*)
AIMeleeBurst::InAttack(MechObjectInterface&)
AIMeleeBurst::InAttackContext(MechObjectInterface&)
AIMeleeBurst::CanAttackTarget(MechObjectInterface&, MechObjectData*)
GameBaseOpponentInfo::GameBaseOpponentInfo(MechOpponentManager*, MechObjectData&, int, int)
GameBaseOpponentInfo::~GameBaseOpponentInfo()
GameBaseOpponentInfo::~GameBaseOpponentInfo()
GameBaseOpponentInfo::Process(float)
GameBaseOpponentInfo::UpdateSingleAttacker(MechObjectInterface&)
cSpawnSimple::cSpawnSimple()
cSpawnSimple::ParseItem(GameScriptContext&, cParseContextItem&)
cSpawnSimple::Process(float)
cSpawnSimple::Reset()
cSpawnSimple::GetSpawnPoint(VuVec&, int*, int&)
cSpawnSimple::GetClosestSpawnPoint(VuVec&, int*, int&, unsigned int)
cSpawnSimple::SetSpawnedThisFrame()
cSpawnSimple::SetSpawnPoints(AIConvexLocatorSet*)
cSpawnSimple::GetClosestSpawnPoint(VuVec const&, ScriptHelper::ScreenCheckType, float, float&, int&)
cSpawnSimple::SetActive(VuVec&, float, bool)
cSpawnSimple::GetDistanceSqrToClosestPlayer()
cSpawnSimple::~cSpawnSimple()
cSpawnSimple::~cSpawnSimple()
cSpawnSimple::EnableSpawnFlag(cSpawner::eSPAWN_FLAGS, bool)
cSpawnSimple::IsSpawnFlagEnabled(cSpawner::eSPAWN_FLAGS) const
cSpawnSimple::Head()
cSpawnSimple::Append(SpawnPoint*)
cSpawnSimple::Unlink(SpawnPoint*)
cSpawnSimple::Count() const
cSpawnSimple::Get(int) const
cSpawnSimple::Create()
non-virtual thunk to cSpawnSimple::~cSpawnSimple()
non-virtual thunk to cSpawnSimple::~cSpawnSimple()
cSpawnRandom::cSpawnRandom()
cSpawnRandom::ParseItem(GameScriptContext&, cParseContextItem&)
cSpawnRandom::Reset()
cSpawnRandom::GetSpawnPoint(VuVec&, int*, int&)
cSpawnRandom::GetRandomSpawnPoint(MechCharacter&, VuVec&, int*, unsigned int)
cSpawnRandom::SetActive(VuVec&, float, bool)
cSpawnRandom::~cSpawnRandom()
cSpawnRandom::EnableSpawnFlag(cSpawner::eSPAWN_FLAGS, bool)
cSpawnRandom::IsSpawnFlagEnabled(cSpawner::eSPAWN_FLAGS) const
cSpawner::SetSpawnPoints(AIConvexLocatorSet*)
cSpawner::Head()
cSpawner::Append(SpawnPoint*)
cSpawner::Unlink(SpawnPoint*)
cSpawner::Count() const
cSpawner::Get(int) const
cSpawner::Create()
cSpawner::GetDistanceSqrToClosestPlayer()
non-virtual thunk to cSpawnRandom::~cSpawnRandom()
non-virtual thunk to cSpawnRandom::~cSpawnRandom()
SpawnPoint::SpawnPoint()
SpawnPoint::~SpawnPoint()
non-virtual thunk to SpawnPoint::~SpawnPoint()
SpawnPoint::~SpawnPoint()
non-virtual thunk to SpawnPoint::~SpawnPoint()
SpawnPoint::GetClass() const
SpawnPoint::CheckAgainstScreen(ScriptHelper::ScreenCheckType) const
SpawnPoint::CheckIsEmpty(bool) const
SpawnPoint::GetNuUniqueObjectBase()
SpawnPoint::GetNuUniqueName() const
non-virtual thunk to SpawnPoint::GetNuUniqueName() const
SpawnPoint::GetNuUniqueNameHash() const
non-virtual thunk to SpawnPoint::GetNuUniqueNameHash() const
SpawnPoints::Create()
SpawnPoints::Append(SpawnPoint*)
SpawnPoints::RenameSpawnPoints()
SpawnPoints::Unlink(SpawnPoint*)
SpawnPoint::GetLedFile() const
SpawnPoint::SetLedFile(short)
SpawnPoint::GetName() const
SpawnPoint::SetName(char const*)
SpawnPoint::GetTransform(VuMtx&) const
SpawnPoint::SetTransform(VuMtx const&)
SpawnPoint::GetPosition(VuVec&) const
SpawnPoint::SetPosition(VuVec const&)
SpawnPoint::GetSceneNode() const
SpawnPoint::Activate()
SpawnPoint::Deactivate()
SpawnPoint::IsActive() const
SpawnPoint::SetSceneNode(SceneNode*)
CreatureGroup::CreatureGroup()
CreatureGroup::~CreatureGroup()
CreatureGroup::NotifyDestroyed()
non-virtual thunk to CreatureGroup::~CreatureGroup()
non-virtual thunk to CreatureGroup::~CreatureGroup()
non-virtual thunk to CreatureGroup::~CreatureGroup()
CreatureGroup::~CreatureGroup()
non-virtual thunk to CreatureGroup::~CreatureGroup()
non-virtual thunk to CreatureGroup::~CreatureGroup()
non-virtual thunk to CreatureGroup::~CreatureGroup()
CreatureGroup::GetClass() const
CreatureGroup::EventNotify(Event&, NuEventData&)
CreatureGroup::Remove(CreatureGroupCreature&)
non-virtual thunk to CreatureGroup::EventNotify(Event&, NuEventData&)
CreatureGroup::GetCreatureDataListManager()
CreatureGroup::FreeInterestLocator(unsigned int)
CreatureGroup::FreeUniqueMessage(unsigned int)
CreatureGroup::IsInContainer(LevelContainer&)
non-virtual thunk to CreatureGroup::IsInContainer(LevelContainer&)
CreatureGroup::Reset()
CreatureGroup::SetState(CreatureGroup::CreatureGroupState)
CreatureGroup::ResetCreatureList()
CreatureGroup::Destroy()
non-virtual thunk to CreatureGroup::Destroy()
CreatureGroup::KillAllCreatures(bool)
CreatureGroup::Process(float)
CreatureGroup::ProcessSpawnedCreatures(float)
CreatureGroup::ProcessWaitingToSpawn(float)
CreatureGroup::ProcessSpawning()
CreatureGroup::SpawnCreatures(int, bool)
CreatureGroup::StateChanged(CreatureGroup::CreatureGroupState, CreatureGroup::CreatureGroupState)
CreatureGroup::ParseItem(GameScriptContext&, cParseContextItem&)
CreatureGroup::SetSpawnLocatorSet(AIConvexLocatorSet*)
CreatureGroup::AddZoneType(cParseContextItem const&)
CreatureGroup::ParseConditions(GameScriptContext&, cParseContextItem&)
CreatureGroup::OnActivator(bool)
CreatureGroup::Activate()
CreatureGroup::GetSpawnAddOn()
CMList<CreatureGroupCreature*>::Append(CreatureGroupCreature* const&, CMList<CreatureGroupCreature*>::ListLink*)
CreatureGroup::SpawnedCreature()
CreatureGroup::AllocateInterestLocator(unsigned int&, NUVEC const*)
CreatureGroup::AllocateUniqueMessage(unsigned int&, char const*)
GameObject::Teleport(NUVEC const*, unsigned short, unsigned char)
CreatureGroup::Deactivate()
CreatureGroup::IsReadyToSpawn(float)
CreatureGroup::CalculateNumberToSpawn()
CreatureGroup::BuildGoalIconList(GoalIconList&)
CreatureGroup::GetNuUniqueObjectBase()
CreatureGroup::GetNuUniqueName() const
non-virtual thunk to CreatureGroup::GetNuUniqueName() const
CreatureGroup::GetNuUniqueNameHash() const
non-virtual thunk to CreatureGroup::GetNuUniqueNameHash() const
CreatureGroup::Contains(MechCharacter const*)
CreatureGroup::GetLedFile() const
CreatureGroup::SetLedFile(short)
CreatureGroup::GetName() const
CreatureGroup::SetName(char const*)
CreatureGroup::GetSceneNode() const
CreatureGroup::Singleton()
CreatureGroup::GetLevelContainer() const
non-virtual thunk to CreatureGroup::GetLevelContainer() const
CreatureGroupEventData::~CreatureGroupEventData()
CreatureGroupManager::CreatureGroupManager(LegoLevelContainer&)
CreatureGroupManager::RegisterProcessing()
CreatureGroupManager::EventNotify(Event&, NuEventData&)
CreatureGroupManager::ActivateCreatureGroups()
CreatureGroupManager::RemoveScene(EdRegContext&)
CreatureGroupManager::Deactivate()
CreatureGroupHelper::Register()
CreatureGroupHelper::Initialise()
EdRefCreatureGroup::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCreatureGroup::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CreatureGroupHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
CMList<CreatureGroup*>::Append(CreatureGroup* const&, CMList<CreatureGroup*>::ListLink*)
CreatureGroupHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CreatureGroupHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CreatureGroupHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CreatureGroupHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CreatureGroupHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
CreatureGroupHelper::GetManNextObject(ClassManager*, void*, void*)
CreatureGroupHelper::GetManNumObjects(ClassManager*, void*)
CreatureGroupManager::~CreatureGroupManager()
CreatureGroupManager::~CreatureGroupManager()
CreatureGroupManager::GetManagerName() const
EdRefCreatureGroup::~EdRefCreatureGroup()
CreatureGroupHelper::~CreatureGroupHelper()
EdRefCreatureDataTarget::~EdRefCreatureDataTarget()
EdRefCreatureDataTarget::GetMemberObject(void*)
EdRefCheckPointTriggerStateName::~EdRefCheckPointTriggerStateName()
EdRefCheckPointTriggerStateName::GetCount(void*)
EdRefCheckPointTriggerStateName::SetCount(void*, unsigned int)
EdRefCheckPointTriggerStateName::GetMaxCount(void*)
EdRefCheckPointTriggerStateName::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCheckPointTriggerStateName::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CreatureDataHelper::Initialise()
CreatureDataHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
CreatureDataHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
CreatureDataListHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
CreatureDataListHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
CreatureDataListHelper::AddComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CreatureDataListHelper::RemoveComponentObject(EdComponent const&, ClassObject const&, ClassObject&)
CreatureDataListHelper::GetNumComponentObjects(EdComponent const&, ClassObject const&) const
CreatureDataListHelper::GetNextComponentObject(EdComponent const&, ClassObject const&, ClassObject const&) const
CreatureDataListHelper::~CreatureDataListHelper()
CreatureDataHelper::~CreatureDataHelper()
EdRefCreatureData::~EdRefCreatureData()
EdRefCreatureData::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCreatureData::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CreatureDataScriptParamRef::~CreatureDataScriptParamRef()
CreatureDataScriptParamRef::GetCount(void*)
CreatureDataScriptParamRef::SetCount(void*, unsigned int)
CreatureDataScriptParamRef::GetMaxCount(void*)
CreatureDataScriptParamRef::GetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CreatureDataScriptParamRef::SetMemberDataByIndex(void*, int, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSpawnPoint::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefSpawnPoint::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
SpawnPointHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
SpawnPointHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
SpawnPointHelper::GetParentClass(void*)
EdRefSpawnPoint::~EdRefSpawnPoint()
SpawnPointHelper::~SpawnPointHelper()
EdRefVolumeTrigger::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefVolumeTrigger::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
VolumeTriggerHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
VolumeTriggerHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdRefVolumeTrigger::~EdRefVolumeTrigger()
VolumeTriggerHelper::~VolumeTriggerHelper()
VolumeActivator::~VolumeActivator()
VolumeActivator::~VolumeActivator()
ActivatorBase::SetOutputIndex(int)
VolumeActivator::Reset()
VolumeActivator::CheckActiveState(float)
EdRefMessageTrigger::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefMessageTrigger::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
MessageTriggerHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
MessageTriggerHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdRefMessageTrigger::~EdRefMessageTrigger()
MessageTriggerHelper::~MessageTriggerHelper()
ActivatorBase::~ActivatorBase()
MessageActivator::~MessageActivator()
ActivatorBase::Reset()
MessageActivator::CheckActiveState(float)
EdRefCheckPointTrigger::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCheckPointTrigger::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CheckPointTriggerHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
CheckPointTriggerHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdRefCheckPointTrigger::~EdRefCheckPointTrigger()
CheckPointTriggerHelper::~CheckPointTriggerHelper()
EdRefCharacterUnlockedTrigger::GetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
EdRefCharacterUnlockedTrigger::SetMemberData(void*, int, void*, int, EDREG_FLAGS, EdRefContextData*)
CharacterUnlockedTriggerHelper::CreateObject(void*, int, EDREG_FLAGS, void*, EdRegContext*)
CharacterUnlockedTriggerHelper::DestroyObject(void*, EDREG_FLAGS, void*, EdRegContext*)
EdRefCharacterUnlockedTrigger::~EdRefCharacterUnlockedTrigger()
CharacterUnlockedTriggerHelper::~CharacterUnlockedTriggerHelper()
HUDHelper::GetSpecialFromID(LegoLevelContainer&, int)
HUDHelper::ConvertToSCurve(float)
HUDHelper::ConvertToSpeedUpCurve(float)
HUDHelper::ConvertToSlowDownCurve(float)
HUDHelper::DrawIcon(short, LegoLevelContainer&, VuVec const&, float, float)
HUDHelper::DrawIcon(nuhspecial_s const&, VuVec const&, float, float)
HUDHelper::DrawCharacterIcon(short, VuVec const&, float, float)
HUDIconCluster::Reset()
HUDIconCluster::Draw(LegoLevelContainer&, VuVec const&, float, float, float, nuhspecial_s const*) const
HUDTimeInterpolator::HUDTimeInterpolator()
HUDTimeInterpolator::Update(float)
HUDTimeInterpolator::GetUnitValue() const
HUDTimeInterpolator::GetSCurvedUnitValue() const
HUDTimeInterpolator::GetSpeedUpCurve() const
HUDTimeInterpolator::GetSlowDownCurve() const
HUDTimeInterpolator::Start(float)
HUDIconClick::SetState(HUDIconClick::ClickState, LegoLevelContainer*)
HUDIconClick::HUDIconClick()
HUDIconClick::Start(unsigned short, LegoLevelContainer*)
HUDIconClick::Update(float, LegoLevelContainer*)
HUDFader::StartFade(float, HUDFader::FadeType)
HUDFader::StartFlash(HUDFader::FlashType)
HUDFader::UpdateFlashState(LegoLevelContainer*)
HUDFader::HUDFader()
HUDFader::Update(float, LegoLevelContainer*)
AddOnActivator::AddActivator(ActivatorBase*)
AddOnActivator::RemoveActivator(ActivatorBase*)
AddOnActivator::ResetActivator()
AddOnActivator::Reset()
AddOnActivator::ParseItem(GameScriptContext&, cParseContextItem&)
AddOnActivator::Process(float)
ActivatorBase::Process(float)
AddOnActivator::~AddOnActivator()
non-virtual thunk to AddOnActivator::~AddOnActivator()
AddOnActivator::~AddOnActivator()
non-virtual thunk to AddOnActivator::~AddOnActivator()
AddOnActivator::OnActivator(bool)
ActivatorBase::ActivatorBase(ActivatorBase::ActivatorType)
CheckPointActivator::CheckPointActivator()
CheckPointActivator::CheckPointActivator(LEGOMessage&)
CheckPointActivator::CheckActiveState(float)
CharacterUnlockedActivator::CheckActiveState(float)
CharacterUnlockedActivator::IsInLevel(short)
CharacterUnlockedActivator::~CharacterUnlockedActivator()
CheckPointActivator::~CheckPointActivator()
CheckPointActivator::~CheckPointActivator()
ActivatorBase::~ActivatorBase()
ActivatorBase::CheckActiveState(float)
GizmoOutputActivator::~GizmoOutputActivator()
GizmoOutputActivator::SetOutputIndex(int)
GizmoOutputActivator::CheckActiveState(float)
cFollowSplineHelper::~cFollowSplineHelper()
cFollowSplineHelper::cFollowSplineHelper()
cFollowSplineHelper::SetPow(float)
cFollowSplineHelper::GetSplinePos(VuVec&, float)
SplineCB(VuVec const&, VuVec const&, int, float, float, void*)
cFollowSplineHelper::BuildSplineCB(VuVec const&)
cFollowSplineHelper::PostParse()
cFollowSplineHelper::CalcNormals()
cFollowSplineHelper::GetNextPoint(int)
cFollowSplineHelper::GetDirFromPoint(int)
cFollowSplineHelper::PreCalculateUserTransform(VuMtx&, float)
cFollowSplineHelper::GetSplineMtx(VuMtx&, float)
cFollowSplineHelper::ParseSingleItem(GameScriptContext&, cParseContextItem&)
AIMoveTask::GetXZSpeed(MechCharacter&) const
AIMoveTask::SetHoverHeight(MechCharacter&, NUVEC const&, float) const
AIMoveTask::GetMovementBrain() const
AIMoveTask::GetMyBrain() const
AIMoveTask::GetTarget(MechObjectInterface&) const
AIMoveTask::GetTargetAddOn(MechObjectInterface&) const
AIMoveTask::UpdateTarget(MechObjectInterface&, float, AIMoveTask::TargetData&) const
AIMoveTask::GetPartyOffset(MechObjectInterface&) const
AIMoveTask::CreatePathingTask()
AIMoveTask::CleanUp()
AIMoveTask::AIMoveTask()
AIMoveTask::SetDefaults()
AIMoveTask::~AIMoveTask()
AIMoveTask::~AIMoveTask()
AIMoveTask::ParseSingleItem(LegoLevelContainer&, cParseContextItem&)
AIMoveTask::PostParseInit(MechObjectInterface&)
AIMoveTask::Update(MechObjectInterface&, float)
AIAttackBaseTask::CleanUp()
AIAttackBaseTask::SetState(MechObjectInterface&, unsigned char)
AIAttackBaseTask::GetTargetInfo(MechObjectInterface&, VuVec&, float&) const
AIAttackBaseTask::GetTarget(MechObjectInterface&) const
AIAttackBaseTask::GetTargetObjectInterface(MechObjectInterface&) const
AIAttackBaseTask::IsTargetValid(MechObjectInterface&) const
AIAttackBaseTask::MoveToPosition(MechObjectInterface&, VuVec const&, float)
AIAttackBaseTask::FacePosition(MechObjectInterface&, VuVec const&)
AIAttackBaseTask::MoveAwayFromPosition(MechObjectInterface&, VuVec const&, float)
AIAttackBaseTask::FaceTarget(MechObjectInterface&)
AIAttackBaseTask::SetMoveSpeed(MechObjectInterface&, Brain::Pace)
AIAttackBaseTask::IsInInvalidNode(MechObjectInterface&) const
AIAttackBaseTask::IsTargetInInvalidNode(MechObjectInterface&) const
AIAttackBaseTask::IsInInvalidContext(MechObjectInterface&) const
AIAttackBaseTask::AIAttackBaseTask(char const*)
AIAttackBaseTask::~AIAttackBaseTask()
AIAttackBaseTask::~AIAttackBaseTask()
AIAttackBaseTask::ParseSingleItem(LegoLevelContainer&, cParseContextItem&)
AIAttackBaseTask::PostParseInit(MechObjectInterface&)
AIAttackBaseTask::Update(MechObjectInterface&, float)
AIAttackBaseTask::OnParseSingleItem(LegoLevelContainer&, cParseContextItem&)
AIAttackBaseTask::OnPostParseInit(MechObjectInterface&)
AIAttackBaseTask::OnSetState(MechObjectInterface&, unsigned char)
AIAttackBaseTask::OnStateProcess(MechObjectInterface&, unsigned char, float)
cSpawner::cSpawner(char const*, cSpawner::SpawnType)
cSpawner::~cSpawner()
non-virtual thunk to cSpawner::~cSpawner()
cSpawner::~cSpawner()
non-virtual thunk to cSpawner::~cSpawner()
cSpawner::GetSpawnPoint(VuVec&, int*, int&)
cSpawner::EnableSpawnFlag(cSpawner::eSPAWN_FLAGS, bool)
cSpawner::IsSpawnFlagEnabled(cSpawner::eSPAWN_FLAGS) const
cSpawner::SetActive(VuVec&, float, bool)
cSpawner::Reset()
cSpawnIndex::cSpawnIndex()
cSpawnIndex::ParseItem(GameScriptContext&, cParseContextItem&)
cSpawnIndex::Process(float)
cSpawnIndex::Reset()
cSpawnIndex::GetSpawnPoint(VuVec&, int*, int&)
cSpawnIndex::SetSpawnedThisFrame()
cSpawnIndex::SetSpawnPoints(AIConvexLocatorSet*)
cSpawnIndex::SetActive(VuVec&, float, bool)
cSpawnIndex::GetDistanceSqrToClosestPlayer()
cSpawnIndex::~cSpawnIndex()
cSpawnIndex::~cSpawnIndex()
cSpawnIndex::EnableSpawnFlag(cSpawner::eSPAWN_FLAGS, bool)
cSpawnIndex::IsSpawnFlagEnabled(cSpawner::eSPAWN_FLAGS) const
cSpawnIndex::Head()
cSpawnIndex::Append(SpawnPoint*)
cSpawnIndex::Unlink(SpawnPoint*)
cSpawnIndex::Count() const
cSpawnIndex::Get(int) const
cSpawnIndex::Create()
non-virtual thunk to cSpawnIndex::~cSpawnIndex()
non-virtual thunk to cSpawnIndex::~cSpawnIndex()
CreatureData::CreatureData()
CreatureData::~CreatureData()
CreatureData::FreeParameters()
CreatureData::SetCreatureType(unsigned short)
CreatureData::SetScript(char const*)
CreatureData::SetFunctionName(char const*)
CreatureData::SetParameter(int, char const*)
CreatureData::SetParameter(int, void*)
CreatureData::GetParameter(int, void*)
CreatureData::GetParameter(int)
CreatureData::GetParameterAsString(int)
CreatureDataList::CreatureDataList()
CreatureDataList::~CreatureDataList()
CreatureDataList::~CreatureDataList()
CreatureDataList::Get(int)
cCreatureDataListManager::cCreatureDataListManager(char const*, cCreatureDataListManager::CreatureDataListManagerType)
cCreatureDataListManager::~cCreatureDataListManager()
non-virtual thunk to cCreatureDataListManager::~cCreatureDataListManager()
cCreatureDataListManager::~cCreatureDataListManager()
non-virtual thunk to cCreatureDataListManager::~cCreatureDataListManager()
cCreatureDataListManager::Process(float)
cCreatureDataListManager::Reset()
cCreatureDataListManager::AllocateCreatureDataList()
cCreatureDataListManager::DeallocateCreatureDataList(CreatureDataList*)
cCreatureDataListManager::GetNextCreatureDataList(int&)
cCreatureDataListManager::NextCreatureDataList()
cCreatureDataListManager::Head()
cCreatureDataListManager::Unlink(CreatureDataList*)
cCreatureDataListManager::Count()
cCreatureDataListManager::Append(CreatureDataList*)
cCreatureDataListManager::OnKilled(CreatureDataList&)
cCreatureDataListManager::HandleItem(GameScriptContext&, cParseContextItem&)
cSimpleCreatureDataManager::cSimpleCreatureDataManager()
cSimpleCreatureDataManager::~cSimpleCreatureDataManager()
cSimpleCreatureDataManager::DestroyAllCreatureDataLists()
non-virtual thunk to cSimpleCreatureDataManager::~cSimpleCreatureDataManager()
cSimpleCreatureDataManager::~cSimpleCreatureDataManager()
non-virtual thunk to cSimpleCreatureDataManager::~cSimpleCreatureDataManager()
cSimpleCreatureDataManager::Reset()
cSimpleCreatureDataManager::AllocateCreatureDataList()
cSimpleCreatureDataManager::Append(CreatureDataList*)
cSimpleCreatureDataManager::OnKilled(CreatureDataList&)
cSimpleCreatureDataManager::DeallocateCreatureDataList(CreatureDataList*)
cSimpleCreatureDataManager::GetParseCreatureDataList() const
cSimpleCreatureDataManager::GetNextCreatureDataList(int&)
cSimpleCreatureDataManager::NextCreatureDataList()
cSimpleCreatureDataManager::ParseItem(GameScriptContext&, cParseContextItem&)
cSimpleCreatureDataManager::HandleItem(GameScriptContext&, cParseContextItem&)
cSimpleCreatureDataManager::IsInLevel(short)
cSimpleCreatureDataManager::Head()
cSimpleCreatureDataManager::Unlink(CreatureDataList*)
cSimpleCreatureDataManager::Count()
cPurchasableCreatureDataManager::cPurchasableCreatureDataManager()
cPurchasableCreatureDataManager::~cPurchasableCreatureDataManager()
cPurchasableCreatureDataManager::DestroyAllCreatureDataLists()
non-virtual thunk to cPurchasableCreatureDataManager::~cPurchasableCreatureDataManager()
cPurchasableCreatureDataManager::~cPurchasableCreatureDataManager()
non-virtual thunk to cPurchasableCreatureDataManager::~cPurchasableCreatureDataManager()
cPurchasableCreatureDataManager::Reset()
cPurchasableCreatureDataManager::AllocateCreatureDataList()
cPurchasableCreatureDataManager::Append(CreatureDataList*)
cPurchasableCreatureDataManager::OnKilled(CreatureDataList&)
cPurchasableCreatureDataManager::DeallocateCreatureDataList(CreatureDataList*)
cPurchasableCreatureDataManager::GetParseCreatureDataList() const
cPurchasableCreatureDataManager::GetNextCreatureDataList(int&)
cPurchasableCreatureDataManager::IsInLevel(short)
cPurchasableCreatureDataManager::NextCreatureDataList()
cPurchasableCreatureDataManager::ParseItem(GameScriptContext&, cParseContextItem&)
cPurchasableCreatureDataManager::HandleItem(GameScriptContext&, cParseContextItem&)
cPurchasableCreatureDataManager::Head()
cPurchasableCreatureDataManager::Unlink(CreatureDataList*)
cPurchasableCreatureDataManager::Count()
cQueueCreatureDataManager::cQueueCreatureDataManager()
cQueueCreatureDataManager::~cQueueCreatureDataManager()
cQueueCreatureDataManager::DestroyAllCreatureDataLists()
non-virtual thunk to cQueueCreatureDataManager::~cQueueCreatureDataManager()
cQueueCreatureDataManager::~cQueueCreatureDataManager()
non-virtual thunk to cQueueCreatureDataManager::~cQueueCreatureDataManager()
cQueueCreatureDataManager::Reset()
CMList<CreatureDataList*>::Append(CreatureDataList* const&, CMList<CreatureDataList*>::ListLink*)
cQueueCreatureDataManager::AllocateCreatureDataList()
cQueueCreatureDataManager::Append(CreatureDataList*)
cQueueCreatureDataManager::OnKilled(CreatureDataList&)
cQueueCreatureDataManager::DeallocateCreatureDataList(CreatureDataList*)
cQueueCreatureDataManager::GetParseCreatureDataList() const
cQueueCreatureDataManager::GetNextCreatureDataList(int&)
cQueueCreatureDataManager::NextCreatureDataList()
cQueueCreatureDataManager::ParseItem(GameScriptContext&, cParseContextItem&)
cQueueCreatureDataManager::HandleItem(GameScriptContext&, cParseContextItem&)
cQueueCreatureDataManager::IsInLevel(short)
cQueueCreatureDataManager::Head()
cQueueCreatureDataManager::Unlink(CreatureDataList*)
cQueueCreatureDataManager::Count()
Material::Material()
Material::Material(Material&, Material&)
Material::Initialise(Material&, Material&)
Material::SetName(char const*)
Material::SetDensity(float)
Material::SetFriction(float)
Material::GetMaterial(char)
Material::GetMaterialPair(char, char)
Material::SetMaterial(char, Material&)
Material::SetMaterialPair(char, char, Material&)
xMaterialsStartTag(nufpar_s*)
xMaterialsEndTag(nufpar_s*)
xMaterialStartTag(nufpar_s*)
xMaterialPairStartTag(nufpar_s*)
xMaterialEndTag(nufpar_s*)
xMaterialName(nufpar_s*)
xMaterialDensity(nufpar_s*)
xMaterialFriction(nufpar_s*)
xMaterialPairEndTag(nufpar_s*)
xMaterialPairNames(nufpar_s*)
xMaterialPairFriction(nufpar_s*)
Material::InitialiseMaterialTable()
Material::FindMaterial(char const*)
DynoScene::DynoScene()
DynoScene::EnableAllLayers()
DynoScene::DisableLayer(char)
DynoScene::EnableLayerPair(char, char)
DynoScene::SetGravity(NuVector3Base const&)
DynoScene::~DynoScene()
DynoScene::~DynoScene()
DynoScene::Initialise()
DynoScene::AddListener(DynoListener*)
DynoScene::RemoveListener(DynoListener*)
DynoScene::GetGravity()
DynoScene::SettlePhysics(int, int, float)
DynoScene::UpdateIslands()
DynoScene::Evolve(float, Array<Entity*>&)
DynoScene::FlushDeferredList()
DynoScene::GetSlowMo()
DynoScene::SetSlowMo(float)
DynoScene::AddEntity(Entity*, bool)
DynoScene::DisableCollision(Entity*, Entity*)
DynoScene::AddJointToIsland(Joint*)
DynoScene::RemoveEntity(Entity*)
DynoScene::EnableCollision(Entity*, Entity*)
DynoScene::AddController(Controller*)
DynoScene::RemoveController(Controller*)
DynoScene::FindController(char const*)
DynoScene::GetAllEntities(Array<Entity*>&, unsigned int)
DynoScene::FindPair(Entity*, Entity*)
DynoScene::RemovePair(EntityPair*)
DynoScene::GetContours(VuMtx const&, Array<SplineGeom*>&, Geom::TerrExtra) const
DynoScene::GetEntitiesInAABB(VuVec const&, VuVec const&, Array<Entity*>&, Entity::MotionType)
DynoScene::GetWalkableContours(VuMtx const&, Array<SplineGeom*>&, Geom::TerrExtra, float) const
DynoScene::RayCast(DynoRay const&, CastCollector&)
DynoScene::SphereCast(SphereRay const&, CastCollector&)
DynoScene::ShapeCast(ShapeRay const&, CastCollector&)
DynoScene::GetActiveBodies(Array<RigidBody*>&)
DynoScene::GetAllBodies(Array<RigidBody*>&, unsigned int)
DynoScene::GetAllJoints(NuList<Joint*>&)
DynoScene::GetBodiesInAABB(VuVec const&, VuVec const&, Array<RigidBody*>&, Entity::MotionType)
DynoScene::GetWorldMinMax(NuVector3Base&, NuVector3Base&)
DynoScene::GetGeomsInAabb(VuVec const&, VuVec const&, CacheGeom&, Geom::TerrExtra, Entity::MotionType)
DynoScene::DisableLayerPair(char, char)
DynoScene::QueryLayerPair(char, char)
DynoScene::GetLayerMask(char)
DynoScene::CreatePair(Entity*, Entity*)
DynoScene::AddPair(EntityPair*)
DynoScene::BeginCollision(Entity*, Entity*)
DynoScene::EndCollision(Entity*, Entity*)
DynoScene::FindEntity(char const*)
DynoScene::FindRigidBody(char const*)
DynoScene::CreateBox(float, VuVec const&)
DynoScene::CreateSphere(float, float)
DynoScene::CreateCapsule(float, float, float)
DynoScene::CreateCylinder(float, float, float)
DynoScene::CreateEllipsoid(float, float*)
DynoScene::SetFloatyHack(float)
DynoScene::GetFloatyHack()
DynoScene::AddJoint(Joint*)
DynoScene::RemoveJoint(Joint*)
DynoScene::FindJoint(char const*)
DynoScene::GetStats(int&, int&, int&)
BroadPhaseRayCast<DynoRay>::HitProxy(Entity*)
BroadPhaseRayCast<DynoRay>::ResetTofi()
BroadPhaseRayCast<DynoRay>::GetTofi()
BroadPhaseRayCast<SphereRay>::HitProxy(Entity*)
BroadPhaseRayCast<SphereRay>::ResetTofi()
BroadPhaseRayCast<SphereRay>::GetTofi()
BroadPhaseRayCast<ShapeRay>::HitProxy(Entity*)
BroadPhaseRayCast<ShapeRay>::ResetTofi()
BroadPhaseRayCast<ShapeRay>::GetTofi()
Island::~Island()
Island::MergeIsland(Island*, LinkedList<Island>&)
Island::Merge(Island*, Island*, LinkedList<Island>&)
Island::CheapSweep(DynoScene*, float)
SweptBodyPairComp(void const*, void const*)
Island::Sweep(DynoScene*, float&)
Island::Evolve(DynoScene*, float, Array<Entity*>&)
Island::AddConstraints(ConstraintSolver&)
Island::GetConstraints(ConstraintSolver&)
Island::DoCallBacks()
Island::ValidateRigids()
RigidMass::RigidMass()
RigidMass::Initialise()
RigidMass::RigidMass(Inertia&)
RigidMass::SetInertia(Inertia&)
RigidMass::RigidMass(float, VuMtx&)
RigidMass::SetMass(float)
RigidMass::SetInertia(VuMtx&)
RigidMass::RigidMass(float, float)
RigidMass::SetSphereInertia(float, float)
RigidMass::RigidMass(float, float*)
RigidMass::SetEllipsoidInertia(float, float*)
RigidMass::RigidMass(float, VuVec&)
RigidMass::SetBoxInertia(float, VuVec const&)
RigidMass::SetInertia(float, float, float)
RigidMass::GetMass() const
RigidMass::AdjustMass(float)
RigidMass::SetCentreOfMass(VuVec const&)
RigidMass::AdjustCentreOfMass(VuVec&)
RigidMass::GetInertia(VuMtx&)
RigidMass::GetWorldCentreOfMass(VuVec&)
RigidMass::ScaleInertia(float)
RigidMass::ScaleDiagonalInertia(VuVec&)
RigidMass::ApplyForce(NuVector3Base const&)
RigidMass::ApplyTorque(NuVector3Base const&)
RigidMass::ApplyForce(VuVec const&, VuVec const&)
RigidMass::ApplyTorque(VuVec const&, VuVec const&)
RigidMass::ApplyImpulseForce(VuVec const&)
RigidMass::ApplyImpulseTorque(VuVec const&)
RigidMass::ApplyImpulseForce(VuVec const&, VuVec const&)
RigidMass::CalculateWorldInertia(VuMtx&)
RigidMass::ApplyImpulseTorque(VuVec const&, VuVec const&)
RigidMass::GetLocalPointVelocity(VuVec const&, VuVec&)
RigidMass::GetWorldPointVelocity(VuVec const&, VuVec&)
RigidMass::ApplyContactImpulse(VuVec const&, VuVec const&, VuVec&, float, float, float)
RigidMass::ApplyContactImpulse(RigidMass&, RigidMass&, VuVec&, VuVec&, float)
RigidMass::IntegrateVelocity(float)
RigidMass::ClampVelocity()
RigidMass::SetTransform(VuMtx const&)
RigidMass::SetTransform(NuTransform const&)
RigidMass::Reset()
RigidMass::Clone()
RigidMass::DriveToMtx(VuMtx const&, float)
RigidMass::DriveToMtx(VuMtx const&, VuVec const&, float)
RigidMass::Validate()
BodyPair::BodyPair(RigidBody*, RigidBody*)
BodyPair::~BodyPair()
BodyPair::~BodyPair()
BodyPair::Sleep()
BodyPair::UpdateJointList(DynoScene&, float)
BodyPair::CreateContactJoints(Array<ContactPoint>&)
BodyPair::AddConstraints(ConstraintSolver&)
BodyPair::GetConstraints(ConstraintSolver&)
BodyPair::CreateBodyPair(Entity const*, Entity const*)
WaterBodyPair::WaterBodyPair(Entity*, Entity*)
WaterBodyPair::~WaterBodyPair()
WaterBodyPair::~WaterBodyPair()
WaterBodyPair::JustEnteredWater()
WaterBodyPair::UpdateJointList(DynoScene&, float)
WaterBodyPair::CreateWaterBodyPair(Entity const*, Entity const*)
EntityPair::Sleep()
EntityPair::AddConstraints(ConstraintSolver&)
EntityPair::GetConstraints(ConstraintSolver&)
ClothBodyPair::ClothBodyPair(Entity*, Entity*)
ClothBodyPair::~ClothBodyPair()
ClothBodyPair::~ClothBodyPair()
ClothBodyPair::Sleep()
ClothBodyPair::CreateContactJoints(Array<ContactPoint>&)
ClothBodyPair::UpdateJointList(DynoScene&, float)
ClothBodyPair::AddConstraints(ConstraintSolver&)
ClothBodyPair::GetConstraints(ConstraintSolver&)
WaterClothPair::WaterClothPair(Entity*, Entity*)
WaterClothPair::~WaterClothPair()
WaterClothPair::~WaterClothPair()
WaterClothPair::UpdateJointList(DynoScene&, float)
WaterClothPair::CreateWaterClothPair(Entity const*, Entity const*)
ConstraintSolver::ConstraintSolver(float)
ConstraintSolver::~ConstraintSolver()
ConstraintSolver::AddConstraints(int, bool)
ConstraintSolver::FreeScratchPadArrays()
ConstraintSolver::RemoveAllCloth()
ConstraintSolver::AddCloth(Cloth*)
ConstraintSolver::SolveConstraints(float)
ConstraintSolver::PrepareBodyConstraints(float)
ConstraintSolver::PrepareClothConstraints(float)
ConstraintSolver::PrepareClothBodyConstraints(float)
ConstraintSolver::SolveBodyConstraints(int)
ConstraintSolver::SolveClothConstraints()
ConstraintSolver::SolveClothBodyConstraints()
Constraint3::AddForceA(VuVec const&)
EntityPair::~EntityPair()
EntityPair::~EntityPair()
EntityPair::InitPairTable()
EntityPair::UpdateJointList(DynoScene&, float)
DynoListener::DynoListener()
DynoListenerList::~DynoListenerList()
DynoListenerList::Insert(DynoListener*)
DynoListenerList::Remove(DynoListener*)
DynoListenerList::AddEntity(Entity*)
DynoListenerList::RemoveEntity(Entity*)
DynoListenerList::OverlapBegin(Entity const*, Entity const*)
DynoListenerList::OverlapEnd(Entity const*, Entity const*)
DynoListenerList::AllowSweepCollision(Entity const*, Entity const*)
DynoListenerList::AllowCollision(Entity const*, Entity const*)
DynoListenerList::Collision(BodyPair*, Array<ContactPoint>&)
DynoListenerList::Collision(Character*, Entity*, ContactPoint&)
DynoListenerList::Collision(EntityPair*)
DynoListenerList::ContactJoints(LinkedList<Joint>&)
DynoListenerList::ContactJointCreated(ContactJoint*, ContactPoint*)
DynoListenerList::CanPush(Character*, Character*)
DynoListenerList::CharacterCanPushRigidBody(Character*, RigidBody*)
DynoListenerList::AdjustWaterVars(Water const*, Entity const*, float&, float&)
DynoListenerList::JustEnteredWater(VuVec const&, VuVec const&)
DynoListenerList::RagDollEntityDeleted(Entity const*)
DynoListener::~DynoListener()
Agent::~Agent()
Agent::~Agent()
Agent::Sleep()
Agent::TimeOfFirstImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, ContactPoint&, NuScalarBase&)
Agent::ReduceContacts(Array<ContactPoint>&)
Agent::ReduceCluster(int, ContactPoint**, Array<ContactPoint>&)
Array<ContactPoint>::Insert(ContactPoint const&)
Agent::ClipFeatures(Array<ContactPoint>&, GhkFeature*, GhkFeature*, VuVec const&)
Agent::ClipPolyToPlanes(int, int, VuVec*, VuVec const*, VuVec*, bool*)
Agent::InitAgentTable()
Agent::CreateAgent(Geom const*, Geom const*)
SplineAgent::SplineAgent(SplineGeom const*, Geom const*)
SplineAgent::~SplineAgent()
SplineAgent::~SplineAgent()
SplineAgent::Intersects(NuMatrixBase const&, NuMatrixBase const&)
SplineAgent::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
SplineAgent::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
SplineAgent::CreateSplineGeom(Geom const*, Geom const*)
SplineAgent::CreateGeomSpline(Geom const*, Geom const*)
SplineAgent::GetClosestPoints(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&, NuScalarBase const&)
MirrorAgent<SplineAgent, Geom, SplineGeom>::~MirrorAgent()
MirrorAgent<SplineAgent, Geom, SplineGeom>::~MirrorAgent()
MirrorAgent<SplineAgent, Geom, SplineGeom>::Intersects(NuMatrixBase const&, NuMatrixBase const&)
MirrorAgent<SplineAgent, Geom, SplineGeom>::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
MirrorAgent<SplineAgent, Geom, SplineGeom>::GetClosestPoints(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&, NuScalarBase const&)
MirrorAgent<SplineAgent, Geom, SplineGeom>::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
BoxBoxAgent::BoxBoxAgent(BoxGeom*, BoxGeom*)
BoxBoxAgent::~BoxBoxAgent()
BoxBoxAgent::~BoxBoxAgent()
BoxBoxAgent::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
BoxBoxAgent::PenetrationDepth(VuMtx const&, VuMtx const&, VuVec const&, VuVec const&, VuVec&)
BoxBoxAgent::CreateAgent(Geom const*, Geom const*)
BoxBoxAgent::VuPenetrationDepth(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base&)
ConvexConvexAgent::ConvexConvexAgent(ConvexGeom*, ConvexGeom*)
ConvexConvexAgent::~ConvexConvexAgent()
ConvexConvexAgent::~ConvexConvexAgent()
ConvexConvexAgent::Intersects(NuMatrixBase const&, NuMatrixBase const&)
ConvexConvexAgent::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
ConvexConvexAgent::SqrDistance(NuMatrixBase const&, NuMatrixBase const&, NuScalarBase const&)
ConvexConvexAgent::GetClosestPoints(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&, NuScalarBase const&)
ConvexConvexAgent::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
ConvexConvexAgent::CreateConvexConvex(Geom const*, Geom const*)
ConvexConvexAgent::SetAllowedToiDepth(NuScalarBase const&)
GhkSkin::~GhkSkin()
Geom::SetScale(VuVec&)
Geom::GetScale(VuVec&)
GhkSkin::Clone() const
Geom::Render()
ConvexGeom::Render(VuMtx const&) const
GhkSkin::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
Geom::GetChildren(Array<unsigned long>&, Array<Geom*>&) const
ConvexGeom::GetChildrenInAabb(VuVec const&, VuVec const&, Array<unsigned long>&, Geom::TerrExtra) const
GhkSkin::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
Geom::GetContours(VuMtx const&, Array<SplineGeom*>&, Geom::TerrExtra) const
Geom::GetWalkableContours(VuMtx const&, Array<SplineGeom*>&, Geom::TerrExtra, float) const
GhkSkin::GetRadius() const
GhkSkin::SupportPoint(NuVector3Base const&, NuVector3Base&, int&) const
GhkSkin::SupportFeature(NuMatrixBase const&, NuVector3Base const&, int, GhkFeature&) const
ConvexGeom::Weld(NuMatrixBase const&, VuVec&, float, bool) const
ConvexGeom::GetChildGeom(int) const
ComplexAgent::ComplexAgent(Geom const*, Geom const*)
ComplexAgent::~ComplexAgent()
ComplexAgent::KillCache()
ComplexAgent::~ComplexAgent()
ComplexAgent::Intersects(NuMatrixBase const&, NuMatrixBase const&)
ComplexAgent::UpdateLocalSpaceCache(NuVector3Base const&, NuVector3Base const&)
ComplexAgent::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
ComplexAgent::GetClosestPoints(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&, NuScalarBase const&)
ComplexAgent::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
ComplexAgent::CreateComplexGeom(Geom const*, Geom const*)
ComplexAgent::CreateGeomComplex(Geom const*, Geom const*)
ComplexAgent::CreateComplexComplex(Geom const*, Geom const*)
MirrorAgent<ComplexAgent, Geom, Geom>::~MirrorAgent()
MirrorAgent<ComplexAgent, Geom, Geom>::~MirrorAgent()
MirrorAgent<ComplexAgent, Geom, Geom>::Intersects(NuMatrixBase const&, NuMatrixBase const&)
MirrorAgent<ComplexAgent, Geom, Geom>::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
MirrorAgent<ComplexAgent, Geom, Geom>::GetClosestPoints(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&, NuScalarBase const&)
MirrorAgent<ComplexAgent, Geom, Geom>::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
CompoundAgent::CompoundAgent(Geom const*, CompoundGeom const*)
CompoundAgent::CompoundAgent(CompoundGeom const*, Geom const*)
CompoundAgent::CompoundAgent(CompoundGeom const*, CompoundGeom const*)
CompoundAgent::~CompoundAgent()
CompoundAgent::~CompoundAgent()
CompoundAgent::Intersects(NuMatrixBase const&, NuMatrixBase const&)
CompoundAgent::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
CompoundAgent::GetClosestPoints(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&, NuScalarBase const&)
CompoundAgent::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
CompoundAgent::CreateGeomCompound(Geom const*, Geom const*)
CompoundAgent::CreateCompoundGeom(Geom const*, Geom const*)
CompoundAgent::CreateCompoundCompound(Geom const*, Geom const*)
TransformAgent::TransformAgent(Geom const*, TransformGeom const*)
TransformAgent::TransformAgent(TransformGeom const*, Geom const*)
TransformAgent::TransformAgent(TransformGeom const*, TransformGeom const*)
TransformAgent::~TransformAgent()
TransformAgent::~TransformAgent()
TransformAgent::Intersects(NuMatrixBase const&, NuMatrixBase const&)
TransformAgent::GetClosestPoints(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&, NuScalarBase const&)
TransformAgent::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
TransformAgent::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
TransformAgent::CreateTransformGeom(Geom const*, Geom const*)
TransformAgent::CreateGeomTransform(Geom const*, Geom const*)
TransformAgent::CreateTransformTransform(Geom const*, Geom const*)
TranslateAgent::TranslateAgent(Geom const*, TranslateGeom const*)
TranslateAgent::TranslateAgent(TranslateGeom const*, Geom const*)
TranslateAgent::TranslateAgent(TranslateGeom const*, TranslateGeom const*)
TranslateAgent::~TranslateAgent()
TranslateAgent::~TranslateAgent()
TranslateAgent::Intersects(NuMatrixBase const&, NuMatrixBase const&)
TranslateAgent::GetClosestPoints(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&, NuScalarBase const&)
TranslateAgent::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
TranslateAgent::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
TranslateAgent::CreateTranslateGeom(Geom const*, Geom const*)
TranslateAgent::CreateGeomTranslate(Geom const*, Geom const*)
TranslateAgent::CreateTranslateTranslate(Geom const*, Geom const*)
TriangleBoxAgent::TriangleBoxAgent(Geom const*, Geom const*)
TriangleBoxAgent::~TriangleBoxAgent()
TriangleBoxAgent::~TriangleBoxAgent()
TriangleBoxAgent::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
TriangleBoxAgent::VuPenetrationDepth(NuMatrixBase const&, NuVector3Base const*, NuMatrixBase const&, NuVector3Base const&, NuVector3Base&)
TriangleBoxAgent::PenetrationDepth(VuMtx const&, VuVec const*, VuMtx const&, VuVec const&, VuVec&)
TriangleBoxAgent::FloatContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
TriangleBoxAgent::CreateTriangleBox(Geom const*, Geom const*)
TriangleBoxAgent::CreateBoxTriangle(Geom const*, Geom const*)
MirrorAgent<TriangleBoxAgent, Geom, Geom>::~MirrorAgent()
MirrorAgent<TriangleBoxAgent, Geom, Geom>::~MirrorAgent()
MirrorAgent<TriangleBoxAgent, Geom, Geom>::Intersects(NuMatrixBase const&, NuMatrixBase const&)
MirrorAgent<TriangleBoxAgent, Geom, Geom>::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
MirrorAgent<TriangleBoxAgent, Geom, Geom>::GetClosestPoints(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&, NuScalarBase const&)
MirrorAgent<TriangleBoxAgent, Geom, Geom>::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
DynamicMeshAgent::DynamicMeshAgent(DynamicMesh const*, Geom const*)
DynamicMeshAgent::~DynamicMeshAgent()
DynamicMeshAgent::~DynamicMeshAgent()
DynamicMeshAgent::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
DynamicMeshAgent::CreateMeshGeom(Geom const*, Geom const*)
DynamicMeshAgent::CreateGeomMesh(Geom const*, Geom const*)
DynamicMeshAgent::CreateMeshMesh(Geom const*, Geom const*)
DynamicMeshAgent::Intersects(NuMatrixBase const&, NuMatrixBase const&)
DynamicMeshAgent::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
MirrorAgent<DynamicMeshAgent, Geom, DynamicMesh>::~MirrorAgent()
MirrorAgent<DynamicMeshAgent, Geom, DynamicMesh>::~MirrorAgent()
MirrorAgent<DynamicMeshAgent, Geom, DynamicMesh>::Intersects(NuMatrixBase const&, NuMatrixBase const&)
MirrorAgent<DynamicMeshAgent, Geom, DynamicMesh>::ContactSet(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&)
MirrorAgent<DynamicMeshAgent, Geom, DynamicMesh>::GetClosestPoints(NuMatrixBase const&, NuMatrixBase const&, Array<ContactPoint>&, NuScalarBase const&)
MirrorAgent<DynamicMeshAgent, Geom, DynamicMesh>::TimeOfImpact(NuMatrixBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base const&, Array<ContactPoint>&)
TreeSap::TreeSap(int, BpCallBack&)
TreeSap::~TreeSap()
TreeSap::~TreeSap()
TreeSap::CreateProxy(void*, NuVector3Base const&, NuVector3Base const&, bool)
TreeSap::CreateProxies(Array<void*>&, Array<NuVector3Base>&, Array<NuVector3Base>&, bool)
TreeSap::DestroyProxy(BpProxy*&)
TreeSap::SetMinMax(BpProxy*, NuVector3Base const&, NuVector3Base const&)
TreeSap::GetMinMax(BpProxy*, NuVector3Base&, NuVector3Base&)
TreeSap::GetWorldMinMax(NuVector3Base&, NuVector3Base&)
TreeSap::UdpateOverlappingPairs()
TreeSap::RayCast(NuVector3Base const&, NuVector3Base const&, BpCastCallBack&)
TreeSap::AabbCast(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, BpCastCallBack&)
TreeSap::GetProxiesInAabb(NuVector3Base const&, NuVector3Base const&, Array<BpProxy*>&)
TreeSap::ReQuerySingleProxy(BpProxy*)
TreeSap::GetAllProxys(Array<BpProxy*>&)
TreeSap::FireEvents(Array<BpProxy*>&, SweepNode*, TreeSap::EventMode)
TreeSap::GeneratePairs(bool)
AabbTree::AabbTree(BpCallBack&)
AabbTree::~AabbTree()
AabbTree::~AabbTree()
AabbTree::CreateProxy(void*, NuVector3Base const&, NuVector3Base const&, bool)
AabbTree::AddNode(AabbNode*, AabbNode*)
AabbTree::CreateProxies(Array<void*>&, Array<NuVector3Base>&, Array<NuVector3Base>&, bool)
AabbTree::DestroyProxy(BpProxy*&)
AabbTree::RemoveNode(AabbNode*)
AabbTree::SetMinMax(BpProxy*, NuVector3Base const&, NuVector3Base const&)
AabbTree::GetMinMax(BpProxy*, NuVector3Base&, NuVector3Base&)
AabbTree::GetWorldMinMax(NuVector3Base&, NuVector3Base&)
AabbTree::UdpateOverlappingPairs()
AabbTree::CreateInternalNode(AabbNode*, AabbNode*)
AabbTree::DestroyNodesParent(AabbNode*)
AabbTree::ComputeMinMax(AabbNode*)
AabbApproxDistance(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base const&)
AabbTree::VerifyTree()
AabbTree::RayCast(NuVector3Base const&, NuVector3Base const&, BpCastCallBack&)
AabbTree::AabbCast(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, BpCastCallBack&)
AabbTree::GetProxiesInAabbMinMax(NuVector3Base const&, NuVector3Base const&, Array<BpProxy*>&)
AabbTree::GetProxiesInAabb(NuVector3Base const&, NuVector3Base const&, Array<BpProxy*>&)
AabbTree::ReQuerySingleProxy(BpProxy*)
AabbTree::GetAllProxys(Array<BpProxy*>&)
AabbTree::GeneratePairs(bool)
operator<(EndPoint const&, EndPoint const&)
operator>(EndPoint const&, EndPoint const&)
operator<=(EndPoint const&, EndPoint const&)
operator==(EndPoint const&, EndPoint const&)
EndPoint::EndPoint(SweepNode*, float, int)
SweepAndPrune::SweepAndPrune(int, BpCallBack&)
SweepAndPrune::~SweepAndPrune()
SweepAndPrune::RemoveDeadIntervals()
SweepAndPrune::~SweepAndPrune()
SweepAndPrune::CreateProxy(void*, NuVector3Base const&, NuVector3Base const&, bool)
SweepAndPrune::AddCollider(SweepNode*, NuVector3Base const&, NuVector3Base const&)
SweepAndPrune::DestroyProxy(BpProxy*&)
SweepAndPrune::RemoveCollider(SweepNode*)
SweepAndPrune::CreateProxies(Array<void*>&, Array<NuVector3Base>&, Array<NuVector3Base>&, bool)
SweepAndPrune::AddColliders(Array<void*>&, Array<NuVector3Base>&, Array<NuVector3Base>&)
SweepAndPrune::SetMinMax(BpProxy*, NuVector3Base const&, NuVector3Base const&)
SweepAndPrune::MoveInterval(int, int, int, float, float)
SweepAndPrune::GetMinMax(BpProxy*, NuVector3Base&, NuVector3Base&)
SweepAndPrune::GetWorldMinMax(NuVector3Base&, NuVector3Base&)
SweepAndPrune::RayCast(NuVector3Base const&, NuVector3Base const&, BpCastCallBack&)
SweepAndPrune::AabbCast(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, BpCastCallBack&)
SweepAndPrune::GetProxiesInAabb(NuVector3Base const&, NuVector3Base const&, Array<BpProxy*>&)
SweepAndPrune::UdpateOverlappingPairs()
SweepAndPrune::ReQuerySingleProxy(BpProxy*)
SweepAndPrune::GetAllProxys(Array<BpProxy*>&)
SweepAndPrune::AddInterval(int, EndPoint&, EndPoint&)
SweepAndPrune::RemoveInterval(int, int, int)
SweepAndPrune::AddPoints(int, int, int, EndPoint&, EndPoint&)
SweepAndPrune::MovePoint(int, int, float)
SweepAndPrune::AddEncounter(int, EndPoint&, EndPoint&)
SweepAndPrune::RemovePoints(int, int, int)
SweepAndPrune::ReIndexPoints(int, int)
SweepAndPrune::AddInterval(int, EndPoint&, EndPoint&, Array<SweepNode*>&)
SweepAndPrune::RemoveInterval(int, int, int, Array<SweepNode*>&)
SweepAndPrune::GeneratePairs(bool)
void std::__1::__sort<std::__1::__less<EndPoint, EndPoint>&, EndPoint*>(EndPoint*, EndPoint*, std::__1::__less<EndPoint, EndPoint>&)
unsigned int std::__1::__sort4<std::__1::__less<EndPoint, EndPoint>&, EndPoint*>(EndPoint*, EndPoint*, EndPoint*, EndPoint*, std::__1::__less<EndPoint, EndPoint>&)
unsigned int std::__1::__sort5<std::__1::__less<EndPoint, EndPoint>&, EndPoint*>(EndPoint*, EndPoint*, EndPoint*, EndPoint*, EndPoint*, std::__1::__less<EndPoint, EndPoint>&)
void std::__1::__insertion_sort_3<std::__1::__less<EndPoint, EndPoint>&, EndPoint*>(EndPoint*, EndPoint*, std::__1::__less<EndPoint, EndPoint>&)
bool std::__1::__insertion_sort_incomplete<std::__1::__less<EndPoint, EndPoint>&, EndPoint*>(EndPoint*, EndPoint*, std::__1::__less<EndPoint, EndPoint>&)
Entity::~Entity()
Entity::~Entity()
Entity::RemoveFromScene()
Entity::GetOBB(NuMatrixBase&, NuVector3Base&) const
Entity::GetMinMaxVu(VuVec&, VuVec&) const
Entity::GetMinMax(NuVector3Base&, NuVector3Base&) const
Entity::SetShape(Geom*)
Entity::SetMinMax(NuVector3Base const&, NuVector3Base const&)
Entity::SetTransform(VuMtx const&)
Entity::UpdateCollider()
Entity::SetPosition(VuVec const&)
Entity::WakeUp()
Entity::FlushLayerCache()
Entity::Cast(DynoRay const&, CastCollector&) const
Entity::Cast(SphereRay const&, CastCollector&) const
Entity::Cast(ShapeRay const&, CastCollector&) const
ShapeRay::InvTransform(VuMtx const&)
Entity::AddJoint(Joint*)
Entity::RemoveJoint(Joint*)
Entity::GetJoints()
RigidBody::RigidBody()
RigidBody::Initialise()
RigidBody::RigidBody(Entity::MotionType)
RigidBody::RigidBody(RigidMass*, Geom*)
RigidBody::SetRigidMass(RigidMass*)
RigidBody::~RigidBody()
RigidBody::~RigidBody()
RigidBody::CastSecondary(SphereRay const&, CastCollector&)
RigidBody::SetTransform(NuTransform const&)
RigidBody::GetTransform(NuTransform&) const
RigidBody::ConvertToKinematic()
RigidBody::GetMinMax(NuVector3Base&, NuVector3Base&) const
RigidBody::SetTransform(VuMtx const&)
RigidBody::UpdateTransforms()
RigidBody::DriveToMtx(VuMtx const&, float)
RigidBody::WakeUpIfNeeded()
RigidBody::ExtractScale(VuMtx&)
RigidBody::WakeUp()
RigidBody::DriveToMtx(VuMtx const&, VuVec const&, float)
RigidBody::Validate()
RigidBody::Sleep()
RigidBody::WakeUpIsland()
RigidBody::Reset()
RigidBody::SleepTest(float)
RigidBody::Clone()
RigidBody::SetSecondaryShape(Geom*)
RigidBody::ContainsKdTerrain()
RigidBody::IsInActiveIsland()
RigidBody::UpdateMassInertia(float)
RigidBody::SetPosition(VuVec const&)
RigidBody::IntegrateVelocity(float)
RigidBody::IntegratePosition(float)
RigidMass::IntegratePosition(float)
RigidBody::GetSecondaryShape()
RigidBody::IsEntitySleeping()
Phantom::Phantom()
Phantom::Phantom(NuVector3Base const&)
Phantom::Phantom(Phantom::SubType)
Phantom::Phantom(Phantom::SubType, VuVec&)
Phantom::~Phantom()
Phantom::~Phantom()
Phantom::SetExtents(NuVector3Base const&)
Phantom::SetTransform(VuMtx const&)
Phantom::GetMinMax(NuVector3Base&, NuVector3Base&) const
Phantom::SetMinMax(NuVector3Base const&, NuVector3Base const&)
Phantom::BeginCollision(Entity*)
Phantom::EndCollision(Entity*)
Phantom::Cast(DynoRay&, CastCollector&)
Character::Character()
Character::SetSlopeAngles(float, float, float)
Character::SetSmoothing(float)
Character::SetFastPlatformHack(bool)
Character::SetStepHeight(float)
Character::SetKickSpeed(float)
Character::~Character()
Character::~Character()
Character::SetVelocity(VuVec const&)
Character::SetPosition(VuVec const&)
Character::ResetSmoothedY()
Character::SetTransform(VuMtx const&)
Character::Resize(float, float)
Character::SetFootOffset(float)
Character::GetFootPos(NUVEC&)
Character::CreateFromBody(RigidBody*)
Character::CreateEllipse(float, float)
Character::CreateCapsule(float, float)
Character::CreateBox(VuVec&)
Character::SetShape(Geom*)
Character::Jump(float, float)
Character::GetFootPos(NuVector3Base&)
Character::GetFootOffset()
Character::SetFootPos(NuVector3Base const&)
Character::SetFootPos(VuVec const&, int)
Character::SetRotation(int)
Character::SetFootTransform(VuMtx const&)
Character::GetFootTransform(VuMtx&) const
Character::TouchingActiveIsland()
Character::GetRagDoll()
Character::SetRagDoll(Controller*)
Character::Move(float)
Character::SleepTest()
Character::UpdateAgents(float)
Character::DealWithDynamics(float, DynamicArray<ContactPoint>*)
Character::SlideMove(VuVec&, float&, DynamicArray<ContactPoint>*, Character::SlideFlags)
Character::StairClimb(VuVec&, float&, DynamicArray<ContactPoint>*)
Character::DoGroundCheck(DynamicArray<ContactPoint>&, float)
Character::MoveWithGround()
Character::IsGroundPoint(Entity*, VuVec const&, short)
DynamicArrayBase<ContactPoint, true>::PushBack(ContactPoint&)
Character::SetGroundEntity(ContactPoint&)
Character::ChooseBestPoint(Array<ContactPoint> const&, ContactPoint&, float&)
Character::TimeOfImpact(VuVec const&, VuVec const&, ContactPoint&, float&)
Character::FloorDeflect(VuVec&, VuVec const&)
Character::Impact(Character&, Character&, VuVec const&, float, float)
Character::Impact(Character&, RigidBody&, VuVec const&, float, float, float)
Character::BeginCollision(Entity*)
Character::EndCollision(Entity*)
Character::DisableCollisionUntilDisjoint(bool)
Character::DisableCollisionUntilDisjoint(Array<Entity*>&)
Character::RefreshEntityList()
Character::IgnoreThisRope(Cloth*)
Cloth::Cloth()
Cloth::~Cloth()
Cloth::~Cloth()
Cloth::GetLength()
Cloth::GetRadius()
Cloth::CreateRope(float, int, VuVec*)
Cloth::SetShape(SplineGeom*)
Cloth::SetMass(float)
Cloth::OverideSegmentLength(float)
Cloth::LimitSegmentLength(float)
Cloth::LimitSegmentLength(int, int, float)
Cloth::SetShape(Geom*)
Cloth::SetShape(DynamicMesh*)
Cloth::GetParticle(int)
Cloth::AddParticle(VuVec&, int)
Cloth::FindConstraint(int, int)
Cloth::AddConstraint(int, int, Cloth::CType)
Cloth::CreateBendConstraints()
Cloth::GetLastParticle()
Cloth::AddConstraint(Cloth::Particle*, Cloth::Particle*, Cloth::CType)
Cloth::SetGravityScale(float)
Cloth::SetDamping(float)
Cloth::IntegrateVelocity(float)
Cloth::IntegratePosition(float)
Cloth::SetShapeVerts()
Cloth::DoSleepTest(float)
Cloth::WakeUp()
Cloth::BuildConstraints(float)
Cloth::SolveConstraints()
Cloth::GetPoints(Array<VuVec>&)
Cloth::SetPoints(Array<VuVec>&)
Cloth::GetPoints(Array<VuVec*>&)
Cloth::SetPoints(Array<VuVec*>&)
Cloth::GetShapeVerts()
Cloth::SetTransform(VuMtx const&)
Cloth::GetMinMax(NuVector3Base&, NuVector3Base&) const
Cloth::SeekCloth(VuMtx&, VuMtx*, float)
Cloth::BlendWithAnim(VuMtx*, nujoint_s const*, int, NuSmartPtr<NuScene, true>, VuMtx const&, float*)
BuildClampTransformMtx(VuMtx const&, VuMtx const&, VuMtx&, float)
Cloth::SetMaxTranslation(float)
Cloth::SetNoCollision(bool)
Cloth::GetNoCollision()
Cloth::Clone() const
Cloth::IsEntitySleeping()
void std::__1::__sort<std::__1::__less<Edge, Edge>&, Edge*>(Edge*, Edge*, std::__1::__less<Edge, Edge>&)
unsigned int std::__1::__sort3<std::__1::__less<Edge, Edge>&, Edge*>(Edge*, Edge*, Edge*, std::__1::__less<Edge, Edge>&)
unsigned int std::__1::__sort5<std::__1::__less<Edge, Edge>&, Edge*>(Edge*, Edge*, Edge*, Edge*, Edge*, std::__1::__less<Edge, Edge>&)
bool std::__1::__insertion_sort_incomplete<std::__1::__less<Edge, Edge>&, Edge*>(Edge*, Edge*, std::__1::__less<Edge, Edge>&)
Water::Water()
Water::Init()
Water::Water(Entity::MotionType)
Water::Water(Geom*)
Water::GetDensity()
Water::Clone() const
Water::Validate()
Water::InitialiseFluidTypes()
Water::FluidType::SetName(char const*)
Water::FluidType::FluidType()
Water::~Water()
CharacterPose::CharacterPose()
CharacterPose::Reset()
CharacterPose::CharacterPose(NuSmartPtr<NuScene, true>, NuTransform const&)
CharacterPose::SetModel(NuSmartPtr<NuScene, true>)
CharacterPose::SetCharacterTransform(NuTransform const&)
CharacterPose::CharacterPose(CharacterPose const&)
CharacterPose::~CharacterPose()
CharacterPose::GetModelSpaceJointMatrices(VuMtx*, bool) const
CharacterPose::SetModelSpaceJointMatrices(VuMtx const*)
CharacterPose::UpdateLocalSpaceTransform(unsigned char)
CharacterPose::InitFromBindPose()
CharacterPose::AccumulateAnim(ani3_animheader_s const&, float, float)
CharacterPose::InitFromAnimBuffer(nuanimbuff_s const&)
CharacterPose::SetModelSpaceJointTransform(unsigned char, NuTransform const&)
CharacterPose::InvalidateChildJointTransforms(unsigned char)
CharacterPose::SetLocalSpaceJointTransform(unsigned char, NuTransform const&)
CharacterPose::UpdateModelSpaceTransform(unsigned char)
CharacterPose::BlendLocalSpaceJoints(CharacterPose const&, char*)
CharacterPose::BlendModelSpaceJoints(CharacterPose const&, char*)
NuVector<NuTransform>::Reserve(unsigned int, bool)
NuVector<NuVector3Base>::Reserve(unsigned int, bool)
Joint::Joint(Entity*, Entity*, bool)
Joint::Joint(Joint*, Entity*, Entity*)
Joint::~Joint()
Joint::~Joint()
Joint::RenderFrame(VuMtx&)
Joint::PlaneSpace(VuVec const&, VuVec&, VuVec&)
Joint::MeasureAxisRotation(VuVec&, VuVec&, VuVec&)
Joint::BuildRotationMatrix(VuMtx&, VuVec const&, VuVec const&)
Joint::MeasureTwist(VuVec const&, VuVec const&, VuVec const&, VuVec const&)
Joint::MeasureTwist(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base const&)
Joint::SetName(char const*)
Joint::GetName()
Joint::StabiliseMasses()
GlueJoint::GlueJoint(RigidBody*, RigidBody*)
GlueJoint::GlueJoint(GlueJoint*, RigidBody*, RigidBody*)
GlueJoint::Clone(Entity*, Entity*)
GlueJoint::SetWorldFrames(VuMtx const&, VuMtx const&)
GlueJoint::GetWorldFrames(NuTransform&, NuTransform&)
GlueJoint::SetLocalFrameA(VuMtx const&)
GlueJoint::SetLocalFrameB(VuMtx const&)
GlueJoint::SetLocalFrames(NuTransform const&, NuTransform const&)
GlueJoint::SetLocalFrames(VuMtx const&, VuMtx const&)
GlueJoint::SetLocalFrames(NUQUAT const&, VuVec const&, NUQUAT const&, VuVec const&)
GlueJoint::SetForceAndTorqe(float, float)
GlueJoint::SetMaxForce(float, float, float)
GlueJoint::SetMaxTorque(float, float, float)
GlueJoint::SetMinForce(float, float, float)
GlueJoint::SetMinTorque(float, float, float)
GlueJoint::SetErrorReductionRate(float, float)
GlueJoint::AddConstraints(ConstraintSolver&)
GlueJoint::GetConstraints(ConstraintSolver&)
GlueJoint::Render()
GlueJoint::~GlueJoint()
GlueJoint::GetType()
BallJoint::BallJoint(RigidBody*, RigidBody*)
BallJoint::BallJoint(BallJoint*, RigidBody*, RigidBody*)
BallJoint::Clone(Entity*, Entity*)
BallJoint::GetConstraints(ConstraintSolver&)
BallJoint::SetWorldPivot(VuVec const&)
BallJoint::SetWorldPivots(VuVec const&, VuVec const&)
BallJoint::SetLocalPivots(VuVec const&, VuVec const&)
BallJoint::Render()
BallJoint::AddConstraints(ConstraintSolver&)
BallJoint::~BallJoint()
RagDollJoint::RagDollJoint(RigidBody*, RigidBody*, VuMtx const&, VuMtx const&)
RagDollJoint::RagDollJoint(RagDollJoint*, Entity*, Entity*)
RagDollJoint::Clone(Entity*, Entity*)
RagDollJoint::GetConstraints(ConstraintSolver&)
RagDollJoint::SetLimits(float*, float*)
RagDollJoint::ComputeLocalSpaceFrames(VuMtx&, VuMtx&)
RagDollJoint::ComputeWorldSpaceFrames(VuMtx&, VuMtx&)
RagDollJoint::Render()
RagDollJoint::MeasureConeError(VuVec const&, VuVec const&, VuVec&)
RagDollJoint::MeasureEllipticConeError(VuMtx const&, VuVec const&, VuVec&)
RagDollJoint::AddConstraints(ConstraintSolver&)
RagDollJoint::~RagDollJoint()
RagDollJoint::GetType()
LimitedHinge::LimitedHinge(RigidBody*, RigidBody*)
LimitedHinge::LimitedHinge(LimitedHinge*, RigidBody*, RigidBody*)
LimitedHinge::Clone(Entity*, Entity*)
LimitedHinge::SetFriction(float)
LimitedHinge::SetTwistState(Joint::AxisState)
LimitedHinge::SetTwistLimits(float, float)
LimitedHinge::SetWorldFrames(VuMtx const&, VuMtx const&)
LimitedHinge::SetLocalFrames(VuMtx const&, VuMtx const&)
LimitedHinge::ComputeWorldSpaceFrames(VuMtx&, VuMtx&)
LimitedHinge::Render()
LimitedHinge::MeasureLimitError(VuVec&, VuVec&, VuVec&, float, float)
LimitedHinge::AddConstraints(ConstraintSolver&)
LimitedHinge::GetConstraints(ConstraintSolver&)
LimitedHinge::~LimitedHinge()
LimitedHinge::GetType()
ContactJoint::ContactJoint(RigidBody*, RigidBody*, float, unsigned int)
ContactJoint::ContactJoint(RigidBody*, RigidBody*, Material const&, ContactPoint const&)
ContactJoint::~ContactJoint()
ContactJoint::~ContactJoint()
ContactJoint::Update(VuVec const&, VuVec const&, float)
ContactJoint::EnableAdvancedOptions()
ContactJoint::SetAsymmetricFriction(VuVec const&, float, float, float, float)
ContactJoint::SetAsymmetricFriction(VuVec const&, float, float)
ContactJoint::SetMassMultipliers(float, float)
ContactJoint::SetInertiaMultipliers(float, float)
ContactJoint::SetSurfaceVelocity(float, float)
ContactJoint::SetConstraintForceMixing(float, float)
ContactJoint::DisableCoulombFriction()
ContactJoint::DisableNormalConstraint()
ContactJoint::SetNormalForceConstraint(bool)
ContactJoint::DisableWarmStarting()
ContactJoint::Clone(Entity*, Entity*)
ContactJoint::Render()
ContactJoint::AddConstraints(ConstraintSolver&)
ContactJoint::GetConstraints(ConstraintSolver&)
ContactJoint::GetType()
ContactJoint::IsTemp()
DistanceJoint::DistanceJoint(RigidBody*, RigidBody*, VuVec const&, VuVec const&)
DistanceJoint::SetMinMaxForce(float, float)
DistanceJoint::DistanceJoint(DistanceJoint*, RigidBody*, RigidBody*)
DistanceJoint::Clone(Entity*, Entity*)
DistanceJoint::ComputeWorldSpaceFrames(VuVec&, VuVec&)
DistanceJoint::Render()
DistanceJoint::GetConstraints(ConstraintSolver&)
DistanceJoint::SetMaxDist(float)
DistanceJoint::AddConstraints(ConstraintSolver&)
DistanceJoint::~DistanceJoint()
DistanceJoint::GetType()
ClothContactJoint::ClothContactJoint(Cloth*, RigidBody*, ContactPoint const&)
ClothContactJoint::~ClothContactJoint()
ClothContactJoint::~ClothContactJoint()
ClothContactJoint::GetBody()
ClothContactJoint::Update(ContactPoint&)
ClothContactJoint::Clone(Entity*, Entity*)
ClothContactJoint::GetType()
ClothContactJoint::Render()
ClothContactJoint::AddConstraints(ConstraintSolver&)
ClothContactJoint::GetConstraints(ConstraintSolver&)
ClothBodyJoint::ClothBodyJoint(Cloth*, RigidBody*)
ClothBodyJoint::ClothBodyJoint(ClothBodyJoint*, Cloth*, RigidBody*)
ClothBodyJoint::SetLocalPivot(int, NuVector3Base const&)
ClothBodyJoint::~ClothBodyJoint()
ClothBodyJoint::~ClothBodyJoint()
ClothBodyJoint::GetType()
ClothBodyJoint::Clone(Entity*, Entity*)
ClothBodyJoint::SetWorldPivot(int, NuVector3Base const&)
ClothBodyJoint::Render()
ClothBodyJoint::AddConstraints(ConstraintSolver&)
ClothBodyJoint::GetConstraints(ConstraintSolver&)
DynoRay::SanityCheck() const
ShapeRay::ShapeRay()
ShapeRay::ShapeRay(Geom*, VuMtx const&, VuVec const&)
ShapeRay::ShapeRay(Geom*, VuMtx const&, VuVec const&, RayFlags)
ShapeRay::GetExtents(VuVec&) const
CastCollector::CastCollector()
CastCollector::Reset()
CastCollector::SetEntity(Entity const*)
CastCollector::PushTransform(VuMtx const&)
CastCollector::PopTransform(VuMtx const&)
CastCollector::PushTranslation(NuVector3Base const&)
CastCollector::PopTranslation(NuVector3Base const&)
CastCollector::SetTransform(VuMtx const&)
CastCollector::GetTofi()
CastCollector::SetLocalHitData(float, Geom const*, VuVec const&, VuVec const&)
AllPointCollector::~AllPointCollector()
AllPointCollector::Reset()
AllPointCollector::~AllPointCollector()
AllPointCollector::SetWorldHitData(float, Geom const*, VuVec const&, VuVec const&)
AllPointCollector::CalculateLastPoint(VuVec&) const
Geom::GetColour(unsigned char)
Geom::~Geom()
Geom::ExpandLocalMinMax(NuVector3Base&, NuVector3Base&) const
Geom::GetMinMax(NuMatrixBase const&, NuVector3Base&, NuVector3Base&, NuVector3Base const&, NuScalarBase const&) const
Geom::GetMinMax(NuMatrixBase const&, NuVector3Base&, NuVector3Base&) const
Geom::Cast(DynoRay const&, CastCollector&) const
Geom::Cast(SphereRay const&, CastCollector&) const
Geom::Cast(ShapeRay const&, CastCollector&) const
Geom::GetDensity() const
Geom::SqrDistance(VuMtx const&, VuVec const&, VuVec&, float) const
Geom::GetVolume() const
Geom::GetLocalInertia(float, Inertia&) const
Geom::Render(VuMtx const&) const
Geom::Render(Geom::TerrExtra, unsigned char)
Geom::AddTetraVolumeAndCom(VuVec const*, VuVec&, float&, float&)
Geom::SetTerrExtraFilter(unsigned short)
Geom::GetGeomsInLocalAabb(Entity*, VuMtx const&, VuVec const&, VuVec const&, CacheGeom&, Geom::TerrExtra) const
Geom::SetTerrExtra(Geom::TerrExtra)
Geom::SetTerrType(unsigned char)
Geom::SetMaterial(char)
Geom::ClearFlag(Geom::GeomFlags)
Geom::SetFlag(Geom::GeomFlags)
Geom::SetFlags(Geom::GeomFlags)
Geom::WorldAabbToLocal(VuMtx const&, VuVec const&, VuVec const&, VuVec&, VuVec&)
Geom::LocalAabbToWorld(VuMtx const&, VuVec const&, VuVec const&, VuVec&, VuVec&)
Geom::Triangulate(VuMtx const&, CacheGeom&) const
Geom::GetIntersections(VuVec*, VuVec const&, Array<ClipEdge>&, short)
Geom::~Geom()
Geom::Get2DPoints(VuMtx const&, Array<VuVec>&)
BoxGeom::BoxGeom()
BoxGeom::BoxGeom(VuVec const&)
BoxGeom::InitBox(VuVec const&)
BoxGeom::SetExtents(VuVec const&)
BoxGeom::SetGhkExtents(NuVector3Base const&)
BoxGeom::GetExtents(VuVec&)
BoxGeom::GetExtents() const
BoxGeom::GetMinMax(NuMatrixBase const&, NuVector3Base&, NuVector3Base&) const
BoxGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
BoxGeom::SqrDistance(VuMtx const&, VuVec const&, VuVec&, float) const
BoxGeom::SqrDistance(VuMtx const&, VuVec const&, VuVec const&, VuVec&)
BoxGeom::ContainsPoint(VuMtx const&, VuVec const&, VuVec const&, VuVec&, float&)
BoxGeom::Render(VuMtx const&) const
BoxGeom::Cast(DynoRay const&, CastCollector&) const
BoxGeom::IntersectsLineSeg(VuMtx const&, VuVec const&, VuVec const&, VuVec const&)
BoxGeom::Clone() const
BoxGeom::GetVolume() const
BoxGeom::GetLocalInertia(float, Inertia&) const
BoxGeom::GetRadius() const
BoxGeom::SupportPoint(NuVector3Base const&, NuVector3Base&, int&) const
BoxGeom::SupportFeature(NuMatrixBase const&, NuVector3Base const&, int, GhkFeature&) const
GhkFeature::Transform(NuMatrixBase const&)
DoQuad(float, VuVec*, int, int, int, int, VuVec&, float&, float&)
BoxGeom::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
BoxGeom::ObbToAbb(VuMtx const&, VuVec const&, VuVec&, VuVec&)
BoxGeom::Triangulate(VuMtx const&, CacheGeom&) const
TriangulateQuad(VuVec*, int, int, int, int, CacheGeom&)
BoxGeom::Get2DPoints(VuMtx const&, Array<VuVec>&)
BoxGeom::~BoxGeom()
SphereGeom::SphereGeom()
SphereGeom::SphereGeom(float)
SphereGeom::InitSphere(float)
SphereGeom::SetRadius(float)
SphereGeom::GetRadius() const
SphereGeom::Inflate(float)
SphereGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
SphereGeom::GetMinMax(NuMatrixBase const&, NuVector3Base&, NuVector3Base&) const
SphereGeom::SqrDistance(VuVec const&, VuVec&, float) const
SphereGeom::GetVolume() const
SphereGeom::GetLocalInertia(float, Inertia&) const
SphereGeom::Render(VuMtx const&) const
SphereGeom::RayCast(VuVec const&, VuVec const&, VuVec const&, float, float&, float&)
SphereGeom::Cast(DynoRay const&, CastCollector&) const
SphereGeom::Cast(SphereRay const&, CastCollector&) const
SphereGeom::Clone() const
SphereGeom::SupportPoint(NuVector3Base const&, NuVector3Base&, int&) const
SphereGeom::SupportFeature(NuMatrixBase const&, NuVector3Base const&, int, GhkFeature&) const
SphereGeom::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
SphereGeom::~SphereGeom()
EllipsoidGeom::EllipsoidGeom()
EllipsoidGeom::EllipsoidGeom(float*)
EllipsoidGeom::Clone() const
EllipsoidGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
EllipsoidGeom::GetMinMax(NuMatrixBase const&, NuVector3Base&, NuVector3Base&) const
EllipsoidGeom::GetVolume() const
EllipsoidGeom::GetLocalInertia(float, Inertia&) const
EllipsoidGeom::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
EllipsoidGeom::Render(VuMtx const&) const
EllipsoidGeom::SupportPoint(NuVector3Base const&, NuVector3Base&, int&) const
EllipsoidGeom::SupportFeature(NuMatrixBase const&, NuVector3Base const&, int, GhkFeature&) const
EllipsoidGeom::~EllipsoidGeom()
ConvexGeom::GetRadius() const
CapsuleGeom::CapsuleGeom()
CapsuleGeom::CapsuleGeom(float, float)
CapsuleGeom::InitCapsule(float, float)
CapsuleGeom::InitCapsule(float, VuVec&, VuVec&)
CapsuleGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
CapsuleGeom::GetMinMax(NuMatrixBase const&, NuVector3Base&, NuVector3Base&) const
CapsuleGeom::SqrDistance(VuMtx const&, VuVec const&, VuVec&, float) const
CapsuleGeom::Clone() const
CapsuleGeom::Render(VuMtx const&) const
CapsuleGeom::GetVolume() const
CapsuleGeom::GetLocalInertia(float, Inertia&) const
CapsuleGeom::SupportPoint(NuVector3Base const&, NuVector3Base&, int&) const
CapsuleGeom::SupportFeature(NuMatrixBase const&, NuVector3Base const&, int, GhkFeature&) const
CapsuleGeom::RayCastCap(bool, DynoRay const&, FirstPointCollector&) const
CapsuleGeom::RayCast(DynoRay const&, FirstPointCollector&) const
CapsuleGeom::SphereCast(SphereRay const&, FirstPointCollector&) const
CapsuleGeom::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
CapsuleGeom::~CapsuleGeom()
CapsuleGeom::GetRadius() const
CylinderGeom::CylinderGeom(float, float)
CylinderGeom::InitBaseVerexes()
CylinderGeom::Clone() const
CylinderGeom::Render(VuMtx const&) const
CylinderGeom::GetVolume() const
CylinderGeom::GetLocalInertia(float, Inertia&) const
CylinderGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
CylinderGeom::GetMinMax(NuMatrixBase const&, NuVector3Base&, NuVector3Base&) const
CylinderGeom::SupportPoint(NuVector3Base const&, NuVector3Base&, int&) const
CylinderGeom::SupportFeature(NuMatrixBase const&, NuVector3Base const&, int, GhkFeature&) const
CylinderGeom::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
CylinderGeom::SqrDistance(NuScalarBase const&, NuScalarBase const&, NuMatrixBase const&, NuVector3Base const&, NuVector3Base&)
CylinderGeom::SqrDistance(float, float, VuMtx const&, VuVec const&, VuVec&)
CylinderGeom::~CylinderGeom()
CompoundGeom::CompoundGeom(int)
CompoundGeom::CompoundGeom(CompoundGeom const*)
CompoundGeom::AddChild(Geom*)
CompoundGeom::~CompoundGeom()
CompoundGeom::~CompoundGeom()
CompoundGeom::BuildTree()
CompoundGeom::ReSize(int)
CompoundGeom::RemoveChild(Geom*)
CompoundGeom::GetChild(int) const
CompoundGeom::GetChildren(Array<unsigned long>&, Array<Geom*>&) const
CompoundGeom::Render(VuMtx const&) const
CompoundGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
CompoundGeom::Clone() const
CompoundGeom::GetVolume() const
CompoundGeom::GetLocalInertia(float, Inertia&) const
CompoundGeom::Triangulate(VuMtx const&, CacheGeom&) const
CompoundGeom::SqrDistance(VuMtx const&, VuVec const&, VuVec&, float) const
CompoundGeom::GetChildGeom(int) const
CompoundGeom::GetChildrenInAabb(VuVec const&, VuVec const&, Array<unsigned long>&, Geom::TerrExtra) const
CompoundGeom::Cast(DynoRay const&, CastCollector&) const
CompoundGeom::Cast(SphereRay const&, CastCollector&) const
CompoundGeom::Cast(ShapeRay const&, CastCollector&) const
CompoundGeom::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
CompoundGeom::ClearFlag(Geom::GeomFlags)
CompoundGeom::SetFlag(Geom::GeomFlags)
CompoundGeom::SetFlags(Geom::GeomFlags)
CompoundGeom::SetTerrExtraFilter(unsigned short)
CompoundGeom::SetTerrType(unsigned char)
CompoundGeom::Get2DPoints(VuMtx const&, Array<VuVec>&)
ComplexGeom::GetGeomsInLocalAabb(Entity*, VuMtx const&, VuVec const&, VuVec const&, CacheGeom&, Geom::TerrExtra) const
CompoundGeomRayCast<DynoRay>::HitProxy(Entity*)
CompoundGeomRayCast<DynoRay>::ResetTofi()
CompoundGeomRayCast<DynoRay>::GetTofi()
CompoundGeomRayCast<SphereRay>::HitProxy(Entity*)
CompoundGeomRayCast<SphereRay>::ResetTofi()
CompoundGeomRayCast<SphereRay>::GetTofi()
CompoundGeomRayCast<ShapeRay>::HitProxy(Entity*)
CompoundGeomRayCast<ShapeRay>::ResetTofi()
CompoundGeomRayCast<ShapeRay>::GetTofi()
ConvexGeom::GetGeomsInLocalAabb(Entity*, VuMtx const&, VuVec const&, VuVec const&, CacheGeom&, Geom::TerrExtra) const
ConvexGeom::SqrDistance(VuMtx const&, VuVec const&, VuVec&, float) const
ConvexGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
ConvexGeom::Cast(DynoRay const&, CastCollector&) const
ConvexGeom::Cast(SphereRay const&, CastCollector&) const
ConvexGeom::Cast(DynoRay const&, CastCollector&, bool) const
ConvexGeom::~ConvexGeom()
TriangleGeom::Clone() const
TriangleGeom::SupportPoint(NuVector3Base const&, NuVector3Base&, int&) const
TriangleGeom::InverseTransform(VuMtx&)
TriangleGeom::Render(VuMtx const&) const
TriangleGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
TriangleGeom::SqrDistance(VuVec const&, VuVec&, float) const
TriangleGeom::VeroniRegion(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base&, NuVector3Base&)
TriangleGeom::Cast(DynoRay const&, CastCollector&) const
TriangleGeom::RayCast(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base&, NuVector3Base const&, NuVector3Base const&, NuScalarBase&, bool)
TriangleGeom::Cast(ShapeRay const&, CastCollector&) const
TriangleGeom::Cast(SphereRay const&, CastCollector&) const
TriangleGeom::SupportFeature(NuMatrixBase const&, NuVector3Base const&, int, GhkFeature&) const
TriangleGeom::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
TriangleGeom::GetCob(float, VuVec const&, VuVec const&, VuVec const&, VuVec&, float&, float&)
TriangleGeom::FindSharedEdge(VuVec const*, VuVec const*, int&, int&)
TriangleGeom::AddTetra2Submerged(float, VuVec const&, VuVec const&, VuVec const&, VuVec&, float&, float&)
TriangleGeom::AddTetra1Submerged(float, VuVec const&, VuVec const&, VuVec const&, VuVec&, float&, float&)
TriangleGeom::CalculateSurfaceArea() const
TriangleGeom::Weld(NuMatrixBase const&, VuVec&, float, bool) const
TriangleGeom::GetIntersections(VuVec*, VuVec const&, Array<ClipEdge>&, short)
TriangleGeom::~TriangleGeom()
TriangleGeom::GetVolume() const
TriangleGeom::GetLocalInertia(float, Inertia&) const
TriangleGeom::GetRadius() const
TransformGeom::TransformGeom(Geom*)
TransformGeom::~TransformGeom()
TransformGeom::~TransformGeom()
TransformGeom::SetTerrExtra(Geom::TerrExtra)
TransformGeom::SetTerrType(unsigned char)
TransformGeom::SetMaterial(char)
TransformGeom::Clone() const
TransformGeom::Render(VuMtx const&) const
TransformGeom::SetLocalTransform(VuMtx&, bool)
TransformGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
TransformGeom::GetMinMax(NuMatrixBase const&, NuVector3Base&, NuVector3Base&) const
TransformGeom::GetTransform()
TransformGeom::GetRadius() const
TransformGeom::SupportPoint(NuVector3Base const&, NuVector3Base&, int&) const
TransformGeom::SupportFeature(NuMatrixBase const&, NuVector3Base const&, int, GhkFeature&) const
TransformGeom::Cast(DynoRay const&, CastCollector&) const
TransformGeom::Cast(SphereRay const&, CastCollector&) const
TransformGeom::Cast(ShapeRay const&, CastCollector&) const
TransformGeom::SqrDistance(VuMtx const&, VuVec const&, VuVec&, float) const
TransformGeom::GetVolume() const
TransformGeom::GetLocalInertia(float, Inertia&) const
TransformGeom::GetGeomsInLocalAabb(Entity*, VuMtx const&, VuVec const&, VuVec const&, CacheGeom&, Geom::TerrExtra) const
TransformGeom::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
TransformGeom::ClearFlag(Geom::GeomFlags)
TransformGeom::SetFlag(Geom::GeomFlags)
TransformGeom::SetFlags(Geom::GeomFlags)
TransformGeom::SetTerrExtraFilter(unsigned short)
TransformGeom::Triangulate(VuMtx const&, CacheGeom&) const
TransformGeom::Get2DPoints(VuMtx const&, Array<VuVec>&)
TransformGeom::GetChildrenInAabb(VuVec const&, VuVec const&, Array<unsigned long>&, Geom::TerrExtra) const
TransformGeom::GetChildGeom(int) const
TranslateGeom::TranslateGeom(Geom*)
TranslateGeom::~TranslateGeom()
TranslateGeom::~TranslateGeom()
TranslateGeom::SetTerrExtra(Geom::TerrExtra)
TranslateGeom::SetTerrType(unsigned char)
TranslateGeom::SetMaterial(char)
TranslateGeom::Clone() const
TranslateGeom::Render(VuMtx const&) const
TranslateGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
TranslateGeom::GetMinMax(NuMatrixBase const&, NuVector3Base&, NuVector3Base&) const
TranslateGeom::GetOffset(VuVec&)
TranslateGeom::GetRadius() const
TranslateGeom::SupportPoint(NuVector3Base const&, NuVector3Base&, int&) const
TranslateGeom::SupportFeature(NuMatrixBase const&, NuVector3Base const&, int, GhkFeature&) const
TranslateGeom::Cast(DynoRay const&, CastCollector&) const
TranslateGeom::Cast(SphereRay const&, CastCollector&) const
TranslateGeom::Cast(ShapeRay const&, CastCollector&) const
TranslateGeom::SqrDistance(VuMtx const&, VuVec const&, VuVec&, float) const
TranslateGeom::GetVolume() const
TranslateGeom::GetLocalInertia(float, Inertia&) const
TranslateGeom::GetGeomsInLocalAabb(Entity*, VuMtx const&, VuVec const&, VuVec const&, CacheGeom&, Geom::TerrExtra) const
TranslateGeom::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
TranslateGeom::ClearFlag(Geom::GeomFlags)
TranslateGeom::SetFlag(Geom::GeomFlags)
TranslateGeom::SetFlags(Geom::GeomFlags)
TranslateGeom::SetTerrExtraFilter(unsigned short)
TranslateGeom::Triangulate(VuMtx const&, CacheGeom&) const
TranslateGeom::Get2DPoints(VuMtx const&, Array<VuVec>&)
TranslateGeom::GetChildrenInAabb(VuVec const&, VuVec const&, Array<unsigned long>&, Geom::TerrExtra) const
TranslateGeom::GetChildGeom(int) const
SplineGeom::SplineGeom()
SplineGeom::SplineGeom(int, VuVec*, bool)
SplineGeom::AddPoint(VuVec const&)
SplineGeom::CalculateMinMax()
SplineGeom::SplineGeom(PinnerSpline&)
SplineGeom::~SplineGeom()
SplineGeom::~SplineGeom()
SplineGeom::GetVolume() const
SplineGeom::DetectClosedState() const
SplineGeom::GetNumSides() const
SplineGeom::SetWinding(bool, bool, VuVec const&)
SplineGeom::DetectClockwiseWound(bool&, bool, VuVec const&) const
SplineGeom::ReverseWinding()
SplineGeom::GetWindingNumber(VuVec const&, VuVec const&) const
SplineGeom::SetTransform(VuMtx const&)
SplineGeom::GetPoints(Array<VuVec*>&)
SplineGeom::GetPoints(VuVec*) const
SplineGeom::SetPoints(Array<VuVec*>&)
SplineGeom::CopyPoint(VuVec const&)
SplineGeom::GetNearestPoint(VuVec&)
SplineGeom::Render(VuMtx const&) const
SplineGeom::GetTriangles(int, VuVec*, VuVec*, TriangleGeom*) const
SplineGeom::GetCapsule(VuVec*, VuVec*, CapsuleGeom*) const
SplineGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
SplineGeom::GetGeomsInAabb(VuVec const&, VuVec const&, CacheGeom&, Geom::TerrExtra) const
SplineGeom::Clone() const
SplineGeom::GetChildrenInAabb(VuVec const&, VuVec const&, Array<unsigned long>&, Geom::TerrExtra) const
ComplexGeom::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
SplineGeom::GetChildGeom(int) const
DynamicMesh::DynamicMesh(PinnerMesh&)
DynamicMesh::~DynamicMesh()
DynamicMesh::~DynamicMesh()
DynamicMesh::SetTransform(VuMtx const&)
DynamicMesh::Render(VuMtx const&) const
DynamicMesh::GetVertexNormals(VuVec*)
DynamicMesh::Clone() const
DynamicMesh::UpdatePoint(int, VuVec&)
DynamicMesh::Scale(float*)
DynamicMesh::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
DynamicMesh::Cast(DynoRay const&, CastCollector&) const
DynamicMesh::Cast(SphereRay const&, CastCollector&) const
DynamicMesh::GetChildrenInAabb(VuVec const&, VuVec const&, Array<unsigned long>&, Geom::TerrExtra) const
DynamicMesh::GetChildGeom(int) const
CacheNode::~CacheNode()
CacheGeom::CacheGeom()
CacheGeom::~CacheGeom()
CacheGeom::Reset()
CacheGeom::AddEntity(Entity*)
CacheGeom::AddNode(VuMtx const&, Geom*, Entity*)
CacheGeom::AddNode(VuMtx const&, Geom*, Entity*, NuVector3Base const&, NuVector3Base const&)
CacheGeom::AddGeom(VuMtx const&, Geom*, Entity*, VuVec const&, VuVec const&, Geom::TerrExtra)
CacheGeom::RemoveEntity(Entity*)
CacheGeom::RemoveNode(CacheNode*)
CacheGeom::AddEntity(Entity*, VuVec const&, VuVec const&, Geom::TerrExtra)
CacheGeom::RemoveAllEntities(Entity::EntityType)
CacheGeom::RemoveLayerEntities(int)
CacheGeom::Render()
CacheGeom::Cast(DynoRay const&, CastCollector&)
CacheGeom::Cast(SphereRay const&, CastCollector&)
CacheGeom::Cast(ShapeRay const&, CastCollector&)
CacheGeom::Transfer(CacheGeom&, CacheGeom&)
CacheGeom::Contains(Geom*)
CacheGeom::Contains(Entity*)
GhkDistanceSqr(NuMatrixBase const&, ConvexGeom const&, ConvexGeom const&, GhkSimplex&, NuScalarBase const&)
GhkSqrDistanceFromPoint(NuVector3Base const&, NuMatrixBase const&, ConvexGeom const&, GhkSimplex&, float)
GhkRayCast(VuMtx const&, ConvexGeom const&, VuVec const&, VuVec const&, VuVec&, float&, float)
GhkSimplex::GetSimplex2(VuVec*, VuVec*, VuVec*)
GhkSimplex::GetClosestPoints(NuVector3Base&, NuVector3Base&)
GhkSimplex::CreatePoint(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, int, int)
GhkSimplex::CreateLineSeg(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, int, int)
GhkSimplex::CreateTriangle(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, int, int)
GhkSimplex::CreateTetrahedron(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, int, int)
GhkExpandingPolytope::GhkExpandingPolytope()
GhkExpandingPolytope::ExpandEdge(NuMatrixBase const&, ConvexGeom const&, ConvexGeom const&, int&, int&)
GhkExpandingPolytope::originInTetrahedron(VuVec const&, VuVec const&, VuVec const&, VuVec const&)
GhkExpandingPolytope::ExpandTri(NuMatrixBase const&, ConvexGeom const&, ConvexGeom const&, int&, int&)
GhkExpandingPolytope::SimplexPenDepth(NuMatrixBase const&, ConvexGeom const&, ConvexGeom const&, GhkSimplex&, VuVec&, VuVec&, VuVec&)
GhkFacet::ComputeClosestPoint(VuVec*)
GhkFacet::Silhouette(int, VuVec&, StackArray<GhkEdge, 30>&)
DynoMemory::GetScratchPadNumElements(unsigned long)
Inertia::Inertia()
Inertia::GetCentreOfMass(VuVec&)
Inertia::GetCentreOfMass(NuVector3Base&)
Inertia::SetCentreOfMass(VuVec const&)
Inertia::GetMass()
Inertia::SetMass(float)
Inertia::AdjustMass(float)
Inertia::Add(Inertia&)
Inertia::Translate(VuVec&)
Inertia::Rotate(VuMtx&)
Inertia::Transform(VuMtx&)
Inertia::Transform(VuMtx*)
Inertia::GetTensor(VuMtx&)
Inertia::SetTensor(VuMtx&)
Inertia::ComputeInverse(VuMtx&)
Inertia::ScaleDiagonal(float, float, float)
Inertia::SetSphereInertia(float, float)
Inertia::SetEllipsoidInertia(float, VuVec const&)
Inertia::SetBoxInertia(float, VuVec const&)
ClosestPoints(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float&, float&)
SphereCastAABB(VuVec&, VuVec&, VuVec&, VuVec&, float)
SphereCastTri(VuVec&, VuVec&, VuVec&, VuVec&, VuVec&, float)
RayCastSphere(VuVec const&, VuVec const&, VuVec const&, float)
RayCastCylinder(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float)
RayCastCapsule(VuVec&, VuVec&, VuVec&, VuVec&, float)
ClosestPointsLineLine(VuVec&, VuVec&, VuVec&, VuVec&, VuVec&, VuVec&)
SqrDistanceLineLine(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float&, float&)
SqrDistanceLineLine2(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float&, float&)
ClosestPointOnTri(VuVec const&, VuVec const&, VuVec const&, VuVec const&, VuVec&)
RayCastTri(VuVec const&, VuVec const&, VuVec const&, VuVec const&, VuVec const&, VuVec&, bool)
VuRayCastAABB(NuVector3Base const&, NuVector3Base const&, NuVector3Base const&, NuVector3Base const&)
RayCastAABB(VuVec const&, VuVec const&, VuVec const&, VuVec const&, float)
ClosestPointOnLine(VuVec const&, VuVec const&, VuVec const&, VuVec&)
LineClosestApproach(VuVec&, VuVec&, VuVec&, VuVec&, VuVec&, VuVec&)
ClosestPoint(VuVec&, VuVec&, VuVec&, VuVec&, VuVec&, VuVec&)
ClosestPointRayRay(VuVec&, VuVec&, VuVec&, VuVec&, VuVec&, VuVec&)
ClosestPointEllipse2D(float const*, VuVec const&, VuVec&, VuVec&)
ConvexHull2D::simpleHull_2D(VuVec*, int, VuVec*)
ConvexHull2D::chainHull_2D(VuVec*, int, VuVec*)
ConvexHull2D::Generate(Array<VuVec>&, Array<VuVec>&)
ConvexHull2D::TakeAverageY(Array<VuVec>&)
void std::__1::__sort<std::__1::__less<HullPoint, HullPoint>&, HullPoint*>(HullPoint*, HullPoint*, std::__1::__less<HullPoint, HullPoint>&)
unsigned int std::__1::__sort3<std::__1::__less<HullPoint, HullPoint>&, HullPoint*>(HullPoint*, HullPoint*, HullPoint*, std::__1::__less<HullPoint, HullPoint>&)
unsigned int std::__1::__sort4<std::__1::__less<HullPoint, HullPoint>&, HullPoint*>(HullPoint*, HullPoint*, HullPoint*, HullPoint*, std::__1::__less<HullPoint, HullPoint>&)
unsigned int std::__1::__sort5<std::__1::__less<HullPoint, HullPoint>&, HullPoint*>(HullPoint*, HullPoint*, HullPoint*, HullPoint*, HullPoint*, std::__1::__less<HullPoint, HullPoint>&)
void std::__1::__insertion_sort_3<std::__1::__less<HullPoint, HullPoint>&, HullPoint*>(HullPoint*, HullPoint*, std::__1::__less<HullPoint, HullPoint>&)
bool std::__1::__insertion_sort_incomplete<std::__1::__less<HullPoint, HullPoint>&, HullPoint*>(HullPoint*, HullPoint*, std::__1::__less<HullPoint, HullPoint>&)
PinnerDynamics::PinnerDynamics()
PinnerDynamics::Reset()
PinnerDynamics::AddString(char const*, char const*)
FileOpen(char const*)
PinnerDynamics::PinnerDynamics(char const*)
PinnerDynamics::Serialise(NuSerialize&)
PinnerDynamics::~PinnerDynamics()
PinnerDynamics::IsEmpty()
ExportArray<PinnerString>::Serialise(NuSerialize&)
ExportArray<PinnerMatrix>::Serialise(NuSerialize&)
ExportArray<PinnerEntity>::Serialise(NuSerialize&)
ExportArray<PinnerMesh>::Serialise(NuSerialize&)
ExportArray<PinnerJoint>::Serialise(NuSerialize&)
ExportArray<PinnerGeom>::Serialise(NuSerialize&)
ExportArray<PinnerSpline>::Serialise(NuSerialize&)
ExportArray<PinnerController>::Serialise(NuSerialize&)
ExportArray<PinnerTileMap>::Serialise(NuSerialize&)
ExportArray<PinnerConvexMesh>::Serialise(NuSerialize&)
ExportArray<KdTerrainDescriptor>::Serialise(NuSerialize&)
PinnerDynamics::LoadDynoFile(char const*)
PinnerDynamics::LoadFromMem(void const*, nuvariptr_u*)
ExportArray<PinnerString>::Resize(int)
PinnerEntity::PinnerEntity()
PinnerEntity::~PinnerEntity()
PinnerEntity::SetStatic()
PinnerEntity::Serialise(NuSerialize&)
PinnerEntity::ConvertPlatformMask(int)
PinnerGeom::PinnerGeom()
PinnerGeom::Serialise(NuSerialize&)
PinnerJoint::PinnerJoint()
PinnerJoint::Serialise(NuSerialize&)
PinnerMatrix::Serialise(NuSerialize&)
PinnerMesh::PinnerMesh()
PinnerMesh::PinnerMesh(char const*)
PinnerMesh::~PinnerMesh()
PinnerMesh::Polygon::Serialize(NuSerialize&)
PinnerMesh::Serialise(NuSerialize&)
PinnerSpline::PinnerSpline()
PinnerSpline::~PinnerSpline()
PinnerSpline::Serialise(NuSerialize&)
PinnerString::PinnerString()
PinnerString::PinnerString(PinnerString const&)
PinnerString::SetText(char const*)
PinnerString::PinnerString(char const*)
PinnerString::~PinnerString()
PinnerString::Serialise(NuSerialize&)
PinnerTileMap::PinnerTileMap()
PinnerTileMap::~PinnerTileMap()
PinnerTileMap::Serialise(NuSerialize&)
DynoImporter::DynoImporter(PinnerDynamics*, bool)
DynoImporter::~DynoImporter()
DynoImporter::PlatformAllowed(PinnerEntity&)
DynoImporter::Reset()
DynoImporter::CreateShape(PinnerGeom&)
DynoImporter::CreateBodyShapes(int, Geom**)
DynoImporter::CreateJoint(PinnerJoint&, Entity*, Entity*)
DynoImporter::GetEntityName(int)
DynoImporter::GetBodyIndex(char const*)
DynoImporter::GetControllerName(int)
DynoImporter::CreateBody(char const*)
DynoImporter::CreateEntity(int)
DynoImporter::CreateWater(char const*)
DynoImporter::CreateController(int, bool)
DynoImporter::CreateController(char const*, bool)
DynoImporter::CreateAllBodies()
DynoImporter::CreateAllControllers()
DynoImporter::AddToScene(DynoScene*)
DynoImporter::GetEntityNameList(EntityTypes, char const**, int&)
DynoImporter::GetControllerNameList(char const**, int&)
Constraint3::InitBJ(Cloth::Particle*, RigidBody*, VuVec*)
Constraint3::UpdateBj(RigidBody*, VuVec&, int)
Constraint3::Init(Cloth::Particle**, VuVec&, VuVec&, float, RigidBody*)
Constraint3::Init(VuVec const&, Cloth::Particle*, Cloth::Particle*, Cloth::Particle*)
Vehicle::Vehicle()
Vehicle::~Vehicle()
Vehicle::~Vehicle()
Vehicle::GetNumEntities()
Vehicle::GetType()
Vehicle::AddJoint(Joint*)
Vehicle::GetJoint(int)
Vehicle::GetNumJoints()
Vehicle::AddEntity(Entity*)
Vehicle::AddToScene(DynoScene*)
Vehicle::RemoveFromScene(DynoScene*)
Vehicle::Evolve(DynoScene*, float)
Vehicle::GetName()
Vehicle::GetEntity(int)
Vehicle::GetTransform(VuMtx&)
Vehicle::SetTransform(VuMtx const&)
WheelJoint::WheelJoint(RigidBody*, RigidBody*)
WheelJoint::Clone(Entity*, Entity*)
WheelJoint::SetWorldFrames(VuMtx const&, VuMtx const&)
WheelJoint::SetLocalFrames(VuMtx const&, VuMtx const&)
WheelJoint::ComputeWorldSpaceFrames(VuMtx&, VuMtx&)
WheelJoint::TuneCfmSuspension(float, float, float)
WheelJoint::TuneSpringDamper(float, float, float, float)
WheelJoint::SetMaxMotorTorque(float)
WheelJoint::SetWheelVelocity(float)
WheelJoint::SetSteeringAngle(float)
WheelJoint::Render()
WheelJoint::GetConstraints(ConstraintSolver&)
WheelJoint::AddConstraints(ConstraintSolver&)
WheelJoint::~WheelJoint()
WheelJoint::GetType()
KdTerrain::KdTerrain(KdTerrainDescriptor*, float)
KdTerrain::CalculateMinMax()
KdTerrain::~KdTerrain()
KdTerrain::~KdTerrain()
KdTerrain::SetScale(VuVec&)
KdTerrain::GetScale(VuVec&)
KdTerrain::Clone() const
KdTerrain::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
KdTerrain::RenderTriangle(VuMtx&, int, char)
KdTerrain::Triangulate(VuMtx const&, CacheGeom&) const
KdTerrain::GetTriangle(int, int, TriangleGeom&) const
KdTerrain::SqrDistance(VuMtx const&, VuVec const&, VuVec&, float) const
KdTerrain::GetQuadsInAabb(VuVec const&, VuVec const&, Array<unsigned long>&, Geom::TerrExtra) const
KdTerrain::GetChildrenInAabb(VuVec const&, VuVec const&, Array<unsigned long>&, Geom::TerrExtra) const
KdTerrain::GetChildren(Array<unsigned long>&, Array<Geom*>&) const
KdTerrain::GetChildGeom(int) const
KdTerrain::Cast(DynoRay const&, CastCollector&) const
bool KdTerrain::Cast<DynoRay>(DynoRay const&, VuVec const&, VuVec const&, CastCollector&) const
KdTerrain::Cast(SphereRay const&, CastCollector&) const
bool KdTerrain::Cast<SphereRay>(SphereRay const&, VuVec const&, VuVec const&, CastCollector&) const
KdTerrain::Cast(ShapeRay const&, CastCollector&) const
bool KdTerrain::Cast<ShapeRay>(ShapeRay const&, VuVec const&, VuVec const&, CastCollector&) const
RenderMyTri(VuVec&, VuVec&, VuVec&, int)
GetDensityColour(float)
KdTerrain::Render(VuMtx const&) const
KdTerrain::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
KdTerrain::GetVolume() const
KdTerrain::GetLocalInertia(float, Inertia&) const
KdTerrain::GetTriangleVerts(int, int, int*) const
KdTerrain::GetTriangle(int, TriangleGeom&) const
KdTerrain::RenderEdgeNorms(VuMtx const&) const
KdTerrain::GetIntersections(VuVec*, VuVec const&, Array<ClipEdge>&, short)
KdTerrain::GetContours(VuMtx const&, Array<SplineGeom*>&, Geom::TerrExtra) const
KdTerrain::GetWalkableContours(VuMtx const&, Array<SplineGeom*>&, Geom::TerrExtra, float) const
KdTerrain::SetTerrTypeToCollect(unsigned char)
KdTerrain::ClearTerrTypeToCollect()
ConvexMesh::~ConvexMesh()
ConvexMesh::~ConvexMesh()
ConvexMesh::ConvexMesh()
ConvexMesh::ConvexMesh(PinnerConvexMesh*)
ConvexMesh::CalculateExtents()
ConvexMesh::Validate()
ConvexMesh::SetScale(VuVec&)
ConvexMesh::GetScale(VuVec&)
ConvexMesh::ComputeSurfaceArea()
ConvexMesh::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
ConvexMesh::Triangulate(VuMtx const&, CacheGeom&) const
ConvexMesh::OldRender() const
ConvexMesh::Render(VuMtx const&) const
ConvexMesh::Cast(DynoRay const&, CastCollector&) const
ConvexMesh::SupportPoint(NuVector3Base const&, NuVector3Base&, int&) const
ConvexMesh::SupportFeature(NuMatrixBase const&, NuVector3Base const&, int, GhkFeature&) const
ConvexMesh::Clone() const
ConvexMesh::GetVolume() const
ConvexMesh::SetMassWeightedCovariance(VuMtx*)
ConvexMesh::GetCentreOfMass(VuVec&) const
ConvexMesh::GetLocalInertia(float, Inertia&) const
ConvexMesh::GetCentreOfBuoyancy(VuMtx const&, float, VuVec&, float&, float&)
ConvexMesh::ComputeNormals(PinnerConvexMesh*, nuvariptr_u*)
ConvexMesh::Get2DPoints(VuMtx const&, Array<VuVec>&)
TileMapGeom::TileMapGeom()
TileMapGeom::TileMapGeom(PinnerTileMap&)
TileMapGeom::CalculateMinMax()
TileMapGeom::~TileMapGeom()
TileMapGeom::~TileMapGeom()
TileMapGeom::CreateMap(float, float, int, int)
TileMapGeom::GetTile(int, int) const
TileMapGeom::SetTile(int, int, TileMapGeom::Tile&)
TileMapGeom::CreateRandomMap(float, float, int, int, float, float)
TileMapGeom::GetTileIx(int, int) const
TileMapGeom::GetTileCoords(int, int&, int&) const
TileMapGeom::GetTileVerts(int, int, VuVec&, VuVec&, VuVec&, VuVec&) const
TileMapGeom::Clone() const
TileMapGeom::Render(VuMtx const&) const
TileMapGeom::GetLocalMinMax(NuVector3Base&, NuVector3Base&) const
TileMapGeom::CreateTriangle(VuVec const&, VuVec const&, VuVec const&, int, Array<Geom*>&) const
TileMapGeom::HashAabb(VuVec const&, VuVec const&, int&, int&, int&, int&) const
TileMapGeom::GetTileAabb(int, int, VuVec&, VuVec&) const
TileMapGeom::GetChildrenInAabb(VuVec const&, VuVec const&, Array<unsigned long>&, Geom::TerrExtra) const
TileMapGeom::GetChildren(Array<unsigned long>&, Array<Geom*>&) const
TileMapGeom::GetTileTris(int, Array<Geom*>&) const
TileMapGeom::CalculateWeldInfo(Array<Geom*>&) const
TileMapGeom::GetEdgeTris(VuVec&, VuVec&, VuVec&, VuVec&, int, int, Array<Geom*>&) const
TileMapGeom::GetTileDimensions(short&, short&) const
TileMapGeom::Cast(DynoRay const&, CastCollector&) const
TileMapGeom::Cast(SphereRay const&, CastCollector&) const
KdTerrainNode::Serialize(NuSerialize&)
KdTerrainVec::Serialize(NuSerialize&)
KdTerrainWeldInfo::Serialize(NuSerialize&)
KdTerrainQuad::Serialize(NuSerialize&)
KdTerrainBucket::Serialize(NuSerialize&)
KdTerrainKdMaterial::Serialize(NuSerialize&)
KdTerrainDescriptor::~KdTerrainDescriptor()
KdTerrainDescriptor::Serialise(NuSerialize&)
PinnerController::PinnerController()
PinnerController::Serialise(NuSerialize&)
PinnerConvexMesh::PinnerConvexMesh()
PinnerConvexMesh::~PinnerConvexMesh()
PinnerConvexMesh::ConvexVert::Serialize(NuSerialize&)
PinnerConvexMesh::Serialise(NuSerialize&)
PinnerConvexMesh::dynoPolygon::Serialize(NuSerialize&)
EnumAndString::FindNameFromId(int)
EnumAndString::FindNameFromId(EnumAndString*, int)
EnumAndString::CalcHashedKeys(EnumAndString*)
EnumAndString::FindId(EnumAndString*, char const*)
EnumAndString::FindId(EnumAndString*, HashedKey&)
MechCharacterCutOuts::GetGroup(HashedKey&)
MechCharacterCutOutGroup::MechCharacterCutOutGroup(char const*, eCutOuts*)
MechCharacterCutOutGroup::~MechCharacterCutOutGroup()
MechCharacterCutOutGroup::SetObjCutOuts(MechCharacterCutOuts&)
MechCharacterCutOutGroup::SetObjCutOuts(MechCharacter&)
CSListHeader<MechCharacterCutOutGroup>::~CSListHeader()
nn::init::InitializeAllocator(void*, unsigned long)
nn::init::GetAllocator()
nn::init::detail::DefaultAllocatorForThreadLocal(unsigned long, unsigned long)
nn::init::detail::DefaultDeallocatorForThreadLocal(void*, unsigned long)
malloc
free
calloc
realloc
aligned_alloc
malloc_usable_size
__nnDetailNintendoSdkRuntimeObjectFile
__nnDetailInitLibc0
__nnDetailInitLibc1
__nnDetailInitLibc2
__nnDetailNintendoSdkNsoFileRefer
nninitInitializeSdkModule
nninitFinalizeSdkModule
nn::gfx::DeviceInfo::SetDefault()
nn::gfx::MemoryPoolInfo::SetDefault()
nn::gfx::ResShaderFile::GetMaxFileAlignment()
nn::gfx::ResShaderFile::IsValid(void const*)
nn::gfx::ResShaderFile::ResCast(void*)
nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::GetPoolMemoryAlignment(nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*, nn::gfx::MemoryPoolInfo const&)
nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::GetPoolMemorySizeGranularity(nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*, nn::gfx::MemoryPoolInfo const&)
nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::MemoryPoolImpl()
nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::~MemoryPoolImpl()
nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::Initialize(nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*, nn::gfx::MemoryPoolInfo const&)
nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::Finalize(nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*)
nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::Map() const
nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::Unmap() const
nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::FlushMappedRange(long, unsigned long) const
nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::InvalidateMappedRange(long, unsigned long) const
nvnLoadCProcs
nn::gfx::detail::Nvn::GetImageFormat(nn::gfx::ImageFormat)
nn::gfx::detail::Nvn::GetAttributeFormat(nn::gfx::AttributeFormat)
nn::gfx::detail::Nvn::GetImageTarget(nn::gfx::ImageDimension)
nn::gfx::detail::Nvn::GetDepthFunction(nn::gfx::ComparisonFunction)
nn::gfx::detail::Nvn::GetStencilOperation(nn::gfx::StencilOperation)
nn::gfx::detail::Nvn::GetStencilFunction(nn::gfx::ComparisonFunction)
nn::gfx::detail::Nvn::GetBlendEquation(nn::gfx::BlendFunction)
nn::gfx::detail::Nvn::GetBlendFunction(nn::gfx::BlendFactor)
nn::gfx::detail::Nvn::GetLogicOperation(nn::gfx::LogicOperation)
nn::gfx::detail::Nvn::GetFrontFace(nn::gfx::FrontFace)
nn::gfx::detail::Nvn::GetFillMode(nn::gfx::FillMode)
nn::gfx::detail::Nvn::GetDrawPrimitive(nn::gfx::PrimitiveTopology)
nn::gfx::detail::Nvn::GetMinFilter(nn::gfx::FilterMode)
nn::gfx::detail::Nvn::GetMagFilter(nn::gfx::FilterMode)
nn::gfx::detail::Nvn::GetWrapMode(nn::gfx::TextureAddressMode)
nn::gfx::detail::Nvn::GetShaderStage(nn::gfx::ShaderStage)
nn::gfx::detail::Nvn::GetShaderStageBits(int)
nn::gfx::detail::Nvn::GetRComparisonFunction(nn::gfx::ComparisonFunction)
nn::gfx::detail::Nvn::GetIndexFormat(nn::gfx::IndexFormat)
nn::gfx::detail::Nvn::GetCullMode(nn::gfx::CullMode)
nn::gfx::detail::Nvn::GetMemoryPoolFlags(int)
nn::gfx::detail::Nvn::GetBufferAddress(nn::gfx::GpuAddress)
nn::gfx::detail::Nvn::SetupScanBufferTextureInfo(nn::gfx::TextureInfo*, nn::gfx::SwapChainInfo const&)
nn::gfx::detail::Nvn::GetCounterType(nn::gfx::QueryTarget)
nn::gfx::detail::Nvn::GetDeviceFeature(NVNdevice const*)
nn::gfx::detail::Nvn::GetImageFormatProperty(nn::gfx::ImageFormatProperty*, NVNformat)
nn::gfx::detail::Nvn::GetGfxImageFormat(NVNformat)
nn::gfx::detail::Nvn::DebugCallback(NVNdebugCallbackSource, NVNdebugCallbackType, int, NVNdebugCallbackSeverity, char const*, void*)
nn::gfx::detail::GlslcDll::GetInstance()
nn::gfx::detail::GlslcDll::GlslcDll()
nn::gfx::detail::GlslcDll::~GlslcDll()
unsigned long nn::gfx::detail::ResShaderProgramImpl::NvnGetRecommendedScrachMemorySize<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >(nn::gfx::ResShaderProgram const*, nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*)
void nn::gfx::detail::ResShaderContainerImpl::Initialize<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >(nn::gfx::ResShaderContainer*, nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*, nn::gfx::detail::MemoryPoolImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*, long, unsigned long)
void nn::gfx::detail::ResShaderContainerImpl::Finalize<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >(nn::gfx::ResShaderContainer*, nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*)
unsigned long nn::gfx::NvnGetMaxRecommendedScratchMemorySize<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >(nn::gfx::TDevice<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*, nn::gfx::ResShaderFile const* const*, int)
nn::gfx::detail::ShaderImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::GetBinaryCodeAlignment(nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*)
nn::gfx::detail::ShaderImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::ShaderImpl()
nn::gfx::detail::ShaderImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::~ShaderImpl()
nn::gfx::detail::ShaderImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::Initialize(nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*, nn::gfx::ShaderInfo const&)
nn::gfx::detail::ShaderImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::Finalize(nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*)
nn::gfx::detail::ShaderImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::GetInterfaceSlot(nn::gfx::ShaderStage, nn::gfx::ShaderInterfaceType, char const*) const
nn::gfx::detail::ShaderImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::GetWorkGroupSize(int*, int*, int*) const
nn::os::Mutex::~Mutex()
nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::DeviceImpl()
nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::~DeviceImpl()
nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::Initialize(nn::gfx::DeviceInfo const&)
nn::gfx::detail::DeviceImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >::Finalize()
nn::gfx::detail::Nvn::GetFirstScanBufferIndex()
nn::gfx::detail::Nvn::InitializeSwapChainImpl(nn::gfx::detail::SwapChainImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*, void*)
nn::gfx::detail::Nvn::FinalizeSwapChainImpl(nn::gfx::detail::SwapChainImpl<nn::gfx::ApiVariation<nn::gfx::ApiType<4>, nn::gfx::ApiVersion<8> > >*)
nn::gfx::detail::Nvn::ToTimeSpan(long)
nn::gfx::detail::GlslcDll::Initialize()
nn::gfx::detail::GlslcDll::Finalize()
nn::gfx::detail::GlslcDll::IsInitialized() const
nn::gfx::detail::IsThinBinaryAvailable()
nn::gfx::detail::GetGlslcCompilePreSpecializedFunction()
nn::gfx::detail::GetGlslcCompileSpecializedFunction()
nn::gfx::detail::GetGlslcInitializeFunction()
nn::gfx::detail::GetGlslcFinalizeFunction()
nn::gfx::detail::GetGlslcCompileFunction()
nn::gfx::detail::GetGlslcGetVersionFunction()
nn::gfx::detail::GetGlslcSetAllocatorFunction()
nn::gfx::detail::GetGlslcGetDefaultOptionsFunction()
nn::gfx::ShaderInfo::SetDefault()
nn::gfx::ShaderInfo::SetShaderCodePtr(nn::gfx::ShaderStage, void const*)
nn::gfx::ShaderInfo::GetShaderCodePtr(nn::gfx::ShaderStage) const
nn::gfx::detail::UseMiddleWare()
nn::gfx::detail::GetBlockWidth(nn::gfx::ChannelFormat)
nn::gfx::detail::GetBlockHeight(nn::gfx::ChannelFormat)
nn::gfx::detail::IsCompressedFormat(nn::gfx::ChannelFormat)
nn::gfx::detail::IsSrgbFormat(nn::gfx::TypeFormat)
nn::gfx::detail::GetBytePerPixel(nn::gfx::ChannelFormat)
nn::gfx::detail::CalculateImageSize(nn::gfx::ChannelFormat, unsigned int, unsigned int, unsigned int)
nn::gfx::detail::GetChannelCount(nn::gfx::ChannelFormat)
nn::gfx::detail::CalculateRowSize(unsigned int, nn::gfx::ChannelFormat)
nn::gfx::detail::IsValidMemoryPoolProperty(int)
nn::gfx::detail::GetImageDimension(nn::gfx::ImageStorageDimension, bool, bool)
nn::gfx::detail::CheckBinaryTarget(nn::gfx::ResShaderContainerData const&, int, int)
ParseLegoItemType::ParseItem(LegoLevelContainer&, cParseContextItem const&)
LegoItemActions::AddItem(MechCharacter&, LegoItemType&, int)
LegoItemActions::GiveItem(MechCharacter&, GizItem&, int)
LegoItemActions::RemoveItem(MechCharacter*, GizItem*, LegoItemType*, int)
LegoItemActions::GetItemOut(MechCharacter&, LegoInventoryItem*, int)
LegoItemActions::PutAwayItem(MechCharacter&, LegoInventoryItem*, int)
LegoItemActions::HasItem(MechCharacter&, GizItem*, LegoItemType*, int)
LegoItemActions::DropItem(MechCharacter&, LegoInventoryItem&, int, VuVec*, float)
LegoItemActions::PickUpItem(MechCharacter&, GizItem&, int)
LegoItemActions::ThrowItem(MechCharacter&, GizItem&, MechObjectData&, VuVec*, float, float, MechObjectData*, float, int)
LegoItemActions::BringToMainLevel(GizItem&)
cParseContextItem::GetAddOnHandle() const
ScrAction_ScriptActionBase::ScrAction_ScriptActionBase()
ScrAction_ScriptActionBase::~ScrAction_ScriptActionBase()
ScrAction_ScriptActionBase::GetInputs(SCmdParams&) const
ScrAction_ScriptActionBase::GetOutputs(SCmdParams&) const
ScrAction_ScriptActionBase::Exec(ScriptContext&)
ScrAction_ScriptConditionBase::GetOutputs(SCmdParams&) const
ScriptActionFunc::ScriptActionFunc(char const*, EXECSTATE (*)(GameScriptContext&, cParseContextItem&, bool), unsigned int)
ScriptActionFunc::Exec(ScriptContext&)
TempActionCreatorBase::SetActionInfo(char const*, unsigned int, SAction*)
TempActionCreatorBase::Exec(ScriptContext&)
ScrAction_ScriptActionBase::ParseItem(GameScriptContext&, cParseContextItem&)
ScrAction_ScriptActionBase::~ScrAction_ScriptActionBase()
ScrAction_ScriptConditionBase::~ScrAction_ScriptConditionBase()
ScriptActionFunc::~ScriptActionFunc()
ScriptActionFunc::~ScriptActionFunc()
ScriptActionFunc::GetName() const
ScriptActionFunc::GetOutputs(SCmdParams&) const
TempActionCreatorBase::~TempActionCreatorBase()
TempActionCreatorBase::Create() const
ExtendedTargetLegoAddOn::ExtendedTargetLegoAddOn(char const*)
ExtendedTargetLegoAddOn::~ExtendedTargetLegoAddOn()
non-virtual thunk to ExtendedTargetLegoAddOn::~ExtendedTargetLegoAddOn()
ExtendedTargetLegoAddOn::~ExtendedTargetLegoAddOn()
non-virtual thunk to ExtendedTargetLegoAddOn::~ExtendedTargetLegoAddOn()
ExtendedTargetLegoAddOn::ParseItem(GameScriptContext&, cParseContextItem&)
ExtendedTargetLegoAddOn::OnRemoved()
ExtendedTargetLegoAddOn::OnHook(unsigned char, HookArgs*)
non-virtual thunk to ExtendedTargetLegoAddOn::OnHook(unsigned char, HookArgs*)
ScriptAITask::ScriptAITask(char const*)
ScriptAITask::~ScriptAITask()
ScriptAITask::~ScriptAITask()
ScriptAITask::PostParseInit(MechObjectInterface&)
ScriptAITask::Process(Brain&, float const&)
ScriptAITask::ParseSingleItem(LegoLevelContainer&, cParseContextItem&)
ScriptAITask::Update(MechObjectInterface&, float)
ScriptAITaskInstanceBase::ScriptAITaskInstanceBase()
ScriptAITaskInstanceBase::~ScriptAITaskInstanceBase()
ScriptAITaskInstanceBase::ParseSingleItem(LegoLevelContainer&, cParseContextItem&)
ScriptAITaskInstanceBase::PostParseInit(MechObjectInterface&)
ScriptAITaskInstanceBase::IsComplete()
_ZN2nn5audio20SetSubMixDestinationEPNS0_19AudioRendererConfigEPNS0_10SubMixTypeEPNS0_12FinalMixTypeE_0
_ZN2nn3hid12GetNpadStateEPNS0_17NpadHandheldStateERKj_0
_ZN2nn6socket10SetSockOptEiiiPKvj_0
_ZN2nn2vi15GetNativeWindowEPPvPNS0_5LayerE_0
tolower_0
_init_libc2_0
_ZN2nn5audio19SetVoiceDestinationEPNS0_19AudioRendererConfigEPNS0_9VoiceTypeEPNS0_10SubMixTypeE_0
_ZN2nn5audio13CloseAudioOutEPNS0_8AudioOutE_0
_ZN2nn5audio26SetAudioDeviceOutputVolumeEPKNS0_15AudioDeviceNameEf_0
_ZN2nn2os20FinalizeMessageQueueEPNS0_16MessageQueueTypeE_0
_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm_0
_ZN5movie9MediaData5ClearEv_0
strcpy_0
_ZN2nn2os17SetThreadCoreMaskEPNS0_10ThreadTypeEim_0
_ZN2nn6socket5CloseEi_0
_ZN2nn2os12CreateThreadEPNS0_10ThreadTypeEPFvPvES3_S3_mi_0
_ZN2nn3hid12GetNpadStateEPNS0_16NpadFullKeyStateERKj_0
_ZN2nn5audio13AddDeviceSinkEPNS0_19AudioRendererConfigEPNS0_14DeviceSinkTypeEPNS0_12FinalMixTypeEPKaiPKc_0
vsnprintf_0
_ZN2nn2os19LinkMultiWaitHolderEPNS0_13MultiWaitTypeEPNS0_19MultiWaitHolderTypeE_0
_ZN2nn3err20ShowApplicationErrorERKNS0_19ApplicationErrorArgE_0
_ZN2nn2os13GetSystemTickEv_0
_ZN2nn2os17FinalizeSemaphoreEPNS0_13SemaphoreTypeE_0
_ZN2nn3mem17StandardAllocator10InitializeEPvm_0
_ZN5movie37GetH264PropertiresFromSeqParamSetDataEPKhmPiS2_Pd_0
_ZN2nn2oe10InitializeEv_0
_ZN2nn6socket7ConnectEiPK8sockaddrj_0
_ZN2nn5audio21SetAudioOutBufferInfoEPNS0_14AudioOutBufferEPvmm_0
_ZN2nn2oe31EnterExitRequestHandlingSectionEv_0
_ZN2nn2fs9CloseFileENS0_10FileHandleE_0
_ZN2nn7account9GetUserIdEPNS0_3UidERKNS0_10UserHandleE_0
_ZN2nn2fs7UnmountEPKc_0
_init_libc0_0
_ZN2nn4util15RelocationTable8RelocateEv_0
_ZN2nn2os16ReleaseSemaphoreEPNS0_13SemaphoreTypeEi_0
_ZN2nn2fs14EnsureSaveDataERKNS_7account3UidE_0
memcpy_0
_ZN2nn6socket12GetLastErrnoEv_0
_ZN2nn2os15InitializeMutexEPNS0_9MutexTypeEbi_0
_ZN2nn2fs8MountRomEPKcPvm_0
_ZN2nn6detail21UnexpectedDefaultImplEPKcS2_i_0
_ZNK5movie9MediaData10FindStringEPKcPS2__0
_ZN2nn2fs11GetFileSizeEPlNS0_10FileHandleE_0
_ZN2nn5audio17SetVoiceMixVolumeEPNS0_9VoiceTypeEPNS0_10SubMixTypeEfii_0
_ZN2nn6socket4RecvEiPvmi_0
_ZN2nn3mem17StandardAllocator8AllocateEmm_0
_ZN2nn2vi18OpenDefaultDisplayEPPNS0_7DisplayE_0
_ZN2nn5audio16ParseAdpcmHeaderEPNS0_15AdpcmHeaderInfoEPKvm_0
_ZN2nn5audio25GetAudioOutBufferDataSizeEPKNS0_14AudioOutBufferE_0
_ZN2nn2os21UnlinkMultiWaitHolderEPNS0_19MultiWaitHolderTypeE_0
_ZN2nn2fs9WriteFileENS0_10FileHandleElPKvmRKNS0_11WriteOptionE_0
strncpy_0
strcat_0
_ZN2nn4time14ToCalendarTimeEPNS0_12CalendarTimeEPNS0_22CalendarAdditionalInfoERKNS0_9PosixTimeE_0
nvnBootstrapLoader_0
_ZN2nn2os23FinalizeMultiWaitHolderEPNS0_19MultiWaitHolderTypeE_0
snprintf_0
_ZN2nn5audio17AcquireMemoryPoolEPNS0_19AudioRendererConfigEPNS0_14MemoryPoolTypeEPvm_0
_ZN2nn2os16SendMessageQueueEPNS0_16MessageQueueTypeEm_0
_ZN2nn2fs8ReadFileEPmNS0_10FileHandleElPvm_0
_ZN5movie37GetH264NalUnitStartPositionAndNalSizeEPPhPmS1_S2__0
_ZN2nn6socket9InetNtohsEt_0
_ZN2nn2vi10InitializeEv_0
_ZN2nn8settingseqERKNS0_8LanguageERKNS0_12LanguageCodeE_0
_ZN2nn2os11GetHostArgcEv_0
_ZN5movie6Buffer4BaseEv_0
_ZN2nn3hid18StartSixAxisSensorERKNS0_19SixAxisSensorHandleE_0
_ZN5movie12SetAllocatorEPFPvmmS0_EPFvS0_S0_EPFS0_S0_mS0_ES0__0
tanf_0
_ZN2nn2os16GetCurrentThreadEv_0
abort_0
_ZN2nn6socket12FreeAddrInfoEP8addrinfo_0
_ZNK5movie9MediaData8FindRectEPKcPiS3_S3_S3__0
_ZN2nn2os15InitializeEventEPNS0_9EventTypeEbNS0_14EventClearModeE_0
sqrtf_0
_ZN2nn5audio32InitializeAudioRendererParameterEPNS0_22AudioRendererParameterE_0
_ZN2nn2os13FinalizeEventEPNS0_9EventTypeE_0
_Znwm_0
_ZN2nn2os12TryLockMutexEPNS0_9MutexTypeE_0
_ZN2nn5audio36GetAudioRendererConfigWorkBufferSizeERKNS0_22AudioRendererParameterE_0
_ZN2nn2os20ChangeThreadPriorityEPNS0_10ThreadTypeEi_0
_ZdlPv_0
__nnDetailNintendoSdkNsoFile_0
_ZN2nn2os22GetSystemTickFrequencyEv_0
_ZN2nn5audio29InitializeAudioRendererConfigEPNS0_19AudioRendererConfigERKNS0_22AudioRendererParameterEPvm_0
_ZN2nn3err9ShowErrorENS_6ResultE_0
_ZN2nn5audio19OpenDefaultAudioOutEPNS0_8AudioOutERKNS0_17AudioOutParameterE_0
__cxa_guard_acquire_0
_ZN2nn2os19InitializeSemaphoreEPNS0_13SemaphoreTypeEii_0
_ZN2nn2os10ClearEventEPNS0_9EventTypeE_0
_ZN2nn2fs10DeleteFileEPKc_0
_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc_0
_ZN2nn6socket8InetNtoaE7in_addr_0
_ZN2nn2oe18GetPerformanceModeEv_0
_ZN2nn2fs13MountSaveDataEPKcRKNS_7account3UidE_0
memcmp_0
_ZN2nn2os11SleepThreadENS_8TimeSpanE_0
_ZN5movie6Buffer4SizeEv_0
_ZN2nn5audio28GetAudioOutBufferDataPointerEPKNS0_14AudioOutBufferE_0
_ZN2nn3hid18SetNpadJoyHoldTypeENS0_15NpadJoyHoldTypeE_0
_ZN2nn3mem17StandardAllocator8AllocateEm_0
_ZN5movie9ExtractorC1ENS_13ContainerTypeE_0
ferror_0
_ZN2nn5audio23GetAudioOutChannelCountEPKNS0_8AudioOutE_0
_ZN2nn5audio19ListAudioDeviceNameEPNS0_15AudioDeviceNameEi_0
rand_0
_ZN2nn3aoc10InitializeEv_0
_ZN2nn2vi18SetLayerVisibilityEPNS0_5LayerEb_0
strstr_0
_ZN2nn3err19ApplicationErrorArg20SetFullScreenMessageEPKc_0
__errno_location_0
_ZN2nn2vi19SetLayerScalingModeEPNS0_5LayerENS0_11ScalingModeE_0
_ZN2nn2oe16GetOperationModeEv_0
_ZN2nn4util11ReferSymbolEPKv_0
_ZN2nn2fs22QueryMountRomCacheSizeEPm_0
log10f_0
_ZN2nn2fs14CommitSaveDataEPKc_0
_ZN2nn8settings12LanguageCode4MakeENS0_8LanguageE_0
_ZN2nn3hid23GetSixAxisSensorHandlesEPNS0_19SixAxisSensorHandleEiRKjNS_4util10BitFlagSetILi32ENS0_12NpadStyleTagEEE_0
pow_0
_Znam_0
powf_0
_ZN2nn6socket6ListenEii_0
_ZN2nn2os11UnlockMutexEPNS0_9MutexTypeE_0
_ZN2nn2oe44SetPerformanceModeChangedNotificationEnabledEb_0
_ZN2nn4diag6detail18OnAssertionFailureENS0_13AssertionTypeEPKcS4_S4_iS4_z_0
strlen_0
_ZN2nn2fs15CreateDirectoryEPKc_0
memmove_0
fprintf_0
_ZN2nn3mem17StandardAllocatorC1Ev_0
_ZSt13set_terminatePFvvE_0
_ZN2nn6socket4BindEiPK8sockaddrj_0
_ZN2nn4nifm26GetCurrentPrimaryIpAddressEP7in_addr_0
exit_0
__nnmusl_fini_dso_0
_ZN2nn2fs8OpenFileEPNS0_10FileHandleEPKci_0
_ZN2nn4time23StandardUserSystemClock14GetCurrentTimeEPNS0_9PosixTimeE_0
_ZN2nn5audio17OpenAudioRendererEPNS0_19AudioRendererHandleEPNS_2os11SystemEventERKNS0_22AudioRendererParameterEPvm_0
_ZN2nn2oe22PopNotificationMessageEv_0
atof_0
_ZN2nn5audio16AcquireVoiceSlotEPNS0_19AudioRendererConfigEPNS0_9VoiceTypeEiiNS0_12SampleFormatEiPKvm_0
strrchr_0
_ZN2nn5audio26RequestUpdateAudioRendererENS0_19AudioRendererHandleEPKNS0_19AudioRendererConfigE_0
_ZN2nn4time10InitializeEv_0
_ZN2nn2fs13ReadDirectoryEPlPNS0_14DirectoryEntryENS0_15DirectoryHandleEl_0
_ZdaPv_0
_ZNK2nn4util16BinaryFileHeader13GetFirstBlockEv_0
__nnmusl_init_dso_0
_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev_0
getc_0
_ZN2nn2os13SetThreadNameEPNS0_10ThreadTypeEPKc_0
_ZN2nn5audio16AppendWaveBufferEPNS0_9VoiceTypeEPKNS0_10WaveBufferE_0
_ZN2nn5audio20AppendAudioOutBufferEPNS0_8AudioOutEPNS0_14AudioOutBufferE_0
_ZN2nn2os17FinalizeMultiWaitEPNS0_13MultiWaitTypeE_0
_ZN2nn5audio21GetReleasedWaveBufferEPNS0_9VoiceTypeE_0
_ZN2nn3err19ApplicationErrorArgC1Ev_0
_ZN2nn3mem17StandardAllocator4FreeEPv_0
clearerr_0
_ZN2nv20SetGraphicsAllocatorEPFPvmmS0_EPFvS0_S0_EPFS0_S0_mS0_ES0__0
_ZN5movie7DecoderC1ENS_11DecoderTypeENS_19DecoderOutputFormatE_0
_ZN2nn5audio12IsVoiceValidEPKNS0_9VoiceTypeE_0
_ZN2nn5audio29IsValidAudioRendererParameterERKNS0_22AudioRendererParameterE_0
_ZN2nn5audio30GetAudioRendererWorkBufferSizeERKNS0_22AudioRendererParameterE_0
_ZN2nn2oe31LeaveExitRequestHandlingSectionEv_0
_ZN2nn3err19ApplicationErrorArg16SetDialogMessageEPKc_0
_ZN2nn3hid24SetSupportedNpadStyleSetENS_4util10BitFlagSetILi32ENS0_12NpadStyleTagEEE_0
fileno_0
_ZN2nn5audio17GetSampleByteSizeENS0_12SampleFormatE_0
_ZN2nn5audio15AcquireFinalMixEPNS0_19AudioRendererConfigEPNS0_12FinalMixTypeEi_0
_ZN2nn5audio25GetReleasedAudioOutBufferEPNS0_8AudioOutE_0
atanf_0
_ZN5movie6Buffer18SetDataAndCapacityEPvm_0
_ZN2nn3err19ApplicationErrorArg29SetApplicationErrorCodeNumberEj_0
strncmp_0
cosf_0
_ZN2nn5codec11OpusDecoderC1Ev_0
_ZN2nn2os18DestroySystemEventEPNS0_15SystemEventTypeE_0
_ZN2nn3hid12GetNpadStateEPNS0_16NpadJoyDualStateERKj_0
strchr_0
_ZN2nn5audio23RequestAttachMemoryPoolEPNS0_14MemoryPoolTypeE_0
_ZN2nn6socket6AcceptEiP8sockaddrPj_0
_ZNK5movie9MediaData9FindInt32EPKcPi_0
_ZNK2nn4util16BinaryFileHeader11IsRelocatedEv_0
_ZN2nn2os9LockMutexEPNS0_9MutexTypeE_0
_ZN2nn3hid14InitializeNpadEv_0
_ZN2nn3hid15GetNpadStyleSetERKj_0
_ZN5movie6Buffer8CapacityEv_0
_ZN2nn5audio16ReleaseVoiceSlotEPNS0_19AudioRendererConfigEPNS0_9VoiceTypeE_0
vsprintf_0
_ZN2nn7account9CloseUserERKNS0_10UserHandleE_0
_ZN2nn2oe18GetDesiredLanguageEv_0
_ZNSt11logic_errorC2EPKc_0
_ZN2nn6socket4SendEiPKvmi_0
_ZN2nn5audio17GetVoicePlayStateEPKNS0_9VoiceTypeE_0
_ZN2nn2vi11CreateLayerEPPNS0_5LayerEPNS0_7DisplayEiiNS0_11PixelFormatE_0
_ZNK2nn3mem17StandardAllocator9GetSizeOfEPKv_0
_ZN2nn6socket11GetAddrInfoEPKcS2_PK8addrinfoPPS3__0
strtok_0
_ZN2nn2os16AcquireSemaphoreEPNS0_13SemaphoreTypeE_0
_ZN2nn2fs10CreateFileEPKcl_0
_ZN2nn2fs29SetResultHandledByApplicationEb_0
_ZN2nn3hid22SetSupportedNpadIdTypeEPKjm_0
_ZN2nn3aoc8FinalizeEv_0
_ZN2nn7account10InitializeEv_0
_ZN2nn2os9WaitEventEPNS0_9EventTypeE_0
_init_libc1_0
_ZN2nn5audio17SetVoicePlayStateEPNS0_9VoiceTypeENS1_9PlayStateE_0
_ZN2nn2fs26DeleteDirectoryRecursivelyEPKc_0
_ZN2nn6socket6SocketEiii_0
sscanf_0
_ZN2nn5audio29SetVoiceBiquadFilterParameterEPNS0_9VoiceTypeEiRKNS0_21BiquadFilterParameterE_0
_ZN2nn2oe42SetOperationModeChangedNotificationEnabledEb_0
_ZN2nn3mem17StandardAllocator10ReallocateEPvm_0
atoi_0
_ZN2nn2os11GetHostArgvEv_0
_ZN2nn5audio13AcquireSubMixEPNS0_19AudioRendererConfigEPNS0_10SubMixTypeEii_0
_ZN2nn2fs12SetAllocatorEPFPvmEPFvS1_mE_0
_ZN2nn2fs14CloseDirectoryENS0_15DirectoryHandleE_0
fread_0
_ZN2nn2os19InitializeMultiWaitEPNS0_13MultiWaitTypeE_0
_ZN2nn2oe20GetCurrentFocusStateEv_0
_ZN2nn2os11StartThreadEPNS0_10ThreadTypeE_0
__cxa_pure_virtual_0
_ZN2nn2os19ReceiveMessageQueueEPmPNS0_16MessageQueueTypeE_0
qsort_0
fwrite_0
memset_0
_ZN2nn2fs9FlushFileENS0_10FileHandleE_0
_ZN2nn5audio27InitializeAudioOutParameterEPNS0_17AudioOutParameterE_0
_ZNK2nn4util16BinaryFileHeader7IsValidEliii_0
acosf_0
_ZN2nn2os19AllocateMemoryBlockEPmm_0
_ZN2nn4util16BinaryFileHeader13GetFirstBlockEv_0
_ZN2nn6socket8InetPtonEiPKcPv_0
_ZN2nn5audio18GetWaveBufferCountEPKNS0_9VoiceTypeE_0
_ZN2nn6socket8ShutdownEii_0
_ZNKSt11logic_error4whatEv_0
_ZN2nv18InitializeGraphicsEPvm_0
_ZN2nn3hid25InitializeVibrationDeviceERKNS0_21VibrationDeviceHandleE_0
_ZN2nn5audio25GetVoicePlayedSampleCountEPKNS0_9VoiceTypeE_0
strncasecmp_0
_ZN2nn2fs12GetEntryTypeEPNS0_18DirectoryEntryTypeEPKc_0
_ZN2nn6socket8RecvFromEiPvmiP8sockaddrPj_0
_ZN2nn6socket6SendToEiPKvmiPK8sockaddrj_0
_ZN2nn2fs28SetLocalApplicationAccessLogEb_0
srand_0
_ZN2nn2fs8ReadFileENS0_10FileHandleElPvm_0
_ZN5movie6Buffer6OffsetEv_0
sprintf_0
_ZN2nn4pctl10InitializeEv_0
bsearch_0
_ZN2nn3hid18SendVibrationValueERKNS0_21VibrationDeviceHandleERKNS0_14VibrationValueE_0
_ZN2nn2os13DestroyThreadEPNS0_10ThreadTypeE_0
_ZN2nn5audio13StartAudioOutEPNS0_8AudioOutE_0
_ZN5movie6BufferD1Ev_0
_ZN5movie9MediaDataD1Ev_0
_ZN2nn3hid21GetSixAxisSensorStateEPNS0_18SixAxisSensorStateERKNS0_19SixAxisSensorHandleE_0
_ZN2nn5audio13SetVoicePitchEPNS0_9VoiceTypeEf_0
_ZN2nn4diag6detail18OnAssertionFailureENS0_13AssertionTypeEPKcS4_S4_i_0
_ZN2nn2os11SignalEventEPNS0_9EventTypeE_0
sinf_0
_ZN2nn2os17SetMemoryHeapSizeEm_0
expf_0
_ZN2nn2os22InitializeMessageQueueEPNS0_16MessageQueueTypeEPmm_0
_ZN2nn7account19OpenPreselectedUserEPNS0_10UserHandleE_0
_ZN2nn2os10WaitThreadEPNS0_10ThreadTypeE_0
_ZN2nn2os19TryAcquireSemaphoreEPNS0_13SemaphoreTypeE_0
_ZN2nn3hid25GetVibrationDeviceHandlesEPNS0_21VibrationDeviceHandleEiRKjNS_4util10BitFlagSetILi32ENS0_12NpadStyleTagEEE_0
_ZN2nn4diag6detail7LogImplERKNS0_11LogMetaDataEPKcz_0
_ZN2nn2os7WaitAnyEPNS0_13MultiWaitTypeE_0
_ZN2nn5audio12StopAudioOutEPNS0_8AudioOutE_0
_ZN2nn5audio18StartAudioRendererENS0_19AudioRendererHandleE_0
atan2f_0
printf_0
_ZN2nn2fs13OpenDirectoryEPNS0_15DirectoryHandleEPKci_0
asinf_0
_ZN5movie6Buffer8SetRangeEii_0
_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm_0
_ZN2nn3err19ApplicationErrorArg15SetLanguageCodeERKNS_8settings12LanguageCodeE_0
_ZN5movie9MediaDataC1Ev_0
_ZN2nn4diag34InitializeApplicationAbortObserverEv_0
_ZN2nn5audio23GetAudioOutSampleFormatEPKNS0_8AudioOutE_0
_ZN2nn2os13FinalizeMutexEPNS0_9MutexTypeE_0
logf_0
_ZN2nn2os25InitializeMultiWaitHolderEPNS0_19MultiWaitHolderTypeEPNS0_9EventTypeE_0
__cxa_guard_release_0
_ZN2nn5audio21GetAudioOutSampleRateEPKNS0_8AudioOutE_0
strcmp_0
_ZN2nn5audio18SetSubMixMixVolumeEPNS0_10SubMixTypeEPNS0_12FinalMixTypeEfii_0
_ZN5movie6BufferC1Ev_0
_ZN2nn4util16BinaryFileHeader18GetRelocationTableEv_0